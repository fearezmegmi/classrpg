#if defined __game_function_uncategorized
	#endinput
#endif
#define __game_function_uncategorized

// shook
fpublic OnSetVehiclePos(vehicleid, Float: x, Float: y, Float: z)
{
	if(SemiValidVehicle(vehicleid))
	{
		VehiclePos[vehicleid][0] = x;
		VehiclePos[vehicleid][1] = y;
		VehiclePos[vehicleid][2] = z;
	}
}

fpublic OnPutPlayerInVehicle(playerid, vehicleid, seatid)
{
	seo_carEntering[playerid] = 15;
}

// acc-
fpublic OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z)
{
	new Float:oldPosition[3];
	GetVehiclePos(vehicleid, ArrExt(oldPosition));
	
	if(!Logged(playerid))
	{
		SetVehiclePos(vehicleid, ArrExt(oldPosition));
		VehiclePos[vehicleid] = oldPosition;
		
		return 0; // deny update
	}
	
	new
		Float:moveDistance = GetDistanceBetweenPoints(ArrExt(oldPosition), new_x, new_y, new_z),
		Float:playerDistance = GetPlayerDistanceFromPoint(playerid, new_x, new_y, new_z)
	;
	
	if(moveDistance >= 15.0 && playerDistance <= 5.0 && !IsTrailer(vehicleid))
	{
		SetVehiclePos(vehicleid, ArrExt(oldPosition));
		VehiclePos[vehicleid] = oldPosition;
		
		seo_carTeleportFlood[playerid]++;
		seo_carTeleportTime[playerid] += 2;
		
		format(_tmpString, 128, "<< AntiCheat: [%d]%s - Jármû teleport: %d (vehDist: %.0f, pla2veh: %.0f) - %dx >>", playerid, Nev(playerid), vehicleid, moveDistance, playerDistance, seo_carTeleportFlood[playerid]);
		Log("Cheat", _tmpString);
		
		if(seo_carTeleportFlood[playerid] >= 3)
			ABroadCast(COLOR_LIGHTRED, _tmpString, 1);
		
		return 0; // deny update
	}
	
	VehiclePos[vehicleid][0] = new_x;
	VehiclePos[vehicleid][1] = new_y;
	VehiclePos[vehicleid][2] = new_z;
	
	return 1;
	/*new Float:pos[3];
	GetVehiclePos(vehicleid, ArrExt(pos));
	
	if(VehiclePos[vehicleid][0] != 0.0 && VehiclePos[vehicleid][1] != 0.0 && VehiclePos[vehicleid][2] != 0.0 && GetVehicleTrailer(vehicleid) < 1)
	{
		new
			Float:dist = GetVehicleDistanceFromPoint(vehicleid, ArrExt( VehiclePos[vehicleid] )),
			Float:distp = GetPlayerDistanceFromPoint(playerid, ArrExt(pos));
			
		if(dist >= 15.0 && distp <= 15.0)
		{
			seo_carTeleportFlood[playerid]++;
			seo_carTeleportTime[playerid] += 2;
			
			format(_tmpString, 128, "<< AntiCheat: [%d]%s - Jármû teleport: %d (%.0f, %.0f) - %dx >>", playerid, Nev(playerid), vehicleid, dist, distp, seo_carTeleportFlood[playerid]);
			Log("Cheat", _tmpString);
			
			if(seo_carTeleportFlood[playerid] >= 2)
				ABroadCast(COLOR_LIGHTRED, _tmpString, 1);
			
			//if(seo_carTeleportFlood[playerid] >= 5)
			//	SeeBan(playerid, .oka = "Cheat (CT)", .szoveg = true);
			
			SetVehiclePos(vehicleid, ArrExt( VehiclePos[vehicleid] ));
		}
		else
			VehiclePos[vehicleid] = pos;
	}
	else	
		VehiclePos[vehicleid] = pos;
	
	return 1;*/
}

fpublic OnVehicleSpawn(vehicleid)
{
	GetVehiclePos(vehicleid, VehiclePos[vehicleid][0], VehiclePos[vehicleid][1], VehiclePos[vehicleid][2]);
}

SQLResult( bool: store )
{
	if(store)
		return 1;
	/*if(store)
	{
		if(MySQLDebug)
			printf("[SQL] Storing result...");
			
		if(sqlResultStored) mysql_free_result(), print("SQL-STORE");
		mysql_store_result();
		sqlResultStored = true;
	}
	else if( sqlResultStored )
	{
		if(MySQLDebug)
			printf("[SQL] Freeing result...");
			
		mysql_free_result();
		sqlResultStored = false;
	}*/
	return 1;
}

//ajandek
new ajandekok[5] = {19054, 19055, 19056, 19057, 19058};
enum ajInfo
{
	bool:gVan,
	gTulajUid,
	Float:gzPos,
	Float:gxPos,
	Float:gyPos

}
new Gift[MAX_GIFTS][ajInfo];

fpublic KuszasVege(playerid,stilus)
{
	//Msg(playerid, "DEBUG: Visszarakva animba.");
	SetPlayerWalkingStyle(playerid, 0);
	AnimbaRak(playerid);
	
}

stock GetFreeGiftPos() // a px és py egyben a kezdõ pozíció is!
{
	new Float:px=1775.214;
	new Float:py=-2543.559;
	new i, j, darab, Float:tav, Float:szog, Float:d, Float:x, Float:y;
	new id;
	for(i = 0; i < GIFT_MAX_CIRCLES; i++)
	{
		darab = GIFT_START + i * GIFT_STEP;
		tav = GIFT_POS_START + float(i) * GIFT_POS_STEP;
		szog = 360.0 / float(darab);
		
		for(d = 0.0; d < 360.0; d += szog)
		{
			x = floatsin(d, degrees) * tav;
			y = floatcos(d, degrees) * tav;
				
			
			if(!Gift[j][gVan])
			{
				//px += x;
				//py += y;
				Gift[id][gVan] = true;
				Gift[id][gTulajUid] = NINCS;
				Gift[id][gxPos] = px+x;
				Gift[id][gyPos] = py+y;
				Gift[id][gzPos] = 13.246;
				new rand=random(5);
				CreateDynamicObject(ajandekok[rand], px+x, py+y, 13.246, 0.0, 0.0,0);
				//SendFormatMessage(16,0xFFFFFFAA,"x: %f y: %f",px,py);
				//SendFormatMessage(16,0xFFFFFFAA,"DB: %d",id);
				id=j;
			}
		
			
			j++;
		}
	}
	
	
	return 1;
}



stock GenQuerySlot( &id )
{
	id = -1;
	
	do
	{
		id++;
		
		if( !SQL[ id ][ qBusy ] )
			break;
	}
	while( id != (MAX_QUERY - 1) );
}

fpublic OnMysqlQuery(resultid) //, spareid, MySQL:handle)
{
	if(resultid != NINCS)
	{
		SQLResult( true );
		
		ProcessSQL( resultid );
		SQL[ resultid ][ qBusy ] = false;
		
		SQLResult( false );
	}
	
	return 1;
}

stock doQuery( keres[], type = 0, extraID_1 = NINCS, extraID_2 = NINCS, extraID_3 = NINCS, extraID_4 = NINCS )
{
	new id = NINCS;
	if(type)
	{
		GenQuerySlot( id );
		
		SQL[ id ][ qBusy ] = true;
		SQL[ id ][ qType ] = type;
		SQL[ id ][ qParam1 ] = extraID_1;
		SQL[ id ][ qParam2 ] = extraID_2;
		SQL[ id ][ qParam3 ] = extraID_3;
		SQL[ id ][ qParam4 ] = extraID_4;
		
		/*if(strlen(keres) < 256)
			printf("[Query-T] SID: %d, Type: %d, eID: %d, eID2: %d, eID3: %d - Query: %s", id, type, extraID, extraID_2, extraID_3, keres);
		else
			printf("[Query-T] SID: %d, Type: %d, eID: %d, eID2: %d, eID3: %d - Query: Túl hosszú", id, type, extraID, extraID_2, extraID_3);*/
	}
	/*else if(strlen(keres) < 256)
		printf("[Query-NT] SID: %d, Type: %d, eID: %d, eID2: %d, eID3: %d - Query: %s", id, type, extraID, extraID_2, extraID_3, keres);
	else
		printf("[Query-NT] SID: %d, Type: %d, eID: %d, eID2: %d, eID3: %d - Query: Túl hosszú", id, type, extraID, extraID_2, extraID_3);*/
	
	//mysql_function_query( sql_ID, keres, false, "OnMysqlQuery", "d", id );
	sql_query(keres, "OnMysqlQuery", "d", id);
	
	return 1;
}

stock ProcessSQL( id ) //psql omq
{
	#define s:%1: SQL[id][q%1]
	
	//printf("[Query-T] Processed - SID: %d, Type: %d, eID: %d, eID2: %d, eID3: %d", id, s:Type: , s:Param: , s:Param2: , s:Param3: );
	
	switch( s:Type: )
	{
		case SQL_LOAD_HOUSE: LoadHouse( false );
		case SQL_LOAD_CAR: LoadCar( false );
		case SQL_LOAD_BIZ: LoadBizz( false );
		case SQL_LOAD_TERULET: TeruletekBetoltese( false );
		case SQL_LOAD_GARAZS: LoadGarazs( false );
		case SQL_LOAD_CARPRICE: LoadArak( false );
		case SQL_LOAD_RACE: ProcessedSQL( SQL_LOAD_RACE, s:Param1: , s:Param2: );
		case SQL_LOAD_CMD : ParancsBetoltes( false );
		//case SQL_LOAD_CMD2 : ParancsBetoltes2( false );
		
		case SQL_SYSTEM_KAPU: KapuAkcio( s:Param1: , s:Param2: , s:Param3: , false );
		case SQL_SYSTEM_VERSION: LoadVersion( false );
		case SQL_SYSTEM_UCP: UCP_Check( false, s:Param1: );
		
		case SQL_FRACTION_COUNT_LEADER: LeaderFrissites( s:Param1: , false );
		case SQL_FRACTION_COUNT_MEMBER: LetszamFrissites( s:Param1: , false );
		
		case SQL_PLAYER_LOGIN: { AdatBetoltesSQL( s:Param1: , false ); OnPlayerPreLogin( s:Param1: ); S:OnPlayerLogin( s:Param1: ); }
		case SQL_ADATLEKERES: {AdatLekeres(s:Param1: , ADAT_TYPE_AKTIVITAS, false);}
		case SQL_PLAYER_STAT: StatMentes( s:Param1: , s:Param2: , false , s:Param3: );
		case SQL_PLAYER_PRECONFIGURE: PreConfigure( s:Param1: , s:Param2: );
		case SQL_LOAD_BERSZEF: LoadBerSzef( false );
		case SQL_LOAD_BUTOROK: LoadButor( false );
		case SQL_KAPU_IDTOLTES: KapuIDMegadas( s:Param1: );
		
		case SQL_CC_LOGIN: CC_Login(0, s:Param1:, "", "");
		case SQL_CC_BAN: CheckForCodeBan(0, s:Param1:, s:Param2:, "");
		
		case SQL_CMD_CHEAT: ReportPlayer(s:Param1:, false);
	}
	
	return 1;
}

stock KapuIDMegadas( kapuid )
{
	Kapu[kapuid][kUID] = sql_get_int(0);
	return 1;
}

stock ProcessedSQL( type, eID = NINCS, eID2 = NINCS, eID3 = NINCS ) // ppsql
{
	#pragma unused eID3
	switch( type )
	{
		case SQL_LOAD_RACE:
		{
			new rows, fields;
			sql_data(rows, fields);
			
			if( rows == 1 )
			{
				new slot = eID2;

				sql_get_str_len(53, RaceInfo[slot][rSaveNev], 128);
				sql_get_str_len(54, RaceInfo[slot][rNev], 128);
				RaceInfo[slot][rCP] = sql_get_int(55);

				new tmp[64];

				for(new x = 0; x <= 52; x++)
				{
					sql_get_str(x, tmp);

					if(x == 0)
						sscanf(tmp, "p<,>a<f>[3]", RaceStart[slot]);
					else if(x == 1)
						sscanf(tmp, "p<,>a<f>[3]", RaceCel[slot]);
					else
						sscanf(tmp, "p<,>a<f>[3]", RaceCP[slot][x-2]);
				}

				RaceInfo[slot][rStatusz] = RACE_BETOLTVE;
				
				if( ValidPlayer( eID ) )
					SendFormatMessage(eID, COLOR_WHITE, "Race %s betöltve - Checkpointok: %d [slot: %d]", RaceInfo[slot][rNev], RaceInfo[slot][rCP], slot);
			}
			else if( ValidPlayer( eID ) )
				 Msg(eID, "Nincs ilyen verseny!");
		}
	}
	
	return 1;
}

// stockok
/*stock Feliratok_Init()
{ //befejezetlen
	
}*/

stock GraffitiHely()
{
	new hely = NINCS;
	for(new i = 1; i < MAXGRAFFITI; i++)
	{
		if(!Graffiti[i][gVan])
		{
			return i;
		}
	}
	return hely;
}
stock GraffitiVan()
{
	new mennyi = NINCS;
	for(new i = 1; i < MAXGRAFFITI; i++)
	{
		if(Graffiti[i][gVan])
		{
			mennyi++;
		}
	}
	return mennyi;
}
stock GraffitiSajat(playerid)
{
	new mennyi = NINCS;
	for(new i = 1; i < MAXGRAFFITI; i++)
	{
		if(PlayerInfo[playerid][pID] == Graffiti[i][gVId])
		{
			mennyi++;
		}
	}
	return mennyi;
}
stock CheckGraffiti()
{
	new torolt = 0;
	for(new i = 1; i < MAXGRAFFITI; i++)
	{
		if(Graffiti[i][gIdo] < UnixTime && Graffiti[i][gVId] != 0)
		{
			new fName[64];
			format(fName, 64, "data/graffiti/%d.ini", i);
			fremove(fName);
					
			DestroyDynamicObject(Graffiti[i][gObject]);
			Graffiti[i][gVan] = false;
			Graffiti[i][gVId] = 0;
		
			torolt++;
		}
	}
	
	ABroadCastFormat(COLOR_RED, 5555, "<< %d db Graffiti törölve lett >>", torolt);
	printf("%d db Graffiti torolve", torolt);
	
	return 1;
}

stock GPShely()
{
	for(new i = 0; i < MAXGPS; i++)
	{
		if(!GPS[i][gVan])
			return i;
	}
	return NINCS;
}
stock SaveGPS()
{
	new File:fName = fopen("Config/gpslista.cfg", io_write);

	new mentes[256];
	
	for(new i = 0; i < MAXGPS; i++)
	{
		if(GPS[i][gVan])
		{
			format(mentes, sizeof(mentes), "%d|%s|%f|%f|%f\n", GPS[i][gKategoria], GPS[i][gNev], GPS[i][gPosX], GPS[i][gPosY], GPS[i][gPosZ]);
			fseek(fName, 0, seek_end);
			fwrite(fName, mentes);
			mentes[0] = EOS;
		}
	}
	
	fclose(fName);
}
stock GPSkat(kat)
{
	new table[4000];
	for(new i = 0; i < MAXGPS; i++)
	{
		if(GPS[i][gVan] && GPS[i][gKategoria] == kat)
		{
			if(i == 0)
				Format(table, "%s\n", GPS[i][gNev]);
			else
				Format(table, "%s%s\n", table, GPS[i][gNev]);
		}
	}
	return table;
}

stock LoadGPS()
{
	new File:fName = fopen("Config/gpslista.cfg", io_read);
	
	new sorok[128], i;
	while(fread(fName, sorok))
    {

		new gpsadat[5][32];
		split(sorok, gpsadat, '|');

		GPS[i][gKategoria] = strval(gpsadat[0][0]);
		GPS[i][gVan] = true;
		format(GPS[i][gNev], 128, gpsadat[1]);
		GPS[i][gPosX] = floatstr(gpsadat[2]);
		GPS[i][gPosY] = floatstr(gpsadat[3]);
		GPS[i][gPosZ] = floatstr(gpsadat[4]);
		printf("[GPS] Név: %s - Kategória: %d - X: %f - Y: %f - Z: %f", GPS[i][gNev], GPS[i][gKategoria], GPS[i][gPosX], GPS[i][gPosY], GPS[i][gPosZ]);
		i++;
    }
	fclose(fName);
}
stock GPSmenu(playerid)
{
	if(Admin(playerid, 6))
		ShowPlayerDialog(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, "GPS lokátor", "Bekapcsolás/Kikapcsolás\nLista\n------------------------------------------------------------\nHázam\nKocsim\n------------------------------------------------------------\nHáz\nGarázs\nATM\nBiznisz\nBenzinkút\nRace\nPozíció\n------------------------------------------------------------\nTöröl\nAdmin", "Választ", "Kilépés");
	else
		ShowPlayerDialog(playerid, DIALOG_GPS, DIALOG_STYLE_LIST, "GPS lokátor", "Bekapcsolás/Kikapcsolás\nLista\n------------------------------------------------------------\nHázam\nKocsim\n------------------------------------------------------------\nHáz\nGarázs\nATM\nBiznisz\nBenzinkút\nRace\nPozíció\n------------------------------------------------------------\nTöröl", "Választ", "Kilépés");
}

stock HazUrites(haz)
{
	// hHel, hArm, hTakings, hKaja, hAlma, hCigi, hKokain, hHeroih, hMarihuana, hMati, hFegyver, hLoszerTipus, hLoszerMennyiseg, hMellenyek, hRuhak, hArany
	HouseInfo[haz][hHel] = 0;
	HouseInfo[haz][hArm] = 0;
	HouseInfo[haz][hTakings] = 0;
	HouseInfo[haz][hKaja] = 0;
	HouseInfo[haz][hAlma] = 0;
	HouseInfo[haz][hCigi] = 0;
	HouseInfo[haz][hKokain] = 0;
	HouseInfo[haz][hHeroin] = 0;
	HouseInfo[haz][hMarihuana] = 0;
	HouseInfo[haz][hMati] = 0;
	HouseInfo[haz][hArany] = 0;
	HouseInfo[haz][hKulcsVan][0] = NINCS;
	HouseInfo[haz][hKulcsVan][1] = NINCS;
	
	for(new s = 0; s < 10; s++)
	{
		HouseInfo[haz][hFegyver][s] = 0;
		HouseInfo[haz][hLoszerTipus][s] = 0;
		HouseInfo[haz][hLoszerMennyiseg][s] = 0;
		HouseInfo[haz][hMellenyek][s] = 0;
		HouseInfo[haz][hRuhak][s] = 0;
	}
	
	HazUpdate(haz, HAZ_Hel, HAZ_Arm, HAZ_Takings, HAZ_Kaja, HAZ_Alma, HAZ_Cigi, HAZ_Kokain, HAZ_Heroin, HAZ_Marihuana, HAZ_Mati, HAZ_Arany, HAZ_Fegyver, HAZ_Loszer, HAZ_Mellenyek, HAZ_Ruhak, HAZ_Kulcsok1, HAZ_Kulcsok2);
}

stock IsPlayerFalling(playerid)
{
    new index = GetPlayerAnimationIndex(playerid);
	return IsFallingAnimation(index);
}
stock AdminHelp(playerid,szint)
{
	new jognev[32];
	if(szint == 0)
	{
		if(IsAS(playerid))
		{
			jognev = "Adminsegéd";
			SendFormatMessage(playerid,COLOR_YELLOW, "%s: %s",jognev,ashelp1);
			SendFormatMessage(playerid,COLOR_YELLOW, "%s: %s",jognev,ashelp2);
		}
	}
	if(szint == 1)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			jognev = "Admin(1)";
			SendFormatMessage(playerid,COLOR_LIGHTRED, "%s: %s",jognev,admin1a);
			SendFormatMessage(playerid,COLOR_LIGHTRED, "%s: %s",jognev,admin1b);
			SendFormatMessage(playerid,COLOR_LIGHTRED, "%s: %s",jognev,admin1c);
			SendFormatMessage(playerid,COLOR_LIGHTRED, "%s: %s",jognev,admin1d);
		}
	}
	if(szint == 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2)
		{
			jognev = "Admin(2)";
			SendFormatMessage(playerid,COLOR_LIGHTRED, "%s: %s",jognev,admin2);		
		}
	}
	if(szint == 3)
	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
			jognev = "Admin(3)";
			SendFormatMessage(playerid,COLOR_LIGHTRED, "%s: %s",jognev,admin3a);
			SendFormatMessage(playerid,COLOR_LIGHTRED, "%s: %s",jognev,admin3b);
			SendFormatMessage(playerid,COLOR_LIGHTRED, "%s: %s",jognev,admin3c);		
		}
	}
	if(szint == 4)
	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
			jognev = "Admin(4)";
			SendFormatMessage(playerid,COLOR_LIGHTRED, "%s: %s",jognev,admin4);
		}
	}
	if(szint == 5)
	{
		if(PlayerInfo[playerid][pAdmin] >= 5)
		{
			jognev = "Admin(5)";
			SendFormatMessage(playerid,COLOR_LIGHTRED, "%s: %s",jognev,admin5);
		}
	}
	if(szint == 6)
	{
		if(PlayerInfo[playerid][pAdmin] >= 6)
		{
			jognev = "FõadminSegéd(6)";
			SendFormatMessage(playerid,COLOR_NAR, "%s: %s",jognev,admin6a);
			SendFormatMessage(playerid,COLOR_NAR, "%s: %s",jognev,admin6b);
		}
	}
	if(szint == 1337)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1337)
		{
			jognev = "FõAdmin(1337)";
			SendFormatMessage(playerid,COLOR_DARKYELLOW, "%s: %s",jognev,foadmin1);
			SendFormatMessage(playerid,COLOR_DARKYELLOW, "%s: %s",jognev,foadmin2);
			SendFormatMessage(playerid,COLOR_DARKYELLOW, "%s: %s",jognev,foadmin3);
			SendFormatMessage(playerid,COLOR_DARKYELLOW, "%s: %s",jognev,foadmin4);
			SendFormatMessage(playerid,COLOR_DARKYELLOW, "%s: %s",jognev,foadmin5);
			SendFormatMessage(playerid,COLOR_DARKYELLOW, "%s: %s",jognev,foadmin6);
		}
	}
	if(szint == 1338)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1338)
		{
			jognev = "SuperAdmin(1338)";
			SendFormatMessage(playerid,COLOR_ORANGE, "%s: %s",jognev,superadmin1);
			SendFormatMessage(playerid,COLOR_ORANGE, "%s: %s",jognev,superadmin2);
		}
	}
	if(szint == 1339)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1339)
		{
			jognev = "AdminController(1339)";
			SendFormatMessage(playerid,COLOR_LIGHTGREEN, "%s: %s",jognev,admincontroller);
		}
	}
	if(szint == 1340)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1340)
		{
			jognev = "FõAdminController(1340)";
			SendFormatMessage(playerid,COLOR_GREEN, "%s: %s",jognev,foadmincontroller);
		}
	}
	if(szint == 5555)
	{
		if(Admin(playerid, 5555) || IsScripter(playerid))
		{
			jognev = "Scripter(5555)";
			SendFormatMessage(playerid,COLOR_BLUE, "%s: %s",jognev,scripter1);
			SendFormatMessage(playerid,COLOR_BLUE, "%s: %s",jognev,scripter2);
			SendFormatMessage(playerid,COLOR_BLUE, "%s: %s",jognev,scripter3);
		}
	}
}
stock SkillLevel(szam)
{
	new level;
	
	if(szam >= 0 && szam <= 50) level = 1;
	else if(szam >= 51 && szam <= 100) level = 2;
	else if(szam >= 101 && szam <= 150) level = 3;
	else if(szam >= 151 && szam <= 200) level = 4;
	else if(szam >= 201 && szam <= 300) level = 5;
	else if(szam >= 301 && szam <= 500) level = 6;
	else if(szam >= 501 && szam <= 700) level = 7;
	else if(szam >= 701 && szam <= 800) level = 8;
	else if(szam >= 801 && szam <= 900) level = 9;
	else if(szam >= 901 && szam <= 1200) level = 10;
	else if(szam >= 1201 && szam <= 1400) level = 11;
	else if(szam >= 1401 && szam <= 1800) level = 12;
	else if(szam >= 1801 && szam <= 1900) level = 13;
	else if(szam >= 1901 && szam <= 2200) level = 14;
	
	else if(szam >= 2201) level = 15;
	else level = 1;

	return level;
}

stock FrakcioFelhivas(playerid)
{
	new fktag = PlayerInfo[playerid][pMember];
	if(!Civil(playerid) && PlayerInfo[playerid][pMember] != 0 && FrakcioInfo[fktag][fMotd] != 0)
	{
		SendFormatMessage(playerid, COLOR_YELLOW, "<<< Frakció felhívás: %s >>>", FrakcioInfo[PlayerInfo[playerid][pMember]][fMotd]);
	}
	return 1;
}
stock MunkaNevek(targetid, job)
{
		new jtext[20];
		if(job == 1)
		{
			//if(PlayerInfo[targetid][pJob1] == MUNKA_DETEKTIV) jtext = "Detektív";
		    //else if(PlayerInfo[targetid][pJob1] == MUNKA_PROSTI) jtext = "Prostituált";
		    //else if(PlayerInfo[targetid][pJob1] == MUNKA_DROG) jtext = "Drog Díler";
		    //else if(PlayerInfo[targetid][pJob1] == MUNKA_AUTOTOLVAJ) jtext = "Autótolvaj";
			//else if(PlayerInfo[targetid][pJob1] == MUNKA_SZERELO) jtext = "Autószerelõ";
			//else if(PlayerInfo[targetid][pJob1] == MUNKA_FEGYVER) jtext = "Fegyverkereskedõ";
			if(PlayerInfo[targetid][pJob1] == MUNKA_PILOTA) jtext = "Pilóta";
			else if(PlayerInfo[targetid][pJob1] == MUNKA_FAVAGO) jtext = "Favágó";
			else if(PlayerInfo[targetid][pJob1] == MUNKA_BUS) jtext = "Buszsofõr";
			else if(PlayerInfo[targetid][pJob1] == MUNKA_UTTISZTITO) jtext = "Úttisztító";
			//else if(PlayerInfo[targetid][pJob1] == MUNKA_HACKER) jtext = "Hacker";
			else if(PlayerInfo[targetid][pJob1] == MUNKA_KAMIONOS) jtext = "Kamion Sofõr";
			else if(PlayerInfo[targetid][pJob1] == MUNKA_FARMER) jtext = "Farmer";
			else if(PlayerInfo[targetid][pJob1] == MUNKA_FUNYIRO) jtext = "Fûnyíró";
			//else if(PlayerInfo[targetid][pJob1] == MUNKA_PANCEL) jtext = "Páncélkészítõ";
			else if(PlayerInfo[targetid][pJob1] == MUNKA_KUKAS) jtext = "Kukás";
			else if(PlayerInfo[targetid][pJob1] == MUNKA_HULLA) jtext = "Hullaszállító";
			else if(PlayerInfo[targetid][pJob1] == MUNKA_PENZ) jtext = "PénzSzállító";
			else if(PlayerInfo[targetid][pJob1] == MUNKA_VADASZ) jtext = "Vadász";
			else if(PlayerInfo[targetid][pJob1] == MUNKA_BANYASZ) jtext = "Bányász";
			else if(PlayerInfo[targetid][pJob1] == MUNKA_VILLANYSZERELO) jtext = "Villanyszerelõ";
			else jtext = "Nincs";
		}
		else
		{
			//if(PlayerInfo[targetid][pJob2] == MUNKA_DETEKTIV) jtext = "Detektív";
		    //else if(PlayerInfo[targetid][pJob2] == MUNKA_PROSTI) jtext = "Prostituált";
		    //else if(PlayerInfo[targetid][pJob2] == MUNKA_DROG) jtext = "Drog Díler";
		    //else if(PlayerInfo[targetid][pJob2] == MUNKA_AUTOTOLVAJ) jtext = "Autótolvaj";
			//else if(PlayerInfo[targetid][pJob2] == MUNKA_SZERELO) jtext = "Autószerelõ";
			//else if(PlayerInfo[targetid][pJob2] == MUNKA_FEGYVER) jtext = "Fegyverkereskedõ";
			if(PlayerInfo[targetid][pJob2] == MUNKA_PILOTA) jtext = "Pilóta";
			else if(PlayerInfo[targetid][pJob2] == MUNKA_FAVAGO) jtext = "Favágó";
			else if(PlayerInfo[targetid][pJob2] == MUNKA_BUS) jtext = "Buszsofõr";
			else if(PlayerInfo[targetid][pJob2] == MUNKA_UTTISZTITO) jtext = "Úttisztító";
			//else if(PlayerInfo[targetid][pJob2] == MUNKA_HACKER) jtext = "Hacker";
			else if(PlayerInfo[targetid][pJob2] == MUNKA_KAMIONOS) jtext = "Kamion Sofõr";
			else if(PlayerInfo[targetid][pJob2] == MUNKA_FARMER) jtext = "Farmer";
			else if(PlayerInfo[targetid][pJob2] == MUNKA_FUNYIRO) jtext = "Fûnyíró";
			//else if(PlayerInfo[targetid][pJob2] == MUNKA_PANCEL) jtext = "Páncélkészítõ";
			else if(PlayerInfo[targetid][pJob2] == MUNKA_KUKAS) jtext = "Kukás";
			else if(PlayerInfo[targetid][pJob2] == MUNKA_HULLA) jtext = "Hullaszállító";
			else if(PlayerInfo[targetid][pJob2] == MUNKA_PENZ) jtext = "PénzSzállító";
			else if(PlayerInfo[targetid][pJob2] == MUNKA_VADASZ) jtext = "Vadász";
			else if(PlayerInfo[targetid][pJob2] == MUNKA_BANYASZ) jtext = "Bányász";
			else if(PlayerInfo[targetid][pJob2] == MUNKA_VILLANYSZERELO) jtext = "Villanyszerelõ";
			else jtext = "Nincs";		
		
		}
	
	
		return jtext;
	
	
}
stock Float:GetDistanceToDeer(playerid, deer)
{
	if (IsPlayerConnected(playerid) && (deer > -1))
	{
		return GetPlayerDistanceFromPoint(playerid, ArrExt(DeerInfo[deer][dPos]));
	}
	return INF_FLOAT;
}

stock GetClosestDeer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new	deer = -1, Float:closestdistance = 9999.0, Float:distance;

		for(new d = 0; d < sizeof(DeerInfo); d++)
		{
			distance = GetDistanceToDeer(playerid, d);
			if(distance < closestdistance)
			{
				closestdistance = distance;
				deer = d;
			}
		}
		return deer;
	}
	return -1;
}

stock Float:GetDistanceToHulla(playerid, hulla)
{
	if (IsPlayerConnected(playerid) && (hulla > -1))
	{
		return GetPlayerDistanceFromPoint(playerid, HullaInfo[hulla][Hpos][0], HullaInfo[hulla][Hpos][1], HullaInfo[hulla][Hpos][2]);
	}
	return INF_FLOAT;
}

/* ============= *\
    D I A L O G
\* ============= */
//dialok
Dialog:items(CUSTOM_DIALOG_PARAMETERS)//(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new str[128];
		format(str, 128, "playerid: %d\nresponse: %d\nlistitem: %d\ninputtext: %s", playerid, response, listitem, inputtext);
		CustomDialog(playerid, D:items, DIALOG_STYLE_MSGBOX, "Teszt caption", str, "NEXT", "CANCEL");
	}
	
	return 1;
}

new CustomPlayerDialog[MAX_PLAYERS][32];
stock CustomDialog(playerid, dialogid[], style, caption[], info[], button1[], button2[])
{
	strcpy(CustomPlayerDialog[playerid], dialogid, 32);
	return ShowPlayerDialog(playerid, DIALOG_CUSTOM, style, caption, info, button1, button2);
}

stock LoadRejtekhely()
{
	new File:file = fopen("Config/terfigyelo_rejtekhely.cfg", io_read);
	if(file)
	{
		new buffer[MAX_HIDDEN_AREA][64], loaded, processed;
		while(fread(file, buffer[loaded++], 64) && loaded < MAX_HIDDEN_AREA){}
		
		for(new i = 0; i < loaded; i++)
		{
			if(!sscanf(buffer[i], "p<,>ffff", MarkerHiddenArea[processed][mMinX], MarkerHiddenArea[processed][mMinY], MarkerHiddenArea[processed][mMaxX], MarkerHiddenArea[processed][mMaxY]))
			{
				MarkerHiddenArea[processed][mExists] = true;
				
				//printf("Rejtekhely: #%d - X: %f-%f Y: %f-%f", processed, MarkerHiddenArea[processed][mMinX], MarkerHiddenArea[processed][mMaxX], MarkerHiddenArea[processed][mMinY], MarkerHiddenArea[processed][mMaxY]);
				
				processed++;
			}
		}
		
		for(new p = processed; p < MAX_HIDDEN_AREA; p++)
			MarkerHiddenArea[p][mExists] = false;
		
		fclose(file);
	}
}

stock Ini_Unixtime_Beallit(playerid)
{
	//SendMessage(SEND_MESSAGE_ADMIN, "Unix cucc lefutott", COLOR_LIGHTRED, 1);
	
	if(PlayerInfo[playerid][pUtolsoBelepes]+300 < UnixTime)
	{
		Repul[playerid] = 0;
		Felleszallas[playerid] = 0;
		Szallit[playerid] = 0;
		OnDuty[playerid] = 0;
		Swatduty[playerid] = 0;
		Onkentesszolgalatban[playerid] = false;
		if(LMT(playerid, FRAKCIO_SCPD) || LMT(playerid, FRAKCIO_SFPD) || LMT(playerid, FRAKCIO_FBI) || LMT(playerid, FRAKCIO_NAV) || LMT(playerid, FRAKCIO_TUZOLTO) || LMT(playerid, FRAKCIO_MENTO) || LMT(playerid, FRAKCIO_OKTATO) || LMT(playerid, FRAKCIO_ONKORMANYZAT) || LMT(playerid, FRAKCIO_RIPORTER) || LMT(playerid, FRAKCIO_KATONASAG))
		{
			Munkaruha(playerid, 0);
			Msg(playerid, "Nem vagy szolgálatban / munkában!");
		}
	}
	else if(OnDuty[playerid] == 1)
	{
		Munkaruha(playerid, 1);
		if(LMT(playerid,FRAKCIO_TAXI))
			Taxi[playerid][tDuty] = true;
		
		Msg(playerid, "Szolgálatban / munkában vagy!");
	}
	else if(Swatduty[playerid] == 1)
	{
		SetPlayerSkin(playerid, 285);
		Msg(playerid, "Szolgálatban / munkában vagy!");
	}
	elseif(Onkentesszolgalatban[playerid] == true)
	{
		if(PlayerInfo[playerid][pSex] == 2) SetPlayerSkin(playerid, 91);
		else SetPlayerSkin(playerid, 276);
		Msg(playerid, "Önkéntes szolgálatban vagy!");
	}
	
	if(Hajocp[playerid] > 0 || Autocp[playerid] > 0 ||Adrcp[playerid] > 0 || Kamioncp[playerid] > 0 || Oktat[playerid] || Helicp[playerid] > 0 || Repulocp[playerid] > 0)
	{
		
		if(PlayerInfo[playerid][pUtolsoBelepes]+300 > UnixTime)
		{
			if(Oktat[playerid])
				Msg(playerid,"Vizsgáztatás folytatás betöltve!");
			else
				Msg(playerid, "Vizsga közbe kiléptél. Keresd fel a tanárod hogy folytasthasd, a vizsgát!");
				
			//SendMessage(SEND_MESSAGE_PLAYER, "Checkpoint beállítása", COLOR_LIGHTRED, 1);
			SetPlayerCheckpoint(playerid,VizsgaRacePoint[playerid][0],VizsgaRacePoint[playerid][1],VizsgaRacePoint[playerid][2],5);
		}
		else{
			Hajocp[playerid] = 0;
			Autocp[playerid] = 0;
			Adrcp[playerid] = 0;
			Kamioncp[playerid] = 0;
			Oktat[playerid] = 0;
			Helicp[playerid] = 0;
			Repulocp[playerid] = 0;
		}
	}
	else
	{
		Hajocp[playerid] = 0;
		Autocp[playerid] = 0;
		Adrcp[playerid] = 0;
		Kamioncp[playerid] = 0;
		Oktat[playerid] = 0;
		Helicp[playerid] = 0;
		Repulocp[playerid] = 0;
	}
	//élet szükségletek
	if(EletRelog[playerid] < 20.0)
		EletRelog[playerid] = 30.0;
	
	Animbanemrakhato[playerid]= 1;
	SetHealth(playerid, EletRelog[playerid]);
	Ehseg[playerid] = EhsegRelog[playerid];
	Vizelet[playerid] = VizeletRelog[playerid];
	
	if(Logged(playerid) && PlayerInfo[playerid][pTextDrawKeseltet] == NINCS)
	{
		new fegyverhud[128];
		new ertek = GetSzuksegletEhsegHUD(EhsegRelog[playerid]);	
		Format(fegyverhud, "class_hud:bar_piros%d", ertek);
		TextDrawSetString(InfoTextDrawBAREHSEG[playerid], fegyverhud);
		TextDrawShowForPlayer(playerid, InfoTextDrawBAREHSEG[playerid]);

		ertek = GetSzuksegletEhsegHUD(VizeletRelog[playerid]);
		Format(fegyverhud, "class_hud:bar_sarga%d", ertek);
		TextDrawSetString(InfoTextDrawBARPEE[playerid], fegyverhud);
		TextDrawShowForPlayer(playerid, InfoTextDrawBARPEE[playerid]);
	}
	
	/*if(EhsegBar[playerid] != INVALID_BAR_ID)
	{
		SetProgressBarValue( EhsegBar[playerid], EhsegRelog[playerid] );
		UpdateProgressBar( EhsegBar[playerid], playerid );
		ShowProgressBarForPlayer(playerid, EhsegBar[playerid]);
	}
	if(VizeletBar[playerid] != INVALID_BAR_ID)
	{
		SetProgressBarValue( VizeletBar[playerid], VizeletRelog[playerid] );
		UpdateProgressBar( VizeletBar[playerid], playerid );
		ShowProgressBarForPlayer(playerid, VizeletBar[playerid]);
	}*/

}

/* ======= *\
	I N I
\* ======= */

//Ini_Unixtime_Beallit
//inik
fpublic INI_Load_Fegyverraktar(a, name[], value[])
{
	new type[10], id;
	if(!sscanf(name, "p<_>s[10]i", type, id))
	{
		if(0 <= id < MAX_FEGYVERRAKTAR_SLOT)
		{
			if(egyezik(type, "Weapon"))
				FrakcioInfo[a][fFegyver][id] = strval(value);
			else
				sscanf(value, "p<,>ii", FrakcioInfo[a][fLoszerTipus][id], FrakcioInfo[a][fLoszerMennyiseg][id]);
		}
	}
}

fpublic INI_Load_Telefondata(a, name[], value[])
{
	INI_String("Tulaj", Telefonok[a][tTulaj],250);
	INI_Int("TulajID", Telefonok[a][tTulajID]);
	INI_Int("Szam", Telefonok[a][tSzam]);
	for(new x = 0; x < 5; x++)
	{
		new SMS[30], SMSID[30];
		format(SMS,sizeof(SMS),"SMS(%d)",x);
		format(SMSID,sizeof(SMSID),"SMSID(%d)",x);
		INI_String(SMS, Telefonok_UtolsoSMS[a][x],500);
		INI_Int(SMSID, Telefonok[a][tSms][x]);
	}
	INI_Bool("Eladva", Telefonok[a][tEladva]);
	INI_Int("TorlesIdo", Telefonok[a][tTorlesIdo]);
	INI_Int("Egyenleg", Telefonok[a][tEgyenleg]);
	return 0;
}

fpublic INI_Load_Cardata(a, name[], value[])
{
	INI_Int("Muanyag", CarTrunk[a][cMuanyag]);
	INI_Int("Cserje", CarTrunk[a][cCserje]);
	INI_Int("Mak", CarTrunk[a][cMak]);
	INI_Int("Cannabis", CarTrunk[a][cCannabis]);
	INI_Int("Mati", CarTrunk[a][cMaterial]);
	INI_Int("Heroin", CarTrunk[a][cHeroin]);
	INI_Int("Kokain", CarTrunk[a][cKokain]);
	INI_Int("Marihuana", CarTrunk[a][cMarihuana]);	
	INI_Int("Fegyvercsomag", CarTrunk[a][cFegyverCsomag]);
	INI_Int("Alma", CarTrunk[a][cAlma]);
	INI_Int("Tolto", CarTrunk[a][cTolto]);
	INI_Int("Kaja", CarTrunk[a][cKaja]);
	INI_Int("Olaj", CarTrunk[a][cOlaj]);
	
	if(egyezik(name, "Fegyver"))
		sscanf(value, "p<,>a<i>["#MAX_JARMU_WEAPON_SLOT"]", CarTrunk[a][cFegyver]);
	
	if(egyezik(name, "Loszer"))
	{
		new splitted[MAX_JARMU_WEAPON_SLOT][64];
		if(!sscanf(name, "p<,>A<s[64]>(0:0)["#MAX_JARMU_WEAPON_SLOT"]", splitted))
		{
			for(new l = 0; l < MAX_JARMU_WEAPON_SLOT; l++)
			{
				if(sscanf(splitted[l], "p<:>ii", CarTrunk[a][cLoszerTipus][l], CarTrunk[a][cLoszerMennyiseg][l]))
					CarTrunk[a][cLoszerTipus][l] = 0, CarTrunk[a][cLoszerMennyiseg][l] = 0;
			}
		}
	}
	
	if(egyezik(name, "Melleny"))
		sscanf(value, "p<,>a<f>["#MAX_JARMU_MELLENY_SLOT"]", CarTrunk[a][cMelleny]);
	
	return 1;
}

fpublic INI_Load_Items(playerid, name[], value[])
{
	new id = strval(name);
	if(0 <= id < MAX_TARGY)
	{
		new splits[5][32];
		split(value, splits, '|');
		
		Items[playerid][id][tType] = strval(splits[0]);
		Items[playerid][id][tDB] = strval(splits[1]);
		Items[playerid][id][tE1] = strval(splits[2]);
		Items[playerid][id][tE2] = strval(splits[3]);
		Items[playerid][id][tE3] = strval(splits[4]);
	}
}
//A változókat mindig írd be a //vnull-ba ((keress rá))
//userdata
fpublic INI_Load_Userdata(playerid, name[], value[]) 
{
	INI_Int("Textdrawszin",PlayerInfo[playerid][pTextdrawszin]);
	INI_Int("KorhazIdo", KorhazIdo[playerid]);
	INI_Int("Animba", AnimbanRelog[playerid]);
	INI_Int("OnDuty", OnDuty[playerid]);
	INI_Int("Onkentesszolgalat", Onkentesszolgalatban[playerid]);
	
	//élet szükségletek
	INI_Float("Ehseg", EhsegRelog[playerid]);
	INI_Float("Vizelet", VizeletRelog[playerid]);
	INI_Float("Elet", EletRelog[playerid]);
	
	//pilótához
	INI_Int("Repul",Repul[playerid]);
	INI_Float("PilotaX", PilotaMunkaPos[playerid][PilotaX]);
	INI_Float("PilotaY", PilotaMunkaPos[playerid][PilotaY]);
	INI_Float("PilotaZ", PilotaMunkaPos[playerid][PilotaZ]);
	INI_Float("PilotaHP", PilotaMunkaPos[playerid][PilotaHP]);
	INI_Float("PilotaTavolsag", PilotaMunkaPos[playerid][PilotaTavolsag]);
	INI_Float("PilotaSzorzo", PilotaMunkaPos[playerid][PilotaSzorzo]);
	INI_Int("PilotaFizetes", PilotaMunkaPos[playerid][PilotaFizetes]);
	INI_String("PilotaCel", PilotaMunkaPos[playerid][PilotaCel],200);
	INI_String("PilotaKezd", PilotaMunkaPos[playerid][PilotaKezd],200);
	//kamion 
	INI_Int("Kamszallit",Szallit[playerid]);
	INI_Float("KamX", KamionStartPoz[playerid][KamX]);
	INI_Float("KamY", KamionStartPoz[playerid][KamY]);
	INI_Float("KamZ", KamionStartPoz[playerid][KamZ]);
	INI_Float("KamElet", KamionStartPoz[playerid][KamElet]);
	INI_Float("KamTavolsag", KamionStartPoz[playerid][KamTavolsag]);
	INI_Float("KamSzorzo", KamionStartPoz[playerid][KamSzorzo]);
	INI_Int("KamRendszam", KamionStartPoz[playerid][KamRendszam]);
	INI_Int("KamPotRendszam", KamionStartPoz[playerid][KamPotRendszam]);
	INI_Int("KamFizetes", KamionStartPoz[playerid][KamFizetes]);
	INI_String("KamCel", KamionStartPoz[playerid][KamCel],200);
	INI_String("KamKezd", KamionStartPoz[playerid][KamKezd],200);
	INI_Int("BenzintSzallit", BenzintSzallit[playerid]);
	INI_Int("SSSTamogatas",SSSTamogatas[playerid]);

	//bánya
	INI_Int("MSzen", PlayerInfo[playerid][pSzen]);
	INI_Int("MVas", PlayerInfo[playerid][pVas]);
	INI_Int("MArany", PlayerInfo[playerid][pAranym]);
	INI_Int("MGyemant", PlayerInfo[playerid][pGyemant]);
	
	INI_Int("MSzenP", PlayerInfo[playerid][pSzenP]);
	INI_Int("MVasP", PlayerInfo[playerid][pVasP]);
	INI_Int("MAranyP", PlayerInfo[playerid][pAranymP]);
	INI_Int("MGyemantP", PlayerInfo[playerid][pGyemantP]);
	
	//drogteszt
	INI_Int("Drogteszt", PlayerInfo[playerid][pDrogozott]);

	// Premium
	INI_Float("PKamat", PremiumInfo[playerid][pKamat]);
	INI_Int("PKamatIdo", PremiumInfo[playerid][pKamatIdo]);
	INI_Float("PAdo", PremiumInfo[playerid][pAdo]);
	INI_Int("PAdoIdo", PremiumInfo[playerid][pAdoIdo]);

	//mdc
	INI_String("pVad", PlayerCrime[playerid][pVad],32);
	INI_String("pJelento", PlayerCrime[playerid][pJelento],32);
	INI_Int("pWantedLevel", WantedLevel[playerid]);
	
	//jogosítvány
	INI_Float("VizsgaRacePoint0", VizsgaRacePoint[playerid][0]);
	INI_Float("VizsgaRacePoint1", VizsgaRacePoint[playerid][1]);
	INI_Float("VizsgaRacePoint2", VizsgaRacePoint[playerid][2]);
	INI_Int("Hajocp", Hajocp[playerid]);
	INI_Int("Autocp", Autocp[playerid]);
	INI_Int("Adrcp", Adrcp[playerid]);
	INI_Int("Kamioncp", Kamioncp[playerid]);
	INI_Int("Helicp",Helicp[playerid]);
	INI_Int("Repulocp",Repulocp[playerid]);
	INI_Int("Jogsineki", Jogsineki[playerid]);
	INI_Int("Oktato", Oktato[playerid]);
	INI_Int("Oktat", Oktat[playerid]);
	INI_Int("Vizsgafajta", Vizsgafajta[playerid]);
	
	//Paintball fegyverek
	INI_Custom("PBFegyverek","p<,>dddd", PlayerInfo[playerid][pPBFegyver][0], PlayerInfo[playerid][pPBFegyver][1], PlayerInfo[playerid][pPBFegyver][2], PlayerInfo[playerid][pPBFegyver][3]);
	
	//rádió

	INI_Custom("radio", "p<,>s[64]s[128]",SajatRadio[playerid][rnev],SajatRadio[playerid][rurl]);
	INI_Custom("radio_yt", "p<,>s[64]s[128]ddd", MP4YT[playerid][yNev],MP4YT[playerid][yLink], MP4YT[playerid][yLejatsszik], MP4YT[playerid][yHossz], MP4YT[playerid][yMeddig]);


	INI_Int("NewsRadioHallgatas", NewsRadioHallgatas[playerid]);
	
	INI_Int("ginfo", gInfo[playerid]);
	INI_Int("togkill", togkill[playerid]);
	INI_Int("OlesIdo", PlayerInfo[playerid][pOlesIdo]);
	INI_Int("Alakit",PlayerInfo[playerid][pAlakitIdo]);
	
	INI_Custom("hitel", "p<,>ddddd",PlayerInfo[playerid][pHitel],PlayerInfo[playerid][pTorleszto],PlayerInfo[playerid][pHitelOra],PlayerInfo[playerid][pHitelHatralek],PlayerInfo[playerid][pZarolva]);
	
	INI_Int("tognews", gNews[playerid]);
	//INI_Custom("terfigyelo","p<,>dd",PlayerInfo[playerid][pJelzes],PlayerInfo[playerid][pJelzesTerkep]);
	INI_Int("ForaglomFigyelmezteto", ForaglomFigyelmezteto[playerid]);
	//munkabenzin
	INI_Custom("MunkaBenzin","p<,>ddd",PInfo(playerid,MunkaBenzin),PInfo(playerid,MunkaAra),PInfo(playerid,MunkaRendszam));
	
	INI_Int("HackIdo",PlayerInfo[playerid][pHackIdo]);
	INI_Int("BankKartya",Bankkartya[playerid]);

	INI_Int("lecsukta",PlayerInfo[playerid][plecsukta]);

	INI_Int("HTojas",PlayerInfo[playerid][pTojas]);
	/*INI_Custom("Mikulas","p<,>ddd",PlayerInfo[playerid][pMikulasSapka],PlayerInfo[playerid][pMikulasCsomag],PlayerInfo[playerid][pVirgacs]);*/
	INI_Custom("Ajandek","p<,>dd",PlayerInfo[playerid][pAjandekUnixtime],PlayerInfo[playerid][pAjandek]);
	INI_Int("AllJailTime",JailTime[playerid]);
	INI_Int("Vadaszengedely", PlayerInfo[playerid][pVadaszEngedely]);
	INI_Int("PaintballTiltas", PlayerInfo[playerid][pPaintballKitiltva]);
	INI_Custom("Orokkulcsok","p<,>ddd",PlayerInfo[playerid][pKulcsok][0],PlayerInfo[playerid][pKulcsok][1],PlayerInfo[playerid][pKulcsok][2]);
	
	INI_Bool("SMSinfo",PlayerInfo[playerid][pSMS]);
	
	INI_Custom("ObjectSzemuveg", "p<,>ffffff",ObjectSzemuveg[playerid][OPosX],ObjectSzemuveg[playerid][OPosY],ObjectSzemuveg[playerid][OPosZ],ObjectSzemuveg[playerid][OPosRX],ObjectSzemuveg[playerid][OPosRY],ObjectSzemuveg[playerid][OPosRZ]);
	
	for(new slot;slot < MAXGOTOMARK;slot++)
	{
		new uzz[128];
		format(uzz,sizeof(uzz),"AMark_%d",slot);
		INI_Custom(uzz,"p<,>fffdd",MarkPos[playerid][slot][Markx],MarkPos[playerid][slot][Marky],MarkPos[playerid][slot][Markz],MarkPos[playerid][slot][MarkVW],MarkPos[playerid][slot][MarkINT]);
	
	}
	INI_Bool("LaptopAllapot",PlayerInfo[playerid][pLaptopBe]);
	INI_Custom("Gyogyszer","p<,>dd",PlayerInfo[playerid][pAspirin],PlayerInfo[playerid][pCataflan]);
	INI_Int("TaxiSzolgalati",Taxi[playerid][tFizetes]);
	INI_Custom("SpecJogsi","p<@>s[128]f",PlayerInfo[playerid][pSpecialJogsiNev],PlayerInfo[playerid][pSpecialJogsiKm]);
	INI_Custom("Hazkulcsok","p<,>ddd",PlayerInfo[playerid][pHazKulcsok][0],PlayerInfo[playerid][pHazKulcsok][1],PlayerInfo[playerid][pHazKulcsok][2]);
	
	#if defined SYSTEM_BONUS
	INI_Float("BonusKamat", BonusInfo[playerid][B:Kamat]);
	INI_Int("BonusKamatIdo", BonusInfo[playerid][B:KamatIdo]);
	INI_Float("BonusAdo", BonusInfo[playerid][B:Ado]);
	INI_Int("BonusAdoIdo", BonusInfo[playerid][B:AdoIdo]);
	#endif
	
	INI_Int("CustomHudWeapon", PlayerInfo[playerid][pCustomHudWeapon]);
	
	INI_Int("TVJOG",TvEngedely[playerid]);
	INI_Bool("AutoAdo",PlayerInfo[playerid][pAdoAuto]);
	
	INI_Custom("Spawn", "p<,>ii", PlayerInfo[playerid][pSpawnType], PlayerInfo[playerid][pSpawnId]);
	
	return 0;
}

fpublic INI_LOAD_FrakcioDATA(idx, name[], value[])
{
	//Széf
	INI_Int("penz", FrakcioInfo[idx][fPenz]);
	INI_Int("mati", FrakcioInfo[idx][fMati]);							
	INI_Int("heroin", FrakcioInfo[idx][fHeroin]);						
	INI_Int("kokain", FrakcioInfo[idx][fKokain]);						
	INI_Int("mariska", FrakcioInfo[idx][fMarihuana]);				
	INI_Int("kaja", FrakcioInfo[idx][fKaja]);
	INI_Int("alma", FrakcioInfo[idx][fAlma]);
	INI_Int("minrang", FrakcioInfo[idx][fMinrang]);
	INI_Int("raktarrang", FrakcioInfo[idx][fRaktarRang]);
	INI_Int("c4", FrakcioInfo[idx][fC4]);

	//széf helye
	INI_Custom("Pozicio", "p<,>ffffd",FrakcioInfo[idx][fPosX],FrakcioInfo[idx][fPosY],FrakcioInfo[idx][fPosZ],FrakcioInfo[idx][fPosA],FrakcioInfo[idx][fVW]);
	INI_Int("object", FrakcioInfo[idx][fObject]);	
	INI_Int("objectid", FrakcioInfo[idx][fObjectID]);

	//fegyverraktár
	INI_Custom("combat", "p<,>dddd",FrakcioInfo[idx][fCombat][0],FrakcioInfo[idx][fCombat][1],FrakcioInfo[idx][fCombat][2],FrakcioInfo[idx][fCombat][3]);
	INI_Custom("sniper", "p<,>dddd",FrakcioInfo[idx][fSniper][0],FrakcioInfo[idx][fSniper][1],FrakcioInfo[idx][fSniper][2],FrakcioInfo[idx][fSniper][3]);
	INI_Custom("deagle", "p<,>dddd",FrakcioInfo[idx][fDeagle][0],FrakcioInfo[idx][fDeagle][1],FrakcioInfo[idx][fDeagle][2],FrakcioInfo[idx][fDeagle][3]);
	INI_Custom("silenced", "p<,>dddd",FrakcioInfo[idx][fSilenced][0],FrakcioInfo[idx][fSilenced][1],FrakcioInfo[idx][fSilenced][2],FrakcioInfo[idx][fSilenced][3]);
	INI_Custom("mp5", "p<,>dddd",FrakcioInfo[idx][fMp5][0],FrakcioInfo[idx][fMp5][1],FrakcioInfo[idx][fMp5][2],FrakcioInfo[idx][fMp5][3]);
	INI_Custom("m4", "p<,>dddd",FrakcioInfo[idx][fM4][0],FrakcioInfo[idx][fM4][1],FrakcioInfo[idx][fM4][2],FrakcioInfo[idx][fM4][3]);
	INI_Custom("shotgun", "p<,>dddd",FrakcioInfo[idx][fShotgun][0],FrakcioInfo[idx][fShotgun][1],FrakcioInfo[idx][fShotgun][2],FrakcioInfo[idx][fShotgun][3]);
	INI_Custom("ak47", "p<,>dddd",FrakcioInfo[idx][fAk47][0],FrakcioInfo[idx][fAk47][1],FrakcioInfo[idx][fAk47][2],FrakcioInfo[idx][fAk47][3]);
	INI_Custom("rifle", "p<,>dddd",FrakcioInfo[idx][fRifle][0],FrakcioInfo[idx][fRifle][1],FrakcioInfo[idx][fRifle][2],FrakcioInfo[idx][fRifle][3]);
	INI_Int("parachute", FrakcioInfo[idx][fParachute]);
	//fizetés rang szerint
	INI_Custom("fizetesrang", "p<,>ddddddddddddd",FrakcioInfo[idx][fFizetes][0],FrakcioInfo[idx][fFizetes][1],FrakcioInfo[idx][fFizetes][2],FrakcioInfo[idx][fFizetes][3],FrakcioInfo[idx][fFizetes][4],FrakcioInfo[idx][fFizetes][5],FrakcioInfo[idx][fFizetes][6],FrakcioInfo[idx][fFizetes][7],FrakcioInfo[idx][fFizetes][8],FrakcioInfo[idx][fFizetes][9],FrakcioInfo[idx][fFizetes][10],FrakcioInfo[idx][fFizetes][11],FrakcioInfo[idx][fFizetes][12]);
	
	
	//egyéb
	INI_Int("Jelszo", FrakcioInfo[idx][fJelszo]);
	INI_Int("ingyentank", FrakcioInfo[idx][fIngyenTank]);	
	INI_Int("tamadas", FrakcioInfo[idx][fUtolsoTamadas]);
	INI_Int("FAdo", FrakcioInfo[idx][fAdo]);
	
	INI_Int("fHeti", FrakcioInfo[idx][fHeti]);
	INI_Int("fHavi", FrakcioInfo[idx][fHavi]);
	INI_Int("fOsszes", FrakcioInfo[idx][fOsszes]);
	INI_Int("Dij",FrakcioInfo[idx][fDij]);
	INI_Int("IngyenSzerel",FrakcioInfo[idx][fIngyenSzerel]);
	
	INI_Custom("duty", "p<,>ffffdd",FrakcioInfo[idx][fDPosX],FrakcioInfo[idx][fDPosY],FrakcioInfo[idx][fDPosZ],FrakcioInfo[idx][fDPosR],FrakcioInfo[idx][fDVW],FrakcioInfo[idx][fDINT]);
	INI_Custom("fegyverszallitas", "p<,>ffffdd",FrakcioInfo[idx][fFPosX],FrakcioInfo[idx][fFPosY],FrakcioInfo[idx][fFPosZ],FrakcioInfo[idx][fFPosR],FrakcioInfo[idx][fDVW],FrakcioInfo[idx][fDINT]);
	
	INI_Custom("fMotd","p<,>s",FrakcioInfo[idx][fMotd]);
	return 0;
}
fpublic INI_LOAD_Object_Torol_DATA(a, name[], value[])
{

	INI_Int("Tipus",OBJECT_TOROL[a][sTipus]);
	INI_Float("PosX",OBJECT_TOROL[a][sPosX]);
	INI_Float("PosY",OBJECT_TOROL[a][sPosY]);
	INI_Float("PosZ",OBJECT_TOROL[a][sPosZ]);
	INI_Float("Tav",OBJECT_TOROL[a][sTav]);

	return 0;
}
fpublic INI_LOAD_ObjectDATA(a, name[], value[])
{
	INI_Int("Tipus",OBJECT[a][sTipus]);
	INI_Float("PosX",OBJECT[a][sPosX]);
	INI_Float("PosY",OBJECT[a][sPosY]);
	INI_Float("PosZ",OBJECT[a][sPosZ]);
	INI_Float("PosA",OBJECT[a][sPosA]);
	INI_Int("VW",OBJECT[a][sVw]);
	INI_Int("INT",OBJECT[a][sInt]);
	INI_Float("PosZX",OBJECT[a][sPosZX]);
	INI_Float("PosZY",OBJECT[a][sPosZY]);
	
	return 0;
}
fpublic INI_LOAD_GraffitiDATA(a, name[], value[])
{
	INI_Int("ID", Graffiti[a][gId]);
	INI_Int("VID", Graffiti[a][gVId]);
	INI_String("Nev", Graffiti[a][gNev], 128);
	INI_String("Szoveg", Graffiti[a][gSzoveg], 128);
	INI_String("Color", Graffiti[a][gColor], 24);
	INI_String("Font", Graffiti[a][gFont], 16);
	INI_Int("Size", Graffiti[a][gSize]);
	INI_Int("Ido", Graffiti[a][gIdo]);
	INI_Float("PosX", Graffiti[a][gPosX]);
	INI_Float("PosY", Graffiti[a][gPosY]);
	INI_Float("PosZ", Graffiti[a][gPosZ]);
	INI_Float("PosRX", Graffiti[a][gPosRX]);
	INI_Float("PosRY", Graffiti[a][gPosRY]);
	INI_Float("PosRZ", Graffiti[a][gPosRZ]);
	
	return 0;
}
fpublic INI_Load_KutData(a, name[], value[]) 
{
	INI_String("Nev", BenzinKutak[a][bNev],250);
	INI_String("Tulaj", BenzinKutak[a][bTulaj],250);
	INI_Int("TulajID", BenzinKutak[a][bTulajID]);
	INI_Float("PosX", BenzinKutak[a][bPosX]);
	INI_Float("PosY", BenzinKutak[a][bPosY]);
	INI_Float("PosZ", BenzinKutak[a][bPosZ]);
	INI_Float("Tav", BenzinKutak[a][bTav]);
	INI_Int("Benzin", BenzinKutak[a][bBenzin]);
	INI_Int("BenzinAra", BenzinKutak[a][bBenzinAra]);
	INI_Int("Diesel", BenzinKutak[a][bDiesel]);
	INI_Int("DieselAra", BenzinKutak[a][bDieselAra]);
	INI_Int("Kerozin", BenzinKutak[a][bKerozin]);
	INI_Int("KerozinAra", BenzinKutak[a][bKerozinAra]);
	INI_Int("Szef", BenzinKutak[a][bSzef]);
	INI_Int("Melyikvan", BenzinKutak[a][bMelyikvan]);
	INI_Int("BerlesIdo", BenzinKutak[a][bBerlesIdo]);
	INI_Int("Berelheto", BenzinKutak[a][bBerelheto]);
	INI_Int("AlapAra", BenzinKutak[a][bAlapAra]);
	
	
	return 0;
}

stock INI_Load(type)
{
	if(type == INI_TYPE_FEGYVERRAKTAR)
	{
		for(new f = 1; f < MAX_FRAKCIO; f++)
		{
			format(_tmpString, 64, "data/fegyverraktar/%d.ini", f);
			
			if(fexist(_tmpString))
				INI_ParseFile(_tmpString, "INI_Load_Fegyverraktar", .bExtra = true, .extra = f);
		}
	}
	if(type == INI_TYPE_FRAKCIO)
	{
		/*for(new f = 0; f < MAX_FRAKCIO; f++)
		{
			format(_tmpString, 64, "data/frakcio/frakcio_adat_%d.ini", f);
			
			if(fexist(_tmpString))
				INI_ParseFile(_tmpString, "INI_LOAD_FrakcioAdat", .bExtra = true, .extra = f);
		
		}*/
		for(new f = 0; f < MAX_FRAKCIO; f++)
		{
			format(_tmpString, 64, "data/frakcio/%d.ini", f);
			
			if(fexist(_tmpString))
				INI_ParseFile(_tmpString, "INI_LOAD_FrakcioDATA", .bExtra = true, .extra = f);
		
		
			format(_tmpString, 64, "data/frakcio/frakcio_adat_%d.ini", f);
			
			if(f && fexist(_tmpString))
				INI_ParseFile(_tmpString, "INI_LOAD_FrakcioAdat", .bExtra = true, .extra = f);
		}
	}
	if(type == INI_TYPE_ALFRAKCIO_POLICE)
	{
		/*for(new f = 0; f < MAX_FRAKCIO; f++)
		{
			format(_tmpString, 64, "data/frakcio/frakcio_adat_%d.ini", f);
			
			if(fexist(_tmpString))
				INI_ParseFile(_tmpString, "INI_LOAD_FrakcioAdat", .bExtra = true, .extra = f);
		
		}*/
		for(new f = 0; f < MAX_POLICE_CLASS; f++)
		{
			format(_tmpString, 64, "data/alfrakcio/alfrakcio_adat_police_%d.ini", f);
			
			if(fexist(_tmpString))
				INI_ParseFile(_tmpString, "INI_LOAD_AlFrakcioAdatPolice", .bExtra = true, .extra = f);
		
		
			format(_tmpString, 64, "data/alfrakcio/alfrakcio_adat_police_%d.ini", f);
			
			if(f && fexist(_tmpString))
				INI_ParseFile(_tmpString, "INI_SAVE_AlFrakcioAdatPolice", .bExtra = true, .extra = f);
		}
	}
	
}
//userdata
fpublic INI_Save(type, a) 
{
	if(type == INI_TYPE_TELEFONDATA)
	{
		new fName[64];
		
		format(fName, 64, "data/telefonok/%d.ini", a);
	
		new INI:ini = INI_Open(fName);

		INI_WriteString(ini, "Tulaj", Telefonok[a][tTulaj]);
		INI_WriteInt(ini, "TulajID", Telefonok[a][tTulajID]);
		INI_WriteInt(ini, "Szam", Telefonok[a][tSzam]);
		for(new s = 0; s < MAX_TAROLT_SMS; s++)
		{
			new SMS[30], SMSID[30];
			format(SMS,sizeof(SMS),"SMS(%d)",s);
			format(SMSID,sizeof(SMSID),"SMSID(%d)",s);
			INI_WriteString(ini,SMS, Telefonok_UtolsoSMS[a][s]);
			INI_WriteInt(ini,SMSID, Telefonok[a][tSms][s]);
		}	
		INI_WriteBool(ini, "Eladva", Telefonok[a][tEladva]);
		INI_WriteInt(ini,"TorlesIdo", Telefonok[a][tTorlesIdo]);
		INI_WriteInt(ini,"Egyenleg", Telefonok[a][tEgyenleg]);
		
		INI_Close(ini);
	}
	else if(type == INI_TYPE_OBJECTTORLES)
	{
		new fName[64];
		
		format(fName, 64, "data/objectek/torol_%d.ini", a);
	
		new INI:ini = INI_Open(fName);
	
		INI_WriteInt(ini,"Tipus",OBJECT_TOROL[a][sTipus]);
		INI_WriteFloat(ini,"PosX",OBJECT_TOROL[a][sPosX]);
		INI_WriteFloat(ini,"PosY",OBJECT_TOROL[a][sPosY]);
		INI_WriteFloat(ini,"PosZ",OBJECT_TOROL[a][sPosZ]);
		INI_WriteFloat(ini,"Tav",OBJECT_TOROL[a][sTav]);
		
		INI_Close(ini);
		
	}
	else if(type == INI_TYPE_OBJECT)
	{
		new fName[64];
		
		format(fName, 64, "data/objectek/%d.ini", a);
	
		new INI:ini = INI_Open(fName);
		
		//ideiglenes
		if(OBJECT[a][sVw] == -1) OBJECT[a][sVw] = 0;
		if(OBJECT[a][sInt] == -1) OBJECT[a][sInt] = 0;
		
		INI_WriteInt(ini,"Tipus",OBJECT[a][sTipus]);
		INI_WriteFloat(ini,"PosX",OBJECT[a][sPosX]);
		INI_WriteFloat(ini,"PosY",OBJECT[a][sPosY]);
		INI_WriteFloat(ini,"PosZ",OBJECT[a][sPosZ]);
		INI_WriteFloat(ini,"PosA",OBJECT[a][sPosA]);
		INI_WriteInt(ini,"VW",OBJECT[a][sVw]);
		INI_WriteInt(ini,"INT",OBJECT[a][sInt]);
		INI_WriteFloat(ini,"PosZX",OBJECT[a][sPosZX]);
		INI_WriteFloat(ini,"PosZY",OBJECT[a][sPosZY]);

		INI_Close(ini);
	}
	else if(type == INI_TYPE_GRAFFITI)
	{
		new fName[64];
		
		format(fName, 64, "data/graffiti/%d.ini", a);
		
		new INI:ini = INI_Open(fName);
		
		INI_WriteInt(ini, "ID", Graffiti[a][gId]);
		INI_WriteInt(ini, "VID", Graffiti[a][gVId]);
		INI_WriteString(ini, "Nev", Graffiti[a][gNev]);
		INI_WriteString(ini, "Szoveg", Graffiti[a][gSzoveg]);
		INI_WriteString(ini, "Color", Graffiti[a][gColor]);
		INI_WriteString(ini, "Font", Graffiti[a][gFont]);
		INI_WriteInt(ini, "Size", Graffiti[a][gSize]);
		INI_WriteInt(ini, "Ido", Graffiti[a][gIdo]);
		INI_WriteFloat(ini, "PosX", Graffiti[a][gPosX]);
		INI_WriteFloat(ini, "PosY", Graffiti[a][gPosY]);
		INI_WriteFloat(ini, "PosZ", Graffiti[a][gPosZ]);
		INI_WriteFloat(ini, "PosRX", Graffiti[a][gPosRX]);
		INI_WriteFloat(ini, "PosRY", Graffiti[a][gPosRY]);
		INI_WriteFloat(ini, "PosRZ", Graffiti[a][gPosRZ]);
		
		INI_Close(ini);
	}
	//raktár
	else if(type == INI_TYPE_FRAKCIO)
	{
		new fName[128];
		new formazas[128];
		format(fName, 128, "data/frakcio/%d.ini", a);
	
		new INI:ini = INI_Open(fName);
		
		//széf
		INI_WriteInt(ini,"penz", FrakcioInfo[a][fPenz]);	
		INI_WriteInt(ini,"mati", FrakcioInfo[a][fMati]);							
		INI_WriteInt(ini,"heroin", FrakcioInfo[a][fHeroin]);						
		INI_WriteInt(ini,"kokain", FrakcioInfo[a][fKokain]);						
		INI_WriteInt(ini,"mariska", FrakcioInfo[a][fMarihuana]);				
		INI_WriteInt(ini,"kaja", FrakcioInfo[a][fKaja]);
		INI_WriteInt(ini,"alma", FrakcioInfo[a][fAlma]);
		INI_WriteInt(ini,"minrang", FrakcioInfo[a][fMinrang]);
		INI_WriteInt(ini,"raktarrang", FrakcioInfo[a][fRaktarRang]);
		INI_WriteInt(ini,"c4",FrakcioInfo[a][fC4]);
	
		//széfhelye
		format(formazas, sizeof(formazas),"%f,%f,%f,%,%d",FrakcioInfo[a][fPosX],FrakcioInfo[a][fPosY],FrakcioInfo[a][fPosZ],FrakcioInfo[a][fPosA],FrakcioInfo[a][fVW]);
		INI_WriteString(ini,"Pozicio",formazas);
		INI_WriteInt(ini,"object", FrakcioInfo[a][fObject]);	
		INI_WriteInt(ini,"objectid", FrakcioInfo[a][fObjectID]);
		
		//fegyver raktár
		format(formazas, sizeof(formazas), "%d,%d,%d,%d",FrakcioInfo[a][fCombat][0],FrakcioInfo[a][fCombat][1],FrakcioInfo[a][fCombat][2],FrakcioInfo[a][fCombat][3]);
		INI_WriteString(ini,"combat",formazas);
		format(formazas, sizeof(formazas), "%d,%d,%d,%d",FrakcioInfo[a][fSniper][0],FrakcioInfo[a][fSniper][1],FrakcioInfo[a][fSniper][2],FrakcioInfo[a][fSniper][3]);
		INI_WriteString(ini,"sniper",formazas);
		format(formazas, sizeof(formazas), "%d,%d,%d,%d",FrakcioInfo[a][fDeagle][0],FrakcioInfo[a][fDeagle][1],FrakcioInfo[a][fDeagle][2],FrakcioInfo[a][fDeagle][3]);
		INI_WriteString(ini,"deagle",formazas);
		format(formazas, sizeof(formazas), "%d,%d,%d,%d",FrakcioInfo[a][fSilenced][0],FrakcioInfo[a][fSilenced][1],FrakcioInfo[a][fSilenced][2],FrakcioInfo[a][fSilenced][3]);
		INI_WriteString(ini,"silenced",formazas);
		format(formazas, sizeof(formazas), "%d,%d,%d,%d",FrakcioInfo[a][fMp5][0],FrakcioInfo[a][fMp5][1],FrakcioInfo[a][fMp5][2],FrakcioInfo[a][fMp5][3]);
		INI_WriteString(ini,"mp5",formazas);
		format(formazas, sizeof(formazas), "%d,%d,%d,%d",FrakcioInfo[a][fM4][0],FrakcioInfo[a][fM4][1],FrakcioInfo[a][fM4][2], FrakcioInfo[a][fM4][3]);
		INI_WriteString(ini,"m4",formazas);
		format(formazas, sizeof(formazas), "%d,%d,%d,%d",FrakcioInfo[a][fShotgun][0],FrakcioInfo[a][fShotgun][1],FrakcioInfo[a][fShotgun][2],FrakcioInfo[a][fShotgun][3]);
		INI_WriteString(ini,"shotgun",formazas);
		format(formazas, sizeof(formazas), "%d,%d,%d,%d",FrakcioInfo[a][fAk47][0],FrakcioInfo[a][fAk47][1],FrakcioInfo[a][fAk47][2],FrakcioInfo[a][fAk47][3]);
		INI_WriteString(ini,"ak47",formazas);
		format(formazas, sizeof(formazas), "%d,%d,%d,%d",FrakcioInfo[a][fRifle][0],FrakcioInfo[a][fRifle][1],FrakcioInfo[a][fRifle][2],FrakcioInfo[a][fRifle][3]);
		INI_WriteString(ini,"rifle",formazas);
		INI_WriteInt(ini,"parachute", FrakcioInfo[a][fParachute]);
		//fizetés rangszerint
		format(formazas, sizeof(formazas),"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",FrakcioInfo[a][fFizetes][0],FrakcioInfo[a][fFizetes][1],FrakcioInfo[a][fFizetes][2],FrakcioInfo[a][fFizetes][3],FrakcioInfo[a][fFizetes][4],FrakcioInfo[a][fFizetes][5],FrakcioInfo[a][fFizetes][6],FrakcioInfo[a][fFizetes][7],FrakcioInfo[a][fFizetes][8],FrakcioInfo[a][fFizetes][9],FrakcioInfo[a][fFizetes][10],FrakcioInfo[a][fFizetes][11],FrakcioInfo[a][fFizetes][12]);
		INI_WriteString(ini,"fizetesrang",formazas);
		
		//egyéb
		INI_WriteInt(ini,"Jelszo", FrakcioInfo[a][fJelszo]);
		INI_WriteInt(ini,"ingyentank", FrakcioInfo[a][fIngyenTank]);	
		
		INI_WriteInt(ini,"tamadas", FrakcioInfo[a][fUtolsoTamadas]);			
		INI_WriteInt(ini,"FAdo",FrakcioInfo[a][fAdo]);	
		
		INI_WriteInt(ini,"fHeti",FrakcioInfo[a][fHeti]);
		INI_WriteInt(ini,"fHavi",FrakcioInfo[a][fHavi]);
		INI_WriteInt(ini,"fOsszes",FrakcioInfo[a][fOsszes]);
		INI_WriteInt(ini,"Dij",FrakcioInfo[a][fDij]);
		INI_WriteInt(ini,"IngyenSzerel", FrakcioInfo[a][fIngyenSzerel]);
		
		
		
		format(formazas, sizeof(formazas),"%f,%f,%f,%f,%d,%d",FrakcioInfo[a][fDPosX],FrakcioInfo[a][fDPosY],FrakcioInfo[a][fDPosZ],FrakcioInfo[a][fDPosR],FrakcioInfo[a][fDVW],FrakcioInfo[a][fDINT]);
		INI_WriteString(ini,"duty",formazas);
		
		format(formazas, sizeof(formazas),"%f,%f,%f,%f,%d,%d",FrakcioInfo[a][fFPosX],FrakcioInfo[a][fFPosY],FrakcioInfo[a][fFPosZ],FrakcioInfo[a][fFPosR],FrakcioInfo[a][fDVW],FrakcioInfo[a][fDINT]);
		INI_WriteString(ini,"fegyverszallitas",formazas);
			
		format(formazas, sizeof(formazas),"%s",FrakcioInfo[a][fMotd]);
		INI_WriteString(ini,"fMotd",formazas);
		
		INI_Close(ini);
	
	}
	else if(type == INI_TYPE_ALFRAKCIO_POLICE)
	{
		INI_SAVE_AlFrakcioAdatPolice(a);
	}
	else if(type == INI_TYPE_KUTDATA)
	{
		new fName[64];
		
		format(fName, 64, "data/kut/%d.ini", a);
	
		new INI:ini = INI_Open(fName);
		
		INI_WriteString(ini, "Nev", BenzinKutak[a][bNev]);
		INI_WriteString(ini, "Tulaj", BenzinKutak[a][bTulaj]);
		INI_WriteInt(ini, "TulajID", BenzinKutak[a][bTulajID]);
		INI_WriteFloat(ini, "PosX", BenzinKutak[a][bPosX]);
		INI_WriteFloat(ini, "PosY", BenzinKutak[a][bPosY]);
		INI_WriteFloat(ini, "PosZ", BenzinKutak[a][bPosZ]);
		INI_WriteFloat(ini, "Tav", BenzinKutak[a][bTav]);
		INI_WriteInt(ini, "Benzin", BenzinKutak[a][bBenzin]);
		INI_WriteInt(ini, "BenzinAra", BenzinKutak[a][bBenzinAra]);
		INI_WriteInt(ini, "Diesel", BenzinKutak[a][bDiesel]);
		INI_WriteInt(ini, "DieselAra", BenzinKutak[a][bDieselAra]);
		INI_WriteInt(ini, "Kerozin", BenzinKutak[a][bKerozin]);
		INI_WriteInt(ini, "KerozinAra", BenzinKutak[a][bKerozinAra]);
		INI_WriteInt(ini, "Szef", BenzinKutak[a][bSzef]);
		INI_WriteInt(ini, "Melyikvan", BenzinKutak[a][bMelyikvan]);
		INI_WriteInt(ini, "BerlesIdo", BenzinKutak[a][bBerlesIdo]);
		INI_WriteInt(ini, "Berelheto", BenzinKutak[a][bBerelheto]);
		INI_WriteInt(ini, "AlapAra", BenzinKutak[a][bAlapAra]);
		
		INI_Close(ini);
	
	}
	else if(type == INI_TYPE_USERDATA)
	{
		new fName[64];
		format(fName, 64, "data/user/%d.ini", SQLID(a));
		
		new INI:ini = INI_Open(fName);
			
		INI_WriteInt(ini, "KorhazIdo", KorhazIdo[a]);
		INI_WriteInt(ini, "Animba", Animban[a]);
		INI_WriteInt(ini, "OnDuty", OnDuty[a]);
		INI_WriteInt(ini, "Onkentesszolgalat", Onkentesszolgalatban[a]);
		
		//élet szükségletek
		INI_WriteFloat(ini, "Ehseg", Ehseg[a]);
		INI_WriteFloat(ini, "Vizelet", Vizelet[a]);
		new Float:elet;
		GetPlayerHealth(a, elet);
		INI_WriteFloat(ini, "Elet", elet);
		
		//pilóta
		INI_WriteInt(ini, "repul",Repul[a]);
		INI_WriteFloat(ini, "PilotaX", PilotaMunkaPos[a][PilotaX]);
		INI_WriteFloat(ini, "PilotaY", PilotaMunkaPos[a][PilotaY]);
		INI_WriteFloat(ini, "PilotaZ", PilotaMunkaPos[a][PilotaZ]);
		INI_WriteFloat(ini, "PilotaHP", PilotaMunkaPos[a][PilotaHP]);
		INI_WriteFloat(ini, "PilotaTavolsag", PilotaMunkaPos[a][PilotaTavolsag]);
		INI_WriteFloat(ini, "PilotaSzorzo", PilotaMunkaPos[a][PilotaSzorzo]);
		INI_WriteInt(ini, "PilotaFizetes", PilotaMunkaPos[a][PilotaFizetes]);
		INI_WriteString(ini, "PilotaCel", PilotaMunkaPos[a][PilotaCel]);
		INI_WriteString(ini, "PilotaKezd", PilotaMunkaPos[a][PilotaKezd]);
		
		// Premium
		INI_WriteFloat(ini, "PKamat", PremiumInfo[a][pKamat]);
		INI_WriteInt(ini, "PKamatIdo", PremiumInfo[a][pKamatIdo]);
		INI_WriteFloat(ini, "PAdo", PremiumInfo[a][pAdo]);
		INI_WriteInt(ini, "PAdoIdo", PremiumInfo[a][pAdoIdo]);
		
		//kamion
		INI_WriteInt(ini, "Kamszallit",Szallit[a]);
		INI_WriteFloat(ini, "KamX", KamionStartPoz[a][KamX]);
		INI_WriteFloat(ini, "KamY", KamionStartPoz[a][KamY]);
		INI_WriteFloat(ini, "KamZ", KamionStartPoz[a][KamZ]);
		INI_WriteFloat(ini, "KamElet", KamionStartPoz[a][KamElet]);
		INI_WriteFloat(ini, "KamTavolsag", KamionStartPoz[a][KamTavolsag]);
		INI_WriteFloat(ini, "KamSzorzo", KamionStartPoz[a][KamSzorzo]);
		INI_WriteInt(ini, "KamRendszam", KamionStartPoz[a][KamRendszam]);
		INI_WriteInt(ini, "KamPotRendszam", KamionStartPoz[a][KamPotRendszam]);
		INI_WriteInt(ini, "KamFizetes", KamionStartPoz[a][KamFizetes]);
		INI_WriteString(ini, "KamCel", KamionStartPoz[a][KamCel]);
		INI_WriteString(ini, "KamKezd", KamionStartPoz[a][KamKezd]);
		INI_WriteInt(ini, "BenzintSzallit", BenzintSzallit[a]);
		
		//bánya
		INI_WriteInt(ini, "MSzen", PlayerInfo[a][pSzen]);
		INI_WriteInt(ini, "MVas", PlayerInfo[a][pVas]);
		INI_WriteInt(ini, "MArany", PlayerInfo[a][pAranym]);
		INI_WriteInt(ini, "MGyemant", PlayerInfo[a][pGyemant]);
		
		INI_WriteInt(ini, "MSzenP", PlayerInfo[a][pSzenP]);
		INI_WriteInt(ini, "MVasP", PlayerInfo[a][pVasP]);
		INI_WriteInt(ini, "MAranyP", PlayerInfo[a][pAranymP]);
		INI_WriteInt(ini, "MGyemantP", PlayerInfo[a][pGyemantP]);
		
		//drogteszt
		INI_WriteInt(ini, "Drogteszt", PlayerInfo[a][pDrogozott]);
		
		//sss
		INI_WriteInt(ini, "SSSTamogatas",SSSTamogatas[a]);
		
		//mdc
		INI_WriteString(ini, "pVad", PlayerCrime[a][pVad]);
		INI_WriteString(ini, "pJelento", PlayerCrime[a][pJelento]);
		INI_WriteString(ini, "pWantedLevel", WantedLevel[a]);

		//jogosítvány
		INI_WriteFloat(ini, "VizsgaRacePoint0", VizsgaRacePoint[a][0]);
		INI_WriteFloat(ini, "VizsgaRacePoint1", VizsgaRacePoint[a][1]);
		INI_WriteFloat(ini, "VizsgaRacePoint2", VizsgaRacePoint[a][2]);
		INI_WriteInt(ini, "Hajocp", Hajocp[a]);
		INI_WriteInt(ini, "Autocp", Autocp[a]);
		INI_WriteInt(ini, "Repulocp",Repulocp[a]);
		INI_WriteInt(ini, "Helicp",Helicp[a]);
		INI_WriteInt(ini, "Adrcp", Adrcp[a]);
		INI_WriteInt(ini, "Kamioncp", Kamioncp[a]);
		INI_WriteInt(ini, "Jogsineki", Jogsineki[a]);
		INI_WriteInt(ini, "Oktato", Oktato[a]);
		INI_WriteInt(ini, "Oktat", Oktat[a]);
		INI_WriteInt(ini, "Vizsgafajta", Vizsgafajta[a]);
		
		//Paintball fegyverek
		tformat(64, "%d,%d,%d,%d", PlayerInfo[a][pPBFegyver][0], PlayerInfo[a][pPBFegyver][1], PlayerInfo[a][pPBFegyver][2], PlayerInfo[a][pPBFegyver][3]);
		INI_WriteString(ini, "PBFegyverek", _tmpString);
		
		format(_tmpString, 128, "%s,%s", SajatRadio[a][rnev],SajatRadio[a][rurl]);
		INI_WriteString(ini, "radio", _tmpString);
		
		Format(_tmpString, "%s,%s,%d,%d,%d", MP4YT[a][yNev], MP4YT[a][yLink], MP4YT[a][yLejatsszik], MP4YT[a][yHossz], MP4YT[a][yMeddig]);
		INI_WriteString(ini, "radio_yt", _tmpString);
		
		INI_WriteInt(ini, "NewsRadioHallgatas", NewsRadioHallgatas[a]);
		INI_WriteInt(ini, "gInfo", gInfo[a]);
		INI_WriteInt(ini, "togkill",togkill[a]);
		INI_WriteInt(ini, "OlesIdo", PlayerInfo[a][pOlesIdo]);
		INI_WriteInt(ini, "Alakit",PlayerInfo[a][pAlakitIdo]);
		
		//PremiumInfo

		//hitel
		format(_tmpString, 128, "%d,%d,%d,%d,%d",PlayerInfo[a][pHitel],PlayerInfo[a][pTorleszto],PlayerInfo[a][pHitelOra],PlayerInfo[a][pHitelHatralek],PlayerInfo[a][pZarolva]);
		INI_WriteString(ini, "hitel", _tmpString);
		
		INI_WriteInt(ini, "tognews",gNews[a]);
		
		format(_tmpString, 128, "%d,%d",PlayerInfo[a][pJelzes],PlayerInfo[a][pJelzesTerkep]);
		INI_WriteString(ini, "terfigyelo", _tmpString);
		INI_WriteInt(ini, "ForaglomFigyelmezteto",ForaglomFigyelmezteto[a]);
		
		format(_tmpString, 128, "%d,%d,%d",PInfo(a,MunkaBenzin),PInfo(a,MunkaAra),PInfo(a,MunkaRendszam));
		INI_WriteString(ini, "MunkaBenzin", _tmpString);
		
		INI_WriteInt(ini,"HackIdo",PlayerInfo[a][pHackIdo]);
		
		INI_WriteInt(ini,"BankKartya",Bankkartya[a]);
		INI_WriteInt(ini,"lecsukta",PlayerInfo[a][plecsukta]);
		
		INI_WriteInt(ini, "HTojas",PlayerInfo[a][pTojas]);
		/*INI_WriteInt(ini,"pMikulasSapka",PlayerInfo[a][pMikulasSapka]);
		INI_WriteInt(ini,"pMikulasCsomag",PlayerInfo[a][pMikulasCsomag]);
		
		format(_tmpString, 128, "%d,%d,%d",PlayerInfo[a][pMikulasSapka],PlayerInfo[a][pMikulasCsomag],PlayerInfo[a][pVirgacs]);
		INI_WriteString(ini, "Mikulas", _tmpString);*/
		
		format(_tmpString,128, "%d,%d",PlayerInfo[a][pAjandekUnixtime],PlayerInfo[a][pAjandek]);
		INI_WriteString(ini, "Ajandek", _tmpString);
		INI_WriteInt(ini,"Textdrawszin", PlayerInfo[a][pTextdrawszin]);
		INI_WriteInt(ini,"AllJailTime", JailTime[a]);
		INI_WriteBool(ini,"SMSinfo",PlayerInfo[a][pSMS]);

		INI_WriteInt(ini,"Vadaszengedely", PlayerInfo[a][pVadaszEngedely]);
		INI_WriteInt(ini,"PaintballTiltas", PlayerInfo[a][pPaintballKitiltva]);
		format(_tmpString, 128, "%d,%d,%d",PlayerInfo[a][pKulcsok][0],PlayerInfo[a][pKulcsok][1],PlayerInfo[a][pKulcsok][2]);
		INI_WriteString(ini, "Orokkulcsok", _tmpString);

		
		format(_tmpString, 256, "%f,%f,%f,%f,%f,%f", ObjectSzemuveg[a][OPosX],ObjectSzemuveg[a][OPosY],ObjectSzemuveg[a][OPosZ],ObjectSzemuveg[a][OPosRX],ObjectSzemuveg[a][OPosRY],ObjectSzemuveg[a][OPosRZ]);
		INI_WriteString(ini, "ObjectSzemuveg", _tmpString);
		
		
		for(new slot;slot < MAXGOTOMARK;slot++)
		{
			new uzz[128];
			format(uzz,sizeof(uzz),"AMark_%d",slot);
			format(_tmpString,256,"%f,%f,%f,%d,%d",MarkPos[a][slot][Markx],MarkPos[a][slot][Marky],MarkPos[a][slot][Markz],MarkPos[a][slot][MarkVW],MarkPos[a][slot][MarkINT]);
			INI_WriteString(ini, uzz, _tmpString);
		
		}
		INI_WriteBool(ini, "LaptopAllapot", PlayerInfo[a][pLaptopBe]);
		
		format(_tmpString, 128, "%d,%d",PlayerInfo[a][pAspirin],PlayerInfo[a][pCataflan]);
		INI_WriteString(ini, "Gyogyszer", _tmpString);
		
		INI_WriteInt(ini,"TaxiSzolgalati",Taxi[a][tFizetes]);
		
		
		format(_tmpString, 256, "%s@%.3f",PlayerInfo[a][pSpecialJogsiNev],PlayerInfo[a][pSpecialJogsiKm]);
		INI_WriteString(ini, "SpecJogsi", _tmpString);
		
		format(_tmpString, 128, "%d,%d,%d",PlayerInfo[a][pHazKulcsok][0],PlayerInfo[a][pHazKulcsok][1],PlayerInfo[a][pHazKulcsok][2]);
		INI_WriteString(ini, "Hazkulcsok", _tmpString);
		
		// bonus
		#if defined SYSTEM_BONUS
		INI_WriteFloat(ini, "BonusKamat", BonusInfo[a][B:Kamat]);
		INI_WriteInt(ini, "BonusKamatIdo", BonusInfo[a][B:KamatIdo]);
		INI_WriteFloat(ini, "BonusAdo", BonusInfo[a][B:Ado]);
		INI_WriteInt(ini, "BonusAdoIdo", BonusInfo[a][B:AdoIdo]);
		#endif
		
		INI_WriteInt(ini, "CustomHudWeapon", PlayerInfo[a][pCustomHudWeapon]);
		INI_WriteInt(ini, "TVJOG",TvEngedely[a]);
		INI_WriteBool(ini, "AutoAdo",PlayerInfo[a][pAdoAuto]);
		
		TFormat("%d,%d", PlayerInfo[a][pSpawnType], PlayerInfo[a][pSpawnId]);
		INI_WriteString(ini, "Spawn", _tmpString);
		
		INI_Close(ini);
	}
	else if(type == INI_TYPE_FEGYVERRAKTAR)
	{
		if(a == -1)
		{
			for(new f = 1; f < MAX_FRAKCIO; f++)
				INI_Save(a, f);
			
			return 1;
		}
		
		format(_tmpString, 64, "data/fegyverraktar/%d.ini", a);
		new INI:ini = INI_Open(_tmpString);
		
		for(new w = 0; w < MAX_FEGYVERRAKTAR_SLOT; w++)
			format(_tmpString, 32, "Weapon_%d", w), INI_WriteInt(ini, _tmpString, FrakcioInfo[a][fFegyver][w]);
		
		new tmp[32];
		for(new w = 0; w < MAX_FEGYVERRAKTAR_SLOT; w++)
			format(_tmpString, 32, "Ammo_%d", w), format(tmp, 64, "%d,%d", FrakcioInfo[a][fLoszerTipus][w], FrakcioInfo[a][fLoszerMennyiseg][w]), INI_WriteString(ini, _tmpString, tmp);

		INI_Close(ini);
	}
	return 1;
}

// pubok
fpublic DoLogin(playerid)
{
	AdatBetoltesSQL(playerid);
	AdatLekeres(playerid, ADAT_TYPE_AKTIVITAS);
	MarBelepett[playerid] = true;
	BejelentkezokSzama++;
	new y,m,d,h,mi,napocska;
	gettime(h,mi); getdate(y,m,d);
	napocska = GetWeekdayNum(d,m,y);
	SendFormatMessage(playerid, COLOR_LIGHTGREEN, "ClassRPG: Üdvözlünk "COL_FEHER"%s"COL_LIGHTGREEN", %d.%02d.%02d (%s) %02d:%02d van. "COL_FEHER"Jó játékot kívánunk!",PlayerName(playerid),y,m,d,GetWeekdayString(napocska),h,mi);
	Msg(playerid, "A karakter betöltése folyamatban...");
	Freeze(playerid);
	StopAudioStreamForPlayer(playerid);
}

fpublic OnClientStatusChange(uid, active, time, code[], ip[])
{
	printf("[SERVER] Client: %d - Status: %d - Time: %d", uid, active, time);
	
	if(active) for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(Connected[p] && SQLID(p) == uid && egyezik(PlayerIP(p), ip))
		{
			PlayerInfo[p][pKliensLastStatus] = UnixTime;
			if(!PlayerInfo[p][pKliensAktiv])
			{
				if(!MarBelepett[p] || PlayerInfo[p][pKliensDisconnectTime] < (UnixTime - 30))
					Msg(p, "A kliens aktív");
					
				PlayerInfo[p][pKliensAktiv] = 1;
				PlayerInfo[p][pKliensIdo] = 0;
				strmid(PlayerInfo[p][pCode], code, 0, 39, 40);
				CheckForCodeBan(1, p, uid, code);
				
				if(Log_ClientConnects)
					tformat(256, "[Kliens][PID(%d):UID(%d)]%s - kliens aktív - ip: %s", p, uid, PlayerName(p), ip), Log("Scripter", _tmpString);
			}
				
			break;
		}
	}
	else for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(Connected[p] && SQLID(p) == uid)
		{
			if(PlayerInfo[p][pKliensAktiv])
			{
				//Msg(p, "A kliens szétkapcsolt");
				PlayerInfo[p][pKliensAktiv] = 0;
				PlayerInfo[p][pKliensIdo] = UnixTime + time + 300;
				PlayerInfo[p][pKliensDisconnectTime] = UnixTime;
				PlayerInfo[p][pKliensDisconnectWarn] = 0;
				
				if(Log_ClientConnects)
					tformat(256, "[Kliens][PID(%d):UID(%d)]%s - kliens szétkapcsolt - ip: %s", p, uid, PlayerName(p), ip), Log("Scripter", _tmpString);
			}
			
			break;
		}
	}
	
	return 1;
}

// stockok
stock CheckForCodeBan(preQuery, playerid, uid, code[])
{
	if(preQuery)
	{
		tformat(128, "SELECT Cim, Oka FROM %s WHERE Cim='%s'", SQL_DB_Ban, code);
		doQuery(_tmpString, SQL_CC_BAN, playerid, uid);
		return 1;
	}
	
	new rows, fields;
	sql_data(rows, fields);
	
	if(rows == 1 && Connected[playerid] && PlayerInfo[playerid][pID] == uid)
	{
		BanKiiras(playerid, 0);
		
		new cim[64], oka[128];
		sql_get_str(0, cim);
		sql_get_str(1, oka);
		
		tformat(256, "[CBAN] %s megpróbált belépni (ok: %s - cid: %s)", Nev(playerid), oka, cim);
		Log("Ban", _tmpString);
		
		PlayerInfo[playerid][pCodeBanned] = 1;
	}
	else
		PlayerInfo[playerid][pCodeBanned] = 0;
	
	return 1;
}

stock CheckClassClient()
{
	ClassClient = (CLIENT_IsActive() == 12345 ? 1 : 0);
	//printf("Class client: %d", ClassClient);
}

stock ResetCarParts(vehicleid)
{
	CarPart[vehicleid][cKerekek] = 0.0;
	CarPart[vehicleid][cMotorolaj] = 0.0;
	CarPart[vehicleid][cAkkumulator] = 100.0;
	CarPart[vehicleid][cElektronika] = 0.0;
	CarPart[vehicleid][cFek] = 0.0;
	CarPart[vehicleid][cKarosszeria] = 0;
	CarPart[vehicleid][cSzervizdatum] = 0;
}
stock SaveCarParts(vehicleid)
{
	new type = CarType[vehicleid];
	
	if(type == CAR_TYPE_VS && CarUID[vehicleid] >= 0)
		format(_tmpString, 64, "data/carparts/vs_%d.ini", CarUID[vehicleid]);
	else if(type == CAR_TYPE_FK && CarUID[vehicleid] >= 0 && CarUID2[vehicleid] >= 0)
		format(_tmpString, 64, "data/carparts/fk_%d_%d.ini", CarUID[vehicleid], CarUID2[vehicleid]);
	else if(type == CAR_TYPE_MK && CarUID[vehicleid] >= 0 && CarUID2[vehicleid] >= 0)
		format(_tmpString, 64, "data/carparts/mk_%d_%d.ini", CarUID[vehicleid], CarUID2[vehicleid]);
	else
		return 0;
		
	if(!fexist(_tmpString))
		return 0;
	
	new INI:ini = INI_Open(_tmpString);
	
	INI_WriteFloat(ini, "Gumik", CarPart[vehicleid][cKerekek]);
	INI_WriteFloat(ini, "Motorolaj", CarPart[vehicleid][cMotorolaj]);
	INI_WriteFloat(ini, "Akkumulator", CarPart[vehicleid][cAkkumulator]);
	INI_WriteFloat(ini, "Elektronika", CarPart[vehicleid][cElektronika]);
	INI_WriteFloat(ini, "Fek", CarPart[vehicleid][cFek]);
	INI_WriteInt(ini, "Karosszeria", CarPart[vehicleid][cKarosszeria]);
	INI_WriteInt(ini, "Szervizdatum", CarPart[vehicleid][cSzervizdatum]);
	INI_Close(ini);
	
	return 1;
}

stock ResetCarTrunk(vehicleid)
{
	CarTrunk[vehicleid][cMuanyag] = 0;
	CarTrunk[vehicleid][cCserje] = 0;
	CarTrunk[vehicleid][cMak] = 0;
	CarTrunk[vehicleid][cCannabis] = 0;
	CarTrunk[vehicleid][cFegyver] = {0,0,0,0,0};
	CarTrunk[vehicleid][cLoszerTipus] = {0,0,0,0,0};
	CarTrunk[vehicleid][cLoszerMennyiseg] = {0,0,0,0,0};
	CarTrunk[vehicleid][cMaterial] = 0;
	CarTrunk[vehicleid][cHeroin] = 0;
	CarTrunk[vehicleid][cKokain] = 0;
	CarTrunk[vehicleid][cMarihuana] = 0;
	CarTrunk[vehicleid][cMelleny] = Float:{0.0,0.0,0.0,0.0,0.0};
	CarTrunk[vehicleid][cFegyverCsomag] = 0;
	CarTrunk[vehicleid][cAlma] = 0;
	CarTrunk[vehicleid][cTolto] = 0;
	CarTrunk[vehicleid][cKaja] = 0;
	CarTrunk[vehicleid][cOlaj] = 0;
}

stock SaveCarTrunk(vehicleid)
{
	new type = CarType[vehicleid];
	
	if(type == CAR_TYPE_VS && CarUID[vehicleid] >= 0)
		format(_tmpString, 64, "data/cartrunk/vs_%d.ini", CarUID[vehicleid]);
	else if(type == CAR_TYPE_FK && CarUID[vehicleid] >= 0 && CarUID2[vehicleid] >= 0)
		format(_tmpString, 64, "data/cartrunk/fk_%d_%d.ini", CarUID[vehicleid], CarUID2[vehicleid]);
	else if(type == CAR_TYPE_MK && CarUID[vehicleid] >= 0 && CarUID2[vehicleid] >= 0)
		format(_tmpString, 64, "data/cartrunk/mk_%d_%d.ini", CarUID[vehicleid], CarUID2[vehicleid]);
	else
		return 0;
		
	if(!fexist(_tmpString))
		return 0;
	
	new INI:ini = INI_Open(_tmpString);
	
	INI_WriteInt(ini, "Muanyag", CarTrunk[vehicleid][cMuanyag]);
	INI_WriteInt(ini, "Cserje", CarTrunk[vehicleid][cCserje]);
	INI_WriteInt(ini, "Mak", CarTrunk[vehicleid][cMak]);
	INI_WriteInt(ini, "Cannabis", CarTrunk[vehicleid][cCannabis]);
	INI_WriteInt(ini, "Mati", CarTrunk[vehicleid][cMaterial]);
	INI_WriteInt(ini, "Heroin", CarTrunk[vehicleid][cHeroin]);
	INI_WriteInt(ini, "Kokain", CarTrunk[vehicleid][cKokain]);
	INI_WriteInt(ini, "Marihuana", CarTrunk[vehicleid][cMarihuana]);
	INI_WriteInt(ini, "Fegyvercsomag", CarTrunk[vehicleid][cFegyverCsomag]);
	INI_WriteInt(ini, "Alma", CarTrunk[vehicleid][cAlma]);
	INI_WriteInt(ini, "Tolto", CarTrunk[vehicleid][cTolto]);
	INI_WriteInt(ini, "Kaja", CarTrunk[vehicleid][cKaja]);
	INI_WriteInt(ini, "Olaj", CarTrunk[vehicleid][cOlaj]);
	
	valstr(_tmpString, CarTrunk[vehicleid][cFegyver][0]);
	for(new w = 1; w < MAX_JARMU_WEAPON_SLOT; w++)
		tformat(128, "%s,%d", _tmpString, CarTrunk[vehicleid][cFegyver][w]);
	INI_WriteString(ini, "Fegyver", _tmpString);
	
	tformat(256, "%d:%d", CarTrunk[vehicleid][cLoszerTipus][0], CarTrunk[vehicleid][cLoszerMennyiseg][0]);
	for(new a = 1; a < MAX_JARMU_WEAPON_SLOT; a++)
		tformat(256, "%s,%d:%d", _tmpString, CarTrunk[vehicleid][cLoszerTipus][a], CarTrunk[vehicleid][cLoszerMennyiseg][a]);
	INI_WriteString(ini, "Loszer", _tmpString);
	
	tformat(128, "%0.f", CarTrunk[vehicleid][cMelleny][0]);
	for(new m = 1; m < MAX_JARMU_MELLENY_SLOT; m++)
		tformat(128, "%s,%0.f", _tmpString, CarTrunk[vehicleid][cMelleny][m]);
	INI_WriteString(ini, "Melleny", _tmpString);
	
	INI_Close(ini);
	
	return 1;
}

fpublic INI_Load_CarParts(vehid, name[], value[])
{
	INI_Float("Gumik", CarPart[vehid][cKerekek]);
	INI_Float("Motorolaj", CarPart[vehid][cMotorolaj]);
	INI_Float("Akkumulator", CarPart[vehid][cAkkumulator]);
	INI_Float("Elektronika", CarPart[vehid][cElektronika]);
	INI_Float("Fek", CarPart[vehid][cFek]);
	INI_Int("Karosszeria", CarPart[vehid][cKarosszeria]);
	INI_Int("Szervizdatum", CarPart[vehid][cSzervizdatum]);
	return 1;
}

fpublic INI_Load_CarTrunk(vehicleid, name[], value[])
{
	INI_Int("Muanyag", CarTrunk[vehicleid][cMuanyag]);
	INI_Int("Cserje", CarTrunk[vehicleid][cCserje]);
	INI_Int("Mak", CarTrunk[vehicleid][cMak]);
	INI_Int("Cannabis", CarTrunk[vehicleid][cCannabis]);
	INI_Int("Mati", CarTrunk[vehicleid][cMaterial]);
	INI_Int("Heroin", CarTrunk[vehicleid][cHeroin]);
	INI_Int("Kokain", CarTrunk[vehicleid][cKokain]);
	INI_Int("Marihuana", CarTrunk[vehicleid][cMarihuana]);
	INI_Int("Fegyvercsomag", CarTrunk[vehicleid][cFegyverCsomag]);
	INI_Int("Alma", CarTrunk[vehicleid][cAlma]);
	INI_Int("Tolto", CarTrunk[vehicleid][cTolto]);
	INI_Int("Kaja", CarTrunk[vehicleid][cKaja]);
	INI_Int("Olaj", CarTrunk[vehicleid][cOlaj]);
	
	if(egyezik(name, "Fegyver"))
		return sscanf(value, "p<,>a<i>(0)["#MAX_JARMU_WEAPON_SLOT"]", CarTrunk[vehicleid][cFegyver]), 1;
	
	if(egyezik(name, "Loszer"))
	{
		new splitted[2][128];
		if(!sscanf(value, "p<:>a<s[128]>(0,0,0,0,0)[2]", splitted))
			return sscanf(splitted[0], "p<,>a<i>(0)["#MAX_JARMU_WEAPON_SLOT"]", CarTrunk[vehicleid][cLoszerTipus]),
					sscanf(splitted[1], "p<,>a<i>(0)["#MAX_JARMU_WEAPON_SLOT"]", CarTrunk[vehicleid][cLoszerMennyiseg]),
			1; 
	}
	
	if(egyezik(name, "Melleny"))
		return sscanf(value, "p<,>a<i>(0)["#MAX_JARMU_MELLENY_SLOT"]", CarTrunk[vehicleid][cMelleny]);
	
	return 1;
}

stock LoadCarTrunk(vehicleid, uid, type)
{
	if(type == INI_TYPE_CARDATA_VS && CarUID[vehicleid] >= 0)
		format(_tmpString, 64, "data/cartrunk/vs_%d.ini", CarUID[vehicleid]);
	else if(type == INI_TYPE_CARDATA_FK && CarUID[vehicleid] >= 0 && CarUID2[vehicleid] >= 0)
		format(_tmpString, 64, "data/cartrunk/fk_%d_%d.ini", CarUID[vehicleid], CarUID2[vehicleid]);
	else if(type == INI_TYPE_CARDATA_MK && CarUID[vehicleid] >= 0 && CarUID2[vehicleid] >= 0)
		format(_tmpString, 64, "data/cartrunk/mk_%d_%d.ini", CarUID[vehicleid], CarUID2[vehicleid]);
	else
		return 0;
		
	if(fexist(_tmpString))
		INI_ParseFile(_tmpString, "INI_Load_CarTrunk", bExtra = 1, vehicleid);
}

stock LoadCarParts(vehicleid, uid, type)
{
	if(type == INI_TYPE_CARDATA_VS && CarUID[vehicleid] >= 0)
		format(_tmpString, 64, "data/carparts/vs_%d.ini", CarUID[vehicleid]);
	else if(type == INI_TYPE_CARDATA_FK && CarUID[vehicleid] >= 0 && CarUID2[vehicleid] >= 0)
		format(_tmpString, 64, "data/carparts/fk_%d_%d.ini", CarUID[vehicleid], CarUID2[vehicleid]);
	else if(type == INI_TYPE_CARDATA_MK && CarUID[vehicleid] >= 0 && CarUID2[vehicleid] >= 0)
		format(_tmpString, 64, "data/carparts/mk_%d_%d.ini", CarUID[vehicleid], CarUID2[vehicleid]);
	else
		return 0;
		
	if(fexist(_tmpString))
		INI_ParseFile(_tmpString, "INI_Load_CarParts", bExtra = 1, vehicleid);
}

stock MarkerAction(playerid, a, e = NINCS)
{
	if(a == PLAYER_MARKER_CLEAR)
	{
		PlayerMarker[playerid][mType] = PLAYER_MARKER_NONE;
		
		foreach(Jatekosok, j)
		{
			SetPlayerMarkerForPlayer(j, playerid, COLOR_INVISIBLE);
		}
	}
	elseif(a == PLAYER_MARKER_SET)
	{
		switch(e)
		{
			case PLAYER_MARKER_NONE:
			{
				switch(PlayerMarker[playerid][mType])
				{
					case PLAYER_MARKER_WEAPONHOLD:
					{
						PlayerMarker[playerid][mTime] = PLAYER_MARKER_TIME_WEAPONHOLD;
					}
					case PLAYER_MARKER_TARGET:
					{
						PlayerMarker[playerid][mTime] = PLAYER_MARKER_TIME_TARGET;
					}
					default:
					{
						MarkerAction(playerid, PLAYER_MARKER_CLEAR);
					}
				}
			}
			case PLAYER_MARKER_ENGEDELY .. PLAYER_MARKER_MKILL:
			{
				PlayerMarker[playerid][mType] = e;

				new msg[128];
				
				switch(e)
				{
					case PLAYER_MARKER_ENGEDELY:
					{
						PlayerMarker[playerid][mTime] = 0;
						format(msg, 128, "[Térfigyelõ] Engedély nélküli vezetés (#%d)", PlayerInfo[playerid][pBID]);
						
						foreach(Jatekosok, p)
						{
							if(!LMT(p, FRAKCIO_SCPD)) continue;
							
//							if(0 < PlayerInfo[p][pJelzes] <= e)
//								SendClientMessage(p, PLAYER_MARKER_COLOR_WEAPONHOLD, msg);
							
							if(0 < PlayerInfo[p][pJelzesTerkep] <= e)
								SetPlayerMarkerForPlayer(p, playerid, PLAYER_MARKER_COLOR_ENGEDELY);
						}
					}
					case PLAYER_MARKER_WEAPONHOLD:
					{
						PlayerMarker[playerid][mTime] = 0;
						format(msg, 128, "[Térfigyelõ] Illegális fegyverviselés (#%d)", PlayerInfo[playerid][pBID]);
						
						foreach(Jatekosok, p)
						{
							if(!IsACop(p)) continue;
							
							if(0 < PlayerInfo[p][pJelzes] <= e)
								SendClientMessage(p, PLAYER_MARKER_COLOR_WEAPONHOLD, msg);
							
							if(0 < PlayerInfo[p][pJelzesTerkep] <= e)
								SetPlayerMarkerForPlayer(p, playerid, PLAYER_MARKER_COLOR_WEAPONHOLD);
						}
					}
					case PLAYER_MARKER_TARGET:
					{
						PlayerMarker[playerid][mTime] = 0;
						format(msg, 128, "[Térfigyelõ] Fenyegetés történt (#%d)", PlayerInfo[playerid][pBID]);
						
						foreach(Jatekosok, p)
						{
							if(!IsACop(p)) continue;
							
							if(0 < PlayerInfo[p][pJelzes] <= e)
								SendClientMessage(p, PLAYER_MARKER_COLOR_TARGET, msg);
							
							if(0 < PlayerInfo[p][pJelzesTerkep] <= e)
								SetPlayerMarkerForPlayer(p, playerid, PLAYER_MARKER_COLOR_TARGET);
						}
					}
					case PLAYER_MARKER_SHOOT:
					{
						PlayerMarker[playerid][mTime] = PLAYER_MARKER_TIME_SHOOT;
						format(msg, 128, "[Térfigyelõ] Lövöldözés van folyamatban (#%d)", PlayerInfo[playerid][pBID]);
						
						foreach(Jatekosok, p)
						{
							if(!IsACop(p)) continue;
							
							if(0 < PlayerInfo[p][pJelzes] <= e)
								SendClientMessage(p, PLAYER_MARKER_COLOR_SHOOT, msg);
							
							if(0 < PlayerInfo[p][pJelzesTerkep] <= e)
								SetPlayerMarkerForPlayer(p, playerid, PLAYER_MARKER_COLOR_SHOOT);
						}
					}
					case PLAYER_MARKER_KILL:
					{
						PlayerMarker[playerid][mTime] = PLAYER_MARKER_TIME_KILL;
						format(msg, 128, "[Térfigyelõ] Gyilkosság történt (#%d)", PlayerInfo[playerid][pBID]);
						
						foreach(Jatekosok, p)
						{
							if(!IsACop(p)) continue;
							
							if(0 < PlayerInfo[p][pJelzes] <= e)
								SendClientMessage(p, PLAYER_MARKER_COLOR_KILL, msg);
							
							if(0 < PlayerInfo[p][pJelzesTerkep] <= e)
								SetPlayerMarkerForPlayer(p, playerid, PLAYER_MARKER_COLOR_KILL);
						}
					}
					case PLAYER_MARKER_MKILL:
					{
						PlayerMarker[playerid][mTime] = PLAYER_MARKER_TIME_MKILL;
						format(msg, 128, "[Térfigyelõ] Többszörös gyilkosság (#%d)", PlayerInfo[playerid][pBID]);
						
						foreach(Jatekosok, p)
						{
							if(!IsACop(p)) continue;
							
							if(0 < PlayerInfo[p][pJelzes] <= e)
								SendClientMessage(p, PLAYER_MARKER_COLOR_MKILL, msg);
							
							if(0 < PlayerInfo[p][pJelzesTerkep] <= e)
								SetPlayerMarkerForPlayer(p, playerid, PLAYER_MARKER_COLOR_MKILL);
						}
					}
				}
			}
		}
	}
	elseif(a == PLAYER_MARKER_ON_STREAM)
	{
		if(IsACop(e))
		{
			if(!PlayerMarker[playerid][mHidden] && 0 < PlayerInfo[e][pJelzesTerkep] <= PlayerMarker[playerid][mType])
			{
				switch(PlayerMarker[playerid][mType])
				{
					case PLAYER_MARKER_ENGEDELY:
					{
						if(LMT(playerid, FRAKCIO_SCPD))
							SetPlayerMarkerForPlayer(e, playerid, PLAYER_MARKER_COLOR_ENGEDELY);
					}
					case PLAYER_MARKER_WEAPONHOLD:
						SetPlayerMarkerForPlayer(e, playerid, PLAYER_MARKER_COLOR_WEAPONHOLD);
					case PLAYER_MARKER_TARGET:
						SetPlayerMarkerForPlayer(e, playerid, PLAYER_MARKER_COLOR_TARGET);
					case PLAYER_MARKER_SHOOT:
						SetPlayerMarkerForPlayer(e, playerid, PLAYER_MARKER_COLOR_SHOOT);
					case PLAYER_MARKER_KILL:
						SetPlayerMarkerForPlayer(e, playerid, PLAYER_MARKER_COLOR_KILL);
					case PLAYER_MARKER_MKILL:
						SetPlayerMarkerForPlayer(e, playerid, PLAYER_MARKER_COLOR_MKILL);
				}
			}
			else
				SetPlayerMarkerForPlayer(e, playerid, COLOR_INVISIBLE);
		}
	}
	elseif(a == PLAYER_MARKER_ON_MARKER)
	{
		new msg[128];
		if(e == PLAYER_MARKER_ON_MARKER_SHOW)
		{
			PlayerMarker[playerid][mHidden] = 0;
			
			format(msg, 128, "[Térfigyelõ] %d újra észlelve a térfigyelõ rendszer által", PlayerInfo[playerid][pBID]);
			
			switch(PlayerMarker[playerid][mType])
			{
				case PLAYER_MARKER_ENGEDELY:
				{
					foreach(Jatekosok, p)
					{
						if(!LMT(p, FRAKCIO_SCPD)) continue;
							
//						if(0 < PlayerInfo[p][pJelzes] <= PlayerMarker[playerid][mType])
//							SendClientMessage(p, PLAYER_MARKER_COLOR_WEAPONHOLD, msg);
						
						if(0 < PlayerInfo[p][pJelzesTerkep] <= PlayerMarker[playerid][mType])
							SetPlayerMarkerForPlayer(p, playerid, PLAYER_MARKER_COLOR_ENGEDELY);
					}
				}
				case PLAYER_MARKER_WEAPONHOLD:
				{
					foreach(Jatekosok, p)
					{
						if(!IsACop(p)) continue;
							
						if(0 < PlayerInfo[p][pJelzes] <= PlayerMarker[playerid][mType])
							SendClientMessage(p, PLAYER_MARKER_COLOR_WEAPONHOLD, msg);
						
						if(0 < PlayerInfo[p][pJelzesTerkep] <= PlayerMarker[playerid][mType])
							SetPlayerMarkerForPlayer(p, playerid, PLAYER_MARKER_COLOR_WEAPONHOLD);
					}
				}
				case PLAYER_MARKER_TARGET:
				{
					foreach(Jatekosok, p)
					{
						if(!IsACop(p)) continue;
							
						if(0 < PlayerInfo[p][pJelzes] <= PlayerMarker[playerid][mType])
							SendClientMessage(p, PLAYER_MARKER_COLOR_TARGET, msg);
						
						if(0 < PlayerInfo[p][pJelzesTerkep] <= PlayerMarker[playerid][mType])
							SetPlayerMarkerForPlayer(p, playerid, PLAYER_MARKER_COLOR_TARGET);
					}
				}
				case PLAYER_MARKER_SHOOT:
				{
					foreach(Jatekosok, p)
					{
						if(!IsACop(p)) continue;
							
						if(0 < PlayerInfo[p][pJelzes] <= PlayerMarker[playerid][mType])
							SendClientMessage(p, PLAYER_MARKER_COLOR_SHOOT, msg);
						
						if(0 < PlayerInfo[p][pJelzesTerkep] <= PlayerMarker[playerid][mType])
							SetPlayerMarkerForPlayer(p, playerid, PLAYER_MARKER_COLOR_SHOOT);
					}
				}
				case PLAYER_MARKER_KILL:
				{
					foreach(Jatekosok, p)
					{
						if(!IsACop(p)) continue;
							
						if(0 < PlayerInfo[p][pJelzes] <= PlayerMarker[playerid][mType])
							SendClientMessage(p, PLAYER_MARKER_COLOR_KILL, msg);
						
						if(0 < PlayerInfo[p][pJelzesTerkep] <= PlayerMarker[playerid][mType])
							SetPlayerMarkerForPlayer(p, playerid, PLAYER_MARKER_COLOR_KILL);
					}
				}
				case PLAYER_MARKER_MKILL:
				{
					foreach(Jatekosok, p)
					{
						if(!IsACop(p)) continue;
							
						if(0 < PlayerInfo[p][pJelzes] <= PlayerMarker[playerid][mType])
							SendClientMessage(p, PLAYER_MARKER_COLOR_MKILL, msg);
						
						if(0 < PlayerInfo[p][pJelzesTerkep] <= PlayerMarker[playerid][mType])
							SetPlayerMarkerForPlayer(p, playerid, PLAYER_MARKER_COLOR_MKILL);
					}
				}
			}
		}
		else
		{
			PlayerMarker[playerid][mHidden] = 1;
			
			if(e == PLAYER_MARKER_ON_MARKER_CITYEXIT)
				format(msg, 128, "[Térfigyelõ] %d-t elvesztette a térfigyelõ rendszer - Utolsó pozíció: /térfigyelõ utolsópozíció %d", PlayerInfo[playerid][pBID], PlayerInfo[playerid][pBID]);
			else
				format(msg, 128, "[Térfigyelõ] %d-t elvesztette a térfigyelõ rendszer", PlayerInfo[playerid][pBID]);
				
			switch(PlayerMarker[playerid][mType])
			{
				case PLAYER_MARKER_ENGEDELY:
				{
					foreach(Jatekosok, p)
					{
						if(!LMT(p, FRAKCIO_SCPD)) continue;
							
//						if(0 < PlayerInfo[p][pJelzes] <= PlayerMarker[playerid][mType])
//							SendClientMessage(p, PLAYER_MARKER_COLOR_WEAPONHOLD, msg);
						
						if(0 < PlayerInfo[p][pJelzesTerkep] <= PlayerMarker[playerid][mType])
							SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
					}
				}
				case PLAYER_MARKER_WEAPONHOLD:
				{
					foreach(Jatekosok, p)
					{
						if(!IsACop(p)) continue;
							
						if(0 < PlayerInfo[p][pJelzes] <= PlayerMarker[playerid][mType])
							SendClientMessage(p, PLAYER_MARKER_COLOR_WEAPONHOLD, msg);
						
						if(0 < PlayerInfo[p][pJelzesTerkep] <= PlayerMarker[playerid][mType])
							SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
					}
				}
				case PLAYER_MARKER_TARGET:
				{
					foreach(Jatekosok, p)
					{
						if(!IsACop(p)) continue;
							
						if(0 < PlayerInfo[p][pJelzes] <= PlayerMarker[playerid][mType])
							SendClientMessage(p, PLAYER_MARKER_COLOR_TARGET, msg);
						
						if(0 < PlayerInfo[p][pJelzesTerkep] <= PlayerMarker[playerid][mType])
							SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
					}
				}
				case PLAYER_MARKER_SHOOT:
				{
					foreach(Jatekosok, p)
					{
						if(!IsACop(p)) continue;
							
						if(0 < PlayerInfo[p][pJelzes] <= PlayerMarker[playerid][mType])
							SendClientMessage(p, PLAYER_MARKER_COLOR_SHOOT, msg);
						
						if(0 < PlayerInfo[p][pJelzesTerkep] <= PlayerMarker[playerid][mType])
							SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
					}
				}
				case PLAYER_MARKER_KILL:
				{
					foreach(Jatekosok, p)
					{
						if(!IsACop(p)) continue;
							
						if(0 < PlayerInfo[p][pJelzes] <= PlayerMarker[playerid][mType])
							SendClientMessage(p, PLAYER_MARKER_COLOR_KILL, msg);
						
						if(0 < PlayerInfo[p][pJelzesTerkep] <= PlayerMarker[playerid][mType])
							SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
					}
				}
				case PLAYER_MARKER_MKILL:
				{
					foreach(Jatekosok, p)
					{
						if(!IsACop(p)) continue;
							
						if(0 < PlayerInfo[p][pJelzes] <= PlayerMarker[playerid][mType])
							SendClientMessage(p, PLAYER_MARKER_COLOR_MKILL, msg);
						
						if(0 < PlayerInfo[p][pJelzesTerkep] <= PlayerMarker[playerid][mType])
							SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
					}
				}
			}
		}
	}
	elseif(a == PLAYER_MARKER_ON_REFRESH)
	{
		if(PlayerInfo[playerid][pJelzesTerkep] == 0) foreach(Jatekosok, p) //ha nem akar látni semmit
		{
			if(PlayerMarker[p][mType] != 0)
				SetPlayerMarkerForPlayer(playerid, p, COLOR_INVISIBLE);
		}
		else foreach(Jatekosok, p) // ha látni akar egyes jelzéseket
		{
			if(0 < PlayerInfo[playerid][pJelzesTerkep] <= PlayerMarker[p][mType])
			{
				switch(PlayerMarker[p][mType])
				{
					case PLAYER_MARKER_ENGEDELY:
					{
						if(LMT(playerid, FRAKCIO_SCPD))
							SetPlayerMarkerForPlayer(playerid, p, PLAYER_MARKER_COLOR_ENGEDELY);
					}
					case PLAYER_MARKER_WEAPONHOLD:
						SetPlayerMarkerForPlayer(playerid, p, PLAYER_MARKER_COLOR_WEAPONHOLD);
					case PLAYER_MARKER_TARGET:
						SetPlayerMarkerForPlayer(playerid, p, PLAYER_MARKER_COLOR_TARGET);
					case PLAYER_MARKER_SHOOT:
						SetPlayerMarkerForPlayer(playerid, p, PLAYER_MARKER_COLOR_SHOOT);
					case PLAYER_MARKER_KILL:
						SetPlayerMarkerForPlayer(playerid, p, PLAYER_MARKER_COLOR_KILL);
					case PLAYER_MARKER_MKILL:
						SetPlayerMarkerForPlayer(playerid, p, PLAYER_MARKER_COLOR_MKILL);
					
				}
			}
			elseif(PlayerMarker[p][mType] != 0)
				SetPlayerMarkerForPlayer(playerid, p, COLOR_INVISIBLE);
		}
	}
	return 1;
}

stock FegyverIllegalis(playerid, fegyver)
{
	//shotgun, shawnoff, combat és ak47, m4 és sniper
	if((26 <= fegyver <= 27 || 30 <= fegyver <= 31 || fegyver == 34) && !IsACop(playerid))
		return true;
	
	return false;
}

//stock Event(playerid, main, sub, p1 = -1)
stock Event(playerid, main, sub)
{

	/* =========== *\
		  R I O
	\* =========== */
	if(main == EVENT_TYPE_RIO && playerid != -1)
	{
		if(sub == EVENT_ACTION_ENTER)
		{
			if(RioZene[0] != EOS)
			{
				SendClientMessage(playerid, COLOR_WHITE, RioZene);
				PlayAudioStreamForPlayer(playerid, RioZene);
				RiobanVan{playerid} = 1;
			}
		}
		elseif(sub == EVENT_ACTION_EXIT)
		{
			StopAudioStreamForPlayer(playerid);
			RiobanVan{playerid} = 0;
		}
	}
	
	/* ================= *\
	    U S E R D A T A
	\* ================= */
	elseif(main == EVENT_TYPE_USERDATA) 
	{
		if(sub == EVENT_ACTION_LOAD) 
		{
			
			new file[64];
			format(file, 64, "data/user/%d.ini", SQLID(playerid));
			
			
			if(fexist(file))
				INI_ParseFile(file, "INI_Load_Userdata", .bExtra = true, .extra = playerid);
			
			
		}
		else if(sub == EVENT_ACTION_SAVE)
		{
			INI_Save(INI_TYPE_USERDATA, playerid);
		}
	}

	/* ================= *\
	    M O R I A R T Y
	\* ================= */
	elseif(main == EVENT_TYPE_MORIARTY && playerid != -1)
	{
		if(sub == EVENT_ACTION_ENTER)
		{
			if(MoriartyZene[0] != EOS)
			{
				SendClientMessage(playerid, COLOR_WHITE, MoriartyZene);
				PlayAudioStreamForPlayer(playerid, MoriartyZene);
				MoriartybanVan{playerid} = 1;
			}
		}
		elseif(sub == EVENT_ACTION_EXIT)
		{
			StopAudioStreamForPlayer(playerid);
			MoriartybanVan{playerid} = 0;
		}
	}
	
}

stock OnPlayerPreLogin(playerid)
{
	
	Event(playerid, EVENT_TYPE_USERDATA, EVENT_ACTION_LOAD);
	
}

stock FrakcioSzef(munka, penz, sor=0)
{
	new szeflog[128];
	new penzelotte = FrakcioInfo[ munka ][fPenz];
	if(-750000000 < penz < 0)
	{
		FrakcioInfo[ munka ][fPenz] +=penz;
		
		format(szeflog,sizeof(szeflog), "[FrakcioSzef kivétel %d] %d munka, VOLT: %s Levont: %s Ft Lett %s Ft",sor, munka, FormatInt(penzelotte), FormatInt(penz), FormatInt(FrakcioInfo[ munka ][fPenz]));
		Log("Scripter",szeflog);
		return 1;
	}
	else if(0 <= penz < 750000000)
	{
		new bool:adozo = false; 
		for(new xx; xx < MAX_ADO_FRAKCIO; xx++)
		{
			if(AdozoFrakciok[xx] == munka && FrakcioInfo[munka][fAdo] > 0)
				adozo=true;
		}
		if(adozo)
		{
			new ado;
			ado = floatround((float(penz) / 100)) * FrakcioInfo[munka][fAdo];
			FrakcioInfo[ FRAKCIO_ONKORMANYZAT ][fPenz] +=ado;
			
			
			//printf("%s | + %s",FormatInt(FrakcioInfo[ munka ][fPenz]),penz);
			FrakcioInfo[ munka ][fPenz] +=penz;
			format(szeflog,sizeof(szeflog), "[Frakcio ADÓ]%d Frakció | %d %% | Adó: %s | Adott: %s | Adó nélkül: %s",munka, FrakcioInfo[munka][fAdo],FormatInt(ado), FormatInt(penz-ado), FormatInt(penz));
			FrakcioInfo[ munka ][fPenz] -=ado;
			FrakcioInfo[munka][fHeti] +=ado;
			FrakcioInfo[munka][fHavi] +=ado;
			FrakcioInfo[munka][fOsszes] +=ado;
			//printf("%s | - %s",FormatInt(FrakcioInfo[ munka ][fPenz]),ado);
			Log("Szef",szeflog);
			
		}
		else
		{
			FrakcioInfo[ munka ][fPenz] +=penz;
			format(szeflog,sizeof(szeflog), "[FrakcioSzef bevétel %d] %d munka, VOLT: %s Berakot: %s Ft Lett %s Ft",sor, munka, FormatInt(penzelotte), FormatInt(penz), FormatInt(FrakcioInfo[ munka ][fPenz]));
			Log("Szef",szeflog);
		}
		
		return 1;
	}
	else
	{
		format(szeflog,sizeof(szeflog), "[FrakcioSzef HIBA %d]  %d munka, VOLT: %s Változás: %s Ft Lett %s Ft",sor, munka, FormatInt(penzelotte), FormatInt(penz), FormatInt(FrakcioInfo[ munka ][fPenz]));
		Log("Scripter",szeflog);
		return 0;
	}
	

}
stock PlayerSave(playerid = NINCS)
{
	
	if(playerid == NINCS) foreach(Jatekosok, i)
	{
		AdatMentesSQL(i);
		Event(i, EVENT_TYPE_USERDATA, EVENT_ACTION_SAVE);
	}
	else
	{
		AdatMentesSQL(playerid);
		Event(playerid, EVENT_TYPE_USERDATA, EVENT_ACTION_SAVE);
	}
	return 1;
}


stock Float:OsszesPenz(playerid, Float:oszto = 1.0)
{
	new Float:penz, hKulcs[ MAX_HOUSE_PER_PLAYER ], bKulcs, btKulcs, szef = GetPlayerBerSzefID(playerid), x, benyaKulcs;
	
	hKulcs[0] = PlayerInfo[playerid][pPhousekey];
	hKulcs[1] = PlayerInfo[playerid][pPhousekey2];
	hKulcs[2] = PlayerInfo[playerid][pPhousekey3];
	
	bKulcs = PlayerInfo[playerid][pPbiskey];
	btKulcs = PlayerInfo[playerid][pBizniszKulcs];
	benyaKulcs = PlayerInfo[playerid][pBenzinkut];
	
	// Készpénz
	penz += PlayerInfo[playerid][pCash] > 0 ? float(PlayerInfo[playerid][pCash]) / oszto : 0.0;
	
	// Bankszámla
	penz += PlayerInfo[playerid][pBankSzamlaSzam] > 0 && PlayerInfo[playerid][pAccount] > 0 ? float(PlayerInfo[playerid][pAccount]) / oszto : 0.0;
	
	// Házak
	for(x = -1; ++x < MAX_HOUSE_PER_PLAYER;) 
		penz += hKulcs[x] != NINCS && HouseInfo[ hKulcs[x] ][hTakings] > 0 ? float(HouseInfo[hKulcs[x]][hTakings]) / oszto : 0.0;
	
	// Biznisz
	penz += bKulcs != NINCS && BizzInfo[bKulcs][bTill] > 0 ? float(BizzInfo[bKulcs][bTill]) / oszto : 0.0;
	
	// Biznisz TársTulaj
	penz += btKulcs != NINCS && BizzInfo[btKulcs][bTill2] > 0 ? float(BizzInfo[btKulcs][bTill2]) / oszto : 0.0;

	// Bérszéf
	penz += szef != NINCS && BerSzef[szef][bPenz] > 0 ? float(BerSzef[szef][bPenz]) / oszto : 0.0;
	
	//Benzinkút
	penz += benyaKulcs != NINCS && BenzinKutak[benyaKulcs][bSzef] > 0 ? float(BenzinKutak[benyaKulcs][bSzef]) / oszto : 0.0;

	return penz;
}

stock bool:PlayerInArea(playerid = -1, Float:xMin, Float:xMax, Float:yMin, Float:yMax, Float:zMin = -0.1, Float:zMax = -0.1, Float:x = -0.1, Float:y = -0.1, Float:z = -0.1) {

	if(playerid != -1) {
		GetPlayerPos(playerid, x, y, z);
	}
	
	return (xMin <= x <= xMax && yMin <= y <= yMax && (zMin == -0.1 || zMin != -0.1 && zMin <= z <= zMax));
}
stock ButorSzam(playerid)
{
	if(NincsHaza(playerid))
		return -2;
	if(HazabanVan(playerid) == NINCS)
		return NINCS;
		
	new i = NINCS,szamlalas = 0,
	hazszam = HazabanVan(playerid);

	for(;++i < MAXBUTORSZAM;)
	{
		if((ButorInfo[i][butorHasznalva] == true) && (ButorInfo[i][butorVW] == hazszam))
		{
			szamlalas++;
		}
	}
	return szamlalas;
}

stock ButorObjectID(objectid)
{
	new i = NINCS,visszateres = NINCS;
	for(;++i < MAXBUTORSZAM;)
	{
		if(ButorInfo[i][butorHasznalva])
		{
			if(ButorInfo[i][butorObject] == objectid)
			{
				visszateres = i;
				break;
			}
		}
	}
	return visszateres;
}

stock SzabadButorID()
{
	new visszateres = NINCS,i = NINCS;
	for(;++i < MAXBUTORSZAM;)
	{
		if(!ButorInfo[i][butorHasznalva])
		{
			visszateres = i;
			break;
		}
	}
	return visszateres;
}

stock Tab(text[], text2[], tabcount = 0)
{
		new tab_[16] = "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",out[128];
		if((tabcount = (((tabcount + 1) * 8) - strlen(text) - 1) / 8) < 0
		|| tabcount >= sizeof tab_) tabcount = 0;
		format(out, sizeof out, "%s%s%s", text, tab_[(sizeof(tab_) - 1) - tabcount], text2);
		return out;
}

stock GetXButor(playerid, szam)
{
	new visszateres = NINCS,i = NINCS,
	szamlalas = 0,hazszam = HazabanVan(playerid);
	//printf("Szám: %d", szam);
	for(;++i < MAXBUTORSZAM;)
	{
		if(ButorInfo[i][butorVW] == hazszam && ButorInfo[i][butorHasznalva])
		{
			szamlalas++;
			if(szamlalas == szam)
			{
				visszateres = i;
				//printf("Visszatérés: %d", visszateres);
				break;
			}
		}
	}
	return visszateres;
}

//================================= Testobjectek

stock PutRiotShieldOnBack(playerid)
{
    if(IsPlayerAttachedObjectSlotUsed(playerid,ATTACH_SLOT_ZSAK_PAJZS_BILINCS)) RemovePlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS);
	SetPlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS , 18637, 1, 0, -0.1, 0.18, 90, 0, 272, 1, 1, 1);
}

stock PutRiotShieldOnArm(playerid)
{
    if(IsPlayerAttachedObjectSlotUsed(playerid,ATTACH_SLOT_ZSAK_PAJZS_BILINCS)) RemovePlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS);
	SetPlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
}


// ==================================Testobjectek


stock FixPos(&Float:x, &Float:y, &Float:z, &Int, &VW)
{
	if(x != x || y != y || z != z)
	{
		x = 1482.373;
		y = -1744.980;
		z = 13.546;
		Int = 0;
		VW = 0;
	}
}

stock FrakcioAdatok( akcio, frakcio = NINCS )
{
	if(frakcio == NINCS)
	{
		For(f, 1, MAX_FRAKCIO)
			FrakcioAdatok(akcio, f);
		
		return 1;
	}
	else if(frakcio < 1 || frakcio >= MAX_FRAKCIO)
		return 1;
		
	if( akcio == FRAKCIO_LOAD )
	{
		FrakcioAdat[frakcio][fRadar] = 0;
	}
	else if( akcio == FRAKCIO_SAVE )
	{
	
	}
	
	return 1;
}


stock ResetPlayerPos( playerid )
{
	new Float:pos[3];
	GetPlayerPos( playerid, ArrExt( pos ) );
	SetPlayerPos( playerid, ArrExt( pos ) );
}

stock KamionDepoban(playerid)
{

	if(PlayerToPoint(60, playerid, 1415.5291,1052.7705,10.8130) || 
		PlayerToPoint(60, playerid, 912.3523,-1231.9344,16.9766) ||
		PlayerToPoint(60, playerid, 2295.0344,-2346.5205,13.5469) ||
		PlayerToPoint(60, playerid, 693.6850,883.3599,-38.9472) ||
		PlayerToPoint(60, playerid, -1863.2732,-1717.8804,22.7687) ||
		PlayerToPoint(60, playerid, 261.4588,1380.6322,10.2935) ||
		PlayerToPoint(60, playerid, -2277.9685, 2408.8477, 4.3230) ||
		PlayerToPoint(60, playerid, -2027.1521, -204.5435, 36.0990) ||
		PlayerToPoint(60, playerid, 65.6033,-249.1413,2.6100) ||
		PlayerToPoint(60, playerid, -2396.3308,-610.1276,132.6484) ||
		PlayerToPoint(60, playerid, -463.9242,-81.2976,60.5539) ||
		PlayerToPoint(60, playerid, -1732.6672, 110.6683, 3.1465) ||
		PlayerToPoint(60, playerid, 2792.6604,-1618.4401,10.9219) ||
		PlayerToPoint(60, playerid, -2739.7366,101.5862,4.5391))
		return 1;
		else
		return 0;

}
stock Repteren(playerid)
{
	if(	PlayerToPoint(12.5, playerid, 1740.960,-2434.134,14.751) || // LS REPTÉR
		PlayerToPoint(12.5, playerid, -1472.4352,-194.1006,15.3445) || // SF REPTÉR
		PlayerToPoint(12.5, playerid, 1578.1694,1539.2313,12.0204) || // LV REPTÉR
		PlayerToPoint(12.5, playerid, 365.3524,2537.1438,16.6648)) // LV GÉPTEMETÕ
		return 1;
		else
		return 0;
}
stock RemoveFromCar( playerid )
{
	new kocsi;
	if( (kocsi = GetPlayerVehicleID(playerid), kocsi) > 0 && IsVehicleConnected( kocsi ) )
	{
		new Float: pos[3];
		GetVehiclePos( kocsi, pos[0], pos[1], pos[2] );
		GetXYLeftOfVehicle( kocsi, pos[0], pos[1], 2.0 );
		SetPlayerPos( playerid, pos[0], pos[1], pos[2] );
	}
}


stock UCP_Check( bool: preQuery = true, sid = 0 )
{
	if( preQuery )
	{
		new query[128];
		
		// Account megerõsítések
		//format(query, 128, "SELECT ID FROM %s WHERE Megerositve='0'", SQL_DB_Account); doQuery( query, SQL_SYSTEM_UCP, 1 );
		
		// Karakter létrehozások
		format(query, 128, "SELECT ID FROM %s WHERE Letrehozas='1'", SQL_DB_Account); doQuery( query, SQL_SYSTEM_UCP, 2 );
		
		// Karakter társítások
		format(query, 128, "SELECT ID FROM %s WHERE Tarsitas='1'", SQL_DB_Account); doQuery( query, SQL_SYSTEM_UCP, 3 );
	
		// Karakter névváltások
		format(query, 128, "SELECT ID FROM %s WHERE Elbiralva='n'", SQL_DB_Nev); doQuery( query, SQL_SYSTEM_UCP, 4 );
		
		return 1;
 }

	new rows, fields;
	sql_data(rows, fields);
	if(rows) switch( sid )
	{
		//case 1: ABroadCastFormat(COLOR_LIGHTBLUE, 1, "<< Kezelõfelület: %d UCP felhasználó vár megerõsítésre >>", rows);
		case 2: ABroadCastFormat(COLOR_LIGHTBLUE, 1, "<< Kezelõfelület: %d karakter vár megerõsítésre >>", rows);
		case 3: ABroadCastFormat(COLOR_LIGHTBLUE, 1, "<< Kezelõfelület: %d társítás vár megerõsítésre >>", rows);
		case 4: ABroadCastFormat(COLOR_LIGHTBLUE, 6, "<< Kezelõfelület: %d névváltás vár megerõsítésre >>", rows);
	}
	
	return 1;
}

stock FekvoRendor( bool:keszit = true )
{
	if( keszit )
	{
		new id;
		
		Fekvorendorok[id][0] = CreateDynamicPickup(1007, 14, 1517.6188,-1734.8392,13.4838, 0);
		Fekvorendorok[id][1] = CreateDynamicPickup(1007, 14, 1517.7963,-1730.1848,13.4524, 0);
		Iter_Add(Fekvorendor, id); id++;
		
		//VH elõtt
		Fekvorendorok[id][0] = CreateDynamicPickup(1007, 14, 1441.8480,-1734.6932,13.4435, 0);
		Fekvorendorok[id][1] = CreateDynamicPickup(1007, 14, 1441.5813,-1730.0034,13.4813, 0);
		Iter_Add(Fekvorendor, id); id++;
		
		//kórház elõtt
		Fekvorendorok[id][0] = CreateDynamicPickup(1007, 14, 1207.6276,-1304.3875,13.4637, 0);
		Fekvorendorok[id][1] = CreateDynamicPickup(1007, 14, 1204.2159,-1304.3180,13.4637, 0);
		Fekvorendorok[id][2] = CreateDynamicPickup(1007, 14, 1199.0625,-1304.3737,13.4637, 0);
		Fekvorendorok[id][3] = CreateDynamicPickup(1007, 14, 1194.5891,-1304.3064,13.4637, 0);
		Iter_Add(Fekvorendor, id); id++;
		
		//kórház elõtt 2
		Fekvorendorok[id][0] = CreateDynamicPickup(1007, 14, 1194.5873,-1357.8834,13.4583, 0);
		Fekvorendorok[id][1] = CreateDynamicPickup(1007, 14, 1197.4144,-1357.7679,13.4637, 0);
		Fekvorendorok[id][2] = CreateDynamicPickup(1007, 14, 1202.1692,-1357.7611,13.4738, 0);
		Fekvorendorok[id][3] = CreateDynamicPickup(1007, 14, 1206.4027,-1357.7576,13.4738, 0);
		Iter_Add(Fekvorendor, id); id++;
	}
	else
	{
		new x;
		foreach(Fekvorendor, f)
		{
			for(x = 0; x < MAX_FEKVORENDOR_PICK; x++)
			{
				if(IsValidDynamicPickup(Fekvorendorok[f][x] ))
					DestroyDynamicPickup( Fekvorendorok[f][x] );
			}
		}
		
		Iter_Clear(Fekvorendor);
	}
	
	return 1;
}


stock IsAllTerno(playerid)
{
	#pragma unused playerid
	/*if(PlayerInfo[playerid][pID] == 8183668)
	//if(PlayerInfo[playerid][pID] == -400)
		return 0;
	else*/
		return 0;

}
stock IsAllDenaro(playerid)
{
	#pragma unused playerid
	//Oka admin figyelése észrevétlenül. Szkripter ezen infót nem adhatja ki senkinek!!!!
	/*if(PlayerInfo[playerid][pID] == 8184314)
		return 1;
	else*/
		return 0;
}

stock IsPedro(playerid)
{
	#pragma unused playerid
	/*if(PlayerInfo[playerid][pID] == 8172424)
		return 1;
	else*/
		return 0;
}
stock IsTerno(playerid)
{
	if(PlayerInfo[playerid][pID] == 234)
		return 1;
		
	return 0;
}

stock GetNewIndex()
{
	for(new i=1; i < MAX_ELDOBAS; i++) if(!Eldob[i][eldobhasznalva]) return i;
	return 0;
}

stock UjRendelesIndex()
{
    new i = -1,x = -1;
	for(;++i < MAX_FSZ_RENDELES;)
	{
		if(!FszInfo[i][fszVan])
		{
			x = i;
			break;
		}
	}
	return x;
}

stock EldobottCuccNullazas(id)
{
	Eldob[id][Tipus] = -1;
	Eldob[id][Mennyiseg] = 0;
	if(IsValidDynamicObject(Eldob[id][eldobobject]))
		DestroyDynamicObject(Eldob[id][eldobobject]),Eldob[id][eldobobject]=INVALID_OBJECT_ID;
	if(IsValidDynamic3DTextLabel(Eldob[id][texteldob]))
		DestroyDynamic3DTextLabel(Eldob[id][texteldob]),Eldob[id][texteldob]=INVALID_3D_TEXT_ID;
	Eldob[id][eldobposx] = 0;
	Eldob[id][eldobposy] = 0;
	Eldob[id][eldobposz] = 0;
	Eldob[id][eldobhasznalva] = false;
	Eldob[id][eInt] = 0;
	Eldob[id][eVw] = 0;
	Eldob[id][eIdo] = NINCS;
	Eldob[id][EVan] = false;
	return true;
}
/*
stock RoncsderbiSerules(kocsi, player, torol = false)
{

	
	if(torol)
	{
	
		if(IsValidDynamic3DTextLabel(RoncsderbiFelirat[kocsi])) DestroyDynamic3DTextLabel(RoncsderbiFelirat[kocsi]), RoncsderbiFelirat[kocsi] = INVALID_3D_TEXT_ID;
		
	}
	else
	{	
		
		new szoveg[256];
		new Float:serules = (1000.0 - KocsiElete[kocsi]) / 6.5;
			
		if(serules < 0.0)
			serules = 0.0;
		else if(serules > 100.0)
			serules = 100.0;
		
		if(RoncsFelSerul[player] != serules)
		{
			RoncsFelSerul[player] = serules;
			format(szoveg, sizeof(szoveg), "=====Versenyzõ: %s======",PlayerName(player));
			
			
			format(szoveg, sizeof(szoveg), "%s\nSérülés: %.0f%%.",szoveg,serules);
			
			
			
			if(IsValidDynamic3DTextLabel(RoncsderbiFelirat[kocsi]))
			{
				DestroyDynamic3DTextLabel(RoncsderbiFelirat[kocsi]), 
				RoncsderbiFelirat[kocsi]=INVALID_3D_TEXT_ID;

			}
			RoncsderbiFelirat[kocsi] = CreateDynamic3DTextLabel(szoveg, 0xF5DEB3FF, 0.0, 0.0, 2.0, 20.0, INVALID_PLAYER_ID, kocsi, 1);
		}
	}

}
*/
stock KereskedoFelirat(kocsi, torol = false)
{
	

	
	
	if(kocsi > MAXVSKOCSI)
		kocsi = IsAVsKocsi(kocsi);
	
	if(kocsi == NINCS) return 1;
	
	if(torol)
	{
		
		if(IsValidDynamic3DTextLabel(CarInfo[kocsi][cFelirat])) DestroyDynamic3DTextLabel(CarInfo[kocsi][cFelirat]), CarInfo[kocsi][cFelirat] = INVALID_3D_TEXT_ID;
		
	}
	else
	{
		
		new szoveg[256];
		format(szoveg, sizeof(szoveg), "=====Eladó jármû: %s======",GetVehicleModelName(GetVehicleModel(CarInfo[kocsi][cId])));
		switch(CarInfo[kocsi][cNeon])
		{
			case 0:{format(szoveg, sizeof(szoveg), "%s\nNeon: nincs.",szoveg);}
			case 1:{format(szoveg, sizeof(szoveg), "%s\nNeon: kék.",szoveg);}
			case 2:{format(szoveg, sizeof(szoveg), "%s\nNeon: piros.",szoveg);}
			case 3:{format(szoveg, sizeof(szoveg), "%s\nNeon: rózsaszín.",szoveg);}
			case 4:{format(szoveg, sizeof(szoveg), "%s\nNeon: fehér.",szoveg);}
			case 5:{format(szoveg, sizeof(szoveg), "%s\nNeon: zöld.",szoveg);}
			case 6:{format(szoveg, sizeof(szoveg), "%s\nNeon: sárga.",szoveg);}
		}
		if(CarInfo[kocsi][cRiaszto] == 1) format(szoveg, sizeof(szoveg), "%s\nRiasztó: 1.Szintû:Csak sípol.",szoveg);

		else if(CarInfo[kocsi][cRiaszto] == 2) format(szoveg, sizeof(szoveg), "%s\nRiasztó: 2.Szintû:Sípol és jelez a tulajnak.",szoveg);

		else if(CarInfo[kocsi][cRiaszto] == 3) format(szoveg, sizeof(szoveg), "%s\nRiasztó: 3.Szintû:Sípol, jelez a tulajnak és a rendõrségnek.",szoveg);

		else if(CarInfo[kocsi][cRiaszto] == 4) format(szoveg, sizeof(szoveg), "%s\nRiasztó: 4.Szintû: Gátolja a kocsi indítását nehezen törhetõ!",szoveg);
		else format(szoveg, sizeof(szoveg), "%s\nRiasztó: : NINCS",szoveg);

		
		format(szoveg, sizeof(szoveg), "%s\nIrányár: : %s Ft",szoveg,FormatNumber( CarInfo[kocsi][cValue], 0, ',' ));
		format(szoveg, sizeof(szoveg), "%s\nKm: %d KM",szoveg,floatround(KmSzamol[CarInfo[kocsi][cId]]/1000));
		format(szoveg, sizeof(szoveg), "%s\nRendszám: CLS-%d",szoveg,CarInfo[kocsi][cId]);
		format(szoveg, sizeof(szoveg), "%s\nEladó: %s",szoveg,CarInfo[kocsi][cOwner]);
		
		if(IsValidDynamic3DTextLabel(CarInfo[kocsi][cFelirat])) DestroyDynamic3DTextLabel(CarInfo[kocsi][cFelirat]), CarInfo[kocsi][cFelirat]=INVALID_3D_TEXT_ID;


		CarInfo[kocsi][cFelirat] = CreateDynamic3DTextLabel(szoveg, 0xF5DEB3FF, 0.0, 0.0, 2.0, 20.0, INVALID_PLAYER_ID, CarInfo[kocsi][cId], 1);
		
	}
	
	return 1;
}
stock KozeliEldobottCucc(playerid)
{
	for(new idx=1; idx < MAX_ELDOBAS; idx++ )
	{
		if(Eldob[idx][eldobhasznalva])
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, Eldob[idx][eldobposx], Eldob[idx][eldobposy], Eldob[idx][eldobposz]))
			{
				return idx;
			}
		}
	}
	return 0;
}

stock EldobottCucc(id, tipus, mennyiseg, text[], Float:cuccx, Float:cuccy, Float:cuccz, edVw = -1)
{
	new objectid;
	Eldob[id][Tipus] = tipus;
	Eldob[id][Mennyiseg] = mennyiseg;
	Eldob[id][texteldob] = CreateDynamic3DTextLabel(text, 0xFFFFFF, cuccx, cuccy, cuccz-0.9, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, true, .worldid = edVw);
	switch(Eldob[id][Tipus])
	{
		case 4: objectid = 2060; // materials
		case 5: objectid = 1578; // heroin
		case 6: objectid = 1575; // kokain
		case 7: objectid = 1576; // marihuana
	}
	Eldob[id][eldobobject] = CreateDynamicObject(objectid, cuccx, cuccy, cuccz-1, 0.0, 0.0, 0.0, edVw);
	Eldob[id][eldobposx] = cuccx;
	Eldob[id][eldobposy] = cuccy;
	Eldob[id][eldobposz] = cuccz;
	Eldob[id][eldobhasznalva] = true;
	Eldob[id][eVw] = edVw;
	Eldob[id][eIdo] = UnixTime+MAX_ELDOBOTTCUCC_IDO;
	return true;
}

stock JHGarazs(p)
{
    new h = NINCS, eddig, osszeselado,
	uzenet[128],string[128],pg,pg2,pg3;
	pg = PlayerInfo[p][pPhousekey];
	pg2 = PlayerInfo[p][pPhousekey2];
	pg3 = PlayerInfo[p][pPhousekey3];
    
    format(string, sizeof(string), "Házhoz kötött:");
    for(;++h < MAXGARAZS;)
    {
		
        if(((pg != NINCS) && (GarazsInfo[h][hHaz] == pg)) || ((pg2 != NINCS) && (GarazsInfo[h][hHaz] == pg2)) || ((pg3 != NINCS) && (GarazsInfo[h][hHaz] == pg3)))
        {
            if(h != PlayerInfo[p][pGarazs] && GarazsInfo[h][Van] == 1)
            {
	            eddig++;
	            osszeselado++;
	            format(string, sizeof(string), "%s %d", string, h);

	            if(eddig == MAXHAZPERSOR)
	            {
	                format(uzenet, sizeof(uzenet), "%s", string);
	                eddig = 0;
	            }
            }
        }
        if((h+1) == MAXGARAZS)
        {
            if(osszeselado == 0)
            	format(uzenet, sizeof(uzenet), "Házhoz kötött: Nincs");
			else if(eddig > 0)
				format(uzenet, sizeof(uzenet), "%s", string);
        }
    }
    return uzenet;
}

stock MSinceTime(uIdo)
{
	new Ido,nIdo, uzenet[128];
	Ido = floatround((UnixTime - uIdo) / 3600);
	if(uIdo <= 0 || Ido <= 0) {
	    format(uzenet ,sizeof(uzenet), "Nincs adat");
 		return uzenet;
	}
	if(Ido >= 24) {
	    nIdo = floatround(Ido / 24);
	    format(uzenet ,sizeof(uzenet), "%d napja", nIdo);
	} 
    else if(Ido < 24) {
        format(uzenet ,sizeof(uzenet), "%d órája", Ido);
    } 
	return uzenet;
} 
stock VizsgaRaceAllit(playerid, Float:x, Float:y, Float:z, kor = 5)
{
	new oktato = OnlineUID(Oktato[playerid]);
	if(oktato == NINCS || GetDistanceBetweenPlayers(playerid, oktato) > 5.0) return Msg(playerid, "Nincs jelen az oktató!!! Ennek okai lehet LAGG vagy kilépett!!!");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Msg(playerid, "Mégis miért az oktató vezet????");
	DisablePlayerCheckpoint(playerid), DisablePlayerCheckpoint(oktato);
	SetPlayerCheckpoint(playerid,x,y,z,5), SetPlayerCheckpoint(oktato,x,y,z,kor);
	VizsgaRacePoint[playerid][0]=x,VizsgaRacePoint[playerid][1]=y,VizsgaRacePoint[playerid][2]=z;
	VizsgaRacePoint[oktato][0]=x,VizsgaRacePoint[oktato][1]=y,VizsgaRacePoint[oktato][2]=z;
	return 1;
}
stock JarmuAlakitas(vs, model)
{
	new log[256];
	format(log, 256, "[jármu átalakítás]Eredeti: %d új %d Tulaj: %s, Rendszám: %d",vs, model, CarInfo[vs][cOwner],CarInfo[vs][cId]);
	printf(log);
	new Float:x, Float:y, Float:z, Float:a;
	GetVehiclePos(CarInfo[vs][cId], x, y, z);
	GetVehicleZAngle(CarInfo[vs][cId], a);

	z += 1.0;

	CarInfo[vs][cModel] = model;
	CarInfo[vs][cLocationx] = x;
	CarInfo[vs][cLocationy] = y;
	CarInfo[vs][cLocationz] = z;
	CarInfo[vs][cAngle] = a;
	CarInfo[vs][cRiaszto] = 0;
	CarInfo[vs][cNeon] = 0;
	KereskedoFelirat(vs, true);
	CarInfo[vs][cKerek] = 0;
	CarInfo[vs][cTuning] = 0;
	CarInfo[vs][cMatrica] = 3;
	CarInfo[vs][cNeon] = 0;
	CarInfo[vs][cRiaszto] = 0;
	CarInfo[vs][cHidraulika] = 0;
	CarInfo[vs][cDetektor] = 0;
	KmSzamol[CarInfo[vs][cId]]=0;
	
	for (new i; i < 14; i++)
	{
		new componentid = GetVehicleComponentInSlot(CarInfo[vs][cId], i);
		if (componentid != 0)
			RemoveVehicleComponent(CarInfo[vs][cId], componentid);
		CarInfo[vs][cTuningok][i] = 0;
	}
	
	for(new id=1; id <= 28;id++)
	{
		CarUpdate(vs, id);
	}
	
	DestroyVehicle(CarInfo[vs][cId]);
	CarInfo[vs][cId] = UjKocsi(model, CarInfo[vs][cLocationx], CarInfo[vs][cLocationy], CarInfo[vs][cLocationz], CarInfo[vs][cAngle], CarInfo[vs][cColorOne], CarInfo[vs][cColorTwo], .type = CAR_TYPE_VS, .uid = vs);
	
	
	CarInfo[vs][cModel] = model;
	CarInfo[vs][cLocationx] = x;
	CarInfo[vs][cLocationy] = y;
	CarInfo[vs][cLocationz] = z;
	CarInfo[vs][cAngle] = a;
	CarInfo[vs][cRiaszto] = 0;
	CarInfo[vs][cNeon] = 0;
	KereskedoFelirat(vs, true);
	CarInfo[vs][cKerek] = 0;
	CarInfo[vs][cTuning] = 0;
	CarInfo[vs][cMatrica] = 3;
	CarInfo[vs][cNeon] = 0;
	CarInfo[vs][cRiaszto] = 0;
	CarInfo[vs][cHidraulika] = 0;
	CarInfo[vs][cDetektor] = 0;
	KmSzamol[CarInfo[vs][cId]]=0;
	
	for(new id=1; id <= 28;id++)
	{
		CarUpdate(vs, id);
	}
	EgyebLog(log);
	return true;
}

stock RadioBetoltes(playerid, targetid = NINCS) 
{
    if(Zsebradio[playerid] > 0) return true;
	//new kocsi = GetClosestVehicle(playerid);
	
	new radioid = KocsiRadio[GetClosestVehicle(playerid)];
	
	if(radioid < 1) return 1;
	
	switch(radioid -1)
	{
		case 0: 
		{
			StopAudioStreamForPlayer(playerid);
			//GameTextForPlayer(playerid, "~r~RADIO KIKAPCSOLVA", 950, 5);
	    }
		case 1: 
		{
			GameTextForPlayer(targetid, SajatRadio[targetid][rnev], 950, 5);
			PlayAudioStreamForPlayer(targetid, SajatRadio[targetid][rurl]);
			return true;
	    }
		case 2:
		{
			PlayYoutubeForPlayerFromStart(playerid, MP4YT[targetid][yLink], MP4);
			return true;
		}
		default:
		{
			GameTextForPlayer(playerid, RadioClass[radioid-1][2], 950, 5);
			PlayAudioStreamForPlayer(playerid, RadioClass[radioid-1][0]);
			return true;
		}
	
	}
	return true;
}


stock IsAValodiKocsi(vehicleid) // írtam egy ilyet is, csak hogy motoron meg biciklin ne lehessen hallgatni :)
{
 new x=GetVehicleModel(vehicleid);
 if(x>=400 && x!=509 && x!=481 && x!=510 && x!=548 && x!=425 && x!=417 && x!=487 && x!=488 && x!=497 && x!=563 && x!=447 && x!=469 && x!=592 && x!=577 && x!=511 && x!=512 && x!=593 && x!=520 && x!=553 && x!=476 && x!= 519 &&
	x!=460 && x!=513 && x!=472 && x!=473 && x!=493 && x!=595 && x!=484 && x!=430 && x!=453 && x!=452 && x!=446 && x!=454 && x!=449 && x!=537 && x!=538 && x!=548)
 return true;
 else return false;
}

stock bool:IngyenTankol(playerid, kocsi)
{
	new melo = IsFrakcioKocsi(kocsi);
	if(melo == PlayerInfo[playerid][pMember] && FrakcioInfo[melo][fIngyenTank])
		return true;
	else
		return false;
}

fpublic TankolasNyugta(playerid)
{
	new tVeg = 0;
	new kocsi = Tankol[playerid][0];
	tVeg = pTankolas[playerid][pLiter]*pTankolas[playerid][pUzAr];
      
	new hour,minute,second;
	gettime(hour,minute,second);
               
	new year, month,day;
	getdate(year, month, day);
	
	new szamlasz[500];
 
	format(szamlasz, sizeof(szamlasz), "Üzemanyag típusa: %s\nÖsszesen tankolt: %d Liter\nFizetett összeg: %d Ft\nKelt.: %d.%02d.%02d. - %02d:%02d", pTankolas[playerid][pTipusa], pTankolas[playerid][pLiter],tVeg, year, month, day, hour, minute);
       
	ShowPlayerDialog(playerid, DIALOG_MSGINFO, DIALOG_STYLE_MSGBOX, "Számla", szamlasz, "Rendben", "");
	
	SendClientMessage(playerid, COLOR_LIGHTGREEN, "Köszönjük, hogy nálunk vásárolt!");
	SendClientMessage(playerid, COLOR_LIGHTGREEN, "Biztonságos, és jó utat kívánunk!");
	
	pTankolas[playerid][pLiter] = 0;
	pTankolas[playerid][pUzAr] = 0;
	
	if(IngyenTankol(playerid, kocsi))
	{
		format(szamlasz,sizeof(szamlasz),"[%d. frakció(%s) - TANKOLÁS]%s frakció kocsiba tankolt a széfbõl %s Ft-ból",PlayerInfo[playerid][pMember],Szervezetneve[PlayerInfo[playerid][pMember] - 1][2],PlayerName(playerid),FormatInt(tVeg));
		Log("Szef",szamlasz);
	}
}
fpublic NetKuponTime(playerid)
{
	NetKavezo[playerid] = 0;
	Msg(playerid, "Lejárt a netkuponod!");

}
fpublic IsAtNetKavezoPC(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(4.0, playerid, 1409.5242,-1557.8024,13.9759) || PlayerToPoint(4.0, playerid, 1409.5657,-1559.1770,13.9759) ||
		  PlayerToPoint(4.0, playerid, 1409.6083,-1560.4694,13.9759) || PlayerToPoint(4.0, playerid, 1409.5444,-1561.5751,13.9759) ||
		  PlayerToPoint(4.0, playerid, 1409.5239,-1563.0199,13.9759) || PlayerToPoint(4.0, playerid, 1409.5452,-1564.3439,13.9759))
		{
		    return 1;
		}
	}
	return 0;
}

fpublic IsAtNetKavezoPult(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(4.0, playerid, 1410.2373,-1570.1655,13.9759) || PlayerToPoint(4.0, playerid, 1412.8561,-1570.2051,13.9759))
		{
		    return 1;
		}
	}
	return 0;
}

fpublic IsAtNetKavezo(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(20.0, playerid, 1414.0493,-1562.6418,14.9675))
		{
		    return 1;
		}
	}
	return 0;
}

stock GetMoveDirectionFromKeys(ud, lr)
{
	new direction = 0;
	
    if(lr < 0)
	{
		if(ud < 0) 		direction = MOVE_FORWARD_LEFT; 	// Up & Left key pressed
		else if(ud > 0) direction = MOVE_BACK_LEFT; 	// Back & Left key pressed
		else            direction = MOVE_LEFT;          // Left key pressed
	}
	else if(lr > 0) 	// Right pressed
	{
		if(ud < 0)      direction = MOVE_FORWARD_RIGHT;  // Up & Right key pressed
		else if(ud > 0) direction = MOVE_BACK_RIGHT;     // Back & Right key pressed
		else			direction = MOVE_RIGHT;          // Right key pressed
	}
	else if(ud < 0) 	direction = MOVE_FORWARD; 	// Up key pressed
	else if(ud > 0) 	direction = MOVE_BACK;		// Down key pressed
	
	return direction;
}

//--------------------------------------------------
stock BortonNev(id)
{
  new nev[32] = "???";
  switch(id)
  {
	case 1: nev="LSPD";
	case 2: nev="SFPD";
	case 3: nev="Ajail";
	case 4: nev="NAV";
	case 5: nev="FBI";
	case 6: nev="MZ";
	case 7: nev="fegyenctelep";
	case 8: nev="Extra MZ";
  }
  return nev;
}
stock BortonFrakcioID(bortonidje)
{
  new idx;
  switch(bortonidje)
  {
	case 1: idx = 1; //LSPD
	case 2: idx = 14; //SFPD
	case 3: idx = 0;//Ajail
	case 4: idx = 20;//NAV
	case 5: idx = 2;//FBI
	case 6: idx = 0;//MZ
  }
  return idx;
}

stock MoveCamera(playerid)
{
	new Float:FV[3], Float:CPP[3];
	GetPlayerCameraPos(playerid, CPP[0], CPP[1], CPP[2]);          // 	Cameras position in space
    GetPlayerCameraFrontVector(playerid, FV[0], FV[1], FV[2]);  //  Where the camera is looking at

	// Increases the acceleration multiplier the longer the key is held
	if(noclipdata[playerid][accelmul] <= 1) noclipdata[playerid][accelmul] += ACCEL_RATE;

	// Determine the speed to move the camera based on the acceleration multiplier
	new Float:speed = MOVE_SPEED * noclipdata[playerid][accelmul];

	// Calculate the cameras next position based on their current position and the direction their camera is facing
	new Float:X, Float:Y, Float:Z;
	GetNextCameraPosition(noclipdata[playerid][mode], CPP, FV, X, Y, Z);
	MovePlayerObject(playerid, noclipdata[playerid][flyobject], X, Y, Z, speed);

	// Store the last time the camera was moved as now
	noclipdata[playerid][lastmove] = GetTickCount();
	return 1;
}

//--------------------------------------------------

stock GetNextCameraPosition(move_mode, Float:CPP[3], Float:FV[3], &Float:X, &Float:Y, &Float:Z)
{
    // Calculate the cameras next position based on their current position and the direction their camera is facing
    #define OFFSET_X (FV[0]*6000.0)
	#define OFFSET_Y (FV[1]*6000.0)
	#define OFFSET_Z (FV[2]*6000.0)
	switch(move_mode)
	{
		case MOVE_FORWARD:
		{
			X = CPP[0]+OFFSET_X;
			Y = CPP[1]+OFFSET_Y;
			Z = CPP[2]+OFFSET_Z;
		}
		case MOVE_BACK:
		{
			X = CPP[0]-OFFSET_X;
			Y = CPP[1]-OFFSET_Y;
			Z = CPP[2]-OFFSET_Z;
		}
		case MOVE_LEFT:
		{
			X = CPP[0]-OFFSET_Y;
			Y = CPP[1]+OFFSET_X;
			Z = CPP[2];
		}
		case MOVE_RIGHT:
		{
			X = CPP[0]+OFFSET_Y;
			Y = CPP[1]-OFFSET_X;
			Z = CPP[2];
		}
		case MOVE_BACK_LEFT:
		{
			X = CPP[0]+(-OFFSET_X - OFFSET_Y);
 			Y = CPP[1]+(-OFFSET_Y + OFFSET_X);
		 	Z = CPP[2]-OFFSET_Z;
		}
		case MOVE_BACK_RIGHT:
		{
			X = CPP[0]+(-OFFSET_X + OFFSET_Y);
 			Y = CPP[1]+(-OFFSET_Y - OFFSET_X);
		 	Z = CPP[2]-OFFSET_Z;
		}
		case MOVE_FORWARD_LEFT:
		{
			X = CPP[0]+(OFFSET_X  - OFFSET_Y);
			Y = CPP[1]+(OFFSET_Y  + OFFSET_X);
			Z = CPP[2]+OFFSET_Z;
		}
		case MOVE_FORWARD_RIGHT:
		{
			X = CPP[0]+(OFFSET_X  + OFFSET_Y);
			Y = CPP[1]+(OFFSET_Y  - OFFSET_X);
			Z = CPP[2]+OFFSET_Z;
		}
	}
}
//--------------------------------------------------
stock ClearChat()
{
	for(new c = 1; c <= 50; c++)
	{
		SendClientMessageToAll(COLOR_WHITE, " ");
	}
	return 1;	
}
stock CancelFlyMode(playerid)
{
	GetPlayerPos(playerid, FlyVege[playerid][Fposx], FlyVege[playerid][Fposy], FlyVege[playerid][Fposz]);

	FlyVege[playerid][Finti]=GetPlayerInterior(playerid);
	FlyVege[playerid][Fvw]=GetPlayerVirtualWorld(playerid);
	DeletePVar(playerid, "FlyMode");
	CancelEdit(playerid);
	TogglePlayerSpectating(playerid, false);

	DestroyPlayerObject(playerid, noclipdata[playerid][flyobject]);
	noclipdata[playerid][cameramode] = CAMERA_MODE_NONE;
	SetTimerEx("Munkavege", 300, false, "ddd", playerid, M_FLY, 0);

	return 1;
}

//--------------------------------------------------

stock FlyMode(playerid)
{
	// Create an invisible object for the players camera to be attached to
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	noclipdata[playerid][flyobject] = CreatePlayerObject(playerid, 19300, X, Y, Z, 0.0, 0.0, 0.0);

	// Place the player in spectating mode so objects will be streamed based on camera location
	TogglePlayerSpectating(playerid, true);
	// Attach the players camera to the created object
	AttachCameraToPlayerObject(playerid, noclipdata[playerid][flyobject]);

	SetPVarInt(playerid, "FlyMode", 1);
	noclipdata[playerid][cameramode] = CAMERA_MODE_FLY;
	return 1;
}

//--------------------------------------------------

fpublic PenzEldob(playerid, Osszeg, Float:X, Float:Y, Float:Z, world, interior)
{
    if(Osszeg != 0)
    {
        for(new i = 0; i < sizeof(PenzDropInfo); i++)
        {
            if(!PenzDropInfo[i][PVan])
            {
                PenzDropInfo[i][PenzOsszeg]= Osszeg;
                PenzDropInfo[i][PenzX] = X;
                PenzDropInfo[i][PenzY] = Y;
                PenzDropInfo[i][PenzZ] = Z;
                PenzDropInfo[i][PenzVW] = world;
                PenzDropInfo[i][PenzInt] = interior;
				PenzDropInfo[i][PenzIdo] = UnixTime+MAX_ELDOBOTTCUCC_IDO;
				PenzDropInfo[i][PVan] = true;
                EldobottPenzObject[i] = CreateDynamicObject(1212, X, Y, Z, 80.0, 0.0, 0.0, world);
                new Szoveg[64];
                Format(Szoveg,"%d Ft",Osszeg);
				EldobottPenzText[i] = CreateDynamic3DTextLabel(Szoveg, 0xFF0000FF, X, Y, Z-1, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,world,interior);
				SetMoney(playerid,0);
				break;
            }
        }
    }
}

stock IdoAllitas(hour = NINCS)
{
	if(hour != NINCS)
	{
		//hour +=IDOHOZZAADAS;
	
		switch(hour)
		{
			case 0..1: hour=1;
			case 2: hour=2;
			case 3: hour=3;
			case 4: hour=4;
			case 5: hour=5;
			case 6..7: hour=6;
			case 8: hour=7;
			case 9: hour=8;
			case 10..16: hour=17;
			case 18: hour=20;
			case 19: hour=21;
			case 20: hour=22; 
			case 21..24: hour=24;
		}
		printf("Idõ: %d",hour);
	}
	else
	{
		new tmpminute;
		new tmpsecond;
		gettime(hour, tmpminute, tmpsecond);
		FixHour(hour);
		switch(hour)
		{
			case 0..1: hour=1;
			case 2: hour=2;
			case 3: hour=3;
			case 4: hour=4;
			case 5: hour=5;
			case 6..7: hour=6;
			case 8: hour=7;
			case 9: hour=8;
			case 10..16: hour=17;
			case 18: hour=20;
			case 19: hour=21;
			case 20: hour=22; 
			case 21..24: hour=24;
		}
	}
	SetWorldTime(hour);
	return 1;
}
stock TrailerHatsoLampa(veh, be=true)
{

	if(IsTrailerAttachedToVehicle(veh))
	{
		new trailerid=GetVehicleTrailer(veh);
		if(be)
		{
			if(IsValidDynamicObject(TrailerLampa[0][trailerid])) return 1;
			if(IsValidDynamicObject(TrailerLampa[1][trailerid])) return 1;
			
			TrailerLampa[0][trailerid]=CreateDynamicObject(19282, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000);
			TrailerLampa[1][trailerid]=CreateDynamicObject(19282, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000);
			AttachDynamicObjectToVehicle(TrailerLampa[0][trailerid], trailerid, 1.00430, -3.96130, -1.09350,   0.00000, 0.00000, 180.00000);
			AttachDynamicObjectToVehicle(TrailerLampa[1][trailerid], trailerid, -1.00430, -3.96130, -1.09350,   0.00000, 0.00000, 180.00000);
		}
		else
		{
			if(IsValidDynamicObject(TrailerLampa[0][trailerid])) DestroyDynamicObject(TrailerLampa[0][trailerid]), TrailerLampa[0][trailerid]=INVALID_OBJECT_ID;
			if(IsValidDynamicObject(TrailerLampa[1][trailerid])) DestroyDynamicObject(TrailerLampa[1][trailerid]), TrailerLampa[1][trailerid]=INVALID_OBJECT_ID;
		}
	}


	return 1;
}
stock KocsiObjectTorol(kocsi)
{
	
	if(IsValidDynamicObject(TrailerLampa[0][kocsi])) DestroyDynamicObject(TrailerLampa[0][kocsi]), TrailerLampa[0][kocsi]=INVALID_OBJECT_ID;
	if(IsValidDynamicObject(TrailerLampa[1][kocsi])) DestroyDynamicObject(TrailerLampa[1][kocsi]), TrailerLampa[1][kocsi]=INVALID_OBJECT_ID;
	
	if(IsValidDynamicObject(Szirena[kocsi]))
	{
		DestroyDynamicObject(Szirena[kocsi]);
		Szirena[kocsi] = INVALID_OBJECT_ID;
	}
	
	if(IsValidDynamicObject(Nkszirena[kocsi]))
	{
		DestroyDynamicObject(Nkszirena[kocsi]);
		Nkszirena[kocsi] = INVALID_OBJECT_ID;
	}
	
	if(IsValidDynamicObject(SokkObject[kocsi]))
	{
		DestroyDynamicObject(SokkObject[kocsi]);
		SokkObject[kocsi] = INVALID_OBJECT_ID;
	}
	
	/*if(IsValidDynamicObject(Nbszirena[kocsi]))
	{
		DestroyDynamicObject(Nbszirena[kocsi]);
		Nbszirena[kocsi] = INVALID_OBJECT_ID;
	}*/

	if(VehicleInfo[kocsi][JobbIndex] == 1 || VehicleInfo[kocsi][BalIndex] == 1 || VehicleInfo[kocsi][Kozos] == 1)
		SetVehicleIndex(NINCS, kocsi, false, false, false);

	if(Neon[kocsi] != 0)
	{
		if(IsValidDynamicObject(NeonCar[kocsi][0])) DestroyDynamicObject(NeonCar[kocsi][0]), NeonCar[kocsi][0] = INVALID_OBJECT_ID;
		if(IsValidDynamicObject(NeonCar[kocsi][1])) DestroyDynamicObject(NeonCar[kocsi][1]), NeonCar[kocsi][1] = INVALID_OBJECT_ID;

		Neon[kocsi] = 0;
	}
	if(VehicleAdatok[kocsi][_TREE_NUM_] > 0)
	{
	    if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_TREE_1_])) DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_TREE_1_]), VehicleAdatok[kocsi][_OBJECT_TREE_1_]=INVALID_OBJECT_ID;
		if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_TREE_2_])) DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_TREE_2_]), VehicleAdatok[kocsi][_OBJECT_TREE_2_]=INVALID_OBJECT_ID;
		if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_TREE_3_])) DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_TREE_3_]), VehicleAdatok[kocsi][_OBJECT_TREE_3_]=INVALID_OBJECT_ID;
		if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_TREE_4_])) DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_TREE_4_]), VehicleAdatok[kocsi][_OBJECT_TREE_4_]=INVALID_OBJECT_ID;
		if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_TREE_5_])) DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_TREE_5_]), VehicleAdatok[kocsi][_OBJECT_TREE_5_]=INVALID_OBJECT_ID;
		VehicleAdatok[kocsi][_TREE_NUM_] = 0;
	}
	
	//KereskedoFelirat(kocsi, true);

}
 
// PRESSED(keys)
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

stock StatMentes(playerid, elso = 0, bool: preQuery = true, fazis = 0 )
{
	if(!Logged(playerid) || SQLID(playerid) == NINCS || !strlen(JelenlegiDatum)) return 1;
	
	if(elso)
	{
		strmid(StatInfo[playerid][pDatum], JelenlegiDatum, 0, strlen(JelenlegiDatum));
		
		if( preQuery )
		{
			format(_tmpString, 128, "SELECT ID, Ido, Onduty FROM %s WHERE Datum='%s' AND UID='%d'", SQL_DB_Activity, JelenlegiDatum, SQLID(playerid));
			doQuery( _tmpString, SQL_PLAYER_STAT, playerid, elso, 0 );
			return 1;
		}
		
		if( !fazis )
		{
			new rows, fields;
			sql_data(rows, fields);
			
			if(!rows)
			{
				format( _tmpString, 128, "INSERT INTO %s(UID, Datum) VALUES('%d', '%s')", SQL_DB_Activity, SQLID(playerid), JelenlegiDatum );
				doQuery( _tmpString, SQL_PLAYER_STAT, playerid, elso, 1 );
			}
			else
			{
				StatInfo[playerid][pID] = sql_get_int(0);
				StatInfo[playerid][pIdoOsszes] = sql_get_int(1);
				StatInfo[playerid][pOndutyOsszes] = sql_get_int(2);
			}
		}
		else if( fazis == 1 )
		{
			format( _tmpString, 128, "SELECT ID, Ido, Onduty FROM %s WHERE UID='%d' AND Datum='%s'", SQL_DB_Activity, SQLID(playerid), JelenlegiDatum );
			doQuery( _tmpString, SQL_PLAYER_STAT, playerid, elso, 2 );
		}
		else if( fazis == 2 )
		{
			StatInfo[playerid][pID] = sql_get_int(0);
			StatInfo[playerid][pIdoOsszes] = sql_get_int(1);
			StatInfo[playerid][pOndutyOsszes] = sql_get_int(2);
			StatMentes( playerid, 0 );
		}
	}
	else
	{
		if(!egyezik(JelenlegiDatum, StatInfo[playerid][pDatum]))
			return StatMentes(playerid, true);
			
		new lastIdo = StatInfo[playerid][pIdoOsszes];
		format(_tmpString, 256, "UPDATE %s SET Ido=Ido+%d", SQL_DB_Activity, StatInfo[playerid][pIdo]);
		StatInfo[playerid][pIdoOsszes] += StatInfo[playerid][pIdo];
		StatInfo[playerid][pIdo] = 0;
		OnPlayerActivityChanged(playerid, STAT_ACTIVITY_IDO, lastIdo, StatInfo[playerid][pIdoOsszes]);
		
		if(StatInfo[playerid][pOnduty])
		{
			new lastOnduty = StatInfo[playerid][pOndutyOsszes];
			format(_tmpString, 256, "%s, Onduty=Onduty+%d", _tmpString, StatInfo[playerid][pOnduty]);
			StatInfo[playerid][pOndutyOsszes] += StatInfo[playerid][pOnduty];
			StatInfo[playerid][pOnduty] = 0;
			OnPlayerActivityChanged(playerid, STAT_ACTIVITY_ONDUTY, lastOnduty, StatInfo[playerid][pOndutyOsszes]);
		}
		
		if(StatInfo[playerid][pVA])
			format(_tmpString, 256, "%s, VA=VA+%d", _tmpString, StatInfo[playerid][pVA]), StatInfo[playerid][pVA] = 0;
			
		if(StatInfo[playerid][pPM])
			format(_tmpString, 256, "%s, PM=PM+%d", _tmpString, StatInfo[playerid][pPM]), StatInfo[playerid][pPM] = 0;
		
		format(_tmpString, 256, "%s WHERE ID='%d'", _tmpString, StatInfo[playerid][pID]);
		doQuery( _tmpString );
	}
		
	return 1;
}

stock GetFegyverObject(WeaponID)
{
	if(WeaponID < 0 || WeaponID > 64)
	{
	return 1575;
	}
	return FegyverObjektek[WeaponID];

}
stock GetPlayerVirtualWorldEx(playerid)
	return GetPlayerVirtualWorld(playerid);
	
stock GetPlayerInteriorEx(playerid)
	return GetPlayerInterior(playerid);

#define GetPlayerVirtualWorld(%1) PlayerVW[%1]
#define GetPlayerInterior(%1) PlayerInterior[%1]
stock KozelbenValaki(playerid, Float:tav)
{
	new kozelben = GetClosestPlayer(playerid);
	if(kozelben != NINCS)
	{
		if(GetDistanceBetweenPlayers(kozelben, playerid) > tav)
			kozelben = NINCS;
	}
	return kozelben;
}
stock BankkartyaFizet(playerid, osszeg, bool:levon = true, bool:jelez = true)
{
	
	
	if(Bankkartya[playerid] && PlayerInfo[playerid][pZarolva] != 1 && PlayerInfo[playerid][pAccount] >= osszeg)
	{
		
		if(levon)
		{
				
			new Float:szorzo=0.0;
			if(BankSzef < 1000000)
				szorzo=0.15;
			else if(BankSzef < 10000000)
				szorzo=0.1;
			else if(BankSzef < 10000000)
				szorzo=0.05;
			else
				szorzo=0.01;
				
			new koltseg = floatround(float(osszeg) * szorzo);
				
			if(koltseg < 0)
			{
				new string[128];
				format(string,sizeof(string),"[HIBA] Bank költség %s Ft",FormatInt(koltseg));
				Log("Scripter",string);
				koltseg = 0;
			}
			if(koltseg > 1000000)
			{
				new string[128];
				format(string,sizeof(string),"[HIBA] Bank költség %s Ft",FormatInt(koltseg));
				Log("Scripter",string);
				koltseg = 1000;
			}
			
		//	if(IsTerno(playerid))
			//	SendFormatMessage(playerid,COLOR_YELLOW,"[pSMS] %d && [pPnumber] %d != 0 && !PhoneOnline[playerid] %d && jelez %d",PlayerInfo[playerid][pSMS],PlayerInfo[playerid][pPnumber],PhoneOnline[playerid],jelez);
			if(PlayerInfo[playerid][pSMS] && PlayerInfo[playerid][pPnumber] != 0 && !PhoneOnline[playerid] && jelez)
			{
				SendFormatMessage(playerid, COLOR_YELLOW,"SMS: Vásárlás kártyával: %s Ft Aktuális Százalék: %d %% Kezelési Költség: %s Ft",FormatInt(osszeg), floatround(szorzo*100.0),FormatInt(koltseg),FormatInt(BankSzef));
				PlayerInfo[playerid][pAccount] -=5;
				BankSzef +=5;
				
			}
			PlayerInfo[playerid][pAccount] -= osszeg;
			PlayerInfo[playerid][pAccount] -= koltseg;
			BankSzef +=koltseg;
		
		}	
		return 1;
	}
	else if(GetMoney(playerid) >= osszeg)
	{
		if(levon)
			GiveMoney(playerid, -osszeg);
			
		return 1;
	}
	
	return 0;
}
 
stock IdojarasValt(playerid = NINCS, ujido = NINCS)
{
	//new Float:pos[3];
	if(playerid == NINCS)
	{
		if(ujido == NINCS) SetWeather(12);
		else SetWeather(ujido);
		
		foreach(Jatekosok, player)
		{
			/*if(Idojaras[player] == NINCS) for(new o = 0; o < MAX_HO_OBJECT; o++)
				DestroyDynamicObject(HoObject[player][o]), HoObject[player][o] = INVALID_OBJECT_ID;*/
			
			Idojaras[player] = ujido;
			/*if(ujido == NINCS && Havazas[player])
			{
				GetPlayerPos(player, ArrExt(pos));
				
				for(new o = 0; o < MAX_HO_OBJECT; o++)
					HoObject[player][o] = CreateDynamicObject(18864, pos[0] + random(5), pos[1], pos[2], 0, 0, random(45), NINCS, NINCS, player);
			}
			else
			{
				if(Idojaras[player] == NINCS) for(new o = 0; o < MAX_HO_OBJECT; o++)
					DestroyDynamicObject(HoObject[player][o]), HoObject[player][o] = INVALID_OBJECT_ID;
			}*/
		}
	}
	else
	{
		if(ujido == NINCS) SetPlayerWeather(playerid, 12);
		else SetPlayerWeather(playerid, ujido);
		
		/*if(Idojaras[playerid] == NINCS) for(new o = 0; o < MAX_HO_OBJECT; o++)
			DestroyDynamicObject(HoObject[playerid][o]), HoObject[playerid][o] = INVALID_OBJECT_ID;*/
		
		Idojaras[playerid] = ujido;
		/*if(ujido == NINCS && Havazas[playerid])
		{
			GetPlayerPos(playerid, ArrExt(pos));
			
			for(new o = 0; o < MAX_HO_OBJECT; o++)
				HoObject[playerid][o] = CreateDynamicObject(18864, pos[0] + random(5), pos[1], pos[2], 0, 0, random(45), NINCS, NINCS, playerid);
		}
		else
		{
			if(Idojaras[playerid] == NINCS) for(new o = 0; o < MAX_HO_OBJECT; o++)
				DestroyDynamicObject(HoObject[playerid][o]), HoObject[playerid][o] = INVALID_OBJECT_ID;
		}*/
	}
}

stock PiacAkcio(akcio = P_LOAD, mit = P_ALL)
{
	new buff[256], File:file;
	if(akcio == P_LOAD)
	{
		new id, buff2[6][MAX_PLAYER_NAME];
		
		if(mit == P_ALL) for(mit = 0; mit < 8; mit++)
		{
			if(fexist(PiacFajlok[mit]))
			{
				id = 0;
				file = fopen(PiacFajlok[mit], io_read);
				
				while(id < MAX_PIAC_CUCC && fread(file, buff) && strfind(buff, "|") != NINCS)
				{
					Piac[mit][id][pVan] = true;
				
					split(buff, buff2, '|');
					
					Piac[mit][id][pID] = strval( buff2[0] );
					Piac[mit][id][pFeladta] = strval( buff2[1] );
					strmid(Piac[mit][id][pNev], buff2[2], 0, strlen(buff2[2]), MAX_PLAYER_NAME);
					Piac[mit][id][pAra] = strval( buff2[3] );
					Piac[mit][id][pDB] = strval( buff2[4] );
					Piac[mit][id][pEladva] = strval( buff2[5]);
					id++;
				}
				
				fclose(file);
			}
		}
		else
		{
			if(fexist(PiacFajlok[mit]))
			{
				id = 0;
				file = fopen(PiacFajlok[mit], io_read);
				
				while(id < MAX_PIAC_CUCC && fread(file, buff) && strfind(buff, "|") != NINCS)
				{
					Piac[mit][id][pVan] = true;
					
					split(buff, buff2, '|');
					Piac[mit][id][pID] = strval( buff2[0] );
					Piac[mit][id][pFeladta] = strval( buff2[1] );
					strmid(Piac[mit][id][pNev], buff2[2], 0, strlen(buff2[2]), MAX_PLAYER_NAME);
					Piac[mit][id][pAra] = strval( buff2[3] );
					Piac[mit][id][pDB] = strval( buff2[4] );
					Piac[mit][id][pEladva] = strval( buff2[5]);
					
					id++;
				}
				
				fclose(file);
			}
		}
	}
	else if(akcio == P_SAVE)
	{
		if(mit == P_ALL) for(mit = 0; mit < 8; mit++)
		{
			file = fopen(PiacFajlok[mit], io_write);
			For(p, 0, MAX_PIAC_CUCC)
			{
				if(!Piac[mit][p][pVan]) continue;
				
				format(buff, 256, "%d|%d|%s|%d|%d|%d\n", Piac[mit][p][pID], Piac[mit][p][pFeladta], Piac[mit][p][pNev], Piac[mit][p][pAra], Piac[mit][p][pDB],Piac[mit][p][pEladva]);
				fwrite(file, buff);
			}
			fclose(file);
		}
		else
		{
			file = fopen(PiacFajlok[mit], io_write);
			For(p, 0, MAX_PIAC_CUCC)
			{
				if(!Piac[mit][p][pVan]) continue;
				
				format(buff, 256, "%d|%d|%s|%d|%d|%d\n", Piac[mit][p][pID], Piac[mit][p][pFeladta], Piac[mit][p][pNev], Piac[mit][p][pAra], Piac[mit][p][pDB],Piac[mit][p][pEladva]);
				fwrite(file, buff);
			}
			fclose(file);
		}
	}
	return 1;
}

stock BejelentoFelirat(playerid, bool:felrak = true)
{
	if(IsValidDynamic3DTextLabel(BText[playerid]))
		DestroyDynamic3DTextLabel(BText[playerid]),BText[playerid]=INVALID_3D_TEXT_ID;
		
	if(felrak)
	{		
		new felirat[8]; format(felirat, 8, "%d", PlayerInfo[playerid][pBID]);
		BText[playerid] = CreateDynamic3DTextLabel(felirat, COLOR_DYELLOW, 0.0, 0.0, 0.1, 250.0, playerid, INVALID_VEHICLE_ID, 1, NINCS, NINCS, playerid, 300.0);
		
		//printf("BejelentoFelirat - AppendArrayData");
		foreach(Jatekosok, p)
		{
			if(!Bejelento[p] || p == playerid) continue;
			Streamer_AppendArrayData(STREAMER_TYPE_3D_TEXT_LABEL, BText[playerid], E_STREAMER_PLAYER_ID, p);
		}
	}
	else
		BText[playerid] = INVALID_3D_TEXT_ID;
}
stock AdminNevek(playerid, bool:felrak = true)
{
	if(IsValidDynamic3DTextLabel(AText[playerid]))
		DestroyDynamic3DTextLabel(AText[playerid]),AText[playerid]=INVALID_3D_TEXT_ID;
		
	if(felrak)
	{		
		new felirat[32]; format(felirat, 32, "[%d] %s", playerid,PlayerName(playerid));
		AText[playerid] = CreateDynamic3DTextLabel(felirat, COLOR_DYELLOW, 0.0, 0.0, 0.1, 250.0, playerid, INVALID_VEHICLE_ID, 1, NINCS, NINCS, playerid, 300.0);
		
		//printf("AdminNevek - AppendArrayData");
		foreach(Jatekosok, p)
		{
			if(!Anev[p] || p == playerid) continue;
			Streamer_AppendArrayData(STREAMER_TYPE_3D_TEXT_LABEL, AText[playerid], E_STREAMER_PLAYER_ID, p);
		}
	}
	else
		AText[playerid] = INVALID_3D_TEXT_ID;
}

/*
stock bool:IllegalisMunka(munka)
{
	for(new m = 0; m < sizeof(IllegalisMunkak); m++)
	{
		if(IllegalisMunkak[m][0][0] == munka)
			return true;
	}
	return false;
}
*/
/*
stock bool:IllegalisMunkas(playerid)
{
	new m = -1, meret = sizeof(IllegalisMunkak);
	for(;++m < meret;)
	{
		if(AMT(playerid, IllegalisMunkak[m][0][0]))
			return true;
	}
	return false;
}*/

stock Dec2Bin(szam)
{
	new eredmeny[32], tmp[12];
	if(szam < 0) szam = abs(szam);
	
	if(szam)
	{
		while(szam)
		{
			valstr(tmp, szam % 2);
			strcat(eredmeny, tmp, 32);
			szam /= 2;
		}
		eredmeny = reverse(eredmeny);
	}
	else
		eredmeny = "0";
	
	return eredmeny;
}

stock Bin2Dec(const szam[])
{
	new eredmeny, hossz = strlen(szam);
	
	for(new c = 0; c < hossz; c++)
	{
		if(szam[c] == '1')
			eredmeny += floatround(floatpower(2.0, float(hossz - 1 - c)));
	}
	return eredmeny;
}

stock SzuksegletAra(playerid, tipus, ara)
{
	
	
	new Float:ehseg, Float:szukseglet;
	ehseg=float(ara)/10;
	szukseglet=float(ara)/200;
	if(ehseg < 2)
		ehseg=2;
	if(szukseglet < 1)
		szukseglet=1;
	//kaja
	if(tipus == 1)
	{		
		Szukseglet(playerid, -ehseg, szukseglet);
		//SendFormatMessage(playerid, COLOR_YELLOW,"[1]%f.2 - %f.2",-ehseg,szukseglet);
	}
	//ital
	if(tipus == 2)
	{
		szukseglet=float(ara)/15;
		Szukseglet(playerid, 0.0, szukseglet);
		//SendFormatMessage(playerid, COLOR_YELLOW,"[2]0.0 - %f.2",szukseglet);
	}
	
}
stock Szukseglet(playerid, Float:ehseg = 0.0, Float:szukseglet = 0.0)
{
	if(ehseg && (ehseg < 0 || !AdminDuty[playerid] && !ScripterDuty[playerid]))
	{
		Ehseg[playerid] += ehseg;
		
		if(Ehseg[playerid] < 0.0) Ehseg[playerid] = 0.0;
		else if(Ehseg[playerid] > 100.0) Ehseg[playerid] = 100.0;
		
		BarFrissites(playerid, BAR_EHSEG);
	}
	
	if(szukseglet)
	{
		Vizelet[playerid] += szukseglet;
		
		if(Vizelet[playerid] < 0.0) Vizelet[playerid] = 0.0;
		else if(Vizelet[playerid] > 100.0) Vizelet[playerid] = 100.0;
		
		BarFrissites(playerid, BAR_SZUKSEGLET);
	}
}

stock BarFrissites(playerid, melyik)
{
	if(!Logged(playerid) || PlayerInfo[playerid][pTextDrawKeseltet] != NINCS) return 1;
	
	switch(melyik)
	{
		case BAR_EHSEG:
		{
			new fegyverhud[128];
			new ertek = GetSzuksegletEhsegHUD(Ehseg[playerid]);
			Format(fegyverhud, "class_hud:bar_piros%d", ertek);
			TextDrawSetString(InfoTextDrawBAREHSEG[playerid], fegyverhud);
			if(Baraktiv[playerid]) TextDrawShowForPlayer(playerid, InfoTextDrawBAREHSEG[playerid]);
	
			/*SetProgressBarValue(EhsegBar[playerid], Ehseg[playerid]);
			UpdateProgressBar(EhsegBar[playerid], playerid);
			if(!Baraktiv[playerid])		
				HideProgressBarForPlayer(playerid, EhsegBar[playerid]);*/
		}
		case BAR_SZUKSEGLET:
		{
			new fegyverhud[128];
			new ertek = GetSzuksegletEhsegHUD(Vizelet[playerid]);
			Format(fegyverhud, "class_hud:bar_sarga%d", ertek);
			TextDrawSetString(InfoTextDrawBARPEE[playerid], fegyverhud);
			if(Baraktiv[playerid]) TextDrawShowForPlayer(playerid, InfoTextDrawBARPEE[playerid]);
			
			/*SetProgressBarValue(VizeletBar[playerid], Vizelet[playerid]);
			UpdateProgressBar(VizeletBar[playerid], playerid);
			if(!Baraktiv[playerid])
				HideProgressBarForPlayer(playerid, VizeletBar[playerid]);*/
		}
	}
	
	return 1;
}

stock GetSzuksegletEhsegHUD(Float:ertek)
{
	if(ertek >= 100.0)
	{
		return 100;
	}
	else if(100.0 > ertek && ertek >= 95.0)
	{
		return 95;
	}
	else if(95.0 > ertek && ertek >= 90.0)
	{
		return 90;
	}
	else if(90.0 > ertek && ertek >= 85.0)
	{
		return 85;
	}
	else if(85.0 > ertek && ertek >= 80.0)
	{
		return 80;
	}
	else if(80.0 > ertek && ertek >= 75.0)
	{
		return 75;
	}
	else if(75.0 > ertek && ertek >= 70.0)
	{
		return 70;
	}
	else if(70.0 > ertek && ertek >= 65.0)
	{
		return 65;
	}
	else if(65.0 > ertek && ertek >= 60.0)
	{
		return 60;
	}
	else if(60.0 > ertek && ertek >= 55.0)
	{
		return 55;
	}
	else if(55.0 > ertek && ertek >= 50.0)
	{
		return 50;
	}
	else if(50.0 > ertek && ertek >= 45.0)
	{
		return 45;
	}
	else if(45.0 > ertek && ertek >= 40.0)
	{
		return 40;
	}
	else if(40.0 > ertek && ertek >= 35.0)
	{
		return 35;
	}
	else if(35.0 > ertek && ertek >= 30.0)
	{
		return 30;
	}
	else if(30.0 > ertek && ertek >= 25.0)
	{
		return 25;
	}
	else if(25.0 > ertek && ertek >= 20.0)
	{
		return 20;
	}
	else if(20.0 > ertek && ertek >= 15.0)
	{
		return 15;
	}
	else if(15.0 > ertek && ertek >= 10.0)
	{
		return 10;
	}
	else if(10.0 > ertek && ertek >= 5.0)
	{
		return 5;
	}
	else
	{
		return 0;
	}
}

stock Radar(playerid, bool:lat)
{
	if(lat)
		GangZoneHideForPlayer(playerid, FeketeRadar);
	else
		GangZoneShowForPlayer(playerid, FeketeRadar, 0x000000FF);
}

stock Item(playerid, akcio, targy = NINCS, db = 1, e1 = NINCS, e2 = NINCS, e3 = NINCS)
{
	new rtn;
	
	if(akcio == ITEM_LOAD)
	{
		new tmp[64];
		
		for(new t = 0; t < MAX_TARGY; t++)
			Items[playerid][t][tType] = 0;
		
		format(tmp, 128, "data/inv/%d.inv", SQLID(playerid));
		if(fexist(tmp))
			INI_ParseFile(tmp, "INI_Load_Items", .bExtra = true, .extra = playerid);
	}
	elseif(akcio == ITEM_SAVE)
	{
		new tmp[64], tmp2[128];
		format(tmp, 64, "data/inv/%d.inv", SQLID(playerid));
		
		new INI:ini = INI_Open(tmp);
		
		for(new t = 0; t < MAX_TARGY; t++)
		{
			if(!Items[playerid][t][tType]) continue;
			
			//valstr(tmp, t);
			format(tmp, 64, "Item%03d", t);
			format(tmp2, 128, "%d|%d|%d|%d|%d", Items[playerid][tType], Items[playerid][tDB], Items[playerid][tE1], Items[playerid][tE2], Items[playerid][tE3]);
			INI_WriteString(ini, tmp, tmp2);
		}
		
		INI_Close(ini);
	}
	elseif(akcio == ITEM_ADD)
	{
		new id = Item(playerid, ITEM_CHECK, targy, db, e1, e2, e3);
		if(id != NINCS)
		{
			Items[playerid][id][tDB] += db;
			rtn = 1;
		}
	}
	elseif(akcio == ITEM_REMOVE)
	{
		new id = Item(playerid, ITEM_CHECK, targy);
		if(id != NINCS)
		{
			Items[playerid][id][tDB] -= db;
			if(Items[playerid][id][tDB] < 1)
			{
				Items[playerid][id][tDB] = 0;
				Items[playerid][id][tType] = 0;
			}
			rtn = 1;
		}
	}
	elseif(akcio == ITEM_DELETE)
	{
		new id = Item(playerid, ITEM_CHECK, targy);/*, db, e1, e2, e3);*/
		if(id != NINCS)
		{
			Items[playerid][id][tDB] = 0;
			Items[playerid][id][tType] = 0;
			rtn = 1;
		}
	}
	elseif(akcio == ITEM_CHECK)
	{
		rtn = NINCS;
		for(new t = 0; t < MAX_TARGY; t++)
		{
			if(!Items[playerid][t][tType]) continue;
			
			if(
				Items[playerid][t][tType] == targy &&
				(db == NINCS && Items[playerid][t][tDB] > 0 || db != NINCS && Items[playerid][t][tDB] >= db) &&
				(e1 == NINCS || Items[playerid][t][tE1] == e1) &&
				(e2 == NINCS || Items[playerid][t][tE2] == e2) &&
				(e3 == NINCS || Items[playerid][t][tE3] == e3)
			)
			{
				rtn = t;
				break;
			}
		}
	}
	elseif(akcio == ITEM_NAME)
	{
		new tmp[32];
		if(0 <= targy < MAX_ITEM_TYPE)
			tmp = ItemName[targy - 1];
		else
			tmp = "Ismeretlen";
	}
	elseif(akcio == ITEM_DATA)
	{
		new id = Item(playerid, ITEM_CHECK, targy);
		
		if(id != NINCS)
		{
			if(db == ITEM_DATA_TYPE)
				rtn = Items[playerid][id][tType];
			elseif(db == ITEM_DATA_COUNT)
				rtn = Items[playerid][id][tDB];
			elseif(db == ITEM_DATA_E1)
				rtn = Items[playerid][id][tE1];
			elseif(db == ITEM_DATA_E2)
				rtn = Items[playerid][id][tE2];
			elseif(db == ITEM_DATA_E3)
				rtn = Items[playerid][id][tE3];
		}
		else
			rtn = NINCS;
	}

	return rtn;
}

stock Szemuveg(playerid, mit = 0)
{
	
	
	switch(mit)
	{
		case 1..30: SetPlayerAttachedObject(playerid, ATTACH_SLOT_SZEMUVEG, 19005+mit, 2,ObjectSzemuveg[playerid][OPosX],ObjectSzemuveg[playerid][OPosY],ObjectSzemuveg[playerid][OPosZ],ObjectSzemuveg[playerid][OPosRX],ObjectSzemuveg[playerid][OPosRY],ObjectSzemuveg[playerid][OPosRZ]);
		case 31..33: SetPlayerAttachedObject(playerid, ATTACH_SLOT_SZEMUVEG, 19138 + (mit - 31), 2, ObjectSzemuveg[playerid][OPosX],ObjectSzemuveg[playerid][OPosY],ObjectSzemuveg[playerid][OPosZ],ObjectSzemuveg[playerid][OPosRX],ObjectSzemuveg[playerid][OPosRY],ObjectSzemuveg[playerid][OPosRZ]);
		default: RemovePlayerAttachedObject(playerid, ATTACH_SLOT_SZEMUVEG);
	}
	
}

stock Freeze(playerid, ido = 0)
{
	TogglePlayerControllable(playerid, false);

	if(ido > 0)
		SetTimerEx("UnFreeze", ido, false, "i", playerid);

	return 1;
}

stock Gyemantok(id, bool:player = true)
{
	new db;
	if(player)
	{
		for(new g = 0; g < MAX_GYEMANT; g++)
		{
			if(Gyemant[g][gPlayer] == PlayerInfo[id][pID])
				db++;
		}
	}
	else
	{
		for(new g = 0; g < MAX_GYEMANT; g++)
		{
			if(Gyemant[g][gFrakcio] == id)
				db++;
		}
	}
	return db;
}

// /setho clint 1559 0 1 -0.2 -0.15 0 90 270 0 0.4 0.4 0.4
stock GyemantAkcio(akcio = GYEMANT_BETOLT, playerid = NINCS, gyemant = NINCS)
{
	new File:file, id, buff[256], buff2[7][32], Float:x, Float:y, Float:z, Int, VW;
	switch(akcio)
	{
		case GYEMANT_BETOLT:
		{
			if(!fexist("Config/gyemant.cfg")) return 1;
			
			file = fopen("Config/gyemant.cfg", io_read);
			
			while(id < MAX_GYEMANT && fread(file, buff) && strfind(buff, ",") != NINCS)
			{
				split(buff, buff2, ',');
				Gyemant[id][gPos][0] = floatstr( buff2[0] );
				Gyemant[id][gPos][1] = floatstr( buff2[1] );
				Gyemant[id][gPos][2] = floatstr( buff2[2] );
				Gyemant[id][gInt] = strval( buff2[3] );
				Gyemant[id][gVW] = strval( buff2[4] );
				Gyemant[id][gPlayer] = strval( buff2[5] );//hogy mûködik? :D
				Gyemant[id][gFrakcio] = strval( buff2[6] );

				Gyemant[id][gOID] = CreateDynamicObject(1559, ArrExt( Gyemant[id][gPos] ), 0.0, 0.0, 0.0, Gyemant[id][gVW], Gyemant[id][gInt]);
				
				id++;
			}
			
			fclose(file);
		}
		case GYEMANT_MENT:
		{
			file = fopen("Config/gyemant.cfg", io_write);
			
			while(id < MAX_GYEMANT)
			{
				if(Gyemant[id][gPos][0] != 0.0)
				{
					format(buff, 256, "%f,%f,%f,%d,%d,%d,%d\n", ArrExt( Gyemant[id][gPos] ), Gyemant[id][gInt], Gyemant[id][gVW], Gyemant[id][gPlayer], Gyemant[id][gFrakcio]);
					fwrite(file, buff);
				}
				id++;
			}
			
			fclose(file);
		}
		case GYEMANT_FELVESZ:
		{
			if(Gyemant[gyemant][gOID] != NINCS)
				if(IsValidDynamicObject(Gyemant[gyemant][gOID])) DestroyDynamicObject( Gyemant[gyemant][gOID] ), Gyemant[gyemant][gOID] = INVALID_OBJECT_ID;
			
			//SetPlayerAttachedObject( playerid, 4, 1559, 1, -0.2, -0.15, 0, 90, 270, 0, 0.4, 0.4, 0.4 );
			GyemantNala[playerid] = gyemant;
			Gyemant[gyemant][gPos][0] = 0.0;
			
			Gyemant[gyemant][gPos][0] = 0.0;
			
			GyemantAkcio( GYEMANT_MENT );
		}
		case GYEMANT_LERAK:
		{
			GetPlayerPos(playerid, x, y, z);
			Int = GetPlayerInterior(playerid);
			VW = GetPlayerVirtualWorld(playerid);
			
			Gyemant[gyemant][gPos][0] = x;
			Gyemant[gyemant][gPos][1] = y;
			Gyemant[gyemant][gPos][2] = z;
			Gyemant[gyemant][gInt] = Int;
			Gyemant[gyemant][gVW] = VW;
			
			Gyemant[gyemant][gFrakcio] = NINCS;
			Gyemant[gyemant][gPlayer] = NINCS;
			
			Gyemant[gyemant][gOID] = CreateDynamicObject(1559, ArrExt( Gyemant[gyemant][gPos] ), 0.0, 0.0, 0.0, Gyemant[gyemant][gVW], Gyemant[gyemant][gInt]);
			Streamer_Update(playerid);
			
			//RemovePlayerAttachedObject(playerid, 4);
			GyemantNala[playerid] = NINCS;
			
			id = HazabanVan(playerid);
			if(id != NINCS)
			{
				Gyemant[gyemant][gPlayer] = PlayerInfo[playerid][pID];
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "ClassRPG: A gyémántot elhelyezted a házadban, így az extráit megkapod");
			}
			else if(PlayerInfo[playerid][pMember] > 0 && PlayerInfo[playerid][pMember] < MAX_FRAKCIO && PlayerToPoint(50.0, playerid, SpawnHelyek[ PlayerInfo[playerid][pMember] ][0], SpawnHelyek[ PlayerInfo[playerid][pMember] ][1], SpawnHelyek[ PlayerInfo[playerid][pMember] ][2]))
			{
				Gyemant[gyemant][gFrakcio] = PlayerInfo[playerid][pMember];
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "ClassRPG: A gyémántot elhelyezted a frakciód területén, így az extráit megkapjátok");
				new msg[128];
				format(msg, 128, "<< %s elhelyezett egy gyémántot a frakciótok területén, így elõnyben részesültök >>");
				foreach(Jatekosok, p)
				{
					if(p != playerid && PlayerInfo[p][pMember] == PlayerInfo[playerid][pMember])
						SendClientMessage(p, COLOR_LIGHTBLUE, msg);
				}
			}
			
			Gyemantjai[playerid] = Gyemantok(playerid);
			GyemantAkcio( GYEMANT_MENT );
		}
		
	}
	
	return 1;
}

stock TuzAkcio(akcio = TUZ_BETOLT)
{
	new File:file, id, buff[128], buff2[6][32];
	switch(akcio)
	{
		case TUZ_BETOLT:
		{
			if(!fexist("Config/tuz.cfg")) return 1;
			
			file = fopen("Config/tuz.cfg", io_read);
			
			while(id < TUZ_MAX_POZ && fread(file, buff) && strfind(buff, ",") != NINCS)
			{
				split(buff, buff2, ',');
				TuzPoz[id][tPoz][0] = floatstr( buff2[0] );
				TuzPoz[id][tPoz][1] = floatstr( buff2[1] );
				TuzPoz[id][tPoz][2] = floatstr( buff2[2] );
				
				//printf("Tuz: %f, %f, %f", ArrExt(TuzPoz[id][tPoz]));
				
				if(TuzPoz[id][tPoz][0] != 0.0)
				{
					TuzPoz[id][tMapID] = CreateDynamicMapIcon( ArrExt( TuzPoz[id][tPoz] ), 36, 0, NINCS, NINCS, NINCS, TUZ_MUTAT_TAV);
					Streamer_SetIntData( STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_STYLE, 3); // Global + checkpoint
					if(Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, NINCS))
						Streamer_RemoveArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, NINCS);
					
					
				}
				
				id++;
			}
			printf("TuzAkcio BETOLTVE");
			fclose(file);
		}
		case TUZ_MENT:
		{
			file = fopen("Config/tuz.cfg", io_write);
			
			while(id < TUZ_MAX_POZ)
			{
				if(TuzPoz[id][tPoz][0] != 0.0)
				{				
					format(buff, 128, "%f,%f,%f\n", ArrExt( TuzPoz[id][tPoz] ));
					fwrite(file, buff);
				}
				id++;
			}
			
			fclose(file);
		}
	}
	
	return 1;
}

stock KincsAkcio(akcio = KINCS_BETOLT)
{
	new File:file, id, buff[256], buff2[6][32];
	switch(akcio)
	{
		case KINCS_BETOLT:
		{
			if(!fexist("Config/kincs.cfg")) return 1;
			
			file = fopen("Config/kincs.cfg", io_read);
			
			while(id < MAX_KINCS && fread(file, buff) && strfind(buff, ",") != NINCS)
			{
				split(buff, buff2, ',');
				Kincs[id][kPos][0] = floatstr( buff2[0] );
				Kincs[id][kPos][1] = floatstr( buff2[1] );
				Kincs[id][kPos][2] = floatstr( buff2[2] );
				Kincs[id][kAngle] = floatstr( buff2[3] );

				Kincs[id][kVaros] = strval( buff2[4] );
				
				Kincs[id][kEsely] = strval( buff2[5] );
				
				if(Kincs[id][kPos][0] != 0.0)
				{
					Kincs[id][kMapID] = CreateDynamicMapIcon( ArrExt( Kincs[id][kPos] ), 36, 0, NINCS, NINCS, NINCS, 1000.0);
					Streamer_SetIntData( STREAMER_TYPE_MAP_ICON, Kincs[id][kMapID], E_STREAMER_STYLE, 3); // Global + checkpoint
					if(Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, Kincs[id][kMapID], E_STREAMER_PLAYER_ID, NINCS))
						Streamer_RemoveArrayData( STREAMER_TYPE_MAP_ICON, Kincs[id][kMapID], E_STREAMER_PLAYER_ID, NINCS);
					
					//printf("KincsAkcio BETOLT");
				}
				
				id++;
			}
			
			fclose(file);
		}
		case KINCS_MENT:
		{
			file = fopen("Config/kincs.cfg", io_write);
			
			while(id < MAX_KINCS)
			{
				if(Kincs[id][kPos][0] != 0.0)
				{				
					format(buff, 256, "%f,%f,%f,%f,%d,%d\n", ArrExt( Kincs[id][kPos] ), Kincs[id][kAngle], Kincs[id][kVaros], Kincs[id][kEsely]);
					fwrite(file, buff);
				}
				id++;
			}
			
			fclose(file);
		}
		case KINCS_INDIT:
		{
			new db, meddig;
			id = NINCS;
			
			// Los Santos
			meddig = random(MAX_KINCS);
			for(new k = 0; k < MAX_KINCS; k++)
			{
				if( Kincs[k][kPos][0] != 0.0 && Kincs[k][kVaros] == 1 )
				{
					db++;
					if(db == meddig)
					{
						id = k;
						break;
					}
				}
				
				if(k == (MAX_KINCS - 1))
				{
					if(db == 0) break;
					else k = -1;
				}
			}
			
			if(id != NINCS)
			{
				// 1829 - nyitott
				// 2332 - zárt
				
				if(IsValidDynamic3DTextLabel(KincsObject))
					DestroyDynamic3DTextLabel(KincsObject),KincsObject=INVALID_3D_TEXT_ID;

				KincsObject = CreateDynamic3DTextLabel("KINCS", COLOR_PIROS, ArrExt( Kincs[id][kPos] ) + 0.5, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, NINCS, NINCS, NINCS, 30.0);
				KincsAktiv = id;
				
				//format(KincsKod, sizeof(KincsKod), "%d%d%d%d%d%d%d", random(2), random(2), random(2), random(2), random(2), random(2), random(2));
				
				// Kód generálás
				for( new i = 0; i < KINCS_KOD_HOSSZ; i++ )
					KincsKod[ i ] = '0' + random(2);
					
				KincsKod[ KINCS_KOD_HOSSZ ] = EOS;
			}
		}
	}
	
	return 1;
}

stock TojasAkcio(akcio = TOJAS_BETOLT)
{
	new File:file, id, buff[256], buff2[5][32];
	switch(akcio)
	{
		case TOJAS_BETOLT:
		{
			if(!fexist("Config/tojas.cfg")) return 1;
			
			file = fopen("Config/tojas.cfg", io_read);
			
			while(id < MAX_TOJAS && fread(file, buff) && strfind(buff, ",") != NINCS)
			{
				split(buff, buff2, ',');
				Tojas[id][tjPos][0] = floatstr( buff2[0] );
				Tojas[id][tjPos][1] = floatstr( buff2[1] );
				Tojas[id][tjPos][2] = floatstr( buff2[2] );
				
				Tojas[id][tjVW] = strval( buff2[3] );
				Tojas[id][tjInt] = strval( buff2[4] );
				
				if(Tojas[id][tjPos][0] != 0.0)
				{
					new randomtojas = random(5);
					new tojasmodel = 19344;
					switch(randomtojas)
					{
						case 0: tojasmodel = 19341;
						case 1: tojasmodel = 19342;
						case 2: tojasmodel = 19343;
						case 3: tojasmodel = 19344;
						case 4: tojasmodel = 19345;
						default: tojasmodel = 19341;
					}
					if(IsValidDynamicObject(Tojas[id][tjID])) DestroyDynamicObject(Tojas[id][tjID]),Tojas[id][tjID]=INVALID_OBJECT_ID;
					Tojas[id][tjID] = CreateDynamicObject(tojasmodel, ArrExt(Tojas[id][tjPos]), 0.0, 0.0, 0.0, Tojas[id][tjVW], Tojas[id][tjInt]);
					Tojas[id][tjVan] = true;
					Tojas[id][tjKiosztva] = false;
				}
				
				id++;
			}
			
			fclose(file);
		}
		case TOJAS_MENT:
		{
			file = fopen("Config/tojas.cfg", io_write);
			
			while(id < MAX_TOJAS)
			{
				if(Tojas[id][tjPos][0] != 0.0)
				{				
					format(buff, 256, "%f,%f,%f,%d,%d\n", ArrExt( Tojas[id][tjPos] ), Tojas[id][tjVW], Tojas[id][tjInt]);
					fwrite(file, buff);
				}
				id++;
			}
			
			fclose(file);
		}
	}
	
	return 1;
}
fpublic Race_Lista_Build(playerid)
{
	new rows, fields;
	sql_data(rows, fields);
	
	printf("Race lista build rows %d",rows);
	if(rows == 1)
		RaceNameBuild =2;
	else
		RaceNameBuild =1;
	
	return 1;

}
fpublic Race_Lista(playerid)
{

	new rows, fields;
	sql_data(rows, fields);
	
	printf("RaceLista rows %d",rows);
	SendClientMessage(playerid,COLOR_YELLOW,"Verseny neve: betöltõ neve");
	if(rows)
	{
		new verseny_Snev[50][50], verseny_Nev[50][128], row, sor;
		while( row < rows )
		{
			sql_get_row_str(row, 0, verseny_Snev[row]);
			sql_get_row_str(row, 1, verseny_Nev[row]);
			row++;
		}
		row =0;
		
		while(row < rows)
		{
			if(sor == 0)
			{
				format( _tmpString,128,"%d:[%s: %s] ||",row,verseny_Nev[row],verseny_Snev[row]);
			}
			else 
				format( _tmpString,128,"%s %d:[%s: %s]||",_tmpString,row,verseny_Nev[row],verseny_Snev[row]);
			
			if(sor == 2 )
			{
			
				SendFormatMessage(playerid,COLOR_YELLOW,"%s",_tmpString);
				sor = -1;
			}
			row++;
			sor++;
		}
		
		if(sor > 0 && sor < 2)
			SendFormatMessage(playerid,COLOR_YELLOW,"%s",_tmpString);
		
		
	}
	return 1;
}
stock ParancsBetoltes( bool: preQuery = true )
{
	if( preQuery )
	{
		format( _tmpString, 128, "SELECT * FROM %s LIMIT 31", SQL_DB_Cmd );
		doQuery( _tmpString , SQL_LOAD_CMD );
		return 1;
	}

	new rows, fields;
	sql_data(rows, fields);
	
	if(rows)
	{
		new CMD_temp[32][4], CMD_temp_string[32][128], row;
		while( row < rows )
		{
			CMD_temp[row][0] = sql_get_row_int(row, 0);
			CMD_temp[row][1] = sql_get_row_int(row, 1);
			CMD_temp[row][2] = sql_get_row_int(row, 2);
			CMD_temp[row][3] = sql_get_row_int(row, 3);
			
			sql_get_row_str(row, 3, CMD_temp_string[row]);
			
			printf("[CMD] Parancs érkezett: %d|%d|%d|%d", CMD_temp[row][0], CMD_temp[row][1], CMD_temp[row][2], CMD_temp[row][3]);
			
			
			row++;
		}
	
		
		
		new uid, cmd, e1, e2, id = -1;
		while( ++id < rows )
		{
			uid = CMD_temp[id][0];
			cmd = CMD_temp[id][1];
			e1 = CMD_temp[id][2];
			e2 = CMD_temp[id][3];
			
			switch(cmd)
			{
		
				case CMD_KAPU_BETOLT: format(_tmpString,sizeof(_tmpString),"CMD_KAPU_BETOLT");
				case CMD_KAPU_TOROL: format(_tmpString,sizeof(_tmpString),"CMD_KAPU_TOROL");
				case CMD_KAPU_RELOAD: format(_tmpString,sizeof(_tmpString),"CMD_KAPU_RELOAD");
				case CMD_SZERVER_RESTART: format(_tmpString,sizeof(_tmpString),"CMD_SZERVER_RESTART");
				case CMD_PLAYER_KICK: format(_tmpString,sizeof(_tmpString),"CMD_PLAYER_KICK");
				case CMD_UCP_RUHA: format(_tmpString,sizeof(_tmpString),"CMD_UCP_RUHA");
				case CMD_UCP_UTALAS: format(_tmpString,sizeof(_tmpString),"CMD_UCP_UTALAS");

			}
			format(_tmpString,sizeof(_tmpString),"[CMD] Parancs érkezett: UID: %d | CMD: %s | e1:%d | e2:%d ",uid, _tmpString, e1, e2);
			SendMessage(SEND_MESSAGE_ADMIN,_tmpString,COLOR_LIGHTRED,1337);
			
			#pragma unused e2
			
			switch(cmd)
			{
				case CMD_KAPU_BETOLT:
					if(e1 != NINCS) KapuAkcio(KAPU_BETOLT_EX, e1);
				case CMD_KAPU_TOROL:
					if(e1 != NINCS) KapuAkcio(KAPU_TOROL, e1);
				case CMD_KAPU_RELOAD:
					if(e1 != NINCS) KapuAkcio(KAPU_RELOAD, e1);
				case CMD_SZERVER_RESTART:
					{
						if(e1 > 20 && e2> 20)
						{
							SendClientMessageToAll(COLOR_LIGHTRED, "<<< ======================================== >>>");
							SendFormatMessageToAll(COLOR_LIGHTBLUE, "<<< A szerver restart lesz kb. %d másodperc mulva >>>", e1);
							SendClientMessageToAll(COLOR_LIGHTRED, "<<< ======================================== >>>");
							
							SzerverResiigCounter=e1;
							SzerverResiCounter=e2;
							TextDrawShowForAll(resiszerver);
				
							ResiVan[1] = true;
							ResiVan[2] = true;
						}
					}
				case CMD_PLAYER_KICK:
					if(e1 != NINCS)
					{
						new jatekos = OnlineUID(e1);
						if(jatekos != NINCS)

						if (e2 != NINCS)
						{
							SendFormatMessageToAll(COLOR_LIGHTRED, "ClassRPG UCP: %s ki lett rúgva %s által | Oka: Karakter szerkesztés [UCP]", PlayerName(jatekos),CMD_temp_string[id]);
							Msg(OnlineUID(e1),"A karakteredet UCP-rõl kickelték. Ezzel együtt egy 5 perces bant is kapsz, hogy szerkesztés alatt ne tudj felmenni.");
							TKick(OnlineUID(e1));
						}
						else
							SendFormatMessageToAll(COLOR_LIGHTRED, "ClassRPG UCP: %s ki lett rúgva | Oka: Karakter szerkesztés [UCP]", PlayerName(jatekos)),TKick(OnlineUID(e1));
					
					}
				case CMD_UCP_RUHA:
					if(e1 != NINCS)
						BizPenz(BIZ_RUHA, e1);
				case CMD_UCP_UTALAS:
					if(e1 > 0)
						BankSzef += e1;
			}
			
			if(uid != NINCS)
			{
				format(_tmpString, 128, "DELETE FROM %s WHERE ID='%d'", SQL_DB_Cmd, uid);
				doQuery( _tmpString );
				printf("[CMD] [id: %d] Parancs törölve: %d", id, uid);

			}
		}
	}

		//print("[CMD] Nem érkezett parancs");
	
	//SQLResult( false );
	
	return 1;
}

stock KapuAkcio(akcio = KAPU_BETOLT, uid = NINCS, row = NINCS, bool: preQuery = true)
{
	new query[256];
	switch(akcio)
	{
		case KAPU_RELOAD:
		{
			
			new id = NINCS;
			for(new k = 0; k < MAX_KAPU; k++)
			{
				if(Kapu[k][kVan] && Kapu[k][kUID] == uid)
					{ id = k; break; }
			}
		
			if(id == NINCS)
				return SendMessage(SEND_MESSAGE_ADMIN,"[CMD] Kapu reload: nincs ilyen kapu!",COLOR_LIGHTRED,1337);
				
			
			
			if(IsValidDynamicObject(Kapu[id][kOID]))
					DestroyDynamicObject(Kapu[id][kOID]), Kapu[id][kOID] = INVALID_OBJECT_ID;
			
			KapuAkcio(KAPU_BETOLT, Kapu[id][kUID]);
			
			Kapu[id][kOID] = CreateDynamicObject(Kapu[id][kModel], ArrExt(Kapu[id][kZPos]), ArrExt(Kapu[id][kZRPos]), Kapu[id][Vw]);
			
			format(_tmpString,sizeof(_tmpString),"[CMD]ID: %d SQLID: %d kapu újratöltve!",id,uid);
			SendMessage(SEND_MESSAGE_ADMIN,_tmpString,COLOR_LIGHTRED,1337);
		}
		case KAPU_BETOLT:
		{
			print("Kapuk betöltése...");
			
			if( preQuery )
			{
				if(uid == NINCS)
					format( query, 256, "SELECT * FROM %s", SQL_DB_Kapu );
				else
					format( query, 256, "SELECT * FROM %s WHERE ID = '%d'", SQL_DB_Kapu, uid);
					
				doQuery( query, SQL_SYSTEM_KAPU, akcio, uid, row );
				return 1;
			}
			
			new rows, fields;
			sql_data(rows, fields);
			
			if(uid == NINCS && rows > 0)
			{
				row = 0;
				while(row < rows)
				{
					KapuAkcio(KAPU_BETOLT_SOR, row, row);
					row++;
				}
			}
			else if(uid != NINCS && rows == 1)
			{
				new slot = NINCS;
				for(new k = 0; k < MAX_KAPU; k++)
				{
					if(Kapu[k][kVan] && Kapu[k][kUID] == uid)
						{ slot = k; break; }
					else if(!Kapu[k][kVan])
						slot = k;
				}
				
				if(slot != NINCS)
					KapuAkcio(KAPU_BETOLT_SOR, slot, 0);
			}
			
			if(rows) printf("%d kapu betöltve", rows);
			else print("Nem lett betöltve kapu");
		}
		case KAPU_BETOLT_SOR:
		{
			if(uid < 0 || uid >= MAX_KAPU || row < 0 || row >= MAX_KAPU)
				return 1;
				
			Kapu[uid][kVan] = true;
			Kapu[uid][kUID] = sql_get_row_int(row, 0);
			sql_get_row_str_len(row, 1, Kapu[uid][kNev], 64);
			Kapu[uid][kModel] = sql_get_row_int(row, 2);
			Kapu[uid][kTav] = sql_get_row_float(row, 3);
			Kapu[uid][kSpeed] = sql_get_row_float(row, 4);
			Kapu[uid][kMozgo] = Kapu[uid][kSpeed] > 0.0;
			
			sql_get_row_str(row, 5, _tmpString), sscanf(_tmpString, "p<,>a<f>[3]", Kapu[uid][kPos]);
			sql_get_row_str(row, 6, _tmpString), sscanf(_tmpString, "p<,>a<f>[3]", Kapu[uid][kNPos]);
			sql_get_row_str(row, 7, _tmpString), sscanf(_tmpString, "p<,>a<f>[3]", Kapu[uid][kNRPos]);
			sql_get_row_str(row, 8, _tmpString), sscanf(_tmpString, "p<,>a<f>[3]", Kapu[uid][kZPos]);
			sql_get_row_str(row, 9, _tmpString), sscanf(_tmpString, "p<,>a<f>[3]", Kapu[uid][kZRPos]);

			sql_get_row_str(row, 10, _tmpString), sscanf(_tmpString, "p<,>A<i>(0)["#MAX_KAPU_HASZNALO"]", Kapu[uid][kHasznalo]);
			if(!Kapu[uid][kHasznalo][0])
				Kapu[uid][kBarki] = true;
			
			Kapu[uid][nyit] = sql_get_row_int(row, 11);
			Kapu[uid][Vw] = sql_get_row_int(row, 12);
			Kapu[uid][kKod] = sql_get_row_int(row, 13);
			
			if(IsValidDynamicObject(Kapu[uid][kOID]))
				DestroyDynamicObject(Kapu[uid][kOID]);
				
			Kapu[uid][kOID] = CreateDynamicObject(Kapu[uid][kModel], ArrExt(Kapu[uid][kZPos]), ArrExt(Kapu[uid][kZRPos]), Kapu[uid][Vw]);
			
			if(Kapu[uid][nyit] == 1)
			{
				printf("Kapu nyitása: %d", uid);
				if(Kapu[uid][kMozgo])
					MoveDynamicObject(Kapu[uid][kOID], ArrExt(Kapu[uid][kNPos]), Kapu[uid][kSpeed]);
				else
				{
					SetDynamicObjectPos(Kapu[uid][kOID], ArrExt(Kapu[uid][kNPos]));
					SetDynamicObjectRot(Kapu[uid][kOID], ArrExt(Kapu[uid][kNRPos]));
				}
			}
		}
		case KAPU_TOROL:
		{
			new torolni = NINCS;
			for(new k = 0; k < MAX_KAPU; k++)
			{
				if(Kapu[k][kVan] && Kapu[k][kUID] == uid)
					{ torolni = k; break; }
			}
		
			if(torolni == NINCS)
				return 1;
			
			if( preQuery )
			{
				printf("[CMD] %d. kapu törlése...", torolni);
				
				if(IsValidDynamicObject(Kapu[torolni][kOID]))
					DestroyDynamicObject(Kapu[torolni][kOID]), Kapu[torolni][kOID] = INVALID_OBJECT_ID;
				
				Kapu[torolni][kVan] = false;
				
				printf("[CMD] %d. kapu törölve", torolni);
				
				format(query, 256, "SELECT ID FROM %s WHERE ID='%d'", SQL_DB_Kapu, uid);
				doQuery( query, SQL_SYSTEM_KAPU, akcio, uid );
			}
			else
			{
				new rows, fields;
				sql_data(rows, fields);
			
				if(rows)
				{
					format(query, 256, "DELETE FROM %s WHERE ID='%d'", SQL_DB_Kapu, uid);
					doQuery( query );
					printf("[CMD] %d. kapu SQL törlése megvan (SQL ID: %d)", torolni, uid);
				}
			}
		}
	}
	return 1;
}

stock Ado(playerid)
{
	new Float:ado, Float:osszpenz;
	osszpenz = OsszesPenz(playerid, 1000000.0);
	
	ado = float(PlayerInfo[playerid][pLevel]) * 1000.0;
	
	ado += (osszpenz * 1000.0) * (1.0 + float(PlayerInfo[playerid][pLevel]) / 100.0);
	
	if(PlayerInfo[playerid][pPhousekey] != NINCS)
		ado *= 1.025;
	
	if(PlayerInfo[playerid][pPcarkey] != NINCS)
		ado *= 1.05;
		
	if(PlayerInfo[playerid][pBenzinkut] != NINCS)
		ado *= 1.15;
	
	if(PlayerInfo[playerid][pPbiskey] != NINCS)
		ado *= 1.25;

	if(osszpenz >= 2500) 		ado *= 15.0;
	else if(osszpenz >= 2000) 	ado *= 10.0;
	else if(osszpenz >= 1500) 	ado *=  5.0;
	else if(osszpenz >= 1000) 	ado *=  4.0;
	else if(osszpenz >= 500) 	ado *=  3.5;
	else if(osszpenz >= 250) 	ado *=  3.0;
	else if(osszpenz >= 100) 	ado *=  2.5;

	if(ADO_MIN <= TaxValue <= ADO_MAX)
		ado *= (float(TaxValue) / 50.0);
	
	
	if(ado < 0.0) ado = 0.0;
	return floatround(ado);
}

stock Eegyezik(szoveg[], szoveg2[])
{
	new bool:jo=true;
	if(strlen(szoveg) != strlen(szoveg2)) return 0;
	for(new x = 0; x < strlen(szoveg); x++)
	{
		if(szoveg[x] != szoveg2[x])
		{
			if(szoveg2[x] == 'á' && szoveg[x] != 'a') jo = false;
			if(szoveg2[x] == 'a' && szoveg[x] != 'á') jo = false;
			if(szoveg2[x] == 'e' && szoveg[x] != 'é') jo = false;
			if(szoveg2[x] == 'é' && szoveg[x] != 'e') jo = false;
			if(szoveg2[x] == 'í' && szoveg[x] != 'i') jo = false;
			if(szoveg2[x] == 'i' && szoveg[x] != 'í') jo = false;
			if(szoveg2[x] == 'o' && szoveg[x] != 'ó') jo = false;
			if(szoveg2[x] == 'o' && szoveg[x] != 'ö') jo = false;
			if(szoveg2[x] == 'o' && szoveg[x] != 'õ') jo = false;
			if(szoveg2[x] == 'ó' && szoveg[x] != 'o') jo = false;
			if(szoveg2[x] == 'ö' && szoveg[x] != 'o') jo = false;
			if(szoveg2[x] == 'õ' && szoveg[x] != 'o') jo = false;
			if(szoveg2[x] == 'u' && szoveg[x] != 'ú') jo = false;
			if(szoveg2[x] == 'u' && szoveg[x] != 'ü') jo = false;
			if(szoveg2[x] == 'u' && szoveg[x] != 'û') jo = false;
			if(szoveg2[x] == 'ú' && szoveg[x] != 'u') jo = false;
			if(szoveg2[x] == 'ü' && szoveg[x] != 'u') jo = false;
			if(szoveg2[x] == 'û' && szoveg[x] != 'u') jo = false;
		}
	}
	return jo;
}
stock EkezetMentes(szoveg[])
{
	new uj[256];
	strcpy(uj, szoveg, 256);
	for(new x = 0; x < strlen(uj); x++)
	{
		switch(uj[x])
		{
			case 'á': uj[x] = 'a';
			case 'Á': uj[x] = 'A';
			
			case 'é': uj[x] = 'e';
			case 'É': uj[x] = 'E';
			
			case 'í': uj[x] = 'i';
			case 'Í': uj[x] = 'I';
			
			case 'ó', 'ö', 'õ': uj[x] = 'o';
			case 'Ó', 'Ö', 'Õ': uj[x] = 'O';
			
			case 'ú', 'ü', 'û': uj[x] = 'u';
			case 'Ú', 'Ü', 'Û': uj[x] = 'U';
		}
	}
	return uj;
}

/*public LSPDKapunyitas(szam)
{
	if(szam == 1)
	{
		if(LSPDKapunyit)
			SetDynamicObjectRot(LSPDKapu[0], 0, 30, 90);
		else
			SetDynamicObjectRot(LSPDKapu[0], 0, 60, 90);
		SetTimerEx("LSPDKapunyitas", 400, false, "d", 2);
	}
	else if(szam == 2)
	{
		if(LSPDKapunyit)
			SetDynamicObjectRot(LSPDKapu[0], 0, 60, 90);
		else
			SetDynamicObjectRot(LSPDKapu[0], 0, 30, 90);
		SetTimerEx("LSPDKapunyitas", 400, false, "d", 3);
	}
	else if(szam == 3)
	{
		if(LSPDKapunyit)
			SetDynamicObjectRot(LSPDKapu[0], 0, 90, 90);
		else
			SetDynamicObjectRot(LSPDKapu[0], 0, 0, 90);
	}
	return 1;
}*/
/*forward BenzinesKocsi(kocsi);
fpublic BenzinesKocsi(kocsi)
{
	new modell = GetVehicleModel(kocsi);
	for(new b=0; b < sizeof(Benzines_Kocsik); b++)
	{
		if(modell ==  Benzines_Kocsik[b])
		{
			return true;
//			break;
		}
	}
	return false;
}*/

forward Utzar(playerid, tipus);
fpublic Utzar(playerid, tipus)
{
	if(Utzarak[playerid][uVan] && tipus != UTZAR_TOROL && tipus != UTZAR_TOROL_MOST || !Utzarak[playerid][uVan] && (tipus == UTZAR_TOROL || tipus == UTZAR_TOROL_MOST)) return 1;
	
	switch(tipus)
	{
		case UTZAR_TOROL:
		{
			if(IsValidDynamicObject(Utzarak[playerid][uObject])) DestroyDynamicObject(Utzarak[playerid][uObject]),Utzarak[playerid][uObject]=INVALID_OBJECT_ID;
			if(IsValidDynamicPickup(Utzarak[playerid][uPickup][0])) DestroyDynamicPickup(Utzarak[playerid][uPickup][0]);
			if(IsValidDynamicPickup(Utzarak[playerid][uPickup][1])) DestroyDynamicPickup(Utzarak[playerid][uPickup][1]);
			if(IsValidDynamic3DTextLabel(Utzarak[playerid][uText])) DestroyDynamic3DTextLabel(Utzarak[playerid][uText]),Utzarak[playerid][uText]=INVALID_3D_TEXT_ID;
			
			if(Utzarak[playerid][uTipus] == UTZAR_NAGY)
			{
				if(IsValidDynamicPickup(Utzarak[playerid][uPickup][2])) DestroyDynamicPickup(Utzarak[playerid][uPickup][2]);
				if(IsValidDynamicPickup(Utzarak[playerid][uPickup][3])) DestroyDynamicPickup(Utzarak[playerid][uPickup][3]);
			}
			
			Utzarak[playerid][uVan] = false;
			Utzarak[playerid][uTipus] = 0;
			Utzarak[playerid][uPickup] = {NINCS, NINCS, NINCS, NINCS};
			
			Streamer_Update(playerid);
			
			Msg(playerid, "Sikeresen felvetted az útzáradat");
			Cselekves(playerid, "felvette az útzárát");
			
			UnFreeze(playerid);
			ClearAnim(playerid);
			
			return 1;
		}
		case UTZAR_TOROL_MOST:
		{
			if(IsValidDynamicObject(Utzarak[playerid][uObject])) DestroyDynamicObject(Utzarak[playerid][uObject]),Utzarak[playerid][uObject]=INVALID_OBJECT_ID;
			if(IsValidDynamicPickup(Utzarak[playerid][uPickup][0])) DestroyDynamicPickup(Utzarak[playerid][uPickup][0]);
			if(IsValidDynamicPickup(Utzarak[playerid][uPickup][1])) DestroyDynamicPickup(Utzarak[playerid][uPickup][1]);
			if(IsValidDynamic3DTextLabel(Utzarak[playerid][uText])) DestroyDynamic3DTextLabel(Utzarak[playerid][uText]),Utzarak[playerid][uText]=INVALID_3D_TEXT_ID;
			
			if(Utzarak[playerid][uTipus] == UTZAR_NAGY)
			{
				if(IsValidDynamicPickup(Utzarak[playerid][uPickup][2])) DestroyDynamicPickup(Utzarak[playerid][uPickup][2]);
				if(IsValidDynamicPickup(Utzarak[playerid][uPickup][3])) DestroyDynamicPickup(Utzarak[playerid][uPickup][3]);
			}
			
			Utzarak[playerid][uVan] = false;
			Utzarak[playerid][uTipus] = 0;
			Utzarak[playerid][uPickup] = {NINCS, NINCS, NINCS, NINCS};
			
			return 1;
		}
		case UTZAR_NAGY:
		{
			new Float:X, Float:Y, Float:Z, Float:A;
					
			GetPlayerPos(playerid, X, Y, Z);
			GetXYInFrontOfPlayer(playerid, X, Y, 2.0);
			GetPlayerFacingAngle(playerid, A);
			
			new felirat[64];
			format(felirat, 64, "[Útzár - Nagy]\nLerakta: %s", PlayerName(playerid));
			Utzarak[playerid][uText] = CreateDynamic3DTextLabel(felirat, 0x33CCFFFF, X, Y, Z+0.5, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, NINCS, NINCS, NINCS, 50.0);
	
			Z -= 0.9;
			if(A >= 270.0) A -= 90.0;
			else A += 90.0;
					
			new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
	
			Utzarak[playerid][uVan] = true;
			Utzarak[playerid][uTipus] = UTZAR_NAGY;
			Utzarak[playerid][uHely][0] = X;
			Utzarak[playerid][uHely][1] = Y;
			Utzarak[playerid][uHely][2] = Z;
			Utzarak[playerid][uHely][3] = A;
					
			Utzarak[playerid][uObject] = CreateDynamicObject(2892, X, Y, Z, 0.0, 0.0, A);
			Utzarak[playerid][uPickup][0] = CreateDynamicPickup(1007, 14, X+(4.0*dis1), Y+(4.0*dis2), Z, 0);
			Utzarak[playerid][uPickup][1] = CreateDynamicPickup(1007, 14, X+(1.25*dis1), Y+(1.25*dis2), Z, 0);
			Utzarak[playerid][uPickup][2] = CreateDynamicPickup(1007, 14, X-(4.0*dis1), Y-(4.0*dis2), Z, 0);
			Utzarak[playerid][uPickup][3] = CreateDynamicPickup(1007, 14, X-(1.25*dis1), Y-(1.25*dis2), Z, 0);
					
			Streamer_Update(playerid);
					
			Msg(playerid, "Sikeresen leraktál egy nagy útzárat");
			Cselekves(playerid, "lerakott egy nagy útzárat");
			
			UnFreeze(playerid);
			ClearAnim(playerid);

			return 1;
		}
	
		case UTZAR_KICSI:
		{
			new Float:X, Float:Y, Float:Z, Float:A;
					
			GetPlayerPos(playerid, X, Y, Z);
			GetXYInFrontOfPlayer(playerid, X, Y, 2.0);
			GetPlayerFacingAngle(playerid, A);

			new felirat[64];
			format(felirat, 64, "[Útzár - Kicsi]\nLerakta: %s", PlayerName(playerid));
			Utzarak[playerid][uText] = CreateDynamic3DTextLabel(felirat, 0x33CCFFFF, X, Y, Z+0.5, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, NINCS, NINCS, NINCS, 50.0);

			Z -= 0.85;
			if(A >= 270.0) A -= 90.0;
			else A += 90.0;
	
			new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
	
			Utzarak[playerid][uVan] = true;
			Utzarak[playerid][uTipus] = UTZAR_KICSI;
			Utzarak[playerid][uHely][0] = X;
			Utzarak[playerid][uHely][1] = Y;
			Utzarak[playerid][uHely][2] = Z;
			Utzarak[playerid][uHely][3] = A;
					
			Utzarak[playerid][uObject] = CreateDynamicObject(2899, X, Y, Z, 0.0, 0.0, A);
			Utzarak[playerid][uPickup][0] = CreateDynamicPickup(1007, 14, X+(1.5*dis1), Y+(1.5*dis2), Z, 0);
			Utzarak[playerid][uPickup][1] = CreateDynamicPickup(1007, 14, X-(1.5*dis1), Y-(1.5*dis2), Z, 0);
					
			Streamer_Update(playerid);
					
			Msg(playerid, "Sikeresen leraktál egy kicsi útzárat");
			Cselekves(playerid, "lerakott egy kicsi útzárat");
					
			UnFreeze(playerid);
			ClearAnim(playerid);
					
			return 1;
		}
	}
	
	return 0;
}

stock PopPlayerTires(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid != 0)
	{
		new Float:hp;
		GetVehicleHealth(vehicleid, hp);
		if(hp >= 700.0 && hp <= 1000.0) SetVehicleHealth(vehicleid, hp - 200.0);
		new panels, doors, lights, tires;
		GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
		CarPart[vehicleid][cKerekek] = 100.00;
	}
}

stock VersenyVege(playerid)
{
	PlayerRaceTuning[playerid][tNitro] = 0;
	PlayerRaceTuning[playerid][tNitroIdo] = 0;
	PlayerRaceTuning[playerid][tUjito] = 0;
	PlayerRaceTuning[playerid][tOrvos] = false;
	PlayerRaceTuning[playerid][tSegitIdo] = 0;
	PlayerRaceTuning[playerid][tEMP] = 0;
	//HelyezesFelrak(playerid, false);
	
	new kocsi = GetPlayerVehicleID(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	SetVehicleVW(kocsi, 0);
	RemoveVehicleComponent(kocsi, 1010);
	
	DisablePlayerRaceCheckpoint(playerid);
	PlayerRaceInfo[playerid][xVersenyen] = NINCS;
	
	foreach(Jatekosok, x)
	{
		if(PlayerRaceInfo[x][xVersenyen] == PlayerRaceInfo[playerid][xVersenyen] && x != playerid)
		{
			SetPlayerMarkerForPlayer(x, playerid, COLOR_INVISIBLE);
			SetPlayerMarkerForPlayer(playerid, x, COLOR_INVISIBLE);
		}
	}
}

stock PenzLevesz(playerid, penz, bool:kenyszerit = false)
{
	new penze = VanEnnyiPenze(playerid, penz);
	new szefid=GetPlayerBerSzefID(playerid);
	
	if(penze == 0 && !kenyszerit) return 0;
	else if(penze == 1) GiveMoney(playerid, -penz);
	else if(penze == 2) PlayerInfo[playerid][pAccount] -= penz;	
	else if(penze == 3) BerSzef[szefid][bPenz] -= penz;
	else if(penze == 4) BizzInfo[ PlayerInfo[playerid][pPbiskey] ][bTill] -=penz;
	else if(penze == 5) BizzInfo[ PlayerInfo[playerid][pBizniszKulcs] ][bTill2] -=penz;
	else if(penze == 6) BenzinKutak[ PlayerInfo[playerid][pBenzinkut] ][bSzef] -=penz;
	else if(penze == 2 || penze == 0 && kenyszerit) PlayerInfo[playerid][pAccount] -= penz;
	return 1;
}

stock VanEnnyiPenze(playerid, penz)
{
	new szefid=GetPlayerBerSzefID(playerid);
			

	if(GetMoney(playerid) >= penz)
		return 1;
	else if(PlayerInfo[playerid][pAccount] >= penz)
		return 2;
	else if(szefid != NINCS && BerSzef[szefid][bPenz] >= penz)
		return 3;
	else if(PlayerInfo[playerid][pPbiskey] != NINCS && BizzInfo[ PlayerInfo[playerid][pPbiskey] ][bTill] > 0)
		return 4;
	else if(PlayerInfo[playerid][pBizniszKulcs] != NINCS && BizzInfo[ PlayerInfo[playerid][pBizniszKulcs] ][bTill2] > 0)
		return 5;
	else if(PlayerInfo[playerid][pBenzinkut] != NINCS && BenzinKutak[ PlayerInfo[playerid][pBenzinkut] ][bSzef] > 0)
		return 6;	

	return 0;
}

stock ShowDialog(playerid, dialogid) // shod extra = NINCS
{
	if(dialogid == DIALOG_PIAC)
	{
		//SendFormatMessage(playerid, COLOR_YELLOW, "%d",PiacDialog[playerid]);
		PiacDialogNext[playerid] = 0;
		
		if(PiacDialog[playerid] == 0) // Fõmenü
			ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_LIST, "Piac", "Kínálat\nEladás\nPiacEladás", "Tovább", "Mégse");
			//ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_LIST, "Piac", "Kínálat\nKereslet\nGyors vétel\nEladás\nAjánlataid", "Tovább", "Mégse");
		else if(1 <= PiacDialog[playerid] <= 4) // Típusok listázása
			ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_LIST, "Piac", "Kokain\nHeroin\nMarihuana\nMaterial", "Tovább", "Vissza");
		else if(PiacDialog[playerid] == 5) // Ajánlataid
		{
		
		}
		else if(11 <= PiacDialog[playerid] <= 14) // Kínálatok
		{
			new id;
			switch(PiacDialog[playerid])
			{
				case 11: id = P_KI_KOKAIN;
				case 12: id = P_KI_HEROIN;
				case 13: id = P_KI_MARIHUANA;
				case 14: id = P_KI_MATERIAL;
				default: return 1;
			}
			
			new ajanlatok[4000], db;
			for(new p = 0; p < MAX_PIAC_CUCC; p++)
			{
				if(Piac[id][p][pAra] < 1)
				{
					Piac[id][p][pVan] = false;
					Piac[id][p][pFeladta] = NINCS;
						
					Piac[id][p][pDB]=NINCS;
					continue;
				}	
				if(!db) format(ajanlatok, 100, "%dFt - %d g - %s", Piac[id][p][pAra], Piac[id][p][pDB], Piac[id][p][pNev]);
				else format(ajanlatok, 4000, "%s\n%dFt - %d g - %s", ajanlatok, Piac[id][p][pAra], Piac[id][p][pDB], Piac[id][p][pNev]);
				DialogIDk[playerid][db] = Piac[id][p][pID];
				db++;
				
				if(Piac[id][p][pVan] && Piac[id][p][pDB] == 0 && Piac[id][p][pEladva] == 0)
					Piac[id][p][pVan] = false;
				
			}
			if(db)
				ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_LIST, "Piac", ajanlatok, "Megvesz", "Vissza");
			else
				PiacDialogNext[playerid] = 1, PiacDialog[playerid] = 1, ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "Piac", "Nincs ajánlat a piacon", "Kilép", "vissza");
		}
		else if(110 <= PiacDialog[playerid] <= 140) // Kínálatok - Megvesz
		{
			new id;
			switch(PiacDialog[playerid])
			{
				case 110: id = P_KI_KOKAIN;
				case 120: id = P_KI_HEROIN;
				case 130: id = P_KI_MARIHUANA;
				case 140: id = P_KI_MATERIAL;
				default: return 1;
			}
			
			new vid = PiacAdatok[playerid][0];
			for(new p = 0; p < MAX_PIAC_CUCC; p++)
			{
				if(Piac[id][p][pVan] && Piac[id][p][pID] == vid)
				{
					vid = p;
					break;
				}
			}
			
			if(vid < 0 || vid >= MAX_PIAC_CUCC || !Piac[id][vid][pVan])
				return (PiacDialogNext[playerid] = NINCS, ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "Piac", "Ez az ajánlat már nem létezik", "Vissza", "Befejezés"));
			
			new str[128];
			switch(id)
			{
				case P_KI_KOKAIN: format(str, 128, "Hány g kokaint szeretnél megvenni?\nMennyiség: %d g\nDarabár: %dFt/g", Piac[id][vid][pDB], Piac[id][vid][pAra]);
				case P_KI_HEROIN: format(str, 128, "Hány g heroint szeretnél megvenni?\nMennyiség: %d g\nDarabár: %dFt/g", Piac[id][vid][pDB], Piac[id][vid][pAra]);
				case P_KI_MARIHUANA: format(str, 128, "Hány g marihuanát szeretnél megvenni?\nMennyiség: %d g\nDarabár: %dFt/g", Piac[id][vid][pDB], Piac[id][vid][pAra]);
				case P_KI_MATERIAL: format(str, 128, "Hány darab materialt szeretnél megvenni?\nMennyiség: %d db\nDarabár: %dFt/db", Piac[id][vid][pDB], Piac[id][vid][pAra]);
			}
			
			ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_INPUT, "Piac", str, "Tovább", "Vissza");
		}
		else if(1100 <= PiacDialog[playerid] <= 1400) // Kínálatok - Megvesz > Befejezés
		{
			new id;
			switch(PiacDialog[playerid])
			{
				case 1100: id = P_KI_KOKAIN;
				case 1200: id = P_KI_HEROIN;
				case 1300: id = P_KI_MARIHUANA;
				case 1400: id = P_KI_MATERIAL;
				default: return 1;
			}
			
			new vid = PiacAdatok[playerid][0];
			for(new p = 0; p < MAX_PIAC_CUCC; p++)
			{
				if(Piac[id][p][pVan] && Piac[id][p][pID] == vid)
				{
					vid = p;
					break;
				}
			}
			
			
			if(vid < 0 || vid >= MAX_PIAC_CUCC || !Piac[id][vid][pVan])
				return (PiacDialogNext[playerid] = NINCS, ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "Piac", "Ez az ajánlat már nem létezik", "Vissza", "Befejezés"));
			
			new ara = PiacAdatok[playerid][1] * Piac[id][vid][pAra];
			if(ara <= 0)
				return 1;
			
			new str[128];
			if(!BankkartyaFizet(playerid, ara, false))
			{
				switch(id)
				{
					case P_KI_KOKAIN: format(str, 128, "Nincs elég pénzed %dg kokainra.\nEgység ára: %dFt/g", PiacAdatok[playerid][1], Piac[id][vid][pAra]),PiacDialog[playerid]=110;
					case P_KI_HEROIN: format(str, 128, "Nincs elég pénzed %dg heroinra.\nEgység ára: %dFt/g", PiacAdatok[playerid][1], Piac[id][vid][pAra]),PiacDialog[playerid]=120;
					case P_KI_MARIHUANA: format(str, 128, "Nincs elég pénzed %dg marihuanára.\nEgység ára: %dFt/g", PiacAdatok[playerid][1], Piac[id][vid][pAra]),PiacDialog[playerid]=130;
					case P_KI_MATERIAL: format(str, 128, "Nincs elég pénzed %dg materialra.\nDarabára: %dFt/db", PiacAdatok[playerid][1], Piac[id][vid][pAra]),PiacDialog[playerid]=140;
				}
				PiacDialog[playerid] = NINCS;
				ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "ó-ó",str,"Fõlap","Kilépés");
				return 1;
			}
			else
			{
				new osszesen;
				switch(id)
				{

					case P_KI_KOKAIN:
					{
						osszesen = PlayerInfo[playerid][pKokain] + PiacAdatok[playerid][1];
						if(osszesen > MAXKOKAIN)
						{
							PiacDialog[playerid] = NINCS;
							ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "ó-ó","Ennyi nem fér el nálad amigó","Fõlap","kilépés");
							return 1;
						}
						BankkartyaFizet(playerid, ara);
						format(str, 128, "Sikeresen megvettél %d g kokaint %dFtért", PiacAdatok[playerid][1], ara);
						PlayerInfo[playerid][pKokain] = osszesen;
						
					}
					case P_KI_HEROIN:
					{	
						osszesen= PlayerInfo[playerid][pHeroin] + PiacAdatok[playerid][1];
						if(osszesen > MAXHEROIN)
						{
							PiacDialog[playerid] = NINCS;
							ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "ó-ó","Ennyi nem fér el nálad amigó","Fõlap","kilépés");
							return 1;
						}
						BankkartyaFizet(playerid, ara);
						format(str, 128, "Sikeresen megvettél %d g heroint %dFtért", PiacAdatok[playerid][1], ara);
						PlayerInfo[playerid][pHeroin] = osszesen;
					}
					case P_KI_MARIHUANA: 
					{
						osszesen= PlayerInfo[playerid][pMarihuana] + PiacAdatok[playerid][1];
						if(osszesen > MAXMARIHUANA)
						{
							PiacDialog[playerid] = NINCS;
							ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "ó-ó","Ennyi nem fér el nálad amigó","Fõlap","kilépés");
							return 1;
						}
						BankkartyaFizet(playerid, ara);
						format(str, 128, "Sikeresen megvettél %d g marihuanát %dFtért", PiacAdatok[playerid][1], ara);
						PlayerInfo[playerid][pMarihuana] = osszesen;
					}
					case P_KI_MATERIAL:
					{
						osszesen= PlayerInfo[playerid][pMats] + (PiacAdatok[playerid][1]);
						if(osszesen > MAXMATI)
						{
							PiacDialog[playerid] = NINCS;
							ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "ó-ó","Ennyi nem fér el nálad amigó","Fõlap","kilépés");
							return 1;
						}
						BankkartyaFizet(playerid, ara);
						format(str, 128, "Sikeresen megvettél %d db materialt %dFtért", PiacAdatok[playerid][1], ara);
						PlayerInfo[playerid][pMats] = osszesen;
					}
				}
				Piac[id][vid][pEladva] = PiacAdatok[playerid][1];
				Piac[id][vid][pDB] -=PiacAdatok[playerid][1];
				
				foreach(Jatekosok, x)
				{
					if(Piac[id][vid][pFeladta] == PlayerInfo[x][pID])
					{
						new eladara;
						eladara = Piac[id][vid][pEladva] * (floatround(Piac[id][vid][pAra]/1.2));
						new string[32];
						if(P_KI_KOKAIN == id) format(string,32,"db KOKAIN-dat");
						if(P_KI_HEROIN == id) format(string,32,"db HEROIN-dat");
						if(P_KI_MARIHUANA == id) format(string,32,"db MARIHUANA-dat");
						if(P_KI_MATERIAL == id) format(string,32,"db MATERIAL-odat");
						
						SendFormatMessage(playerid,COLOR_YELLOW,"A piacon megvették %d db %s, Ezért postán át kaptál %s Ft-ott!",Piac[id][vid][pEladva],string,FormatNumber( eladara, 0, ',' ));
						GiveMoney(playerid,eladara);
						Piac[id][vid][pEladva]=0;
					}
				}
				if(Piac[id][vid][pDB] <= 0)
				{
					if(Piac[id][vid][pEladva] == 0)
						Piac[id][vid][pVan] = false;
						
					Piac[id][vid][pID] = NINCS;
					Piac[id][vid][pFeladta] = NINCS;
					format(Piac[id][vid][pNev], 64, "NINCS");
					Piac[id][vid][pDB] = 0;
					Piac[id][vid][pAra] = 0;

				}
				PiacDialog[playerid] = NINCS;
				ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "Piac", str, "Tovább", "Vissza");
				PiacAkcio(P_SAVE, id);
				
			}
		}
		else if(21 <= PiacDialog[playerid] <= 24) // Eladás - Mennyiség
		{
			new szoveg[128];
			switch(PiacDialog[playerid])
			{
				case 21: format(szoveg, 128, "Hány g kokaint szeretnél eladni?\nNeked jelenleg %dg van", PlayerInfo[playerid][pKokain]);
				case 22: format(szoveg, 128, "Hány g heroint szeretnél eladni?\nNeked jelenleg %dg van", PlayerInfo[playerid][pHeroin]);
				case 23: format(szoveg, 128, "Hány g marihuanát szeretnél eladni?\nNeked jelenleg %dg van", PlayerInfo[playerid][pMarihuana]);
				case 24: format(szoveg, 128, "Hány db materialt szeretnél eladni?\nNeked jelenleg %ddb van", PlayerInfo[playerid][pMats]);
			}
			ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_INPUT, "Piac", szoveg, "Tovább", "Vissza");
		}
		else if(210 <= PiacDialog[playerid] <= 240) // Eladás - Darabár
		{
			new szoveg[128];
			
			new id;
			switch(PiacDialog[playerid])
			{
				case 210: id = P_KI_KOKAIN;
				case 220: id = P_KI_HEROIN;
				case 230: id = P_KI_MARIHUANA;
				case 240: id = P_KI_MATERIAL;
				default: return 1;
			}
			new bool:feltetelek=false;
			switch(id)
			{
				case P_KI_KOKAIN: if(PiacAdatok[playerid][0] > PlayerInfo[playerid][pKokain]) feltetelek = true;
				case P_KI_HEROIN: if(PiacAdatok[playerid][0] > PlayerInfo[playerid][pHeroin]) feltetelek = true;
				case P_KI_MARIHUANA: if(PiacAdatok[playerid][0] > PlayerInfo[playerid][pMarihuana]) feltetelek = true;
				case P_KI_MATERIAL: if(PiacAdatok[playerid][0] > PlayerInfo[playerid][pMats]) feltetelek = true;
			
			
			}
			if(feltetelek)
			{
				ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "Piac", "Ennyi anyag nincs nálad!", "Kilép", "Vissza");
				return 1;
			}
			
			switch(id)
			{
				case P_KI_KOKAIN: format(szoveg, 128, "Mennyit kérsz %d g kokainért darabáron?\nMinimum 1Ft, maximum %d FT", PiacAdatok[playerid][0], P_MAX_KOKAIN);
				case P_KI_HEROIN: format(szoveg, 128, "Mennyit kérsz %d g heroinért darabáron?\nMinimum 1Ft, maximum %d FT", PiacAdatok[playerid][0], P_MAX_HEROIN);
				case P_KI_MARIHUANA: format(szoveg, 128, "Mennyit kérsz %d g marihuanáért darabáron?\nMinimum 1Ft, maximum %d FT", PiacAdatok[playerid][0], P_MAX_HEROIN);
				case P_KI_MATERIAL: format(szoveg, 128, "Mennyit kérsz %d db materialért darabáron?\nMinimum 1Ft, maximum %d FT", PiacAdatok[playerid][0], P_MAX_MATI);
			}
			ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_INPUT, "Piac", szoveg, "Tovább", "Vissza");
		}
		else if(2100 <= PiacDialog[playerid] <= 2400) // Eladás - Befejezés
		{
			
			new id;
			switch(PiacDialog[playerid])
			{
				case 2100: id = P_KI_KOKAIN;
				case 2200: id = P_KI_HEROIN;
				case 2300: id = P_KI_MARIHUANA;
				case 2400: id = P_KI_MATERIAL;
				default: return 1;
			}
			
			new slot = NINCS, uid;
		
			PiacDialog[playerid] = NINCS;
			
			for(new p = 0; p < MAX_PIAC_CUCC; p++)
			{
				
				if(Piac[id][p][pFeladta] == PlayerInfo[playerid][pID])
				{
					slot = -2;
					break;
				}
				
				slot = p;
			}
			if(slot == -2)
				return ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "Piac", "A piacra egy félébõl csak egyet rakhatsz fel, ebbõl már raktál fel!", "Fõmenü", "Befejezés");
			for(new p = 0; p < MAX_PIAC_CUCC; p++)
			{
				if(Piac[id][p][pVan]) continue;
				
				slot = p;
				break;
			}
			
			if(slot == NINCS)
				return ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "Piac", "Sajnos a piac megtelt.\nAdj el mást, vagy várj, amíg ürülni fog.", "Fõmenü", "Befejezés");
			

			
			while(!uid)
			{
				uid = Rand(100000000, 999999999);
				for(new p = p; p < MAX_PIAC_CUCC; p++)
				{
					if(Piac[id][p][pID] == uid)
					{
						uid = 0;
						break;
					}
				}
			}
			
			Piac[id][slot][pVan] = true;
			Piac[id][slot][pID] = uid;
			Piac[id][slot][pFeladta] = PlayerInfo[playerid][pID];
			Piac[id][slot][pNev] = PlayerName(playerid);
			Piac[id][slot][pDB]=PiacAdatok[playerid][0];
			Piac[id][slot][pEladva] = 0;
			
			Piac[id][slot][pAra] = floatround(PiacAdatok[playerid][1]*1.2);
			
			
			new szoveg[128];
			switch(id)
			{
					case P_KI_KOKAIN:
					{
						format(szoveg, 128, "Sikeresen felraktál a piacra %dkg kokaint %dFt/g áron. A pénzt akkor kapod meg ha megvették!", PiacAdatok[playerid][0], PiacAdatok[playerid][1]);
						PlayerInfo[playerid][pKokain] -=PiacAdatok[playerid][0];
					}
					case P_KI_HEROIN:
					{
						format(szoveg, 128, "Sikeresen felraktál a piacra %dkg heroint %dFt/g áron. A pénzt akkor kapod meg ha megvették!", PiacAdatok[playerid][0], PiacAdatok[playerid][1]);
						PlayerInfo[playerid][pHeroin] -=PiacAdatok[playerid][0];
						
					}
					case P_KI_MARIHUANA: 
					{
						format(szoveg, 128, "Sikeresen felraktál a piacra %dkg marihuanát %dFt/g áron. A pénzt akkor kapod meg ha megvették!", PiacAdatok[playerid][0], PiacAdatok[playerid][1]);
						PlayerInfo[playerid][pMarihuana] -=PiacAdatok[playerid][0];
					}
					case P_KI_MATERIAL:
					{
						format(szoveg, 128, "Sikeresen felraktál a piacra %ddb materialt %dFt/db áron. A pénzt akkor kapod meg ha megvették!", PiacAdatok[playerid][0], PiacAdatok[playerid][1]);
						PlayerInfo[playerid][pMats] -=PiacAdatok[playerid][0];
					}
					
			}
			
			PiacDialog[playerid] = NINCS;
			ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "Piac", szoveg, "Fõmenü", "Befejezés");
			
			PiacAkcio(P_SAVE, id);
			
		}
		// Elad Piacnak
		else if(31 <= PiacDialog[playerid] <= 34) // Eladás - Mennyiség
		{
			new szoveg[128];
			switch(PiacDialog[playerid])
			{
				case 31: format(szoveg, 128, "Hány g kokaint szeretnél eladni?\nNeked jelenleg %dg van", PlayerInfo[playerid][pKokain]);
				case 32: format(szoveg, 128, "Hány g heroint szeretnél eladni?\nNeked jelenleg %dg van", PlayerInfo[playerid][pHeroin]);
				case 33: format(szoveg, 128, "Hány g marihuanát szeretnél eladni?\nNeked jelenleg %dg van", PlayerInfo[playerid][pMarihuana]);
				case 34: format(szoveg, 128, "Hány db materialt szeretnél eladni?\nNeked jelenleg %ddb van", PlayerInfo[playerid][pMats]);
			}
			ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_INPUT, "Piac", szoveg, "Tovább", "Vissza");
		}
		else if(310 <= PiacDialog[playerid] <= 340) // Eladás - Darabár
		{
			new szoveg[128];
			
			new id;
			switch(PiacDialog[playerid])
			{
				case 310: id = P_KI_KOKAIN;
				case 320: id = P_KI_HEROIN;
				case 330: id = P_KI_MARIHUANA;
				case 340: id = P_KI_MATERIAL;
				default: return 1;
			}
			new bool:feltetelek=false;
			switch(id)
			{
				case P_KI_KOKAIN: if(PiacAdatok[playerid][0] > PlayerInfo[playerid][pKokain]) feltetelek = true;
				case P_KI_HEROIN: if(PiacAdatok[playerid][0] > PlayerInfo[playerid][pHeroin]) feltetelek = true;
				case P_KI_MARIHUANA: if(PiacAdatok[playerid][0] > PlayerInfo[playerid][pMarihuana]) feltetelek = true;
				case P_KI_MATERIAL: if(PiacAdatok[playerid][0] > PlayerInfo[playerid][pMats]) feltetelek = true;
			
			
			}
			if(feltetelek)
			{
				ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "Piac", "Ennyi anyag nincs nálad!", "Kilép", "Vissza");
				return 1;
			}
			
			switch(id)
			{
				case P_KI_KOKAIN: format(szoveg, 128, "A kokain %d Ft/g áron fut így %s Ft-ott kapsz %s cuccért.\nElfogadod ezt az árat?", P_MAX_KOKAIN, FormatInt(P_MAX_KOKAIN*PiacAdatok[playerid][0]), FormatInt(PiacAdatok[playerid][0]));
				case P_KI_HEROIN: format(szoveg, 128, "A heroin %d Ft/g áron fut így %s Ft-ott kapsz %s cuccért.\nElfogadod ezt az árat?", P_MAX_HEROIN, FormatInt(P_MAX_HEROIN*PiacAdatok[playerid][0]), FormatInt(PiacAdatok[playerid][0]));
				case P_KI_MARIHUANA: format(szoveg, 128, "A MARIHUANA %d Ft/g áron fut így %s Ft-ott kapsz %s cuccért.\nElfogadod ezt az árat?", P_MAX_MARISKA, FormatInt(P_MAX_MARISKA*PiacAdatok[playerid][0]), FormatInt(PiacAdatok[playerid][0]));
				case P_KI_MATERIAL: format(szoveg, 128, "A MATERIAL %d Ft/db áron fut így %sFt-ott kapsz %s cuccért.\nElfogadod ezt az árat?", P_MAX_MATI, FormatInt(P_MAX_MATI*PiacAdatok[playerid][0]), FormatInt(PiacAdatok[playerid][0]));
			}
			ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "Piac", szoveg, "Elfogad", "Vissza");
		}
		else if(3100 <= PiacDialog[playerid] <= 3400) // Eladás - Darabár
		{
			new id;
			switch(PiacDialog[playerid])
			{
				case 3100: id = P_KI_KOKAIN;
				case 3200: id = P_KI_HEROIN;
				case 3300: id = P_KI_MARIHUANA;
				case 3400: id = P_KI_MATERIAL;
				default: return 1;
			}
			new bool:feltetelek=true;
			new string[200];
			switch(id)
			{
				case P_KI_KOKAIN: if(PiacAdatok[playerid][0] <= PlayerInfo[playerid][pKokain])
				{
					GiveMoney(playerid,PiacAdatok[playerid][0]*P_MAX_KOKAIN);
					PlayerInfo[playerid][pKokain] -=PiacAdatok[playerid][0];
					feltetelek = false;
					format(string,sizeof(string),"[PIAC]%s eladott %d kokaint %s Ft-ért",PlayerName(playerid),PiacAdatok[playerid][0], FormatInt(PiacAdatok[playerid][0]*P_MAX_KOKAIN));
				}
				case P_KI_HEROIN: if(PiacAdatok[playerid][0] <= PlayerInfo[playerid][pHeroin])
				{
					GiveMoney(playerid,PiacAdatok[playerid][0]*P_MAX_HEROIN);
					PlayerInfo[playerid][pHeroin] -=PiacAdatok[playerid][0];
					feltetelek = false;
					format(string,sizeof(string),"[PIAC]%s eladott %d Heroin %s Ft-ért",PlayerName(playerid),PiacAdatok[playerid][0], FormatInt(PiacAdatok[playerid][0]*P_MAX_HEROIN));
				}
				case P_KI_MARIHUANA: if(PiacAdatok[playerid][0] <= PlayerInfo[playerid][pMarihuana])
				{
					GiveMoney(playerid,PiacAdatok[playerid][0]*P_MAX_MARISKA);
					PlayerInfo[playerid][pMarihuana] -=PiacAdatok[playerid][0];
					feltetelek = false;
					format(string,sizeof(string),"[PIAC]%s eladott %d marihuana %s Ft-ért",PlayerName(playerid),PiacAdatok[playerid][0], FormatInt(PiacAdatok[playerid][0]*P_MAX_MARISKA));
				}
				case P_KI_MATERIAL: if(PiacAdatok[playerid][0] <= PlayerInfo[playerid][pMats])
				{
					GiveMoney(playerid,PiacAdatok[playerid][0]*P_MAX_MATI);
					PlayerInfo[playerid][pMats] -=PiacAdatok[playerid][0];
					feltetelek = false;
					format(string,sizeof(string),"[PIAC]%s eladott %d Materials %s Ft-ért",PlayerName(playerid),PiacAdatok[playerid][0], FormatInt(PiacAdatok[playerid][0]*P_MAX_MATI));
				}				
			}
			if(feltetelek)
			{
				ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "Piac", "Ennyi anyag nincs nálad!", "Kilép", "Vissza");
				return 1;
			}
		
			Log("Scripter",string);
			ShowPlayerDialog(playerid, DIALOG_PIAC, DIALOG_STYLE_MSGBOX, "Piac", "Eladva az anyag!", "Rendben","");
		
		
		}
		
	}
	else if(dialogid == DIALOG_PARANCSOK)
	{
		//new str[1024];
		switch(DialogIDk[playerid][0])
		{
			case 0: // fõkategóriák
				ShowPlayerDialog(playerid, DIALOG_PARANCSOK, DIALOG_STYLE_LIST, "Parancsok", "Általános parancsok\nJármû parancsok\nHáz parancsok", "Listáz", "Bezár");
			case 1: // alkategóriák
			{
				switch(DialogIDk[playerid][1])
				{
					case 0: // általános parancsok
						ShowPlayerDialog(playerid, DIALOG_PARANCSOK, DIALOG_STYLE_MSGBOX, "Parancsok", "Ajtó használat\nTelefonálás\n", "Listáz", "Vissza");
				}
			}
		}
	}
	else if(dialogid == DIALOG_NYELV_TANUL)
	{
		new str[800];
		format(str, 800, "Magyar");
		for(new n = 0; n < MAX_NYELV; n++)
		{
			if(PlayerInfo[playerid][pNyelv][n+1] >= 100)
				format(str, 800, "%s\n{33AA33}%s", str, Nyelvek[n][0]);
			else
			{
				if(PlayerInfo[playerid][pNyelv][n+1] > 0)
					format(str, 800, "%s\n{666666}%s (%d%%)", str, Nyelvek[n][0], PlayerInfo[playerid][pNyelv][n+1]);
				else
					format(str, 800, "%s\n{666666}%s", str, Nyelvek[n][0]);
			}
		}
		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Nyelvtanulás", str, "Megtanul", "Mégse");
	}
	else if(dialogid == DIALOG_NYELV_HASZNAL)
	{
		new str[800];
		format(str, 800, "Magyar");
		for(new n = 0; n < MAX_NYELV; n++)
		{
			if(PlayerInfo[playerid][pNyelv][n+1] >= 100)
				format(str, 800, "%s\n{33AA33}%s", str, Nyelvek[n][0]);
			else
			{
				if(PlayerInfo[playerid][pNyelv][n+1] > 0)
					format(str, 800, "%s\n{666666}%s (%d%%)", str, Nyelvek[n][0], PlayerInfo[playerid][pNyelv][n+1]);
				else
					format(str, 800, "%s\n{666666}%s", str, Nyelvek[n][0]);
			}
		}
		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_LIST, "Nyelv használata", str, "Használ", "Mégse");
	}
	
	return 1;
}

stock ShowTuningDialog(playerid, bool:cuccok = true, uzenet[] = "")
{
	if(cuccok)
	{
		new string[512];
		format(string, 512, "90k\tHidraulika\n\
		75k\tAlap nitropack [25mp]\n\
		150k\tGyors nitropack [18mp]\n\
		250k\tSzupergyors nitropack [10mp]\n\
		180k\tAlap mechanikus robot [0.75%% / mp]\n\
		300k\tFejlett mechanikus robot [2%% / mp]\n\
		150k\tOrvosi robot [5mp / segit és 1HP / mp]\n\
		150k\tMinimális EMP védelem [20%%]\n\
		400k\tKözepes EMP védelem [40%%]\n\
		1m\tFejlett EMP védelem [75%%]\n");
			
		ShowPlayerDialog(playerid, DIALOG_RACETUNING, DIALOG_STYLE_LIST, "Tuning", string, "Megveszem", "Mégse");
	}
	else
		ShowPlayerDialog(playerid, DIALOG_RACETUNING_2, DIALOG_STYLE_MSGBOX, "Tuning", uzenet, "Vásárlás", "Befejezés");
	return 1;
}

/*
stock Float:GetPlayerDistanceFromPoint(playerid,Float:x1,Float:y1,Float:z1) //By Gabriel "Larcius" Cordes
{
	if (IsPlayerConnected(playerid))
	{
		new Float:x2,Float:y2,Float:z2;
		GetPlayerPos(playerid,x2,y2,z2);
		return GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2);
	}
	return INF_FLOAT;
}*/
forward Csatorna();
fpublic Csatorna()
{
	CopMsg(COLOR_LIGHTGREEN, "A csatorna kapuja automatikusan becsukódott!");
	MoveDynamicObject(Katonacsatorna, -977.00042724609, -436.6813659668, 18.968152999878, 3);
	return 1;
}

stock HelyezesCheck()
{
	new helyezes, cpszama, Float:tav, Float:ptav, elso, darab;

	foreach(Jatekosok, p)
	{
		if(PlayerRaceInfo[p][xVersenyen] != NINCS)
			PlayerRaceInfo[p][xHelyezes] = 0;
	}

	for(new race = 0; race < RACESLOTOK; race++)
	{
		if(RaceInfo[race][rStatusz] != RACE_ELINDULT && RaceInfo[race][rStatusz] != RACE_INDUL) continue;
		
		helyezes = 1 + RaceInfo[race][rBeert];
		
		cel_check:
		
		tav = 9999.9;
		elso = NINCS;
		darab = 0;
		cpszama = RaceInfo[race][rCP];
		
		foreach(Jatekosok, p)
		{
			if(PlayerRaceInfo[p][xVersenyen] == race && PlayerRaceInfo[p][xHelyezes] == 0 && PlayerRaceInfo[p][xCP] == RACE_CP_CEL)
			{
				darab++;
				ptav = GetPlayerDistanceFromPoint(p, RaceCel[race][0], RaceCel[race][1], RaceCel[race][2]);
				if(ptav < tav)
				{
					tav = ptav;
					elso = p;
				}
			}
		}
		
		if(elso != NINCS)
		{
			PlayerRaceInfo[elso][xHelyezes] = helyezes;
			if(1 <= helyezes <= 5) RaceInfo[race][rHelyezes][helyezes] = elso;
			
			//HelyezesFrissites(elso);
			tav = 9999.9;
			elso = NINCS;
			helyezes++;
			if(darab > 1) goto cel_check;
		}
		
		if(cpszama != 0)
		{
			for(new cp = (cpszama - 1); cp >= 0; cp--)
			{
				tav = 9999.9;
				elso = NINCS;
				darab = 0;
				
				foreach(Jatekosok, p)
				{
					if(PlayerRaceInfo[p][xVersenyen] == race && PlayerRaceInfo[p][xHelyezes] == 0 && PlayerRaceInfo[p][xCP] == cp)
					{
						darab++;
						ptav = GetPlayerDistanceFromPoint(p, RaceCP[race][cp][0], RaceCP[race][cp][1], RaceCP[race][cp][2]);
						if(ptav < tav)
						{
							tav = ptav;
							elso = p;
						}
					}
				}
				
				if(elso != NINCS)
				{
					PlayerRaceInfo[elso][xHelyezes] = helyezes;
					if(1 <= helyezes <= 5) RaceInfo[race][rHelyezes][helyezes] = elso;
					//HelyezesFrissites(elso);
					helyezes++;
					
					if(darab > 1) cp++;
				}
			}
		}
		
		start_check:
		
		tav = 9999.9;
		elso = NINCS;
		darab = 0;
		
		foreach(Jatekosok, p)
		{
			if(PlayerRaceInfo[p][xVersenyen] == race && PlayerRaceInfo[p][xHelyezes] == 0 && PlayerRaceInfo[p][xCP] == RACE_CP_START)
			{
				darab++;
				ptav = GetPlayerDistanceFromPoint(p, RaceStart[race][0], RaceStart[race][1], RaceStart[race][2]);
				if(ptav < tav)
				{
					tav = ptav;
					elso = p;
				}
			}
		}
		
		if(elso != NINCS)
		{
			PlayerRaceInfo[elso][xHelyezes] = helyezes;
			if(1 <= helyezes <= 5) RaceInfo[race][rHelyezes][helyezes] = elso;
			//HelyezesFrissites(elso);
			helyezes++;
			if(darab > 1) goto start_check;
		}
	}
	
	//HelyezesFrissites();
}


stock bool:IngyenSzerel(playerid, kocsi)
{

	new melo = IsFrakcioKocsi(kocsi);
	if(melo == PlayerInfo[playerid][pMember] && FrakcioInfo[melo][fIngyenSzerel])
		return true;
	else
		return false;
}
stock bool:SzirenaPozicio(model, &Float:x, &Float:y, &Float:z)
{
	switch(model)
	{
		case 405: // Sentinel
		{
			x = 0.35;
			y = -0.1;
			z = 0.8;
		}
		case 411: // Infernus
		{
			x = -0.3;
			y = 0.1;
			z = 0.75;
		}
		case 451: // Turismo
		{
			x = -0.4;
			y = -0.5;
			z = 0.6;
		}
		case 470:// Patriot
		{
			x = 0;
			y = 0.8;
			z = 0.6;
		}
		case 522: // NRG
		{
			x = 0.0;
			y = 0.55;
			z = 0.6;
		}
		case 541: // Bullet
		{
			x = -0.3;
			y = -0.2;
			z = 0.69;
		}
		case 560: // Sultan
		{
			x = -0.5;
			y = 0.1;
			z = 0.87;
		}
		//===========Újjak==========
		case 500://Mesa
		{
			x = 0.5183;
			y = 0.9678;
			z = 0.2645;
		}
		case 475: // Sabre
		{
			x = -0.43;
			y = -0.10;
			z = 0.75;
		}
		case 402: // Buffalo
		{
			x = -0.4454;
			y = -0.5155;
			z = 0.7875;
		}
		case 507: // Elegant
		{
			x = -0.4194;
			y = -0.2193;
			z = 0.8475;
		}
		case 428: // Security
		{
			x = -1.0776;
			y = 0.7270;
			z = 1.3475;
		}
		case 562: // elegy
		{
			x = -0.2927;
			y = -0.3596;
			z = 0.8045;
		}
		case 521: // fcr900
		{
			x = 0.0174;
			y = 0.25735;
			z = 0.5845;
		}
		case 490: // FBI rancher
		{
			x = -0.4202;
			y = 0.4115;
			z = 1.1400;
		}
		case 482: // Burrito
		{
			x = -0.4023;
			y = 0.5558;
			z = 0.9600;
		}
		case 565: // Flash
		{
			x = -0.3336;
			y = -0.2874;
			z = 0.7241;
		}
		case 581: // BF400
		{
			x = 0.0285;
			y = 0.2172;
			z = 0.5600;
		}
		case 603: // phoenix
		{
			x = -0.4738;
			y = -0.3492;
			z = 0.7000;
		}
		case 426: // premier
		{
			x = -0.35;
			y = -0.23;
			z = 0.89;
		}
		case 579: // huntley
		{
			x = -0.50;
			y = -0.25;
			z = 1.29;
		}
		case 489:// racnher
		{
			x = -0.4649;
			y = -0.3445;
			z = 1.1278;
		}

		default: return false;
	}
	return true;
}
stock bool:NszirenaPozicio(model, &Float:x, &Float:y, &Float:z)//ujszirena
{
	switch(model)
	{
		case 405: // Sentinel
		{
			x = 0.0000;
			y = -0.0485;
			z = 0.7545;
		}
		case 507: // Elegant
		{
			x = 0.0000;
			y = -0.3200;
			z = 0.8145;
		}
		case 402: // Buffalo
		{
			x = 0.0000;
			y =  -0.4800;
			z = 0.7145;
		}
		case 560: // Sultan
		{
			x = 0.0000;
			y = -0.0800;
			z =  0.7945;
		}
		case 579: // Huntley
		{
			x = 0.0000;
			y = -0.4800;
			z = 1.2145;
		}
		case 411: // Infernus
		{
			x = 0.0000;
			y = -0.0200;
			z = 0.6945;
		}
		case 426: // premier
		{
			x = 0.0076;
			y= -0.1084;
			z = 0.8556;
		}	
		default: return false;
	}
	return true;
}
stock OktatoFeliratFrissites(k)
{

	if(IsFrakcioKocsi(k) == 16) 
	{
		if(IsValidDynamic3DTextLabel(OktatoFelirat[k]))
		{
			DestroyDynamic3DTextLabel(OktatoFelirat[k]);
			OktatoFelirat[k] = INVALID_3D_TEXT_ID;
			return 2;
		}
		else
		{
			OktatoFelirat[k] = CreateDynamic3DTextLabel("Tanuló vezetõ", 0xFF0000FF, 0.0, 0.0, 2.0, 100.0, INVALID_PLAYER_ID, k, 1);
			return 1;
		}
	}
	else return 0;

			
	
}
stock LeaderFrissites(frakcio = NINCS, bool: preQuery = true)
{
	new query[128];
	if(frakcio == NINCS)
	{
		for(new id = 1; id < MAX_FRAKCIO; id++)
			LeaderFrissites(id);
	}
	else if(frakcio > 0 && frakcio < MAX_FRAKCIO)
	{
		if( preQuery )
		{
			format(query, 128, "SELECT ID FROM %s WHERE Online='0' AND Leader='%d'", SQL_DB_Player, frakcio);
			doQuery( query, SQL_FRACTION_COUNT_LEADER, frakcio );
			return 1;
		}
		
		new rows, fields;
		sql_data(rows, fields);
		
		FrakcioInfo[frakcio][fLeaderekSzama] = rows;
			
		foreach(Jatekosok, p)
			if(PlayerInfo[p][pLeader] == frakcio)
				FrakcioInfo[frakcio][fLeaderekSzama]++;
	}
	
	return 1;
}

stock LetszamFrissites(frakcio = NINCS, bool: preQuery = true )
{
	new query[128];
	if(frakcio == NINCS)
	{
		for(new id = 1; id < MAX_FRAKCIO; id++)
			LetszamFrissites(id);
	}
	else if(frakcio > 0 && frakcio < MAX_FRAKCIO)
	{
		if( preQuery )
		{
			format(query, 128, "SELECT ID FROM %s WHERE Online='0' AND Member='%d'", SQL_DB_Player, frakcio);
			doQuery( query, SQL_FRACTION_COUNT_MEMBER, frakcio );
			return 1;
		}

		new rows, fields;
		sql_data(rows, fields);
		
		FrakcioInfo[frakcio][fTagokSzama] = rows;
			
		foreach(Jatekosok, p)
			if(LMT(p, frakcio))
				FrakcioInfo[frakcio][fTagokSzama]++;
	}
	
	return 1;
}

stock HarcKieses(playerid, oka[])
{
	SetPlayerVirtualWorld(playerid, 0, "harckieses");
	Harcol[playerid] = false;
	Warozott[playerid] = UnixTime+60;
	foreach(Jatekosok, x)
	{
			SetPlayerMarkerForPlayer(playerid, x, COLOR_INVISIBLE);
	}
	SetTimerEx("WarSegit", 5000, false, "i", playerid);
	Freeze(playerid, 5000);
	
	new uzenet[128], terulet = HarcolTerulet[playerid];
	format(uzenet, 128, "Kiesés: %s kiesett a harcból! Oka: %s", PlayerName(playerid), oka);
	
	
			
	//felsegítése
	//war segit
	foreach(Jatekosok, p)
	{
		if(p != playerid && Harcol[p])
			SendClientMessage(p, COLOR_GREY, uzenet);
			
		foreach(Jatekosok, x)
		{
			if(Harcol[p] || Harcol[x])
				SetPlayerMarkerForPlayer(p, x, COLOR_INVISIBLE);
								
			if(PlayerInfo[p][pMember] == PlayerInfo[x][pMember] && Harcol[p] && Harcol[x])
								SetPlayerMarkerForPlayer(p, x, COLOR_LIGHTGREEN);					
		}
		
	}

	new vedo, tamado;
	foreach(Jatekosok, p)
	{
		if(LMT(p, TeruletInfo[terulet][tHarcolok][0]) && Harcol[p])
			vedo++;
		else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]) && Harcol[p])
			tamado++;
	}
	
	/* ############################# */
	if(vedo > 0 && tamado > 0) return 1;
	/* ############################# */
	
	HarcVan = false;
	TeruletInfo[terulet][tHarc] = false;
	GangZoneStopFlashForAll(TeruletInfo[terulet][tZone]);
	
	if(vedo < 1)
	{
		foreach(Jatekosok, p)
		{
			if(LMT(p, TeruletInfo[terulet][tTulaj]))
				SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Elvesztettétek a területet... Terület: %s", TeruletInfo[terulet][tNev]);
			else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]))
				SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Sikeresen megszereztétek a területet! Terület: %s", TeruletInfo[terulet][tNev]);
		}
		TeruletInfo[terulet][tTulaj] = TeruletInfo[terulet][tHarcolok][1];
		FrakcioInfo[TeruletInfo[terulet][tHarcolok][1]][fTamadott]=UnixTime+3600;
		FrakcioInfo[TeruletInfo[terulet][tTulaj]][fTamadott]=0;
		TeruletUpdate(terulet, TERULET_Tulaj);
	}
	else if(tamado < 1)
	{
		foreach(Jatekosok, p)
		{
			if(LMT(p, TeruletInfo[terulet][tTulaj]))
				SendClientMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: A támadók elbuktak, így sikeresen megvédtétek a területet");
			else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]))
				SendClientMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: A támadás sikertelen volt, mindenki elbukott...");
		}
		FrakcioInfo[TeruletInfo[terulet][tHarcolok][1]][fTamadott]=UnixTime+3600;
		FrakcioInfo[TeruletInfo[terulet][tTulaj]][fTamadott]=0;
	}
	
	TeruletInfo[terulet][tFoglalva] = UnixTime;
	TeruletUpdate(terulet, TERULET_Foglalva);
	foreach(Jatekosok, p)
	{
		if(Harcol[p])
		{
			Msg(p,"5 sec és vissza rak rendes vw-be");
			foreach(Jatekosok, x)
			{
				SetPlayerMarkerForPlayer(p, x, COLOR_INVISIBLE);
			}
			
			SetTimerEx("Munkavege", 5000, false, "ddd", p, M_HARCVEGE,0);
		}
		
	}
	for(new x = 1; x < MAX_VEHICLES; x++)
	{
		if(GetVehicleVirtualWorld(x) ==123456789)
			SetVehicleVirtualWorld(x, 0);
	}
	
	
	
	TeruletFrissites();
	
	
	return 1;
}

fpublic WarSegit(playerid)
{
    if(Animban[playerid] == 1)
	{
		Animban[playerid] = 0;
		SetPlayerDrunkLevel(playerid, 0);
		ClearAnim(playerid);
		UnFreeze(playerid);
		new Float:elet;
		GetPlayerHealth(playerid, elet);
		if(elet < 15.0)
			SetHealth(playerid, 22.0);
		else if(elet < 95.0)
			SetHealth(playerid, elet+5.0);
		PlayerInfo[playerid][pLoves] = NINCS;
		PlayerInfo[playerid][pEllatva] = false;
		if(IsValidDynamic3DTextLabel(Elajult[playerid])) DestroyDynamic3DTextLabel(Elajult[playerid]), Elajult[playerid] = INVALID_3D_TEXT_ID;
	}
}

stock TeruletFrissites()
{
	foreach(Jatekosok, x)
	{
		if(!LegalisSzervezetTagja(x) && !Civil(x) || Admin(x, 1337))
			TeruletekMutatasa(x);
	}
}

stock TeruletekMutatasa(playerid)
{
	for(new x = 0; x < MAXTERULET; x++)
	{
		if(!TeruletInfo[x][Van]) continue;
		
		GangZoneShowForPlayer(playerid, TeruletInfo[x][tZone], SzervezetSzinek[TeruletInfo[x][tTulaj]-1]);
		
		if(TeruletInfo[x][tHarc])
			GangZoneFlashForPlayer(playerid, TeruletInfo[x][tZone], COLOR_RED);
		else
			GangZoneStopFlashForPlayer(playerid, TeruletInfo[x][tZone]);
	}
}

stock SetHealth(playerid, Float:mennyi)
{
	new Float:hp;
	if(mennyi < 0.0) hp = 0.0;
	else if(mennyi > MAXHP) hp = MAXHP;
	else hp = mennyi;
	
	if(mennyi)
	{
		JatekosElete[playerid] = 1;
		iPlayerHealth[playerid] = 1;
	}
	SetPlayerHealth(playerid, hp);
}

stock GiveHealth(playerid, Float:health)
{
	new Float:elet, Float:ujelet;
	GetPlayerHealth(playerid, elet);
	ujelet = elet + health;
	
	if(ujelet > MAXHP) ujelet = MAXHP;
	if(ujelet < 0.0) ujelet = 0.0;
	
	JatekosElete[playerid] = 1;
	iPlayerHealth[playerid] = 1;
	SetPlayerHealth(playerid, ujelet);
	return 1;
}

stock SetJarmu(kocsi, edit, ertek)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, boot, objective);
	switch(edit)
	{
		case KOCSI_MOTOR: SetVehicleParamsEx(kocsi, ertek, lights, alarm, doors, bonnet, boot, objective);
		case KOCSI_LAMPA: SetVehicleParamsEx(kocsi, engine, ertek, alarm, doors, bonnet, boot, objective);
		case KOCSI_RIASZTO: SetVehicleParamsEx(kocsi, engine, lights, ertek, doors, bonnet, boot, objective);
		case KOCSI_AJTO: SetVehicleParamsEx(kocsi, engine, lights, alarm, ertek, bonnet, boot, objective);
		case KOCSI_MOTORHAZTETO: SetVehicleParamsEx(kocsi, engine, lights, alarm, doors, ertek, boot, objective);
		case KOCSI_CSOMAGTARTO: SetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, ertek, objective);
	}
}

stock GetJarmu(kocsi, edit)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, boot, objective);
	switch(edit)
	{
		case KOCSI_MOTOR: return engine;
		case KOCSI_LAMPA: return lights;
		case KOCSI_RIASZTO: return alarm;
		case KOCSI_AJTO: return doors;
		case KOCSI_MOTORHAZTETO: return bonnet;
		case KOCSI_CSOMAGTARTO: return boot;
	}
	return 1;
}

stock valtostr(szam)
{
	new str[10];
	valstr(str, szam);
	return str;
}

stock NPC_Uzenet(bot, uzenet[])
{
	//printf("NPC_Uzenet(bot: %d, uzenet: %s)", bot, uzenet);
	
	if(egyezik(uzenet, "vege"))
		NPC_FelvetelVege(bot);
	else if(egyezik(uzenet, "kocsiba") && !Beszallt[bot])
	{
		NPC_FelvetelStart(bot);
		Beszallt[bot] = true;
	}
	else if(Beszallt[bot])
	{	
		
		
		new id,func[20];
		sscanf(uzenet,"p<:>s[20]d",func,id);
		
		if(egyezik(func, "NPCPARANCSMEGALLT"))
		{
			
			new nid = NPC_ID[bot];
			if(!NPC_Vezetok[nid][nMegallt])
			{
				if(nid > 5)
				{
					SendFormatMessage(bot, 1, "NPCPARANCS %d", NPC_AKCIO_FOLYTAT);
					SendFormatMessage(bot, 1, "NPCPARANCS %d", NPC_AKCIO_NEMMALLMEG);
				}
				else
				{
					if(IsPlayerNPC(id))
						SendFormatMessage(bot, 1, "NPCPARANCS %d", NPC_AKCIO_FOLYTAT);
					else if(id != INVALID_PLAYER_ID)
						NPCElott[id] = bot;
				}
			}	
		
		}
	}
}

stock bool:Parkolohely(playerid)
{
	if(PlayerInfo[playerid][pPhousekey] != NINCS && PlayerToPoint(40, playerid, HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancez]) ||
		PlayerInfo[playerid][pPhousekey2] != NINCS && PlayerToPoint(40, playerid, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hEntrancez]) ||
		PlayerInfo[playerid][pPhousekey3] != NINCS && PlayerToPoint(40, playerid, HouseInfo[PlayerInfo[playerid][pPhousekey3]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey3]][hEntrancez]) ||
		PlayerToPoint(23, playerid, 1081.134, -1758.159, 13.091) || // LS Parkoló
		PlayerToPoint(25, playerid, 1575.635, -1620.397, 13.252) || // LSPD
		PlayerToPoint(30, playerid, 1660.375, -1706.777, 15.316) || // LSPD Mögötti
		PlayerToPoint(25, playerid, 1942.759, -2134.976, 13.301) || // Reptér melletti
		PlayerToPoint(10, playerid, 996.216, -1341.293, 13.087) || // Hotdog - fagyis
		PlayerToPoint(50, playerid, 863.343, -1232.532, 14.570) || // Kamion HQ
		PlayerToPoint(50, playerid, 1049.001, -908.058, 42.407) || // Északi benzinkut
		PlayerToPoint(15, playerid, -1945.115, 579.526, 34.879) || // SFBank
		PlayerToPoint(75, playerid, -2271.098, 137.027, 34.869) || // SF Parkoló
		PlayerToPoint(75, playerid, 2083.1226,2403.8193,11.0675) || // Vh mély parkoló
		PlayerToPoint(30, playerid, -2649.790, -42.329, 4.042)) // SF Parkoló

	return true;
	
	for(new a = 0; a < MAX_PARKOLO; a++)
	{
		if(PlayerToPoint(PARKOLO[a][parkTAV], playerid, PARKOLO[a][parkPosX], PARKOLO[a][parkPosY], PARKOLO[a][parkPosZ]))
		return true;
	}		

	return false;
}
stock Akta(playerid, targetid)
{
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "Férfi"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "Nõ"; }
		new otext[20];
		if(PlayerInfo[targetid][pOrigin] == 1) { otext = "USA"; }
		else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "Európa"; }
		else if(PlayerInfo[targetid][pOrigin] == 3) { otext = "Ázsia"; }
		new ttext[32];


		if(PlayerInfo[targetid][pMember] > 0)
		{
			new szam = PlayerInfo[targetid][pMember] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else if(PlayerInfo[targetid][pLeader] > 0)
		{
			new szam = PlayerInfo[targetid][pLeader] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else
			ttext = "Civil";
		new jtext[20], jtext2[20];

		jtext = MunkaNevek(playerid, 1);
		jtext2  = MunkaNevek(playerid, 2);
       


		new rtext[32];
		if(PlayerInfo[targetid][pMember] > 0 || PlayerInfo[targetid][pLeader] > 0)//PD Ranks
		{
			new rang = PlayerInfo[targetid][pRank], munka;
			if(PlayerInfo[targetid][pLeader] > 0 && PlayerInfo[targetid][pLeader] < MAX_FRAKCIO)
				munka = PlayerInfo[targetid][pLeader] - 1;
			else
				munka = PlayerInfo[targetid][pMember] - 1;

			if(rang <= 0) rtext = Rangok[munka][0];
			else if(rang >= 1 && rang <= 12) rtext = Rangok[munka][rang];
			else rtext = Rangok[munka][12];
		}
		else
		{
		    rtext = "-";
		}


		new married[20];
		if(PlayerInfo[targetid][pMarriedTo] != 0)
			strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		else
			married = "Nincs";
		new age = PlayerInfo[targetid][pAge];
		new arrests = PlayerInfo[targetid][pArrested];
		new pnumber = PlayerInfo[targetid][pPnumber];
		new housekey = PlayerInfo[targetid][pPhousekey];
		new housekey2 = PlayerInfo[targetid][pPhousekey2];
		new housekey3 = PlayerInfo[targetid][pPhousekey3];
		new szolgiruha = PlayerInfo[targetid][pChar];
		new ruhaja = PlayerInfo[targetid][pModel];



		new vkocsi[40], vkocsi2[40], vkocsi3[40], bkocsi[40], id;

		if(PlayerInfo[targetid][pPcarkey] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey]][cId];
			format(vkocsi, sizeof(vkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi = "Nincs";
		
		if(PlayerInfo[targetid][pPcarkey2] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey2]][cId];
			format(vkocsi2, sizeof(vkocsi2), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi2 = "Nincs";
			
        if(PlayerInfo[targetid][pPcarkey3] != NINCS)// bõvítve mert kimaradt
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey3]][cId];
			format(vkocsi3, sizeof(vkocsi3), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi3 = "Nincs";

		if(HireCar[targetid] != NINCS)
		{
			id = HireCar[targetid];
			format(bkocsi, sizeof(bkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			bkocsi = "Nincs";
	
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "====%s Aktája====", PlayerName(targetid));
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Származás: %s | Nem: %s | Életkor: %d", otext, atext, age);
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Városban eltöltött évek: %d | Letartoztatások Száma: %d", Szint(targetid), arrests);
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Telefonszám: %d | Házszám: %d/%d/%d | Autó: %s/%s/%s", pnumber, housekey, housekey2,housekey3, vkocsi, vkocsi2, vkocsi3);//bõvítve
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Házastárs: %s | Bankszámlaszám: %d", married, PlayerInfo[targetid][pBankSzamlaSzam]);
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Frakció: %s | Rang: %s (%d)", ttext, rtext, PlayerInfo[targetid][pRank]);
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Ruhamodell: %d | Szolgálati: %d", ruhaja, szolgiruha);
		SendFormatMessage(playerid, COLOR_YELLOW, "|-Munka: %s | Másodmunka: %s", jtext, jtext2);
}
stock NPCArveresUpdate()
{
	new szoveg[256];
	format(szoveg, 256, "==[ Árverés ]==");
	if(!Aukcio[aElinditva] && Aukcio[aVarakozas] == 0)
		format(szoveg, 256, "%s\nNincs elindítva árverés", szoveg);
	else if(!Aukcio[aElinditva] && Aukcio[aVarakozas] != 0)
	{
		if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ)
			format(szoveg, 256, "%s\nAukció indul %dmp múlva egy házra\nHely: %s", szoveg, Aukcio[aIdo], Haztipus(HouseInfo[Aukcio[aID]][hTipus]));
		else
			format(szoveg, 256, "%s\nAukció indul %dmp múlva egy kocsira\nModel: %s", szoveg, Aukcio[aIdo], GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true));
	}
	else
	{
		if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ)
			format(szoveg, 256, "%s\nJelenleg árverés van egy házra\nHely: %s", szoveg, Haztipus(HouseInfo[Aukcio[aID]][hTipus]));
		else
			format(szoveg, 256, "%s\nJelenleg árverés van egy kocsira\nModel: %s", szoveg, GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true));
		
		if(Aukcio[aLicitalo] == NINCS)
			format(szoveg, 256, "%s\nMég nem licitált senki\nLicitálás: /licit", szoveg);
		else if(Aukcio[aLicitalo] == INVALID_PLAYER_ID)
			format(szoveg, 256, "%s\nA licitáló kilépett: %s", szoveg, Aukcio[aLicitaloVolt]);
		else 
			format(szoveg, 256, "%s\nUtolsó licitáló: %s, licit: %sFt\nLicitálás: /licit", szoveg, PlayerName(Aukcio[aLicitalo]), FormatNumber( Aukcio[aLicit], 0, ',' ));
	}
	UpdateDynamic3DTextLabelText(ArveresNPCText, COLOR_LIGHTBLUE, szoveg);
}

/*stock bool:VarosbanVan(playerid)
{
	//if(IsPlayerInDynamicArea(playerid, Varosok[vLS]) || IsPlayerInDynamicArea(playerid, Varosok[vSF]) || IsPlayerInDynamicArea(playerid, Varosok[vLV]))
	//	return (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0);
	//return false;
	
	new Float:pos[3];
	GetPlayerPos(playerid, ArrExt(pos));
	return (
			(Varosban(LS, pos[0], pos[1]) || Varosban(SF, pos[0], pos[1]) || Varosban(LV, pos[0], pos[1]))
			&& GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0
	);
}*/

stock VarosID(playerid)
{
	if(GetPlayerVirtualWorld(playerid)) return CITY_OUT;
	
	if(Varosban(LS, PlayerPos[playerid][0], PlayerPos[playerid][1])) return CITY_LOS_SANTOS;
	if(Varosban(SF, PlayerPos[playerid][0], PlayerPos[playerid][1])) return CITY_SAN_FIERRO;
	if(Varosban(LV, PlayerPos[playerid][0], PlayerPos[playerid][1])) return CITY_LAS_VENTURAS;
	
	return CITY_OUT;
}

stock OnModBetoltve()
{
	SetWeather(0);
	
	CityArea[vLS][cPosX] = Float:{   93.148,  2889.188};
	CityArea[vLS][cPosY] = Float:{-2712.683,  -553.586};
	CityArea[vSF][cPosX] = Float:{-2948.473, -1202.150};
	CityArea[vSF][cPosY] = Float:{ -610.450,  1508.301};
	CityArea[vLV][cPosX] = Float:{  774.589,  2798.610};
	CityArea[vLV][cPosY] = Float:{  645.575,  2877.821};
	
	Varosok[vLS] = CreateDynamicRectangle(CityArea[vLS][cPosX][0], CityArea[vLS][cPosY][0], CityArea[vLS][cPosX][1], CityArea[vLS][cPosY][1]);
	Varosok[vSF] = CreateDynamicRectangle(CityArea[vSF][cPosX][0], CityArea[vSF][cPosY][0], CityArea[vSF][cPosX][1], CityArea[vSF][cPosY][1]);
	Varosok[vLV] = CreateDynamicRectangle(CityArea[vLV][cPosX][0], CityArea[vLV][cPosY][0], CityArea[vLV][cPosX][1], CityArea[vLV][cPosY][1]);
	
	//Kórház - Bank - Étterem
	CreateDynamicMapIcon(1480.589, -1769.973, 18.502, 56, 0, NINCS, NINCS, NINCS, 300.0); // LS Városháza
	CreateDynamicMapIcon(1185.271, -1324.711, 13.572, 22, 0, NINCS, NINCS, NINCS, 300.0); // LS Kórház
	CreateDynamicMapIcon(1465.141, -1011.278, 26.843, 52, 0, NINCS, NINCS, NINCS, 300.0); // LS Bank
	CreateDynamicMapIcon(-1942.265, 557.346, 35.171, 52, 0, NINCS, NINCS, NINCS, 300.0); // SF Bank
	CreateDynamicMapIcon(1498.374, -1583.298, 13.546, 50, 0, NINCS, NINCS, NINCS, 300.0); // LS Városházával szembeni étterem
	/* ############################################################################################################ */
	
	//Benzinkutak
	CreateDynamicMapIcon(1944.647, -1773.781, 13.097, 55, 0, NINCS, NINCS, NINCS, 300.0); // LS Déli
	CreateDynamicMapIcon(1004.905, -934.643, 48.962, 55, 0, NINCS, NINCS, NINCS, 300.0); // LS Északi
	CreateDynamicMapIcon(-89.709, -1164.326, 8.549, 55, 0, NINCS, NINCS, NINCS, 300.0); // LS Határ után
	
	CreateDynamicMapIcon(-1679.002, 417.460, 13.011, 55, 0, NINCS, NINCS, NINCS, 300.0); // SFPD melletti
	CreateDynamicMapIcon(-2023.452, 156.280, 28.835, 55, 0, NINCS, NINCS, NINCS, 300.0); // Vasúti sin mellett - Oktató HQnál
	CreateDynamicMapIcon(-2411.013, 978.926, 45.460, 55, 0, NINCS, NINCS, NINCS, 300.0); // SF Északon
	
	CreateDynamicMapIcon(655.949, -564.540, 16.335, 55, 0, NINCS, NINCS, NINCS, 300.0); // Kis településen
	/* ############################################################################################################ */
	
	// CreateDynamicMapIcon(asdasdasdasd, 55, 0, NINCS, NINCS, NINCS, 300.0); // 
}

stock OnPlayerCityEnter(playerid)
{
	PlayerPlace[playerid][pCity] = VarosID(playerid);
}
stock ForgalommalSzemben(playerid, areaid)
{
	if(PlayerInfo[playerid][pForgalomTime] > UnixTime) return 1;
	
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !AdminDuty[playerid] && !OnDuty[playerid] && !ScripterDuty[playerid])
	{
		new Float: angle, Float:x, Float:y, Float:z;
		new veh= GetPlayerVehicleID(playerid);
		if(!IsARepulo(veh))
		{
			GetVehicleZAngle(veh, angle);
			
			GetPlayerPos(playerid, x,y,z);
			for(new a=0; a < MAX_AREA_HELY; a++)
			{
				if(AreaForgalom[a][Aid] == areaid && AreaForgalom[a][Aangle]-10 < angle < AreaForgalom[a][Aangle]+10 && AreaForgalom[a][AVan] && AreaForgalom[a][Az]-1 < z < AreaForgalom[a][Az]+1)
				{
					if(Admin(playerid,1337))
					{
						ForaglomFigyelmezteto[playerid]++,SendFormatMessage(playerid, COLOR_YELLOW,"FORGALOMMAL SZEMBEN: id: %d, Angle %.3f, Méret %d Figyelmeztetésed: %d",a,AreaForgalom[a][Aangle],AreaForgalom[a][As],ForaglomFigyelmezteto[playerid]);
						PlayerInfo[playerid][pForgalomTime] =UnixTime+2;
						return 1;
					}
					else
					{
						ForaglomFigyelmezteto[playerid]++,SendFormatMessage(playerid,COLOR_LIGHTRED,"RP szerveren nem megyünk forgalommal szembe! Eddigi %d alkalom. Ha hibás a jelzés nyomj f8 és rakd fel bugokba id: %d",ForaglomFigyelmezteto[playerid],a);
						
						PlayerInfo[playerid][pForgalomTime]=UnixTime+2;
						return 1;
					}
				
				}
			}
		}
	}

	return 1;
}

fpublic OnPlayerEnterDynamicArea(playerid, areaid)
{
	ForgalommalSzemben(playerid, areaid);
	
	if(areaid == LaserArea && Tevezik[playerid] == NINCS && !IsACop(playerid) && !LezerDeaktivalva)
	{
		new Float:Pos[3];
		GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
		if(Pos[2] > 14.2) return 1;
		SendClientMessage(playerid, COLOR_RED, "Megszólalt a riasztó! Menekülj minél hamarabb!");
		CopMsg(COLOR_ALLDEPT, "Alcatraz: Figyelem! Valaki megközelítette a lézerhálós biztonsági rendszert!");
		CopMsg(COLOR_ALLDEPT, "Alcatraz: Lehetséges, hogy valaki szökni próbál! Azonnal nézzenek utána!");
	}
	
	return 1;
}
fpublic OnPlayerLeaveDynamicArea(playerid, areaid)
{
	ForgalommalSzemben(playerid, areaid);
	
	if(Harcol[playerid] && areaid == TeruletInfo[ HarcolTerulet[playerid] ][tArea])
	{
		HarcKieses(playerid, "Elhagyta a zónát");
		SendClientMessage(playerid, COLOR_LIGHTRED, "Figyelmeztetés: Elhagytad a zónát, így már nem veszel részt a harcban!");
	}
	
	return 1;
}

/*public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(checkpointid == PlayerInfo[playerid][pFavagoMunkaCP])
	{
		if(!IsPlayerInAnyVehicle(playerid))
			return Msg(playerid, "Hova lett a kocsi?!");

		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 578)
			return Msg(playerid, "Ezzel a jármûvel hogy akartál te fát hozni ide?!");

		if(VehicleAdatok[GetPlayerVehicleID(playerid)][_TREE_NUM_] < 5)
			return Msg(playerid, "Szerintem szállítás közben leesett pár fa!");

		SetTimerEx("FaLepakolasa", 5000, false, "ii", playerid, GetPlayerVehicleID(playerid));

		SendClientMessage(playerid, COLOR_LIGHTRED, "Nyugi haver, elkezdtük neked lepakolni a fát! Csak lazíts!");
		TogglePlayerControllable(playerid, false);

		DestroyDynamicCP(PlayerInfo[playerid][pFavagoMunkaCP]);
	}
	DestroyDynamicCP(checkpointid);
	return true;
}*/

forward FaLepakolasa(playerid, vehicleid);
fpublic FaLepakolasa(playerid, vehicleid)
{
	if(VehicleAdatok[vehicleid][_TREE_NUM_] > 0)
	{
		new formazzunk[64];
		SetTimerEx("FaLepakolasa", 5000, false, "ii", playerid, vehicleid);

		format(formazzunk, sizeof(formazzunk), "Fa sikeresen lepakolva! Hátra van még: %d db rönk!", VehicleAdatok[vehicleid][_TREE_NUM_]-1);
		SendClientMessage(playerid, -1, formazzunk);

		switch(VehicleAdatok[vehicleid][_TREE_NUM_])
		{
			case 1:
			{
				if(IsValidDynamicObject(VehicleAdatok[vehicleid][_OBJECT_TREE_1_]))DestroyDynamicObject(VehicleAdatok[vehicleid][_OBJECT_TREE_1_]),VehicleAdatok[vehicleid][_OBJECT_TREE_1_]=INVALID_OBJECT_ID;
				
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Az összes fa sikeresen lepakolva! 125 000Ft hozzáadva a fizetési csekkedhez!");
				TogglePlayerControllable(playerid, true);
			}
			case 2:
				if(IsValidDynamicObject(VehicleAdatok[vehicleid][_OBJECT_TREE_2_]))DestroyDynamicObject(VehicleAdatok[vehicleid][_OBJECT_TREE_2_]),VehicleAdatok[vehicleid][_OBJECT_TREE_2_]=INVALID_OBJECT_ID;
			case 3:
				if(IsValidDynamicObject(VehicleAdatok[vehicleid][_OBJECT_TREE_3_]))DestroyDynamicObject(VehicleAdatok[vehicleid][_OBJECT_TREE_3_]),VehicleAdatok[vehicleid][_OBJECT_TREE_3_]=INVALID_OBJECT_ID;
			case 4:
				if(IsValidDynamicObject(VehicleAdatok[vehicleid][_OBJECT_TREE_4_]))DestroyDynamicObject(VehicleAdatok[vehicleid][_OBJECT_TREE_4_]),VehicleAdatok[vehicleid][_OBJECT_TREE_4_]=INVALID_OBJECT_ID;
			case 5:
				if(IsValidDynamicObject(VehicleAdatok[vehicleid][_OBJECT_TREE_5_]))DestroyDynamicObject(VehicleAdatok[vehicleid][_OBJECT_TREE_5_]),VehicleAdatok[vehicleid][_OBJECT_TREE_5_]=INVALID_OBJECT_ID;
		}
        PlayerInfo[playerid][pPayCheck] += 25000;
		VehicleAdatok[vehicleid][_TREE_NUM_]--;
	}
	return true;
}

stock Haztipus(tipus)
{
	new szoveg[32];
	switch(tipus)
	{
		case 1: szoveg = "Los Santos";
		case 2: szoveg = "San Fierro";
		case 3: szoveg = "Gazdagnegyed";
		case 4: szoveg = "Falu";
		case 5: szoveg = "Tanya";
		case 6: szoveg = "Sziget";
		default: szoveg = "Ismeretlen";
	}
	return szoveg;
}
stock bool:InaktivCucc(id, tipus)
{
	if(tipus == INAKTIV_HAZ)
		return (HouseInfo[id][hDate] <= (UnixTime - EladasIdo[0] * 60*60*24));
	else if(tipus == INAKTIV_KOCSI)
		return (CarInfo[id][cDate] <= (UnixTime - EladasIdo[1] * 60*60*24) && CarInfo[id][cKereskedo]!= 234);

	else if(tipus == INAKTIV_GARAZS)
		return (GarazsInfo[id][hDate] <= (UnixTime - EladasIdo[2] * 60*60*24));
		
		
	return false;
}

#if defined FS_ENABLED_JUNKBUSTER
fpublic OnJunkBusterBan(playerid, reason[])
{
	#if !defined TEMP_NO_IP_BAN
		SendFormatMessageToAll(COLOR_LIGHTRED, "ClassRPG: %s ki lett bannolva az AntiCheat által | Oka: %s", PlayerName(playerid), reason);
		return 1;
	#else
		SendFormatMessageToAll(COLOR_LIGHTRED, "ClassRPG: %s ki lett bannolva az AntiCheat által | Oka: %s", PlayerName(playerid), reason);
		CIDBan(playerid, 0, NINCS, reason);
		
		return 0;
	#endif
}


fpublic OnJunkBusterKick(playerid,reason[])
{
	SendFormatMessageToAll(COLOR_LIGHTRED, "ClassRPG: %s ki lett rúgva az AntiCheat által | Oka: %s", PlayerName(playerid), reason);
	return 1;
}

fpublic OnJunkBusterReport(playerid,reason[],details[])
{
	ABroadCastFormat(COLOR_LIGHTRED, 1, "[AntiCheat] Játékos: [%d]%s - Ok: %s - Adat: %s >>", playerid, PlayerName(playerid), reason, details);
	return 1;
}
#endif

fpublic OnPlayerPause(playerid, paused)
{
	if(paused)
	{
		if(GetPlayerWeapon(playerid) == 43 || GetPlayerWeapon(playerid) == 44 || GetPlayerWeapon(playerid) == 45) return 1;
		if(RendesJatekos(playerid) && !AFK[playerid] && !Szunet[playerid] && PlayerInfo[playerid][pAdmin] == 0)
		{
			Szunet[playerid] = true;
			SzunetIdo[playerid] = 0;
			//Cselekves(playerid, "szünetelteti a játékot", 0, true);
		}
	}
	else
	{
		SzunetIdo[playerid] = 0;
		if(Admin(playerid,1)) HidePMAsztal[playerid] = false;
		if(RendesJatekos(playerid) && Szunet[playerid] && PlayerInfo[playerid][pAdmin] == 0 && !IsScripter(playerid))
		{
			Szunet[playerid] = false;
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			if(Tevezik[playerid] == NINCS)
				Cselekves(playerid, "már nem szünetelteti a játékot", 0, true);
		}
	}
	return 1;
}

/*stock CheckUtolso()
{
	new p;
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(RendesJatekos(x))
			p = x;
	}
	//Utolso_Player = p;
}*/

/*public SebessegOldKorlatozo()
{
	new Float:seb, Float:oszto, Float:x, Float:y, Float:z, carid;
	for(new playerid = 0; playerid <= Utolso_Player; playerid++)
	{
		if(RendesJatekos(playerid) && SebessegKorlat[playerid] != 0 && KocsibanVan[playerid])
		{
			carid = GetPlayerVehicleID(playerid);
			GetVehicleVelocity(carid, x, y, z);
			seb = floatsqroot(x*x+y*y+z*z) *100.0*1.6 + 3.0;
			if(seb > SebessegKorlat[playerid])// && (x+y) > z)
			{
				oszto = seb / float(SebessegKorlat[playerid]);
				x /= oszto;
				y /= oszto;
				z /= oszto;
				SetVehicleVelocity(carid, x, y, z);
			}
		}
	}
}*/

/*public SebessegKorlatozo()
{
	new Float:seb, Float:sk, carid,
	Float:x, Float:y, Float:z,
	Float:Vx, Float:Vy, Float:Vz
	;
	
	for(new playerid = 0; playerid <= Utolso_Player; playerid++)
	{
		if(RendesJatekos(playerid) && SebessegKorlat[playerid] != 0 && KocsibanVan[playerid])
		{
			carid = GetPlayerVehicleID(playerid);
			GetVehiclePos(carid, x, y, z);
			GetVehicleVelocity(carid, Vx, Vy, Vz);
			
			sk = float(SebessegKorlat[playerid]) / 100.0 / 1.6;
			
			if(!IsPlayerInRangeOfPoint(playerid, sk + 0.05, x + Vx, y + Vy, z + Vz))
			{
				seb = floatsqroot(Vx*Vx+Vy*Vy+Vz*Vz);
				
				Vx = (Vx / seb) * sk;
				Vy = (Vy / seb) * sk;
				Vz = (Vz / seb) * sk;
				
				SetVehicleVelocity(carid, Vx, Vy, Vz);
			}
		}
	}
	return 1;
}*/

stock GetVehicleSpeed(vehicleid)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return floatround( floatsqroot(x*x + y*y + z*z) * 160.0 );
}

stock GetSpeedFromVelocity(Float:x, Float:y, Float:z)
{
	return floatround( floatsqroot(x*x + y*y + z*z) * 160.0 );
}

stock SebessegKorlatozoPlayer(playerid)
{
	new diff = tickcount() - SebessegKorlatTick[playerid];
	diff = abs(diff);
	if(diff < 100)
		return 0;
	
	SebessegKorlatTick[playerid] = tickcount();
	
	new veh = GetPlayerVehicleID(playerid);
	new Float:vx, Float:vy, Float:vz;
	GetVehicleVelocity(veh, vx, vy, vz);
	
	if(-0.2 < vz < 0.2)
	{
		new spd = GetSpeedFromVelocity(vx, vy, vz);
		if(spd > SebessegKorlat[playerid])
		{
			new Float:dec = (float(SebessegKorlat[playerid]) - 3.0) / float(spd);
			vx *= dec;
			vy *= dec;
			vz *= dec;
			SetVehicleVelocity(veh, vx, vy, vz);
		}
	}
	
	return 1;
}

stock NemMozoghat(playerid)
{
	if( Animban[playerid] || PlayerCuffed[playerid] || Leutve[playerid] || PlayerTied[playerid] )
		return 1;
	else
		return 0;
}

stock AnimbaRak(playerid, bool:uzenet = true)
{
	if(Animban[playerid] || Paintballozik[playerid] || ScripterDuty[playerid]==1 || AdminDuty[playerid]==1 || Kikepzoben[playerid] || Tevezik[playerid] != NINCS) return 1;
	if(SpawnVedelem[playerid] != 0) return 1;
	
	RoncsDerbiKieses(playerid);
	
	Animban[playerid] = 1;
	
	if(uzenet)
		Msg(playerid, "Súlyosan megsérültél");
		
	Freeze(playerid, 5000);
	ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
	SetPlayerDrunkLevel(playerid, 50000);
	
	if(HarcVan && Harcol[playerid] && TeruletInfo[ HarcolTerulet[playerid] ][tHarc])
		HarcKieses(playerid, "Animba esett");
	
	if(PlayerRaceInfo[playerid][xVersenyen] != NINCS && KocsibanVan[playerid] && PlayerRaceTuning[playerid][tOrvos])
	{
		PlayerRaceTuning[playerid][tSegitIdo] = 5;
		Msg(playerid, "Robot: Ellátás folyamatban", false);
	}
	return 1;
}

stock Feketeseg(playerid, bool:sotet = false)
{
	if(sotet) TextDrawShowForPlayer(playerid, FeketesegTD);
//	if(sotet) TextDrawHideForPlayer(playerid, FeketesegTD);
	else TextDrawHideForPlayer(playerid, FeketesegTD);
	return 1;
}
/*public OnNPCGetDamage(npcid,playerid,Float:health_loss,bodypart)
{
	if(!IsPlayerNPC(playerid))
	{
		if(npcid != ArveresNPC)
			SeeKick(playerid, "Ne nyírd már ki a szerencsétlen buszsofõrt aki egész nap dolgozik...");
	}
	printf("OnNPCGetDamage(%d,%d,%f,%d)",npcid,playerid,health_loss,bodypart);
	return 0;
}*/

stock bool:JegyEllenor(playerid)
{
	if(!LMT(playerid, FRAKCIO_ONKORMANYZAT) || PlayerInfo[playerid][pRank] != 0)
		return false;
	return true;
}

stock MegalloNev(nid, tipus = NPC_MEGALLO_JELENLEGI)
{
	new id = Megallo(nid, tipus);
	return NPC_MegallokNeve[nid][id];
}

stock Megallo(nid, tipus = NPC_MEGALLO_JELENLEGI)
{
	new id;
	switch(tipus)
	{
		case NPC_MEGALLO_ELOZO:
		{
			if(NPC_Vezetok[nid][nHolTart] == 1)
				id = NPC_Vezetok[nid][nMegallokSzama] - 1;
			else
				id = NPC_Vezetok[nid][nHolTart] - 2;
		}
		case NPC_MEGALLO_JELENLEGI:
			id = NPC_Vezetok[nid][nHolTart] - 1;
		case NPC_MEGALLO_KOVETKEZO:
		{
			if(NPC_Vezetok[nid][nHolTart] == NPC_Vezetok[nid][nMegallokSzama])
				id = 0;
			else
				id = NPC_Vezetok[nid][nHolTart];
		}
	}
	return id;
}

stock NPCBuszban(playerid, sofor_npc = NINCS)
{
	if(sofor_npc != NINCS)
	{
		if(GetPlayerVirtualWorld(playerid) == (50000 + sofor_npc))
			return 1;
		return 0;
	}
	else
	{
		new vw = GetPlayerVirtualWorld(playerid);
		if(vw >= 50000 && vw <= (50000 + MAX_PLAYERS))
		{
			vw -= 50000;
			if(IsPlayerConnected(vw) && IsPlayerNPC(vw))
				return vw;
		}
		return NINCS;
	}
}

stock UtolsoSzabadSlot()
{
	new s = NINCS;
	for(new x = (GetMaxPlayers() - 1); x > 0; x--)
	{
		if(!IsPlayerConnected(x))
		{
			s = x;
			break;
		}
	}
	return s;
}

/*public NPC_Checker()
{
	for(new n = 0; n < MAX_PLAYERS; n++)
	{
		if(!IsPlayerConnected(n) || !IsPlayerNPC(n)) continue;
		if(!IsValidNPC(n)) continue;
		
		new Float:x, Float:y, Float:z, bool:van, nid;
		nid = NPC_ID[n];
		
		for(new p = 0; p < MAX_PLAYERS; p++)
		{
			if(!IsPlayerConnected(p) || !Logged(p) || IsPlayerNPC(p)) continue;
			GetXYInFrontOfPlayer(p, x, y, 5);
			if(PlayerToPoint(3, nid, x, y, z))
			{
				van = true;
				break;
			}
		}
		if(van)
		{
			NPC_Vezetok[nid][nMegallitva] = true;
			PauseRecordingPlayback(n);
		}
		else if(NPC_Vezetok[nid][nMegallitva])
		{
			ContinueRecordingPlayback(n);
			NPC_Vezetok[nid][nMegallitva] = false;
		}
	}
	return 1;
}*/

stock Szamlalas(nid, bool:start)
{
	if(start)
	{
		NPC_Vezetok[nid][nSzamolasIdo] = 0;
		NPC_Vezetok[nid][nSzamolasTimer] = SetTimerEx("SzamlalasTimer", 1000, true, "d", nid);
		new jelenlegi, kovetkezo;
		jelenlegi = NPC_Vezetok[nid][nHolTart] - 1;
		if(NPC_Vezetok[nid][nHolTart] == NPC_Vezetok[nid][nMegallokSzama])
			kovetkezo = 0;
		else
			kovetkezo = jelenlegi+1;
		SendFormatMessage(0, COLOR_WHITE, "Számolás! Járat: %s / Út: %s > %s", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][jelenlegi], NPC_MegallokNeve[nid][kovetkezo]);
		//printf("Számolás! Járat: %s / Út: %s > %s", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][jelenlegi], NPC_MegallokNeve[nid][kovetkezo]);
	}
	else
	{
		new jelenlegi, elozo;
		jelenlegi = NPC_Vezetok[nid][nHolTart] - 1;
		if(NPC_Vezetok[nid][nHolTart] == 1)
			elozo = NPC_Vezetok[nid][nMegallokSzama] - 1;
		else
			elozo = jelenlegi - 1;
		SendFormatMessage(0, COLOR_WHITE, "Kész! Járat: %s / Út: %s > %s | Idõ: %dmp", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][elozo], NPC_MegallokNeve[nid][jelenlegi], NPC_Vezetok[nid][nSzamolasIdo]);
		//printf("Kész! Járat: %s / Út: %s > %s | Idõ: %dmp", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][elozo], NPC_MegallokNeve[nid][jelenlegi], NPC_Vezetok[nid][nSzamolasIdo]);
		NPC_Vezetok[nid][nSzamolasIdo] = 0;
		KillTimer(NPC_Vezetok[nid][nSzamolasTimer]);
	}
	return 1;
}

fpublic NPCTimer()
{

	new szoveg[128], bool:talalt;
	
	for(new nid=0; nid < MAX_NPC_SOFOR;nid++)
	{
		new npc=NPC_Vezetok[nid][nID];
		
		
		if(nid != NINCS && NPC_Vezetok[nid][nConnected] && !NPC_Vezetok[nid][nMegallt])
		{
			talalt = false;

			for(new p = 0; p < MAX_PLAYERS; p++)
			{
				if(!RendesJatekos(p) || LezartUtat[p] == 0) continue;
				if(PlayerToPoint(30.0, npc, LezartUtX[p], LezartUtY[p], LezartUtZ[p]))
				{
					talalt = true;
					break;
				}
			}
			if(talalt && !NPC_Vezetok[nid][nMegallitva])
			{
				//PauseRecordingPlayback(npc);
				//CallRemoteFunction(NPC_Vezetok[nid][nNeve], "ds", NPC_AKCIO_SZUNET, "asd");
				SendFormatMessage(npc, 1, "NPCPARANCS %d", NPC_AKCIO_SZUNET);
				NPC_Vezetok[nid][nMegallitva] = true;
			}
			else if(!talalt && NPC_Vezetok[nid][nMegallitva])
			{
				//ContinueRecordingPlayback(npc);
				//CallRemoteFunction(NPC_Vezetok[nid][nNeve], "ds", NPC_AKCIO_FOLYTAT, "asd");
				SendFormatMessage(npc, 1, "NPCPARANCS %d", NPC_AKCIO_FOLYTAT);
				NPC_Vezetok[nid][nMegallitva] = false;
			}
			
			if(!NPC_Vezetok[nid][nMegallitva] && NPC_Vezetok[nid][nMenetIdo] != NINCS)
			{
				NPC_Vezetok[nid][nMenetIdo]--;
				
				if(NPC_Vezetok[nid][nMenetIdo] % 15 == 0)
				{
					if(NPC_Vezetok[nid][nMenetIdo] == 0)
						format(szoveg, 128, "Busz: Hamarosan megérkezünk: %s", MegalloNev(nid, NPC_MEGALLO_KOVETKEZO));
					else
						format(szoveg, 128, "Busz: Körülbelül %d másodperc múlva megérkezünk: %s", NPC_Vezetok[nid][nMenetIdo], MegalloNev(nid, NPC_MEGALLO_KOVETKEZO));
						
					for(new p = 0; p < MAX_PLAYERS; p++)
					{
						if(!RendesJatekos(p) || !NPCBuszban(p, npc)) continue;
						SendClientMessage(p, COLOR_LIGHTBLUE, szoveg);
					}
				}
			}
		}
		
	}
	
	return 1;
}

fpublic SzamlalasTimer(nid)
{
	if(!NPC_Vezetok[nid][nSzamolas]) return 1;
	NPC_Vezetok[nid][nSzamolasIdo]++;
	//SetTimerEx("SzamlalasTimer", 1000, false, "d", nid);
	return 1;
}

stock SetBuszData(npc, id, nev[])
{
	switch(id)
	{
		case NPC_DATA_NEV: strmid(NPC_Vezetok[npc][nNev], nev, 0, strlen(nev), 255);
		case NPC_DATA_FELVETEL: strmid(NPC_Vezetok[npc][nFelvetelNev], nev, 0, strlen(nev), 255);
	}
	return 1;
}

stock SetMegallo(npc, id, nev[], Float:x, Float:y, Float:z, ido, Float:angle=0.0)
{
	strmid(NPC_MegallokNeve[npc][id], nev, 0, strlen(nev));
	new Float:pos[4];
	pos[0] = x;
	pos[1] = y;
	pos[2] = z;
	pos[3] = angle;
	NPC_Megallok[npc][id] = pos;
	NPC_MegallokIdo[npc][id] = ido;
	
	return 1;
}

fpublic FelvetelFolytatasa(npcid, berakas)
{
	new nid;
	if(berakas == 2)
	{
		
		for(new x=0; x < MAX_PLAYERS; x++)
		{
			
			if(NPC_ID[x] == npcid)
			{
				npcid = x;
				break;
			}
		}
	}
	
	
	nid = NPC_ID[npcid];
	if(berakas == 2)
		printf("ID: %d NID: %d",npcid,nid);
	
	new recfajl[32];

	
	format(recfajl, 32, "NPCPARANCS %d %s%d", NPC_AKCIO_START, NPC_Vezetok[nid][nFelvetelNev], NPC_Vezetok[nid][nHolTart]);
	SendClientMessage(npcid, 1, recfajl);
	if(berakas == 2)
		printf("[NPC]nid:%d, %s",nid,recfajl);
	
	new kovetkezo;
	if(NPC_Vezetok[nid][nHolTart] == NPC_Vezetok[nid][nMegallokSzama])
		kovetkezo = 0;
	else
		kovetkezo = NPC_Vezetok[nid][nHolTart];
	
	NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][kovetkezo];

	for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(!RendesJatekos(p) || !NPCBuszban(p, npcid)) continue;
		SendFormatMessage(p, COLOR_LIGHTBLUE, "Busz: Kedves utasaink, a következõ megálló: %s", NPC_MegallokNeve[nid][kovetkezo]);
	}

	new szoveg[256];
	format(szoveg, 256, "%s\nKövetkezõ megálló: %s", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][kovetkezo]);
	UpdateDynamic3DTextLabelText(NPC_Vezetok[nid][nLeirasID], COLOR_WHITE, szoveg);

	if(NPC_Vezetok[nid][nSzamolas]) Szamlalas(nid, true);

	NPC_Vezetok[nid][nMegallt] = false;
	
	return 1;
}

fpublic NPC_STOP(npcid)
{
	new nid = NPC_ID[npcid], recfajl[50];
	format(recfajl, sizeof(recfajl), "NPCPARANCS %d %s%d", NPC_AKCIO_STOP, NPC_Vezetok[nid][nFelvetelNev], NPC_Vezetok[nid][nHolTart]);
	SendClientMessage(npcid, 1, recfajl);
	
	return 1;

}
fpublic NPC_FelvetelStart(npcid)
{
	//printf("NPC_FelvetelStart(npcid: %d)", npcid);
	new nid = NPC_ID[npcid], recfajl[50];
	format(recfajl, sizeof(recfajl), "NPCPARANCS %d %s%d", NPC_AKCIO_START, NPC_Vezetok[nid][nFelvetelNev], NPC_Vezetok[nid][nHolTart]);
	SendClientMessage(npcid, 1, recfajl);
	
	return 1;
}

fpublic NPC_FelvetelVege(npcid)//, reason)
{
	//if(reason == NPC_RECORD_END_REASON_END)
	//{
	
	new nid = NPC_ID[npcid];
	if(NPC_Vezetok[nid][nDuplaIndit] > UnixTime) return 1;

	NPC_Vezetok[nid][nMegallt] = true;
	
	NPC_Vezetok[nid][nDuplaIndit] = UnixTime+30;
	
	
	if(NPC_Vezetok[nid][nMegallokSzama] == NPC_Vezetok[nid][nHolTart])
		NPC_Vezetok[nid][nHolTart] = 1;
	else
		NPC_Vezetok[nid][nHolTart]++;
		
	new megallo = NPC_Vezetok[nid][nHolTart] - 1, kovetkezo;
	
	if(NPC_Vezetok[nid][nHolTart] == NPC_Vezetok[nid][nMegallokSzama])
		kovetkezo = 0;
	else
		kovetkezo = NPC_Vezetok[nid][nHolTart];
		
	//NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][megallo];
		
	for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(!RendesJatekos(p) || !NPCBuszban(p, npcid)) continue;
		SendFormatMessage(p, COLOR_LIGHTBLUE, "Busz: Kedves utasaink, megérkeztünk a következõ megállóhoz: %s", NPC_MegallokNeve[nid][megallo]);
	}
	
	SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", npcid, 1);
		
	new szoveg[256];
	format(szoveg, 256, "%s\nKövetkezõ megálló: %s", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][kovetkezo]);
	UpdateDynamic3DTextLabelText(NPC_Vezetok[nid][nLeirasID], COLOR_GREEN, szoveg);
	
	format(szoveg, 256, "Sofõr: Beszállás! Következõ megálló a %s", NPC_MegallokNeve[nid][kovetkezo]);
		
	ProxDetector(50.0, npcid, szoveg, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		
	if(NPC_Vezetok[nid][nSzamolas] && NPC_Vezetok[nid][nSzamolasIdo] > 0) Szamlalas(nid, false);
		
	
	
	new Float:x, Float:y, Float:z;
	GetPlayerPos(npcid, x, y, z);
	SetPlayerPos(npcid, x, y, z);
	
	return 1;
}

fpublic NPCSpawn(npc)
{
	new nev[MAX_PLAYER_NAME];
	//nev = PlayerName(npc);
	strmid(nev, PlayerName(npc), 0, strlen(PlayerName(npc)), 30);
	
	new nid, car, szoveg[256];

	if(egyezik(nev, "NPC_Arveres"))
	{
		SetPlayerVirtualWorld(npc, 9999);
		SetPlayerSkin(npc, 141);

		ArveresNPC = npc;
		if(!IsValidDynamic3DTextLabel(ArveresNPCText)) ArveresNPCText = CreateDynamic3DTextLabel("Árverés", 0x33CCFFFF, 0.0, 0.0, 0.5, 30.0, npc);
	}
	else if(egyezik(nev, "NPC_1Bank"))
	{
		SetPlayerVirtualWorld(npc, 1555);
		//SetPlayerPos(npc,1913.67269229, -2415.88067467, 13.9656142578); Régi poz
		SetPlayerPos(npc,-1265.607, -98.560, 14.458);
		//SetPlayerFacingAngle(npc, 159.7350); régi face angle
		SetPlayerFacingAngle(npc, 87.710);
		SetPlayerSkin(npc, 141);

		BankNPC = npc;
		if(!IsValidDynamic3DTextLabel(BankNPCText)) BankNPCText = CreateDynamic3DTextLabel("Pénztáros", 0x33CCFFFF, 0.0, 0.0, 0.5, 30.0, npc);
	}
	else if(egyezik(nev, "NPC_2Bank"))
	{
		SetPlayerVirtualWorld(npc, 1555);
		SetPlayerSkin(npc, 141);
		SetPlayerPos(npc, 2318.3093,-7.1359,26.7496);
		SetPlayerFacingAngle(npc, 93.6875);
		BankSFNPC = npc;
		if(!IsValidDynamic3DTextLabel(BankSFNPCText)) BankSFNPCText = CreateDynamic3DTextLabel("Pénztáros", 0x33CCFFFF, 0.0, 0.0, 0.5, 30.0, npc);
		
	}
	else
	{
		nid = NINCS;
		
		if(egyezik(nev, "NPC_Buszsofor_LS"))
			nid = 0;
		if(egyezik(nev, "NPC_Buszsofor_LS1"))
			nid = 1;
		if(egyezik(nev, "NPC_Buszsofor_LS2"))
			nid = 2;
		if(egyezik(nev, "NPC_Buszsofor_LS_SF1"))
			nid = 3;
		if(egyezik(nev, "NPC_Buszsofor_LS_SF2"))
			nid = 4;
		if(egyezik(nev, "NPC_Vonatsofor_LS_1"))
			nid = 5;
		if(egyezik(nev, "NPC_Vonatsofor_LS_2"))
			nid = 6;
		if(egyezik(nev, "NPC_Vonatsofor_LS_3"))
			nid = 7;
		if(egyezik(nev, "NPC_Vonatsofor_LS_4"))
			nid = 8;
		if(egyezik(nev, "NPC_Vonatsofor_LS_5"))
			nid = 9;
		if(egyezik(nev, "NPC_Villamos_1"))
			nid = 10;
		if(egyezik(nev, "NPC_Villamos_2"))
			nid = 11;
		if(egyezik(nev, "NPC_Villamos_3"))
			nid = 12;
		if(nid != NINCS)
		{
			car = NPC_Vezetok[nid][nKocsi];
			NPC_Vezetok[nid][nID] = npc;
			PutPlayerInVehicle(npc, car, 0); printf("PutPlayerInVehicle(npc: %d, car: %d, 0)", npc, car);

			format(szoveg, sizeof(szoveg), "%s\nKövetkezõ megálló: %s", NPC_Vezetok[nid][nNev], NPC_MegallokNeve[nid][1]);
			NPC_Vezetok[nid][nLeirasID] = CreateDynamic3DTextLabel(szoveg, 0xFFFFFFFF, 0.0, 0.0, 4.0, 100.0, INVALID_PLAYER_ID, car);
		}
		
		
	}
	return 1;
}
//npc
stock NPCCsatlakozas(nev[], npc)
{
	new nid;
	if(egyezik(nev, "NPC_Buszsofor_LS"))
	{
		nid = 0;
		
		SetBuszData(nid, NPC_DATA_NEV, "[Helyi] Járat 1 - Los Santos");
		SetBuszData(nid, NPC_DATA_FELVETEL, "Busz_");
	
		NPC_Vezetok[nid][nHolTart] = 1;
		NPC_Vezetok[nid][nMegallokSzama] = 3;
	
		SetMegallo(nid, 0, "Városháza", 1492.098, -1741.344, 13.546, 48);
		SetMegallo(nid, 1, "Bank", 1490.208, -1059.940, 23.826, 49);
		SetMegallo(nid, 2, "Kórház", 1188.293, -1341.848, 13.570, 52);

		NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][1];
	
		printf("%s betöltése a következõ sloton: %d", nev, npc);
		SetPlayerColor(npc, COLOR_NPC);
	
		NPC_Vezetok[nid][nKocsi] = UjKocsi(431, NPC_Megallok[nid][0][0], NPC_Megallok[nid][0][1], NPC_Megallok[nid][0][2], 269.799, 2, 3);
									
		NPCKocsi[NPC_Vezetok[nid][nKocsi]] = true;
		KocsiRadio[NPC_Vezetok[nid][nKocsi]] = 6;
		SetJarmu(NPC_Vezetok[nid][nKocsi], KOCSI_LAMPA, 1);
		
		NPC_ID[npc] = nid;
		NPC_Vezetok[nid][nConnected] = true;
	} 
	else if(egyezik(nev, "NPC_Buszsofor_LS1"))
	{

		nid = 1;
	
		SetBuszData(nid, NPC_DATA_NEV, "[Helyi] Járat 2 - Los Santos");
		SetBuszData(nid, NPC_DATA_FELVETEL, "LS_");
	
		NPC_Vezetok[nid][nHolTart] = 1;
		NPC_Vezetok[nid][nMegallokSzama] = 9;

		SetMegallo(nid, 0, "Paintball", 1298.751, -1388.146, 13.489, 27);
		SetMegallo(nid, 1, "Kamion LS fõdepó", 948.763, -1240.345, 16.458, 29);
		SetMegallo(nid, 2, "Fánkos", 1004.424, -1313.985, 13.546, 21);
		SetMegallo(nid, 3, "NAV", 750.472, -1388.663, 13.682, 22);
		SetMegallo(nid, 4, "Ruhabolt", 430.928, -1487.781, 30.791, 23);
		SetMegallo(nid, 5, "Horgászhely", 356.275, -1651.912, 32.954, 22);
		SetMegallo(nid, 6, "Reptér-úttisztító", 1947.086, -2172.943, 13.554, 82);
		SetMegallo(nid, 7, "Benzinkút", 1968.089, -1770.010, 13.546, 27);
		SetMegallo(nid, 8, "Étterem", 1484.475, -1585.722, 13.546, 35);
		
		NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][1];
		
		printf("%s betöltése a következõ sloton: %d", nev, npc);
		SetPlayerColor(npc, COLOR_NPC);
		
		NPC_Vezetok[nid][nKocsi] = UjKocsi(431, NPC_Megallok[nid][0][0], NPC_Megallok[nid][0][1], NPC_Megallok[nid][0][2], 269.799, 2, 3);
		
		NPCKocsi[NPC_Vezetok[nid][nKocsi]] = true;
		KocsiRadio[NPC_Vezetok[nid][nKocsi]] = 6;
		SetJarmu(NPC_Vezetok[nid][nKocsi], KOCSI_LAMPA, 1);
		
		NPC_ID[npc] = nid;
		NPC_Vezetok[nid][nConnected] = true;

	}
	else if(egyezik(nev, "NPC_Buszsofor_LS2"))
	{

		nid = 2;
	
		SetBuszData(nid, NPC_DATA_NEV, "[Helyi] Járat 3 - Los Santos");
		SetBuszData(nid, NPC_DATA_FELVETEL, "helyi_");
	
		NPC_Vezetok[nid][nHolTart] = 1;
		NPC_Vezetok[nid][nMegallokSzama] = 6;
		
		SetMegallo(nid, 0,"Városháza",1461.9238,-1737.6884,13.5572, 38); // vh
		SetMegallo(nid, 1,"Úttisztító - Reptér",1942.5902,-2172.0220,13.5577, 55); // úttisztótó
		SetMegallo(nid, 2,"Kukás telep",1663.0890,-1517.3826,13.5483, 60); // kukás
		SetMegallo(nid, 3,"Fûnyíró telep",1856.8600,-1241.0490,15.0728, 35); // fûnyíró
		SetMegallo(nid, 4,"Kamion LS fõdepó",937.8405,-1261.4929,15.7287, 56); // kamion
		SetMegallo(nid, 5,"LS Busz pályaudvar",938.3262,-1258.0645,15.8035, 53); // pályaudvar
				
		NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][1];
		
		printf("%s betöltése a következõ sloton: %d", nev, npc);
		SetPlayerColor(npc, COLOR_NPC);
		
		NPC_Vezetok[nid][nKocsi] = UjKocsi(431, NPC_Megallok[nid][0][0], NPC_Megallok[nid][0][1], NPC_Megallok[nid][0][2], 269.799, 2, 3);
		
		NPCKocsi[NPC_Vezetok[nid][nKocsi]] = true;
		KocsiRadio[NPC_Vezetok[nid][nKocsi]] = 6;
		SetJarmu(NPC_Vezetok[nid][nKocsi], KOCSI_LAMPA, 1);
		
		NPC_ID[npc] = nid;
		NPC_Vezetok[nid][nConnected] = true;

	}
	else if(egyezik(nev, "NPC_Buszsofor_LS_SF1") || egyezik(nev, "NPC_Buszsofor_LS_SF2"))
	{
		
		if(egyezik(nev, "NPC_Buszsofor_LS_SF1"))
			nid = 3,NPC_Vezetok[nid][nHolTart] = 1, SetBuszData(nid, NPC_DATA_NEV, "[Távolsági] Járat 4 - Los Santos <> Farm <> San Fierro");
		if(egyezik(nev, "NPC_Buszsofor_LS_SF2"))
			nid = 4,NPC_Vezetok[nid][nHolTart] = 4, SetBuszData(nid, NPC_DATA_NEV, "[Távolsági] Járat 5 - San Fierro <> Farm <> Los Santos");
		
		SetBuszData(nid, NPC_DATA_FELVETEL, "tavol_");
		
	
		NPC_Vezetok[nid][nMegallokSzama] = 6;

		SetMegallo(nid, 0, "LS Busz pályaudvar", 1171.3102,-1815.5884,13.5319, 137);
		SetMegallo(nid, 1, "LS Autóbérlõ", 532.3533,-1244.4592,16.5734, 57);
		SetMegallo(nid, 2, "Farm",-280.4645,-146.6835,2.3704, 110);
		SetMegallo(nid, 3, "SF Vasútállomás",-1988.2618,151.7655,27.6737, 140);
		SetMegallo(nid, 4, "SF Bank",-1946.3374,600.1502,35.1477, 27);
		SetMegallo(nid, 5, "Farm", -246.4173,-170.4880,2.4848, 160);
	
	
		NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][NPC_Vezetok[nid][nHolTart]];
	
		printf("%s betöltése a következõ sloton: %d", nev, npc);
		SetPlayerColor(npc, COLOR_NPC);
	
		NPC_Vezetok[nid][nKocsi] = UjKocsi(437,NPC_Megallok[nid][NPC_Vezetok[nid][nHolTart]-1][0], NPC_Megallok[nid][NPC_Vezetok[nid][nHolTart]-1][1], NPC_Megallok[nid][NPC_Vezetok[nid][nHolTart]-1][2], 269.799, 2, 3);
		
		NPCKocsi[NPC_Vezetok[nid][nKocsi]] = true;
		KocsiRadio[NPC_Vezetok[nid][nKocsi]] = 6;
		SetJarmu(NPC_Vezetok[nid][nKocsi], KOCSI_LAMPA, 1);
		
		NPC_ID[npc] = nid;
		NPC_Vezetok[nid][nConnected] = true;
	}
	else if(egyezik(nev, "NPC_Arveres"))
	{
		printf("%s betöltése a következõ sloton: %d", nev, npc);
		SetPlayerColor(npc, COLOR_NPC);
	
		SetSpawnInfo(npc, 0, 141, 319.203, 130.035, 1007.965, 270.0, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(npc);
	}
	else if(egyezik(nev, "NPC_1Bank"))
	{
		printf("%s betöltése a következõ sloton: %d", nev, npc);
		SetPlayerColor(npc, COLOR_NPC);
	
		//SetSpawnInfo(npc, 0, 141, 1913.67269229, -2415.88067467, 13.9656142578,159.7350, 0, 0,0, 0, 0, 0); régi
		SetSpawnInfo(npc, 0, 141, -1265.607, -98.560, 14.458,159.7350, 0, 0,0, 0, 0, 0);
		SpawnPlayer(npc);
	}
	else if(egyezik(nev, "NPC_2Bank"))
	{
		printf("%s betöltése a következõ sloton: %d", nev, npc);
		SetPlayerColor(npc, COLOR_NPC);
	
		SetSpawnInfo(npc, 0, 141, 332.3936,131.8434,1007.9657,165.7315, 0, 0,0, 0, 0, 0);
		SpawnPlayer(npc);
	}
	else
	{
		nid = NINCS;
		if(egyezik(nev, "NPC_Vonatsofor_LS_1"))
			nid = 5,NPC_Vezetok[nid][nHolTart] = 1, SetBuszData(nid, NPC_DATA_NEV, "[Vonat] Járat 6 - Los Santos");
		if(egyezik(nev, "NPC_Vonatsofor_LS_2"))
			nid = 6,NPC_Vezetok[nid][nHolTart] = 2, SetBuszData(nid, NPC_DATA_NEV, "[Vonat] Járat 7 - Los Santos NAV");
		if(egyezik(nev, "NPC_Vonatsofor_LS_3"))
			nid = 7,NPC_Vezetok[nid][nHolTart] = 3, SetBuszData(nid, NPC_DATA_NEV, "[Vonat] Járat 8 - San Fierro");
		if(egyezik(nev, "NPC_Vonatsofor_LS_4"))
			nid = 8,NPC_Vezetok[nid][nHolTart] = 4, SetBuszData(nid, NPC_DATA_NEV, "[Vonat] Járat 9 - Las Venturas 1");
		if(egyezik(nev, "NPC_Vonatsofor_LS_5"))
			nid = 9,NPC_Vezetok[nid][nHolTart] = 5, SetBuszData(nid, NPC_DATA_NEV, "[Vonat] Járat 10 - Las Venturas 2");			
	

		
		if(4 < nid < 10)
		{
			SetBuszData(nid, NPC_DATA_FELVETEL, "train_");
				
			NPC_Vezetok[nid][nMegallokSzama] = 5;
		
			SetMegallo(nid, 0, "Los Santos", 1700.7551,-1953.6531,14.8756, 208);
			SetMegallo(nid, 1, "Los Santos NAV",792.2020,-1346.3613,-0.1244, 80);
			SetMegallo(nid, 2, "San Fierro", -1943.1101,162.7422,27.0006, 193);
			SetMegallo(nid, 3, "Las Venturas 1",1459.2758,2632.2500,12.1256, 152);
			SetMegallo(nid, 4, "Las Venturas 2",2864.7500,1256.7795,12.1256, 107);


			NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][NPC_Vezetok[nid][nHolTart]];

			printf("%s betöltése a következõ sloton: %d", nev, npc);
			SetPlayerColor(npc, COLOR_NPC);
		
			
			NPC_Vezetok[nid][nKocsi] = UjKocsi(538,NPC_Megallok[nid][NPC_Vezetok[nid][nHolTart]-1][0], NPC_Megallok[nid][NPC_Vezetok[nid][nHolTart]-1][1], NPC_Megallok[nid][NPC_Vezetok[nid][nHolTart]-1][2],200.0,3,3);
			
				
			NPCKocsi[NPC_Vezetok[nid][nKocsi]] = true;
			//KocsiRadio[NPC_Vezetok[nid][nKocsi]] = 6;
			SetJarmu(NPC_Vezetok[nid][nKocsi], KOCSI_LAMPA, 1);

			NPC_ID[npc] = nid;
			NPC_Vezetok[nid][nConnected] = true;
		}

		if(egyezik(nev, "NPC_Villamos_1"))
			nid = 10,NPC_Vezetok[nid][nHolTart] = 1, SetBuszData(nid, NPC_DATA_NEV, "[Villamos] Járat 11");
		if(egyezik(nev, "NPC_Villamos_2"))
			nid = 11,NPC_Vezetok[nid][nHolTart] = 3, SetBuszData(nid, NPC_DATA_NEV, "[Villamos] Járat 12");
		if(egyezik(nev, "NPC_Villamos_3"))
			nid = 12,NPC_Vezetok[nid][nHolTart] = 5, SetBuszData(nid, NPC_DATA_NEV, "[Villamos] Járat 13");
		if(9 < nid < 13)
		{
			SetBuszData(nid, NPC_DATA_FELVETEL, "tram_");
				
			NPC_Vezetok[nid][nMegallokSzama] = 6;
		
			SetMegallo(nid, 0, "Villamos depó",-2264.6997,528.8523,35.5849, 208, 180.4107);
			SetMegallo(nid, 1, "SF vasútállomás",-2006.5000,162.7147,27.9973, 80, 0.0);
			SetMegallo(nid, 2, "San Fierro Bank", -1937.1033,603.2500,35.4973, 193,270.0);
			SetMegallo(nid, 3, "Állomás",-2001.6250,888.1715,45.7473, 152, 0.0);
			SetMegallo(nid, 4, "PénzSzállító telephely",-1755.4313,921.1250,25.1223, 107,270.0);
			SetMegallo(nid, 5, "Megálló",-2016.5846,1308.2476,7.4973, 107, 87.909);

			NPC_Vezetok[nid][nMenetIdo] = NPC_MegallokIdo[nid][NPC_Vezetok[nid][nHolTart]];

			printf("%s betöltése a következõ sloton: %d", nev, npc);
			SetPlayerColor(npc, COLOR_NPC);
		
			
			NPC_Vezetok[nid][nKocsi] = UjKocsi(449,NPC_Megallok[nid][NPC_Vezetok[nid][nHolTart]-1][0], NPC_Megallok[nid][NPC_Vezetok[nid][nHolTart]-1][1], NPC_Megallok[nid][NPC_Vezetok[nid][nHolTart]-1][2],NPC_Megallok[nid][NPC_Vezetok[nid][nHolTart]-1][3],3,3);
			printf("%f",NPC_Megallok[nid][NPC_Vezetok[nid][nHolTart]-1][3]);
			
				
			NPCKocsi[NPC_Vezetok[nid][nKocsi]] = true;
			//KocsiRadio[NPC_Vezetok[nid][nKocsi]] = 6;
			SetJarmu(NPC_Vezetok[nid][nKocsi], KOCSI_LAMPA, 1);

			NPC_ID[npc] = nid;
			NPC_Vezetok[nid][nConnected] = true;

		
		}
	}
	
}

stock NPCMuvelet( MuveletID, Kirug = true )
{
	return 1;
}

stock NPCBetoltese()
{
	#if defined KELLNPC
		#if defined KELLBUSZNPC
		ConnectNPC("NPC_Buszsofor_LS", "ClassBusz");
		ConnectNPC("NPC_Buszsofor_LS1", "ClassBusz");
		ConnectNPC("NPC_Buszsofor_LS2", "ClassBusz");
		
		ConnectNPC("NPC_Buszsofor_LS_SF1", "ClassBusz");
		ConnectNPC("NPC_Buszsofor_LS_SF2", "ClassBusz");
		
		ConnectNPC("NPC_Vonatsofor_LS_1", "ClassBusz");
		ConnectNPC("NPC_Vonatsofor_LS_2", "ClassBusz");
		ConnectNPC("NPC_Vonatsofor_LS_3", "ClassBusz");
		ConnectNPC("NPC_Vonatsofor_LS_4", "ClassBusz");
		ConnectNPC("NPC_Vonatsofor_LS_5", "ClassBusz");
		
		ConnectNPC("NPC_Villamos_1", "ClassBusz");
		ConnectNPC("NPC_Villamos_2", "ClassBusz");
		ConnectNPC("NPC_Villamos_3", "ClassBusz");
		#endif
		ConnectNPC("NPC_1Bank", "NPC_Bank");
		ConnectNPC("NPC_2Bank", "NPC_Bank");
		ConnectNPC("NPC_Arveres", "NPC_Arveres");
	#endif
	return 1;
}

stock RendesJatekos(playerid, bool:npccsekk = true, bool:csaknpc = false)
{
	if(!csaknpc && npccsekk && IsPlayerConnected(playerid) && Logged(playerid) && !IsPlayerNPC(playerid) ||
		!csaknpc && !npccsekk && IsPlayerConnected(playerid) && Logged(playerid) ||
		csaknpc && IsPlayerConnected(playerid) && IsPlayerNPC(playerid))
		return 1;
	return 0;
}

stock SpecKarakterek(szoveg[], karakterek[] = ",")
{
	new bool:talalt;
	for(new x = 0; x < strlen(karakterek); x++)
	{
		if(strfind(szoveg, karakterek[x]) != NINCS)
		{
			talalt = true;
			break;
		}
	}
	return talalt;
}

stock Lofegyver(fegyver)
{
	new slot = GetGunSlot(fegyver);
	if(slot == 2 || slot == 3 || slot == 4 || slot == 5 || slot == 6 || slot == 7 || slot == 8 || slot == 9)
		return 1;
	return 0;
}

fpublic BenzinTankolas(playerid)
{
	new szeflog[128];
	if(Tankol[playerid][0] == 0) return 1;
	new kocsi = Tankol[playerid][0], kut = Tankol[playerid][1], maxbenzin = MaxBenzin(kocsi), uzenet[64];
	
	if(!BankkartyaFizet(playerid, BenzinKutak[kut][bBenzinAra], false) && ( IngyenTankol(playerid, kocsi) && FrakcioInfo[ PlayerInfo[playerid][pMember] ][fPenz] < BenzinKutak[kut][bBenzinAra] || !IngyenTankol(playerid, kocsi) ) && IsMunkaKocsi(kocsi) == NINCS)
	{
		Cselekves(playerid, "befejezte a tankolást, mert nincs több pénze tankolni");
		TankolasNyugta(playerid);
		Tankolaskozben[kocsi] = false;
		Tankol[playerid][0] = 0;
		UnFreeze(playerid);
		return 1;
	}
	if(BenzinKutak[kut][bBenzin] < 1)
	{
		Cselekves(playerid, "befejezte a tankolást, mivel az utolsó liter benzint, ami a benzinkútba volt, beletankolta a kocsijába");
		TankolasNyugta(playerid);
		Tankolaskozben[kocsi] = false;
		Tankol[playerid][0] = 0;
		UnFreeze(playerid);
		return 1;
	}

	Gas[kocsi]++;
	BenzinKutak[kut][bBenzin]--;
	BenzinKutak[kut][bSzef] += BenzinKutak[kut][bBenzinAra];
	
	if(IngyenTankol(playerid, kocsi) && FrakcioInfo[ PlayerInfo[playerid][pMember] ][fPenz] >= BenzinKutak[kut][bBenzinAra])
		FrakcioSzef(PlayerInfo[playerid][pMember], -BenzinKutak[kut][bBenzinAra], 1);
	else if(IsMunkaKocsi(kocsi) != NINCS && FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >= BenzinKutak[kut][bBenzinAra] && FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] > 90000000)
	{
		FrakcioSzef(FRAKCIO_ONKORMANYZAT, -BenzinKutak[kut][bBenzinAra], 2);
		format(szeflog,sizeof(szeflog), "[%d. frakció]MunkaKocsi tankolása Benzin: %s Ft",FRAKCIO_ONKORMANYZAT, FormatInt(BenzinKutak[kut][bBenzinAra]));
		Log("Szef",szeflog);
		
	}
	else
		BankkartyaFizet(playerid, BenzinKutak[kut][bBenzinAra], true, false);
		
	if(Gas[kocsi] >= maxbenzin)
	{
		if(IsMunkaKocsi(kocsi) != NINCS && PInfo(playerid,MunkaBenzin) > 10)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Munka kocsi  üzemanyag tartozásod nullázva!");
		
			PInfo(playerid,MunkaBenzin) = NINCS;
			PInfo(playerid,MunkaAra) = NINCS;
			PInfo(playerid,MunkaRendszam) = NINCS;
		}
		Cselekves(playerid, "feltankolta a jármûvét");
		GameTextForPlayer(playerid, "~n~~n~~n~~g~~h~Feltankolva", 1000, 5);
		TankolasNyugta(playerid);
		UnFreeze(playerid);
		Tankolaskozben[kocsi] = false;
		Tankol[playerid][0] = 0;
	}
	else
	{
		new Float:x, Float:y, Float:z; GetVehiclePos(kocsi, x, y, z);
		if(!PlayerToPoint(10.0, playerid, x,y,z))
		{
			Tankolaskozben[kocsi] = false;
			Tankol[playerid][0] = 0;
			return Msg(playerid, "A tankolás megszakadt");
		}
		
		format(uzenet, sizeof(uzenet), "~n~~n~~n~~w~%d ~r~/ ~w~%d~n~~y~%d%%", maxbenzin, Gas[kocsi], floatround(float(Gas[kocsi]) / float(maxbenzin) * 100.0));
		GameTextForPlayer(playerid, uzenet, 480, 5);
		BenzinKutFrissites(kut);
		pTankolas[playerid][pUzAr] = BenzinKutak[kut][bBenzinAra];
		pTankolas[playerid][pLiter] += 1;
		SetTimerEx("BenzinTankolas", 500, false, "d", playerid);
	}
	
	return 1;
}

fpublic DieselTankolas(playerid)
{
	new szeflog[128];
	if(Tankol[playerid][0] == 0) return 1;
	new kocsi = Tankol[playerid][0], kut = Tankol[playerid][1], maxbenzin = MaxBenzin(kocsi), uzenet[64];
	
	if(!BankkartyaFizet(playerid, BenzinKutak[kut][bDieselAra], false) && ( IngyenTankol(playerid, kocsi) && FrakcioInfo[ PlayerInfo[playerid][pMember] ][fPenz] < BenzinKutak[kut][bDieselAra] || !IngyenTankol(playerid, kocsi) ) && IsMunkaKocsi(kocsi) == NINCS)
	{
		Cselekves(playerid, "befejezte a tankolást, mert nincs több pénze tankolni");
		TankolasNyugta(playerid);
		Tankolaskozben[kocsi] = false;
		Tankol[playerid][0] = 0;
		UnFreeze(playerid);
		return 1;
	}
	if(BenzinKutak[kut][bDiesel] < 1)
	{
		Cselekves(playerid, "befejezte a tankolást, mivel az utolsó liter gázolajat, ami a benzinkútba volt, beletankolta a kocsijába");
		TankolasNyugta(playerid);
		Tankolaskozben[kocsi] = false;
		Tankol[playerid][0] = 0;
		UnFreeze(playerid);
		return 1;
	}

	Gas[kocsi]++;
	BenzinKutak[kut][bDiesel]--;
	BenzinKutak[kut][bSzef] += BenzinKutak[kut][bDieselAra];
	
	if(IngyenTankol(playerid, kocsi) && FrakcioInfo[ PlayerInfo[playerid][pMember] ][fPenz] >= BenzinKutak[kut][bDieselAra])
		FrakcioSzef(PlayerInfo[playerid][pMember], -BenzinKutak[kut][bDieselAra], 3);
	else if(IsMunkaKocsi(kocsi) != NINCS && FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >= BenzinKutak[kut][bDieselAra]  && FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] > 90000000)
	{	
		
		FrakcioSzef(FRAKCIO_ONKORMANYZAT, -BenzinKutak[kut][bDieselAra], 4);
		format(szeflog,sizeof(szeflog), "[%d. frakció]MunkaKocsi tankolása Deisel: %s Ft",FRAKCIO_ONKORMANYZAT, FormatInt(BenzinKutak[kut][bDieselAra]));
		Log("Szef",szeflog);
	}
	else
		BankkartyaFizet(playerid, BenzinKutak[kut][bDieselAra], true, false);
		
	if(Gas[kocsi] >= maxbenzin)
	{
		if(IsMunkaKocsi(kocsi) != NINCS && PInfo(playerid,MunkaBenzin) > 10)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Munka kocsi  üzemanyag tartozásod nullázva!");
		
			PInfo(playerid,MunkaBenzin) =NINCS;
			PInfo(playerid,MunkaAra) =NINCS;
			PInfo(playerid,MunkaRendszam) = NINCS;
		}
		Cselekves(playerid, "feltankolta a jármûvét");
		GameTextForPlayer(playerid, "~n~~n~~n~~g~~h~Feltankolva", 1000, 5);
		TankolasNyugta(playerid);
		UnFreeze(playerid);
		Tankolaskozben[kocsi] = false;
		Tankol[playerid][0] = 0;
	}
	else
	{
		new Float:x, Float:y, Float:z; GetVehiclePos(kocsi, x, y, z);
		if(!PlayerToPoint(10.0, playerid, x,y,z))
		{
			Tankolaskozben[kocsi] = false;
			Tankol[playerid][0] = 0;
			return Msg(playerid, "A tankolás megszakadt");
		}
		
		format(uzenet, sizeof(uzenet), "~n~~n~~n~~w~%d ~r~/ ~w~%d~n~~y~%d%%", maxbenzin, Gas[kocsi], floatround(float(Gas[kocsi]) / float(maxbenzin) * 100.0));
		GameTextForPlayer(playerid, uzenet, 480, 5);
		BenzinKutFrissites(kut);
		pTankolas[playerid][pUzAr] = BenzinKutak[kut][bDieselAra];
		pTankolas[playerid][pLiter] += 1;
		SetTimerEx("DieselTankolas", 500, false, "d", playerid);
	}
	
	return 1;
}

fpublic KerozinTankolas(playerid)
{
	new szeflog[128];
	if(Tankol[playerid][0] == 0) return 1;
	new kocsi = Tankol[playerid][0], kut = Tankol[playerid][1], maxbenzin = MaxBenzin(kocsi), uzenet[64];
	
	if(!BankkartyaFizet(playerid, BenzinKutak[kut][bKerozinAra], false) && ( IngyenTankol(playerid, kocsi) && FrakcioInfo[ PlayerInfo[playerid][pMember] ][fPenz] < BenzinKutak[kut][bKerozinAra] || !IngyenTankol(playerid, kocsi) ) && IsMunkaKocsi(kocsi) == NINCS)
	{
		Cselekves(playerid, "befejezte a tankolást, mert nincs több pénze tankolni");
		TankolasNyugta(playerid);
		Tankolaskozben[kocsi] = false;
		Tankol[playerid][0] = 0;
		UnFreeze(playerid);
		return 1;
	}
	if(BenzinKutak[kut][bKerozin] < 1)
	{
		Cselekves(playerid, "befejezte a tankolást, mivel az utolsó liter kerozint, ami a benzinkútba volt, beletankolta a repülõjébe");
		TankolasNyugta(playerid);
		Tankolaskozben[kocsi] = false;
		Tankol[playerid][0] = 0;
		UnFreeze(playerid);
		return 1;
	}

	Gas[kocsi]++;
	BenzinKutak[kut][bKerozin]--;
	BenzinKutak[kut][bSzef] += BenzinKutak[kut][bKerozinAra];
	
	if(IngyenTankol(playerid, kocsi) && FrakcioInfo[ PlayerInfo[playerid][pMember] ][fPenz] >= BenzinKutak[kut][bKerozinAra])
		FrakcioSzef( PlayerInfo[playerid][pMember], -BenzinKutak[kut][bKerozinAra], 5);
	else if(IsMunkaKocsi(kocsi) != NINCS && FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >= BenzinKutak[kut][bBenzinAra] && FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] > 90000000)
	{	
		FrakcioSzef(FRAKCIO_ONKORMANYZAT, -BenzinKutak[kut][bKerozinAra], 6);
		format(szeflog,sizeof(szeflog), "[%d. frakció]MunkaKocsi tankolása Kerozin: %s Ft",FRAKCIO_ONKORMANYZAT, FormatInt(BenzinKutak[kut][bKerozinAra]));
		Log("Szef",szeflog);
	}
	else
		BankkartyaFizet(playerid, BenzinKutak[kut][bKerozinAra], true, false);
		
	if(Gas[kocsi] >= maxbenzin)
	{
		if(IsMunkaKocsi(kocsi) != NINCS && PInfo(playerid,MunkaBenzin) > 10)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Munka kocsi  üzemanyag tartozásod nullázva!");
		
			PInfo(playerid,MunkaBenzin) =NINCS;
			PInfo(playerid,MunkaAra) =NINCS;
			PInfo(playerid,MunkaRendszam) = NINCS;
		}
		Cselekves(playerid, "feltankolta a jármûvét");
		GameTextForPlayer(playerid, "~n~~n~~n~~g~~h~Feltankolva", 1000, 5);
		TankolasNyugta(playerid);
		UnFreeze(playerid);
		Tankolaskozben[kocsi] = false;
		Tankol[playerid][0] = 0;
	}
	else
	{
		new Float:x, Float:y, Float:z; GetVehiclePos(kocsi, x, y, z);
		if(!PlayerToPoint(10.0, playerid, x,y,z))
		{
			Tankolaskozben[kocsi] = false;
			Tankol[playerid][0] = 0;
			return Msg(playerid, "A tankolás megszakadt");
		}
		
		format(uzenet, sizeof(uzenet), "~n~~n~~n~~w~%d ~r~/ ~w~%d~n~~y~%d%%", maxbenzin, Gas[kocsi], floatround(float(Gas[kocsi]) / float(maxbenzin) * 100.0));
		GameTextForPlayer(playerid, uzenet, 480, 5);
		BenzinKutFrissites(kut);
		pTankolas[playerid][pUzAr] = BenzinKutak[kut][bKerozinAra];
		pTankolas[playerid][pLiter] += 1;
		SetTimerEx("KerozinTankolas", 500, false, "d", playerid);
	}
	
	return 1;
}


stock MaxBenzin(adat, model_ = false)
{
	new model;
	if(model_) model = adat - 400;
	else model = GetVehicleModel(adat) - 400;
	
	if(0 <= model < sizeof(Max_Benzin)) return Max_Benzin[model];
	else return 60;
}

stock FrakcioTagok(frakcio)
{
	new tagok;
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
		if(PlayerInfo[x][pMember] == frakcio)
			tagok++;
	}
	return tagok;
}

stock TrafipaxCheck(playerid, sebesseg, kocsi)
{
	new uzenet[200];
	new esely = random(100);
	new bool:rendszammutat = false;
	switch(esely) { case 0..75: rendszammutat = false; default: rendszammutat = true; }
	foreach(Jatekosok,x)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x) || !TrafiPax[x][tAktiv] || TrafiPax[x][tSebesseg] >= sebesseg || IsAPlane(kocsi) || IsABicikli(kocsi) || PlayerRaceInfo[x][xVersenyen] != NINCS) continue;
		if(IsACop(playerid) && OnDuty[playerid]) continue;
		if(IsACop(x) && !OnDuty[x]) continue;
		if(Onkentesszolgalatban[playerid] && IsMunkaKocsi(kocsi) == MUNKA_ONKENTES) continue;
		if(LMT(playerid, FRAKCIO_MENTO) && OnDuty[playerid]) continue;
		
		if(GetPlayerVirtualWorld(playerid) != 0) continue;
		
		new buntetes[MAX_PLAYERS];
		
		switch(sebesseg-TrafiPax[x][tSebesseg])
		{
			case 0..15: buntetes[playerid] = 0;
			case 16..25: buntetes[playerid]  = 30000;
			case 26..45: buntetes[playerid]  = 45000;
			case 46..65: buntetes[playerid]  = 90000;
			case 66..95: buntetes[playerid] = 150000;
			case 96..125: buntetes[playerid]  = 200000;
			case 126..140: buntetes[playerid]  = 270000;
			default: buntetes[playerid]  = 300000;
		}
		

		
		if(GetDistanceBetweenPlayers(playerid, x) <= 30.0)
		{
			if(Detektor[kocsi])
			{
				Msg(playerid, "=====[ TRAFFIPAX DETEKTOR ]=====", false);
				Msg(playerid, "Büntetést kaphattál volna gyorshajtás miatt!", false);
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességed: %d km/h", sebesseg);
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességkorlát: %d km/h", TrafiPax[x][tSebesseg]);
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességtúllépése: %d km/h", sebesseg-TrafiPax[x][tSebesseg]);
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Büntetés: %sFt", FormatInt(buntetes[playerid]));
				Msg(playerid, "Vigyázz, ha a traffipaxozó rendõr látta a rendszámot, elkaphatnak!", false);
				
				Msg(x, "=====[ TRAFFIPAX ]=====", false);
				Msg(x, "A jármûben lévõ traffipax detektor meggátolhatta a pontos adatok lefényképezését!", false);
				if(rendszammutat)
					SendFormatMessage(x, COLOR_LIGHTRED, "[TP]Név: %s", ICPlayerName(playerid));
				else
					SendClientMessage(x, COLOR_LIGHTRED, "[TP]Név: ???");
				if(rendszammutat)
					SendFormatMessage(x, COLOR_LIGHTRED, "[TP]Rendszám: %d", GetPlayerVehicleID(playerid));
				else
					SendClientMessage(x, COLOR_LIGHTRED, "[TP]Rendszám: ???");
				SendClientMessage(x, COLOR_LIGHTRED, "[TP]Sebesség: ??? km/h");
				SendClientMessage(x, COLOR_LIGHTRED, "[TP]Sebességkorlát: ??? km/h");
				SendClientMessage(x, COLOR_LIGHTRED, "[TP]Büntetés: ??? Ft");
				
				if(rendszammutat)
				{
					Format(uzenet, "Büntetést kapott: ???\nRendszám: %d\nMegengedett sebesség: ??? km/h\nSebessége: ??? km/h\nBüntetés: ??? Ft\n", GetPlayerVehicleID(playerid));
					ShowPlayerDialog(x, 5555, DIALOG_STYLE_MSGBOX, "Traffipax", uzenet, "OK", "");
				}
				else
					ShowPlayerDialog(x, 5555, DIALOG_STYLE_MSGBOX, "Traffipax", "Büntetést kapott: ???\nRendszám: ???\nMegengedett sebesség: ??? km/h\nSebessége: ??? km/h\nBüntetés: ??? Ft", "OK", "");
				
				Cselekves(x, "Valakit elkapott egy traffipax, de a jármûben lévõ detektor blokkolta a fényképezést", NINCS);
				break;
			}
			else
			{			
				Msg(playerid, "=====[ TRAFFIPAX ]=====", false);
				Msg(playerid, "Büntetést kaptál gyorshajtás miatt", false);
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességed: %d km/h", sebesseg);
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességkorlát: %d km/h", TrafiPax[x][tSebesseg]);
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességtúllépése: %d km/h", sebesseg-TrafiPax[x][tSebesseg]);
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Büntetés: %sFt", FormatInt(buntetes[playerid]));
				Msg(playerid, "Legközelebb vigyázz!", false);
				
				Msg(x, "=====[ TRAFFIPAX ]=====", false);
				Msg(x, "Elkaptál egy gyorshajtót!", false);
				SendFormatMessage(x, COLOR_LIGHTRED, "[TP]Név: %s", ICPlayerName(playerid));
				SendFormatMessage(x, COLOR_LIGHTRED, "[TP]Rendszám: %d", GetPlayerVehicleID(playerid));
				SendFormatMessage(x, COLOR_LIGHTRED, "[TP]Sebesség: %d km/h", sebesseg);
				SendFormatMessage(x, COLOR_LIGHTRED, "[TP]Sebességtúllépése: %d km/h", sebesseg-TrafiPax[x][tSebesseg]);
				SendFormatMessage(x, COLOR_LIGHTRED, "[TP]Sebességkorlát: %d km/h", TrafiPax[x][tSebesseg]);
				SendFormatMessage(x, COLOR_LIGHTRED, "[TP]Büntetés: %sFt", FormatInt(buntetes[playerid]));
				
				format(uzenet, sizeof(uzenet), "Büntetést kapott: %s\nRendszám: %d\n\nMegengedett sebesség: %d km/h\nSebessége: %d km/h\nSebességtúllépése: %d km/h\nBüntetés: %dFt\n\n(A pénz a széfbe került)", PlayerName(playerid), GetPlayerVehicleID(playerid), TrafiPax[x][tSebesseg], sebesseg,sebesseg-TrafiPax[x][tSebesseg],buntetes[playerid]);
				ShowPlayerDialog(x, 5555, DIALOG_STYLE_MSGBOX, "Traffipax", uzenet, "OK", "");
				Cselekves(x, "Valakit elkapott egy traffipax", NINCS);
				PlayerInfo[playerid][pAccount] -= buntetes[playerid];
				
				FrakcioSzef(PlayerInfo[x][pMember], buntetes[playerid], 7);
				
				TrafiPax[playerid][tBuntetheto] = 60;
				
				PlayerInfo[x][pTrafik]++;
				PlayerInfo[x][pTrafiOsszeg]+=buntetes[playerid];
				break;
			}
		}
		else if(GetDistanceBetweenPlayers(playerid, x) <= 100.0)
		{
			new vs = IsAVsKocsi(kocsi);	
			if(vs != NINCS)
			{
				if(CarInfo[vs][cDetektor] > 1 && Detektor[kocsi])
					SendClientMessage(playerid, COLOR_DARKYELLOW, "[Traffipax Detektor] 100 méteres körzetben traffipax található, lassítson!");
			}
			
		}
	}
	return 1;
}
stock FixTrafipaxCheck(playerid, sebesseg, kocsi)
{

	new Float:PPos[3], Float:legkozelebb = 5000.0, Float:tav;
				
	GetPlayerPos(playerid, PPos[0], PPos[1], PPos[2]);
		
	new x = NINCS;	
	for(new a = 0; a < MAX_FIXTRAFI; a++)
	{
		if(FixTrafi[a][fxID] == NINCS) continue;

		tav = GetDistanceBetweenPoints(PPos[0], PPos[1], PPos[2], FixTrafi[a][fxPos][0], FixTrafi[a][fxPos][1], FixTrafi[a][fxPos][2]);
		if(tav < legkozelebb)
		{
			legkozelebb = tav;
			x = a;
		}
	}
	if(x == NINCS) return 1;
	if(FixTrafi[x][fxSebesseg] >= sebesseg || IsAPlane(kocsi) || IsABicikli(kocsi) || PlayerRaceInfo[playerid][xVersenyen] != NINCS) return 1;
	if(IsACop(playerid) && OnDuty[playerid]) return 1;
	if(Onkentesszolgalatban[playerid] && IsMunkaKocsi(kocsi) == MUNKA_ONKENTES) return 1;
	if(LMT(playerid, FRAKCIO_MENTO) && OnDuty[playerid]) return 1;
		
	if(GetPlayerVirtualWorld(playerid) != 0) return 1;
		
	new buntetes[MAX_PLAYERS];
		
	switch(sebesseg-FixTrafi[x][fxSebesseg])
	{
		case 0..15: buntetes[playerid] = 0;
		case 16..25: buntetes[playerid]  = 30000;
		case 26..45: buntetes[playerid]  = 45000;
		case 46..65: buntetes[playerid]  = 90000;
		case 66..95: buntetes[playerid] = 150000;
		case 96..125: buntetes[playerid]  = 200000;
		case 126..140: buntetes[playerid]  = 270000;
		default: buntetes[playerid]  = 300000;
	}
		

		
	if(legkozelebb <= 30.0)
	{
		if(Detektor[kocsi])
		{
			Msg(playerid, "=====[ TRAFFIPAX DETEKTOR ]=====", false);
			Msg(playerid, "Büntetést kaphattál volna gyorshajtás miatt!", false);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességed: %d km/h", sebesseg);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességkorlát: %d km/h", FixTrafi[x][fxSebesseg]);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességtúllépése: %d km/h", sebesseg-FixTrafi[x][fxSebesseg]);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Büntetés: %sFt", FormatInt(buntetes[playerid]));
			Msg(playerid, "Vigyázz, ha a traffipaxozó rendõr látta a rendszámot, elkaphatnak!", false);
			
			Cselekves(playerid, "Valakit elkapott egy traffipax, de a jármûben lévõ detektor blokkolta a fényképezést", NINCS);
			return 1;
		}
		else
		{			
			Msg(playerid, "=====[ TRAFFIPAX ]=====", false);
			Msg(playerid, "Büntetést kaptál gyorshajtás miatt", false);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességed: %d km/h", sebesseg);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességkorlát: %d km/h", FixTrafi[x][fxSebesseg]);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Sebességtúllépése: %d km/h", sebesseg-FixTrafi[x][fxSebesseg]);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Büntetés: %sFt", FormatInt(buntetes[playerid]));
			Msg(playerid, "Legközelebb vigyázz!", false);
					
			new trafibevetel[128];
			Format(trafibevetel, "=====[ Bevétel: %s Ft ]=====", FormatInt(buntetes[playerid]));
			SendMessage(SEND_MESSAGE_RADIO, "=====[ FIXTRAFFIPAX ]=====", Pink,FRAKCIO_SCPD);
			SendMessage(SEND_MESSAGE_RADIO, trafibevetel, Pink,FRAKCIO_SCPD);
				
			PlayerInfo[playerid][pAccount] -= buntetes[playerid];
		
			FrakcioSzef(FRAKCIO_SCPD, buntetes[playerid], 7);
				
			TrafiPax[playerid][tBuntetheto] = 60;
				
			return 1;
		}
	}
	else if(legkozelebb <= 50.0)
	{
		new vs = IsAVsKocsi(kocsi);	
		if(vs != NINCS)
		{
			if(CarInfo[vs][cDetektor] > 1 && Detektor[kocsi])
				SendClientMessage(playerid, COLOR_DARKYELLOW, "[Traffipax Detektor] 50 méteres körzetben traffipax található, lassítson!");
		}
			
	}
	return 1;
}
fpublic AlmaSzedes(playerid)
{
	if(SzedKocsi[playerid] == 1)
	{
		new kocsi = GetClosestVehicle(playerid);
		new model = GetVehicleModel(kocsi)-400;

		new talalt = Rand(0, MaxTalalas[7]);
		CarTrunk[kocsi][cAlma] += talalt;

		if(CarTrunk[kocsi][cAlma] >= CarTrunkSize[model][cAlma])
		{
			Cselekves(playerid, "befejezte az almaszedést, mert megtelt a kocsija");
			Msg(playerid,"A kocsid megtelt almával, menj és add le");
			Almaszedeskozbe[kocsi] =0;
			MunkaFolyamatban[playerid] =0;
			SzedKocsi[playerid] = 0;
			UnFreeze(playerid);
		}
		else
		{
			new Float:x, Float:y, Float:z; GetVehiclePos(kocsi, x, y, z);
			if(!PlayerToPoint(10.0, playerid, x,y,z))
			{
				Almaszedeskozbe[kocsi] =0;
				SzedKocsi[playerid] = 0;
				MunkaFolyamatban[playerid] =0;
				return Msg(playerid, "Az almeszedés megszakadt!");
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
				Almaszedeskozbe[kocsi] =0;
				SzedKocsi[playerid] = 0;
				MunkaFolyamatban[playerid] =0;
				return Msg(playerid,"Az almaszedés megszakadt");
			}

			new uzenet[128];
			format(uzenet,128,"~n~~n~~n~~w~%d ~r~/ ~w~%d~n~", CarTrunkSize[model][cAlma], CarTrunk[kocsi][cAlma]);
			GameTextForPlayer(playerid, uzenet, 480, 5);
			SetTimerEx("AlmaSzedes", 2000, false, "d", playerid);
		}
	}
	if(SzedZseb[playerid] == 1)
	{
		new talalt = Rand(0, MaxTalalas[7]);
		PlayerInfo[playerid][pAlma] += talalt;

		if(PlayerInfo[playerid][pAlma] + talalt >= MAXALMA)// nehogy véletlen maxalma+1-et adjon
		{
			Cselekves(playerid, "befejezte az almaszedést, mert megtelt a zsebe");
			Msg(playerid,"Megtelt a zsebed almával, menj és add le vagy pakold bele egy kocsiba");
			MunkaFolyamatban[playerid] =0;
			SzedZseb[playerid] = 0;
			UnFreeze(playerid);
		}
		else
		{
			if(!PlayerToPoint(5, playerid, -1675.43, -1409.58, 2.03) &&
			!PlayerToPoint(5, playerid, -206.38, -1422.24, 1.05) &&
			!PlayerToPoint(5, playerid, -229.71, -1425.38, 2.91) &&
			!PlayerToPoint(5, playerid, -255.70, -1427.98, 5.89) &&
			!PlayerToPoint(5, playerid, -278.56, -1430.65, 9.15) &&
			!PlayerToPoint(5, playerid, -297.19, -1430.59, 11.63) &&
			!PlayerToPoint(5, playerid, -315.22, -1431.04, 12.63) &&
			!PlayerToPoint(5, playerid,-315.22, -1410.00, 11.63) &&
			!PlayerToPoint(5, playerid, -315.22, -1390.00, 10.45) &&
			!PlayerToPoint(5, playerid, -316.18, -1366.60, 7.48) &&
			!PlayerToPoint(5, playerid, -313.00, -1345.55, 6.72) &&
			!PlayerToPoint(5, playerid, -312.78, -1325.70, 6.72) &&
			!PlayerToPoint(5, playerid,-296.75, -1409.43, 11.03) &&
			!PlayerToPoint(5, playerid,-297.34, -1345.02, 6.72) &&
			!PlayerToPoint(5, playerid, -297.57, -1325.41, 6.60) &&
			!PlayerToPoint(5, playerid, -298.27, -1389.83, 9.13) &&
			!PlayerToPoint(5, playerid, -300.24, -1366.79, 6.52) &&
			!PlayerToPoint(5, playerid, -278.55, -1409.39, 9.71) &&
			!PlayerToPoint(5, playerid, -255.45, -1407.98, 7.53) &&
			!PlayerToPoint(5, playerid, -279.34, -1389.27, 8.61) &&
			!PlayerToPoint(5, playerid, -279.92, -1366.25, 7.61) &&
			!PlayerToPoint(5, playerid,-283.13, -1344.03, 5.42) &&
			!PlayerToPoint(5, playerid, -283.77, -1325.19, 6.24) &&
			!PlayerToPoint(5, playerid,-256.71, -1388.48, 8.01) &&
			!PlayerToPoint(5, playerid,-256.35, -1365.82, 7.71) &&
			!PlayerToPoint(5, playerid,-260.28, -1343.21, 5.34) &&
			!PlayerToPoint(5, playerid, -260.84, -1324.40, 7.06) &&
			!PlayerToPoint(5, playerid,-226.43, -1406.60, 5.25) &&
			!PlayerToPoint(5, playerid,-225.34, -1388.48, 6.23) &&
			!PlayerToPoint(5, playerid, -226.28, -1365.79, 5.55) &&
			!PlayerToPoint(5, playerid, -224.34, -1342.62, 7.18) &&
			!PlayerToPoint(5, playerid, -224.41, -1323.15, 9.14) &&
			!PlayerToPoint(5, playerid,-205.59, -1405.14, 3.43) &&
			!PlayerToPoint(5, playerid,-205.63, -1388.49, 3.87) &&
			!PlayerToPoint(5, playerid, -206.46, -1365.74, 3.53) &&
			!PlayerToPoint(5, playerid, -204.36, -1342.51, 7.25) &&
			!PlayerToPoint(5, playerid, -205.07, -1323.57, 7.12)
			&& !IsAt(playerid, IsAt_Almafa))
			{
				SzedZseb[playerid] = 0;
				MunkaFolyamatban[playerid] = 0;
				return Msg(playerid, "Az almeszedés megszakadt!");
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
				SzedZseb[playerid] = 0;
				MunkaFolyamatban[playerid] = 0;
				return Msg(playerid,"Az almaszedés megszakadt");
			}

			new uzenet[128];
			format(uzenet,128,"~n~~n~~n~~w~%d ~r~/ ~w~%d~n~", MAXALMA, PlayerInfo[playerid][pAlma]);
			GameTextForPlayer(playerid, uzenet, 480, 5);
			SetTimerEx("AlmaSzedes", 2000, false, "d", playerid);

		}
	}
	return 1;
}

/*fpublic HaldoklikTimer(playerid)
{
	if(!Haldoklik[playerid]) return 1;
	
	HaldoklasIdo[playerid]--;
	
	if(HaldoklasIdo[playerid] <= 0)
	{
		HaldoklasIdo[playerid] = NINCS;
		SetPlayerHealth(playerid, 0.0);
		return 1;
	}
	
	SetTimerEx("HaldoklikTimer", 1000, false, "d", playerid);
	
	return 1;
}*/

stock CountChars(szoveg[], karakter)
{
	new darab;
	for(new x = 0; x < strlen(szoveg); x++)
		if(szoveg[x] == karakter) darab++;
	return darab;
}

stock EngedelyezettKarakterek(szoveg[], extrajelek[] = "/.!?_[]():,;<>#&@ -")
{
	new bool:talalt;
	for(new x = 0; x < strlen(szoveg); x++)
	{
		if( szoveg[x] < '0' || szoveg[x] > '9' && szoveg[x] < 'A' || szoveg[x] > 'Z' && szoveg[x] < 'a' || szoveg[x] > 'z' && szoveg[x] < 128 )
		{
			if(!strlen(extrajelek)) return 0;
			talalt = false;
			for(new y = 0; y < strlen(extrajelek); y++)
			{
				if(szoveg[x] == extrajelek[y])
				{
					talalt = true;
					break;
				}
			}
			if(!talalt) return 0;
		}
	}
	return 1;
}

stock LegalisFrakcio(frakcio)
{
	for(new f = 0; f < sizeof(LegalisFrakciok); f++)
	{
		if(LegalisFrakciok[f] == frakcio)
			return 1;
	}
	
	return 0;
}

stock OnlineTagok(frakcio)
{
	new num;
	foreach(Jatekosok, p)
	{
		if(PlayerInfo[p][pMember] == frakcio)
			num++;
	}
	return num;
}

stock SetVehicleInterior(kocsi, interior)
{
	if(interior < 0) return 1;
	else if(interior == 0) JarmuValtozasok[kocsi][0] = false;
	else if(interior > 0)  JarmuValtozasok[kocsi][0] = true;
	LinkVehicleToInterior(kocsi, interior);
	return 1;
}

stock SetVehicleVW(kocsi, vw)
{
	if(vw < 0) return 1;
	else if(vw == 0) JarmuValtozasok[kocsi][1] = false;
	else if(vw > 0)  JarmuValtozasok[kocsi][1] = true;
	SetVehicleVirtualWorld(kocsi, vw);
	return 1;
}

stock KatonaOnline()
{
	new katona;
	foreach(Jatekosok, x)
	{
		if(LMT(x, FRAKCIO_KATONASAG) && OnDuty[x])
			katona++;
	}
	return katona;

}

stock TuzoltoOnline()
{
	new tag;
	foreach(Jatekosok, x)
	{
		if(LMT(x, FRAKCIO_TUZOLTO) && OnDuty[x])
			tag++;
	}
	return tag;

}

stock ZsarukOnline()
{
	new zsaruk;
	foreach(Jatekosok, x)
	{
		if(LMT(x, FRAKCIO_SCPD) && OnDuty[x] || LMT(x, FRAKCIO_SFPD) && OnDuty[x] || LMT(x, FRAKCIO_FBI) && OnDuty[x] || LMT(x, FRAKCIO_KATONASAG) && OnDuty[x] || LMT(x, FRAKCIO_NAV) && OnDuty[x])
			zsaruk++;
	}
	return zsaruk;
}
stock TaxiOnline()
{
	new taxis;
	foreach(Jatekosok, x)
	{
		if(Taxi[x][tDuty])
			taxis++;
	}
	return taxis;
}
stock BusOnline()
{
	new bus;
	foreach(Jatekosok, x)
	{
		if(TransportDuty[x] ==2)
			bus++;
	}
	return bus;
}
stock MentoOnline()
{
	new mento;
	foreach(Jatekosok, x)
	{
		if(LMT(x, FRAKCIO_MENTO) && OnDuty[x]==1)
			mento++;
	}
	return mento;
}
stock FrakcioOnline(melo)
{
	new tagok;
	foreach(Jatekosok, x)
	{
		if(LMT(x, melo))
			tagok++;
	}
	return tagok;
}

stock CsaladOnline(csalad)
{
	new tag;
	foreach(Jatekosok, x)
	{
		if(PlayerInfo[x][pCsaladLeader] == csalad || PlayerInfo[x][pCsaladTagja] == csalad)
			tag++;
	}
	return tag;
}
/*stock JatekosSebessege(playerid)
{
	new Float:x, Float:y, Float:z;
	if(IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	else
	    return 0;
	return floatround(floatsqroot(x*x+y*y+z*z) *100.0*1.6);
	
	//return SpeedCheck(x, y, z, 100.0, get3d);
	//return floatround(floatsqroot(get3d?(x*x+y*y+z*z):(x*x+y*y) ) *z*1.6);
}*/

stock SetVehicleColor(kocsi, szin1, szin2)
{
	KocsiSzinek[kocsi][0] = szin1;
	KocsiSzinek[kocsi][1] = szin2;
	ChangeVehicleColor(kocsi, szin1, szin2);
}

stock FloodCheck(playerid, ido = 3, kick = 5, bool:uzenet = true)
{
	if(Admin(playerid, 1337)) return 0;
	else if(Admin(playerid, 3, 6) && AdminDuty[playerid]) return 0;
	else if(IsScripter(playerid)) return 0;
	else
	{
		if(PlayerInfo[playerid][pElozoParancs] != 0)
		{
			PlayerInfo[playerid][pFlood]++;
			if(PlayerInfo[playerid][pFlood] >= kick && kick != NINCS)
			{
				SeeKick(playerid, "Parancs flood", NINCS);
			}
			if(uzenet)
				Msg(playerid, "Ne floodolj!");
			return 1;
		}
		else
		{
			PlayerInfo[playerid][pElozoParancs] = ido;
			PlayerInfo[playerid][pFlood] = 0;
		}
	}
	return 0;
}

stock tizmp(playerid, ido = 10, kick = 5)
{
	if(PlayerInfo[playerid][pElozoParancs] != 0)
	{
		PlayerInfo[playerid][pFlood]++;
		if(PlayerInfo[playerid][pFlood] >= kick && kick != NINCS)
		{
			SeeKick(playerid, "Parancs flood", NINCS);
		}
		SendFormatMessage(playerid, COLOR_LIGHTRED, "Még várnod kell %d másodpercet", ido);
		return 1;
	}
	else
	{
		PlayerInfo[playerid][pElozoParancs] = ido;
		PlayerInfo[playerid][pFlood] = 0;
	}
	
	return 0;
}

stock TeruletUpdate(t, ...)
{
	if(!TeruletInfo[t][tNeedUpdate])
		TeruletInfo[t][tNeedUpdate] = true;

	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == TERULET_Nev) TeruletUpdates[t][tNev] = true;
		else if(val == TERULET_MinX) TeruletUpdates[t][tMinX] = true;
		else if(val == TERULET_MaxX) TeruletUpdates[t][tMaxX] = true;
		else if(val == TERULET_MinY) TeruletUpdates[t][tMinY] = true;
		else if(val == TERULET_MaxY) TeruletUpdates[t][tMaxY] = true;
		else if(val == TERULET_Tulaj) TeruletUpdates[t][tTulaj] = true;
		//else if(val == TERULET_HaszonMit) TeruletUpdates[t][tHaszon] = true;
		//else if(val == TERULET_HaszonMennyit) TeruletUpdates[t][tHaszonMennyi] = true;
		else if(val == TERULET_HaszonIdo) TeruletUpdates[t][tHaszonIdo] = true;
		else if(val == TERULET_Foglalva) TeruletUpdates[t][tFoglalva] = true;
	}
}

stock CarUpdate(c, ...)
{
	if(!CarInfo[c][cNeedUpdate])
		CarInfo[c][cNeedUpdate] = true;
	
	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == CAR_Owned) CarUpdates[c][cOwned] = true;
		else if(val == CAR_Owner) CarUpdates[c][cOwner] = true;
		else if(val == CAR_Tulaj) CarUpdates[c][cTulaj] = true;
		else if(val == CAR_Model) CarUpdates[c][cModel] = true;
		else if(val == CAR_X) CarUpdates[c][cLocationx] = true;
		else if(val == CAR_Y) CarUpdates[c][cLocationy] = true;
		else if(val == CAR_Z) CarUpdates[c][cLocationz] = true;
		else if(val == CAR_Angle) CarUpdates[c][cAngle] = true;
		else if(val == CAR_ColorOne) CarUpdates[c][cColorOne] = true;
		else if(val == CAR_ColorTwo) CarUpdates[c][cColorTwo] = true;
		else if(val == CAR_Value) CarUpdates[c][cValue] = true;
		else if(val == CAR_Lock) CarUpdates[c][cLock] = true;
		else if(val == CAR_Date) CarUpdates[c][cDate] = true;
		else if(val == CAR_Painted) CarUpdates[c][cPainted] = true;
		else if(val == CAR_Tuning) CarUpdates[c][cTuning] = true;
		else if(val == CAR_Kerek) CarUpdates[c][cKerek] = true;
		else if(val == CAR_Matrica) CarUpdates[c][cMatrica] = true;
		else if(val == CAR_KM) CarUpdates[c][cKm] = true;
		else if(val == CAR_Int) CarUpdates[c][cInt] = true;
		else if(val == CAR_VW) CarUpdates[c][cVW] = true;
		else if(val == CAR_Neon) CarUpdates[c][cNeon] = true;
		else if(val == CAR_Hidraulika) CarUpdates[c][cHidraulika] = true;
		else if(val == CAR_Riaszto) CarUpdates[c][cRiaszto] = true;
		//else if(val == CAR_Olajcsere) CarUpdates[c][cOlajcsere] = true;
		else if(val == CAR_Kulcsok1) CarUpdates[c][cKulcsok][0] = true;
		else if(val == CAR_Kulcsok2) CarUpdates[c][cKulcsok][1] = true;
		else if(val == CAR_KERESKEDO) CarUpdates[c][cKereskedo] = true;
		else if(val == CAR_Detektor) CarUpdates[c][cDetektor] = true;
		else if(val == CAR_Tuningok) CarUpdates[c][cTuningok] = true;
		//else if(val == CAR_) CarUpdates[x][c] = true;
	}
}

stock BizUpdate(c, ...)
{
	if(!BizzInfo[c][bNeedUpdate])
		BizzInfo[c][bNeedUpdate] = true;
		
	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == BIZ_BNEV) BizzUpdates[c][bBNev] = true;
		else if(val == BIZ_Owned) BizzUpdates[c][bOwned] = true;
		else if(val == BIZ_Tulaj) BizzUpdates[c][bTulaj] = true;
		else if(val == BIZ_Owner) BizzUpdates[c][bOwner] = true;
		else if(val == BIZ_X) BizzUpdates[c][bEntranceX] = true;
		else if(val == BIZ_Y) BizzUpdates[c][bEntranceY] = true;
		else if(val == BIZ_Z) BizzUpdates[c][bEntranceZ] = true;
		else if(val == BIZ_ExitX) BizzUpdates[c][bExitX] = true;
		else if(val == BIZ_ExitY) BizzUpdates[c][bExitY] = true;
		else if(val == BIZ_ExitZ) BizzUpdates[c][bExitZ] = true;
		else if(val == BIZ_Message) BizzUpdates[c][bMessage] = true;
		else if(val == BIZ_Extortion) BizzUpdates[c][bExtortion] = true;
		else if(val == BIZ_LevelNeeded) BizzUpdates[c][bLevelNeeded] = true;
		else if(val == BIZ_BuyPrice) BizzUpdates[c][bBuyPrice] = true;
		else if(val == BIZ_EntranceCost) BizzUpdates[c][bEntranceCost] = true;
		else if(val == BIZ_Till) BizzUpdates[c][bTill] = true;
		else if(val == BIZ_Locked) BizzUpdates[c][bLocked] = true;
		else if(val == BIZ_Interior) BizzUpdates[c][bInterior] = true;
		else if(val == BIZ_Products) BizzUpdates[c][bProducts] = true;
		else if(val == BIZ_MaxProducts) BizzUpdates[c][bMaxProducts] = true;
		else if(val == BIZ_PriceProd) BizzUpdates[c][bPriceProd] = true;
		else if(val == BIZ_VanBelso) BizzUpdates[c][bVanBelso] = true;
		else if(val == BIZ_Till2) BizzUpdates[c][bTill2] = true;
		else if(val == BIZ_Szazalek) BizzUpdates[c][bSzazalek] = true;
		else if(val == BIZ_MTulajID) BizzUpdates[c][bMTulajID] = true;
		else if(val == BIZ_Aktivsag) BizzUpdates[c][bAktiv] = true;
		//else if(val == BIZ_) BizzUpdates[x][b] = true;
	}
}

stock HazUpdate(c, ...)
{
	if(!HouseInfo[c][hNeedUpdate])
		HouseInfo[c][hNeedUpdate] = true;
			

		
	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == HAZ_Owned) HouseUpdates[c][hOwned] = true;
		else if(val == HAZ_Owner) HouseUpdates[c][hOwner] = true;
		else if(val == HAZ_Tulaj) HouseUpdates[c][hTulaj] = true;
		else if(val == HAZ_X) HouseUpdates[c][hEntrancex] = true;
		else if(val == HAZ_Y) HouseUpdates[c][hEntrancey] = true;
		else if(val == HAZ_Z) HouseUpdates[c][hEntrancez] = true;
		else if(val == HAZ_Belso) HouseUpdates[c][hBelso] = true;
		else if(val == HAZ_Health) HouseUpdates[c][hHealth] = true;
		else if(val == HAZ_Armour) HouseUpdates[c][hArmour] = true;
		else if(val == HAZ_Value) HouseUpdates[c][hValue] = true;
		else if(val == HAZ_Hel) HouseUpdates[c][hHel] = true;
		else if(val == HAZ_Arm) HouseUpdates[c][hArm] = true;
		else if(val == HAZ_Lock) HouseUpdates[c][hLock] = true;
		else if(val == HAZ_Rooms) HouseUpdates[c][hRooms] = true;
		else if(val == HAZ_Rent) HouseUpdates[c][hRent] = true;
		else if(val == HAZ_Rentabil) HouseUpdates[c][hRentabil] = true;
		else if(val == HAZ_Takings) HouseUpdates[c][hTakings] = true;
		else if(val == HAZ_Date) HouseUpdates[c][hDate] = true;
		else if(val == HAZ_Csak) HouseUpdates[c][hCsak] = true;
		else if(val == HAZ_Csakneki) HouseUpdates[c][hCsakneki] = true;
		else if(val == HAZ_Kaja) HouseUpdates[c][hKaja] = true;
		else if(val == HAZ_Alma) HouseUpdates[c][hAlma] = true;
		else if(val == HAZ_Cigi) HouseUpdates[c][hCigi] = true;
		else if(val == HAZ_Kokain) HouseUpdates[c][hKokain] = true;
		else if(val == HAZ_Heroin) HouseUpdates[c][hHeroin] = true;
		else if(val == HAZ_Marihuana) HouseUpdates[c][hMarihuana] = true;
		else if(val == HAZ_Mati) HouseUpdates[c][hMati] = true;
		else if(val == HAZ_Tipus) HouseUpdates[c][hTipus] = true;
		else if(val == HAZ_Fegyver) HouseUpdates[c][hFegyver] = true;
		else if(val == HAZ_Loszer) HouseUpdates[c][hLoszer] = true;
		else if(val == HAZ_Mellenyek) HouseUpdates[c][hMellenyek] = true;
		else if(val == HAZ_Ruhak) HouseUpdates[c][hRuhak] = true;
		else if(val == HAZ_Butorok) HouseUpdates[c][Butorok] = true;
		else if(val == HAZ_Arany) HouseUpdates[c][hArany] = true;
		//else if(val == HAZ_) HouseUpdates[c][h] = true;
		else if(val == HAZ_Kulcsok1) HouseUpdates[c][hKulcsVan][0] = true;
		else if(val == HAZ_Kulcsok2) HouseUpdates[c][hKulcsVan][1] = true;
	}
}

stock GarazsUpdate(c, ...)
{
	if(!GarazsInfo[c][hNeedUpdate])
	{
		GarazsInfo[c][hNeedUpdate] = true;
		//print("hneedUpdate true");
	}	
	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == GARAZS_Tulajid) GarazsUpdates[c][hTulajid] = true;
		else if(val == GARAZS_Eladva) GarazsUpdates[c][hEladva] = true;
		else if(val == GARAZS_Tulaj) GarazsUpdates[c][hOwner] = true;
		else if(val == GARAZS_X) GarazsUpdates[c][hEntrancex] = true;
		else if(val == GARAZS_Y) GarazsUpdates[c][hEntrancey] = true;
		else if(val == GARAZS_Z) GarazsUpdates[c][hEntrancez] = true;
		else if(val == GARAZS_Ara) GarazsUpdates[c][hAra] = true;
		else if(val == GARAZS_Lock) GarazsUpdates[c][hLock] = true;
		else if(val == GARAZS_Date) GarazsUpdates[c][hDate] = true;
		else if(val == GARAZS_ANGLE) GarazsUpdates[c][hAngle]=true;
		else if(val == GARAZS_BELSO) GarazsUpdates[c][hBelso]=true;
		else if(val == GARAZS_HAZ) GarazsUpdates[c][hHaz]=true;

	}
}

#if defined FS_ENABLED_JUNKBUSTER
fpublic IsPlayerAdminCall(playerid)
	return Admin(playerid, 1);
//public IsPlayerAdminCallF(playerid)
//	return Admin(playerid, 1337);
#endif

fpublic MySQLUpdater()
{

	/*foreach(Jatekosok,z)
	{
	PlayerInfo[z][pCFigyelm] = 0;
	}*/
	FrakcioAdoStat();
	new darab, x;
	
	if(FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >1500000000)
	{
		new szeflog[256];
		format(szeflog, 256, "[rendszer]Pénzkivonás céljából kivett 50 misit az önkormányzat széfjébõl"); Log("Szef", szeflog);
		FrakcioSzef(FRAKCIO_ONKORMANYZAT, -50000000, 8);
	
	}
	for(x = 0; x < MAXHAZ; x++)
	{
		
		if(HouseInfo[x][hNeedUpdate])
			darab++;
	}
	if(darab > 0) Updater(1);

	darab = 0;
	for(x = 0; x < MAXBIZ; x++)
	{
		if(BizzInfo[x][bNeedUpdate])
			darab++;
	}
	if(darab > 0) Updater(2);

	darab = 0;
	for(x = 0; x < MAXVSKOCSI; x++)
	{
		if(CarInfo[x][cNeedUpdate])
			darab++;
	}
	if(darab > 0) Updater(3);
	
	darab = 0;
	for(x = 0; x < MAXTERULET; x++)
	{
		if(TeruletInfo[x][tNeedUpdate])
			darab++;
	}
	if(darab > 0) Updater(4);
	
	for(x = 0; x < MAXGARAZS; x++)
	{
		if(GarazsInfo[x][hNeedUpdate])
		{
			darab++;
		}
	}
	if(darab > 0) Updater(5);
	
	SaveStuff();
	INI_Save(INI_TYPE_FEGYVERRAKTAR, -1);
	SaveMelleny();
	SaveSwat();
	new berszefek = -1, query2[512];
	for(;++berszefek < MAX_BSZEF;)
	{
	    if(BerSzef[berszefek][bHasznalva])
	    {
	        query2[0] = EOS;
	        format(query2, sizeof(query2), "UPDATE berszefek SET mati = '%d', marihuana = '%d', heroin = '%d', kokain = '%d', penz = '%d', ido = '%d', kaja = '%d', cigi = '%d', ruha = '%d', arany = '%d' WHERE id = '%d'",
 			BerSzef[berszefek][bMati], BerSzef[berszefek][bMarihuana], BerSzef[berszefek][bHeroin],
 			BerSzef[berszefek][bKokain], BerSzef[berszefek][bPenz], BerSzef[berszefek][bIdo],
			BerSzef[berszefek][bKaja], BerSzef[berszefek][bCigi], BerSzef[berszefek][bRuha], BerSzef[berszefek][bArany], berszefek);
			doQuery(query2);
	    }
	}
	for(new id=0;id<MAX_KIKEPZO;id++)
	{
		if(Kikepzo[id][kIdo] < UnixTime && Kikepzo[id][kIdo] != NINCS)
		{
			foreach(Jatekosok,z)
			{
				if(GetPlayerVirtualWorld(z) == x+1000 && GetPlayerInterior(z) == 10)
				{
					//PlayerInfo[z][pCFalsePositive] = 1;
					SetPlayerPos(z, BizzInfo[BIZ_PB][bEntranceX],BizzInfo[BIZ_PB][bEntranceY],BizzInfo[BIZ_PB][bEntranceZ]),Kikepzoben[z] = false;
				}
					
			}
			
		}
	
	}
	SaveKikepzo();
	
	//garázs
	for(new garazs = 0; x < MAXGARAZS; garazs++)
	{
		if(GarazsInfo[garazs][Van] != 1 || !InaktivCucc(x, INAKTIV_GARAZS) || GarazsInfo[garazs][hEladva] == 0 || GarazsInfo[garazs][hHaz] != NINCS) continue;
		{
			new string[128];
			format(string,sizeof(string),"[INAKTÍV GARÁZS]%s %d, %.3f %.3f %.3f",GarazsInfo[garazs][hOwner],garazs,GarazsInfo[garazs][hEntrancex], GarazsInfo[garazs][hEntrancey], GarazsInfo[garazs][hEntrancez]);
			Log("Scripter",string);
			DestroyDynamicPickup(GarazsPickup[garazs]);
			GarazsPickup[garazs] = UjPickup(1272, 23, GarazsInfo[garazs][hEntrancex], GarazsInfo[garazs][hEntrancey], GarazsInfo[garazs][hEntrancez]);
			GarazsInfo[garazs][hEladva] = 0;
			new nev[MAX_PLAYER_NAME] = "Nincs_Tulaj";
			GarazsInfo[garazs][hOwner] = nev;
			GarazsInfo[garazs][hTulajid] = NINCS;
			GarazsInfo[garazs][hLock] = 0;
			new cost=25000000;
			if(GarazsInfo[garazs][hBelso] == 1)
				cost=15000000;
			if(GarazsInfo[garazs][hBelso] == 2)
				cost=20000000;
			if(GarazsInfo[garazs][hBelso] == 3)
				cost=25000000;
			
			GarazsInfo[garazs][hAra] = cost;
			GarazsUpdate(garazs, GARAZS_Eladva, GARAZS_Tulaj,GARAZS_Tulaj,GARAZS_Ara,GARAZS_Lock);
		}
		
	}
	SzerverAdatMentes();
	KocsiLopasListaGenerator();
}

fpublic Updater(type)
{
	new x, updated, folytat, query[MAX_MYSQL_STRING_UPDATER];
	if(type == 1)
	{
		
		if(UpdateFolytatodik[uHaz] != NINCS)
			folytat = UpdateFolytatodik[uHaz];

		for(x = folytat; x < MAXHAZ; x++)
		{
			if(!HouseInfo[x][hNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uHaz])
			{
				UpdateFolytatodik[uHaz] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}
			
			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Hazak);
		
			//if(HouseUpdate[x][h]) MysqlUpdateInt("", HouseInfo[x][h]);
			if(HouseUpdates[x][hOwned]) { MysqlUpdateInt(query, "Eladva", HouseInfo[x][hOwned]); HouseUpdates[x][hOwned] = false; }
			if(HouseUpdates[x][hTulaj]) { MysqlUpdateInt(query, "TulajID", HouseInfo[x][hTulaj]); HouseUpdates[x][hTulaj] = false; }
			if(HouseUpdates[x][hOwner]) { MysqlUpdateStr(query, "Tulaj", HouseInfo[x][hOwner]); HouseUpdates[x][hOwner] = false; }
			if(HouseUpdates[x][hCsak]) { MysqlUpdateInt(query, "Csak", HouseInfo[x][hCsak]); HouseUpdates[x][hCsak] = false; }
			if(HouseUpdates[x][hCsakneki]) { MysqlUpdateInt(query, "Neki", HouseInfo[x][hCsakneki]); HouseUpdates[x][hCsakneki] = false; }
			if(HouseUpdates[x][hEntrancex]) { MysqlUpdateFlo(query, "X", HouseInfo[x][hEntrancex]); HouseUpdates[x][hEntrancex] = false; }
			if(HouseUpdates[x][hEntrancey]) { MysqlUpdateFlo(query, "Y", HouseInfo[x][hEntrancey]); HouseUpdates[x][hEntrancey] = false; }
			if(HouseUpdates[x][hEntrancez]) { MysqlUpdateFlo(query, "Z", HouseInfo[x][hEntrancez]); HouseUpdates[x][hEntrancez] = false; }
			if(HouseUpdates[x][hValue]) { MysqlUpdateInt(query, "Ara", HouseInfo[x][hValue]); HouseUpdates[x][hValue] = false; }
			if(HouseUpdates[x][hRentabil]) { MysqlUpdateInt(query, "Kiado", HouseInfo[x][hRentabil]); HouseUpdates[x][hRentabil] = false; }
			if(HouseUpdates[x][hRent]) { MysqlUpdateInt(query, "KAra", HouseInfo[x][hRent]); HouseUpdates[x][hRent] = false; }
			if(HouseUpdates[x][hBelso]) { MysqlUpdateInt(query, "Belso", HouseInfo[x][hBelso]); HouseUpdates[x][hBelso] = false; }
			if(HouseUpdates[x][hHel]) { MysqlUpdateInt(query, "Elet", HouseInfo[x][hHel]); HouseUpdates[x][hHel] = false; }
			if(HouseUpdates[x][hArm]) { MysqlUpdateInt(query, "Pajzs", HouseInfo[x][hArm]); HouseUpdates[x][hArm] = false; }
			if(HouseUpdates[x][hTakings]) { MysqlUpdateInt(query, "Penz", HouseInfo[x][hTakings]); HouseUpdates[x][hTakings] = false; }
			if(HouseUpdates[x][hCigi]) { MysqlUpdateInt(query, "Cigi", HouseInfo[x][hCigi]); HouseUpdates[x][hCigi] = false; }
			if(HouseUpdates[x][hKaja]) { MysqlUpdateInt(query, "Kaja", HouseInfo[x][hKaja]); HouseUpdates[x][hKaja] = false; }
			if(HouseUpdates[x][hAlma]) { MysqlUpdateInt(query, "Alma", HouseInfo[x][hAlma]); HouseUpdates[x][hAlma] = false; }
			if(HouseUpdates[x][hKokain]) { MysqlUpdateInt(query, "Kokain", HouseInfo[x][hKokain]); HouseUpdates[x][hKokain] = false; }
			if(HouseUpdates[x][hHeroin]) { MysqlUpdateInt(query, "Heroin", HouseInfo[x][hHeroin]); HouseUpdates[x][hHeroin] = false; }
			if(HouseUpdates[x][hMarihuana]) { MysqlUpdateInt(query, "Marihuana", HouseInfo[x][hMarihuana]); HouseUpdates[x][hMarihuana] = false; }
			if(HouseUpdates[x][hMati]) { MysqlUpdateInt(query, "Material", HouseInfo[x][hMati]); HouseUpdates[x][hMati] = false; }
			if(HouseUpdates[x][hLock]) { MysqlUpdateInt(query, "Zarva", HouseInfo[x][hLock]); HouseUpdates[x][hLock] = false; }
			if(HouseUpdates[x][hDate]) { MysqlUpdateInt(query, "UtolsoBelepes", HouseInfo[x][hDate]); HouseUpdates[x][hDate] = false; }
			if(HouseUpdates[x][hTipus]) { MysqlUpdateInt(query, "Tipus", HouseInfo[x][hTipus]); HouseUpdates[x][hTipus] = false; }
			if(HouseUpdates[x][hArany]) { MysqlUpdateInt(query, "Arany", HouseInfo[x][hArany]); HouseUpdates[x][hArany] = false; }
			
			if(HouseUpdates[x][hFegyver])
			{
				_tmpString = "";
				for(new s = 0; s < 10; s++)
				{
					if(HouseInfo[x][hFegyver][s] > 0)
					{
						if(!strlen(_tmpString))
							format(_tmpString, 128, "%d", HouseInfo[x][hFegyver][s]);
						else
							format(_tmpString, 128, "%s,%d", _tmpString, HouseInfo[x][hFegyver][s]);
					}
				}
				
				MysqlUpdateStr(query, "Fegyverek", _tmpString);
				
				HouseUpdates[x][hFegyver] = false;
			}
			
			if(HouseUpdates[x][hLoszer])
			{
				_tmpString = "";
				for(new s = 0; s < 10; s++)
				{
					if(HouseInfo[x][hLoszerTipus][s] > 0 && HouseInfo[x][hLoszerMennyiseg][s] > 0)
					{
						if(!strlen(_tmpString))
							format(_tmpString, 128, "%d:%d", HouseInfo[x][hLoszerTipus][s], HouseInfo[x][hLoszerMennyiseg][s]);
						else
							format(_tmpString, 128, "%s,%d:%d", _tmpString, HouseInfo[x][hLoszerTipus][s], HouseInfo[x][hLoszerMennyiseg][s]);
					}
				}
				
				MysqlUpdateStr(query, "Loszerek", _tmpString);
				
				HouseUpdates[x][hLoszer] = false;
			}
			
			if(HouseUpdates[x][hMellenyek])
			{
				new cuccok[90], z;
				format(cuccok, 90, "%d", HouseInfo[x][hMellenyek][0]);
				for(z = 1; z < 10; z++)
					format(cuccok, 90, "%s,%d", cuccok, HouseInfo[x][hMellenyek][z]);
				MysqlUpdateStr(query, "Mellenyek", cuccok); 
				HouseUpdates[x][hMellenyek] = false;
			}
			if(HouseUpdates[x][hRuhak]) 
			{
				new cuccok[90], z;
				format(cuccok, 90, "%d", HouseInfo[x][hRuhak][0]);
				for(z = 1; z < 10; z++)
					format(cuccok, 90, "%s,%d", cuccok, HouseInfo[x][hRuhak][z]);
				MysqlUpdateStr(query, "Ruhak", cuccok); 
				HouseUpdates[x][hRuhak] = false;
			}
			if(HouseUpdates[x][Butorok]) { MysqlUpdateInt(query, "Butorok", HouseInfo[x][Butorok]); HouseUpdates[x][Butorok] = false; }
			if(HouseUpdates[x][hKulcsVan][0] || HouseUpdates[x][hKulcsVan][1])
			{
				new kulcsok[54];
				Format(kulcsok, "%d,%d", HouseInfo[x][hKulcsVan][0],HouseInfo[x][hKulcsVan][1]);
				MysqlUpdateStr(query, "HazKulcsok", kulcsok);
				HouseUpdates[x][hKulcsVan][0] = false;
				HouseUpdates[x][hKulcsVan][1] = false;
			}
			MysqlFinalUpdate(query, x);
			
			HouseInfo[x][hNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uHaz])
			UpdateFolytatodik[uHaz] = NINCS;
	}
	if(type == 2)
	{
		if(UpdateFolytatodik[uBiz] != NINCS)
			folytat = UpdateFolytatodik[uBiz];

		for(x = folytat; x < MAXBIZ; x++)
		{
			if(!BizzInfo[x][bNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uBiz])
			{
				UpdateFolytatodik[uBiz] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}
			
			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Bizek);
		
			//if(BizzUpdates[x][b]) MysqlUpdateInt("", BizzInfo[x][b]);
			//if(val == BIZ_BNEV) BizzUpdates[c][bBNev] = true;
			if(BizzUpdates[x][bBNev]) { MysqlUpdateStr(query, "Biz", BizzInfo[x][bBNev]); BizzUpdates[x][bBNev] = false; }
			if(BizzUpdates[x][bMessage]) { MysqlUpdateStr(query, "Nev", BizzInfo[x][bMessage]); BizzUpdates[x][bMessage] = false; }
			if(BizzUpdates[x][bOwned]) { MysqlUpdateInt(query, "Eladva", BizzInfo[x][bOwned]); BizzUpdates[x][bOwned] = false; }
			if(BizzUpdates[x][bTulaj]) { MysqlUpdateInt(query, "TulajID", BizzInfo[x][bTulaj]); BizzUpdates[x][bTulaj] = false; }
			if(BizzUpdates[x][bOwner]) { MysqlUpdateStr(query, "Tulaj", BizzInfo[x][bOwner]); BizzUpdates[x][bOwner] = false; }
			if(BizzUpdates[x][bExtortion]) { MysqlUpdateStr(query, "Extortion", BizzInfo[x][bExtortion]); BizzUpdates[x][bExtortion] = false; }
			if(BizzUpdates[x][bMTulajID]) { MysqlUpdateInt(query, "MTulajID", BizzInfo[x][bMTulajID]); BizzUpdates[x][bMTulajID] = false; }
			if(BizzUpdates[x][bEntranceX]) { MysqlUpdateFlo(query, "BeX", BizzInfo[x][bEntranceX]); BizzUpdates[x][bEntranceX] = false; }
			if(BizzUpdates[x][bEntranceY]) { MysqlUpdateFlo(query, "BeY", BizzInfo[x][bEntranceY]); BizzUpdates[x][bEntranceY] = false; }
			if(BizzUpdates[x][bEntranceZ]) { MysqlUpdateFlo(query, "BeZ", BizzInfo[x][bEntranceZ]); BizzUpdates[x][bEntranceZ] = false; }
			if(BizzUpdates[x][bExitX]) { MysqlUpdateFlo(query, "KiX", BizzInfo[x][bExitX]); BizzUpdates[x][bExitX] = false; }
			if(BizzUpdates[x][bExitY]) { MysqlUpdateFlo(query, "KiY", BizzInfo[x][bExitY]); BizzUpdates[x][bExitY] = false; }
			if(BizzUpdates[x][bExitZ]) { MysqlUpdateFlo(query, "KiZ", BizzInfo[x][bExitZ]); BizzUpdates[x][bExitZ] = false; }
			if(BizzUpdates[x][bLevelNeeded]) { MysqlUpdateInt(query, "Szint", BizzInfo[x][bLevelNeeded]); BizzUpdates[x][bLevelNeeded] = false; }
			if(BizzUpdates[x][bBuyPrice]) { MysqlUpdateInt(query, "Ara", BizzInfo[x][bBuyPrice]); BizzUpdates[x][bBuyPrice] = false; }
			if(BizzUpdates[x][bEntranceCost]) { MysqlUpdateInt(query, "BelepesAra", BizzInfo[x][bEntranceCost]); BizzUpdates[x][bEntranceCost] = false; }
			if(BizzUpdates[x][bTill]) { MysqlUpdateInt(query, "Kassza", BizzInfo[x][bTill]); BizzUpdates[x][bTill] = false; }
			if(BizzUpdates[x][bTill2]) { MysqlUpdateInt(query, "Kassza2", BizzInfo[x][bTill2]); BizzUpdates[x][bTill2] = false; }
			if(BizzUpdates[x][bSzazalek]) { MysqlUpdateInt(query, "Kassza2Percent", BizzInfo[x][bSzazalek]); BizzUpdates[x][bSzazalek] = false; }
			if(BizzUpdates[x][bLocked]) { MysqlUpdateInt(query, "Zarva", BizzInfo[x][bLocked]); BizzUpdates[x][bLocked] = false; }
			if(BizzUpdates[x][bInterior]) { MysqlUpdateInt(query, "Interior", BizzInfo[x][bInterior]); BizzUpdates[x][bInterior] = false; }
			if(BizzUpdates[x][bVanBelso]) { MysqlUpdateInt(query, "VanBelso", BizzInfo[x][bVanBelso]); BizzUpdates[x][bVanBelso] = false; }
			if(BizzUpdates[x][bProducts]) { MysqlUpdateInt(query, "Prod", BizzInfo[x][bProducts]); BizzUpdates[x][bProducts] = false; }
			if(BizzUpdates[x][bMaxProducts]) { MysqlUpdateInt(query, "MaxProd", BizzInfo[x][bMaxProducts]); BizzUpdates[x][bMaxProducts] = false; }
			if(BizzUpdates[x][bPriceProd]) { MysqlUpdateInt(query, "ProdPrice", BizzInfo[x][bPriceProd]); BizzUpdates[x][bPriceProd] = false; }
			
			//bizaktiv
			if(BizzUpdates[x][bAktiv])
			{
				new szoveg[30];
				format(szoveg, sizeof(szoveg), "%d,%d,%d,%d",BizzInfo[x][bHeti1],BizzInfo[x][bHeti2],BizzInfo[x][bHavi1],BizzInfo[x][bHavi2]);
				MysqlUpdateStr(query, "Aktivsag", szoveg); 
				
				format(szoveg, sizeof(szoveg), "%d,%d",BizzInfo[x][bIdo1],BizzInfo[x][bIdo2]);
				MysqlUpdateStr(query, "Belepes", szoveg); 
				BizzUpdates[x][bAktiv] = false;
			}
			
			MysqlFinalUpdate(query, x);
			
			BizzInfo[x][bNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uBiz])
			UpdateFolytatodik[uBiz] = NINCS;
	}
	if(type == 3)
	{
		if(UpdateFolytatodik[uKocsi] != NINCS)
			folytat = UpdateFolytatodik[uKocsi];

		for(x = folytat; x < MAXVSKOCSI; x++)
		{
			if(!CarInfo[x][cNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uKocsi])
			{
				UpdateFolytatodik[uKocsi] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}
			
			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Kocsik);

			//if(CarUpdates[x][c]) MysqlUpdateInt("", CarInfo[x][c]);
			if(CarUpdates[x][cOwned]) { MysqlUpdateInt(query, "Eladva", CarInfo[x][cOwned]); CarUpdates[x][cOwned] = false; }
			if(CarUpdates[x][cTulaj]) { MysqlUpdateInt(query, "TulajID", CarInfo[x][cTulaj]); CarUpdates[x][cTulaj] = false; }
			if(CarUpdates[x][cOwner]) { MysqlUpdateStr(query, "Tulaj", CarInfo[x][cOwner]); CarUpdates[x][cOwner] = false; }
			if(CarUpdates[x][cModel]) { MysqlUpdateInt(query, "Model", CarInfo[x][cModel]); CarUpdates[x][cModel] = false; }
			if(CarUpdates[x][cValue]) { MysqlUpdateInt(query, "Ara", CarInfo[x][cValue]); CarUpdates[x][cValue] = false; }
			if(CarUpdates[x][cLocationx]) { MysqlUpdateFlo(query, "LocX", CarInfo[x][cLocationx]); CarUpdates[x][cLocationx] = false; }
			if(CarUpdates[x][cLocationy]) { MysqlUpdateFlo(query, "LocY", CarInfo[x][cLocationy]); CarUpdates[x][cLocationy] = false; }
			if(CarUpdates[x][cLocationz]) { MysqlUpdateFlo(query, "LocZ", CarInfo[x][cLocationz]); CarUpdates[x][cLocationz] = false; }
			if(CarUpdates[x][cAngle]) { MysqlUpdateFlo(query, "Angle", CarInfo[x][cAngle]); CarUpdates[x][cAngle] = false; }
			if(CarUpdates[x][cInt]) { MysqlUpdateFlo(query, "LocInt", CarInfo[x][cInt]); CarUpdates[x][cInt] = false; }
			if(CarUpdates[x][cVW]) { MysqlUpdateFlo(query, "LocVW", CarInfo[x][cVW]); CarUpdates[x][cVW] = false; }
			if(CarUpdates[x][cColorOne]) { MysqlUpdateInt(query, "Szin1", CarInfo[x][cColorOne]); CarUpdates[x][cColorOne] = false; }
			if(CarUpdates[x][cColorTwo]) { MysqlUpdateInt(query, "Szin2", CarInfo[x][cColorTwo]); CarUpdates[x][cColorTwo] = false; }
			if(CarUpdates[x][cLock]) { MysqlUpdateInt(query, "Zarva", CarInfo[x][cLock]); CarUpdates[x][cLock] = false; }
			if(CarUpdates[x][cDate]) { MysqlUpdateInt(query, "UtolsoBelepes", CarInfo[x][cDate]); CarUpdates[x][cDate] = false; }
			if(CarUpdates[x][cTuning]) { MysqlUpdateInt(query, "Tuning", CarInfo[x][cTuning]); CarUpdates[x][cTuning] = false; }
			if(CarUpdates[x][cKerek]) { MysqlUpdateInt(query, "Kerek", CarInfo[x][cKerek]); CarUpdates[x][cKerek] = false; }
			if(CarUpdates[x][cMatrica]) { MysqlUpdateInt(query, "Matrica", CarInfo[x][cMatrica]); CarUpdates[x][cMatrica] = false; }//Valaki ezt törölte... Ezért nem mentett restartkor
			if(CarUpdates[x][cKm]) { MysqlUpdateFlo(query, "Km", KmSzamol[CarInfo[x][cId]]);  /*MysqlUpdateFlo(query, "Allapot", KocsiAllapot[CarInfo[x][cId]]);*/ MysqlUpdateFlo(query, "Gumi", CarPart[x][cKerekek]);  MysqlUpdateFlo(query, "OlajCsere", CarPart[x][cMotorolaj]);  CarUpdates[x][cKm] = false; }
			if(CarUpdates[x][cNeon]) { MysqlUpdateInt(query, "Neon", CarInfo[x][cNeon]); CarUpdates[x][cNeon] = false; }
			if(CarUpdates[x][cHidraulika]) { MysqlUpdateInt(query, "Hidraulika", CarInfo[x][cHidraulika]); CarUpdates[x][cHidraulika] = false; }
			if(CarUpdates[x][cRiaszto]) { MysqlUpdateInt(query, "Riaszto", CarInfo[x][cRiaszto]); CarUpdates[x][cRiaszto] = false; }
			if(CarUpdates[x][cDetektor]) { MysqlUpdateInt(query, "Detektor", CarInfo[x][cDetektor]); CarUpdates[x][cDetektor] = false; }
			if(CarUpdates[x][cKulcsok][0] || CarUpdates[x][cKulcsok][1]) { new kulcsok[54]; Format(kulcsok, "%d,%d", CarInfo[x][cKulcsok][0],CarInfo[x][cKulcsok][1]); MysqlUpdateStr(query, "Kulcsok", kulcsok); }
			if(CarUpdates[x][cKereskedo]) { MysqlUpdateInt(query, "Kereskedo", CarInfo[x][cKereskedo]); CarUpdates[x][cKereskedo] = false; }
			if(CarUpdates[x][cTuningok]) { new tunes[128]; Format(tunes, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", CarInfo[x][cTuningok][0], CarInfo[x][cTuningok][1], CarInfo[x][cTuningok][2], CarInfo[x][cTuningok][3], CarInfo[x][cTuningok][4], CarInfo[x][cTuningok][5], CarInfo[x][cTuningok][6], CarInfo[x][cTuningok][7], CarInfo[x][cTuningok][8], CarInfo[x][cTuningok][9], CarInfo[x][cTuningok][10], CarInfo[x][cTuningok][11], CarInfo[x][cTuningok][12], CarInfo[x][cTuningok][13], CarInfo[x][cTuningok][14]); MysqlUpdateStr(query, "Tuningok", tunes); }
			MysqlFinalUpdate(query, x);
			
			CarInfo[x][cNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uKocsi])
			UpdateFolytatodik[uKocsi] = NINCS;
	}
	
	if(type == 4)
	{
		if(UpdateFolytatodik[uTerulet] != NINCS)
			folytat = UpdateFolytatodik[uTerulet];

		for(x = folytat; x < MAXTERULET; x++)
		{
			if(!TeruletInfo[x][tNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uTerulet])
			{
				UpdateFolytatodik[uTerulet] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}
			
			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Terulet);

			//if(TeruletUpdates[x][t]) { MysqlUpdateInt(query, "", TeruletInfo[x][t]); TeruletUpdates[x][t] = false; }
			if(TeruletUpdates[x][tNev]) { MysqlUpdateStr(query, "Nev", TeruletInfo[x][tNev]); TeruletUpdates[x][tNev] = false; }
			if(TeruletUpdates[x][tMinX]) { MysqlUpdateFlo(query, "MinX", TeruletInfo[x][tMinX]); TeruletUpdates[x][tMinX] = false; }
			if(TeruletUpdates[x][tMaxX]) { MysqlUpdateFlo(query, "MaxX", TeruletInfo[x][tMaxX]); TeruletUpdates[x][tMaxX] = false; }
			if(TeruletUpdates[x][tMinY]) { MysqlUpdateFlo(query, "MinY", TeruletInfo[x][tMinY]); TeruletUpdates[x][tMinY] = false; }
			if(TeruletUpdates[x][tMaxY]) { MysqlUpdateFlo(query, "MaxY", TeruletInfo[x][tMaxY]); TeruletUpdates[x][tMaxY] = false; }
			/*if(TeruletUpdates[x][tHaszon])
			{
				new str[128];
				for(new k = 0; k < 5; k++)
				{
					if(k == 0) format(str, 64, "%d", TeruletInfo[x][tHaszon][0]);
					else format(str, 64, "%s,%d", TeruletInfo[x][tHaszon][k]);
				}
				MysqlUpdateStr(query, "Haszon", str);
				TeruletUpdates[x][tHaszon] = false;
			}
			if(TeruletUpdates[x][tHaszonMennyi])
			{
				MysqlUpdateStr(query, "HaszonMennyi", TeruletInfo[x][tHaszonMennyi]);
				TeruletUpdates[x][tHaszonMennyi] = false;
			}*/
			if(TeruletUpdates[x][tHaszonIdo]) { MysqlUpdateInt(query, "HaszonIdo", TeruletInfo[x][tHaszonIdo]); TeruletUpdates[x][tHaszonIdo] = false; }
			if(TeruletUpdates[x][tFoglalva]) { MysqlUpdateInt(query, "Foglalva", TeruletInfo[x][tFoglalva]); TeruletUpdates[x][tFoglalva] = false; }
			if(TeruletUpdates[x][tTulaj]) { MysqlUpdateInt(query, "Tulaj", TeruletInfo[x][tTulaj]); TeruletUpdates[x][tTulaj] = false; }

			MysqlFinalUpdate(query, x);
			
			TeruletInfo[x][tNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uTerulet])
			UpdateFolytatodik[uTerulet] = NINCS;
	}
	if(type == 5)
	{
		
		if(UpdateFolytatodik[uGarazs] != NINCS)
			folytat = UpdateFolytatodik[uGarazs];
		
		for(x = folytat; x < MAXGARAZS; x++)
		{
			if(!GarazsInfo[x][hNeedUpdate]) continue;
		
			if(updated >= UpdatePerSec[uGarazs])
			{
				UpdateFolytatodik[uGarazs] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}
			
			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Garazs);
			
			if(GarazsUpdates[x][hEladva]) { MysqlUpdateInt(query, "Eladva", GarazsInfo[x][hEladva]); GarazsUpdates[x][hEladva] = false; }
			if(GarazsUpdates[x][hTulajid]) { MysqlUpdateInt(query, "TulajID", GarazsInfo[x][hTulajid]); GarazsUpdates[x][hTulajid] = false; }
			if(GarazsUpdates[x][hOwner]) { MysqlUpdateStr(query, "Tulaj", GarazsInfo[x][hOwner]); GarazsUpdates[x][hOwner] = false; }
			if(GarazsUpdates[x][hCsak]) { MysqlUpdateInt(query, "Csak", GarazsInfo[x][hCsak]); GarazsUpdates[x][hCsak] = false; }
			if(GarazsUpdates[x][hCsakneki]) { MysqlUpdateInt(query, "Neki", GarazsInfo[x][hCsakneki]); GarazsUpdates[x][hCsakneki] = false; }
			if(GarazsUpdates[x][hEntrancex]) { MysqlUpdateFlo(query, "X", GarazsInfo[x][hEntrancex]); GarazsUpdates[x][hEntrancex] = false; }
			if(GarazsUpdates[x][hEntrancey]) { MysqlUpdateFlo(query, "Y", GarazsInfo[x][hEntrancey]); GarazsUpdates[x][hEntrancey] = false; }
			if(GarazsUpdates[x][hEntrancez]) { MysqlUpdateFlo(query, "Z", GarazsInfo[x][hEntrancez]); GarazsUpdates[x][hEntrancez] = false; }
			if(GarazsUpdates[x][hAra]) { MysqlUpdateInt(query, "Ara", GarazsInfo[x][hAra]); GarazsUpdates[x][hAra] = false; }
			if(GarazsUpdates[x][hRentabil]) { MysqlUpdateInt(query, "Kiado", GarazsInfo[x][hRentabil]); GarazsUpdates[x][hRentabil] = false; }
			if(GarazsUpdates[x][hRent]) { MysqlUpdateInt(query, "KAra", GarazsInfo[x][hRent]); GarazsUpdates[x][hRent] = false; }
			if(GarazsUpdates[x][hLock]) { MysqlUpdateInt(query, "Zarva", GarazsInfo[x][hLock]); GarazsUpdates[x][hLock] = false; }
			if(GarazsUpdates[x][hDate]) { MysqlUpdateInt(query, "UtolsoBelepes", GarazsInfo[x][hDate]); GarazsUpdates[x][hDate] = false; }
			if(GarazsUpdates[x][hAngle]) { MysqlUpdateFlo(query, "Angle", GarazsInfo[x][hAngle]); GarazsUpdates[x][hAngle] = false; }		
			if(GarazsUpdates[x][hHaz]) { MysqlUpdateInt(query, "Haz", GarazsInfo[x][hHaz]); GarazsUpdates[x][hHaz] = false; }					
			if(GarazsUpdates[x][hBelso]) { MysqlUpdateInt(query, "Belso", GarazsInfo[x][hBelso]); GarazsUpdates[x][hBelso] = false; }		
	
			MysqlFinalUpdate(query, x);
			
			GarazsInfo[x][hNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uGarazs])
			UpdateFolytatodik[uGarazs] = NINCS;
	}
}

fpublic BackupTimer()
{
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;

		BackupTime[x] += BackTime;
		if(BackupTime[x] >= BackTimeSave)
		{
			PlayerSave(x);
			BackupTime[x] = 0;
		}
	}

	return 1;
}

fpublic OnPlayerMoneyChange(playerid, newmoney, oldmoney)
{
	if(newmoney == PlayerInfo[playerid][pID])
		return;

	if(oldmoney >= 0)
	{
		if(newmoney - oldmoney > 100)
		{
			if(Logged(playerid))
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "ClassRPG: %s ki lett bannolva a rendszer által | Oka: Pénz cheat", PlayerName(playerid));
				SeeBan(playerid, 0, NINCS, "Pénz cheat");
			}
			else
			{
				Msg(playerid, "Menjél máshova cheatelni!");
				SeeBan(playerid, 0, NINCS, "Pénz cheat", true);
			}
		}
	}
}

fpublic OnPlayerWeaponChange(playerid, newweapon, oldweapon)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(oldweapon == 9)
	{
	    if(PlayerInfo[playerid][pFavagoMunkazik])
	    {
		    PlayerInfo[playerid][pFavagoMunkazik] = false;
			KillTimer(PlayerInfo[playerid][pFavagoMunkaTimer]);
			PlayerTextDrawHide(playerid, FaVagasTD);
			Msg(playerid, "Ne bugoltasd a favágást, mert bajban leszel!");
			return true;
		}
	}
	
	// login elõtti fegyver cheat
	if(!Logged(playerid) && newweapon > 0)
		return format(_tmpString, 128, "[L] Fegyver cheat (%s)", GetGunName(newweapon)), SeeBan(playerid, 0, NINCS, _tmpString, .szoveg = true);
	
	// minimum szint elõtti fegyverviselés
	if(Szint(playerid) < WEAPON_MIN_LEVEL && newweapon > 0 && newweapon != 46 && !UtosFegyver(newweapon))
		return format(_tmpString, 128, "[S] Fegyver cheat (%s)", GetGunName(newweapon)), SeeBan(playerid, 0, NINCS, _tmpString, .szoveg = true);
	
	// tiltott fegyverek
	if((35 <= newweapon <= 38 || 43 <= newweapon <= 45 || newweapon == 26 || newweapon == 28 || newweapon == 32) && !IsHitman(playerid) && !Admin(playerid, 1337))
	{
		new string[64];
		format(string, 64, "[T] Fegyver cheat (%s)", GetGunName(newweapon));
		SeeBan(playerid, 0, NINCS, string, .szoveg = true);
	}
	
	if(newweapon && newweapon != PlayerWeapons[playerid][pArmed])
	{
		if(PlayerState[playerid] == PLAYER_STATE_ONFOOT || PlayerState[playerid] == PLAYER_STATE_DRIVER)
		{
			//SendFormatMessage(playerid, COLOR_WHITE, "new: %d, armed: %d, safetime: %d-%d (%d)", newweapon, PlayerWeapons[playerid][pArmed], PlayerWeapons[playerid][pArmedSafeTime], UnixTime, PlayerWeapons[playerid][pArmedSafeTime]-UnixTime);
			WeaponArm(playerid);
			//PlayerInfo[playerid][pFavagozik] = false;
		}
	}
	else if(!newweapon && PlayerWeapons[playerid][pArmed] && PlayerWeapons[playerid][pArmedSafeTime] < UnixTime)
	{
		//SendFormatMessage(playerid, COLOR_WHITE, "new: %d, armed: %d, safetime: %d-%d (%d)", newweapon, PlayerWeapons[playerid][pArmed], PlayerWeapons[playerid][pArmedSafeTime], UnixTime, PlayerWeapons[playerid][pArmedSafeTime]-UnixTime);
		WeaponArm(playerid);
	}
	
	if(Logged(playerid) && PlayerInfo[playerid][pTextDrawKeseltet] == NINCS && WeaponsAktiv[playerid])
	{
		UpdateWeaponHud(playerid);
	}
	
	return 1;
}

fpublic OnPlayerHealthChange(playerid, Float:newhealth, Float:oldhealth)
{
	/*if(SpawnVedelem[playerid] > 0 && newhealth < 150.0) SetHealth(playerid, 150.0);
	else*/
	if(Logged(playerid) && !Paintballozik[playerid] && 15.0 > newhealth > 0.1 && !Animban[playerid])
	{
		AnimbaRak(playerid);
		SetHealth(playerid, 15.0);
	}
	
	if(Logged(playerid) && PlayerInfo[playerid][pTextDrawKeseltet] == NINCS && HUDAktiv[playerid])
	{
		UpdateHealthHud(playerid);
	}
	
	return 1;
}

stock GetHealthBarErtek(Float:elet)
{
	if(elet >= 150)
	{
		return 100;
	}
	else if(150 > elet && elet >= 130)
	{
		return 95;
	}
	else if(130 > elet && elet >= 100)
	{
		return 90;
	}
	else if(100 > elet && elet >= 90)
	{
		return 85;
	}
	else if(90 > elet && elet >= 85)
	{
		return 80;
	}
	else if(85 > elet && elet >= 75)
	{
		return 75;
	}
	else if(75 > elet && elet >= 70)
	{
		return 70;
	}
	else if(70 > elet && elet >= 65)
	{
		return 65;
	}
	else if(65 > elet && elet >= 60)
	{
		return 60;
	}
	else if(60 > elet && elet >= 55)
	{
		return 55;
	}
	else if(55 > elet && elet >= 50)
	{
		return 50;
	}
	else if(50 > elet && elet >= 45)
	{
		return 45;
	}
	else if(45 > elet && elet >= 40)
	{
		return 40;
	}
	else if(40 > elet && elet >= 35)
	{
		return 35;
	}
	else if(35 > elet && elet >= 30)
	{
		return 30;
	}
	else if(30 > elet && elet >= 25)
	{
		return 25;
	}
	else if(25 > elet && elet >= 20)
	{
		return 20;
	}
	else if(20 > elet && elet >= 15)
	{
		return 15;
	}
	else if(15 > elet && elet >= 10)
	{
		return 10;
	}
	else if(10 > elet && elet >= 5)
	{
		return 5;
	}
	else
	{
		return 0;
	}
	
}

fpublic OnPlayerArmourChange(playerid, Float:newarmour, Float:oldarmour)
{
	if(Logged(playerid) && PlayerInfo[playerid][pTextDrawKeseltet] == NINCS && HUDAktiv[playerid])
	{
		UpdateArmorHud(playerid);
	}
	return 1;
}

stock GetArmorBarErtek(Float:elet)
{
	if(elet >= 150)
	{
		return 100;
	}
	else if(150 > elet && elet >= 130)
	{
		return 100;
	}
	else if(130 > elet && elet >= 100)
	{
		return 100;
	}
	else if(100 > elet && elet >= 95)
	{
		return 95;
	}
	else if(95 > elet && elet >= 90)
	{
		return 90;
	}
	else if(90 > elet && elet >= 85)
	{
		return 85;
	}
	else if(85 > elet && elet >= 80)
	{
		return 80;
	}
	else if(80 > elet && elet >= 75)
	{
		return 75;
	}
	else if(75 > elet && elet >= 70)
	{
		return 70;
	}
	else if(70 > elet && elet >= 65)
	{
		return 65;
	}
	else if(65 > elet && elet >= 60)
	{
		return 60;
	}
	else if(60 > elet && elet >= 55)
	{
		return 55;
	}
	else if(55 > elet && elet >= 50)
	{
		return 50;
	}
	else if(50 > elet && elet >= 45)
	{
		return 45;
	}
	else if(45 > elet && elet >= 40)
	{
		return 40;
	}
	else if(40 > elet && elet >= 35)
	{
		return 35;
	}
	else if(35 > elet && elet >= 30)
	{
		return 30;
	}
	else if(30 > elet && elet >= 25)
	{
		return 25;
	}
	else if(25 > elet && elet >= 20)
	{
		return 20;
	}
	else if(20 > elet && elet >= 15)
	{
		return 15;
	}
	else if(15 > elet && elet >= 10)
	{
		return 10;
	}
	else if(10 > elet && elet >= 5)
	{
		return 5;
	}
	else
	{
		return 0;
	}
	
}

fpublic OnPlayerAmmoChange(playerid, newammo, oldammo)
{
	if(PlayerState[playerid] != PLAYER_STATE_ONFOOT && PlayerState[playerid] != PLAYER_STATE_DRIVER)
		return 1;
	//print("fut");
	
	new weapon = GetPlayerWeapon(playerid);
	
	if(newammo == 197 && oldammo == 198 && PlayerWeaponsAC[playerid][pLastOpac][0] == 198 && PlayerWeaponsAC[playerid][pLastOpac][1] == 197
		|| newammo == 198 && oldammo == 197 && PlayerWeaponsAC[playerid][pLastOpac][0] == 197 && PlayerWeaponsAC[playerid][pLastOpac][1] == 198)
		WeaponProblem(playerid, WEAPONS_PROBLEM_AMMO_INFINITE);
		
	else if(newammo > 0 && oldammo > 0 && WeaponData[weapon][wType] != WEAPON_TYPE_HAND && ((newammo == PlayerWeaponsAC[playerid][pLastOpac][0] && oldammo == PlayerWeaponsAC[playerid][pLastOpac][1]) || (oldammo == PlayerWeaponsAC[playerid][pLastOpac][0] && newammo == PlayerWeaponsAC[playerid][pLastOpac][1])) && ++PlayerWeaponsAC[playerid][pLastOpac][2] >= 3)
		WeaponProblem(playerid, WEAPONS_PROBLEM_AMMO_INFINITE);
	
	if(pGumilovedek[playerid] != NINCS && WeaponArmed(playerid) == pGumilovedek[playerid])
	{
		//WeaponAmmo(playerid, PlayerWeapons[playerid][pArmed]) = oldammo;
		SetGumiLovedek(playerid, weapon, newammo, "=");
		if(GetGumiLovedek(playerid, weapon) <= 0)
		{
			SetGumiLovedek(playerid, weapon, 0, "=");
			pGumilovedek[playerid] = NINCS;
			Msg(playerid, "Elfogyott a gumilövedéked!");
		}

		return 1;
	}

	PlayerWeaponsAC[playerid][pLastOpac][0] = newammo;
	PlayerWeaponsAC[playerid][pLastOpac][1] = oldammo;
	
	if(PlayerWeapons[playerid][pArmed])
	{

		if(newammo < 1)
		{
			new wep, ammo;
			GetPlayerWeaponData(playerid, WeaponSlot(WeaponArmed(playerid)), wep, ammo);

			if(!wep || ammo < 1)
				WeaponAmmo(playerid, PlayerWeapons[playerid][pArmed]) = 0;
			//else
			//	WeaponArm(playerid);
			WeaponArm(playerid);
		}
		else if((WeaponAmmo(playerid, PlayerWeapons[playerid][pArmed]) - newammo) >= 0)
		{
			if(GetPlayerWeapon(playerid) == WeaponArmed(playerid))	
				WeaponAmmo(playerid, WeaponArmed(playerid)) = newammo;
		}
		else if(newammo > oldammo || newammo > WeaponAmmo(playerid, PlayerWeapons[playerid][pArmed]))
			WeaponProblem(playerid, WEAPONS_PROBLEM_AMMO_MORE);
	}
	else if(newammo > 0)
		WeaponProblem(playerid, WEAPONS_PROBLEM_AMMO_ARM);
		
	if(Logged(playerid) && PlayerInfo[playerid][pTextDrawKeseltet] == NINCS && WeaponsAktiv[playerid])
	{
		UpdateAmmoHud(playerid);
	}
		
	return 1;
}

stock GetGumiLovedek(playerid, weapon)
{
	switch(weapon)
	{
		case WEAPON_MP5:
		{
			return Gumilovedek[playerid][fxMP5];
		}
		case WEAPON_AK47:
		{
			return Gumilovedek[playerid][fxAK47];
		}
		case WEAPON_M4:
		{
			return Gumilovedek[playerid][fxM4A1];
		}
		case WEAPON_SHOTGUN:
		{
			return Gumilovedek[playerid][fxShotgun];
		}
		case WEAPON_SHOTGSPA:
		{
			return Gumilovedek[playerid][fxCombat];
		}
		case WEAPON_DEAGLE:
		{
			return Gumilovedek[playerid][fxDeagle];
		}
		case WEAPON_COLT45:
		{
			return Gumilovedek[playerid][fxColt45];
		}
		case WEAPON_SILENCED:
		{
			return Gumilovedek[playerid][fxSilencedColt45];
		}
		case WEAPON_RIFLE:
		{
			return Gumilovedek[playerid][fxRifle];
		}
		case WEAPON_SNIPER:
		{
			return Gumilovedek[playerid][fxSniper];
		}
		default: return NINCS;
	}
	return NINCS;
}

stock SetGumiLovedek(playerid, weapon, ammo = 0, mit[]="=")
{
	switch(weapon)
	{
		case WEAPON_MP5:
		{
			if(egyezik(mit, "=")) Gumilovedek[playerid][fxMP5] = ammo;
			if(egyezik(mit, "+")) Gumilovedek[playerid][fxMP5] += ammo;
			if(egyezik(mit, "-")) Gumilovedek[playerid][fxMP5] -= ammo;
		}
		case WEAPON_AK47:
		{
			if(egyezik(mit, "=")) Gumilovedek[playerid][fxAK47] = ammo;
			if(egyezik(mit, "+")) Gumilovedek[playerid][fxAK47] += ammo;
			if(egyezik(mit, "-")) Gumilovedek[playerid][fxAK47] -= ammo;
		}
		case WEAPON_M4:
		{
			if(egyezik(mit, "=")) Gumilovedek[playerid][fxM4A1] = ammo;
			if(egyezik(mit, "+")) Gumilovedek[playerid][fxM4A1] += ammo;
			if(egyezik(mit, "-")) Gumilovedek[playerid][fxM4A1] -= ammo;
		}
		case WEAPON_SHOTGUN:
		{
			if(egyezik(mit, "=")) Gumilovedek[playerid][fxShotgun] = ammo;
			if(egyezik(mit, "+")) Gumilovedek[playerid][fxShotgun] += ammo;
			if(egyezik(mit, "-")) Gumilovedek[playerid][fxShotgun] -= ammo;
		}
		case WEAPON_SHOTGSPA:
		{
			if(egyezik(mit, "=")) Gumilovedek[playerid][fxCombat] = ammo;
			if(egyezik(mit, "+")) Gumilovedek[playerid][fxCombat] += ammo;
			if(egyezik(mit, "-")) Gumilovedek[playerid][fxCombat] -= ammo;
		}
		case WEAPON_DEAGLE:
		{
			if(egyezik(mit, "=")) Gumilovedek[playerid][fxDeagle] = ammo;
			if(egyezik(mit, "+")) Gumilovedek[playerid][fxDeagle] += ammo;
			if(egyezik(mit, "-")) Gumilovedek[playerid][fxDeagle] -= ammo;
		}
		case WEAPON_COLT45:
		{
			if(egyezik(mit, "=")) Gumilovedek[playerid][fxColt45] = ammo;
			if(egyezik(mit, "+")) Gumilovedek[playerid][fxColt45] += ammo;
			if(egyezik(mit, "-")) Gumilovedek[playerid][fxColt45] -= ammo;
		}
		case WEAPON_SILENCED:
		{
			if(egyezik(mit, "=")) Gumilovedek[playerid][fxSilencedColt45] = ammo;
			if(egyezik(mit, "+")) Gumilovedek[playerid][fxSilencedColt45] += ammo;
			if(egyezik(mit, "-")) Gumilovedek[playerid][fxSilencedColt45] -= ammo;
		}
		case WEAPON_RIFLE:
		{
			if(egyezik(mit, "=")) Gumilovedek[playerid][fxRifle] = ammo;
			if(egyezik(mit, "+")) Gumilovedek[playerid][fxRifle] += ammo;
			if(egyezik(mit, "-")) Gumilovedek[playerid][fxRifle] -= ammo;
		}
		case WEAPON_SNIPER:
		{
			if(egyezik(mit, "=")) Gumilovedek[playerid][fxSniper] = ammo;
			if(egyezik(mit, "+")) Gumilovedek[playerid][fxSniper] += ammo;
			if(egyezik(mit, "-")) Gumilovedek[playerid][fxSniper] -= ammo;
		}
		default: return 1;
	}
	return 1;
}

fpublic OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	PlayerInterior[playerid] = newinteriorid;
	if(newinteriorid == oldinteriorid) return 1;
	//printf("OnPlayerInteriorChange(playerid: %d, new: %d, old: %d)", playerid, newinteriorid, oldinteriorid);
	
	if(Tevezve[playerid] != NINCS)
	{
		SetPlayerInterior(Tevezve[playerid], newinteriorid);
		if(!IsPlayerInAnyVehicle(playerid))
			PlayerSpectatePlayer(Tevezve[playerid], playerid);
		else
			PlayerSpectateVehicle(Tevezve[playerid], GetPlayerVehicleID(playerid));
	}

	if(newinteriorid && Idojaras[playerid] != 0)
		IdojarasValt(playerid, 0);
	else if(!newinteriorid && Idojaras[playerid] != IdoJaras[iMost])
		IdojarasValt(playerid, IdoJaras[iMost]);

	return 1;
}

fpublic OnPlayerVirtualWorldChange(playerid, newvirtualworld, oldvirtualworld)
{
	PlayerVW[playerid] = newvirtualworld;
	//printf("OnPlayerVirtualWorldChange(playerid: %d, new: %d, old: %d)", playerid, newvirtualworld, oldvirtualworld);
	
	if(Tevezve[playerid] != NINCS)
	{
		SetPlayerVirtualWorld(Tevezve[playerid], newvirtualworld, "vwchange");
		if(!IsPlayerInAnyVehicle(playerid))
			PlayerSpectatePlayer(Tevezve[playerid], playerid);
		else
			PlayerSpectateVehicle(Tevezve[playerid], GetPlayerVehicleID(playerid));
	}

	if(newvirtualworld && Idojaras[playerid] != 0)
		IdojarasValt(playerid, 0);
	else if(!newvirtualworld && Idojaras[playerid] != IdoJaras[iMost])
		IdojarasValt(playerid, IdoJaras[iMost]);

	return 1;
}

fpublic OnPlayerScoreChange(playerid, newscore, oldscore)
{
	return 1;
}

fpublic OnPlayerTeamChange(playerid, newteam, oldteam)
{
	return 1;
}

fpublic OnPlayerSkinChange(playerid, newskin, oldskin)
{
	PlayerSkin[playerid] = newskin;
	return 1;
}

fpublic OnPlayerWantedLevelChange(playerid, newwantedlevel, oldwantedlevel)
{
	return 1;
}


fpublic OnVehicleDeath(vehicleid, killerid)
{
	ResetCarTrunk(vehicleid);
	
	VehicleAdatok[vehicleid][_DEER_HEALTH_5_] = 0;
	VehicleAdatok[vehicleid][_DEER_DISTANCE_5_] = 0.0;
	VehicleAdatok[vehicleid][_DEER_GUN_5_] = 0;
	if(IsValidDynamicObject(VehicleAdatok[vehicleid][_OBJECT_DEER_5_]))  DestroyDynamicObject(VehicleAdatok[vehicleid][_OBJECT_DEER_5_]),VehicleAdatok[vehicleid][_OBJECT_DEER_5_] = INVALID_OBJECT_ID; 
	
	VehicleAdatok[vehicleid][_DEER_HEALTH_4_] = 0;
	VehicleAdatok[vehicleid][_DEER_DISTANCE_4_] = 0.0;
	VehicleAdatok[vehicleid][_DEER_GUN_4_] = 0;
	if(IsValidDynamicObject(VehicleAdatok[vehicleid][_OBJECT_DEER_4_]))  DestroyDynamicObject(VehicleAdatok[vehicleid][_OBJECT_DEER_4_]),VehicleAdatok[vehicleid][_OBJECT_DEER_4_] = INVALID_OBJECT_ID; 
	
	VehicleAdatok[vehicleid][_DEER_HEALTH_3_] = 0;
	VehicleAdatok[vehicleid][_DEER_DISTANCE_3_] = 0.0;
	VehicleAdatok[vehicleid][_DEER_GUN_3_] = 0;
	if(IsValidDynamicObject(VehicleAdatok[vehicleid][_OBJECT_DEER_3_]))  DestroyDynamicObject(VehicleAdatok[vehicleid][_OBJECT_DEER_3_]),VehicleAdatok[vehicleid][_OBJECT_DEER_3_] = INVALID_OBJECT_ID; 
	
	VehicleAdatok[vehicleid][_DEER_HEALTH_2_] = 0;
	VehicleAdatok[vehicleid][_DEER_DISTANCE_2_] = 0.0;
	VehicleAdatok[vehicleid][_DEER_GUN_2_] = 0;
	if(IsValidDynamicObject(VehicleAdatok[vehicleid][_OBJECT_DEER_2_]))  DestroyDynamicObject(VehicleAdatok[vehicleid][_OBJECT_DEER_2_]),VehicleAdatok[vehicleid][_OBJECT_DEER_2_] = INVALID_OBJECT_ID; 
	
	VehicleAdatok[vehicleid][_DEER_HEALTH_1_] = 0;
	VehicleAdatok[vehicleid][_DEER_DISTANCE_1_] = 0.0;
	VehicleAdatok[vehicleid][_DEER_GUN_1_] = 0;
	if(IsValidDynamicObject(VehicleAdatok[vehicleid][_OBJECT_DEER_1_]))  DestroyDynamicObject(VehicleAdatok[vehicleid][_OBJECT_DEER_1_]),VehicleAdatok[vehicleid][_OBJECT_DEER_1_] = INVALID_OBJECT_ID; 
	
	VehicleAdatok[vehicleid][_DEER_NUM_] = 0;
	
	if(GetVehicleModel(vehicleid) == 428)
	{
		tformat(128, "<< Pénzszállító vízbe esett vagy felrobbant - rendszám: %d >>", vehicleid);
		SendMessage(SEND_MESSAGE_ADMIN, _tmpString, TEAM_ORANGE_COLOR, 1);
		//BankSzef +=PenzszallitoPenz[kocsi];
		PenzszallitoPenz[vehicleid] = 0;
	}
	new Float: kocsielet;
	
	GetVehicleHealth(vehicleid, kocsielet);
	
	if(kocsielet < 360)
	{
		CarPart[vehicleid][cMotor] = 500.0;
		CarPart[vehicleid][cElektronika] = 100.0;
		CarPart[vehicleid][cFek] = 100.0;
	}
	else if(kocsielet < 400)
	{
		CarPart[vehicleid][cMotor] = 500.0;
		CarPart[vehicleid][cElektronika] += 90.0;
		CarPart[vehicleid][cFek] += 80.0;
	}
	else if(kocsielet < 500)
	{
		CarPart[vehicleid][cMotor] += 450.0;
		CarPart[vehicleid][cElektronika] += 75.0;
		CarPart[vehicleid][cFek] += 60.0;
	}
	else if(kocsielet < 600)
	{
		CarPart[vehicleid][cMotor] += 300.0;
		CarPart[vehicleid][cElektronika] += 55.0;
		CarPart[vehicleid][cFek] += 40.0;
	}
	else if(kocsielet < 700)
	{
		CarPart[vehicleid][cMotor] += 150.0;
	}
	else if(kocsielet < 800)
	{
		CarPart[vehicleid][cMotor] += 100.0;
		CarPart[vehicleid][cElektronika] += 30.0;
	}
	else if(kocsielet < 900)
	{
		CarPart[vehicleid][cFek] += 60.0;
		CarPart[vehicleid][cElektronika] += 15.0;
	}

	engineOn[vehicleid] = 0;
	Gyujtas[vehicleid] = false;
	SetJarmu(vehicleid, KOCSI_MOTOR, false);
	KocsiRendszam(vehicleid, false);
	//SetTimerEx("Kocsirespawn", 9000, 0, "ddd", vehicleid, M_KOCSIDEATH, vehicleid);
	SetTimerEx("KocsiRespawn", 9000, false,"d",vehicleid);
	
	CarPart[vehicleid][cAkkumulator] = 0.0;
	CarPart[vehicleid][cMotor] = 600.0;
	CarPart[vehicleid][cMotorolaj] = 150.0;
	
	return 1;
}

fpublic OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(Locked(vehicleid))
		SetVehicleParamsForPlayer(vehicleid, forplayerid, 0, 1);
		
	return 1;
}

fpublic OnPlayerEnterRaceCheckpoint(playerid)
{
	if(!OnPlayerEnterAnyCheckpoint(playerid, true))
		return 1;
	
	if(Crosscp[playerid] > 0)
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 468)
		{
			Msg(playerid,"Nem gondolod hogy motorral kellene???");
			return 1;
		}
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
			SeeKick(playerid, "Szép próbálkozás, de nem elég jó. Cross pályán utasként!?", NINCS);
		}
	}
	if(Crosscp[playerid] == 1) {Crosscp[playerid]=2;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1484.2996, 1596.5552, 1060.7715,-1482.6530, 1603.0962, 1060.7715,2); }
	else if(Crosscp[playerid] == 2) {Crosscp[playerid]=3;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1373.7792, 1562.2881, 1060.1313,-1365.3262, 1561.5621, 1060.1313,5); }
	else if(Crosscp[playerid] == 3) {Crosscp[playerid]=4;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1399.0082, 1602.6113, 1055.4513,-1399.1327, 1607.4280, 1055.4513,2); }
	else if(Crosscp[playerid] == 4) {Crosscp[playerid]=5;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1408.1877,1585.3557,1055.3466,-1408.1533,1592.9192,1055.6323,2); }	
	else if(Crosscp[playerid] == 5) {Crosscp[playerid]=6;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1408.1533,1592.9192,1055.6323,-1360.2787,1635.3627,1056.0559,2); }
	else if(Crosscp[playerid] == 6) {Crosscp[playerid]=7;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1360.2787,1635.3627,1056.0559,-1384.5784,1603.8569,1053.7109,2); }
	else if(Crosscp[playerid] == 7) {Crosscp[playerid]=8;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1384.5784,1603.8569,1053.7109,-1486.3260,1642.3162,1060.6719,2); }
	else if(Crosscp[playerid] == 8) {Crosscp[playerid]=9;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1486.3260,1642.3162,1060.6719,-1453.8422,1635.8889,1056.4219,2); }
	else if(Crosscp[playerid] == 9) {Crosscp[playerid]=10;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1354.8093,1590.1608,1056.5703,-1354.7299,1609.6306,1054.6563,2); }
	else if(Crosscp[playerid] == 10) {Crosscp[playerid]=11;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1354.7299,1609.6306,1054.6563,-1352.7454,1626.6268,1074.4352,2); }
	else if(Crosscp[playerid] == 11) {Crosscp[playerid]=12;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1405.9891,1645.4956,1070.5313,-1363.8457,1645.5831,1086.6591,6); }
	else if(Crosscp[playerid] == 12) {Crosscp[playerid]=13;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1420.7501,1598.0344,1054.3501,-1467.3162,1596.1174,1055.8376,2); }
	else if(Crosscp[playerid] == 13) {Crosscp[playerid]=14;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1467.3162,1596.1174,1055.8376, -1419.3588,1568.6818,1056.6466,2); }
	else if(Crosscp[playerid] == 14) {Crosscp[playerid]=15;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1419.3588,1568.6818,1056.6466, -1401.2057,1568.7583,1054.6250,2); }
	else if(Crosscp[playerid] == 15) {Crosscp[playerid]=16;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1401.2057,1568.7583,1054.6250, -1450.8496,1571.1888,1058.9081,2); }
	else if(Crosscp[playerid] == 16) {Crosscp[playerid]=17;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1450.8496,1571.1888,1058.9081,-1409.4076,1618.8546,1055.3203, 2); }
	else if(Crosscp[playerid] == 17) {Crosscp[playerid]=18;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1409.4076,1618.8546,1055.3203, -1389.8141,1618.8092,1055.3203,2); }
	else if(Crosscp[playerid] == 18) {Crosscp[playerid]=19;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1389.8141,1618.8092,1055.3203,-1422.4738,1607.3369,1055.3203, 2); }
	else if(Crosscp[playerid] == 19) {Crosscp[playerid]=20;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1422.4738,1607.3369,1055.3203,-1488.3558,1564.7285,1056.6328,2); }
	else if(Crosscp[playerid] == 20) {Crosscp[playerid]=21;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1488.3558,1564.7285,1056.6328,-1430.1321,1581.3621,1055.7191,2); }
	else if(Crosscp[playerid] == 21) {Crosscp[playerid]=22;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1371.1580,1623.0128,1054.7972, -1370.9789,1631.7488,1055.7262,2); }
	else if(Crosscp[playerid] == 22) {Crosscp[playerid]=23;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1370.9789,1631.7488,1055.7262, -1420.7501,1598.0344,1054.3501,2); }
	else if(Crosscp[playerid] == 23) {Crosscp[playerid]=24;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1453.8422,1635.8889,1056.4219,-1446.3589,1620.7209,1054.4141,2); }
	else if(Crosscp[playerid] == 24) {Crosscp[playerid]=25;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 3,-1446.3589,1620.7209,1054.4141,-1371.1580,1623.0128,1054.7972, 2); }
	else if(Crosscp[playerid] == 25) {Crosscp[playerid]=26;DisablePlayerRaceCheckpoint(playerid); SetPlayerRaceCheckpoint(playerid, 1,-1430.1321,1581.3621,1055.7191, -1430.1321,1581.3621,1055.7191,2); }
	else if(Crosscp[playerid] == 26)
	{
		DisablePlayerRaceCheckpoint(playerid); 
		SendClientMessage(playerid,COLOR_YELLOW,"Gratulálunk végig mentél az összes ponton. Ezért kaptál 150 000 Ft-ott");
		GiveMoney(playerid, 150000);
		Crosscp[playerid]=0;
		PlayerInfo[playerid][pCrossido]=1800;
	}

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	new kocsi = GetPlayerVehicleID(playerid);
	if(IsAPlane(kocsi)) return 1;
	
	new race,cp,statusz;
	race = PlayerRaceInfo[playerid][xVersenyen];
	if(race == NINCS)
		return 1;
	cp = PlayerRaceInfo[playerid][xCP];
	statusz = RaceInfo[race][rStatusz];


	if(statusz != RACE_ELINDULT)
		return 1;



	if(cp != RACE_CP_CEL)
	{
		if(cp == RACE_CP_START)
		{
			if(RaceInfo[race][rCP] > 0)
			{
				PlayerRaceInfo[playerid][xCP] = 0;
				
				if(RaceInfo[race][rCP] > 1)
					PlayerRaceInfo[playerid][xKoviCP] = 1;
				else
					PlayerRaceInfo[playerid][xKoviCP] = RACE_CP_CEL;
			}
			else
			{
				PlayerRaceInfo[playerid][xCP] = RACE_CP_CEL;
				PlayerRaceInfo[playerid][xKoviCP] = RACE_CP_CEL;
			}
		}
		else
		{
			if((cp+1) >= RaceInfo[race][rCP])
			{
				PlayerRaceInfo[playerid][xCP] = RACE_CP_CEL;
				PlayerRaceInfo[playerid][xKoviCP] = RACE_CP_CEL;
			}
			else
			{
				PlayerRaceInfo[playerid][xCP]++;
				
				if((cp+2) >= RaceInfo[race][rCP])
					PlayerRaceInfo[playerid][xKoviCP] = RACE_CP_CEL;
				else
					PlayerRaceInfo[playerid][xKoviCP] = PlayerRaceInfo[playerid][xCP] + 1;
			}
		}
		SetPlayerRaceCP(playerid);
	}
	else if(cp == RACE_CP_CEL)
	{
		new time = PlayerRaceInfo[playerid][xIdo];
		RaceInfo[race][rBeert]++;
		new hanyadik = RaceInfo[race][rBeert];
		new uzenet[128];

		if(hanyadik <= 8)
		{
			new nyeremeny = floatround(float(RaceInfo[race][rNyeremeny]) * float(VersenySzorzo[hanyadik-1]) * 0.01);
			format(uzenet, 128, "[%d.] %s %s alatt teljesítette a %s-t | Nyeremény: %sFt", RaceInfo[race][rBeert], PlayerName(playerid), FormatTime(time), RaceInfo[race][rNev], FormatNumber(nyeremeny,0,','));
			foreach(Jatekosok, x)
			{
				if(PlayerRaceInfo[x][xVersenyen] == race || Admin(x, 1337))
					SendClientMessage(x, COLOR_LIGHTGREEN, uzenet);
			}
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Gratulálunk! %d. lettél! A nyereményed %sFt! Máris utaljuk a számládra", hanyadik, FormatNumber(nyeremeny,0,','));
			
			new bonuskredit = (4 - hanyadik) * 3;
			if(bonuskredit > 0)
				GiveBonusKredit(playerid, bonuskredit, "verseny");
			
			PlayerInfo[playerid][pAccount] += nyeremeny;
			RaceInfo[race][rVersenyIdo] = UnixTime+600;
			
			#if defined SYSTEM_BONUS
			if(hanyadik == 1)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "==========[ Láda ]==========");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Gratulálunk! A versenyen elsõ helyezést értél el, ezért kaptál egy ládát!");
				GiveRandomToken(playerid, BONUS_REASON_RACE_FIRST);
			}
			#endif
		}
		else
		{
			format(uzenet, 128, "[%d.] %s - Idõ: %s", hanyadik, PlayerName(playerid), FormatTime(time));
			foreach(Jatekosok, x)
			{
				if(PlayerRaceInfo[x][xVersenyen] == race || Admin(x, 1337))
					SendClientMessage(x, COLOR_YELLOW, uzenet);
			}
		}

		VersenyVege(playerid);

		new meg = 0;
		foreach(Jatekosok, x)
		{
			if(PlayerRaceInfo[x][xVersenyen] == race)
				meg++;
		}
		if(meg == 0)
		{
			RaceInfo[race][rStatusz] = RACE_VEGE;
			RaceInfo[race][rVersenyIdo] = NINCS;
			format(uzenet, 128, "A %s versenynek vége", RaceInfo[race][rNev]);
			foreach(Jatekosok, x)
			{
				if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					SendClientMessage(x, COLOR_WHITE, uzenet);
			}
		}
	}
	/*else
	{
		new race = RaceStartnal(playerid);
		if(race != -1)
		{
			new string[128];
			Format(string, "~r~~h~Nevezesi dij:~n~~b~~h~%dFt"
		}
	}*/

	return 1;
}

fpublic OnPlayerLeaveRaceCheckpoint(playerid)
{
	Log("Events", TFormatInline("OnPlayerLeaveRaceCheckpoint(playerid = %d)", playerid));
	return 1;
}

stock GetLatestKapuID()
{
	new databaseid = -1, i = -1;
	for(;++i < MAX_KAPU;)
	{
	    if(Kapu[i][kVan])
	    {
			if(Kapu[i][kUID] > databaseid)
			{
				databaseid = Kapu[i][kUID];
			}
	    }
	}
	return databaseid;
}

stock UjKapuID()
{
	new visszateres = -1, i = -1;
	for(;++i < MAX_KAPU;)
	{
	    if(!Kapu[i][kVan])
	    {
	        visszateres = i;
	        break;
	    }
	}
	return visszateres;
}

stock IsFloat(buf[])
{
    new l = strlen(buf);
    new dcount = 0;
    for(new i=0; i<l; i++)
    {
        if(buf[i] == '.')
        {
            if(i == 0 || i == l-1) return 0;
            else
            {
                dcount++;
            }
        }
        if((buf[i] > '9' || buf[i] < '0') && buf[i] != '+' && buf[i] != '-' && buf[i] != '.') return 0;
        if(buf[i] == '+' || buf[i] == '-')
        {
            if(i != 0 || l == 1) return 0;
        }
    }
    if(dcount == 0 || dcount > 1) return 0;
    return 1;
}

stock NumCharacter(string[], character)
{
	new szamlalas = 0, i = -1;
	for(;++i < strlen(string);)
	{
		if(string[i] == character)
		{
			szamlalas++;
		}
	}
	return szamlalas;
}

stock GetHasznaloNum(kapuid)
{
	new szamlalas = 0, i = -1;
    for(;++i < MAX_KAPU_HASZNALO;)
	{
	    if(Kapu[kapuid][kHasznalo][i] > 0)
	    {
			szamlalas++;
	    }
	}
	return szamlalas;
}

stock Float:GetDistanceToKapu(playerid, kapu)
{
	if (IsPlayerConnected(playerid) && (kapu > -1))
	{
		return GetPlayerDistanceFromPoint(playerid, Kapu[kapu][kZPos][0], Kapu[kapu][kZPos][1], Kapu[kapu][kZPos][2]);
	}
	return INF_FLOAT;
}

stock GetClosestKapu(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new kozelikapu=NINCS;
		new kapu = -1;
		new Float:closestdist = 9999.0, Float:dist;
		for(;++kapu < MAX_KAPU;)
		{
			dist = GetDistanceToKapu(playerid, kapu);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelikapu = kapu;
			}
		}
		return kozelikapu;
	}
	return NINCS;
}

fpublic OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == DIALOG_CUSTOM)
	{
		if(CustomPlayerDialog[playerid][0] && funcidx(CustomPlayerDialog[playerid]) != -1)
		{
			if(strlen(inputtext))
				CallLocalFunction(CustomPlayerDialog[playerid], "ddds", playerid, response, listitem, inputtext);
			else
				CallLocalFunction(CustomPlayerDialog[playerid], "ddds", playerid, response, listitem, "empty");
		}
		else
			printf("[Debug] DIALOG nem létezik: %s", CustomPlayerDialog[playerid]);
		
		return 1;
	}
	
    new querycske[1024];
	new bizara;
	if(dialogid != DialogID[playerid] || dialogid == NINCS) return 1;
	
	
	if(dialogid == DIALOG_GRAFFITI)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid, DIALOG_GRAFFITI_KESZIT, DIALOG_STYLE_INPUT, "Graffiti Készít", "{FFFFFF}Add meg a szöveget.\nMaximum {FF0000}18{FFFFFF} karakter lehet!", "Kész", "Vissza");
				}
				case 1:
				{
					new lista = 0, szoveg[2000];
					for(new i = 1; i < MAXGRAFFITI; i++)
					{
						if(Admin(playerid, 1))
						{
							if(Graffiti[i][gVan])
							{
								if(lista == 0)
									format(szoveg, 2000, "%d | %s | %s\n", Graffiti[i][gId], Graffiti[i][gSzoveg], Graffiti[i][gNev]);
								else
									format(szoveg, 2000, "%s%d | %s | %s\n", szoveg, Graffiti[i][gId], Graffiti[i][gSzoveg], Graffiti[i][gNev]);
								
								lista++;
							}
						}
						else
						{
							if(Graffiti[i][gVan] && PlayerInfo[playerid][pID] == Graffiti[i][gVId])
							{
								if(lista == 0)
									format(szoveg, 2000, "%d | %s\n", Graffiti[i][gId], Graffiti[i][gSzoveg]);
								else
									format(szoveg, 2000, "%s%d | %s\n", szoveg, Graffiti[i][gId], Graffiti[i][gSzoveg]);
								
								lista++;
							}
						}
					}
					
					new van[64];
					format(van, 64, "Graffitik (%d)", GraffitiVan());
					
					if(lista > 0)
						ShowPlayerDialog(playerid, DIALOG_GRAFFITI_GRAFFITIK, DIALOG_STYLE_LIST, van, szoveg, "Kész", "Vissza");
					else
						Msg(playerid, "Graffiti: Nem található graffiti!", false, COLOR_WHITE);
				}
			}
		}
		else
		{
			Graffiti[SzerkesztGraffiti[playerid]][gVan] = false;
			SzerkesztGraffiti[playerid] = NINCS;
		}
	}
	else if(dialogid == DIALOG_GRAFFITI_KESZIT)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DIALOG_GRAFFITI_KESZIT, DIALOG_STYLE_INPUT, "Graffiti Készít", "{FFFFFF}Add meg a szöveget.\nMaximum {FF0000}18{FFFFFF} karakter lehet!", "Kész", "Vissza");
			if(strlen(inputtext) > 18) return ShowPlayerDialog(playerid, DIALOG_GRAFFITI_KESZIT, DIALOG_STYLE_INPUT, "Graffiti Készít", "{FFFFFF}Add meg a szöveget.\n{FF0000}Túl sok karakter! Maximum 18!", "Kész", "Vissza");
			if(IsPlayerInAnyVehicle(playerid)) return Msg(playerid, "Graffiti: Kocsiban???", false, COLOR_WHITE);
			if(IsAt(playerid, IsAt_GrafitiTilt)) return SendClientMessage(playerid, COLOR_BLUE, "Graffiti: Ide nem festhetsz!");
			if(GraffitiVan() > 1500 && GraffitiSajat(playerid) > 0) return Msg(playerid, "Graffiti: Túllépte a graffitik száma a megenegedett, sajnálom nem tudsz készíteni!", false, COLOR_WHITE);
			SzerkesztGraffiti[playerid] = GraffitiHely();
			if(SzerkesztGraffiti[playerid] == NINCS) return Msg(playerid, "Graffiti: Sajnálom de a graffitik száma elérte a maximumot!", false, COLOR_WHITE);
			
			Graffiti[SzerkesztGraffiti[playerid]][gVan] = true;
			Graffiti[SzerkesztGraffiti[playerid]][gId] = SzerkesztGraffiti[playerid];
			
			format(Graffiti[SzerkesztGraffiti[playerid]][gSzoveg], 128, inputtext);
			ShowPlayerDialog(playerid, DIALOG_GRAFFITI_SZIN, DIALOG_STYLE_LIST, "Graffiti Szín", "{ffffff}Fehér\n{ff0000}Piros\n{228B22}Zöld\n{FFFF00}Sárga\n{104E8B}Kék\n{009ACD}Világoskék\n{696969}Szürke", "Kész", "Vissza");
		}
		else
			ShowPlayerDialog(playerid, DIALOG_GRAFFITI, DIALOG_STYLE_LIST, "Graffiti Kezelõ", "Készít\nLista", "Kész", "Mégse");
	}
	else if(dialogid == DIALOG_GRAFFITI_SZIN)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: format(Graffiti[SzerkesztGraffiti[playerid]][gColor], 24, "FFFFFF");
				case 1: format(Graffiti[SzerkesztGraffiti[playerid]][gColor], 24, "FF0000");
				case 2: format(Graffiti[SzerkesztGraffiti[playerid]][gColor], 24, "228B22");
				case 3: format(Graffiti[SzerkesztGraffiti[playerid]][gColor], 24, "FFFF00");
				case 4: format(Graffiti[SzerkesztGraffiti[playerid]][gColor], 24, "104E8B");
				case 5: format(Graffiti[SzerkesztGraffiti[playerid]][gColor], 24, "009ACD");
				case 6: format(Graffiti[SzerkesztGraffiti[playerid]][gColor], 24, "696969");
			}
			ShowPlayerDialog(playerid, DIALOG_GRAFFITI_TIPUS, DIALOG_STYLE_LIST, "Graffiti Betûtípus", "1. [Urban Riot]\n2. [Bombing]\n3. [Impact]\n4. [Los Santos]\n5. [Gangland Style]", "Kész", "Vissza");
		}
		else
			ShowPlayerDialog(playerid, DIALOG_GRAFFITI_KESZIT, DIALOG_STYLE_INPUT, "Graffiti Készít", "{FFFFFF}Add meg a szöveget.\nMaximum {FF0000}18{FFFFFF} karakter lehet!", "Kész", "Vissza");
	}
	else if(dialogid == DIALOG_GRAFFITI_TIPUS)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: format(Graffiti[SzerkesztGraffiti[playerid]][gFont], 16, "Urban Riot"), Graffiti[SzerkesztGraffiti[playerid]][gSize] = 48;
				case 1: format(Graffiti[SzerkesztGraffiti[playerid]][gFont], 16, "Bombing"), Graffiti[SzerkesztGraffiti[playerid]][gSize] = 48;
				case 2: format(Graffiti[SzerkesztGraffiti[playerid]][gFont], 16, "Impact"), Graffiti[SzerkesztGraffiti[playerid]][gSize] = 48;
				case 3: format(Graffiti[SzerkesztGraffiti[playerid]][gFont], 16, "Los Santos"), Graffiti[SzerkesztGraffiti[playerid]][gSize] = 36;
				case 4: format(Graffiti[SzerkesztGraffiti[playerid]][gFont], 16, "Gangland Style"), Graffiti[SzerkesztGraffiti[playerid]][gSize] = 18;
			}
		
			ShowPlayerDialog(playerid, DIALOG_GRAFFITI_IDO, DIALOG_STYLE_LIST, "Graffiti idõ", "1 nap\n2 nap\n3 nap\n4 nap\n5 nap\n6 nap\n7 nap", "Kész", "Vissza");
		}
		else
			ShowPlayerDialog(playerid, DIALOG_GRAFFITI_SZIN, DIALOG_STYLE_LIST, "Graffiti Szín", "{ffffff}Fehér\n{ff0000}Piros\n{228B22}Zöld\n{FFFF00}Sárga\n{104E8B}Kék\n{009ACD}Világoskék\n{696969}Szürke", "Kész", "Vissza");
	}
	else if(dialogid == DIALOG_GRAFFITI_IDO)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: Graffiti[SzerkesztGraffiti[playerid]][gIdo] = UnixTime + 86400;
				case 1: Graffiti[SzerkesztGraffiti[playerid]][gIdo] = UnixTime + 86400 * 2;
				case 2: Graffiti[SzerkesztGraffiti[playerid]][gIdo] = UnixTime + 86400 * 3;
				case 3: Graffiti[SzerkesztGraffiti[playerid]][gIdo] = UnixTime + 86400 * 4;
				case 4: Graffiti[SzerkesztGraffiti[playerid]][gIdo] = UnixTime + 86400 * 5;
				case 5: Graffiti[SzerkesztGraffiti[playerid]][gIdo] = UnixTime + 86400 * 6;
				case 6: Graffiti[SzerkesztGraffiti[playerid]][gIdo] = UnixTime + 86400 * 7;
			}
			
			
			new graf[128];
			format(graf, 128, "{%s}%s", Graffiti[SzerkesztGraffiti[playerid]][gColor], Graffiti[SzerkesztGraffiti[playerid]][gSzoveg]);
			
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			
			Graffiti[SzerkesztGraffiti[playerid]][gObject] = CreateDynamicObject(19482, x, y, z, 0.0, 0.0, 0.0, 0, 0);
			SetDynamicObjectMaterialText(Graffiti[SzerkesztGraffiti[playerid]][gObject], 0, graf, OBJECT_MATERIAL_SIZE_256x256, Graffiti[SzerkesztGraffiti[playerid]][gFont], Graffiti[SzerkesztGraffiti[playerid]][gSize], 0, 0xFFFFFFFF, 0, 1);
		
			EditDynamicObject(playerid, Graffiti[SzerkesztGraffiti[playerid]][gObject]);
		}
		else
			ShowPlayerDialog(playerid, DIALOG_GRAFFITI_TIPUS, DIALOG_STYLE_LIST, "Graffiti Betûtípus", "1. [Urban Riot]\n2. [Bombing]\n3. [Impact]\n4. [Los Santos]\n5. [Gangland Style]", "Kész", "Vissza");
	}
	else if(dialogid == DIALOG_GRAFFITI_GRAFFITIK)
	{
		if(response)
		{
			strdel(inputtext, strfind(inputtext, "|", true) - 1, strlen(inputtext));
			AdminGraffiti[playerid] = strval(inputtext);
			
			
			if(Admin(playerid, 1))
				ShowPlayerDialog(playerid, DIALOG_GRAFFITI_ADMIN, DIALOG_STYLE_LIST, "Graffiti Panel", "1. Infromáció\n2. Töröl\n3. Goto\n4. Szerkeszt", "Kész", "Kilépés");
			else
				ShowPlayerDialog(playerid, DIALOG_GRAFFITI_ADMIN, DIALOG_STYLE_LIST, "Graffiti Panel", "1. Infromáció\n2. Töröl", "Kész", "Kilépés");
		}
		else
		{
			ShowPlayerDialog(playerid, DIALOG_GRAFFITI, DIALOG_STYLE_LIST, "Graffiti Kezelõ", "Készít\nLista", "Kész", "Mégse");
		}
	}
	else if(dialogid == DIALOG_GRAFFITI_ADMIN)
	{
		if(response)
		{
			new id = AdminGraffiti[playerid];
			switch(listitem)
			{
				case 0: // Info
				{
					new szoveg[2000];
					if(Graffiti[id][gIdo] > UnixTime)
						format(szoveg, 2000, "{FFFFFF}ID: %d, Készítette: %s\nSzöveg: %s\nIdõ: {FF0000}%d{FFFFFF}óra", Graffiti[id][gId], Graffiti[id][gNev], Graffiti[id][gSzoveg], (Graffiti[id][gIdo] - UnixTime)/3600);
					else
						format(szoveg, 2000, "{FFFFFF}ID: %d, Készítette: %s\nSzöveg: %s\nIdõ: {FF0000}következõ órában törlõdik", Graffiti[id][gId], Graffiti[id][gNev], Graffiti[id][gSzoveg]);
					ShowPlayerDialog(playerid, DIALOG_GRAFFITI_INFO, DIALOG_STYLE_MSGBOX, "Információ", szoveg, "Vissza", "");
				}
				case 1: // Töröl
				{
					if(Admin(playerid, 1))
						ABroadCastFormat(COLOR_LIGHTRED, 1, "<< Graffiti: %s törölt egy graffitit! ID: %d >>", ICPlayerName(playerid), Graffiti[id][gId]);
					
					new fName[64];
					format(fName, 64, "data/graffiti/%d.ini", id);
					fremove(fName);
					
					DestroyDynamicObject(Graffiti[id][gObject]);
					Graffiti[id][gVan] = false;
					Graffiti[id][gVId] = 0;
					AdminGraffiti[playerid] = NINCS;
				}
				case 2: // Goto
				{
					Msg(playerid, "Teleportálva!!!");
					SetPlayerPos(playerid, Graffiti[id][gPosX], Graffiti[id][gPosY], Graffiti[id][gPosZ] + 1);
					AdminGraffiti[playerid] = NINCS;
				}
				case 3: // Szerkeszt
				{
					ShowPlayerDialog(playerid, DIALOG_GRAFFITI_SZERKESZT, DIALOG_STYLE_INPUT, "Graffiti Szerkesztés", "{FFFFFF}Add meg mire akarod változtatni.\nMaximum {FF0000}18{FFFFFF} karakter lehet!\nHa üresen hagyod marad az eredeti szöveg!", "Kész", "");
				}
			}
		}
		else
			AdminGraffiti[playerid] = NINCS;
	}
	else if(dialogid == DIALOG_GRAFFITI_INFO)
	{
		if(response)
		{
			if(Admin(playerid, 1))
				ShowPlayerDialog(playerid, DIALOG_GRAFFITI_ADMIN, DIALOG_STYLE_LIST, "Graffiti Panel", "1. Infromáció\n2. Töröl\n3. Goto\n4. Szerkeszt", "Kész", "Kilépés");
			else
				ShowPlayerDialog(playerid, DIALOG_GRAFFITI_ADMIN, DIALOG_STYLE_LIST, "Graffiti Panel", "1. Infromáció\n2. Töröl", "Kész", "Kilépés");
		}
		else
			AdminGraffiti[playerid] = NINCS;
	}
	else if(dialogid == DIALOG_GRAFFITI_SZERKESZT)
	{
		if(response)
		{
			if(strlen(inputtext) > 18) return ShowPlayerDialog(playerid, DIALOG_GRAFFITI_SZERKESZT, DIALOG_STYLE_INPUT, "Graffiti Szerkesztés", "{FFFFFF}Add meg mire akarod változtatni.\nMaximum {FF0000}18{FFFFFF} karakter lehet!\nHa üresen hagyod marad az eredeti szöveg!", "Kész", "");
			
			new id = AdminGraffiti[playerid];
			if(!strlen(inputtext))
				Msg(playerid, "Mivel üresen hagytad marad az eredeti szöveg!");
			else
			{
				format(Graffiti[id][gSzoveg], 128, inputtext);
				
				new graf[128];
				format(graf, 128, "{%s}%s", Graffiti[id][gColor], Graffiti[id][gSzoveg]);
				SetDynamicObjectMaterialText(Graffiti[id][gObject], 0, graf, OBJECT_MATERIAL_SIZE_256x256, Graffiti[id][gFont], Graffiti[id][gSize], 0, 0xFFFFFFFF, 0, 1);
			}
			
			EditDynamicObject(playerid, Graffiti[id][gObject]);
		}
		else
			AdminGraffiti[playerid] = NINCS;
	}
	else if(dialogid == DIALOG_HELP)
	{
		// 1. Alap\n2. Munka\n3. Ház\n4. Jármû\n5. Biznisz\n6. Leader\n7. Hal\n8. Sütés\n9. IRC\n10. Egyéb
		if(response)
		{
			// Legális munkák listája
			new munka[400];
			munka = "Munkák\n";
			for(new i = 0; i < sizeof(LegalisMunkak); i++)
			{
				Format(munka, "%s%s\n", munka, LegalisMunkak[i][1]);
			}
			
			// Alap dolgok
			new alap[2000];
			alap = "Parancs\tLeírás\n Felhasználói parancsok\n/login\tBelépés a szerverre\n/stats\tKaraktered adatainek megnézése\n/zsebem\tZsebed tartalmának megnézése\n/jelszóváltás\tJelszavad megváltoztatása\n----------\t----------\n";
			Format(alap, "%s Adminisztrátori segítségkérés\n/report join [0-3]\tReport szobába csatlakozás\n/ü\tÜzenet írási a report szobába\n/pm\tPrivát üzenet írása adminnak\n----------\t----------\n",alap);
			Format(alap, "%s Cselekvések kifejezése:\n/me /va\tKarakter érzések kifejezése\n/ame\tKarakter tulajdonságok leírása\n/megpróbál\t50-50%% eséllyel történések\n----------\t----------\n", alap);
			Format(alap, "%s Kommunikáció\n/o\tGlobális OOC chat\n/s\tÜvöltés\n/c\tSuttogás\n/c\tSuttogás\n/l\tIsmeretlen beszéd\n/b\tOOC chat", alap);
			
			new haz[200];
			haz = "Parancs\tLeírás\n/enter\tBelépés a házba\n/exit\tKilépés a házból\n/open\tHáz kinyitása/bezárása\n/heal\tHûtõböl étel fogyasztása\n/houseupgrade (/hu)\tHáz fejlesztése";
			
			switch(listitem)
			{
				case 0: { ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_TABLIST_HEADERS, "Alap", alap, "Vissza", ""); }
				case 1: { ShowPlayerDialog(playerid, DIALOG_HELP_MUNKA, DIALOG_STYLE_TABLIST_HEADERS, "Munka", munka, "Kiválaszt", "Vissza"); }
				case 2: { ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_TABLIST_HEADERS, "Ház", haz, "Vissza", ""); }
				case 3: { ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_TABLIST_HEADERS, "Jármû", "1.\n2.", "Vissza", ""); }
				case 4: { ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_TABLIST_HEADERS, "Biznisz", "1.\n2.", "Vissza", ""); }
				case 5: { ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_TABLIST_HEADERS, "Leader", "1.\n2.", "Vissza", ""); }
				case 6: { ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_TABLIST_HEADERS, "Hal", "1.\n2.", "Vissza", ""); }
				case 7: { ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_TABLIST_HEADERS, "Sütés", "1.\n2.", "Vissza", ""); }
				case 8: { ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_TABLIST_HEADERS, "IRC", "1.\n2.", "Vissza", ""); }
				case 9: { ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_TABLIST_HEADERS, "Egyéb", "1.\n2.", "Vissza", ""); }
			}
		}
	}
	else if(dialogid == DIALOG_HELP_MUNKA)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: { Msg(playerid, "valami"); }
				case 1: { Msg(playerid, "valami"); }
				case 2: { Msg(playerid, "valami"); }
			}
		}
		else
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Segítség", "1. Alap\n2. Munka\n3. Ház\n4. Jármû\n5. Biznisz\n6. Leader\n7. Hal\n8. Sütés\n9. IRC\n10. Egyéb", "Választ", "Kilépés");
	}
	else if(dialogid == DIALOG_GPS)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: // be/ki
				{
					if(!PlayerInfo[playerid][pGPS])
					{
						PlayerInfo[playerid][pGPS] = true;
						GameTextForPlayer(playerid, "~g~GPS Lokator bekapcsolva", 3000, 1);
						Cselekves(playerid, "bekapcsolta a GPS-ét.", 1);
						Radar(playerid, true);
						
						GPSmenu(playerid);
					}
					else
					{
						PlayerInfo[playerid][pGPS] = false;
						GameTextForPlayer(playerid, "~r~GPS Lokator kikapcsolva", 3000, 1);
						DisablePlayerCheckpoint(playerid);
						Cselekves(playerid, "kikapcsolta a GPS-ét.", 1);
						Radar(playerid, false);
						
						GPSmenu(playerid);
					}
				}
				case 1: // lista
				{
					if(!PlayerInfo[playerid][pGPS]) return SendClientMessage(playerid, COLOR_LIGHTRED, "A GPS Lokátorod nincs bekapcsolva!");
					ShowPlayerDialog(playerid, DIALOG_GPS_LISTA, DIALOG_STYLE_LIST, "GPS lista", "Személyes\nMunkák\nBoltok\nEgyéb", "Választ", "Vissza");
				}
				case 2: // ---------
				{
					GPSmenu(playerid);
				}
				case 3: // házam
				{
					if(PlayerInfo[playerid][pPhousekey] != NINCS)
					{
						SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancez], 4.0);
						SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: Megjelölve a radaron!");
					}
					else
						SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: Nincs házad!");
				}
				case 4: // kocsim
				{
					if(!PlayerInfo[playerid][pGPS]) return SendClientMessage(playerid, COLOR_LIGHTRED, "A GPS Lokátorod nincs bekapcsolva!");
					
					new kocsi = PlayerInfo[playerid][pPcarkey];					
					if(kocsi == NINCS)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: Nincs kocsid!");
					
					new kocsi2 = PlayerInfo[playerid][pPcarkey2];
					new kocsi3 = PlayerInfo[playerid][pPcarkey3];
					
					new kocsik[256];
					format(kocsik, sizeof(kocsik), "Kocsi típus\tKocsi rendszám\n%s\t%d\n", GetVehicleModelName(GetVehicleModel(CarInfo[kocsi][cId])-400), CarInfo[kocsi][cId]);
					
					if(kocsi2 != NINCS)
						format(kocsik, sizeof(kocsik), "%s%s\t%d\n", kocsik, GetVehicleModelName(GetVehicleModel(CarInfo[kocsi2][cId])), CarInfo[kocsi2][cId]);
					if(kocsi3 != NINCS)
						format(kocsik, sizeof(kocsik), "%s%s\t%d\n", kocsik, GetVehicleModelName(GetVehicleModel(CarInfo[kocsi3][cId])), CarInfo[kocsi3][cId]);
					
					ShowPlayerDialog(playerid, DIALOG_GPS_KOCSIM, DIALOG_STYLE_TABLIST_HEADERS, "GPS Kocsim", kocsik, "Mehet", "Vissza");
				}
				case 5: // ------
				{
					GPSmenu(playerid);
				}
				case 6: // ház
				{
					if(!PlayerInfo[playerid][pGPS]) return SendClientMessage(playerid, COLOR_LIGHTRED, "A GPS Lokátorod nincs bekapcsolva!");
					ShowPlayerDialog(playerid, DIALOG_GPS_HAZ, DIALOG_STYLE_INPUT, "GPS Házszám", "{FFFFFF}Add meg a házszámot!", "Mehet", "Vissza");
				}
				case 7: // garázs
				{
					if(!PlayerInfo[playerid][pGPS]) return SendClientMessage(playerid, COLOR_LIGHTRED, "A GPS Lokátorod nincs bekapcsolva!");
					ShowPlayerDialog(playerid, DIALOG_GPS_GARAZS, DIALOG_STYLE_INPUT, "GPS Garázs", "{FFFFFF}Add meg a garázs számát!", "Mehet", "Vissza");
				}
				case 8: // atm
				{
					if(!PlayerInfo[playerid][pGPS]) return SendClientMessage(playerid, COLOR_LIGHTRED, "A GPS Lokátorod nincs bekapcsolva!");
					
					new Float:PPos[3], Float:legkozelebb = 5000.0, Float:tav;
					GetPlayerPos(playerid, PPos[0], PPos[1], PPos[2]);
					new kozel;
					
					for(new a = 0; a < MAX_ATM; a++)
					{
						tav = GetDistanceBetweenPoints(PPos[0], PPos[1], PPos[2],  ATM[a][aPosX], ATM[a][aPosY], ATM[a][aPosZ]);
						if(tav < legkozelebb && ATM[kozel][aVw] == GetPlayerVirtualWorld(playerid) && ATM[kozel][aVw] < 1)
						{
							legkozelebb = tav;
							kozel = a;
						}
					}

					if(legkozelebb == 5000.0) return SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: Nincs találat!");
					SendFormatMessage(playerid, COLOR_LIGHTRED,"GPS: ATM(%d) megjelölve!",kozel);

					SetPlayerCheckpoint(playerid,  ATM[kozel][aPosX], ATM[kozel][aPosY], ATM[kozel][aPosZ], 2);
					SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: Megjelölve a radaron!");
				}
				case 9: // biznisz
				{
					if(!PlayerInfo[playerid][pGPS]) return SendClientMessage(playerid, COLOR_LIGHTRED, "A GPS Lokátorod nincs bekapcsolva!");
					ShowPlayerDialog(playerid, DIALOG_GPS_BIZNISZ, DIALOG_STYLE_INPUT, "GPS Biznisz", "{FFFFFF}Add meg a biznisz számát!", "Mehet", "Vissza");
				}
				case 10: // benzinkút
				{
					if(!PlayerInfo[playerid][pGPS]) return SendClientMessage(playerid, COLOR_LIGHTRED, "A GPS Lokátorod nincs bekapcsolva!");
					ShowPlayerDialog(playerid, DIALOG_GPS_BENZINKUT, DIALOG_STYLE_INPUT, "GPS Benzinkút", "{FFFFFF}Add meg a benzinkút számát!", "Mehet", "Vissza");
				}
				case 11: // race
				{
					if(!PlayerInfo[playerid][pGPS]) return SendClientMessage(playerid, COLOR_LIGHTRED, "A GPS Lokátorod nincs bekapcsolva!");
					ShowPlayerDialog(playerid, DIALOG_GPS_RACE, DIALOG_STYLE_INPUT, "GPS Race", "{FFFFFF}Add meg a verseny számát!", "Mehet", "Vissza");
				}
				case 12: // pozicio
				{
					if(!PlayerInfo[playerid][pGPS]) return SendClientMessage(playerid, COLOR_LIGHTRED, "A GPS Lokátorod nincs bekapcsolva!");
					ShowPlayerDialog(playerid, DIALOG_GPS_POZICIO, DIALOG_STYLE_INPUT, "GPS Pozíció", "{FFFFFF}Add meg a pozíciót spaceval elválasztva!", "Mehet", "Vissza");
				}
				case 13: // --------
				{
					GPSmenu(playerid);
				}
				case 14: // töröl
				{
					DisablePlayerCheckpoint(playerid);
					DisablePlayerRaceCheckpoint(playerid);//verseny cp-t is törölje
					SendClientMessage(playerid, COLOR_YELLOW2, "A jel törölve!");
				}
				case 15: // admin menü admin 6 tol
				{
					ShowPlayerDialog(playerid, DIALOG_GPS_ADMIN, DIALOG_STYLE_LIST, "Admin menü", "Törlés innen: Személyes\nTörlés innen: Munkák\nTörlés innen: Boltok\nTörlés innen: Egyéb\nÚj GPS pozíció készítése", "Választ", "Vissza");
				}
			}
		}
	}
	else if(dialogid == DIALOG_GPS_LISTA)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: // Személyes
				{
					ShowPlayerDialog(playerid, DIALOG_GPS_POZ, DIALOG_STYLE_LIST, "GPS lista(Személyes)", GPSkat(0), "Választ", "Vissza");
				}
				case 1: // Munkák
				{
					ShowPlayerDialog(playerid, DIALOG_GPS_POZ, DIALOG_STYLE_LIST, "GPS lista(Munkák)", GPSkat(1), "Választ", "Vissza");
				}
				case 2: // Boltok
				{
					ShowPlayerDialog(playerid, DIALOG_GPS_POZ, DIALOG_STYLE_LIST, "GPS lista(Boltok)", GPSkat(2), "Választ", "Vissza");
				}
				case 3: // Egyéb
				{
					ShowPlayerDialog(playerid, DIALOG_GPS_POZ, DIALOG_STYLE_LIST, "GPS lista(Egyéb)", GPSkat(3), "Választ", "Vissza");
				}
			}
		}
		else
			GPSmenu(playerid);
	}
	else if(dialogid == DIALOG_GPS_ADMIN)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0: // Személyes
				{
					ShowPlayerDialog(playerid, DIALOG_GPS_ADMIN_TOROL, DIALOG_STYLE_LIST, "GPS lista(Személyes)", GPSkat(0), "Választ", "Vissza");
				}
				case 1: // Munkák
				{
					ShowPlayerDialog(playerid, DIALOG_GPS_ADMIN_TOROL, DIALOG_STYLE_LIST, "GPS lista(Munkák)", GPSkat(1), "Választ", "Vissza");
				}
				case 2: // Boltok
				{
					ShowPlayerDialog(playerid, DIALOG_GPS_ADMIN_TOROL, DIALOG_STYLE_LIST, "GPS lista(Boltok)", GPSkat(2), "Választ", "Vissza");
				}
				case 3: // Egyéb
				{
					ShowPlayerDialog(playerid, DIALOG_GPS_ADMIN_TOROL, DIALOG_STYLE_LIST, "GPS lista(Egyéb)", GPSkat(3), "Választ", "Vissza");
				}
				case 4: // Hozzáadás
				{
					if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0)
						return Msg(playerid, "VW: 0 és INT: 0 hozhatod csak létre!");
					ShowPlayerDialog(playerid, DIALOG_GPS_ADMIN_VALASZT, DIALOG_STYLE_LIST, "Válaszd ki hová szeretnél újat létrehozni!", "Személyes\nMunkák\nBoltok\nEgyéb", "Hozzáadás", "Vissza");
				}
			}
		}
		else
			GPSmenu(playerid);
	}
	else if(dialogid == DIALOG_GPS_ADMIN_VALASZT)
	{
		if(response)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			
			AdminGPS[playerid] = GPShely();
			new id = AdminGPS[playerid];
			
			GPS[id][gVan] = true;
			GPS[id][gPosX] = x;
			GPS[id][gPosY] = y;
			GPS[id][gPosZ] = z - 1;
			GPS[id][gKategoria] = listitem;
			
			ShowPlayerDialog(playerid, DIALOG_GPS_ADMIN_NEV, DIALOG_STYLE_INPUT, "Admin menü", "Add meg a GPS nevét.", "Kész", "Vissza");
		}
		else
			ShowPlayerDialog(playerid, DIALOG_GPS_ADMIN, DIALOG_STYLE_LIST, "Admin menü", "Törlés innen: Személyes\nTörlés innen: Munkák\nTörlés innen: Boltok\nTörlés innen: Egyéb\nÚj GPS pozíció készítése", "Választ", "Vissza");
	}
	else if(dialogid == DIALOG_GPS_ADMIN_NEV)
	{
		if(response)
		{
			new id = AdminGPS[playerid];
			format(GPS[id][gNev], 128, inputtext);
			Msg(playerid, "Sikeresen hozzáadtad a GPS pozíciót!");
			
			new szoveg[256];
			format(szoveg, sizeof(szoveg), "<< GPS: Admin %s hozzáadott egy pozíciót! Kategória: %d GPS neve: %s >>", PlayerName(playerid), GPS[id][gKategoria], GPS[id][gNev]);
			ABroadCast(COLOR_LIGHTRED, szoveg, 1);
			
			AdminGPS[playerid] = NINCS;
		}
		else
		{
			new id = AdminGPS[playerid];
			GPS[id][gVan] = false;
			
			AdminGPS[playerid] = NINCS;
			ShowPlayerDialog(playerid, DIALOG_GPS_ADMIN, DIALOG_STYLE_LIST, "Admin menü", "Törlés innen: Személyes\nTörlés innen: Munkák\nTörlés innen: Boltok\nTörlés innen: Egyéb\nÚj GPS pozíció készítése", "Választ", "Vissza");
		}
	}
	else if(dialogid == DIALOG_GPS_POZ)
	{
		if(response)
		{	
			for(new i = 0; i < MAXGPS; i++)
			{
				if(GPS[i][gNev] == inputtext[0] && GPS[i][gVan])
				{
					SetPlayerCheckpoint(playerid, GPS[i][gPosX], GPS[i][gPosY], GPS[i][gPosZ], 2.5);
					SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: Megjelölve a radaron!");
					break;
				}
			}
		}
		else
			ShowPlayerDialog(playerid, DIALOG_GPS_LISTA, DIALOG_STYLE_LIST, "GPS lista", "Személyes\nMunkák\nBoltok\nEgyéb", "Választ", "Vissza");
	}
	else if(dialogid == DIALOG_GPS_ADMIN_TOROL)
	{
		if(response)
		{
			for(new i = 0; i < MAXGPS; i++)
			{
				if(GPS[i][gNev] == inputtext[0] && GPS[i][gVan])
				{
					GPS[i][gVan] = false;
					SendFormatMessage(playerid, COLOR_RED, "Sikeresen kitörölted a GPS pozíciót: %s", GPS[i][gNev]);
					new szoveg[256];
					format(szoveg, sizeof(szoveg), "<< GPS: Admin %s kitörölt egy pozíciót! Kategória: %d GPS neve: %s >>", PlayerName(playerid), GPS[i][gKategoria], GPS[i][gNev]);
					ABroadCast(COLOR_LIGHTRED, szoveg, 1);
					break;
				}
			}
		}
		else
			ShowPlayerDialog(playerid, DIALOG_GPS_ADMIN, DIALOG_STYLE_LIST, "Admin menü", "Törlés innen: Személyes\nTörlés innen: Munkák\nTörlés innen: Boltok\nTörlés innen: Egyéb\nÚj GPS pozíció készítése", "Választ", "Vissza");
	}
	else if(dialogid == DIALOG_GPS_HAZ)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DIALOG_GPS_HAZ, DIALOG_STYLE_INPUT, "GPS Házszám", "{FF0000}Nincs ilyen házszám\n{FFFFFF}Add meg újra a házszámot!", "Mehet", "Vissza");
			if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_GPS_HAZ, DIALOG_STYLE_INPUT, "GPS Házszám", "{FF0000}Nincs ilyen házszám\n{FFFFFF}Add meg újra a házszámot!", "Mehet", "Vissza");
			new hazszam = strval(inputtext[0]);
			if(hazszam < 0 || hazszam >= sizeof(HouseInfo)) return ShowPlayerDialog(playerid, DIALOG_GPS_HAZ, DIALOG_STYLE_INPUT, "GPS Házszám", "{FF0000}Nincs ilyen házszám\n{FFFFFF}Add meg újra a házszámot!", "Mehet", "Vissza");
			if(HouseInfo[hazszam][Van] != 1) return ShowPlayerDialog(playerid, DIALOG_GPS_HAZ, DIALOG_STYLE_INPUT, "GPS Házszám", "{FF0000}Nincs ilyen házszám\n{FFFFFF}Add meg újra a házszámot!", "Mehet", "Vissza");

		    SetPlayerCheckpoint(playerid, HouseInfo[hazszam][hEntrancex], HouseInfo[hazszam][hEntrancey], HouseInfo[hazszam][hEntrancez], 3);
			SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: Megjelölve a radaron!");
		}
		else
			GPSmenu(playerid);
	}
	else if(dialogid == DIALOG_GPS_GARAZS)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DIALOG_GPS_GARAZS, DIALOG_STYLE_INPUT, "GPS Garázs", "{FF0000}Nincs ilyen garázs\n{FFFFFF}Add meg a garázs számát!", "Mehet", "Vissza");
			if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_GPS_GARAZS, DIALOG_STYLE_INPUT, "GPS Garázs", "{FF0000}Nincs ilyen garázs\n{FFFFFF}Add meg a garázs számát!", "Mehet", "Vissza");
			new hazszam = strval(inputtext[0]);
			if(hazszam < 0 || hazszam >= sizeof(GarazsInfo)) return ShowPlayerDialog(playerid, DIALOG_GPS_GARAZS, DIALOG_STYLE_INPUT, "GPS Garázs", "{FF0000}Nincs ilyen garázs\n{FFFFFF}Add meg a garázs számát!", "Mehet", "Vissza");
			if(GarazsInfo[hazszam][Van] != 1) return ShowPlayerDialog(playerid, DIALOG_GPS_GARAZS, DIALOG_STYLE_INPUT, "GPS Garázs", "{FF0000}Nincs ilyen garázs\n{FFFFFF}Add meg a garázs számát!", "Mehet", "Vissza");

			SetPlayerCheckpoint(playerid, GarazsInfo[hazszam][hEntrancex], GarazsInfo[hazszam][hEntrancey], GarazsInfo[hazszam][hEntrancez], 3);
			SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: Megjelölve a radaron!");
		}
		else
			GPSmenu(playerid);
	}
	else if(dialogid == DIALOG_GPS_BIZNISZ)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DIALOG_GPS_BIZNISZ, DIALOG_STYLE_INPUT, "GPS Biznisz", "{FF0000}Nincs ilyen biznisz\n{FFFFFF}Add meg a biznisz számát!", "Mehet", "Vissza");
			if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_GPS_BIZNISZ, DIALOG_STYLE_INPUT, "GPS Biznisz", "{FF0000}Nincs ilyen biznisz\n{FFFFFF}Add meg a biznisz számát!", "Mehet", "Vissza");
			new biz = strval(inputtext[0]);
			if(biz < 0 || biz >= MAXBIZ) return ShowPlayerDialog(playerid, DIALOG_GPS_BIZNISZ, DIALOG_STYLE_INPUT, "GPS Biznisz", "{FF0000}Nincs ilyen biznisz\n{FFFFFF}Add meg a biznisz számát!", "Mehet", "Vissza");
			
			SetPlayerCheckpoint(playerid,BizzInfo[biz][bEntranceX],BizzInfo[biz][bEntranceY],BizzInfo[biz][bEntranceZ], 2.5);
			SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: Megjelölve a radaron!");
		}
		else
			GPSmenu(playerid);
	}
	else if(dialogid == DIALOG_GPS_BENZINKUT)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DIALOG_GPS_BENZINKUT, DIALOG_STYLE_INPUT, "GPS Benzinkút", "{FF0000}Nincs ilyen benzinkút\n{FFFFFF}Add meg a benzinkút számát!", "Mehet", "Vissza");
			if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_GPS_BENZINKUT, DIALOG_STYLE_INPUT, "GPS Benzinkút", "{FF0000}Nincs ilyen benzinkút\n{FFFFFF}Add meg a benzinkút számát!", "Mehet", "Vissza");
			new kut = strval(inputtext[0]);
			if(kut < 0 || kut > MAX_BENZINKUT) return ShowPlayerDialog(playerid, DIALOG_GPS_BENZINKUT, DIALOG_STYLE_INPUT, "GPS Benzinkút", "{FF0000}Nincs ilyen benzinkút\n{FFFFFF}Add meg a benzinkút számát!", "Mehet", "Vissza");
			
			SetPlayerCheckpoint(playerid, BenzinKutak[kut][bPosX], BenzinKutak[kut][bPosY], BenzinKutak[kut][bPosZ], BenzinKutak[kut][bTav]);
			SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: Megjelölve a radaron!");
		}
		else
			GPSmenu(playerid);
	}
	else if(dialogid == DIALOG_GPS_RACE)
	{
		if(response)
		{
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DIALOG_GPS_RACE, DIALOG_STYLE_INPUT, "GPS Race", "{FF0000}Nincs ilyen verseny -> /race status\n{FFFFFF}Add meg a verseny számát!", "Mehet", "Vissza");
			if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_GPS_RACE, DIALOG_STYLE_INPUT, "GPS Race", "{FF0000}Nincs ilyen verseny -> /race status\n{FFFFFF}Add meg a verseny számát!", "Mehet", "Vissza");
			new race = strval(inputtext[0]);
			if(race < 0 || race >= RACESLOTOK) return ShowPlayerDialog(playerid, DIALOG_GPS_RACE, DIALOG_STYLE_INPUT, "GPS Race", "{FF0000}Nincs ilyen verseny -> /race status\n{FFFFFF}Add meg a verseny számát!", "Mehet", "Vissza");
			if(RaceInfo[race][rStatusz] != RACE_INDUL) return ShowPlayerDialog(playerid, DIALOG_GPS_RACE, DIALOG_STYLE_INPUT, "GPS Race", "{FF0000}Nincs ilyen verseny elindítva -> /race status\n{FFFFFF}Add meg a verseny számát!", "Mehet", "Vissza");
		
			SetPlayerCheckpoint(playerid, RaceStart[race][0], RaceStart[race][1], RaceStart[race][2], RACECPMERET);
			SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: Megjelölve a radaron!");
		}
		else
			GPSmenu(playerid);
	}
	else if(dialogid == DIALOG_GPS_POZICIO)
	{
		if(response)
		{
			if(PlayerInfo[playerid][pJailed] == 3 && PlayerInfo[playerid][pJailTime] > 0)
				SeeBan(playerid, 0, NINCS, "Csalás AJailban!");
			
			new Float:x, Float:y, Float:z;
			new poziciok[3][64];
			
			split(inputtext, poziciok, ' ');
			x = floatstr(poziciok[0]);
			y = floatstr(poziciok[1]);
			z = floatstr(poziciok[2]);

			if( !( -3000 < x < 3000 && -3000 < y < 3000 && -3000 < z < 3000 ) )
				return Msg(playerid, "A koordináták -3000 és 3000 között lehetnek!");

			SetPlayerCheckpoint(playerid, x, y, z, 1.0);
			SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: Megjelölve a radaron!");
		}
		else
			GPSmenu(playerid);
	}
	else if(dialogid == DIALOG_GPS_KOCSIM)
	{
		if(response)
		{
			new kocsi;
			switch(listitem)
			{
				case 0: { kocsi = PlayerInfo[playerid][pPcarkey]; }
				case 1: { kocsi = PlayerInfo[playerid][pPcarkey2]; }
				case 2: { kocsi = PlayerInfo[playerid][pPcarkey3]; }
			}
			
			if(Lopott[kocsi] == true) return SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: A kocsidat ellopták!");
			new Float:x, Float:y, Float:z, vw;
			vw = GetVehicleVirtualWorld(CarInfo[kocsi][cId]);

			if(vw >= 10)
			{
				if(vw-10 < 0 || vw-10 >= MAXGARAZS || GarazsInfo[vw-10][Van] != 1)
					return SendClientMessage(playerid, COLOR_LIGHTRED, "GPS: A jármûved egy már törölt vagy frakció garázsban van! (( Szólj egy Adminnak ha nem találod! ))");
			
				x = GarazsInfo[vw - 10][hEntrancex];
				y = GarazsInfo[vw - 10][hEntrancey];
				z = GarazsInfo[vw - 10][hEntrancez];
			}
			else
				GetVehiclePos(CarInfo[kocsi][cId], x, y, z);

			SetPlayerCheckpoint(playerid, x, y, z, 5);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "GPS: Megjelölve a radaron! (( Jármû VW: %d ))", vw);
		}
		else
			GPSmenu(playerid);
	}
	else if(dialogid == DIALOG_DERBI_KOCSIMODEL)
	{
		if(!response)
			RoncsDerbi[rIndit] = false;
		else
		{
			new model;
			if(IsNumeric(inputtext))
				model = strval(inputtext);
			else
				model = GetVehicleModelIDFromName(inputtext);
			if(model < 400 || model > 611 || RoncsDerbiTilt(model))
				return ShowPlayerDialog(playerid, DIALOG_DERBI_KOCSIMODEL, DIALOG_STYLE_INPUT, "[hiba]Roncsderbi", "Ilyen típus nem létezik! Milyen jármûvel akarsz indulni? ((model ID vagy NÉV))", "Tovább", "Mégse");
		
			RoncsDerby[playerid][rdModel] = model;
		
			ShowPlayerDialog(playerid, DIALOG_DERBI_BELEPES, DIALOG_STYLE_MSGBOX, "DERBI INFÓ", "RoncsDerbi futam információk / szabályok\nMindenki maga által választott kocsival indul\nKocsiból kiszálni tilos!\nSzerencsés futamot!", "Kezdés", "");
		}
	}
	else if(dialogid == DIALOG_DERBI_KOCSIVALASZT)
	{
		if(!response)
			RoncsDerbi[rIndit] = false;
		else
		{
			switch(listitem)
			{
				case 0:
				{
					RoncsDerbi[rModel] = NINCS;
					ShowPlayerDialog(playerid, DIALOG_DERBI_KOCSIMODEL, DIALOG_STYLE_INPUT, "Roncsderbi", "Milyen jármûvel akarsz indulni? ((model ID vagy NÉV))", "Tovább", "Mégse");
					return 1;
				}
				case 1:
				{
				
					ShowPlayerDialog(playerid, DIALOG_DERBI_FKOCSIMODEL, DIALOG_STYLE_INPUT, "Roncsderbi", "Milyen jármûvel legyenek a versenyzõk? ((model ID vagy NÉV))", "Tovább", "Mégse");
					return 1;
				}
			}
		}
	}
	else if(dialogid == DIALOG_DERBI_FKOCSIMODEL)
	{
		if(!response)
			RoncsDerbi[rIndit] = false;
		else
		{
		
			new model;
			if(IsNumeric(inputtext))
				model = strval(inputtext);
			else
				model = GetVehicleModelIDFromName(inputtext);
			if(model < 400 || model > 611 || RoncsDerbiTilt(model))
				return ShowPlayerDialog(playerid, DIALOG_DERBI_FKOCSIMODEL, DIALOG_STYLE_INPUT, "[hiba]Roncsderbi", "Ilyen típus nem létezik, vagy tiltott! Milyen jármûvel akarsz indulni? ((model ID vagy NÉV))", "Tovább", "Mégse");
		
			RoncsDerbi[rModel]=model;
			
			
			ShowPlayerDialog(playerid, DIALOG_DERBI_BELEPES, DIALOG_STYLE_MSGBOX, "DERBI INFÓ", "RoncsDerbi futam információk / szabályok\nMindenki ugyan olyan kocsival indul\nKocsiból kiszálni tilos!\n 5 perc múlva indul a futam!\nSzerencsés futamot!", "Kezdés", "");
		}

	}
	else if(dialogid == DIALOG_DERBI_BELEPES)
	{
		if(!response)
			RoncsDerbi[rIndit] = false;
		else
		{
			new slot=NINCS;
			for(new x=0; x < MAX_DERBI_KOCSI; x++)
			{
			
				if(DerbiKocsi[x] <= 0 )
				{	
					
					slot = x;
					break;
				}
			}
			if(slot == NINCS) return SendFormatMessage(playerid, COLOR_LIGHTRED,"[HIBA TÖRTÉNT NINCS SZABAD KOCSI HELY] %d",slot);
			
			bizara = floatround(BizzInfo[BIZ_RONCSDERBI][bEntranceCost]*0.25);
			
			if(!BankkartyaFizet(playerid, BizzInfo[BIZ_RONCSDERBI][bEntranceCost])) return SendFormatMessage(playerid, COLOR_YELLOW,"A verseny ára %s Ft! Ezért nem kerültél be!",FormatInt(DERBI_ARA));
			
			
			
			BizPenz(BIZ_RONCSDERBI, bizara);
			RoncsDerbi[rNyeremenyOssz] +=BizzInfo[BIZ_RONCSDERBI][bEntranceCost]-bizara;
			
			new string[128];
			format(string, sizeof(string), "[debug info]Roncsderbi belépõ: %s Ft Bizniszbe ment: %s Ft Játékba marad: %s",FormatNumber(BizzInfo[BIZ_RONCSDERBI][bEntranceCost]),FormatNumber(bizara),FormatNumber(BizzInfo[BIZ_RONCSDERBI][bEntranceCost]-bizara));
			SendMessage(SEND_MESSAGE_SCRIPTER, string, COLOR_LIGHTBLUE);
			
			
			new model;
			if(RoncsDerbi[rModel] != NINCS)
				model = RoncsDerbi[rModel];
			else
				model = RoncsDerby[playerid][rdModel];
			
			
			Tele(playerid,DerbiKocsiPos[slot][0], DerbiKocsiPos[slot][1], DerbiKocsiPos[slot][2],false,55555,15);
			
			new carid = UjKocsi(model, DerbiKocsiPos[slot][0], DerbiKocsiPos[slot][1], DerbiKocsiPos[slot][2]+1.0,DerbiKocsiPos[slot][3], random(127), random(127), 15, 55555);
						
			DerbiKocsi[slot] = carid;
			
			
			
			KocsiJavit(carid);
			
			PutPlayerInVehicle(playerid, carid, 0);
			RoncsDerby[playerid][rdVersenyez] = true,
			RoncsDerby[playerid][rdSlot] = slot;
			RoncsDerbi[rFutam] = true;
			ov[playerid] = 1;
			
			switch(model)
			{
				case 403, 407, 408, 427, 433, 437, 443, 470, 515, 544, 601: SetVehicleHealth(GetPlayerVehicleID(playerid), 1500.0);
				case 502, 503, 504, 549: SetVehicleHealth(GetPlayerVehicleID(playerid), 3900.0);
				case 406, 428, 431, 444, 455, 486, 524, 528, 530, 531, 532, 556, 557, 573: SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
				default: SetVehicleHealth(GetPlayerVehicleID(playerid), 3500.0);
			}
			RoncsDerbi[rNyeremenyOssz] +=BizzInfo[BIZ_RONCSDERBI][bEntranceCost]-bizara;
			TogglePlayerControllable(playerid, 0);
			if(RoncsDerbi[rIdo] <= 0)
				RoncsDerbi[rIdo] = 150;
			
			RoncsDerbi[rJatekos]++;
			//RoncsderbiSerules(carid, playerid);
			RoncsDerbi[rIndit] = false;
	
		}
	}
	
	if(dialogid == DIALOG_ADMIN_UZENET)
	{
		if(response)
			Msg(playerid, "Elfogadtad, hogy elvolastad az üzenetett! Kérlek teljesítsd!"), PlayerInfo[playerid][pAdminUzenet] = 0;
			
		if(!response)
			Msg(playerid, "Nem fogadat el, hogy elolvastad az üzenetett, következõ belépéskor is meg fog jelenni!");
	
	}
	if(dialogid == DIALOG_FRISSITES_UZENET)
	{
		if(response)
			Msg(playerid, "Köszönjük hogy elolvastad a changelogot!");
			
		PlayerInfo[playerid][pFrissitesUzenetVan] = 0;
		return 1;
	}
	if(dialogid == 0)//1kérdés(Ha a kreszvizsgát választja)
	{
		if(response)
		{
			if(listitem == 0)
			{
			if(!BankkartyaFizet(playerid,40000)) return Msg(playerid,"Nincs elég pénzed 40 000 Ft kell a vizsgára");
			ShowPlayerDialog(playerid, 1, DIALOG_STYLE_LIST, "1.Mi a haladási irány Class Cityben?","A:Jobb oldal\nB:Ahol nekem tetszik!\nC:Bal oldal!", "Választ", "");
			return 1;
			}
		}
	}
	if(dialogid == 1)//2kérdés
	{
		if(response)
		{
			if(listitem == 0)
			{
			ShowPlayerDialog(playerid, 2, DIALOG_STYLE_LIST, "2.Mennyi a sebességhatár lakott területen belül?","A:70 km/h\nB:50 km/h\nC:60 km/h", "Választ", "");
			return 1;
			}
		}
	}
	if(dialogid == 2)//3kérdés
	{
		if(response)
		{
			if(listitem == 1)
			{
			ShowPlayerDialog(playerid, 3, DIALOG_STYLE_LIST, "3.Mit tesz ha fordulás közben pirosat kap?","A:Megállok a kresztezõdésben hiszen piros!\nB:Továbbhajtok, hiszen az már nem rám vonakozik!", "Választ", "");
			return 1;
			}
		}
	}
	if(dialogid == 3)//4kérdés
	{
		if(response)
		{
			if(listitem == 1)
			{
			ShowPlayerDialog(playerid, 4, DIALOG_STYLE_LIST, "4.Mit tesz ha balesetet vagy sebesültet lát?","A:Megállok, mentõt hívok és segítek amiben tudok!\nB:Megyek tovább, de közben kihívom a mentõt a helyszinre!\nC:Megyek tovább, hiszen nem az én bajom!", "Választ", "");
			return 1;
			}
		}
	}
	if(dialogid == 4)//5kérdés
	{
		if(response)
		{
			if(listitem == 0)
			{
			ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "5.Miért kell féktávolságot tartani?","A:A szélárnyék miatt\nB:Azért, hogy elkerüljük az ütközést, hirtelen fékezéskor", "Választ", "");
			return 1;
			}
		}
	}
	if(dialogid == 5)//6kérdés
	{
		if(response)
		{
			if(listitem == 1)
			{
			ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST, "6.Mit tesz ha piros a jelzõlámpa?","A:Figyelmen kívül hagyom!\nB:Lassítok, körülnézek és ha nemjön senki akkor megyek!\nC:Megállok és megvárom a zöldet!", "Választ", "");
			return 1;
			}
		}
	}
	if(dialogid == 6)//7kérdés
	{
		if(response)
		{
			if(listitem == 2)
			{
			ShowPlayerDialog(playerid, 7, DIALOG_STYLE_LIST, "7.Köteles bekapcsolni az övet vagy felvenni a bukósisakot?","A:Csak ha szeretném!\nB:Minden esetben köteles vagyok!\nC:Csak akkor ha az oktató kéri tõlem!", "Választ", "");
			return 1;
			}
		}
	}
	if(dialogid == 7)//8kérdés
	{
		if(response)
		{
			if(listitem == 1)
			{
			ShowPlayerDialog(playerid, 8, DIALOG_STYLE_LIST, "8.Városban mikor szükséges a világítást felkapcsolni?","A:Egész nap szükséges, ha úton vagyok!\nB:Rossz látási viszonyok között és este!\n", "Választ", "");
			return 1;
			}
		}
	}
	if(dialogid == 8)//9kérdés
	{
		if(response)
		{
			if(listitem == 1)
			{
			ShowPlayerDialog(playerid, 9, DIALOG_STYLE_LIST, "9.Mi a sebességhatár lakott területen kívül?","A:80km/h\nB:110km/h\nC:90km/h", "Választ", "");
			return 1;
			}
		}
	}
	if(dialogid == 9)//10kérdés
	{
		if(response)
		{
			if(listitem == 2)
			{
			ShowPlayerDialog(playerid, 10, DIALOG_STYLE_LIST, "10.Mit tesz ha megkölönböztetõ jelzésû autó halad ön mögött?","A:Lehúzódok és elengedem!\nB:Tovább haladok elõtte és feltartom!", "Választ", "");
			return 1;
			}
		}
	}
//=====================================Bukások==================================
	if(dialogid == 1)//1bukás
	{
		if(response)
		{
			if(listitem == 1 || 2)
			{
			ShowPlayerDialog(playerid, 11, DIALOG_STYLE_MSGBOX, "COK számítógép üzenet", "Helytelen válasz!Ön megbukott a kreszvizsgán!\n\nInfó: Class Cityben jobb oldali közlekedés van!", "Kilépés", "");
			//Cselekves(playerid, "megbukott a kreszvizsgán");
			return 1;
			}
		}
	}
	if(dialogid == 2)//2bukás
	{
		if(response)
		{
			if(listitem == 0 || 2)
			{
			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_MSGBOX, "COK számítógép üzenet", "Helytelen válasz!Ön megbukott a kreszvizsgán!\n\nInfó: A sebesség határ lakott területen belül 50km/h", "Kilépés", "");
			//Cselekves(playerid, "megbukott a kreszvizsgán");
			return 1;
			}
		}
	}
	if(dialogid == 3)//3bukás
	{
		if(response)
		{
			if(listitem == 0)
			{
			ShowPlayerDialog(playerid, 13, DIALOG_STYLE_MSGBOX, "COK számítógép üzenet", "Helytelen válasz!Ön megbukott a kreszvizsgán!\n\nInfó: Keresztezõdés közepén fordulás közben soha nem állunk meg, mert azzal akadályoznánk a forgalmat!", "kilépés", "");
			//Cselekves(playerid, "megbukott a kreszvizsgán");
			return 1;
			}
		}
	}
	if(dialogid == 4)//4bukás
	{
		if(response)
		{
			if(listitem == 1 || 2)
			{
			ShowPlayerDialog(playerid, 14, DIALOG_STYLE_MSGBOX, "COK számítógép üzenet", "Helytelen válasz!Ön megbukott a kreszvizsgán!\n\nInfó: Ha sebesültet vagy balesetet lát azonnal meg kell álni, kihívni a mentõket és segíteni amiben lehetséges!", "Kilépés", "");
			//Cselekves(playerid, "megbukott a kreszvizsgán");
			return 1;
			}
		}
	}
	if(dialogid == 5)//5bukás
	{
		if(response)
		{
			if(listitem == 0)
			{
			ShowPlayerDialog(playerid, 15, DIALOG_STYLE_MSGBOX, "COK számítógép üzenet", "Helytelen válasz!Ön megbukott a kreszvizsgán!\n\nInfó: Féktávolságot az ütközések elkerülése érdekében szükséges és kötelezõ is megtartani!", "Kilépés", "");
			//Cselekves(playerid, "megbukott a kreszvizsgán");
			return 1;
			}
		}
	}
	if(dialogid == 6)//6bukás
	{
		if(response)
		{
			if(listitem == 0 || 1)
			{
			ShowPlayerDialog(playerid, 16, DIALOG_STYLE_MSGBOX, "COK számítógép üzenet", "Helytelen válasz!Ön megbukott a kreszvizsgán!\n\nInfó: A piros lámpánál minden esetben meg kell állni!", "Kilépés", "");
			//Cselekves(playerid, "megbukott a kreszvizsgán");
			return 1;
			}
		}
	}
	if(dialogid == 7)//7bukás
	{
		if(response)
		{
			if(listitem == 0 || 2)
			{
			ShowPlayerDialog(playerid, 17, DIALOG_STYLE_MSGBOX, "COK számítógép üzenet", "Helytelen válasz!Ön megbukott a kreszvizsgán!\n\nInfó Az öv és a bukósisak használata minden esetben kötelezõ!", "Kilépés", "");
			//Cselekves(playerid, "megbukott a kreszvizsgán");
			return 1;
			}
		}
	}
	if(dialogid == 8)//8bukás
	{
		if(response)
		{
			if(listitem == 0)
			{
			ShowPlayerDialog(playerid, 18, DIALOG_STYLE_MSGBOX, "COK számítógép üzenet", "Helytelen válasz!Ön megbukott a kreszvizsgán!\n\nInfó: A világítást este és rossz látási viszonyok között kötelezõ használni!", "Kilépés", "");
			//Cselekves(playerid, "megbukott a kreszvizsgán");
			return 1;
			}
		}
	}
	if(dialogid == 9)//9bukás
	{
		if(response)
		{
			if(listitem == 0 || 1)
			{
			ShowPlayerDialog(playerid, 19, DIALOG_STYLE_MSGBOX, "COK számítógép üzenet", "Helytelen válasz!Ön megbukott a kreszvizsgán!\n\nInfó: A sebeség határ kaott területen kívül 90km/h ", "Kilépés", "");
			//Cselekves(playerid, "megbukott a kreszvizsgán");
			return 1;
			}
		}
	}
	if(dialogid == 10)//10bukás
	{
		if(response)
		{
			if(listitem == 1)
			{
			ShowPlayerDialog(playerid, 20, DIALOG_STYLE_MSGBOX, "COK számítógép üzenet", "Helytelen válasz!Ön megbukott a kreszvizsgán!\n\nInfó: Ha megkülönböztetõ jelzést használó autó halad ön mögött, azt köteles elengedni!", "Kilépés", "");
			//Cselekves(playerid, "megbukott a kreszvizsgán");
			return 1;
			}
		}
	}
//==============================Sikeres vizsga==================================
	if(dialogid == 10)//sikeres vizsga
	{
		if(response)
		{
			if(listitem == 0)
			{
			ShowPlayerDialog(playerid, 21, DIALOG_STYLE_MSGBOX, "COK számítógép üzenet", "Gratulálok a kreszvizsgát sikeresen letette!\n \nÉrvényes:\n-Autóra\n-Motorra\n-Kamionra", "Kilépés", "");
			//Cselekves(playerid, "sikeresen átment a kreszvizsgán");
			//===Itt kellene egy kresz engedélyt adni(48 óra érvényességgel)====
			PlayerInfo[playerid][pKreszJogsi] = JOGSI_KRESZ;
			SendClientMessage(playerid, 0xFF6347AA, "ClassRPG: Gratulálunk! Megkaptad a kreszlapodat!");
			return 1;
			}
		}
	}
//=============================Kresz tudnivalók=================================
	if(dialogid == 0)
	{
		if(response)
		{
			if(listitem == 1)
			{
				new DIALOGstring[2000];

				format(DIALOGstring, sizeof(DIALOGstring),"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
				"1.Szabály: Class Cityben a haladási irány mindig a jobb oldal!\n",
				"2.Szabály: Az öv és a bukósisak használata minden esetben kötelezõ!\n",
				"3.Szabály: A világítást este és rossz látási viszonyok között kötelezõ használni!\n",
				"4.Szabály: A piros lámpánál minden esetben meg kell állni!\n",
				"5.Szabály: Fordulás közben ha pirosat kap megállni nem szabad a keresztezõdésben, tovább kell menni!\n",
				"6.Szabály: Féktávolságot az ütközések elkerülése érdekében szükséges és kötelezõ is megtartani!\n",
				"7.Szabály: Ha sebesültet vagy balesetet lát azonnal meg kell álni, kihívni a mentõket és segíteni amiben lehetséges!\n",
				"8.Szabály: Ha megkülönböztetõ jelzést használó autó halad ön mögött, azt köteles elengedni!\n\n\n",
				"Class City sebességhatárai:\n-Lakott területen belül: 50km/h\n-Lakott területen kívül: 90km/h\n-Autópályán: 130km/h");




				ShowPlayerDialog(playerid, 11, DIALOG_STYLE_MSGBOX, "COK számítógép:Kreszinformációk", DIALOGstring, "Kilépés", "");
				//Cselekves(playerid, "elkezdte átolvasni a kreszinformációkat");
			}
		}
	}
	if(dialogid == DIALOG_PIAC)
	{
		//SendFormatMessage(playerid,COLOR_GREEN,"[piac]list: %d Dialog: %d",listitem,PiacDialog[playerid]);
		if(PiacDialog[playerid] == NINCS && response) // Befejezés után a fõmenüre irányítás
		{
			PiacDialog[playerid] = 0;
			ShowDialog(playerid, DIALOG_PIAC);
		}
		if(PiacDialog[playerid] == 0 && response) // Fõmenü
		{
			if(listitem == 3 || listitem == 4)
				return 1;
				
			if(0 <= listitem <= 4)
			{
				PiacDialog[playerid] = listitem + 1;
				ShowDialog(playerid, DIALOG_PIAC);
			}
		}
		else if(1 <= PiacDialog[playerid] <= 4) // Kínálat, Kereslet, Gyors vétel, Eladás >> Típusok listázása
		{
			if(!response && PiacDialogNext[playerid] != NINCS || response && PiacDialogNext[playerid] == NINCS)
				PiacDialog[playerid] = 0, ShowDialog(playerid, DIALOG_PIAC);
			else if(0 <= listitem <= 3)
				PiacDialog[playerid] = PiacDialog[playerid] * 10 + listitem + 1, ShowDialog(playerid, DIALOG_PIAC);
		}
		else if(PiacDialog[playerid] == 5) // Ajánlataid >> Ajánlatok listázása
		{
			if(!response)
				PiacDialog[playerid] = 0, ShowDialog(playerid, DIALOG_PIAC);
			else if(0 <= listitem <= 3)
				PiacDialog[playerid] = 51 + listitem, ShowDialog(playerid, DIALOG_PIAC);
		}
		else if(11 <= PiacDialog[playerid] <= 14) // Kínálatok >> Megvétel >> Kiválasztva a cucc
		{
			if(response && PiacDialogNext[playerid] == NINCS || !response && PiacDialogNext[playerid] != NINCS) // Ha nincs ajánlat és a vissza gombra kattint VAGY van ajánlat és a vissza gombra kattint
				PiacDialog[playerid] /= 10, ShowDialog(playerid, DIALOG_PIAC);
			else if(response)
				PiacDialog[playerid] *= 10, PiacAdatok[playerid][0] = DialogIDk[playerid][listitem], ShowDialog(playerid, DIALOG_PIAC);
		}
		else if(110 <= PiacDialog[playerid] <= 140) // Kínálatok >> Megvétel >> Megerõsítés ablak, mennyiség beírása megtörtént >> Befejezés
		{
			if(response && PiacDialogNext[playerid] == NINCS || !response && PiacDialogNext[playerid] != NINCS) // Ha nincs ajánlat és a vissza gombra kattint VAGY van ajánlat és a vissza gombra kattint
				PiacDialog[playerid] /= 10, ShowDialog(playerid, DIALOG_PIAC);
			else if(response)
			{
				new id;
				switch(PiacDialog[playerid])
				{
					case 110: id = P_KI_KOKAIN;
					case 120: id = P_KI_HEROIN;
					case 130: id = P_KI_MARIHUANA;
					case 140: id = P_KI_MATERIAL;
					default: return 1;
				}
				
				PiacAdatok[playerid][1] = strval(inputtext);
				new vid = PiacAdatok[playerid][0];
				for(new p = 0; p < MAX_PIAC_CUCC; p++)
				{
					if(Piac[id][p][pVan] && Piac[id][p][pID] == vid)
					{
						vid = p;
						break;
					}
				}
				
				if(0 <= vid < MAX_PIAC_CUCC && Piac[id][vid][pVan] && 0 < PiacAdatok[playerid][1] <= Piac[id][vid][pDB])
					PiacDialog[playerid] *= 10;
				
				ShowDialog(playerid, DIALOG_PIAC);
			}
		}
		else if(21 <= PiacDialog[playerid] <= 24) // Eladás - Mennyiség - Kokain, Heroin, Marihuana, Material
		{
			if(!response)
				PiacDialog[playerid] = 2, ShowDialog(playerid, DIALOG_PIAC);
			else
			{
				new maxi;
				switch(PiacDialog[playerid])
				{
					case 21: maxi = PlayerInfo[playerid][pKokain];
					case 22: maxi = PlayerInfo[playerid][pHeroin];
					case 23: maxi = PlayerInfo[playerid][pMarihuana];
					case 24: maxi = PlayerInfo[playerid][pMats];
				}
				
				PiacAdatok[playerid][0] = strval(inputtext);
				if(PiacAdatok[playerid][0] < 1 || PiacAdatok[playerid][0] > maxi)
					ShowDialog(playerid, DIALOG_PIAC);
				else
				{
					PiacDialog[playerid] *= 10;
					ShowDialog(playerid, DIALOG_PIAC);
				}
			}
		}
		else if(210 <= PiacDialog[playerid] <= 240) // Eladás - Darabár - Kokain, Heroin, Marihuana, Material
		{
			if(!response)
				PiacDialog[playerid] = 2, ShowDialog(playerid, DIALOG_PIAC);
			else
			{
				new maxi;
				switch(PiacDialog[playerid])
				{
					case 210: maxi = P_MAX_KOKAIN;
					case 220: maxi = P_MAX_HEROIN;
					case 230: maxi = P_MAX_MARISKA;
					case 240: maxi = P_MAX_MATI;
				}
				
				PiacAdatok[playerid][1] = strval(inputtext);
				if(PiacAdatok[playerid][1] < 0 || PiacAdatok[playerid][1] > maxi)
					ShowDialog(playerid, DIALOG_PIAC);
				else
				{
					PiacDialog[playerid] *= 10;
					ShowDialog(playerid, DIALOG_PIAC);
				}
			}
		}
		else if(31 <= PiacDialog[playerid] <= 34) // Eladás - Mennyiség - Kokain, Heroin, Marihuana, Material
		{
			if(!response)
				PiacDialog[playerid] = 3, ShowDialog(playerid, DIALOG_PIAC);
			else
			{
				new maxi;
				switch(PiacDialog[playerid])
				{
					case 31: maxi = PlayerInfo[playerid][pKokain];
					case 32: maxi = PlayerInfo[playerid][pHeroin];
					case 33: maxi = PlayerInfo[playerid][pMarihuana];
					case 34: maxi = PlayerInfo[playerid][pMats];
				}
				
				PiacAdatok[playerid][0] = strval(inputtext);
				if(PiacAdatok[playerid][0] < 1 || PiacAdatok[playerid][0] > maxi)
					ShowDialog(playerid, DIALOG_PIAC);
				else
				{
					PiacDialog[playerid] *= 10;
					ShowDialog(playerid, DIALOG_PIAC);
				}
			}
		}
		else if(310 <= PiacDialog[playerid] <= 340) // Eladás -vége piacnak
		{
			if(!response)
				PiacDialog[playerid] = 2, ShowDialog(playerid, DIALOG_PIAC);
			else
			{
				/*new maxi;
				switch(PiacDialog[playerid])
				{
					case 310: maxi = P_MAX_KOKAIN;
					case 320: maxi = P_MAX_HEROIN;
					case 330: maxi = P_MAX_MARISKA;
					case 340: maxi = P_MAX_MATI;
				}*/
				
				PiacDialog[playerid] *= 10;
				ShowDialog(playerid, DIALOG_PIAC);
			}
		}
		
		return 1;
	}
	else if(dialogid == KOCSIRADIO_SAJAT)
	{
		
		format(SajatRadio[playerid][rnev],128,"%s",inputtext);
		//format(RadioLista[15],128,"%s",SajatRadio[playerid][rnev]);
		ShowPlayerDialog(playerid, KOCSIRADIO_SAJATURL, DIALOG_STYLE_INPUT, "Rádió beállítások", "Rádió URL címe (mp3 vagy m3u):", "Ok", "mégse");
		
	}
	else if(dialogid == KOCSIRADIO_SAJATURL)
	{
		format(SajatRadio[playerid][rurl],128,"%s",inputtext);
		SendFormatMessage(playerid, COLOR_YELLOW, "Cím: %s URL: %s",SajatRadio[playerid][rnev],SajatRadio[playerid][rurl]);
	
	}
	else if(dialogid == MP4_YOUTUBEURL)
	{
		format(MP4YT[playerid][yLink], 128, "%s", inputtext);
		SendFormatMessage(playerid, COLOR_YELLOW, "URL beállítva: %s", MP4YT[playerid][yLink]);
		Msg(playerid, "Kérlek vedd figyelembe, hogy lejátszáskor a magyar ékezetes betûk rosszul fognak megjelenni!");
	}
	else if(dialogid == DIALOG_ZSEBRADIO)
	{
		Cselekves(playerid,"babrálja az MP4 lejátszóját.", 0);
		StopAudioStreamForPlayer(playerid);
		
		switch(listitem)
		{
			case 0:
			{
				StopAudioStreamForPlayer(playerid);
	            SendClientMessage(playerid,0x1BB2E0,"Rádió Kikapcsolva.");
	            Zsebradio[playerid] = 0;
				return true;
			}
			case 1: 
			{
				GameTextForPlayer(playerid, SajatRadio[playerid][rnev], 950, 5);
				PlayAudioStreamForPlayer(playerid, SajatRadio[playerid][rurl]);
				Zsebradio[playerid] = 1;
				return true;
			}
			case 2:
			{
				PlayYoutubeForPlayerFromStart(playerid, MP4YT[playerid][yLink], MP4);
				return true;
			}
			default:
			{
				GameTextForPlayer(playerid, RadioClass[listitem][2], 950, 5);
				//SendFormatMessage(playerid,COLOR_YELLOW,"%d - %s",listitem,RadioClass[listitem][0]);
				PlayAudioStreamForPlayer(playerid,RadioClass[listitem][0]);
				Zsebradio[playerid] = listitem+1;
				return true;
			}
	
		}
		TextDrawUpdate(playerid, TD_Info);
	}
	else if(dialogid == DIALOG_KOCSIRADIO)
	{ //kocsi rádiójának a dialogja
		Cselekves(playerid,"babrálja a kocsi rádióját.", 0);
		StopAudioStreamForPlayer(playerid);
		switch(listitem)
		{
			case 0:
			{
				StopAudioStreamForPlayer(playerid);
	            SendClientMessage(playerid,0x1BB2E0,"Rádió Kikapcsolva.");
	            KocsiRadio[GetPlayerVehicleID(playerid)] = 0;
			}
			case 1: 
			{
				GameTextForPlayer(playerid, SajatRadio[playerid][rnev], 950, 5);
				PlayAudioStreamForPlayer(playerid, SajatRadio[playerid][rurl]);
				KocsiRadio[GetPlayerVehicleID(playerid)] = 1;
			}
			default:
			{
			
				GameTextForPlayer(playerid, RadioClass[listitem][2], 950, 5);
				PlayAudioStreamForPlayer(playerid, RadioClass[listitem][0]);
				KocsiRadio[GetPlayerVehicleID(playerid)] = listitem+1;
			
			}
		
		
		}
		TextDrawUpdate(playerid, TD_Info);
		
		new vehicleid = GetPlayerVehicleID(playerid);
		foreach(Jatekosok, x)
		{
			if(IsPlayerInVehicle(x, vehicleid) && x != playerid && !IsABicikli(vehicleid))  
				RadioBetoltes(x, playerid);
		}
		/*new vehicleid = GetPlayerVehicleID(playerid);
		foreach(Jatekosok,x) {
			if(IsPlayerInAnyVehicle(x)) {
				if(x != playerid) {
					if(GetPlayerVehicleID(x) == vehicleid) {
						RadioBetoltes(x);
					}
				}
			}
		}*/
		
		return 1;
	}
	if(dialogid == DIALOG_BANKSZAMLA)
	{
		if(!response)
			return false;
		if(!IsNumeric(inputtext))
			return SendClientMessage(playerid, -1, "Hiba: A bankszámlaszám csak számokból állhat!");
		if(strlen(inputtext) < 3 || strlen(inputtext) > 6)
			return SendClientMessage(playerid, -1, "Hiba: A bankszámla 6 számjegyû lehet!");

		if(PlayerInfo[playerid][pBankSzamlaSzam] == strval(inputtext))
		{
			PlayerTextDrawHide(playerid, Bankszamla);
			PlayerTextDrawBoxColor(playerid, Bankszamla, 13107280);
			PlayerTextDrawShow(playerid, Bankszamla);
			Bankszamlas[playerid] = true;
		} else {
			PlayerTextDrawHide(playerid, Bankszamla);
			PlayerTextDrawBoxColor(playerid, Bankszamla, -939524016);
			PlayerTextDrawShow(playerid, Bankszamla);
			Bankszamlas[playerid] = false;
		}

		if(BankszamlasPIN[playerid] && Bankszamlas[playerid])
			PlayerTextDrawShow(playerid, Tovabb);
		else
			PlayerTextDrawHide(playerid, Tovabb);

		PlayerTextDrawSetString(playerid, Bankszamla, inputtext);
		return 1;
	}
	if(dialogid == DIALOG_BANKSZAMLAPIN)
	{
		if(!response)
			return false;
		if(!IsNumeric(inputtext))
			return SendClientMessage(playerid, -1, "Hiba: A bankszámlaszám jelszava csak számokból állhat!");
		if(strlen(inputtext) != 4)
			return SendClientMessage(playerid, -1, "Hiba: A bankszámla jelszava 4 számjegyû lehet!");

		if(PlayerInfo[playerid][pBankSzamlaJelszo] == strval(inputtext))
		{
			PlayerTextDrawHide(playerid, BankszamlaPIN);
			PlayerTextDrawBoxColor(playerid, BankszamlaPIN, 13107280);
			PlayerTextDrawShow(playerid, BankszamlaPIN);
			BankszamlasPIN[playerid] = true;
		} else {
			PlayerTextDrawHide(playerid, BankszamlaPIN);
			PlayerTextDrawBoxColor(playerid, BankszamlaPIN, -939524016);
			PlayerTextDrawShow(playerid, BankszamlaPIN);
			BankszamlasPIN[playerid] = false;
		}


		if(BankszamlasPIN[playerid] && Bankszamlas[playerid])
			PlayerTextDrawShow(playerid, Tovabb);
		else
			PlayerTextDrawHide(playerid, Tovabb);

		PlayerTextDrawSetString(playerid, BankszamlaPIN, inputtext);
		return 1;
	}
	if(dialogid == DIALOG_UTALASBANKSZAMLA)
	{
		if(!response)
			return false;
		if(!IsNumeric(inputtext))
			return SendClientMessage(playerid, -1, "Hiba: A bankszámlaszám csak számokból állhat!");
		if(strlen(inputtext) < 3 || strlen(inputtext) > 6)
			return SendClientMessage(playerid, -1, "Hiba: A bankszámla 6 számjegyû lehet!");

		new bankszamlaszama = BankSzamla(strval(inputtext));

		if(bankszamlaszama > -1)
		{
			PlayerTextDrawHide(playerid, Utalas);
			PlayerTextDrawBoxColor(playerid, Utalas, 13107280);
			PlayerTextDrawShow(playerid, Utalas);
			UtalasSzamla[playerid] = bankszamlaszama;
		} else {
			PlayerTextDrawHide(playerid, Utalas);
			PlayerTextDrawBoxColor(playerid, Utalas, -939524016);
			PlayerTextDrawShow(playerid, Utalas);
			UtalasSzamla[playerid] = 0;
		}

		if(UtalasSzamla[playerid] && UtalasOsszege[playerid])
			PlayerTextDrawShow(playerid, UtalasMehet);
		else
			PlayerTextDrawHide(playerid, UtalasMehet);

		PlayerTextDrawSetString(playerid, Utalas, inputtext);

		return true;
	}

	if(dialogid == DIALOG_UTALASOSSZEG)
	{
		if(!response)
			return false;
		if(!IsNumeric(inputtext))
			return SendClientMessage(playerid, -1, "Hiba: Az összeg csak számokból állhat!");

		if(PlayerInfo[playerid][pAccount] >= strval(inputtext))
		{
			PlayerTextDrawHide(playerid, UtalasOsszeg);
			PlayerTextDrawBoxColor(playerid, UtalasOsszeg, 13107280);
			PlayerTextDrawShow(playerid, UtalasOsszeg);
			UtalasOsszege[playerid] = strval(inputtext);
		} else {
			PlayerTextDrawHide(playerid, UtalasOsszeg);
			PlayerTextDrawBoxColor(playerid, UtalasOsszeg, -939524016);
			PlayerTextDrawShow(playerid, UtalasOsszeg);
			UtalasOsszege[playerid] = 0;
		}

		if(UtalasSzamla[playerid] && UtalasOsszege[playerid])
			PlayerTextDrawShow(playerid, UtalasMehet);
		else
			PlayerTextDrawHide(playerid, UtalasMehet);

		new formatocska[128];
		format(formatocska, sizeof(formatocska), "%dFt", strval(inputtext));
		PlayerTextDrawSetString(playerid, UtalasOsszeg, formatocska);

		return true;
	}
	if(dialogid == DIALOG_NYELV_TANUL)
	{
		if(MunkaFolyamatban[playerid]) return 1;
		
		if(!response)
			return 1;
			
		new time = UnixTime;
		if(PlayerInfo[playerid][pNyelv][0] > time)
		{
			new msg[128];
			format(msg, 128, "Nem rég tanultál nyelvet, legközelebb %d perc múlva lesz lehetõséged rá", (PlayerInfo[playerid][pNyelv][0] - time) / 60);
			SendClientMessage(playerid, COLOR_LIGHTRED, msg);
			return 1;
		}
		
		if(listitem == 0 || listitem > MAX_NYELV || PlayerInfo[playerid][pNyelv][listitem] >= 100)
			return Msg(playerid, "Ezt a nyelvet már elsajátítottad");
		
		if(!BankkartyaFizet(playerid, 2000)){ Msg(playerid, "Egy nyelvlecke ára 2,000Ft"); return 1; }		
		
		Cselekves(playerid, "elõvett egy könyvet és elkezdett nyelvet tanulni");
		SetTimerEx("Munkavege", MunkaIdo[11], 0, "ddd", playerid, M_NYELVTANULAS, listitem);
		
		new str[128]; format(str, 128, "ClassRPG: Elkezdted tanulni a %s nyelvet", Nyelvek[listitem - 1][0]);
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
		Freeze(playerid, MunkaIdo[11]);
		MunkaFolyamatban[playerid] = 1;
		
		return 1;
	}
	if(dialogid == DIALOG_OBJECT_TORLES)
	{
	    if(!response) {
	        ObjectIDje[playerid][0] = -1;
			ObjectIDje[playerid][1] = -1;
			ObjectIDje[playerid][2] = 0;
	        return true;
		}

		if(!strlen(inputtext))
		    ShowPlayerDialog(playerid, DIALOG_OBJECT_TORLES, DIALOG_STYLE_INPUT, "Adatok mentése", "Add meg a menteni kívánt object nevét", "Mentés", "Mégse");
		
		new File:torles = fopen("Log/TorlendoObject.log", io_append);
		if(torles)
		{
		    new formatasd[128], Float:objectposok[3];
		    GetDynamicObjectPos(ObjectIDje[playerid][0], ArrExt(objectposok));
		    format(formatasd, sizeof(formatasd), "[Object]: %d, %f, %f, %f // %s\n", ObjectIDje[playerid][1], ArrExt(objectposok), inputtext);
			fwrite(torles, formatasd);
			fclose(torles);
			
			SendFormatMessage(playerid, COLOR_GREEN, "Object adatai mentve! Adat: %d, %f, %f, %f // %s", ObjectIDje[playerid][1], ArrExt(objectposok), inputtext);
			ObjectIDje[playerid][0] = -1;
			ObjectIDje[playerid][1] = -1;
			ObjectIDje[playerid][2] = 0;
		}
	    return true;
	}
	if(dialogid == DIALOG_NYELV_HASZNAL)
	{
		if(!response)
			return 1;
		
		if(listitem != 0 && (listitem > MAX_NYELV || PlayerInfo[playerid][pNyelv][listitem] < 100))
			return Msg(playerid, "Ezt a nyelvet még nem sajátítottad el");
		
		if(PlayerInfo[playerid][pANyelv] == listitem)
			return Msg(playerid, "Jelenleg is ezt használod");
			
		PlayerInfo[playerid][pANyelv] = listitem;
		
		new str[128];
		if(listitem) format(str, 128, "ClassRPG: Most már %s nyelven beszélsz", Nyelvek[listitem - 1][0]);
		else format(str, 128, "ClassRPG: Most már magyar nyelven beszélsz");
		
		SendClientMessage(playerid, COLOR_LIGHTRED, str);
			
		return 1;
	}

	if(dialogid == DIALOG_C4)
	{
		if(!response) return 1;
		
		if(!C4X[playerid] && C4Kocsiban[playerid] == NINCS) return 1;
		
		switch(listitem) // "Azonnali robbantás\n5 másodperces késleltetés\n10 másodperces késleltetés\n15 másodperces késleltetés\n30 másodperces késleltetés\n1 perces késleltetés", "Aktivál", "Visszavon");
		{
			case 0:
			{
				if(C4Kocsiban[playerid] != NINCS)
				{
					new kocsi = C4Kocsiban[playerid];
					new Float:x, Float:y, Float:z;
					GetVehiclePos(kocsi, x, y, z);
					SetVehicleHealth(kocsi,0.0);
					CreateExplosion(x, y, z, 2, 500.0);
					foreach(Jatekosok, playa)
					{
						if(PlayerToPoint(15.0, playa, x, y, z))
							SetPlayerHealth(playa,0.0);
							
					}
					C4X[playerid] = 0.0;
					C4Y[playerid] = 0.0;
					C4Z[playerid] = 0.0;
					C4Ido[playerid] = 0;
					C4Kocsiban[playerid] = NINCS;
					PlayerInfo[playerid][pC4] = 0;
					Msg(playerid, "C4 felrobbantva!");
					Cselekves(playerid, "felrobbantott egy C4-et...");
					
					C4Lerakva[playerid] = 0;
				}
				else
				{
					CreateExplosion(C4X[playerid], C4Y[playerid], C4Z[playerid], 7, 50.0);
					foreach(Jatekosok, playa)
					{
						if(PlayerToPoint(10.0, playa, C4X[playerid], C4Y[playerid], C4Z[playerid]))
							SetPlayerHealth(playa,0.0);
							
					}
					C4Lerakva[playerid] = 0;
					C4X[playerid] = 0.0;
					C4Y[playerid] = 0.0;
					C4Z[playerid] = 0.0;
					C4Ido[playerid] = 0;
					C4Kocsiban[playerid] = NINCS;
					PlayerInfo[playerid][pC4] = 0;
					Msg(playerid, "C4 felrobbantva!");
					Cselekves(playerid, "felrobbantott egy C4-et...");
					
					if(IsValidDynamicObject(C4Object[playerid])) DestroyDynamicObject(C4Object[playerid]), C4Object[playerid]=INVALID_OBJECT_ID;
					if(IsValidDynamic3DTextLabel(C4Text[playerid])) DestroyDynamic3DTextLabel(C4Text[playerid]), C4Text[playerid]=INVALID_3D_TEXT_ID;
				}
				
				new c4uzi[128];
				Format(c4uzi, "[C4 Figyelmeztetés][%d]%s robbantott egy C4-et.", playerid, PlayerName(playerid));
				ABroadCast(COLOR_LIGHTRED, c4uzi, 1);
			}
			case 1: // 5mp
			{
				C4Ido[playerid] = 5;
				SendClientMessage(playerid, COLOR_LIGHTRED, "ClassRPG: Idõzítõ beállítva 5 másodpercre");
				Cselekves(playerid, "beidõzítette egy bombát");
			}
			case 2: // 10mp
			{
				C4Ido[playerid] = 10;
				SendClientMessage(playerid, COLOR_LIGHTRED, "ClassRPG: Idõzítõ beállítva 10 másodpercre");
				Cselekves(playerid, "beidõzítette egy bombát");
			}
			case 3: // 15mp
			{
				C4Ido[playerid] = 15;
				SendClientMessage(playerid, COLOR_LIGHTRED, "ClassRPG: Idõzítõ beállítva 15 másodpercre");
				Cselekves(playerid, "beidõzítette egy bombát");
			}
			case 4: // 30mp
			{
				C4Ido[playerid] = 30;
				SendClientMessage(playerid, COLOR_LIGHTRED, "ClassRPG: Idõzítõ beállítva 30 másodpercre");
				Cselekves(playerid, "beidõzítette egy bombát");
			}
			case 5: // 1p
			{
				C4Ido[playerid] = 60;
				SendClientMessage(playerid, COLOR_LIGHTRED, "ClassRPG: Idõzítõ beállítva 60 másodpercre");
				Cselekves(playerid, "beidõzítette egy bombát");
			}
		}
		
		return 1;
	}
	if(dialogid == DIALOG_SHORT_VEDELEM)
	{
	
		if(!IsNumeric(inputtext))
			return SendClientMessage(playerid, -1, "Hiba: Az összeg csak számokból állhat!");

		if(PlayerInfo[playerid][pVeletlen] == strval(inputtext))
		{
	
			ShowPlayerDialog(playerid, DIALOG_KINCS, DIALOG_STYLE_INPUT, "Kincs", "Most meg kell adnod a széf kódját.\n\
			Ez egy "KINCS_KOD_HOSSZ_STRING" jegyû szám, melynek minden számjegye vagy 0, vagy 1\nA helyes megoldásnál a széf kinyílik, és megkapod a jutalmadat.\n\nA tipped:", "Nyitás", "");
			return 1;
		}
		else
		{
			PlayerInfo[playerid][pVeletlen] = random(2000)+20000;
			format(_tmpString, sizeof(_tmpString),"Nahát! Hibás kódot adtál meg!\nAdd meg az alábbi számot: %d",PlayerInfo[playerid][pVeletlen]);
			
			ShowPlayerDialog(playerid, DIALOG_SHORT_VEDELEM, DIALOG_STYLE_INPUT, "Kincs", _tmpString, "Nyitás", "");
			return 1;
		}
	
	
	}
	if(dialogid == DIALOG_KINCS)
	{
		if(!response) return 1;

		new van = NINCS;
		for(new k = 0; k < MAX_KINCS; k++)
		{
			if(Kincs[k][kPos][0] != 0.0 && PlayerToPoint(5, playerid, ArrExt( Kincs[k][kPos] )))
			{
				van = k;
				break;
			}
		}
		
		if(van == NINCS || KincsAktiv != van) return 1;

		if(strlen( inputtext ) != KINCS_KOD_HOSSZ)
		{
			PlayerInfo[playerid][pVeletlen] = random(2000)+20000;
			format(_tmpString, sizeof(_tmpString),"Nahát! Hibás kódot adtál meg!\nAdd meg az alábbi számot: %d",PlayerInfo[playerid][pVeletlen]);
			
			ShowPlayerDialog(playerid, DIALOG_SHORT_VEDELEM, DIALOG_STYLE_INPUT, "Kincs", _tmpString, "Nyitás", "");
			return 1;
		}

		format(_tmpString,sizeof(_tmpString),"[%d] %s - /kincs nyit %s",playerid,PlayerName(playerid),inputtext);
		Log("Parancsok",_tmpString);
		
		new koztes;
		
		koztes = UnixTime - KincsTimer[playerid];
		
		if(KincsKozte[playerid] == koztes)
			KincsSzamlalo[playerid]++;
		else
			KincsSzamlalo[playerid] = 0;
			
		KincsTimer[playerid] = UnixTime;
		KincsKozte[playerid] = koztes;
		if(!egyezik( inputtext, KincsKod ))
		{
			
			PlayerInfo[playerid][pVeletlen] = random(2000)+20000;
			format(_tmpString, sizeof(_tmpString),"Szép próbálkozás DE Hibás kódot adtál meg!\nAdd meg az alábbi számot: %d",PlayerInfo[playerid][pVeletlen]);
			
			ShowPlayerDialog(playerid, DIALOG_SHORT_VEDELEM, DIALOG_STYLE_INPUT, "Kincs", _tmpString, "Nyitás", "");
			return 1;	
		}
		else
		{
		
			
			new szoveg[256], jutalom[128], rnd;
			
			KincsGeneralas:
			rnd = random(1000)+1;

			if(1 <= rnd < 400) // Készpénz - 40%
			{
				new penz;
				switch(OnlineJatekosok)
				{
					case 0..29: penz = 			Rand(  50000,   250000);		 	//    50,000	-	  250,000
					case 60..89: penz = 		Rand( 500000,  5000000);			//   500,000	-	5,000,000
					case 30..59: penz = 		Rand( 300000,  2500000);			//   300,000	-	2,500,000
					case 90..119: penz = 		Rand(1000000, 10000000);			// 1,000,000	-	10,000,000
					case 120..149: penz = 		Rand(2000000, 15000000);			// 2,000,000	-	15,000,000
					default: penz =			 	Rand(3000000, 20000000);			// 3,000,000	-	20,000,000
				}
				format(jutalom, 128, "Készpénz (%dFt)", penz);
				GiveMoney(playerid, penz);
				Cselekves(playerid, "szerzett egy kis pénzt és egy ládát", 1);
			}
			else if(400 <= rnd < 600) // Mati || Drog - 20%
			{
				if(Civil(playerid) || LegalisSzervezetTagja(playerid))
					goto KincsGeneralas;
				
				new cucc;
				switch(random(2))
				{
					case 0: // Drog
					{
						switch(OnlineJatekosok)
						{
							case 0..29: cucc = 100 + random(200); 			// 100	-	300
							case 30..59: cucc = 300 + random(300);			// 300	-	600
							case 60..89: cucc = 400 + random(500);			// 400	-	900
							case 90..119: cucc = 500 + random(700);			// 500	-	1200
							case 120..149: cucc = 600 + random(900);		// 600	-	1500
							default: cucc = 700 + random(1200);					// 700	-	1900
						}
						format(jutalom, 128, "Drog (%dg)", cucc);
						PlayerInfo[playerid][pKokain] += cucc;
						PlayerInfo[playerid][pHeroin] += cucc;
						PlayerInfo[playerid][pMarihuana] += cucc;
						Cselekves(playerid, "szerzett egy kis drogot és egy ládát", 1);
					}
					case 1: // Mati
					{
						switch(OnlineJatekosok)
						{
							case 0..29: cucc = 5000 + random(7000); 				// 5000	-	7000
							case 30..59: cucc = 6000 + random(15000);			// 6000	-	15000
							case 60..89: cucc = 7000 + random(30000);			// 7000	-	30000
							case 90..119: cucc = 8000 + random(50000);			// 8000	-	50000
							case 120..149: cucc = 9000 + random(65000);		// 9000	-	65000
							default: cucc = 10000 + random(90000);					// 10000	-	90000
						}
						format(jutalom, 128, "Mati (%ddb)", cucc);
						PlayerInfo[playerid][pMats] += cucc;
						Cselekves(playerid, "szerzett egy kis materialt és egy ládát", 1);
					}
				}
			}
			else if(600 <= rnd < 800) // Fegyver - 20%
			{
				if(Civil(playerid) || LegalisSzervezetTagja(playerid))
					goto KincsGeneralas;
				
				switch(OnlineJatekosok)
				{
					case 0..29: if(random(3) == 0) goto KincsGeneralas;
					case 30..49: if(random(4) == 0) goto KincsGeneralas;
				}
				
				switch(random(2))
				{
					case 0:
					{
						format(jutalom, 128, "M4 (3000 lõszerrel)");
						
						WeaponGiveWeapon(playerid, WEAPON_M4, 3000);
					}
					case 1:
					{
						format(jutalom, 128, "Sniper (600 lõszerrel)");
						
						WeaponGiveWeapon(playerid, WEAPON_SNIPER, 600);
					}
				}
				
				Cselekves(playerid, "szerzett egy fegyvert és egy ládát", 1);
			}
			else if(800 <= rnd < 920) // Ház - 12%
			{
				if(PlayerInfo[playerid][pPhousekey] != NINCS && PlayerInfo[playerid][pPhousekey2] != NINCS && PlayerInfo[playerid][pPhousekey3] != NINCS)
					goto KincsGeneralas;
					
				new haz = NINCS;
				for(new h = 0; h < MAXHAZ; h++)
				{
					if(HouseInfo[h][Van] && InaktivCucc(h, INAKTIV_HAZ))
					{
						haz = h;
						break;
					}
				}
				if(haz == NINCS) goto KincsGeneralas;
				
				HouseInfo[haz][hOwned] = 1;
				HouseInfo[haz][hCsak] = 0;
				strmid(HouseInfo[haz][hOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 25);
				HouseInfo[haz][hTulaj] = PlayerInfo[playerid][pID];
				HazUpdate(haz, HAZ_Owned, HAZ_Owner, HAZ_Csak, HAZ_Tulaj);
				CorrectPlayerDatas(playerid);
				DateProp(playerid, DP_Haz);
				
				format(jutalom, 128, "Egy ház kulcsa");
				Cselekves(playerid, "szerzett egy házat és egy ládát", 1);
			}
			else if(920 <= rnd < 990) // Jármû - 7%
			{
				if(PlayerInfo[playerid][pPcarkey] != NINCS && PlayerInfo[playerid][pPcarkey2] != NINCS && PlayerInfo[playerid][pPcarkey3] != NINCS)
					goto KincsGeneralas;
					
				new kocsi = NINCS;
				for(new k = 0; k < MAXVSKOCSI; k++)
				{
					if(CarInfo[k][Van] && InaktivCucc(k, INAKTIV_KOCSI))
					{
						kocsi = k;
						break;
					}
				}
				if(kocsi == NINCS) goto KincsGeneralas;
				
				CarInfo[kocsi][cOwned] = 1;
				strmid(CarInfo[kocsi][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 25);
				CarInfo[kocsi][cTulaj] = PlayerInfo[playerid][pID];
				CarUpdate(kocsi, CAR_Owned, CAR_Owner, CAR_Tulaj);
				CorrectPlayerDatas(playerid);
				DateProp(playerid, DP_Kocsi);
				
				format(jutalom, 128, "Egy jármû kulcsa");
				Cselekves(playerid, "szerzett egy jármûvet és egy ládát", 1);
			}
			else if(970 <= rnd < 990) // Arany - 2%
			{				
				new darab;
				switch(OnlineJatekosok)
				{
					case 0..49: darab = 1;
					case 50..79: darab = 2;
					case 80..129: darab = 3;
					default: darab = 4;
				}
				//PlayerInfo[playerid][pArany] += darab;
				
				format(jutalom, 128, "%s darab aranyrúd", darab);
				Cselekves(playerid, "szerzett egy ládát", 1);
			}
			else if(990 <= rnd <= 1000) // Gyémánt - 1%
			{
				goto KincsGeneralas;
				
				new gy = NINCS;
				for(new g = 0; g < MAX_GYEMANT; g++)
				{
					if(Gyemant[g][gPos][0] == 0.0)
					{
						gy = g;
						break;
					}
				}
				
				if(gy == NINCS) goto KincsGeneralas;
				
				Gyemant[gy][gPlayer] = NINCS;
				Gyemant[gy][gFrakcio] = NINCS;
				
				GyemantAkcio( GYEMANT_FELVESZ, playerid, gy);
				format(jutalom, 128, "Egy különleges gyémánt");
				Cselekves(playerid, "szerzett egy különleges gyémántot és egy ládát", 1);
			}
			
			if(!strlen(jutalom)) goto KincsGeneralas;
			
			// + 1 láda
			#if defined SYSTEM_BONUS
			strcat(jutalom, " és egy láda");
			GiveRandomToken(playerid, BONUS_REASON_TREASURE);
			#endif
			
			format(szoveg, 256, "Gratulálok, %s! Kinyitottad a széfet!\nJutalmad: %s", PlayerName(playerid), jutalom);
			ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kincs", szoveg, "Rendben", "");
			GiveBonusKredit(playerid, 3, "kincs", true, true);
			
			UpdateDynamic3DTextLabelText(KincsObject, COLOR_LIGHTRED, "KINCS\nKinyitották...");

			KincsIdo = 300;
			KincsAktiv = NINCS;
			
			format(szoveg, 256, "<< [%d]%s kinyitotta a kincset - jutalma: %s >>", playerid, Nev(playerid), jutalom);
			Log("Szef", szoveg);
			print(szoveg);
			ABroadCast(COLOR_YELLOW, szoveg, 1337);
		}
		
		return 1;
	}
	if(response == 1) //resp1!
	{
		
		new string[1000];
		if(dialogid == DIALOG_AJSZOVEG)
		{
			if(PlayerInfo[playerid][pJailed] == 6)
			{
				if(!inputtext[0] || !egyezik(inputtext, JailSzovegek[ AJSzoveg[playerid] ]) && !egyezik(inputtext, EkezetMentes( JailSzovegek[ AJSzoveg[playerid] ] ))
					&& !Eegyezik(inputtext, JailSzovegek[AJSzoveg[playerid]]))
				{
					AJSzovegHiba[playerid]++;
					if(AJSzovegHiba[playerid] < 3)
					{
						new ido = 20 + strlen( JailSzovegek[ AJSzoveg[playerid] ] ) / 5;
						new szoveg[256];
						format(szoveg, 256, "Hibáztál!\nÍrd be a következõ szöveget, betûre pontosan!\n\n\"%s\"\n\nHa beírod, az idõd csökken %d másodperccel", JailSzovegek[ AJSzoveg[playerid] ], ido);
						ShowPlayerDialog(playerid, DIALOG_AJSZOVEG, DIALOG_STYLE_INPUT, "Magánzárka", szoveg, "Mehet", "");
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Magánzárka", "Sajnos túl sokat hibáztál, ezért az idõd nem csökkent\nLegközelebb talán sikerül :)", "OK", "");
						AJSzovegIdo[playerid] = 20;
					}
				}
				else
				{
					new ido = 20 + strlen( JailSzovegek[ AJSzoveg[playerid] ] ) / 6;
					if(PlayerInfo[playerid][pJailTime] <= ido)
					{
						PlayerInfo[playerid][pJailTime] = 0;
						PlayerInfo[playerid][pJailed] = 0;
						
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0, "mzkirak");
						//PlayerInfo[playerid][pTeleportAlatt] = 1;
						//PlayerInfo[playerid][pCFalsePositive] = 1;
						SetPlayerPos(playerid, 1480.612548, -1743.773803, 13.546875);
						//printf("%s teljesítette a magánzárkáját", PlayerName(playerid));
						
						new szoveg[120];
						format(szoveg, 120, "Az adminjail idõd letelt\nReméljük, hogy legközelebb átgondolod, mielõtt rosszat teszel!");
						ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Magánzárka", szoveg, "OK", "");
					}
					else
					{
						new szoveg[90];
						format(szoveg, 90, "Az idõd csökkent %d másodperccel, csak így tovább! :)", ido);
						ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Magánzárka", szoveg, "OK", "");
						
						PlayerInfo[playerid][pJailTime] -= ido;
						AJSzovegIdo[playerid] = 20;
					}
				}
			}
			elseif(PlayerInfo[playerid][pJailed] == 8)
			{
				if(!inputtext[0] || strcmp(inputtext, AJSzovegString[playerid], false))
				{
					AJSzovegHiba[playerid]++;
					if(AJSzovegHiba[playerid] < 3)
					{
						new ido = 30 + strlen(AJSzovegString[playerid]);
						new szoveg[256];
						format(szoveg, 256, "Hibáztál!\nÍrd be a következõ karaktereket, betûre pontosan, kisbetûkre és nagybetûkre egyaránt figyelve!\n\n\%s\n\nHa beírod, az idõd csökken %d másodperccel", AJSzovegString[playerid], ido);
						ShowPlayerDialog(playerid, DIALOG_AJSZOVEG, DIALOG_STYLE_INPUT, "Extra Magánzárka", szoveg, "Mehet", "");
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Extra Magánzárka", "Sajnos túl sokat hibáztál, ezért az idõd nem csökkent\nLegközelebb talán sikerül :)", "OK", "");
						AJSzovegIdo[playerid] = 20;
					}
				}
				else
				{
					new ido = 30 + strlen( AJSzovegString[playerid] );
					if(PlayerInfo[playerid][pJailTime] <= ido)
					{
						PlayerInfo[playerid][pJailTime] = 0;
						PlayerInfo[playerid][pJailed] = 0;
						
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0, "aj3kirak");
						//PlayerInfo[playerid][pTeleportAlatt] = 1;
						//PlayerInfo[playerid][pCFalsePositive] = 1;
						SetPlayerPos(playerid, 1480.612548, -1743.773803, 13.546875);
						//printf("%s teljesítette a magánzárkáját", PlayerName(playerid));
						
						new szoveg[120];
						format(szoveg, 120, "Az adminjail idõd letelt\nReméljük, hogy legközelebb átgondolod, mielõtt rosszat teszel!");
						ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Extra Magánzárka", szoveg, "OK", "");
					}
					else
					{
						new szoveg[90];
						format(szoveg, 90, "Az idõd csökkent %d másodperccel, csak így tovább! :)", ido);
						ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Extra Magánzárka", szoveg, "OK", "");
						
						PlayerInfo[playerid][pJailTime] -= ido;
						AJSzovegIdo[playerid] = 20;
					}
				}
			}
			return 1;
		}
		
		else if(dialogid == DIALOG_RACETUNING)
		{
			if(PlayerRaceInfo[playerid][xVersenyen] == NINCS || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
			listitem++;
			new kocsi = GetPlayerVehicleID(playerid);
			switch(listitem)
			{
				case 1:
				{
					if(!PenzLevesz(playerid, 75000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 75,000Ftba kerül");
					else if(GetVehicleComponentInSlot(kocsi, CARMODTYPE_HYDRAULICS) == 1087)
						return ShowTuningDialog(playerid, false, "Hiba: Már van hidraulika a kocsin");
					
					if(GetVehicleComponentInSlot(kocsi, CARMODTYPE_HYDRAULICS) != 1087)
						AddVehicleComponent(kocsi, 1087);
						
					PlayerRaceTuning[playerid][tNitro] = 0;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Hidraulika");
					Cselekves(playerid, "vett egy hidraulikát");
				}
				case 2:
				{
					if(GetVehicleComponentInSlot(kocsi, CARMODTYPE_NITRO) == 1010)
						return ShowTuningDialog(playerid, false, "Hiba: Már van nitro a kocsidon!");
					else if(!PenzLevesz(playerid, 75000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 75,000Ftba kerül");
					
					if(GetVehicleComponentInSlot(kocsi, CARMODTYPE_NITRO) != 1010)
						AddVehicleComponent(kocsi, 1010);
						
					PlayerRaceTuning[playerid][tNitro] = 0;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Alap nitropack");
					Cselekves(playerid, "vett egy alap nitropackot");
				}
				case 3:
				{
					if(PlayerRaceTuning[playerid][tNitro] >= 1)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen vagy erõsebb nitro a kocsidon!");
					else if(!PenzLevesz(playerid, 150000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 150,000Ftba kerül");
					
					if(GetVehicleComponentInSlot(kocsi, CARMODTYPE_NITRO) != 1010)
						AddVehicleComponent(kocsi, 1010);
						
					PlayerRaceTuning[playerid][tNitro] = 1;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Gyors nitropack");
					Cselekves(playerid, "vett egy gyors nitropackot");
				}
				case 4:
				{
					if(PlayerRaceTuning[playerid][tNitro] == 2)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen nitro a kocsidon!");
					else if(!PenzLevesz(playerid, 250000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 250,000Ftba kerül");
					
					if(GetVehicleComponentInSlot(kocsi, CARMODTYPE_NITRO) != 1010)
						AddVehicleComponent(kocsi, 1010);
						
					PlayerRaceTuning[playerid][tNitro] = 2;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Szupergyors nitropack");
					Cselekves(playerid, "vett egy szupergyors nitropackot");
				}
				case 5:
				{
					if(PlayerRaceTuning[playerid][tUjito] >= 1)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen vagy erõsebb robot a kocsidon!");
					else if(!PenzLevesz(playerid, 180000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 180,000Ftba kerül");
					
					PlayerRaceTuning[playerid][tUjito] = 1;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Alap mechanikus robot");
					Cselekves(playerid, "vett egy alap mechanikus robotot");
				}
				case 6:
				{
					if(PlayerRaceTuning[playerid][tUjito] == 2)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen robot a kocsidon!");
					else if(!PenzLevesz(playerid, 180000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 300,000Ftba kerül");
					
					PlayerRaceTuning[playerid][tUjito] = 2;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Fejlett mechanikus robot");
					Cselekves(playerid, "vett egy fejlett mechanikus robotot");
				}
				case 7:
				{
					if(PlayerRaceTuning[playerid][tOrvos])
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen robot a kocsidon!");
					else if(!PenzLevesz(playerid, 150000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 150,000Ftba kerül");
					
					PlayerRaceTuning[playerid][tOrvos] = true;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Orvosi robot");
					Cselekves(playerid, "vett egy orvosi robotot");
				}
				case 8:
				{
					if(PlayerRaceTuning[playerid][tEMP] >= 1)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen vagy erõsebb EMP védelem a kocsidon!");
					else if(!PenzLevesz(playerid, 150000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 150,000Ftba kerül");
					
					PlayerRaceTuning[playerid][tEMP] = 1;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Minimális EMP védelem");
					Cselekves(playerid, "vett egy minimális EMP védelmet");
				}
				case 9:
				{
					if(PlayerRaceTuning[playerid][tEMP] >= 2)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen vagy erõsebb EMP védelem a kocsidon!");
					else if(!PenzLevesz(playerid, 400000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 400,000Ftba kerül");
					
					PlayerRaceTuning[playerid][tEMP] = 2;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Közepes EMP védelem");
					Cselekves(playerid, "vett egy közepes EMP védelmet");
				}
				case 10:
				{
					if(PlayerRaceTuning[playerid][tEMP] == 3)
						return ShowTuningDialog(playerid, false, "Hiba: Már van ilyen EMP védelem a kocsidon!");
					else if(!PenzLevesz(playerid, 1000000))
						return ShowTuningDialog(playerid, false, "Hiba: Ez a fejlesztés 1,000,000Ftba kerül");
					
					PlayerRaceTuning[playerid][tEMP] = 3;
					ShowTuningDialog(playerid, false, "Sikeresen megvásároltad: Felett EMP védelem");
					Cselekves(playerid, "vett egy fejlett EMP védelmet");
				}
			}
		}
		else if(dialogid == DIALOG_RACETUNING_2)
		{
			ShowTuningDialog(playerid);
			return 1;
		}
		else if(dialogid == DIALOG_GYVESZ)
		{
		
			TogglePlayerControllable(playerid, true);
			new gondolat[100];
			listitem++;
			switch(listitem)
			{
				case 1:
				{
					if(PlayerInfo[playerid][pAspirin] > 20)
					{
						format(string, sizeof(string), "Nekem már van aspirin -em...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_GYVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Neked már van aspirin-ed.");
						return 1;
					}
					if(!BankkartyaFizet(playerid,8000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_GYVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed, hogy ezt megvedd.");
						return 1;
					}
					FrakcioSzef(FRAKCIO_MENTO,8000);
					PlayerInfo[playerid][pAspirin] += 10;
					format(string, sizeof(string), "Vettél aspirint!\n");
					ShowPlayerDialog(playerid, DIALOG_GYVESZ, DIALOG_STYLE_MSGBOX, "Gyógyszertár", string, "Ok", "Mégse");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vettél egy aspirint.");
					Cselekves(playerid, "vett egy aspirint", 1);
					TogglePlayerControllable(playerid, true);
					return 1;
				}
				case 2:
				{
					if(PlayerInfo[playerid][pCataflan] > 20)
					{
						format(string, sizeof(string), "Nekem már van cataflan -om...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_GYVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Neked már van aspirin-ed.");
						return 1;
					}
					if(!BankkartyaFizet(playerid,12000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_GYVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed, hogy ezt megvedd.");
						return 1;
					}
					FrakcioSzef(FRAKCIO_MENTO,12000);
					PlayerInfo[playerid][pCataflan] += 10;
					format(string, sizeof(string), "Vettél cataflánt!\n");
					ShowPlayerDialog(playerid, DIALOG_GYVESZ, DIALOG_STYLE_MSGBOX, "Gyógyszertár", string, "Ok", "Mégse");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vettél egy cataflant.");
					Cselekves(playerid, "vett egy cataflant", 1);
					TogglePlayerControllable(playerid, true);
				}
		
			}
		}
		else if(dialogid == DIALOG_AVESZ)
		{
		    TogglePlayerControllable(playerid, true);
			new gondolat[100];
			listitem++;
			switch(listitem)
			{
				case 1:
				{
					if(PlayerInfo[playerid][pVontatokotel] == 1)
					{
						format(string, sizeof(string), "Nekem már van vontatókötelem...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Neked már van egy vontatóköteled.");
						return 1;
					}
					if(!BankkartyaFizet(playerid,3000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed, hogy ezt megvedd.");
						return 1;
					}
					BizPenz(BIZ_AUTOSBOLT, 3000);
					PlayerInfo[playerid][pVontatokotel] = 1;
					format(string, sizeof(string), "Vettél egy vontatókötelet!\n");
					ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, "Autósbolt", string, "Ok", "Mégse");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vettél egy vontatókötelet.");
					Cselekves(playerid, "vett egy vontató kötelet", 1);
					TogglePlayerControllable(playerid, true);
				}
				case 2:
				{
					if(PlayerInfo[playerid][pAkkuTolto] != 0) 
					{
						format(string, sizeof(string), "Nekem már van egy akkumulátortöltõm...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nekem már van egy Akkumulátortöltõm.");
						return 1;
					}
					if(!BankkartyaFizet(playerid, 40000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed, hogy ezt megvedd.");
						return 1;
					}
					
					BizPenz(BIZ_AUTOSBOLT, 40000);
					PlayerInfo[playerid][pAkkuTolto] = 1;
					format(string, sizeof(string), "Vettél egy akkumulátortöltõt!\n");
					ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, "Autósbolt", string, "Ok", "Mégse");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vettél egy akkumulátortöltõt.");
					Cselekves(playerid, "vett egy akkumulátortöltõt", 1);
				}
				case 3:
				{
					if(PlayerInfo[playerid][pLokator] == 1)
					{
						format(string, sizeof(string), "Nekem már van GPS Lokátorom...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Neked már van GPS-ed, a /gps paranccsal tudod használni.");
						return 1;
					}
					if(!BankkartyaFizet(playerid,40000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed, hogy ezt megvedd.");
						return 1;
					}
					BizPenz(BIZ_AUTOSBOLT, 40000);
					PlayerInfo[playerid][pLokator] = 1;
					format(string, sizeof(string), "Vettél egy GPS Lokátort!\n");
					ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, "Autósbolt", string, "Ok", "Mégse");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vettél egy GPS-t, a /gps paranccsal használhatod.");
				}
				case 4:
				{
					if(PlayerInfo[playerid][pBikazoKabel] != 0) 
					{
						format(string, sizeof(string), "Nekem már van egy bikázókábelem...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nekem már van egy bikázókábelem.");
						return 1;
					}
					if(!BankkartyaFizet(playerid,20000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed, hogy ezt megvedd.");
						return 1;
					}
					BizPenz(BIZ_AUTOSBOLT, 20000);
					PlayerInfo[playerid][pBikazoKabel] = 1;
					format(string, sizeof(string), "Vettél egy bikázókábelt!\n");
					ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, "Autósbolt", string, "Ok", "Mégse");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vettél egy bikazókábelt.");
					Cselekves(playerid, "vett egy bikazókábelt", 1);
				}
				case 5:
				{
					if(PlayerInfo[playerid][pSzerszamoslada] == 1) 
					{
						format(string, sizeof(string), "Nekem már van egy szerszámosládám...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						return 1;
					}
					if(!BankkartyaFizet(playerid, 50000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed, hogy ezt megvedd.");
						return 1;
					}
					BizPenz(BIZ_AUTOSBOLT, 50000);
					PlayerInfo[playerid][pSzerszamoslada] = 1;
					format(string, sizeof(string), "Vettél egy szerszámosládát!\n");
					ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, "Autósbolt", string, "Ok", "Mégse");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vettél egy szerszámosládát.");
					Cselekves(playerid, "vett egy szerszámosládát", 1);
				}
				case 6:
				{
					if(PlayerInfo[playerid][pMotorolaj] == 1)
					{
						format(string, sizeof(string), "Nekem már van motorolajam...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						return 1;
					}
					if(!BankkartyaFizet(playerid, 20000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed, hogy ezt megvedd.");
						return 1;
					}
					BizPenz(BIZ_AUTOSBOLT, 20000);
					PlayerInfo[playerid][pMotorolaj] = 1;
					format(string, sizeof(string), "Vettél egy egyszerhasználatos motorolajat!\n");
					ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, "Autósbolt", string, "Ok", "Mégse");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vettél egy motorolajat.");
					Cselekves(playerid, "vett egy motorolajat", 1);
				}
				case 7:
				{
					
					new mit = NINCS;
					new elfer = WeaponCanHoldWeapon(playerid, WEAPON_SPRAYCAN, 1);
					if(elfer < 0)
					{
						 if(WeaponCanHoldAmmo(playerid, WEAPON_SPRAYCAN, 250))
						 {
							mit=1;
						 }
					}
					else
					{
						if(WeaponCanHoldAmmo(playerid, WEAPON_SPRAYCAN, 250))
						{
							mit=2;
						}
					}
					if(mit == NINCS) return Msg(playerid, "Sajnálom, de nem fér el nálad!");
					
					if(!BankkartyaFizet(playerid, 15000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "Mégse");
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs elég pénzed, hogy ezt megvedd.");
						return 1;
					}
					
					if(mit == 2) WeaponGiveWeapon(playerid, WEAPON_SPRAYCAN, 250, 1);
					else if(mit == 1) WeaponGiveAmmo(playerid, WEAPON_SPRAYCAN, 250);
		
					BizPenz(BIZ_AUTOSBOLT, 15000);
					format(string, sizeof(string), "Vettél egy doboz festékszórót!\n");
					ShowPlayerDialog(playerid, DIALOG_AVESZ, DIALOG_STYLE_MSGBOX, "Autósbolt", string, "Ok", "Mégse");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vettél egy festékszórót.");
					Cselekves(playerid, "vett egy festékszórót", 1);
				}
			}	
		}
		else if(dialogid == DIALOG_ABSZ)
		{
			//atm
			TogglePlayerControllable(playerid, true);
			
			switch(listitem)
			{
				case 0:
				{
					if(PlayerInfo[playerid][pZarolva] == 1) return ShowPlayerDialog(playerid, DIALOG_ABSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Számlád zárolva", "Tovább", "Mégse");
					if(CsatlakozottSzamla[playerid] != NINCS) return ShowPlayerDialog(playerid, DIALOG_ABSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Már belépett erre a számlára", "Tovább", "Mégse");
	                ShowPlayerDialog(playerid, DIALOG_ABSZ_BELEPES, DIALOG_STYLE_INPUT, "Bankszámla Belépés", "Kérem adja meg a kártyához tartozó jelszót:", "Tovább", "Mégse");
				}
				case 1:
				{
					if(PlayerInfo[playerid][pZarolva] == 1) return ShowPlayerDialog(playerid, DIALOG_ABSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Számlád zárolva", "Tovább", "Mégse");
					if(CsatlakozottSzamla[playerid] == NINCS) return ShowPlayerDialog(playerid, DIALOG_ABSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Elõször lépjen be", "Tovább", "Mégse");
					ShowPlayerDialog(playerid, DIALOG_ABSZ_KIVETEL, DIALOG_STYLE_INPUT, "Bankszámla Kivétel", "Kérem adja meg a kivenni kívánt összeget:", "Tovább", "Mégse");
				}
			}	
		}	
		else if(dialogid == DIALOG_ABSZ_BELEPES)
		{
			new MegadottSzamlaJelszo = strval(inputtext);
			if(PlayerInfo[playerid][pBankSzamlaJelszo] == MegadottSzamlaJelszo)
			{
				Format(string, "Belépés sikeres!\n Számlán található összeg: %sFt", FormatNumber(PlayerInfo[playerid][pAccount], 0, ',' ));
				ShowPlayerDialog(playerid, DIALOG_ABSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", string, "Tovább", "Mégse");
				CsatlakozottSzamla[playerid] = PlayerInfo[playerid][pBankSzamlaSzam];
				Cselekves(playerid, "belépett egy bankszámlára...");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ABSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Helytelen jelszó", "Tovább", "Mégse");
			}
		}
		else if(dialogid == DIALOG_ABSZ_KIVETEL)
		{
			new atmid=AtmKozel(playerid);
			if(atmid == NINCS) return Msg(playerid, "Hiba a rendszerbe. Nincs elõtted az ATM?");
			new KivettOsszeg = strval(inputtext);
			if(ATM[atmid][aPenz]< KivettOsszeg) return ShowPlayerDialog(playerid, DIALOG_ABSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Nincs ennyi pénz az ATM-ben!", "Tovább", "Mégse");
			if(KivettOsszeg < 1000) return ShowPlayerDialog(playerid, DIALOG_ABSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Minimum 1000Ft!", "Tovább", "Mégse");
			new player = BankSzamla(CsatlakozottSzamla[playerid]);
			if(BankSzamla(CsatlakozottSzamla[playerid]) == NINCS) return ShowPlayerDialog(playerid, DIALOG_ABSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Hiba történt!", "Tovább", "Mégse");

   			if(GetMoney(playerid) >= MAXPENZ) return ShowPlayerDialog(playerid, DIALOG_ABSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Nincs pénz az ATM-be", "Tovább", "Mégse");
   			if(PlayerInfo[player][pAccount] < KivettOsszeg) return ShowPlayerDialog(playerid, DIALOG_ABSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Nincs ennyi pénz a számlán!", "Tovább", "Mégse");

			new UjOsszeg, RegiOsszeg, koltseg;
			koltseg = floatround(float(KivettOsszeg) * BANK_KEZELESI_KOLTSEG_FLOAT);
			if(koltseg < 500) koltseg = 500;
			BankSzef += floatround(float(koltseg) * KAMATSZORZO);

			RegiOsszeg = PlayerInfo[playerid][pAccount];
			PlayerInfo[player][pAccount]-= KivettOsszeg + koltseg;
			UjOsszeg = PlayerInfo[player][pAccount];

			format(string, sizeof(string), "Sikeres kivétel! Régi Összeg: %sFt, Új Összeg: %sFt, Kezelési költség: %sFt (%d%%)", FormatNumber( RegiOsszeg, 0, ',' ), FormatNumber( UjOsszeg, 0, ',' ), FormatNumber( koltseg, 0, ',' ), BANK_KEZELESI_KOLTSEG);
			ATM[atmid][aPenz] -=KivettOsszeg;
			
			ShowPlayerDialog(playerid, DIALOG_ABSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", string, "Tovább", "Mégse");
			GiveMoney(playerid, KivettOsszeg);
		}
		else if(dialogid == DIALOG_ABSZ_KIJELZES)
		{
			ShowPlayerDialog(playerid, DIALOG_ABSZ, DIALOG_STYLE_LIST, "Bankszámla", "Belép\nKivétel", "Tovább","Mégse");
		}		
		else if(dialogid == DIALOG_BBSZ)
		{
		    TogglePlayerControllable(playerid, true);
			switch(listitem)
			{
				case 0:
				{
					if(PlayerInfo[playerid][pBankSzamla] != 0) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Már van bankszámlád", "Tovább", "Mégse");
					if(GetMoney(playerid) < 10000) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Nyitáshot 10 000Ft szükséges", "Tovább", "Mégse");
					new SzamlaSzam = Rand( 100000, 999999 );
					new SzamlaSzamJelszo = 1000 + random(8999);
					format(string, sizeof(string), "ClassRPG: Bankszámla nyitás sikeres! SzámlaSzámod: %d | Jelszó: %d", SzamlaSzam, SzamlaSzamJelszo);
					ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", string, "Tovább", "Mégse");
					PlayerInfo[playerid][pBankSzamla] = 1;
					PlayerInfo[playerid][pBankSzamlaSzam] = SzamlaSzam;
					PlayerInfo[playerid][pBankSzamlaJelszo] = SzamlaSzamJelszo;
					GiveMoney(playerid, -10000);
					BankSzef += 10000;
					Cselekves(playerid, "nyitott egy bankszámlát...");
					return 1;
				}
				case 1:
				{
					if(PlayerInfo[playerid][pZarolva] == 1) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Számlád zárolva", "Tovább", "Mégse");
					if(CsatlakozottSzamla[playerid] != NINCS) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Már belépett erre a számlára", "Tovább", "Mégse");
	                ShowPlayerDialog(playerid, DIALOG_BBSZ_BELEPES, DIALOG_STYLE_INPUT, "Bankszámla Belépés", "Kérem adja meg a kártyához tartozó jelszót:", "Tovább", "Mégse");
				}
				case 2:
				{
					if(PlayerInfo[playerid][pZarolva] == 1) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Számlád zárolva", "Tovább", "Mégse");
					if(CsatlakozottSzamla[playerid] == NINCS) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Elõször lépjen be", "Tovább", "Mégse");
					ShowPlayerDialog(playerid, DIALOG_BBSZ_BEFIZETES, DIALOG_STYLE_INPUT, "Bankszámla Befizetés", "Kérem adja meg a befizetni kívánt összeget:", "Tovább", "Mégse");
				}
				case 3:
				{
					if(PlayerInfo[playerid][pZarolva] == 1) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Számlád zárolva", "Tovább", "Mégse");
					if(CsatlakozottSzamla[playerid] == NINCS) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Elõször lépjen be", "Tovább", "Mégse");
					ShowPlayerDialog(playerid, DIALOG_BBSZ_KIVETEL, DIALOG_STYLE_INPUT, "Bankszámla Kivétel", "Kérem adja meg a kivenni kívánt összeget:", "Tovább", "Mégse");
				}
				case 4:
				{
					if(CsatlakozottSzamla[playerid] == NINCS) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Elõször lépjen be", "Tovább", "Mégse");
					ShowPlayerDialog(playerid, DIALOG_BBSZ_UTALAS_1, DIALOG_STYLE_INPUT, "Bankszámla Utalás", "Kérem adja meg a számlaszámot, ahová utalni szeretne:", "Tovább", "Mégse");
				}
				case 5:
				{
					if(CsatlakozottSzamla[playerid] == NINCS) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Elõször lépjen be", "Tovább", "Mégse");
					if(BankkartyaFizet(playerid, 50000, false)) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "A jelszóváltás 50 000FT, neked nincs ennyid", "Tovább", "Mégse");
					ShowPlayerDialog(playerid, DIALOG_BBSZ_JELSZOVALTAS, DIALOG_STYLE_INPUT, "Bankszámla Jelszóváltás", "Kérem adja meg az új jelszavát(4 karakter)", "Tovább", "Mégse");
				}
				case 6:
				{
					if(CsatlakozottSzamla[playerid] == NINCS) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Elõször lépjen be", "Tovább", "Mégse");
					ShowPlayerDialog(playerid, DIALOG_BBSZ_SMS, DIALOG_STYLE_LIST, "Bankszámla SMS INFO", "Bekapcsol(5FT/db)\nKikapcsol", "Tovább","Mégse");
				}
			}	
		}
		else if(dialogid == DIALOG_BBSZ_SMS)
		{
			TogglePlayerControllable(playerid, true);
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla SMS INFÓ", "Bekapcsoltad az SMS értesítést.\nMinden bankkártyás fizetésrõl értesítést fogsz kapni.\nÁra 5Ft/DB", "Tovább", "Mégse");
					PlayerInfo[playerid][pSMS]=true;
				}
				case 1:
				{
				
					ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla SMS INFÓ", "Kikapcsoltad az SMS értesítést.", "Tovább", "Mégse");
					PlayerInfo[playerid][pSMS]=false;
				}
		
			}
		}
		else if(dialogid == DIALOG_BBSZ_JELSZOVALTAS)
		{
			new UjJelszo = strval(inputtext);
			if(UjJelszo > 9999 || UjJelszo < 1000) return ShowPlayerDialog(playerid, DIALOG_BBSZ_JELSZOVALTAS, DIALOG_STYLE_MSGBOX, "Bankszámla", "Hiba: 4 számjegyûnek kell lennie", "Tovább", "Mégse");
			PlayerInfo[playerid][pBankSzamlaJelszo] = UjJelszo;
			BankkartyaFizet(playerid, 50000);
			BankSzef += 50000;
			Format(string, "Jelszóváltás sikeres!\nÚj jelszó: %d", UjJelszo);
			ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", string, "Tovább", "Mégse");
			Cselekves(playerid, "jelszót váltott a számláján...");
		}
		else if(dialogid == DIALOG_BBSZ_UTALAS_1)
		{
			new Szamla = strval(inputtext);
			//if(!IsNumeric(Szamla)) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "SZÁMLASZÁM!!! Vagyis SZÁMOT kérek!", "Tovább", "Mégse");
			new player = BankSzamla(Szamla);
			if(player == NINCS) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Hibás számlaszám!", "Tovább", "Mégse");
			SzamlaraUtal[playerid] = Szamla;
			ShowPlayerDialog(playerid, DIALOG_BBSZ_UTALAS_2, DIALOG_STYLE_INPUT, "Bankszámla utalás", "Számlaszám elfogadva! Kérem adja meg az összeget:", "Tovább", "Mégse");
		}
		else if(dialogid == DIALOG_BBSZ_UTALAS_2)
		{
			new Szamla = SzamlaraUtal[playerid];
			new osszeg = strval(inputtext);
			if(osszeg < 10000) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Minimum 10 000Ft!", "Tovább", "Mégse");
			if(osszeg < 1 || osszeg > 100000000) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Összeg nem lehet 1Ft-nál kissebb, és 100,000,000Ft-nál nagyobb...", "Tovább", "Mégse");
		
			new sajatszamla = BankSzamla(CsatlakozottSzamla[playerid]);
			//if(!IsNumeric(Szamla)) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "SZÁMLASZÁM!!! Vagyis SZÁMOT kérek!", "Tovább", "Mégse");
			new player = BankSzamla(Szamla);

			if(PlayerInfo[sajatszamla][pAccount] < osszeg) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Az összeg nem megfelelõ!", "Tovább", "Mégse");
			/*new penz = PlayerInfo[player][pAccount] += osszeg;
			if(penz > MAXERTEK) return Msg(playerid, "Enyi pénz nem fér el a bankszámláján.");*/

			new koltseg;
			koltseg = floatround(float(osszeg) * BANK_KEZELESI_KOLTSEG_FLOAT);
			if(koltseg < 500) koltseg = 500;
			BankSzef += floatround(float(koltseg) * KAMATSZORZO);

			PlayerInfo[player][pAccount] += osszeg;
			PlayerInfo[sajatszamla][pAccount] -= osszeg + koltseg;
			format(string, sizeof(string), "ClassRPG: Utaltál %sFt-ot neki: %s, kezelési költség %sFt (%d%%)", FormatNumber( osszeg, 0, ',' ), PlayerName(player), FormatNumber( koltseg, 0, ',' ), BANK_KEZELESI_KOLTSEG);
			ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", string, "Tovább", "Mégse");
			SendFormatMessage(player, COLOR_LIGHTRED, "ClassRPG: %s utalt %sFt-t", PlayerName(playerid), FormatNumber( osszeg, 0, ',' ));
			
			new log[128];
			format(log,128,"[%d] %s - /bankszámla utalás %d %s Ft",playerid,PlayerName(playerid),Szamla, FormatInt(osszeg));
			Log("Parancsok",log);
			
			if(osszeg > 5000000)
			{
			    Format(string, "Figyelem: %s utalt neki: %s, %sFt-t!", PlayerName(playerid), PlayerName(player), FormatNumber( osszeg, 0, ',' ));
				ABroadCast(COLOR_LIGHTRED, string, 1);
				PayLog(string);
			}
		}
		else if(dialogid == DIALOG_BBSZ_KIVETEL)
		{
			new KivettOsszeg = strval(inputtext);
			if(KivettOsszeg < 1000) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Minimum 1000Ft!", "Tovább", "Mégse");
			new player = BankSzamla(CsatlakozottSzamla[playerid]);
			if(BankSzamla(CsatlakozottSzamla[playerid]) == NINCS) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Hiba történt!", "Tovább", "Mégse");

   			if(GetMoney(playerid) >= MAXPENZ) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Ennyi pénzt nem adhatunk ki!", "Tovább", "Mégse");
   			if(PlayerInfo[player][pAccount] < KivettOsszeg) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Nincs ennyi pénz a számláján!", "Tovább", "Mégse");

			new UjOsszeg, RegiOsszeg, koltseg;
			koltseg = floatround(float(KivettOsszeg) * BANK_KEZELESI_KOLTSEG_FLOAT);
			if(koltseg < 500) koltseg = 500;
			BankSzef += floatround(float(koltseg) * KAMATSZORZO);

			RegiOsszeg = PlayerInfo[playerid][pAccount];
			PlayerInfo[player][pAccount]-= KivettOsszeg + koltseg;
			UjOsszeg = PlayerInfo[player][pAccount];

				
			new log[128];
			format(log,128,"[%d] %s - /bankszámla kivétel %s Ft",playerid,PlayerName(playerid),FormatInt(KivettOsszeg));
			Log("Parancsok",log);	
			
			format(string, sizeof(string),"ClassRPG: Sikeres kivétel! Régi Összeg: %sFt, Új Összeg: %sFt, Kezelési költség: %sFt (%d%%)", FormatNumber( RegiOsszeg, 0, ',' ), FormatNumber( UjOsszeg, 0, ',' ), FormatNumber( koltseg, 0, ',' ), BANK_KEZELESI_KOLTSEG);
			ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", string, "Tovább", "Mégse");
			GiveMoney(playerid, KivettOsszeg);
		}
		else if(dialogid == DIALOG_BBSZ_BELEPES)
		{
			new MegadottSzamlaJelszo = strval(inputtext);
			if(PlayerInfo[playerid][pBankSzamlaJelszo] == MegadottSzamlaJelszo)
			{
				Format(string, "Belépés sikeres!\n Számlán található összeg: %sFt", FormatNumber( PlayerInfo[playerid][pAccount], 0, ',' ));
				ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", string, "Tovább", "Mégse");
				CsatlakozottSzamla[playerid] = PlayerInfo[playerid][pBankSzamlaSzam];
				Cselekves(playerid, "belépett egy bankszámlára...");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Helytelen jelszó", "Tovább", "Mégse");
			}
		}
		else if(dialogid == DIALOG_BBSZ_BEFIZETES)
		{
			new	BefizetendoOsszeg = strval(inputtext);
			if(BefizetendoOsszeg < 10000) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Minimum 10 000Ft!", "Tovább", "Mégse");
			new player = BankSzamla(CsatlakozottSzamla[playerid]);
			if(BankSzamla(CsatlakozottSzamla[playerid]) == NINCS) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Hiba történt!", "Tovább", "Mégse");

			if(GetMoney(playerid) < BefizetendoOsszeg) return ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", "Sajnálom ez a pénz ami önnél van kevés!", "Tovább", "Mégse");
			new UjOsszeg, RegiOsszeg, koltseg;
			koltseg = floatround(float(BefizetendoOsszeg) * BANK_KEZELESI_KOLTSEG_FLOAT);
			if(koltseg < 500) koltseg = 500;
			BankSzef += floatround(float(koltseg) * KAMATSZORZO);

			RegiOsszeg = PlayerInfo[player][pAccount];
			PlayerInfo[player][pAccount]+= BefizetendoOsszeg - koltseg;
			UjOsszeg = PlayerInfo[player][pAccount];

			new log[128];
			format(log,128,"[%d] %s - /bankszámla befizet %s Ft",playerid,PlayerName(playerid),FormatInt(BefizetendoOsszeg));
			Log("Parancsok",log);	
			
			format(string, sizeof(string), "ClassRPG: Befizetés sikeres! Régi Összeg: %sFt, Új Összeg: %sFt, Kezelési költség: %sFt (%d%%)", FormatNumber( RegiOsszeg, 0, ',' ), FormatNumber( UjOsszeg, 0, ',' ), FormatNumber( koltseg, 0, ',' ), BANK_KEZELESI_KOLTSEG);
			ShowPlayerDialog(playerid, DIALOG_BBSZ_KIJELZES, DIALOG_STYLE_MSGBOX, "Bankszámla", string, "Tovább", "Mégse");
			GiveMoney(playerid, -BefizetendoOsszeg);
		}
		else if(dialogid == DIALOG_BBSZ_KIJELZES)
		{
			ShowPlayerDialog(playerid, DIALOG_BBSZ, DIALOG_STYLE_LIST, "Bankszámla", "Nyit\nBelép\nBefizetés\nKivétel\nUtalás\nJelszóváltás\nSMS", "Tovább","Mégse");
		}
		else if(dialogid == DIALOG_VESZ)
		{
			new gondolat[100];
			listitem++;
			switch(listitem)
			{
				case 1:
				{
					if(!BankkartyaFizet(playerid, 50000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 50000);
					new randphone = Rand(1000000, 9999999);
					PlayerInfo[playerid][pPnumber] = randphone;
					format(string, sizeof(string), "Megvetted a telefont, a számod: %d\n", randphone);
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy telefont", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 2:
				{
					if(PlayerInfo[playerid][pPhoneBook] != 0)
					{
						format(string, sizeof(string), "Nekem már van telefonkönyvem...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(!BankkartyaFizet(playerid, 5000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 5000);
					PlayerInfo[playerid][pPhoneBook] = 1;
					format(string, sizeof(string), "Vettél egy telefonkönyvet!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy telefonkönyvet", 1);
					TogglePlayerControllable(playerid, true);
				}
				case 3:
				{
					if(PlayerInfo[playerid][pLokator] == 1)
					{
						format(string, sizeof(string), "Nekem már van GPS Lokátorom...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(!BankkartyaFizet(playerid, 40000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 40000);
					PlayerInfo[playerid][pLokator] = 1;
					format(string, sizeof(string), "Vettél egy GPS Lokátort!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy GPS Lokátort", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 4:
				{
					if(PlayerInfo[playerid][pVontatokotel] == 1)
					{
						format(string, sizeof(string), "Nekem már van vontatókötelem...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(!BankkartyaFizet(playerid, 3000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 3000);
					PlayerInfo[playerid][pVontatokotel] = 1;
					format(string, sizeof(string), "Vettél egy vontatókötelet!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy vontató kötelet", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 5:
				{
					if(PlayerInfo[playerid][pKotszer] > MAXKOTSZER)
					{
						format(string, sizeof(string), "Ennyi kötszert nem bírok elrakni...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(!BankkartyaFizet(playerid, 1200))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					PlayerInfo[playerid][pKotszer] += 4;
					format(string, sizeof(string), "Vettél egy kötszeres dobozt(4db)!\nMost %d kötszer van nálad.\n", PlayerInfo[playerid][pKotszer]);
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy kötszeres dobozt", 1);
					BizzInfo[BIZ_247][bProducts]--;
					BizPenz(BIZ_247, 1200);
					TogglePlayerControllable(playerid, true);

				}
				case 6:
				{
					if(!BankkartyaFizet(playerid, 500))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 500);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
					new nyero = Rand(1, 3);
					if(nyero == 1)
					{
						new menyit = Rand(1000, 2000);
						BizPenz(BIZ_247, menyit);
						GiveMoney(playerid, menyit);
						format(string, sizeof(string), "Vettél egy kaparós sorsjegyet!\nNyertél %dFt-ot\n", menyit);
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					}
					else
					{
						format(string, sizeof(string), "Vettél egy kaparós sorsjegyet!\nNem nyertél semmit.\n");
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					}
					Cselekves(playerid, "vett egy kaparós sorsjegyet", 1);
				}
				case 7:
				{
					if(gDice[playerid] == 1)
					{
						format(string, sizeof(string), "Nekem már van dobókockám...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(!BankkartyaFizet(playerid, 500))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 500);
					gDice[playerid] = 1;
					format(string, sizeof(string), "Vettél egy dobókockát!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy dobókockát", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 8:
				{
					if(!BankkartyaFizet(playerid, 800))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 800);
					new rand = random(15);
					Groceries[playerid][pChickens] += 1;
					Groceries[playerid][pChicken] += rand;
					format(string, sizeof(string), "Vettél egy csirkét!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy csirkét", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 9:
				{
					if(!BankkartyaFizet(playerid, 400))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 400);
					new rand = random(15);
					Groceries[playerid][pHamburgers] += 1;
					Groceries[playerid][pHamburger] += rand;
					format(string, sizeof(string), "Vettél egy hamburgert!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy hamburgert", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 10:
				{
					if(!BankkartyaFizet(playerid, 800))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 800);
					new rand = random(15);
					Groceries[playerid][pPizzas] += 1;
					Groceries[playerid][pPizza] += rand;
					format(string, sizeof(string), "Vettél egy fagyasztott pizzát\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy fagyasztott pizzát", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 11:
				{
					if(PlayerInfo[playerid][pKaja] > MAXKAJA-1)
					{
						format(string, sizeof(string), "Ennyi szendvicset nem tudok hova rakni...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(!BankkartyaFizet(playerid, 800))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 800);
					PlayerInfo[playerid][pKaja]++;
					format(string, sizeof(string), "Vettél egy szendvicset!\nMost %ddb van nálad", PlayerInfo[playerid][pKaja]);
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 12:
				{			
					if(PlayerInfo[playerid][pKaja] > MAXKAJA-5)
					{
						format(string, sizeof(string), "Ennyi szendvicset nem tudok hova rakni...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(!BankkartyaFizet(playerid, 6500))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 6500);
					PlayerInfo[playerid][pKaja]=PlayerInfo[playerid][pKaja]+5;
					format(string, sizeof(string), "Vettél egy szendvics csomagot!\nMost %ddb van nálad", PlayerInfo[playerid][pKaja]);
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 13:
				{
					if(!BankkartyaFizet(playerid, 750))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 750);
					PlayerInfo[playerid][pCigi] += 12;
					format(string, sizeof(string), "Vettél egy doboz cigit(12 szál)!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy doboz cigit", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 14:
				{
					if(!BankkartyaFizet(playerid, 800))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 800);
					PlayerInfo[playerid][pGyujto] += 12;
					format(string, sizeof(string), "Vettél egy vihar gyújtót!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy vihar gyújtót", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 15:
				{
					if(!BankkartyaFizet(playerid, 2500))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 2500);
					PlayerInfo[playerid][pNikotin]++;
					format(string, sizeof(string), "Vettél egy nikotin tapaszt!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy nikotin tapaszt", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 16:
				{
					if(!BankkartyaFizet(playerid, 800))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 800);
					Condom[playerid]+=4;
					format(string, sizeof(string), "Vettél egy kis doboz óvszert!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy óvszert", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 17:
				{
					if(!BankkartyaFizet(playerid, 1200))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 1200);
					Condom[playerid]+=12;
					format(string, sizeof(string), "Vettél egy nagy doboz óvszert!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy óvszert", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 18:
				{
					if(PlayerInfo[playerid][pLaptop] == 1)
					{
						format(string, sizeof(string), "Nekem már van laptopom...\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(!BankkartyaFizet(playerid, 200000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 200000);
					PlayerInfo[playerid][pLaptop] = 1;
					format(string, sizeof(string), "Vettél egy laptopot!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy laptopot", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 19:
				{
					if(PlayerInfo[playerid][pHorgaszBot])
					{
						format(string, sizeof(string), "Már van nálad Horgászbot!\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(!BankkartyaFizet(playerid, 15000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 15000);
					PlayerInfo[playerid][pHorgaszBot] = 1;
					format(string, sizeof(string), "Vettél egy Horgászbotot!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy Horgászbotot", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 20:
				{
					if(!BankkartyaFizet(playerid, 700))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 700);
					PlayerInfo[playerid][pCsali] += 30;
					format(string, sizeof(string), "Vettél egy doboz csalit (30db)!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy doboz csalit", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				
				case 21:
				{
					if(PlayerInfo[playerid][pCDPlayer])
					{
						format(string, sizeof(string), "Már van MP4 lejátszód\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(!BankkartyaFizet(playerid, 15000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 15000);
					PlayerInfo[playerid][pRadio] = 1;
					PlayerInfo[playerid][pCDPlayer] = 1;
					format(string, sizeof(string), "Vettél egy MP4 lejátszót!!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy rádiót", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 22:
				{
					if(PlayerInfo[playerid][pCsipogo])
					{
						format(string, sizeof(string), "Már van csipogód\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					if(!BankkartyaFizet(playerid, 30000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 30000);
					PlayerInfo[playerid][pCsipogo] = 1;
					format(string, sizeof(string), "Vettél egy csipogót!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy csipogót", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 23:
				{
					new slot = WeaponGiveWeapon(playerid, WEAPON_FLOWER);
					if(slot < 0)
						return ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", "Nem tudsz virágot venni", "Ok", "");
						
					if(!BankkartyaFizet(playerid, 1000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 1000);
					
					format(string, sizeof(string), "Vettél egy virág csokrot!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy virág csokrot", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 24:
				{
					if(!BankkartyaFizet(playerid, 10000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 10000);
					PlayerInfo[playerid][pSzajkendo] = 1;
					format(string, sizeof(string), "Vettél egy fejkendõt!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy fejkendõt", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 25:
				{
					if(PlayerInfo[playerid][pVeszHivo] > 0) return Msg(playerid, "Neked van hívód");
					if(!BankkartyaFizet(playerid, 15000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 15000);
					PlayerInfo[playerid][pVeszHivo] = 3;
					format(string, sizeof(string), "Vettél egy vészhívót (3)!\n");
					Msg(playerid, "((/call 112))");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy vészhívót", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}	
				case 26:
				{
					if(PlayerInfo[playerid][pVeszHivo] > 0) return Msg(playerid, "Neked van hívód");
					if(!BankkartyaFizet(playerid, 80000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 80000);
					PlayerInfo[playerid][pVeszHivo] = 30;
					format(string, sizeof(string), "Vettél egy vészhívót (30)!\n");
					Msg(playerid, "((/call 112))");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy vészhívót", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}	
				case 27:
				{
					if(PlayerInfo[playerid][pRadio] > 0) return Msg(playerid, "Neked van rádiód");
					if(!BankkartyaFizet(playerid, 50000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 50000);
					PlayerInfo[playerid][pRadio] = 1;
					format(string, sizeof(string), "Vettél egy frakció rádiót (30)!\n");
					Msg(playerid, "((/call 112))");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy frakció rádiót", 1);
					BizzInfo[BIZ_247][bProducts]--;
					TogglePlayerControllable(playerid, true);
				}
				case 28:
				{
					TogglePlayerControllable(playerid, true);
					//if(1417824000 < UnixTime) return Msg(playerid, "HÓ-HÓ-HÓ ne siess annyira majd 2014 December 6-tól!");
					//if(PlayerInfo[playerid][pMikulasSapka] > 0) return Msg(playerid, "Neked van mikulás sapkád");
					if(!BankkartyaFizet(playerid, 1000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 1000);
					PlayerInfo[playerid][pTojas] = 5;
					format(string, sizeof(string), "Vettél öt húsvéti tojást!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett öt húsvéti tojást!", 1);
					Msg(playerid,"/mikulás");
					BizzInfo[BIZ_247][bProducts]--;
				
				
				}
				/*
				case 28:
				{
					TogglePlayerControllable(playerid, true);
					if(1417824000 < UnixTime) return Msg(playerid, "HÓ-HÓ-HÓ ne siess annyira majd 2014 December 6-tól!");
					//if(PlayerInfo[playerid][pMikulasSapka] > 0) return Msg(playerid, "Neked van mikulás sapkád");
					if(!BankkartyaFizet(playerid, 5000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 5000);
					//PlayerInfo[playerid][pMikulasSapka] = 1;
					format(string, sizeof(string), "Vettél egy mikulás sapkát!\n");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy mikulás sapkát!", 1);
					Msg(playerid,"/mikulás");
					BizzInfo[BIZ_247][bProducts]--;
				
				
				}*/
				case 29:
				{
					TogglePlayerControllable(playerid, true);
					if(1417824000 < UnixTime) return Msg(playerid, "HÓ-HÓ-HÓ ne siess annyira majd December 6-tól!");
					//if(PlayerInfo[playerid][pMikulasSapka] > 0) return Msg(playerid, "Neked van mikulás sapkád");
					if(!BankkartyaFizet(playerid, 1000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 1000);
					//PlayerInfo[playerid][pMikulasCsomag]++;
					format(string, sizeof(string), "Vettél egy mikulás csomagot!\n");
					Msg(playerid,"/mikulás");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy mikulás csomagot!", 1);
					BizzInfo[BIZ_247][bProducts]--;
				
				
				}
				case 30:
				{
					TogglePlayerControllable(playerid, true);
					if(1417824000 < UnixTime) return Msg(playerid, "HÓ-HÓ-HÓ ne siess annyira majd December 6-tól!");
					//if(PlayerInfo[playerid][pMikulasSapka] > 0) return Msg(playerid, "Neked van mikulás sapkád");
					if(!BankkartyaFizet(playerid, 1000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", PlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						TogglePlayerControllable(playerid, true);
						return 1;
					}
					BizPenz(BIZ_247, 1000);
					//PlayerInfo[playerid][pVirgacs]+=5;
					format(string, sizeof(string), "Vettél öt virgácsot!\n");
					Msg(playerid,"/mikulás");
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett öt virgácsot!", 1);
					BizzInfo[BIZ_247][bProducts]--;
				
				
				}
				case 31:
				{
					if(PlayerInfo[playerid][pMobilnet] != NINCS) return Msg(playerid, "Neked van már mobilneted");
					if(!BankkartyaFizet(playerid, 40000))
					{
						format(string, sizeof(string), "Ezt nem tudom kifizetni\n");
						format(gondolat, sizeof(gondolat), "%s gondolja...", ICPlayerName(playerid));
						ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, gondolat, string, "Ok", "");
						UnFreeze(playerid);
						return 1;
					}
					BizPenz(BIZ_247, 40000);
					PlayerInfo[playerid][pMobilnet] = 0;
					format(string, sizeof(string), "Vettél egy mobilnetet!\nJelenlegi adatforgalom-ár: %d Ft/kb", AdatforgalomAr);
					ShowPlayerDialog(playerid, DIALOG_VESZ, DIALOG_STYLE_MSGBOX, "24/7", string, "Ok", "");
					Cselekves(playerid, "vett egy mobilnetet", 1);
					BizzInfo[BIZ_247][bProducts]--;
					UnFreeze(playerid);
				}
			}
		}
		else if(dialogid == DIALOG_ADJUSTWEAPONS)
		{
			if(!response) return Freeze(playerid, 1000);
			
			listitem++;
			switch(listitem)
			{
				case 1:
				{
					new szoveg[128];
					for(new i=0; i<MAX_FValasztM4AK47; i++)
					{
						if(!strlen(szoveg)) Format(szoveg, "%s", FValasztM4AK47[i][waNev]);
						else Format(szoveg, "%s\n%s", szoveg, FValasztM4AK47[i][waNev]);
					}
					ShowPlayerDialog(playerid, DIALOG_ADJUSTWEAPONS_A, DIALOG_STYLE_LIST, "Fegyverállítás", szoveg, "Kiválaszt", "Mégse");
				}
				case 2:
				{
					new szoveg[128];
					for(new i=0; i<MAX_FValasztPisztoly; i++)
					{
						if(!strlen(szoveg)) Format(szoveg, "%s", FValasztPisztoly[i][waNev]);
						else Format(szoveg, "%s\n%s", szoveg, FValasztPisztoly[i][waNev]);
					}
					ShowPlayerDialog(playerid, DIALOG_ADJUSTWEAPONS_P, DIALOG_STYLE_LIST, "Fegyverállítás", szoveg, "Kiválaszt", "Mégse");
				}
				case 3:
				{
					new szoveg[128];
					for(new i=0; i<MAX_FValasztMP5; i++)
					{
						if(!strlen(szoveg)) Format(szoveg, "%s", FValasztMP5[i][waNev]);
						else Format(szoveg, "%s\n%s", szoveg, FValasztMP5[i][waNev]);
					}
					ShowPlayerDialog(playerid, DIALOG_ADJUSTWEAPONS_M, DIALOG_STYLE_LIST, "Fegyverállítás", szoveg, "Kiválaszt", "Mégse");
				}
				case 4:
				{
					new szoveg[128];
					for(new i=0; i<MAX_FValasztSniperRifle; i++)
					{
						if(!strlen(szoveg)) Format(szoveg, "%s", FValasztSniperRifle[i][waNev]);
						else Format(szoveg, "%s\n%s", szoveg, FValasztSniperRifle[i][waNev]);
					}
					ShowPlayerDialog(playerid, DIALOG_ADJUSTWEAPONS_SR, DIALOG_STYLE_LIST, "Fegyverállítás", szoveg, "Kiválaszt", "Mégse");
				}
				case 5:
				{
					new szoveg[128];
					for(new i=0; i<MAX_FValasztShotgun; i++)
					{
						if(!strlen(szoveg)) Format(szoveg, "%s", FValasztShotgun[i][waNev]);
						else Format(szoveg, "%s\n%s", szoveg, FValasztShotgun[i][waNev]);
					}
					ShowPlayerDialog(playerid, DIALOG_ADJUSTWEAPONS_S, DIALOG_STYLE_LIST, "Fegyverállítás", szoveg, "Kiválaszt", "Mégse");
				}
			}
			return 1;
		}
		
		else if(dialogid == DIALOG_ADJUSTWEAPONS_A)
		{
			if(!response) return Freeze(playerid, 1000);
			AdjustPlayerWeapons(playerid, WEAPON_AK47, listitem);
			
			return 1;
		}
		
		else if(dialogid == DIALOG_ADJUSTWEAPONS_P)
		{
			if(!response) return Freeze(playerid, 1000);
			AdjustPlayerWeapons(playerid, WEAPON_DEAGLE, listitem);
			
			return 1;
		}
		
		else if(dialogid == DIALOG_ADJUSTWEAPONS_M)
		{
			if(!response) return Freeze(playerid, 1000);
			AdjustPlayerWeapons(playerid, WEAPON_MP5, listitem);
			
			return 1;
		}
		
		else if(dialogid == DIALOG_ADJUSTWEAPONS_SR)
		{
			if(!response) return Freeze(playerid, 1000);
			AdjustPlayerWeapons(playerid, WEAPON_SNIPER, listitem);
			
			return 1;
		}
		
		else if(dialogid == DIALOG_ADJUSTWEAPONS_S)
		{
			if(!response) return Freeze(playerid, 1000);
			AdjustPlayerWeapons(playerid, WEAPON_SHOTGUN, listitem);
			
			return 1;
		}
		
		else if(dialogid == DIALOG_BEP)
		{
			if(HolTart[playerid] == NINCS)
				TogglePlayerControllable(playerid, true);
			if(HolTart[playerid] == 1)
			{
				if(strlen(inputtext) < 1)
				{
					format(string, sizeof(string), "Azért valamit irjál be..\n"); 
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Ok","Mégse");
					TogglePlayerControllable(playerid, true);
					HolTart[playerid] = NINCS;
					return 1;
				}
				if(strval(inputtext) < 1 || strval(inputtext) > 300)
				{
					format(string, sizeof(string), "Aha biztos..\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Ok","Mégse");
					HolTart[playerid] = NINCS;
					return 1;
				}
				
				new skin = strval(inputtext);
				if(skin < 0 || skin >= MAX_SKIN || SkinData[skin])
				{
					format(string, sizeof(string), "Rossz Skin ID.\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Ok","Mégse");
					HolTart[playerid] = NINCS;
					return 1;
				}
				else
				{
					format(string, sizeof(string), "Skin Beállítva.\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Tovább","Mégse");
					HolTart[playerid] = 2;
					skine[playerid] = skin;
					return 1;
				}
			}
			else if(HolTart[playerid] == 2)
			{
				format(string, sizeof(string), "Kérlek válaszd ki mien pisztolyt szeretnél.\nVálasztható: Deagle, Silenced, Colt.\n");
				ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_INPUT, "Beépített", string, "Tovább","Mégse");
				HolTart[playerid] = 3;
				return 1;
			}
			else if(HolTart[playerid] == 3)
			{
				if(egyezik(inputtext, "deagle"))
				{
					new f = PlayerInfo[playerid][pMember];
					if(FrakcioInfo[f][fDeagle] < 1)
					{
						format(string, sizeof(string), "Nincs deagle raktáron!\n");
						ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Tovább","Mégse");
						HolTart[playerid] = 2;
						return 1;
					}
					format(string, sizeof(string), "Választott Fegyver: Deagle.\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Tovább","Mégse");
					HolTart[playerid] = 4;
					fegyvere[playerid] = 1;
					return 1;
				}
				else if(egyezik(inputtext, "silenced"))
				{
					new f = PlayerInfo[playerid][pMember];
					if(FrakcioInfo[f][fSilenced] < 1)
					{
						format(string, sizeof(string), "Nincs silenced raktáron!\n");
						ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Tovább","Mégse");
						HolTart[playerid] = 2;
						return 1;
					}
					format(string, sizeof(string), "Választott Fegyver: Silenced.\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Tovább","Mégse");
					HolTart[playerid] = 4;
					fegyvere[playerid] = 2;
					return 1;
				}
				else if(egyezik(inputtext, "colt"))
				{
					format(string, sizeof(string), "Választott Fegyver: Colt.\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Tovább","Mégse");
					HolTart[playerid] = 4;
					fegyvere[playerid] = 3;
					return 1;
				}
				else
				{
					format(string, sizeof(string), "Mondom Deagle, Colt vagy Silenced!\n");
					ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Tovább","Mégse");
					HolTart[playerid] = 2;
					return 1;
				}
			}
			else if(HolTart[playerid] == 4)
			{
				format(string, sizeof(string), "Rendben, Pack összerakva.\n Kést és páncélt mellékeltünk.\n");
				ShowPlayerDialog(playerid, DIALOG_BEP, DIALOG_STYLE_MSGBOX, "Beépített", string, "Kész","Mégse");
				HolTart[playerid] = NINCS;
				new skinke = skine[playerid];
				SetPlayerSkin(playerid, skinke);
				SetPlayerArmour(playerid, 100);
				
				
				WeaponGiveWeapon(playerid, WEAPON_KNIFE);
				WeaponGiveWeapon(playerid, WEAPON_SPRAYCAN, 1000);
				skine[playerid] = 0;
				if(fegyvere[playerid] == 1)
				{
					
					WeaponGiveWeapon(playerid, WEAPON_DEAGLE, 150);
					FrakcioInfo[FRAKCIO_FBI][fDeagle]--;
					fegyvere[playerid] = 0;
					return 1;
				}
				else if(fegyvere[playerid] == 2)
				{
					
					WeaponGiveWeapon(playerid, WEAPON_SILENCED, 150);
					FrakcioInfo[FRAKCIO_FBI][fSilenced]--;
					fegyvere[playerid] = 0;
					return 1;
				}
				else if(fegyvere[playerid] == 3)
				{
					
					WeaponGiveWeapon(playerid, WEAPON_COLT45, 150);
					fegyvere[playerid] = 0;
					return 1;
				}
				return 1;
			}
		}

		else if(dialogid == DIALOG_LOGIN)
		{
			if(MarBelepett[playerid]) return 1;
			if(ResiVan[0] && !IsScripter(playerid))
				return Msg(playerid, "Restart van, hiába lépsz be...");

			if(Registered(playerid))
			{
				new tmppass[50];
				if(strlen(inputtext) < 1)
				{
					format(string, sizeof(string), "A jelszó nem lehet kisebb egy karakternél...\nKérlek írd be újra.");
					ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Bejelentkezés", string, "Belépés","Mégse");
					return 1;
				}

				new idpass[40];

				Format(idpass, "%d", (PlayerInfo[playerid][pID]*5));

				if(strlen(PlayerInfo[playerid][pKey]) < 1 || egyezik(PlayerInfo[playerid][pKey], idpass))
				{
					Msg(playerid, "Sajnálom, de nincs beállítva a jelszavad, ezért biztonsági okokból nem engedhetünk belépni!");
					Msg(playerid, "Kérlek keress fel egy fõadminisztrátort ez ügyben, hogy milyen beállíthassa neked az új jelszavadat!");
					Msg(playerid, "Az üzenetnek tartalmaznia kell a Fórum neved, RolePlay neved, és az IP címedet!");
					return 1;
				}

				strmid(tmppass, inputtext, 0, strlen(inputtext));
				
				new pass;
				
				if(egyezik(tmppass, PlayerInfo[playerid][pKey])) pass = 2;
				else if(egyezik(md5(tmppass), PlayerInfo[playerid][pKey])) pass = 1;
				else pass = 0;

				if(pass != 0)// || Registered(playerid) == 1)
				{
					DoLogin(playerid);
					if(pass == 2)
					{
						new hashpass[40];
						strcpy( hashpass, md5( tmppass ), 40 );
						strcpy( PlayerInfo[playerid][pKey], hashpass, 40 );
						
						format( _tmpString, 256, "UPDATE %s SET Pass='%s' WHERE ID='%d'", SQL_DB_Player, hashpass, SQLID( playerid ));
						doQuery( _tmpString );
					}
					if(TilosOlni == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "============[Zero Tolerancia]============");
						SendClientMessage(playerid, COLOR_LIGHTRED, "* Zero tolerancia bekapcsolva!");
						SendClientMessage(playerid, COLOR_LIGHTRED, "* Amíg ez érvényben van, tilos ölni, aki megszegi automata 120 perc AJAIL-t kap!");
						SendClientMessage(playerid, COLOR_LIGHTRED, "* Kivétel ez alól: PAINTBALL-ozók és WAR-ozok rájuk nem hat!!!");
					}
					if(TilosOlni == 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "============[Zero Tolerancia]============");
						SendClientMessage(playerid, COLOR_LIGHTRED, "* Zero tolerancia bekapcsolva!");
						SendClientMessage(playerid, COLOR_LIGHTRED, "* Amíg ez érvényben van, tilos ölni, aki megszegi automata 120 perc AJAIL-t kap!");
						SendClientMessage(playerid, COLOR_LIGHTRED, "* Kivétel ez alól: PAINTBALL-ozók és WAR-ozok rájuk nem hat!!!");
						SendClientMessageToAll(COLOR_LIGHTRED, "* Tilos továbbá: bankot / boltot rabolni, illetve fegyvert elõvenni.");
					}
				}
				else
					HibasJelszo(playerid);
			}
			else
				SendClientMessage(playerid, COLOR_LIGHTRED, "ClassRPG: Nem vagy regisztrálva");
		}
		else if(dialogid == DIALOG_REGISTRATION)
		{
			if(ResiVan[0])
				return Msg(playerid, "Restart van, hiába regizel be...");

			if(!Registered(playerid))
			{
				new pass[50];
				strmid(pass, inputtext, 0, strlen(inputtext));

				strmid(PlayerInfo[playerid][pKey], pass, 0, strlen(pass), 50);

				if(strlen(pass) < 6)
				{
					format(string, sizeof(string), "Hibás jelszó.\nA biztonság kedvéért,\nminimum 6 karakternek\nkell lennie a jelszavadnak!");
					ShowPlayerDialog(playerid, DIALOG_REGISTRATION, DIALOG_STYLE_INPUT, "Regisztráció", string, "Regisztráció","Mégse");
					return 1;
				}

                PlayerInfo[playerid][pRegistered] = 2;// Tesztként
				PlayerInfo[playerid][pConnectTime] = 0;
				PlayerSave(playerid);


				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ClassRPG: Sikeresen beregisztráltál! Mostmár beléphetsz.");
				format(string, sizeof(string), "Üdv!\nTe regisztrálva vagy,\nKérlek jelentkezz be\n\nKérlek add meg a jelszavad.\nJelszavad:");
				ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Bejelentkezés", string, "Belépés","Mégse");
			}
			else
				SendClientMessage(playerid, COLOR_LIGHTRED, "ClassRPG: Már regisztrálva vagy");
		}
		else if(dialogid == DIALOG_MUNKA_LEGALIS)
		{
			if(listitem < 0)
				return 1;
				
			if(PlayerInfo[playerid][pLevel] < LegalisMunkak[listitem][2][0])
			{
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "A munkához szükséges szint: %d", LegalisMunkak[listitem][2][0]);
				UnFreeze(playerid);
				return 1;
			}
			listitem++;
			switch(listitem)
			{
				case 1:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_FAVAGO);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Favágó");
					TogglePlayerControllable(playerid, true);
				}
				case 2:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_PILOTA);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Pilóta");
					TogglePlayerControllable(playerid, true);
				}
				case 3:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_UTTISZTITO);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Úttisztító");
					TogglePlayerControllable(playerid, true);
				}
				case 4:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_BUS);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Buszsofõr");
					TogglePlayerControllable(playerid, true);
				}
				case 5:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_KAMIONOS);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Kamionos");
					TogglePlayerControllable(playerid, true);
				}
				case 6:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_FARMER);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Farmer");
					TogglePlayerControllable(playerid, true);
				}
				case 7:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_FUNYIRO);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Fûnyíró");
					TogglePlayerControllable(playerid, true);
				}
				case 8:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_KUKAS);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Kukás");
					TogglePlayerControllable(playerid, true);
				}
				case 9:
				{
			    		
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_HULLA);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Hullaszállító");
					TogglePlayerControllable(playerid, true);
				}
				case 10:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_PENZ);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: PénzSzállító");
					TogglePlayerControllable(playerid, true);
				}
				case 11:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_VADASZ);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Vadász");
					TogglePlayerControllable(playerid, true);
				}
				case 12:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_BANYASZ);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Bányász");
					TogglePlayerControllable(playerid, true);
				}
				case 13:
				{
					UjMunka(playerid, MunkaFelvetel[playerid], MUNKA_VILLANYSZERELO);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Felvetted az új munkádat: Villanyszerelõ");
					TogglePlayerControllable(playerid, true);
				}
			}
		}
		else if(dialogid == DIALOG_KAMION)
		{
			if(listitem < 0)
				return 1;


			new Float:KamionStartx[MAX_PLAYERS],Float:KamionStarty[MAX_PLAYERS],Float:KamionStartz[MAX_PLAYERS];
			GetPlayerPos(playerid,KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid]);
			/*KamionStartPoz[playerid][KamX]=szallitmanyokpoz[listitem][0];
			KamionStartPoz[playerid][KamY]=szallitmanyokpoz[listitem][1];
			KamionStartPoz[playerid][KamZ]=szallitmanyokpoz[listitem][2];
			KamionStartPoz[playerid][KamDarab]=szallitmanyok[listitem][1];
			KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpoz[listitem][3]+kamionrandom[playerid];
			KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx2[playerid],KamionStarty2[playerid],KamionStartz2[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
			KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);*/


			new tmpcar = GetPlayerVehicleID(playerid);
			new veh = GetVehicleTrailer(tmpcar);

			new id = listitem;
			if(id == 0)
			{
				if(id == KamionKihagyva[playerid]) return ShowPlayerDialog(playerid, DIALOG_KAMION, DIALOG_STYLE_LIST, "Kamionozás", KamionSzoveg[playerid], "Felvesz", "Mégse");
				if(szallitmanyokLSModel[RandomSzamokKamion[0][playerid]] == -1 && (GetVehicleModel(veh) == 450)) return Msg(playerid, "Ehhez zárt tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokLSModel[RandomSzamokKamion[0][playerid]] == -1 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokLSModel[RandomSzamokKamion[0][playerid]] == 450 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokLSModel[RandomSzamokKamion[0][playerid]] == 450 && (GetVehicleModel(veh) != 450)) return Msg(playerid, "Ehhez nyitott tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokLSModel[RandomSzamokKamion[0][playerid]] == 584 && (GetVehicleModel(veh) != 584))  return Msg(playerid, "Ezt tartályban kell szállítani különben kifolyik, keress másik trailert!");
				KamionEgyeb[playerid] = szallitmanyokLSEgyeb[RandomSzamokKamion[0][playerid]];
				KamionStartPoz[playerid][KamX]=szallitmanyokpozLS[RandomSzamokKamion[0][playerid]][0];
				KamionStartPoz[playerid][KamY]=szallitmanyokpozLS[RandomSzamokKamion[0][playerid]][1];
				KamionStartPoz[playerid][KamZ]=szallitmanyokpozLS[RandomSzamokKamion[0][playerid]][2];
				format(KamionStartPoz[playerid][KamCel],200,"%s",szallitmanyokLS[RandomSzamokKamion[0][playerid]][0]);
				KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpozLS[RandomSzamokKamion[0][playerid]][3]+kamionrandom[playerid];
				KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
				KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			}
			else if(id == 1)
			{
				if(id == KamionKihagyva[playerid]) return ShowPlayerDialog(playerid, DIALOG_KAMION, DIALOG_STYLE_LIST, "Kamionozás", KamionSzoveg[playerid], "Felvesz", "Mégse");
				if(szallitmanyokLS2Model[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 450)) return Msg(playerid, "Ehhez zárt tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokLS2Model[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokLS2Model[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokLS2Model[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) != 450)) return Msg(playerid, "Ehhez nyitott tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokLS2Model[RandomSzamokKamion[id][playerid]] == 584 && (GetVehicleModel(veh) != 584))  return Msg(playerid, "Ezt tartályban kell szállítani különben kifolyik, keress másik trailert!");
				KamionEgyeb[playerid] = szallitmanyokLS2Egyeb[RandomSzamokKamion[id][playerid]];
				KamionStartPoz[playerid][KamX]=szallitmanyokpozLS2[RandomSzamokKamion[id][playerid]][0];
				KamionStartPoz[playerid][KamY]=szallitmanyokpozLS2[RandomSzamokKamion[id][playerid]][1];
				KamionStartPoz[playerid][KamZ]=szallitmanyokpozLS2[RandomSzamokKamion[id][playerid]][2];
				format(KamionStartPoz[playerid][KamCel],200,"%s",szallitmanyokLS2[RandomSzamokKamion[id][playerid]][0]);
				KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpozLS2[RandomSzamokKamion[id][playerid]][3]+kamionrandom[playerid];
				KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
				KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			}
			else if(id == 2)
			{
				if(id == KamionKihagyva[playerid]) return ShowPlayerDialog(playerid, DIALOG_KAMION, DIALOG_STYLE_LIST, "Kamionozás", KamionSzoveg[playerid], "Felvesz", "Mégse");
				if(szallitmanyokGOLDENModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 450)) return Msg(playerid, "Ehhez zárt tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokGOLDENModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokGOLDENModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokGOLDENModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) != 450)) return Msg(playerid, "Ehhez nyitott tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokGOLDENModel[RandomSzamokKamion[id][playerid]] == 584 && (GetVehicleModel(veh) != 584))  return Msg(playerid, "Ezt tartályban kell szállítani különben kifolyik, keress másik trailert!");
				KamionEgyeb[playerid] = szallitmanyokGOLDENEgyeb[RandomSzamokKamion[id][playerid]];
				KamionStartPoz[playerid][KamX]=szallitmanyokpozGOLDEN[RandomSzamokKamion[id][playerid]][0];
				KamionStartPoz[playerid][KamY]=szallitmanyokpozGOLDEN[RandomSzamokKamion[id][playerid]][1];
				KamionStartPoz[playerid][KamZ]=szallitmanyokpozGOLDEN[RandomSzamokKamion[id][playerid]][2];
				format(KamionStartPoz[playerid][KamCel],200,"%s",szallitmanyokGOLDEN[RandomSzamokKamion[id][playerid]][0]);
				KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpozGOLDEN[RandomSzamokKamion[id][playerid]][3]+kamionrandom[playerid];
				KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
				KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			}
			else if(id == 3)
			{
				if(id == KamionKihagyva[playerid]) return ShowPlayerDialog(playerid, DIALOG_KAMION, DIALOG_STYLE_LIST, "Kamionozás", KamionSzoveg[playerid], "Felvesz", "Mégse");
				if(szallitmanyokFARMModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 450)) return Msg(playerid, "Ehhez zárt tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokFARMModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokFARMModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokFARMModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) != 450)) return Msg(playerid, "Ehhez nyitott tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokFARMModel[RandomSzamokKamion[id][playerid]] == 584 && (GetVehicleModel(veh) != 584))  return Msg(playerid, "Ezt tartályban kell szállítani különben kifolyik, keress másik trailert!");
				KamionEgyeb[playerid] = szallitmanyokFARMEgyeb[RandomSzamokKamion[id][playerid]];
				KamionStartPoz[playerid][KamX]=szallitmanyokpozFARM[RandomSzamokKamion[id][playerid]][0];
				KamionStartPoz[playerid][KamY]=szallitmanyokpozFARM[RandomSzamokKamion[id][playerid]][1];
				KamionStartPoz[playerid][KamZ]=szallitmanyokpozFARM[RandomSzamokKamion[id][playerid]][2];
				format(KamionStartPoz[playerid][KamCel],200,"%s",szallitmanyokFARM[RandomSzamokKamion[id][playerid]][0]);
				KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpozFARM[RandomSzamokKamion[id][playerid]][3]+kamionrandom[playerid];
				KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
				KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			}
			else if(id == 4)
			{
				if(id == KamionKihagyva[playerid]) return ShowPlayerDialog(playerid, DIALOG_KAMION, DIALOG_STYLE_LIST, "Kamionozás", KamionSzoveg[playerid], "Felvesz", "Mégse");
				if(szallitmanyokSFModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 450)) return Msg(playerid, "Ehhez zárt tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokSFModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokSFModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokSFModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) != 450)) return Msg(playerid, "Ehhez nyitott tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokSFModel[RandomSzamokKamion[id][playerid]] == 584 && (GetVehicleModel(veh) != 584))  return Msg(playerid, "Ezt tartályban kell szállítani különben kifolyik, keress másik trailert!");
				KamionEgyeb[playerid] = szallitmanyokSFEgyeb[RandomSzamokKamion[id][playerid]];
				KamionStartPoz[playerid][KamX]=szallitmanyokpozSF[RandomSzamokKamion[id][playerid]][0];
				KamionStartPoz[playerid][KamY]=szallitmanyokpozSF[RandomSzamokKamion[id][playerid]][1];
				KamionStartPoz[playerid][KamZ]=szallitmanyokpozSF[RandomSzamokKamion[id][playerid]][2];
				format(KamionStartPoz[playerid][KamCel],200,"%s",szallitmanyokSF[RandomSzamokKamion[id][playerid]][0]);
				KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpozSF[RandomSzamokKamion[id][playerid]][3]+kamionrandom[playerid];
				KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
				KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			}
			else if(id == 5)
			{
				if(id == KamionKihagyva[playerid]) return ShowPlayerDialog(playerid, DIALOG_KAMION, DIALOG_STYLE_LIST, "Kamionozás", KamionSzoveg[playerid], "Felvesz", "Mégse");
				if(szallitmanyokEROMUModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 450)) return Msg(playerid, "Ehhez zárt tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokEROMUModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokEROMUModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokEROMUModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) != 450)) return Msg(playerid, "Ehhez nyitott tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokEROMUModel[RandomSzamokKamion[id][playerid]] == 584 && (GetVehicleModel(veh) != 584))  return Msg(playerid, "Ezt tartályban kell szállítani különben kifolyik, keress másik trailert!");
				KamionEgyeb[playerid] = szallitmanyokEROMUEgyeb[RandomSzamokKamion[id][playerid]];
				KamionStartPoz[playerid][KamX]=szallitmanyokpozEROMU[RandomSzamokKamion[id][playerid]][0];
				KamionStartPoz[playerid][KamY]=szallitmanyokpozEROMU[RandomSzamokKamion[id][playerid]][1];
				KamionStartPoz[playerid][KamZ]=szallitmanyokpozEROMU[RandomSzamokKamion[id][playerid]][2];
				format(KamionStartPoz[playerid][KamCel],200,"%s",szallitmanyokEROMU[RandomSzamokKamion[id][playerid]][0]);
				KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpozEROMU[RandomSzamokKamion[id][playerid]][3]+kamionrandom[playerid];
				KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
				KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			}
			else if(id == 6)
			{
				if(id == KamionKihagyva[playerid]) return ShowPlayerDialog(playerid, DIALOG_KAMION, DIALOG_STYLE_LIST, "Kamionozás", KamionSzoveg[playerid], "Felvesz", "Mégse");
				if(szallitmanyokFATELEPModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 450)) return Msg(playerid, "Ehhez zárt tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokFATELEPModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokFATELEPModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokFATELEPModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) != 450)) return Msg(playerid, "Ehhez nyitott tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokFATELEPModel[RandomSzamokKamion[id][playerid]] == 584 && (GetVehicleModel(veh) != 584))  return Msg(playerid, "Ezt tartályban kell szállítani különben kifolyik, keress másik trailert!");
				KamionEgyeb[playerid] = szallitmanyokFATELEPEgyeb[RandomSzamokKamion[id][playerid]];
				KamionStartPoz[playerid][KamX]=szallitmanyokpozFATELEP[RandomSzamokKamion[id][playerid]][0];
				KamionStartPoz[playerid][KamY]=szallitmanyokpozFATELEP[RandomSzamokKamion[id][playerid]][1];
				KamionStartPoz[playerid][KamZ]=szallitmanyokpozFATELEP[RandomSzamokKamion[id][playerid]][2];
				format(KamionStartPoz[playerid][KamCel],200,"%s",szallitmanyokFATELEP[RandomSzamokKamion[id][playerid]][0]);
				KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpozFATELEP[RandomSzamokKamion[id][playerid]][3]+kamionrandom[playerid];
				KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
				KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			}
			else if(id == 7)
			{
				if(id == KamionKihagyva[playerid]) return ShowPlayerDialog(playerid, DIALOG_KAMION, DIALOG_STYLE_LIST, "Kamionozás", KamionSzoveg[playerid], "Felvesz", "Mégse");
				if(szallitmanyokLVGYARModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 450)) return Msg(playerid, "Ehhez zárt tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokLVGYARModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokLVGYARModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokLVGYARModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) != 450)) return Msg(playerid, "Ehhez nyitott tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokLVGYARModel[RandomSzamokKamion[id][playerid]] == 584 && (GetVehicleModel(veh) != 584))  return Msg(playerid, "Ezt tartályban kell szállítani különben kifolyik, keress másik trailert!");
				KamionEgyeb[playerid] = szallitmanyokLVGYAREgyeb[RandomSzamokKamion[id][playerid]];
				KamionStartPoz[playerid][KamX]=szallitmanyokpozLVGYAR[RandomSzamokKamion[id][playerid]][0];
				KamionStartPoz[playerid][KamY]=szallitmanyokpozLVGYAR[RandomSzamokKamion[id][playerid]][1];
				KamionStartPoz[playerid][KamZ]=szallitmanyokpozLVGYAR[RandomSzamokKamion[id][playerid]][2];
				format(KamionStartPoz[playerid][KamCel],200,"%s",szallitmanyokLVGYAR[RandomSzamokKamion[id][playerid]][0]);
				KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpozLVGYAR[RandomSzamokKamion[id][playerid]][3]+kamionrandom[playerid];
				KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
				KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			}
			else if(id == 8)
			{
				if(id == KamionKihagyva[playerid]) return ShowPlayerDialog(playerid, DIALOG_KAMION, DIALOG_STYLE_LIST, "Kamionozás", KamionSzoveg[playerid], "Felvesz", "Mégse");
				if(szallitmanyokSF2Model[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 450)) return Msg(playerid, "Ehhez zárt tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokSF2Model[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokSF2Model[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokSF2Model[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) != 450)) return Msg(playerid, "Ehhez nyitott tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokSF2Model[RandomSzamokKamion[id][playerid]] == 584 && (GetVehicleModel(veh) != 584))  return Msg(playerid, "Ezt tartályban kell szállítani különben kifolyik, keress másik trailert!");
				KamionEgyeb[playerid] = szallitmanyokSF2Egyeb[RandomSzamokKamion[id][playerid]];
				KamionStartPoz[playerid][KamX]=szallitmanyokpozSF2[RandomSzamokKamion[id][playerid]][0];
				KamionStartPoz[playerid][KamY]=szallitmanyokpozSF2[RandomSzamokKamion[id][playerid]][1];
				KamionStartPoz[playerid][KamZ]=szallitmanyokpozSF2[RandomSzamokKamion[id][playerid]][2];
				format(KamionStartPoz[playerid][KamCel],200,"%s",szallitmanyokSF2[RandomSzamokKamion[id][playerid]][0]);
				KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpozSF2[RandomSzamokKamion[id][playerid]][3]+kamionrandom[playerid];
				KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
				KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			}
			else if(id == 9)
			{
				if(id == KamionKihagyva[playerid]) return ShowPlayerDialog(playerid, DIALOG_KAMION, DIALOG_STYLE_LIST, "Kamionozás", KamionSzoveg[playerid], "Felvesz", "Mégse");
				if(szallitmanyokLVBANYAModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 450)) return Msg(playerid, "Ehhez zárt tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokLVBANYAModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokLVBANYAModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokLVBANYAModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) != 450)) return Msg(playerid, "Ehhez nyitott tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokLVBANYAModel[RandomSzamokKamion[id][playerid]] == 584 && (GetVehicleModel(veh) != 584))  return Msg(playerid, "Ezt tartályban kell szállítani különben kifolyik, keress másik trailert!");
				KamionEgyeb[playerid] = szallitmanyokLVBANYAEgyeb[RandomSzamokKamion[id][playerid]];
				KamionStartPoz[playerid][KamX]=szallitmanyokpozLVBANYA[RandomSzamokKamion[id][playerid]][0];
				KamionStartPoz[playerid][KamY]=szallitmanyokpozLVBANYA[RandomSzamokKamion[id][playerid]][1];
				KamionStartPoz[playerid][KamZ]=szallitmanyokpozLVBANYA[RandomSzamokKamion[id][playerid]][2];
				format(KamionStartPoz[playerid][KamCel],200,"%s",szallitmanyokLVBANYA[RandomSzamokKamion[id][playerid]][0]);
				KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpozLVBANYA[RandomSzamokKamion[id][playerid]][3]+kamionrandom[playerid];
				KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
				KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			}
			else if(id == 10)
			{
				if(id == KamionKihagyva[playerid]) return ShowPlayerDialog(playerid, DIALOG_KAMION, DIALOG_STYLE_LIST, "Kamionozás", KamionSzoveg[playerid], "Felvesz", "Mégse");
				if(szallitmanyokCHILLIADModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 450)) return Msg(playerid, "Ehhez zárt tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokCHILLIADModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokCHILLIADModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokCHILLIADModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) != 450)) return Msg(playerid, "Ehhez nyitott tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokCHILLIADModel[RandomSzamokKamion[id][playerid]] == 584 && (GetVehicleModel(veh) != 584))  return Msg(playerid, "Ezt tartályban kell szállítani különben kifolyik, keress másik trailert!");
				KamionEgyeb[playerid] = szallitmanyokCHILLIADEgyeb[RandomSzamokKamion[id][playerid]];
				KamionStartPoz[playerid][KamX]=szallitmanyokpozCHILLIAD[RandomSzamokKamion[id][playerid]][0];
				KamionStartPoz[playerid][KamY]=szallitmanyokpozCHILLIAD[RandomSzamokKamion[id][playerid]][1];
				KamionStartPoz[playerid][KamZ]=szallitmanyokpozCHILLIAD[RandomSzamokKamion[id][playerid]][2];
				format(KamionStartPoz[playerid][KamCel],200,"%s",szallitmanyokCHILLIAD[RandomSzamokKamion[id][playerid]][0]);
				KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpozCHILLIAD[RandomSzamokKamion[id][playerid]][3]+kamionrandom[playerid];
				KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
				KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			}
			else if(id == 11)
			{
				if(id == KamionKihagyva[playerid]) return ShowPlayerDialog(playerid, DIALOG_KAMION, DIALOG_STYLE_LIST, "Kamionozás", KamionSzoveg[playerid], "Felvesz", "Mégse");
				if(szallitmanyokLSBENZINModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 450)) return Msg(playerid, "Ehhez zárt tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokLSBENZINModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokLSBENZINModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokLSBENZINModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) != 450)) return Msg(playerid, "Ehhez nyitott tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokLSBENZINModel[RandomSzamokKamion[id][playerid]] == 584 && (GetVehicleModel(veh) != 584))  return Msg(playerid, "Ezt tartályban kell szállítani különben kifolyik, keress másik trailert!");
				KamionEgyeb[playerid] = szallitmanyokLSBENZINEgyeb[RandomSzamokKamion[id][playerid]];
				KamionStartPoz[playerid][KamX]=szallitmanyokpozLSBENZIN[RandomSzamokKamion[id][playerid]][0];
				KamionStartPoz[playerid][KamY]=szallitmanyokpozLSBENZIN[RandomSzamokKamion[id][playerid]][1];
				KamionStartPoz[playerid][KamZ]=szallitmanyokpozLSBENZIN[RandomSzamokKamion[id][playerid]][2];
				format(KamionStartPoz[playerid][KamCel],200,"%s",szallitmanyokLSBENZIN[RandomSzamokKamion[id][playerid]][0]);
				KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpozLSBENZIN[RandomSzamokKamion[id][playerid]][3]+kamionrandom[playerid];
				KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
				KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			}
			else if(id == 12)
			{
				if(id == KamionKihagyva[playerid]) return ShowPlayerDialog(playerid, DIALOG_KAMION, DIALOG_STYLE_LIST, "Kamionozás", KamionSzoveg[playerid], "Felvesz", "Mégse");
				if(szallitmanyokLVCHUCKUPModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 450)) return Msg(playerid, "Ehhez zárt tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokLVCHUCKUPModel[RandomSzamokKamion[id][playerid]] == -1 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokLVCHUCKUPModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) == 584)) return Msg(playerid, "Nem hiszem, hogy ezt tartályban szállítják! Keress másik trailert!");
				if(szallitmanyokLVCHUCKUPModel[RandomSzamokKamion[id][playerid]] == 450 && (GetVehicleModel(veh) != 450)) return Msg(playerid, "Ehhez nyitott tetejû trailer kell! Keress másik trailert!");
				if(szallitmanyokLVCHUCKUPModel[RandomSzamokKamion[id][playerid]] == 584 && (GetVehicleModel(veh) != 584))  return Msg(playerid, "Ezt tartályban kell szállítani különben kifolyik, keress másik trailert!");
				KamionEgyeb[playerid] = szallitmanyokLVCHUCKUPEgyeb[RandomSzamokKamion[id][playerid]];
				KamionStartPoz[playerid][KamX]=szallitmanyokpozLVCHUCKUP[RandomSzamokKamion[id][playerid]][0];
				KamionStartPoz[playerid][KamY]=szallitmanyokpozLVCHUCKUP[RandomSzamokKamion[id][playerid]][1];
				KamionStartPoz[playerid][KamZ]=szallitmanyokpozLVCHUCKUP[RandomSzamokKamion[id][playerid]][2];
				format(KamionStartPoz[playerid][KamCel],200,"%s",szallitmanyokLVCHUCKUP[RandomSzamokKamion[id][playerid]][0]);
				KamionStartPoz[playerid][KamSzorzo]=szallitmanyokpozLVCHUCKUP[RandomSzamokKamion[id][playerid]][3]+kamionrandom[playerid];
				KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
				KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			}
			listitem++;


			new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid != 0)
			{
				GetVehicleHealth(vehicleid, KamionStartPoz[playerid][KamElet]);
			}
			//
			/*if(KamionUtvaltas[depo] > 2 && KamionUtvaltasTime[depo] < UnixTime)
			{
				KamionUtvonal[playerid] = random(sizeof(kamionpozrandom));
				KamionRandom[depo] = KamionUtvonal[playerid];
				KamionUtvaltas[depo]=1;
			}
			else
			{
				KamionUtvaltas[depo]++;
				KamionUtvaltasTime[depo] = UnixTime+120;
				KamionUtvonal[playerid] = KamionRandom[depo];
			}*/
			//KamionStartPoz[playerid][kamSzallit] = kamionpozrandom[KamionUtvonal[playerid] ][MissionName]
			//format(KamionStartPoz[playerid][KamCel],200,"%s",kamionpozrandom[KamionUtvonal[playerid] ][MissionName]);
			format(string, sizeof(string), "[KAMIONOS FUVAR]: %s",KamionStartPoz[playerid][KamCel]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			SetPlayerCheckpoint(playerid, KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ], 4);
			Szallit[playerid] = 1;
			//GetPlayerPos(playerid,KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid]);
			//KamionStartPoz[playerid][KamTavolsag] = GetDistanceBetweenPoints(KamionStartx[playerid],KamionStarty[playerid],KamionStartz[playerid],KamionStartPoz[playerid][KamX],KamionStartPoz[playerid][KamY],KamionStartPoz[playerid][KamZ]);
			//KamionStartPoz[playerid][KamFizetes] = floatround(KamionStartPoz[playerid][KamTavolsag]  * 8.5 * KamionStartPoz[playerid][KamSzorzo]);
			format(string, sizeof(string), "[Kamion fuvar]: Távolság]:%.3f | Várható bevétel: %d Ft|", KamionStartPoz[playerid][KamTavolsag],KamionStartPoz[playerid][KamFizetes]);
			KamionStartPoz[playerid][KamRendszam] = tmpcar;
			KamionStartPoz[playerid][KamPotRendszam] = veh;
			SendClientMessage(playerid, COLOR_RED, string);
			if(KamionEgyeb[playerid] == 3) SetVehicleHealth(veh, 350.0);

			if(GetJarmu(vehicleid, KOCSI_LAMPA) == 1)
			{
				if(CarPart[vehicleid][cAkkumulator] < 1)//akku
						return Msg(playerid, "Lemerült az akkumulátor!");//akku

				TrailerHatsoLampa(vehicleid, true);
			}
			return 1;
		}
		else if(dialogid == DIALOG_BELSO)
		{
			listitem++;
			new ara = BelsoArak[listitem];
			if(PlayerInfo[playerid][pAccount] < ara)
				return Msg(playerid, "Nincs elég pénz a számládon, így nem tudod mibõl finnanszírozni.");

			Cselekves(playerid, "elkezdett felújítani egy házat");
			ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);

			SetTimerEx("Munkavege", MunkaIdo[7], false, "ddd", playerid, M_BELSO, listitem);
			MunkaFolyamatban[playerid] = 1;
		}
		else if(dialogid == DIALOG_GOTO_MENU)
		{
			new gotostring[512];
			switch(listitem)
			{
				case 0:
					{
						GotoKategoria[playerid] = 1;
						for(new g = 0; g < sizeof(GotoPosLS); g++)
							Format(gotostring, "%s\n%s", gotostring, GotoNevLS[g]);

					}
				case 1:
					{
						GotoKategoria[playerid] = 2;
						for(new g = 0; g < sizeof(GotoPosSF); g++)
							Format(gotostring, "%s\n%s", gotostring, GotoNevSF[g]);

					}
				case 2:
					{
						GotoKategoria[playerid] = 3;
						for(new g = 0; g < sizeof(GotoPosEGYEB); g++)
							Format(gotostring, "%s\n%s", gotostring, GotoNevEGYEB[g]);

					}
				
			}
			ShowPlayerDialog(playerid, DIALOG_GOTO, DIALOG_STYLE_LIST, "Admin Teleportálás", gotostring, "Teleport!", "Mégse");
			Hazbanvan[playerid] = 0;
		
		}
		else if(dialogid == DIALOG_GOTO)
		{
			switch(GotoKategoria[playerid])
			{
				case 1: Tele(playerid, GotoPosLS[listitem][0], GotoPosLS[listitem][1], GotoPosLS[listitem][2], true, 0, 0);
				case 2: Tele(playerid, GotoPosSF[listitem][0], GotoPosSF[listitem][1], GotoPosSF[listitem][2], true, 0, 0);
				case 3: Tele(playerid, GotoPosEGYEB[listitem][0], GotoPosEGYEB[listitem][1], GotoPosEGYEB[listitem][2], true, 0, 0);
			}
			SendClientMessage(playerid, COLOR_WHITE, "Teleportálva!!!");
		}
		else if(dialogid == DIALOG_AUTOTOLVAJ)
		{
			PlayerInfo[playerid][pLkocsi] = KocsiLista[playerid][listitem];
			PlayerInfo[playerid][pLkocsiar] = KocsiAr[playerid][listitem];
			SendFormatMessage(playerid, COLOR_YELLOW,"[MELÓ]Elfogadtad %s(%d) kocsi leszállítását %s FT-ért",vehName[KocsiLista[playerid][listitem] - 400],KocsiLista[playerid][listitem],FormatInt(KocsiAr[playerid][listitem]));
			for(new z = 0; z < 5; z++)
			{
				KocsiLista[playerid][z] = 0;
				KocsiAr[playerid][z] = 0;
			}
			
		}
		else if(dialogid == DIALOG_CAR)
		{
			Format(string, "%s mondja: Üdv. Rendelnék egy %s-t.", PlayerName(playerid), RendelesNev[listitem]);
			ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);

			RendelesPenz = RendelesAra[listitem];
			RendelesAlatt = 1;
			RendelesModel = RendelesID[listitem];
			RendelesIdo = RENDELES_IDO;
			RendelesAzon = listitem;

			SendFormatMessage(playerid, COLOR_WHITE, "Importos mondja: Rendben. Az ára %dFt lesz, amit át kell utalnia a 0102es bankszámlaszámra, és utána visszük a kocsit. Üdv!", RendelesPenz);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			TeloElrak[playerid]=TELOELRAK;
		}
	}
	else //resp0!
	{
		if(dialogid == DIALOG_AJSZOVEG)
		{
			AJSzovegIdo[playerid] = 20;
			return 1;
		}
		
		
		if(dialogid == DIALOG_MUNKA_ILLEGALIS || dialogid == DIALOG_MUNKA_LEGALIS || /*dialogid == DIALOG_ADO ||*/ dialogid == DIALOG_VESZ)
			TogglePlayerControllable(playerid, true);
	
		if(dialogid == DIALOG_CAR)
		{
			new string[128];
			Format(string, "%s mondja: Elnézést, mégsem szeretnék rendelni. Viszlát!", PlayerName(playerid));
			ProxDetector(20.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			TeloElrak[playerid]=TELOELRAK;
		}
		/*else if(dialogid == DIALOG_ADO)
		{
			new string[128];
			if(HolTart[playerid] == 1)
			{
				PlayerInfo[playerid][pAdoHaz] = 0;
				HolTart[playerid] = 3;
				format(string, sizeof(string), "Rendelkezik gépjármûvel?\n");
				ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbevallás[Rendelkezik gépjármûvel?]", string, "Igen","Nem");
				return 1;
			}
			else if(HolTart[playerid] == 3)
			{
				PlayerInfo[playerid][pAdoJarmu] = 0;
				format(string, sizeof(string), "Köszönjük hogy kitöltötte az ûrlapot, az adója: %dFt\n", PlayerInfo[playerid][pAdo]);
				ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_MSGBOX, "Adóbevallás", string, "Ok", "Mégse");
				PlayerInfo[playerid][pAdoKitoltve] = 1;
				HolTart[playerid] = NINCS;
				Cselekves(playerid, "kitöltötte az adóbevallását", 1);
			}
			else if(HolTart[playerid] == 6)
			{
				new asd[5], p; format(asd, 5, "%d", DialogIDk[playerid][0]);
				p = ReturnUser(asd);
				if(p == INVALID_PLAYER_ID)
				{
					DialogIDk[playerid][0] = NINCS;
					Msg(playerid, "A játékos nem online.");
					return 1;
				}
				HolTart[playerid] = 7;
				ShowPlayerDialog(playerid, DIALOG_ADO, DIALOG_STYLE_LIST, "Adóellenõrzés", "Pénz büntetés\nFeljelentés\n", "Büntetés","Mégse");
				return 1;
			}
			HolTart[playerid] = NINCS;
		}*/
		/*else if(dialogid == DIALOG_APANEL)
		{
		    listitem++;
			switch(listitem)
			{
				case 1:
				{
				
				}
			}
		
		    return true;
		}*/
	}
	if(dialogid == DIALOG_PAINTBALL_FVALASZT)
	{
		if(!response)
		{
			UnFreeze(playerid);
			Msg(playerid, "Fegyverválasztás befejezve - nem történt változtatás.", true, COLOR_YELLOW2);
			return 1;
		}
		switch(listitem)
		{
			case 0: 
			{
				if(PBLista[playerid] == 0) PlayerInfo[playerid][pPBFegyver][0] = WEAPON_COLT45, SendFormatMessage(playerid, COLOR_YELLOW2, "ClassRPG: %s beállítva pisztolynak.", GetGunName(PlayerInfo[playerid][pPBFegyver][0]));
				elseif(PBLista[playerid] == 1) PlayerInfo[playerid][pPBFegyver][1] = WEAPON_MP5, SendFormatMessage(playerid, COLOR_YELLOW2, "ClassRPG: %s beállítva könnyû lõfegyvernek.", GetGunName(PlayerInfo[playerid][pPBFegyver][1]));
				elseif(PBLista[playerid] == 2) PlayerInfo[playerid][pPBFegyver][2] = WEAPON_SHOTGUN, SendFormatMessage(playerid, COLOR_YELLOW2, "ClassRPG: %s beállítva sörétes puskának.", GetGunName(PlayerInfo[playerid][pPBFegyver][2]));
				elseif(PBLista[playerid] == 3) PlayerInfo[playerid][pPBFegyver][3] = WEAPON_AK47, SendFormatMessage(playerid, COLOR_YELLOW2, "ClassRPG: %s beállítva nehéz lõfegyvernek.", GetGunName(PlayerInfo[playerid][pPBFegyver][3]));
			}
			case 1:
			{
				if(PBLista[playerid] == 0) PlayerInfo[playerid][pPBFegyver][0] = WEAPON_SILENCED, SendFormatMessage(playerid, COLOR_YELLOW2, "ClassRPG: %s beállítva pisztolynak.", GetGunName(PlayerInfo[playerid][pPBFegyver][0]));
				elseif(PBLista[playerid] == 1) PlayerInfo[playerid][pPBFegyver][1] = 0, SendFormatMessage(playerid, COLOR_YELLOW2, "ClassRPG: %s beállítva könnyû lõfegyvernek.", GetGunName(PlayerInfo[playerid][pPBFegyver][1]));
				elseif(PBLista[playerid] == 2) PlayerInfo[playerid][pPBFegyver][2] = WEAPON_COMBAT, SendFormatMessage(playerid, COLOR_YELLOW2, "ClassRPG: %s beállítva sörétes puskának.", GetGunName(PlayerInfo[playerid][pPBFegyver][2]));
				elseif(PBLista[playerid] == 3) PlayerInfo[playerid][pPBFegyver][3] = WEAPON_M4, SendFormatMessage(playerid, COLOR_YELLOW2, "ClassRPG: %s beállítva nehéz lõfegyvernek.", GetGunName(PlayerInfo[playerid][pPBFegyver][3]));
			}
			case 2:
			{
				if(PBLista[playerid] == 0) PlayerInfo[playerid][pPBFegyver][0] = WEAPON_DEAGLE, SendFormatMessage(playerid, COLOR_YELLOW2, "ClassRPG: %s beállítva pisztolynak.", GetGunName(PlayerInfo[playerid][pPBFegyver][0]));
				elseif(PBLista[playerid] == 2) PlayerInfo[playerid][pPBFegyver][2] = 0, SendFormatMessage(playerid, COLOR_YELLOW2, "ClassRPG: %s beállítva sörétes puskának.", GetGunName(PlayerInfo[playerid][pPBFegyver][2]));
				elseif(PBLista[playerid] == 3) PlayerInfo[playerid][pPBFegyver][3] = 0, SendFormatMessage(playerid, COLOR_YELLOW2, "ClassRPG: %s beállítva nehéz lõfegyvernek.", GetGunName(PlayerInfo[playerid][pPBFegyver][3]));
			}
			case 3:	if(PBLista[playerid] == 0) PlayerInfo[playerid][pPBFegyver][0] = 0, SendFormatMessage(playerid, COLOR_YELLOW2, "ClassRPG: %s beállítva pisztolynak.", GunName(PlayerInfo[playerid][pPBFegyver][0]));
		}
		UnFreeze(playerid);
	}
	if(dialogid == DIALOG_PAINTBALL_FEGYVEREK)
	{	
		if(!response)
		{
			UnFreeze(playerid);
			Msg(playerid, "Fegyverválasztás befejezve - nem történt változtatás.", true, COLOR_YELLOW2);
			return 1;
		}
		switch(listitem)
		{
			case 0: ShowPlayerDialog(playerid, DIALOG_PAINTBALL_FVALASZT, DIALOG_STYLE_LIST, "Paintball - Pisztolyok", "Colt45 (22)\nSilenced Colt45 (23)\nDeagle (24)\nNincs (0)", "Kiválaszt", "Mégse"), PBLista[playerid] = 0;
			case 1: ShowPlayerDialog(playerid, DIALOG_PAINTBALL_FVALASZT, DIALOG_STYLE_LIST, "Paintball - Könnyû lõfegyverek", "MP5 (29)\nNincs (0)", "Kiválaszt", "Mégse"), PBLista[playerid] = 1;
			case 2: ShowPlayerDialog(playerid, DIALOG_PAINTBALL_FVALASZT, DIALOG_STYLE_LIST, "Paintball - Sörétes puskák", "Shotgun (25)\nCombat (27)\nNincs (0)", "Kiválaszt", "Mégse"), PBLista[playerid] = 2;
			case 3: ShowPlayerDialog(playerid, DIALOG_PAINTBALL_FVALASZT, DIALOG_STYLE_LIST, "Paintball - Nehéz lõfegyverek", "AK47 (30)\nM4 (31)\nNincs (0)", "Kiválaszt", "Mégse"), PBLista[playerid] = 3;
		}
		Msg(playerid, "Állítsd be, hogy melyik fegyvert szeretnéd használni ebben a fegyvernemben!", true, COLOR_DYELLOW);
	}
	//############################################################################# Bútor rendszer dialog
	if(dialogid == DIALOG_BUTOR_TORLES)
	{
		if(!response)
		{
			SzerkesztesButor[playerid] = NINCS;
			return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Bútor törlése visszavonva!!");
		}

		new butorszam = SzerkesztesButor[playerid];

		format(querycske, sizeof(querycske), "DELETE FROM `butorok` WHERE id = '%d'", butorszam);
		doQuery(querycske);

		ButorInfo[butorszam][butorPosX] = 0.0;
		ButorInfo[butorszam][butorPosY] = 0.0;
		ButorInfo[butorszam][butorPosZ] = 0.0;
		ButorInfo[butorszam][butorPosRX] = 0.0;
		ButorInfo[butorszam][butorPosRY] = 0.0;
		ButorInfo[butorszam][butorPosRZ] = 0.0;
		ButorInfo[butorszam][butorModel] = 0;
		ButorInfo[butorszam][butorVW] = 0;
		ButorInfo[butorszam][butorInterior] = 0;
		ButorInfo[butorszam][butorHasznalva] = false;
		ButorInfo[butorszam][butorMegveve] = false;
		if(IsValidDynamicObject(ButorInfo[butorszam][butorObject])) DestroyDynamicObject(ButorInfo[butorszam][butorObject]),ButorInfo[butorszam][butorObject]=INVALID_OBJECT_ID;
		ButorInfo[butorszam][butorTipus] = NINCS;
		ButorInfo[butorszam][butorListitem] = NINCS;

		SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Bútor sikeresen törölve!");

	}
	if(dialogid == DIALOG_BUTOR_MEGVETEL)
	{
		new penz;
		if(!response)
		{
			NULLAZAS:
			ButorInfo[SzerkesztesButor[playerid]][butorPosX] = 0.0;
			ButorInfo[SzerkesztesButor[playerid]][butorPosY] = 0.0;
			ButorInfo[SzerkesztesButor[playerid]][butorPosZ] = 0.0;
			ButorInfo[SzerkesztesButor[playerid]][butorPosRX] = 0.0;
			ButorInfo[SzerkesztesButor[playerid]][butorPosRY] = 0.0;
			ButorInfo[SzerkesztesButor[playerid]][butorPosRZ] = 0.0;
			ButorInfo[SzerkesztesButor[playerid]][butorVW] = 0;
			ButorInfo[SzerkesztesButor[playerid]][butorInterior] = 0;
			ButorInfo[SzerkesztesButor[playerid]][butorHasznalva] = false;
			ButorInfo[SzerkesztesButor[playerid]][butorTipus] = NINCS;
			ButorInfo[SzerkesztesButor[playerid]][butorListitem] = NINCS;
			ButorInfo[SzerkesztesButor[playerid]][butorModel] = 0;
			ButorInfo[SzerkesztesButor[playerid]][butorPosRX] = 0.0;
			ButorInfo[SzerkesztesButor[playerid]][butorPosRY] = 0.0;
			ButorInfo[SzerkesztesButor[playerid]][butorPosRZ] = 0.0;
			if(IsValidDynamicObject(ButorInfo[SzerkesztesButor[playerid]][butorObject])) DestroyDynamicObject(ButorInfo[SzerkesztesButor[playerid]][butorObject]),ButorInfo[SzerkesztesButor[playerid]][butorObject]=INVALID_OBJECT_ID;
			SzerkesztesButor[playerid] = NINCS;
			return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Bútor visszavonva!");
		}
		//printf("Bútor típus: %d", ButorInfo[SzerkesztesButor[playerid]][butorTipus]);
		switch(ButorInfo[SzerkesztesButor[playerid]][butorTipus])
		{
			case 1:
				penz = Butor_Asztal[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 2:
				penz = Butor_Ulogarnitura[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 3:
				penz = Butor_Kepek[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 4:
				penz = Butor_Lampak[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 5:
				penz = Butor_TV[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 6:
				penz = Butor_DVDHiFi[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 7:
				penz = Butor_Hangfal[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 8:
				penz = Butor_Szekreny[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 9:
				penz = Butor_Fotel[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 10:
				penz = Butor_Konyhabutor[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 11:
				penz = Butor_Huto[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 12:
				penz = Butor_Szamitogep[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 13:
				penz = Butor_Ajto[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 14:
				penz = Butor_Mosogep[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 15:
				penz = Butor_Nyomtato[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 16:
				penz = Butor_Agy[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 17:
				penz = Butor_WC[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 18:
				penz = Butor_Zuhanyzo[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 19:
				penz = Butor_Mosdo[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 20:
				penz = Butor_Szonyeg[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 21:
				penz = Butor_Szek[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 22:
				penz = Butor_Iroasztal[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 23:
				penz = Butor_Fal[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 24:
				penz = Butor_Virag[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];
			case 25:
				penz = Butor_Egyeb[ButorInfo[SzerkesztesButor[playerid]][butorListitem]][butorAR];				
				
				
		}
		//printf("Pénz: %d", penz);
		if(PlayerInfo[playerid][pAccount] < penz)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "[Hiba]: Sajnos nincs elegendõ fedezet a bankszámládon, hogy ezt megvehesd!");
			goto NULLAZAS;
		}

		format(querycske, sizeof(querycske), "INSERT INTO `butorok` VALUES (");
		format(querycske, sizeof(querycske), "%s'%d', ", querycske, SzerkesztesButor[playerid]);
		format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[SzerkesztesButor[playerid]][butorPosX]);
		format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[SzerkesztesButor[playerid]][butorPosY]);
		format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[SzerkesztesButor[playerid]][butorPosZ]);
		format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[SzerkesztesButor[playerid]][butorPosRX]);
		format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[SzerkesztesButor[playerid]][butorPosRY]);
		format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[SzerkesztesButor[playerid]][butorPosRZ]);
		format(querycske, sizeof(querycske), "%s'%d', ", querycske, ButorInfo[SzerkesztesButor[playerid]][butorModel]);
		format(querycske, sizeof(querycske), "%s'%d', ", querycske, ButorInfo[SzerkesztesButor[playerid]][butorVW]);
		format(querycske, sizeof(querycske), "%s'%d', ", querycske, ButorInfo[SzerkesztesButor[playerid]][butorInterior]);
		format(querycske, sizeof(querycske), "%s'%d', ", querycske, ButorInfo[SzerkesztesButor[playerid]][butorTipus]);
		format(querycske, sizeof(querycske), "%s'%d')", querycske, ButorInfo[SzerkesztesButor[playerid]][butorListitem]);
		doQuery(querycske);
		
		ButorInfo[SzerkesztesButor[playerid]][butorMegveve] = true;
		PlayerInfo[playerid][pAccount] -= penz;
		BizPenz(BIZ_BUTOR, penz);

		SendFormatMessage(playerid, COLOR_GREEN, "[Info]: Sikeresen megvetted a berendezési tárgyat %sFt-ért!", FormatNumber( penz, 0, ',' ));
		SzerkesztesButor[playerid] = NINCS;
	}
	if(dialogid == DIALOG_SZABAD_BUTOROK_LISTA)
	{
		if(!response)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "További szép napot!");

		new butorszam = ButorSzam(playerid);

		if(butorszam >= listitem + SzerkesztesButor[playerid])
		{
			//SendFormatMessage(playerid,COLOR_YELLOW,"%d %d",listitem,listitem + SzerkesztesButor[playerid]);
			new butorindex = GetXButor(playerid, listitem + SzerkesztesButor[playerid]);
			SzerkesztesButor[playerid] = butorindex;
			ShowPlayerDialog(playerid, DIALOG_BUTOR_SZERKESZTES, DIALOG_STYLE_LIST, #COL_FEHER"Bútor "#COL_VKEK"szerkesztés", "Bútor mozgatása\nBútor törlése", "Mehet!", "Mégse!");
		} else
			ShowPlayerDialog(playerid, DIALOG_BUTOR_KATEGORIA, DIALOG_STYLE_LIST, #COL_FEHER"Válassz "#COL_VKEK"kategóriát!", "Asztal\nÜlõgarnitúra\nFestmények, képek\nLámpák\nTV-k\nDVD-k, HiFi-k\nHangfal\nSzekrény\nFotel\nKonyhabútor\nHûtõ\nSzámítógép\nAjtó\nMosógép\nNyomtató\nÁgy\nWC\nZuhanyzó\nMosdó\nSzõnyeg\nSzék\nÍróasztal\nFal\nVirág\nEgyéb", "Mehet!", "Mégse!");
		return true;
	}
	if(dialogid == DIALOG_BUTOR)
	{
		if(!response)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "További szép napot!");
			
		new butorszam = ButorSzam(playerid);
		
		switch(listitem)
		{
			case 0:
			{
			    if(HouseInfo[GetPlayerVirtualWorld(playerid)][Butorok] == butorszam)
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "[Hiba]: A bútorok száma elérte a limitet!");
			        
				ShowPlayerDialog(playerid, DIALOG_BUTOR_KATEGORIA, DIALOG_STYLE_LIST, #COL_FEHER"Válassz "#COL_VKEK"kategóriát!", "Asztal\nÜlõgarnitúra\nFestmények, képek\nLámpák\nTV-k\nDVD-k, HiFi-k\nHangfal\nSzekrény\nFotel\nKonyhabútor\nHûtõ\nSzámítógép\nAjtó\nMosógép\nNyomtató\nÁgy\nWC\nZuhanyzó\nMosdó\nSzõnyeg\nSzék\nÍróasztal\nFal\nVirág\nEgyéb", "Mehet!", "Mégse!");
				return true;
			}
			case 1:
			{
			    SendClientMessage(playerid, COLOR_GREEN, "[Info]: Kattints egy tetszõleges bútorra és válassz a lehetõségek közül, vagy kilépéshez használd az ESC gombot!");
				SelectObject(playerid);
				return true;
			}
			case 2:
			{
			//ideide
				new i = NINCS,butorok[2048],butorfo[128],sorozat = 0,
				Float:tavolsag,hazszam = HazabanVan(playerid);
				for(i=0; i < MAXBUTORSZAM;i++)
				{
					if(ButorInfo[i][butorVW] == hazszam && ButorInfo[i][butorHasznalva])
					{
					    new butornev[48];
						switch(ButorInfo[i][butorTipus])
						{
							case 1:
								strcpy(butornev, Butor_Asztal[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 2:
								strcpy(butornev, Butor_Ulogarnitura[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 3:
								strcpy(butornev, Butor_Kepek[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 4:
								strcpy(butornev, Butor_Lampak[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 5:
								strcpy(butornev, Butor_TV[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 6:
								strcpy(butornev, Butor_DVDHiFi[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 7:
								strcpy(butornev, Butor_Hangfal[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 8:
								strcpy(butornev, Butor_Szekreny[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 9:
								strcpy(butornev, Butor_Fotel[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 10:
								strcpy(butornev, Butor_Konyhabutor[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 11:
								strcpy(butornev, Butor_Huto[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 12:
								strcpy(butornev, Butor_Szamitogep[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 13:
								strcpy(butornev, Butor_Ajto[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 14:
								strcpy(butornev, Butor_Mosogep[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 15:
								strcpy(butornev, Butor_Nyomtato[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 16:
								strcpy(butornev, Butor_Agy[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 17:
								strcpy(butornev, Butor_WC[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 18:
								strcpy(butornev, Butor_Zuhanyzo[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 19:
								strcpy(butornev, Butor_Mosdo[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 20:
								strcpy(butornev, Butor_Szonyeg[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 21:
								strcpy(butornev, Butor_Szek[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 22:
								strcpy(butornev, Butor_Iroasztal[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 23:
								strcpy(butornev, Butor_Fal[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 24:
								strcpy(butornev, Butor_Virag[ButorInfo[i][butorListitem]][butorNEV], 48);
							case 25:
								strcpy(butornev, Butor_Egyeb[ButorInfo[i][butorListitem]][butorNEV], 48);
								
								
				
						}
						tavolsag = GetPlayerDistanceFromPoint(playerid, ButorInfo[i][butorPosX], ButorInfo[i][butorPosY], ButorInfo[i][butorPosZ]);
                        butorfo[0] = EOS;
						
						//format(butorfo, sizeof(butorfo), #COL_FEHER"Slot %d: "#COL_VPIROS"%s "#COL_FEHER"("#COL_VKEK"%.1fm"#COL_FEHER") \n", sorozat + 1, butornev, tavolsag);
						//strins(butorok, butorfo, strlen(butorok));
					
						//SendFormatMessage(playerid,COLOR_YELLOW,"%d",strlen(butorok));
						format(butorok, sizeof(butorok), "%s"#COL_FEHER"Id%d: "#COL_VPIROS"%s "#COL_FEHER""#COL_VKEK"%.1fm"#COL_FEHER" \n",butorok,sorozat + 1, butornev, tavolsag);
						//bútor bug
						sorozat++;
						
					}
					if(sorozat == 25)
						break;
				}
				i = NINCS;
				for(; ++i < HouseInfo[GetPlayerVirtualWorld(playerid)][Butorok] - sorozat;)
				{
				    new butornev[48];
				    butorfo[0] = EOS;
					format(butorok, sizeof(butorok), "%s"#COL_FEHER"Id%d: "#COL_VZOLD"Szabad\n", butorok,i + sorozat + 1, butornev, tavolsag);
					//strins(butorok, butorfo, strlen(butorok));
				}
				//SendFormatMessage(playerid,COLOR_YELLOW,"%d",strlen(butorok));
				SzerkesztesButor[playerid]=1;
				ShowPlayerDialog(playerid, DIALOG_SZABAD_BUTOROK_LISTA, DIALOG_STYLE_LIST, #COL_FEHER"Bútor "#COL_VKEK"lista", butorok, "Rendben!", "Mégse!");
				
				//Msg(playerid, "Átmenetileg kivéve! Addig is használd a Bútor szerkesztése menüpontot!");
				return true;
			}
			case 3:
			{
				new i = NINCS,butorok[2048],butorfo[128],sorozat = 0,
				Float:tavolsag,hazszam = HazabanVan(playerid);
				for(i=0; i < MAXBUTORSZAM;i++)
				{
					if(ButorInfo[i][butorVW] == hazszam && ButorInfo[i][butorHasznalva])
					{
						if(sorozat < 25)
						{
							sorozat++;
						}
						else
						{
							new butornev[48];
							switch(ButorInfo[i][butorTipus])
							{
								case 1:
									strcpy(butornev, Butor_Asztal[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 2:
									strcpy(butornev, Butor_Ulogarnitura[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 3:
									strcpy(butornev, Butor_Kepek[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 4:
									strcpy(butornev, Butor_Lampak[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 5:
									strcpy(butornev, Butor_TV[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 6:
									strcpy(butornev, Butor_DVDHiFi[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 7:
									strcpy(butornev, Butor_Hangfal[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 8:
									strcpy(butornev, Butor_Szekreny[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 9:
									strcpy(butornev, Butor_Fotel[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 10:
									strcpy(butornev, Butor_Konyhabutor[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 11:
									strcpy(butornev, Butor_Huto[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 12:
									strcpy(butornev, Butor_Szamitogep[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 13:
									strcpy(butornev, Butor_Ajto[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 14:
									strcpy(butornev, Butor_Mosogep[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 15:
									strcpy(butornev, Butor_Nyomtato[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 16:
									strcpy(butornev, Butor_Agy[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 17:
									strcpy(butornev, Butor_WC[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 18:
									strcpy(butornev, Butor_Zuhanyzo[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 19:
									strcpy(butornev, Butor_Mosdo[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 20:
									strcpy(butornev, Butor_Szonyeg[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 21:
									strcpy(butornev, Butor_Szek[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 22:
									strcpy(butornev, Butor_Iroasztal[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 23:
									strcpy(butornev, Butor_Fal[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 24:
									strcpy(butornev, Butor_Virag[ButorInfo[i][butorListitem]][butorNEV], 48);
								case 25:
									strcpy(butornev, Butor_Egyeb[ButorInfo[i][butorListitem]][butorNEV], 48);
								
							
				
							}
							tavolsag = GetPlayerDistanceFromPoint(playerid, ButorInfo[i][butorPosX], ButorInfo[i][butorPosY], ButorInfo[i][butorPosZ]);
							butorfo[0] = EOS;
							
							//format(butorfo, sizeof(butorfo), #COL_FEHER"Slot %d: "#COL_VPIROS"%s "#COL_FEHER"("#COL_VKEK"%.1fm"#COL_FEHER") \n", sorozat + 1, butornev, tavolsag);
							//strins(butorok, butorfo, strlen(butorok));
						
							//SendFormatMessage(playerid,COLOR_YELLOW,"%d",strlen(butorok));
							format(butorok, sizeof(butorok), "%s"#COL_FEHER"Id%d: "#COL_VPIROS"%s "#COL_FEHER""#COL_VKEK"%.1fm"#COL_FEHER" \n",butorok,sorozat + 1, butornev, tavolsag);
							//bútor bug
							sorozat++;
						}
						
					}
					
				}
				i = NINCS;
				for(; ++i < HouseInfo[GetPlayerVirtualWorld(playerid)][Butorok] - sorozat;)
				{
				    new butornev[48];
				    butorfo[0] = EOS;
					format(butorok, sizeof(butorok), "%s"#COL_FEHER"Id%d: "#COL_VZOLD"Szabad\n", butorok,i + sorozat + 1, butornev, tavolsag);
					//strins(butorok, butorfo, strlen(butorok));
				}
				SendFormatMessage(playerid,COLOR_YELLOW,"%d",strlen(butorok));
				SzerkesztesButor[playerid] = 26;
				ShowPlayerDialog(playerid, DIALOG_SZABAD_BUTOROK_LISTA, DIALOG_STYLE_LIST, #COL_FEHER"Bútor "#COL_VKEK"lista", butorok, "Rendben!", "Mégse!");
				
				//Msg(playerid, "Átmenetileg kivéve! Addig is használd a Bútor szerkesztése menüpontot!");
				return true;
			}
			case 4:
			{
				new i = -1,butorok[2048],butorfo[128];
				for(;++i < HouseInfo[GetPlayerVirtualWorld(playerid)][Butorok];)
				{
				    butorfo[0] = EOS;
					format(butorok, sizeof(butorok), "%s"#COL_FEHER"Slot %d: %s%s", butorok,i + 1, (butorszam > i ? (#COL_VPIROS"Foglalt") : (#COL_VZOLD"Szabad")), (i % 2 ? ("\n") : ("\t\t\t")));
					//strins(butorok, butorfo, strlen(butorok));
				}
				ShowPlayerDialog(playerid, DIALOG_SZABAD_BUTOROK, DIALOG_STYLE_MSGBOX, #COL_FEHER"Bútor "#COL_VKEK"statisztika", butorok, "Értettem", "");
				return true;
			}
			case 5:
			{
			    if(HouseInfo[HazabanVan(playerid)][Butorok] == 50)
			        return SendClientMessage(playerid,COLOR_LIGHTRED, "[Hiba]: Már kibõvítetted a slotokat!");

				ShowPlayerDialog(playerid, DIALOG_BUTOR_PREMIUM, DIALOG_STYLE_MSGBOX, #COL_FEHER"Bútor "#COL_VKEK"prémium slot vásárlás", #COL_FEHER"Biztos, hogy prémium slotot akarsz vásárolni?\n\n"#COL_VKEK"Bõvítés ára: "#COL_FEHER"1 prémium pont\n"#COL_VKEK"Bútor slotok száma a bõvítés után: "#COL_FEHER"50", "Mehet!", "Mégse!");
				return true;
			}
			case 6:
			{

				new szamol=0;
				new x=NINCS, hazszam = HazabanVan(playerid);
				for(;++x < MAXBUTORSZAM;)
				{
					if(ButorInfo[x][butorVW] == hazszam && ButorInfo[x][butorHasznalva])
					{
			
					
						format(querycske, sizeof(querycske), "DELETE FROM `butorok` WHERE id = '%d'", x);
						doQuery(querycske);

						ButorInfo[x][butorPosX] = 0.0;
						ButorInfo[x][butorPosY] = 0.0;
						ButorInfo[x][butorPosZ] = 0.0;
						ButorInfo[x][butorPosRX] = 0.0;
						ButorInfo[x][butorPosRY] = 0.0;
						ButorInfo[x][butorPosRZ] = 0.0;
						ButorInfo[x][butorModel] = 0;
						ButorInfo[x][butorVW] = 0;
						ButorInfo[x][butorInterior] = 0;
						ButorInfo[x][butorHasznalva] = false;
						ButorInfo[x][butorMegveve] = false;
						if(IsValidDynamicObject(ButorInfo[x][butorObject])) DestroyDynamicObject(ButorInfo[x][butorObject]),ButorInfo[x][butorObject]=INVALID_OBJECT_ID;
						ButorInfo[x][butorTipus] = NINCS;
						ButorInfo[x][butorListitem] = NINCS;
						szamol++;
					}
				}
				SendFormatMessage(playerid, COLOR_LIGHTRED, "Törölve %d bútor",szamol);
			}
		}
	}
	if(dialogid == DIALOG_BUTOR_PREMIUM)
	{
	    if(!response)
	        return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Info]: Rendben, majd késõbb!");
		new premiumszam = PlayerInfo[playerid][pPremiumPont], hazszam = HazabanVan(playerid);
		
		if(premiumszam > 0)
		{
		    PlayerInfo[playerid][pPremiumPont]--;
		    HazUpdate(hazszam, HAZ_Butorok);
		    HouseInfo[hazszam][Butorok] = 50;
		    SendClientMessage(playerid, COLOR_GREEN, "[Info]: Sikeresen kibõvítetted a bútorok számát 50-re!");
		} else return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Info]: Sajnálom, de neked nincs elég prémium pontod!");
	}
	if(dialogid == DIALOG_BUTOR_VETEL)
	{
		if(!response)
			return ShowPlayerDialog(playerid, DIALOG_BUTOR_KATEGORIA, DIALOG_STYLE_LIST, #COL_FEHER"Válassz "#COL_VKEK"kategóriát!", "Asztal\nÜlõgarnitúra\nFestmények, képek\nLámpák\nTV-k\nDVD-k, HiFi-k\nHangfal\nSzekrény\nFotel\nKonyhabútor\nHûtõ\nSzámítógép\nAjtó\nMosógép\nNyomtató\nÁgy\nWC\nZuhanyzó\nMosdó\nSzõnyeg\nSzék\nÍróasztal\nFal\nVirág\nEgyéb", "Mehet!", "Mégse!");

		new Float:playerposok[4],szabadbutor = SzabadButorID();
		GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);

		switch(ButorKategoria[playerid])
		{
			case 1:
				ButorInfo[szabadbutor][butorModel] = Butor_Asztal[listitem][butorID];
			case 2:
				ButorInfo[szabadbutor][butorModel] = Butor_Ulogarnitura[listitem][butorID];
			case 3:
				ButorInfo[szabadbutor][butorModel] = Butor_Kepek[listitem][butorID];
			case 4:
				ButorInfo[szabadbutor][butorModel] = Butor_Lampak[listitem][butorID];
			case 5:
				ButorInfo[szabadbutor][butorModel] = Butor_TV[listitem][butorID];
			case 6:
				ButorInfo[szabadbutor][butorModel] = Butor_DVDHiFi[listitem][butorID];
			case 7:
				ButorInfo[szabadbutor][butorModel] = Butor_Hangfal[listitem][butorID];
			case 8:
				ButorInfo[szabadbutor][butorModel] = Butor_Szekreny[listitem][butorID];
			case 9:
				ButorInfo[szabadbutor][butorModel] = Butor_Fotel[listitem][butorID];
			case 10:
				ButorInfo[szabadbutor][butorModel] = Butor_Konyhabutor[listitem][butorID];
			case 11:
				ButorInfo[szabadbutor][butorModel] = Butor_Huto[listitem][butorID];
			case 12:
				ButorInfo[szabadbutor][butorModel] = Butor_Szamitogep[listitem][butorID];
			case 13:
				ButorInfo[szabadbutor][butorModel] = Butor_Ajto[listitem][butorID];
			case 14:
				ButorInfo[szabadbutor][butorModel] = Butor_Mosogep[listitem][butorID];
			case 15:
				ButorInfo[szabadbutor][butorModel] = Butor_Nyomtato[listitem][butorID];
			case 16:
				ButorInfo[szabadbutor][butorModel] = Butor_Agy[listitem][butorID];
			case 17:
				ButorInfo[szabadbutor][butorModel] = Butor_WC[listitem][butorID];
			case 18:
				ButorInfo[szabadbutor][butorModel] = Butor_Zuhanyzo[listitem][butorID];
			case 19:
				ButorInfo[szabadbutor][butorModel] = Butor_Mosdo[listitem][butorID];
			case 20:
				ButorInfo[szabadbutor][butorModel] = Butor_Szonyeg[listitem][butorID];
			case 21:
				ButorInfo[szabadbutor][butorModel] = Butor_Szek[listitem][butorID];
			case 22:
				ButorInfo[szabadbutor][butorModel] = Butor_Iroasztal[listitem][butorID];
			case 23:
				ButorInfo[szabadbutor][butorModel] = Butor_Fal[listitem][butorID];
			case 24:
				ButorInfo[szabadbutor][butorModel] = Butor_Virag[listitem][butorID];
			case 25:
				ButorInfo[szabadbutor][butorModel] = Butor_Egyeb[listitem][butorID];
				
		}

		ButorInfo[szabadbutor][butorPosX] = playerposok[0];
		ButorInfo[szabadbutor][butorPosY] = playerposok[1];
		ButorInfo[szabadbutor][butorPosZ] = playerposok[2];
		ButorInfo[szabadbutor][butorPosRX] = 0.0;
		ButorInfo[szabadbutor][butorPosRY] = 0.0;
		ButorInfo[szabadbutor][butorPosRZ] = 0.0;
		ButorInfo[szabadbutor][butorVW] = GetPlayerVirtualWorld(playerid);
		ButorInfo[szabadbutor][butorInterior] = GetPlayerInterior(playerid);
		ButorInfo[szabadbutor][butorHasznalva] = true;
		ButorInfo[szabadbutor][butorTipus] = ButorKategoria[playerid];
		ButorInfo[szabadbutor][butorListitem] = listitem;

		ButorInfo[szabadbutor][butorObject] = CreateDynamicObject(ButorInfo[szabadbutor][butorModel], playerposok[0] + 1.0, playerposok[1] + 2.0, playerposok[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

		Streamer_Update(playerid);
		SzerkesztesButor[playerid] = szabadbutor;
        SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
		SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");

		EditDynamicObject(playerid, ButorInfo[szabadbutor][butorObject]);
		ButorKategoria[playerid] = 0;
	}
	if(dialogid == DIALOG_BUTOR_SZERKESZTES)
	{
		if(!response)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "További szép napot!");

		switch(listitem)
		{
			case 0:
			{
			 	SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
				SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");
			
				EditDynamicObject(playerid, ButorInfo[SzerkesztesButor[playerid]][butorObject]);
				SzerkesztesButor[playerid] = NINCS;
			}
			case 1:
			{
				new formatalunk[512],nev[48],kategoria[32],butorszam = SzerkesztesButor[playerid];
				switch(ButorInfo[butorszam][butorTipus])
				{
					case 1:
					{
						kategoria = "Asztal";
						format(nev, sizeof(nev), Butor_Asztal[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 2:
					{
						kategoria = "Ülõgarnitúra";
						format(nev, sizeof(nev), Butor_Ulogarnitura[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 3:
					{
						kategoria = "Festmények, képek";
						format(nev, sizeof(nev), Butor_Kepek[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 4:
					{
						kategoria = "Lámpák";
						format(nev, sizeof(nev), Butor_Lampak[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 5:
					{
						kategoria = "TV-k";
						format(nev, sizeof(nev), Butor_TV[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 6:
					{
						kategoria = "DVD-k, HiFi-k";
						format(nev, sizeof(nev), Butor_DVDHiFi[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 7:
					{
						kategoria = "Hangfal";
						format(nev, sizeof(nev), Butor_Hangfal[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 8:
					{
						kategoria = "Szekrény";
						format(nev, sizeof(nev), Butor_Szekreny[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 9:
					{
						kategoria = "Fotel";
						format(nev, sizeof(nev), Butor_Fotel[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 10:
					{
						kategoria = "Konyhabútor";
						format(nev, sizeof(nev), Butor_Konyhabutor[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 11:
					{
						kategoria = "Hûtõ";
						format(nev, sizeof(nev), Butor_Huto[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 12:
					{
						kategoria = "Számítógép";
						format(nev, sizeof(nev), Butor_Szamitogep[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 13:
					{
						kategoria = "Ajtó";
						format(nev, sizeof(nev), Butor_Ajto[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 14:
					{
						kategoria = "Mosógép";
						format(nev, sizeof(nev), Butor_Mosogep[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 15:
					{
						kategoria = "Nyomtató";
						format(nev, sizeof(nev), Butor_Nyomtato[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 16:
					{
						kategoria = "Ágy";
						format(nev, sizeof(nev), Butor_Agy[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 17:
					{
						kategoria = "WC";
						format(nev, sizeof(nev), Butor_WC[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 18:
					{
						kategoria = "Zuhanyzó";
						format(nev, sizeof(nev), Butor_Zuhanyzo[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 19:
					{
						kategoria = "Mosdó";
						format(nev, sizeof(nev), Butor_Mosdo[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 20:
					{
						kategoria = "Szõnyeg";
						format(nev, sizeof(nev), Butor_Szonyeg[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 21:
					{
						kategoria = "Szék";
						format(nev, sizeof(nev), Butor_Szek[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 22:
					{
						kategoria = "Íróasztal";
						format(nev, sizeof(nev), Butor_Iroasztal[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 23:
					{
						kategoria = "Fal";
						format(nev, sizeof(nev), Butor_Fal[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 24:
					{
						kategoria = "Virág";
						format(nev, sizeof(nev), Butor_Virag[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 25:
					{
						kategoria = "Egyéb";
						format(nev, sizeof(nev), Butor_Egyeb[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
				}

				format(formatalunk, sizeof(formatalunk), #COL_FEHER"Biztos, hogy törölni akarod a következõ bútort?\n\n\n"#COL_VKEK"Bútor kategóriája: "#COL_FEHER"%s\n"#COL_VKEK"Bútor neve: "#COL_FEHER"%s", kategoria, nev);
				ShowPlayerDialog(playerid, DIALOG_BUTOR_TORLES, DIALOG_STYLE_MSGBOX, #COL_FEHER"Bútor "#COL_VKEK"törlése", formatalunk, "Biztos!", "Mégse!");
			}
		}
		return true;
	}
	if(dialogid == DIALOG_BUTOR_KATEGORIA)
	{
		if(!response)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "További szép napot!");
			
        if(ButorSzam(playerid) == HouseInfo[GetPlayerVirtualWorld(playerid)][Butorok])
			return SendClientMessage(playerid, COLOR_LIGHTRED, "[Hiba]: Sajnos te már nem vehetsz több berendezési tárgyat!");

		new butorstr[3000],i = NINCS;
		//printf("Listitem: %d", listitem);
		switch(listitem)
		{
			case 0:
			{
				ButorKategoria[playerid] = 1;

				for(;++i != sizeof(Butor_Asztal);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Asztal[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Asztal[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Asztal[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Asztal[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Asztal", butorstr, "Mehet!", "Vissza!");
				return true;
			}
			case 1:
			{
				ButorKategoria[playerid] = 2;

				for(;++i != sizeof(Butor_Ulogarnitura);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Ulogarnitura[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Ulogarnitura[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Ulogarnitura[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Ulogarnitura[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Ülõgarnitúra", butorstr, "Mehet!", "Vissza!");
			}
			case 2:
			{
				ButorKategoria[playerid] = 3;

				for(;++i != sizeof(Butor_Kepek);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Kepek[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Kepek[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Kepek[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Kepek[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Festmények, képek", butorstr, "Mehet!", "Vissza!");
			}
			case 3:
			{
				ButorKategoria[playerid] = 4;

				for(;++i != sizeof(Butor_Lampak);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Lampak[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Lampak[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Lampak[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Lampak[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Lámpák", butorstr, "Mehet!", "Vissza!");
			}
			case 4:
			{
				ButorKategoria[playerid] = 5;

				for(;++i != sizeof(Butor_TV);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_TV[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_TV[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_TV[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_TV[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"TV-k", butorstr, "Mehet!", "Vissza!");
			}
			case 5:
			{
				ButorKategoria[playerid] = 6;

				for(;++i != sizeof(Butor_DVDHiFi);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_DVDHiFi[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_DVDHiFi[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_DVDHiFi[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_DVDHiFi[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"DVD-k, HiFi-k", butorstr, "Mehet!", "Vissza!");
			}
			case 6:
			{
				ButorKategoria[playerid] = 7;

				for(;++i != sizeof(Butor_Hangfal);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Hangfal[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Hangfal[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Hangfal[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Hangfal[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Hangfal", butorstr, "Mehet!", "Vissza!");
				return true;
			}
			case 7:
			{
				ButorKategoria[playerid] = 8;

				for(;++i != sizeof(Butor_Szekreny);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szekreny[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Szekreny[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szekreny[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Szekreny[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Szekrény", butorstr, "Mehet!", "Vissza!");
			}
			case 8:
			{
				ButorKategoria[playerid] = 9;

				for(;++i != sizeof(Butor_Fotel);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Fotel[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Fotel[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Fotel[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Fotel[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Fotel", butorstr, "Mehet!", "Vissza!");
			}
			case 9:
			{
				ButorKategoria[playerid] = 10;

				for(;++i != sizeof(Butor_Konyhabutor);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Konyhabutor[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Konyhabutor[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Konyhabutor[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Konyhabutor[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Konyhabútor", butorstr, "Mehet!", "Vissza!");
			}
			case 10:
			{
				ButorKategoria[playerid] = 11;

				for(;++i != sizeof(Butor_Huto);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Huto[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Huto[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Huto[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Huto[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Hûtõ", butorstr, "Mehet!", "Vissza!");
			}
			case 11:
			{
				ButorKategoria[playerid] = 12;

				for(;++i != sizeof(Butor_Szamitogep);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szamitogep[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Szamitogep[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szamitogep[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Szamitogep[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Számítógép", butorstr, "Mehet!", "Vissza!");
			}
			case 12:
			{
				ButorKategoria[playerid] = 13;

				for(;++i != sizeof(Butor_Ajto);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Ajto[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Ajto[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Ajto[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Ajto[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Ajtó", butorstr, "Mehet!", "Vissza!");
				return true;
			}
			case 13:
			{
				ButorKategoria[playerid] = 14;

				for(;++i != sizeof(Butor_Mosogep);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Mosogep[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Mosogep[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Mosogep[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Mosogep[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Mosógép", butorstr, "Mehet!", "Vissza!");
			}
			case 14:
			{
				ButorKategoria[playerid] = 15;

				for(;++i != sizeof(Butor_Nyomtato);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Nyomtato[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Nyomtato[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Nyomtato[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Nyomtato[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Nyomtató", butorstr, "Mehet!", "Vissza!");
			}
			case 15:
			{
				ButorKategoria[playerid] = 16;

				for(;++i != sizeof(Butor_Agy);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Agy[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Agy[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Agy[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Agy[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Ágy", butorstr, "Mehet!", "Vissza!");
			}
			case 16:
			{
				ButorKategoria[playerid] = 17;

				for(;++i != sizeof(Butor_WC);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_WC[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_WC[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_WC[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_WC[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"WC", butorstr, "Mehet!", "Vissza!");
			}
			case 17:
			{
				ButorKategoria[playerid] = 18;

				for(;++i != sizeof(Butor_Zuhanyzo);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Zuhanyzo[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Zuhanyzo[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Zuhanyzo[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Zuhanyzo[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Zuhanyzó", butorstr, "Mehet!", "Vissza!");
			}
			case 18:
			{
				ButorKategoria[playerid] = 19;

				for(;++i != sizeof(Butor_Mosdo);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Mosdo[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Mosdo[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Mosdo[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Mosdo[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Mosdó", butorstr, "Mehet!", "Vissza!");
				return true;
			}
			case 19:
			{
				ButorKategoria[playerid] = 20;

				for(;++i != sizeof(Butor_Szonyeg);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szonyeg[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Szonyeg[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szonyeg[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Szonyeg[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Szõnyeg", butorstr, "Mehet!", "Vissza!");
			}
			case 20:
			{
				ButorKategoria[playerid] = 21;

				for(;++i != sizeof(Butor_Szek);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szek[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Szek[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szek[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Szek[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Szék", butorstr, "Mehet!", "Vissza!");
			}
			case 21:
			{
				ButorKategoria[playerid] = 22;

				for(;++i != sizeof(Butor_Iroasztal);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Iroasztal[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Iroasztal[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Iroasztal[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Iroasztal[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Íróasztal", butorstr, "Mehet!", "Vissza!");
			}
			case 22:
			{
				ButorKategoria[playerid] = 23;

				for(;++i != sizeof(Butor_Fal);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Fal[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Fal[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Fal[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Fal[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 1), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Fal", butorstr, "Mehet!", "Vissza!");
			}
			case 23:
			{
				ButorKategoria[playerid] = 24;

				for(;++i != sizeof(Butor_Virag);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Virag[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Virag[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Virag[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Virag[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 1), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Virág", butorstr, "Mehet!", "Vissza!");
			}
			case 24:
			{
				ButorKategoria[playerid] = 25;

				for(;++i != sizeof(Butor_Egyeb);)
				{
				    new butorformat[128],butorformat2[32];
					format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Egyeb[i][butorID], (PlayerInfo[playerid][pAccount] < Butor_Egyeb[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Egyeb[i][butorNEV]);
					format(butorformat2, sizeof(butorformat2), "[%sFt]\n", FormatNumber(Butor_Egyeb[i][butorAR], 0, ','));
					strins(butorstr, Tab(butorformat, butorformat2, 1), strlen(butorstr));
				}
				ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Egyéb", butorstr, "Mehet!", "Vissza!");
			}
		}
	}
	// ============================================== [ Kapu rendszer ] =================================================
	if(dialogid == DIALOG_KAPU_STATISZTIKA)
	{
	    if(!response)
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");

		switch(listitem)
		{
		    case 0:
		    {
		        KapuID[playerid] = UjKapuID();
		        Kapu[KapuID[playerid]][kVan] = true;
		        Kapu[KapuID[playerid]][kSzerkeszt] = true;
		        ShowPlayerDialog(playerid, DIALOG_KAPU_NEV, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"név", "Kérlek add meg az alábbi mezõbe\na kapu nevét!", "Mehet!", "Mégse!");
		        return true;
		    }
		    case 1:
		    {
				new kapuidje = GetClosestKapu(playerid);
				if(GetDistanceToKapu(playerid, kapuidje) < 15.0)
				{
				    KapuID[playerid] = kapuidje;
				    ShowPlayerDialog(playerid, DIALOG_KAPU_SZERKESZTES, DIALOG_STYLE_LIST, #COL_FEHER"Kapu "#COL_VKEK"szerkesztés", "Kapu pozíciójának modosítása\nKapu nevének módosítása\nKapu sebességének módosítása\nKapu jelszavának módosítása\nKapu frakciójának módosítása\nKapu nyitási távolságának modosítása\nKapu automatikus kinyitásának módosítása\nKapu debugolása\nKapu végleges törlése", "Mehet!", "Mégse!");
				    return true;
				}
				return SendClientMessage(playerid, COLOR_LIGHTRED, "[Hiba]: Nincs a közeledben kapu! Legalább 15 koordinátára kell, hogy legyen!");
		    }
		    case 2:
			{
			    new id = GetClosestKapu(playerid);
				if(GetDistanceToKapu(playerid, id) < 15.0)
				{
				    new info[512], hpw[64];
				    new Float:tav = Kapu[id][kTav], Float:seb = Kapu[id][kSpeed], md = Kapu[id][kModel], bool:mg = Kapu[id][kMozgo], nyitas = Kapu[id][nyit];

		  			Format(info,""#COL_FEHER"Kapu ID: "#COL_VKEK"%d "#COL_FEHER" SQL ID: "#COL_VKEK"%d "#COL_FEHER"\nKapu Model ID: "#COL_VKEK"%d \n"#COL_FEHER"Kapu neve:"#COL_VKEK" %s \n", id, Kapu[id][kUID], md, Kapu[id][kNev]);
		  			Format(info,"%s"#COL_FEHER"Nyitási távolság:"#COL_VKEK" %.1fm "#COL_FEHER"\nNyitási sebesség:"#COL_VKEK" %.1f"#COL_FEHER"\nAutomatikus nyitás:"#COL_VKEK" %d\n",info, tav, seb, nyitas);
		  			Format(info,"%s"#COL_FEHER"Rotációs nyitás aktív: "#COL_VKEK"%s \n",info, (mg == true ? ("Nem") : ("Igen")));

		  			if(Kapu[id][kHasznalo][0] == 0)
						Format(hpw, ""#COL_FEHER"Kapu nyitási jelszava: "#COL_VKEK"%d", Kapu[id][kKod]);
		  			else
					{
		  			   	new i = -1, num = GetHasznaloNum(id);
						for(;++i < MAX_KAPU_HASZNALO;)
						{
						    if(Kapu[id][kHasznalo][i] > 0)
						    {
								format(hpw, sizeof(hpw), "%s%d%s", hpw, Kapu[id][kHasznalo][i], (num > i + 1 ? (",") : ("")));
						    }
						}
						Format(hpw, ""#COL_FEHER"Kaput használó frakció(k): "#COL_VKEK"%s",hpw);
		  			}
		  			Format(info,"%s%s",info, hpw);
		  			Format(info,"%s\n"#COL_FEHER"Szerkesztés alatt: "#COL_VKEK"%s",info, (Kapu[id][kSzerkeszt] == true ? ("Igen") : ("Nem")));
					ShowPlayerDialog(playerid, DIALOG_MSGINFO, DIALOG_STYLE_MSGBOX, #COL_FEHER"Kapu"COL_VKEK" részletes információi:", info, "Rendben", "");
					return true;
				}
				return SendClientMessage(playerid, COLOR_LIGHTRED, "[Hiba]: Nincs a közeledben kapu! Legalább 15 koordinátára kell, hogy legyen!");
			}
			case 3:
			{
				new kapuidje = GetClosestKapu(playerid);
				if(GetDistanceToKapu(playerid, kapuidje) < 15.0)
				{
					KapuAkcio(KAPU_RELOAD, Kapu[kapuidje][kUID]);
					SendClientMessage(playerid, COLOR_GREEN, "[Info]: Kapu újratöltése indítva!");
					return true;
				}
				return SendClientMessage(playerid, COLOR_LIGHTRED, "[Hiba]: Nincs a közeledben kapu! Legalább 15 koordinátára kell, hogy legyen!");
			}
		}
	}
	if(dialogid == DIALOG_KAPU_NEV)
	{
	    if(!response)
	    {
	        Kapu[KapuID[playerid]][kVan] = false;
			Kapu[KapuID[playerid]][kTav] = 0.0;
			Kapu[KapuID[playerid]][kModel] = 0;
			Kapu[KapuID[playerid]][kSzerkeszt] = false;
			KapuID[playerid] = NINCS;
			return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");
	    }
	    
	    if(strlen(inputtext) < 1 || strlen(inputtext) > 32)
	        return ShowPlayerDialog(playerid, DIALOG_KAPU_NEV, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"név", "Kérlek add meg az alábbi mezõbe\na kapu nevét!", "Mehet!", "Mégse!");

		format(Kapu[KapuID[playerid]][kNev], 32, inputtext);
	    ShowPlayerDialog(playerid, DIALOG_KAPU_MODEL, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"model", "Kérlek add meg az alábbi mezõbe\na kapu model ID-jét!\nPl: 980, 1495, 18755, 14856, 973, 8378", "Mehet!", "Mégse!");
	    return true;
	}
	if(dialogid == DIALOG_KAPU_NEV_SZERKESZTES)
	{
	    if(!response)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");

		new formatocska[256];
		format(formatocska, 256, "Kérlek add meg az alábbi mezõbe\na kapu nevét! Jelenlegi: %s", Kapu[KapuID[playerid]][kNev]);
		
	    if(strlen(inputtext) < 5 || strlen(inputtext) > 32)
	        return ShowPlayerDialog(playerid, DIALOG_KAPU_NEV_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"név", formatocska, "Mehet!", "Mégse!");

		format(Kapu[KapuID[playerid]][kNev], 32, inputtext);
		format(querycske, sizeof(querycske), "UPDATE `"#SQL_DB_Kapu"` SET Nev = '%s' WHERE ID = '%d'", Kapu[KapuID[playerid]][kNev], Kapu[KapuID[playerid]][kUID]);
		doQuery(querycske);
		
		SendFormatMessage(playerid, COLOR_GREEN, "[Info]: A kapu neve a következõ lett: %s!", Kapu[KapuID[playerid]][kNev]);
	    return true;
	}
	if(dialogid == DIALOG_KAPU_SZERKESZTES)
	{
	    if(!response) {
	        Kapu[KapuID[playerid]][kSzerkeszt] = false;
	        SzerkesztesAllas[playerid] = 0;
			KapuID[playerid] = NINCS;
			SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");
			return true;
		}

	    switch(listitem)
	    {
	        case 0:
			{
			    if(Kapu[KapuID[playerid]][kSzerkeszt])
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ezt a kaput jelenleg már szerkesztik!");

			    ShowPlayerDialog(playerid, DIALOG_KAPU_POZICIO, DIALOG_STYLE_LIST, #COL_FEHER"Kapu "#COL_VKEK"mozgatása", "Zárt pozició\nNyitott pozició", "Mehet!", "Mégse!");
	            return true;
	        }
	        case 1:
	        {
	            if(Kapu[KapuID[playerid]][kSzerkeszt])
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ezt a kaput jelenleg már szerkesztik!");
			        
                new formatocska[256];
				format(formatocska, 256, "Kérlek add meg az alábbi mezõbe\na kapu nevét! Jelenlegi: %s", Kapu[KapuID[playerid]][kNev]);

				ShowPlayerDialog(playerid, DIALOG_KAPU_NEV_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"név", formatocska, "Mehet!", "Mégse!");
	            return true;
	        }
	        case 2:
	        {
	            if(Kapu[KapuID[playerid]][kSzerkeszt])
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ezt a kaput jelenleg már szerkesztik!");

				Kapu[KapuID[playerid]][kSzerkeszt] = true;
                ShowPlayerDialog(playerid, DIALOG_KAPU_SEBESSEG, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"sebesség állítás", "Írd a lentebbi mezõbe a kapu gyorsaságát! (min 1, max 15)\n"#COL_NARANCS"Ha az érték 0 a kapu rotációs nyitást fog végezni!", "Mehet!", "Mégse!");
	            return true;
	        }
	        case 3:
	        {
	            if(Kapu[KapuID[playerid]][kSzerkeszt])
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ezt a kaput jelenleg már szerkesztik!");
			        
                ShowPlayerDialog(playerid, DIALOG_KAPU_KOD_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"kód", "Kérlek add meg az alábbi mezõbe a kapu titkos jelszavát!\n"#COL_NARANCS"FIGYELEM! A kód minimum 3 és maximum 6 számjegy között állhat!", "Mehet!", "Mégse!");
                return true;
	        }
	        case 4:
	        {
	            if(Kapu[KapuID[playerid]][kSzerkeszt])
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ezt a kaput jelenleg már szerkesztik!");
			        
	            ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO_SZERK, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");
	            return true;
	        }
	        case 5:
	        {
	            if(Kapu[KapuID[playerid]][kSzerkeszt])
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ezt a kaput jelenleg már szerkesztik!");

				ShowPlayerDialog(playerid, DIALOG_KAPU_TAV_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"távolság", "Kérlek add meg az alábbi mezõbe, hogy \nmilyen messzirõl használhassák a kaput! (min 1, max 15)", "Mehet!", "Mégse!");
	            return true;
	        }
			case 6:
			{
				if(Kapu[KapuID[playerid]][kSzerkeszt])
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ezt a kaput jelenleg már szerkesztik!");

				ShowPlayerDialog(playerid, DIALOG_KAPU_NYIT_SZERK, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"automatikus nyitása", "Kérlek add meg az alábbi mezõbe, hogy automatikusan nyiljon-e a kapu!\n0: nem nyílik ki | 1: határ, restartkor nyílik | 2: börtöncellák, /börtöncella parancshoz", "Mehet!", "Mégse!");
	            return true;
			}
	        case 7:
	        {
	            Kapu[KapuID[playerid]][kSzerkeszt] = false;
	            SendClientMessage(playerid, COLOR_GREEN, "[Info]: A közeledben lévõ kapu szerkesztési folyamata alap helyzetbe állítva!");
	            return true;
	        }
	        case 8:
	        {
				if(Kapu[KapuID[playerid]][kSzerkeszt])
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Ezt a kaput jelenleg már szerkesztik!");

	            format(querycske, sizeof(querycske), "DELETE FROM `"#SQL_DB_Kapu"` WHERE ID = '%d'", Kapu[KapuID[playerid]][kUID]);
	            doQuery(querycske);

				new iSQL[5];
				Format(iSQL, "%d",Kapu[KapuID[playerid]][kUID]);
	            ABroadCastFormat(COLOR_LIGHTRED, PlayerInfo[playerid][pAdmin], "<< Admin %s törölt egy kaput! Obj: %d | Folyamat: DKSZ | SQLID: %s >>", AdminName(playerid),Kapu[KapuID[playerid]][kModel], (strval(iSQL) == NINCS ? ("Hiba!") : iSQL));
	            
	            if(Kapu[KapuID[playerid]][kUID] == NINCS)
	            	SendClientMessage(playerid, COLOR_LIGHTRED, "[Hiba]: Hiba történt a Query során! Info: Negatív index!");
	            
	            Kapu[KapuID[playerid]][kVan] = false;
	            Kapu[KapuID[playerid]][kSzerkeszt] = false;
				Kapu[KapuID[playerid]][kUID] = NINCS;
				Kapu[KapuID[playerid]][kModel] = 0;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kSpeed] = 0.0;
				Kapu[KapuID[playerid]][kPos][0] = 0.0;
				Kapu[KapuID[playerid]][kPos][1] = 0.0;
				Kapu[KapuID[playerid]][kPos][2] = 0.0;
				Kapu[KapuID[playerid]][kNPos][0] = 0.0;
				Kapu[KapuID[playerid]][kNPos][1] = 0.0;
				Kapu[KapuID[playerid]][kNPos][2] = 0.0;
				Kapu[KapuID[playerid]][kNRPos][0] = 0.0;
				Kapu[KapuID[playerid]][kNRPos][1] = 0.0;
				Kapu[KapuID[playerid]][kNRPos][2] = 0.0;
				Kapu[KapuID[playerid]][kZPos][0] = 0.0;
				Kapu[KapuID[playerid]][kZPos][1] = 0.0;
				Kapu[KapuID[playerid]][kZPos][2] = 0.0;
				Kapu[KapuID[playerid]][kZRPos][0] = 0.0;
				Kapu[KapuID[playerid]][kZRPos][1] = 0.0;
				Kapu[KapuID[playerid]][kZRPos][2] = 0.0;
				Kapu[KapuID[playerid]][kBarki] = false;
				Kapu[KapuID[playerid]][kMozgo] = false;
				Kapu[KapuID[playerid]][nyit] = 0;
				Kapu[KapuID[playerid]][Vw] = NINCS;
				Kapu[KapuID[playerid]][kKod] = -1;
				if(IsValidDynamicObject(Kapu[KapuID[playerid]][kOID])) DestroyDynamicObject(Kapu[KapuID[playerid]][kOID]),Kapu[KapuID[playerid]][kOID]=INVALID_OBJECT_ID;
				
				SzerkesztesAllas[playerid] = 0;
				KapuID[playerid] = NINCS;
				
	            SendClientMessage(playerid, COLOR_GREEN, "[Info]: Közeledben lévõ kapu sikeresen törölve!");
	            return true;
	        }
	    }
	    return true;
	}
	if(dialogid == DIALOG_KAPU_NYIT_SZERK)
	{
		if(!response)
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");

		if((strval(inputtext) < 0 || strval(inputtext) > 2) || !IsNumeric(inputtext))
		    return ShowPlayerDialog(playerid, DIALOG_KAPU_NYIT_SZERK, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"távolság", "Kérlek add meg az alábbi mezõbe, hogy automatikusan nyiljon-e a kapu!\n0: nem nyílik ki | 1: határ, restartkor nyílik | 2: börtöncellák, /börtöncella parancshoz", "Mehet!", "Mégse!");

		Kapu[KapuID[playerid]][nyit] = strval(inputtext);
		Kapu[KapuID[playerid]][kSzerkeszt] = false;
		SendFormatMessage(playerid, COLOR_LIGHTRED, "[Info]: Kapu automatikus nyílása átírva erre: %d", strval(inputtext));
		format(querycske, sizeof(querycske), "UPDATE `"#SQL_DB_Kapu"` SET nyit = '%d' WHERE ID = '%d'", Kapu[KapuID[playerid]][kTav], Kapu[KapuID[playerid]][kUID]);
		doQuery(querycske);
		KapuID[playerid] = -1;
		return true;
	}
	if(dialogid == DIALOG_KAPU_TAV_SZERKESZTES)
	{
	    if(!response)
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");

		if((strval(inputtext) < 1 || strval(inputtext) > 15) || !IsNumeric(inputtext))
		    return ShowPlayerDialog(playerid, DIALOG_KAPU_TAV_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"távolság", "Kérlek add meg az alábbi mezõbe, hogy milyen messzirõl használhassák a kaput! (min 1, max 15)", "Mehet!", "Mégse!");

		Kapu[KapuID[playerid]][kTav] = float(strval(inputtext));
		Kapu[KapuID[playerid]][kSzerkeszt] = false;
		SendFormatMessage(playerid, COLOR_LIGHTRED, "[Info]: Kapu távolsága átírva erre: %d", strval(inputtext));
		format(querycske, sizeof(querycske), "UPDATE `"#SQL_DB_Kapu"` SET Tav = '%f' WHERE ID = '%d'", Kapu[KapuID[playerid]][kTav], Kapu[KapuID[playerid]][kUID]);
		doQuery(querycske);
		KapuID[playerid] = -1;
		return true;
	}
	if(dialogid == DIALOG_KAPU_SEBESSEG)
	{
	    if(!response)
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");

		if((strval(inputtext) < 0 || strval(inputtext) > 15) || !IsNumeric(inputtext))
		    return ShowPlayerDialog(playerid, DIALOG_KAPU_SEBESSEG, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"sebesség állítás", "Írd a lentebbi mezõbe a kapu gyorsaságát! (min 1, max 15)\n"#COL_NARANCS"Ha az érték 0 a kapu rotációs nyitást fog végezni!", "Mehet!", "Mégse!");

		if(float(strval(inputtext)) == 0.0) {
		    Kapu[KapuID[playerid]][kMozgo] = false;
		    Kapu[KapuID[playerid]][kSpeed] = 0.0;
		    SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kapu sebessége 0-ra állítva, rotációs nyitása bekapcsolva!");
		} else {
			Kapu[KapuID[playerid]][kMozgo] = true;
			Kapu[KapuID[playerid]][kSpeed] = float(strval(inputtext));
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Info]: Kapu sebessége átírva erre: %d", strval(inputtext));
		}

		Kapu[KapuID[playerid]][kSzerkeszt] = false;
		format(querycske, sizeof(querycske), "UPDATE `"#SQL_DB_Kapu"` SET Speed = '%f' WHERE ID = '%d'", Kapu[KapuID[playerid]][kSpeed], Kapu[KapuID[playerid]][kUID]);
		doQuery(querycske);
		KapuID[playerid] = NINCS;
		return true;
	}
	if(dialogid == DIALOG_KAPU_KOD_SZERKESZTES)
	{
	    if(!response)
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");

		if((strlen(inputtext) < 3 || strlen(inputtext) > 6) || !IsNumeric(inputtext))
		    return ShowPlayerDialog(playerid, DIALOG_KAPU_KOD_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"kód", "Kérlek add meg az alábbi mezõbe a kapu titkos jelszavát!\n"#COL_NARANCS"FIGYELEM! A kód minimum 3 és maximum 6 számjegy között állhat!", "Mehet!", "Mégse!");

		Kapu[KapuID[playerid]][kKod] = strval(inputtext);
		
		SendFormatMessage(playerid, COLOR_GREEN, "[Info]: A kapu jelszava a következõ lett: %d", strval(inputtext));
		format(querycske, sizeof(querycske), "UPDATE `"#SQL_DB_Kapu"` SET Kod = '%d' WHERE ID = '%d'", Kapu[KapuID[playerid]][kKod], Kapu[KapuID[playerid]][kUID]);
		doQuery(querycske);
		new i = -1;
		for(;++i < MAX_KAPU_HASZNALO;)
			Kapu[KapuID[playerid]][kHasznalo][i] = 0;
	}
	if(dialogid == DIALOG_KAPU_FRAKCIO_SZERK)
	{
	    if(!response)
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");

		new valamicske = NumCharacter(inputtext, ','), formatsscanf[16];

		if((valamicske + 1 < 0) || (valamicske + 1 > MAX_KAPU_HASZNALO))
		    return ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO_SZERK, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");

		format(formatsscanf, sizeof(formatsscanf), "p<,>a<i>[%d]", valamicske + 1);
		sscanf(inputtext, formatsscanf, Kapu[KapuID[playerid]][kHasznalo]);
		new i = -1;
		for(;++i < MAX_KAPU_HASZNALO;)
		{
		    if(Kapu[KapuID[playerid]][kHasznalo][i] > MAX_FRAKCIO)
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "[Hiba]: A frakció száma minimum 1 és maximum 22 lehet!");
		        ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO_SZERK, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");
		        break;
		    }
		}
		
		Kapu[KapuID[playerid]][kSzerkeszt] = false;
		
		if(Kapu[KapuID[playerid]][kKod] != -1)
		    Kapu[KapuID[playerid]][kKod] = -1;
		    
		format(querycske, sizeof(querycske), "UPDATE `"#SQL_DB_Kapu"` SET Hasznalo = '%s', Kod = '-1' WHERE ID = '%d'", inputtext, Kapu[KapuID[playerid]][kUID]);
		doQuery(querycske);
		KapuID[playerid] = -1;
		SendFormatMessage(playerid, COLOR_LIGHTBLUE, "[Info]: A kapu frakcióra való korlátozása a következõk lettek: %s", inputtext);
		return true;
	}
	if(dialogid == DIALOG_KAPU_POZICIO)
	{
		if(!response)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");
	        
	    switch(listitem)
	    {
	        case 0:
	        {
				SzerkesztesAllas[playerid] = 3;
				Kapu[KapuID[playerid]][kSzerkeszt] = true;
	            SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2]);
	            SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2]);
	            EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);
	            return true;
	        }
	        case 1:
	        {
				SzerkesztesAllas[playerid] = 4;
				Kapu[KapuID[playerid]][kSzerkeszt] = true;
	            SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kNPos][0], Kapu[KapuID[playerid]][kNPos][1], Kapu[KapuID[playerid]][kNPos][2]);
	            SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kNRPos][0], Kapu[KapuID[playerid]][kNRPos][1], Kapu[KapuID[playerid]][kNRPos][2]);
	            EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);
	            return true;
	        }
	    }
	}
	if(dialogid == DIALOG_KAPU_MODEL)
	{
	    if(!response)
	    {
	        Kapu[KapuID[playerid]][kVan] = false;
			Kapu[KapuID[playerid]][kTav] = 0.0;
			Kapu[KapuID[playerid]][kModel] = 0;
			Kapu[KapuID[playerid]][kSzerkeszt] = false;
			KapuID[playerid] = NINCS;
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");
		}

		if(!IsNumeric(inputtext))
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "[Hiba]: A Model ID csak szám lehet! Pl: 980, 1495, 18755, 14856, 973, 8378");
		    ShowPlayerDialog(playerid, DIALOG_KAPU_MODEL, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"model", "Kérlek add meg az alábbi mezõbe\na kapu Model ID-jét!\nPl: 980, 1495, 18755, 14856, 973, 8378", "Mehet!", "Mégse!");
		    return true;
		}
		
		Kapu[KapuID[playerid]][kModel] = strval(inputtext);
		ShowPlayerDialog(playerid, DIALOG_KAPU_TAVOLSAG, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"távolság", "Kérlek add meg az alábbi\na kapu nyitási távolságát!", "Mehet!", "Mégse!");
	}
	if(dialogid == DIALOG_KAPU_TAVOLSAG)
	{
	    if(!response)
	    {
	        Kapu[KapuID[playerid]][kVan] = false;
	        Kapu[KapuID[playerid]][kSzerkeszt] = false;
			Kapu[KapuID[playerid]][kTav] = 0.0;
			Kapu[KapuID[playerid]][kModel] = 0;
			KapuID[playerid] = -1;
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");
		}

		if(!IsNumeric(inputtext) || (strval(inputtext) < 1 || strval(inputtext) > 15))
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "[Hiba]: A távolságnak számban megadott értéknek kell lennie! (1-15 koordináta)");
		    ShowPlayerDialog(playerid, DIALOG_KAPU_TAVOLSAG, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"távolság", "Kérlek add meg az alábbi\na kapu nyitási távolságát!", "Mehet!", "Mégse!");
		    return true;
		}

		Kapu[KapuID[playerid]][kTav] = float(strval(inputtext));
		ShowPlayerDialog(playerid, DIALOG_KAPU_NYITAS, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"automatikus nyitás", "Kérlek add meg az alábbi mezõbe, hogy automatikusan nyiljon-e a kapu!\n0: nem nyílik ki | 1: határ, restartkor nyílik | 2: börtöncellák, /börtöncella parancshoz", "Mehet!", "Mégse!");
	}
	if(dialogid == DIALOG_KAPU_NYITAS)
	{
		if(!response)
	    {
	        Kapu[KapuID[playerid]][kVan] = false;
	        Kapu[KapuID[playerid]][kSzerkeszt] = false;
			Kapu[KapuID[playerid]][kTav] = 0.0;
			Kapu[KapuID[playerid]][kModel] = 0;
			KapuID[playerid] = -1;
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");
		}

		if(!IsNumeric(inputtext) || (strval(inputtext) < 0 || strval(inputtext) > 2))
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "[Hiba]: A távolságnak számban megadott értéknek kell lennie! (0: nem nyílik ki | 1: határ, restartkor nyílik | 2: börtöncellák, /börtöncella parancshoz)");
		    ShowPlayerDialog(playerid, DIALOG_KAPU_NYITAS, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"automatikus nyitás", "Kérlek add meg az alábbi mezõbe, hogy automatikusan nyiljon-e a kapu!\n0: nem nyílik ki | 1: határ, restartkor nyílik | 2: börtöncellák, /börtöncella parancshoz", "Mehet!", "Mégse!");
		    return true;
		}

		Kapu[KapuID[playerid]][nyit] = strval(inputtext);
		ShowPlayerDialog(playerid, DIALOG_KAPU_VALASZTAS, DIALOG_STYLE_LIST, #COL_FEHER"Kapu "#COL_VKEK"titkosítás", "Frakció megadása\nKód megadása", "Mehet!", "Mégse!");
	}
	if(dialogid == DIALOG_KAPU_VALASZTAS)
	{
	    if(!response)
	    {
	        Kapu[KapuID[playerid]][kVan] = false;
	        Kapu[KapuID[playerid]][kSzerkeszt] = false;
			Kapu[KapuID[playerid]][kTav] = 0.0;
			Kapu[KapuID[playerid]][kModel] = 0;
			KapuID[playerid] = -1;
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");
		}
		switch(listitem)
		{
		    case 0:
		    {
		        return ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");
		    }
		    case 1:
		    {
				return ShowPlayerDialog(playerid, DIALOG_KAPU_KOD, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"kód", "Kérlek add meg az alábbi mezõbe a kapu titkos jelszavát!\n"#COL_NARANCS"FIGYELEM! A kód minimum 3 és maximum 6 számjegy között állhat!", "Mehet!", "Mégse!");
		    }
		}
	}
	if(dialogid == DIALOG_KAPU_KOD)
	{
	    if(!response)
	    {
			Kapu[KapuID[playerid]][kVan] = false;
			Kapu[KapuID[playerid]][kSzerkeszt] = false;
			Kapu[KapuID[playerid]][kTav] = 0.0;
			Kapu[KapuID[playerid]][kModel] = 0;
			KapuID[playerid] = -1;
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");
		}

		if((strlen(inputtext) < 3 || strlen(inputtext) > 6) || !IsNumeric(inputtext))
		    return ShowPlayerDialog(playerid, DIALOG_KAPU_KOD, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"kód", "Kérlek add meg az alábbi mezõbe a kapu titkos jelszavát!\n"#COL_NARANCS"FIGYELEM! A kód minimum 3 és maximum 6 számjegy között állhat!", "Mehet!", "Mégse!");
		
		Kapu[KapuID[playerid]][kKod] = strval(inputtext);
		
		new Float:playerposok[3];
		GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);

		Kapu[KapuID[playerid]][kZPos][0] = playerposok[0] + 1.0;
		Kapu[KapuID[playerid]][kZPos][1] = playerposok[1] + 1.0;
		Kapu[KapuID[playerid]][kZPos][2] = playerposok[2] + 1.0;
		Kapu[KapuID[playerid]][Vw] = GetPlayerVirtualWorld(playerid);
		Kapu[KapuID[playerid]][kSpeed] = 3.0;

        Kapu[KapuID[playerid]][kBarki] = true;

		Kapu[KapuID[playerid]][kOID] = CreateDynamicObject(Kapu[KapuID[playerid]][kModel], Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2], Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2], GetPlayerVirtualWorld(playerid));
		Streamer_Update(playerid);
		SzerkesztesAllas[playerid] = 1;
		EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);
		SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
		SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");
		SendClientMessage(playerid, COLOR_NAR,    "Elõször a kapu zárt, majd nyitott állapotát kell elmentened!");
		return true;
	}
	if(dialogid == DIALOG_KAPU_FRAKCIO)
	{
	    if(!response)
	    {
			Kapu[KapuID[playerid]][kVan] = false;
			Kapu[KapuID[playerid]][kSzerkeszt] = false;
			Kapu[KapuID[playerid]][kTav] = 0.0;
			Kapu[KapuID[playerid]][kModel] = 0;
			KapuID[playerid] = -1;
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kiléptél a kezelõfelületrõl!");
		}
		
		new valamicske = NumCharacter(inputtext, ','), formatsscanf[16];
		if((valamicske + 1 < 0) || (valamicske + 1 > MAX_KAPU_HASZNALO))
		{
		    MEGISCSAKVISSZAJOVUNKIDEHALLODE:
		    ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");
		    return true;
		}

		format(formatsscanf, sizeof(formatsscanf), "p<,>a<i>[%d]", valamicske + 1);
		sscanf(inputtext, formatsscanf, Kapu[KapuID[playerid]][kHasznalo]);
		new i = -1;
		for(;++i < MAX_KAPU_HASZNALO;)
		{
		    if(Kapu[KapuID[playerid]][kHasznalo][i] > MAX_FRAKCIO)
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "[Hiba]: A frakció száma minimum 1 és maximum 22 lehet!");
		        goto MEGISCSAKVISSZAJOVUNKIDEHALLODE;
		        break;
		    }
		}
		
		new Float:playerposok[3];
		GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);
		
		Kapu[KapuID[playerid]][kZPos][0] = playerposok[0] + 1.0;
		Kapu[KapuID[playerid]][kZPos][1] = playerposok[1] + 1.0;
		Kapu[KapuID[playerid]][kZPos][2] = playerposok[2] + 1.0;
		Kapu[KapuID[playerid]][Vw] = GetPlayerVirtualWorld(playerid);
		Kapu[KapuID[playerid]][kSpeed] = 3.0;
		Kapu[KapuID[playerid]][kKod] = -1;
		
		Kapu[KapuID[playerid]][kOID] = CreateDynamicObject(Kapu[KapuID[playerid]][kModel], Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2], Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2], GetPlayerVirtualWorld(playerid));
		Streamer_Update(playerid);
		SzerkesztesAllas[playerid] = 1;
		EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);
		SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
		SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");
		SendClientMessage(playerid, COLOR_NAR,    "Elõször a kapu zárt, majd nyitott állapotát kell elmentened!");
		return true;
	}
	if(dialogid == DIALOG_CCOK_SZERZODES)
	{
		if(!response)
	    {
			if(VizsgaAjanlat[playerid] == INVALID_PLAYER_ID)
			{
				Msg(playerid, "A vizsgáztató nem online!");
				VizsgaAjanlat[playerid] = NINCS;
				Vizsgafajta[playerid] = 0;
				return 1;
			}
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Oktató: Elutasítottad, a szerzõdést!");
			SendClientMessage(VizsgaAjanlat[playerid], COLOR_LIGHTBLUE, "* Oktató: Tanuló elutasította a szerzõdést!");
			VizsgaAjanlat[playerid] = NINCS;
			Vizsgafajta[playerid] = 0;
			return true;
	    }
		if(Vizsgafajta[playerid] == 0) return Msg(playerid, "Nem ajánlották fel hogy levizsgáztatnak!");
		if(VizsgaAjanlat[playerid] == INVALID_PLAYER_ID)
		{
			Msg(playerid, "A vizsgáztató nem online!");
			VizsgaAjanlat[playerid] = NINCS;
			Vizsgafajta[playerid] = 0;
			return 1;
		}
		if(!LMT(VizsgaAjanlat[playerid], FRAKCIO_OKTATO))
		{
			Msg(playerid, "Hiba történt!");
			VizsgaAjanlat[playerid] = NINCS;
			Vizsgafajta[playerid] = 0;
			return 1;
		}
		if(PlayerInfo[playerid][pBankSzamla] > 0 && PlayerInfo[playerid][pAccount] > VizsgaAr[playerid])
		{
			PlayerInfo[playerid][pAccount] -= VizsgaAr[playerid];
			PlayerInfo[VizsgaAjanlat[playerid]][pAccount] += (VizsgaAr[playerid]/2);
			FrakcioSzef(FRAKCIO_OKTATO,VizsgaAr[playerid]/2, 9);
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Oktató: Elfogadtad a vizsgáztatást %dFt-ért(Pénzt Utaltuk). Vizsgáztatód: %s", VizsgaAr[playerid], PlayerName(VizsgaAjanlat[playerid]));
			SendFormatMessage(VizsgaAjanlat[playerid], COLOR_LIGHTBLUE, "* Oktató: %s elfogadta a vizsgáztatást %dFt-ért(Pénzt Utaltuk). Elkezdheted a vizsgáztatást!", PlayerName(playerid), VizsgaAr[playerid]);
			
			VizsgaRacePoint[playerid][0] = 0;
			VizsgaRacePoint[playerid][1] = 0;
			VizsgaRacePoint[playerid][2] = 0;
			Hajocp[playerid] = 0;
			Autocp[playerid] = 0;
			Helicp[playerid] = 0;
			Repulocp[playerid] = 0;
			Adrcp[playerid] = 0;
			Kamioncp[playerid] = 0;
			Jogsineki[playerid] = 0;
			Oktato[playerid] = 0;
			
			Oktat[VizsgaAjanlat[playerid]] = 1;
			VizsgaAr[playerid] = NINCS;
			new oktato = VizsgaAjanlat[playerid];
			Oktato[playerid] = PlayerInfo[VizsgaAjanlat[playerid]][pID];
			Jogsineki[oktato] = PlayerInfo[playerid][pID];
			Jogsineki[playerid] = PlayerInfo[playerid][pID];
			
			if(Vizsgafajta[playerid] == 1 || Vizsgafajta[playerid] == 2)
			{
				Autocp[playerid] = 2;
				SetPlayerCheckpoint(playerid,1018.7460,-1792.8777,13.6848, 5);
				//Autocp[oktato] = 2;
				SetPlayerCheckpoint(oktato,1018.7460,-1792.8777,13.6848, 5);
				TakingLesson[playerid] = 1;
			}
			else if(Vizsgafajta[playerid] == 3)
			{
				Kamioncp[playerid] = 2;
				//Kamioncp[oktato] = 2;
				SetPlayerCheckpoint(playerid,998.1311,-1320.5115,14.4158, 5);
				SetPlayerCheckpoint(oktato,998.1311,-1320.5115,14.4158, 5);
				TakingLesson[playerid] = 1;
			}
			else if(Vizsgafajta[playerid] == 4)
			{
				Hajocp[playerid] = 2;
				//Hajocp[oktato] = 2;
				SetPlayerCheckpoint(playerid,371.2765,-1994.9741,-0.0225, 5);
				SetPlayerCheckpoint(oktato,371.2765,-1994.9741,-0.0225, 5);
				TakingLesson[playerid] = 1;
			}
			else if(Vizsgafajta[playerid] == 5)
			{
				Msg(oktato, "Az Óra elindult, 30 másodpercig tart az óra.");
				Msg(playerid, "Kérem kövesd az oktatód a lõtérre.");
				SetTimerEx("Vizsgaido", 30000, false, "d", oktato);
				
				WeaponGiveWeapon(playerid, WEAPON_DEAGLE, 15);
				Autocp[playerid] = 30;
			}
			else if(Vizsgafajta[playerid] == 6)
			{
				Msg(playerid, "Az engedélyt megkaptad, jó horgászást.");
				Msg(oktato, "Az engedélyt megkapta.");
				PlayerInfo[playerid][pFishLic] = JOGSI_HORGASZ;
				Vizsgafajta[oktato] = 0;
				Vizsgafajta[playerid] = 0;
				FrakcioSzef(FRAKCIO_OKTATO,VizsgaAr[playerid], 10);
				VizsgaAr[playerid] = 0;
			}
			else if(Vizsgafajta[playerid] == 7)
			{
				Repulocp[playerid] = 2;
				SetPlayerCheckpoint(playerid,1486.9432,-2592.1277,13.5469,5);
				SetPlayerCheckpoint(oktato,1486.9432,-2592.1277,13.5469,5);
				TakingLesson[playerid] = 1;
			}
			else if(Vizsgafajta[playerid] == 8)
			{
				Adrcp[playerid] = 2;
				
				SetPlayerCheckpoint(playerid,1137.2505,-1408.8733,14.4980, 5);
				SetPlayerCheckpoint(oktato,1137.2505,-1408.8733,14.4980, 5);
				TakingLesson[playerid] = 1;
			}
			else if(Vizsgafajta[playerid] == 9)
			{
				
				Helicp[playerid] = 2;
				SetPlayerCheckpoint(playerid,1766.5104,-2285.9961,26.9697,5);
				SetPlayerCheckpoint(oktato,1766.5104,-2285.9961,26.9697,5);
				TakingLesson[playerid] = 1;
			}
			else if(Vizsgafajta[playerid] == 10)
			{
				Msg(playerid, "Az engedélyt megkaptad, jó vadászatot.");
				Msg(oktato, "Az engedélyt megkapta.");
				PlayerInfo[playerid][pVadaszEngedely] = 48;
				Vizsgafajta[oktato] = 0;
				Vizsgafajta[playerid] = 0;
			}
			else if(Vizsgafajta[playerid] == 11)
			{
				Msg(playerid, "A vizsga elkezdõdöt, kövesd az oktató utasításait.");
				Msg(oktato, "A vizsga elkezdõdött. Ha speciális engedélyt oda akarod addni: /jspecial");
				Vizsgafajta[oktato] = 0;
				Vizsgafajta[playerid] = 0;
			}
		}
		else
		{
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Oktató: Nem bírod kifizetni a vizsga díjat(%dFt), ezért az ajánlat érvénytelen.", VizsgaAr[playerid]);
			SendFormatMessage(VizsgaAjanlat[playerid], COLOR_LIGHTBLUE, "* Oktató: %s nem bírta kifizetni a vizsga díjat(%dFt), ezért az ajánlat érvénytelen.", PlayerName(playerid), VizsgaAr[playerid]);
			VizsgaAjanlat[playerid] = NINCS;
			VizsgaAr[playerid] = NINCS;
			Vizsgafajta[playerid] = 0;
			return 1;
		}
	}	
	if(dialogid == DIALOG_KALAKIT_MEGEROSIT)
	{
		if(!response)
	    {
			SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Jármû átalakítás visszavonva!");
			KocsiAlakitModel[playerid] = 0;
			KocsiAlakitID[playerid] = NINCS;
			return true;
	    }
	    if(KocsiAlakitModel[playerid] == 0 || KocsiAlakitID[playerid] == NINCS)
	        return true;
	        
		if(!BankkartyaFizet(playerid, KocsiAlakitAra[playerid]))
		{
			new info[512];
	  		format(info, sizeof(info),""#COL_FEHER"A választott jármû ára: "#COL_VKEK"%s "#COL_FEHER"Ft, neked nincs ennyi pénzed!\nHa bankszámláról szeretnél fizetni, használd a /bankkártya parancsot!",FormatNumber(KocsiAlakitAra[playerid], 0, ',' ));
			ShowPlayerDialog(playerid, DIALOG_MSGINFO, DIALOG_STYLE_MSGBOX, "Nincs ennyi pénzed!", info, "Rendben", "");
		 	return true;
		}
		else 
		{
			JarmuAlakitas( KocsiAlakitID[playerid], KocsiAlakitModel[playerid] );
			KocsiAlakitModel[playerid] = 0;
			KocsiAlakitID[playerid] = NINCS;
			SendClientMessage(playerid, COLOR_GREEN, "[Info]: Jármû sikeresen átalakítva!");
			PlayerInfo[playerid][pAlakitIdo] = UnixTime+604800;
			Cselekves(playerid, "lecserélte a jármûvét");
			if(PlayerInfo[playerid][pAjandek] == 1)
				PlayerInfo[playerid][pAjandek] = NINCS;
			return true;
		}	
	}
	if(dialogid == DIALOG_TEXTDRAW_COLOR)
	{
		if(!response)
			return SendClientMessage(playerid, COLOR_BROWN, "[Info] Textdraw szín módosítás visszavonva");
			
		new szin;
		switch(listitem)
		{
			case 0: { szin = TEXTDRAWBOX_COLOR_BLACK; PlayerInfo[playerid][pTextdrawszin] = 0; } 		// Fekete
			case 1: { szin = TEXTDRAWBOX_COLOR_WHITE; PlayerInfo[playerid][pTextdrawszin] = 1; }		// Fehér
			case 2: { szin = TEXTDRAWBOX_COLOR_LBLUE; PlayerInfo[playerid][pTextdrawszin] = 2; }		// Világoskék
			case 3: { szin = TEXTDRAWBOX_COLOR_DBLUE; PlayerInfo[playerid][pTextdrawszin] = 3; }		// Sötétkék
			case 4: { szin = TEXTDRAWBOX_COLOR_LGREEN; PlayerInfo[playerid][pTextdrawszin] = 4; } 		// Világoszöld
			case 5: { szin = TEXTDRAWBOX_COLOR_DGREEN; PlayerInfo[playerid][pTextdrawszin] = 5; }		// Sötétzöld
			case 6: { szin = TEXTDRAWBOX_COLOR_RED; PlayerInfo[playerid][pTextdrawszin] = 6; }			// Piros
			case 7: { szin = TEXTDRAWBOX_COLOR_YELLOW; PlayerInfo[playerid][pTextdrawszin] = 7; } 		// Sárga
			case 8: { szin = TEXTDRAWBOX_COLOR_PINK; PlayerInfo[playerid][pTextdrawszin] = 8; }			// Rózsaszín
			case 9: { szin = TEXTDRAWBOX_COLOR_TRANSPARENT; PlayerInfo[playerid][pTextdrawszin] = 9; } 	// Átlátszó
		}
		TextDrawHideForPlayer(playerid, InfoTextDraw[playerid]);
		TextDrawHideForPlayer(playerid, InfoTextDraw2[playerid]);
		TextDrawHideForPlayer(playerid, InfoTextDraw3[playerid]);
		TextDrawHideForPlayer(playerid, InfoTextDraw4[playerid]);
		TextDrawBoxColor(InfoTextDraw[playerid], szin);
		TextDrawBoxColor(InfoTextDraw2[playerid], szin);
		TextDrawBoxColor(InfoTextDraw3[playerid], szin);
		TextDrawBoxColor(InfoTextDraw4[playerid], szin);
		TextDrawShowForPlayer(playerid, InfoTextDraw[playerid]);
		TextDrawShowForPlayer(playerid, InfoTextDraw2[playerid]);
		TextDrawShowForPlayer(playerid, InfoTextDraw3[playerid]);
		TextDrawShowForPlayer(playerid, InfoTextDraw4[playerid]);
		SendClientMessage(playerid, szin, "Textdrawszín megváltoztatva!");
		return 1;
	}
	return 0;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{

	if(response == EDIT_RESPONSE_FINAL)
    {
		if(ObjectSzemuveg[playerid][OSzerkeszt])
		{
			ObjectSzemuveg[playerid][OPosX] = fOffsetX;
			ObjectSzemuveg[playerid][OPosY] = fOffsetY;
			ObjectSzemuveg[playerid][OPosZ] = fOffsetZ;
			ObjectSzemuveg[playerid][OPosRX] = fRotX;
			ObjectSzemuveg[playerid][OPosRY] = fRotY;
			ObjectSzemuveg[playerid][OPosRZ] = fRotZ;
			
			
			ObjectSzemuveg[playerid][OSzerkeszt] = false;
			Msg(playerid,"Szemüveg igazítva!");
			SendFormatMessage(playerid,COLOR_YELLOW,"[x: %.3f y: %.3f z: %.3f rx: %.3f ry: %.3f rz: %.3f]",ObjectSzemuveg[playerid][OPosX],ObjectSzemuveg[playerid][OPosY],ObjectSzemuveg[playerid][OPosZ],ObjectSzemuveg[playerid][OPosRX],ObjectSzemuveg[playerid][OPosRY],ObjectSzemuveg[playerid][OPosRZ]);
			Szemuveg(playerid);
			
			
			
			return true;
		}
	
	}
	if(response == EDIT_RESPONSE_CANCEL)
	{
		if(ObjectSzemuveg[playerid][OSzerkeszt])
		{

			ObjectSzemuveg[playerid][OSzerkeszt] = false;
			return true;
		}
	
	}


	return true;
}

// figyelem! ez egy hook, ami az EditDynamicObject(playerid, objectid) meghívásakor hívódik meg! nem akkor, amikor szerkesztik az objectet! (az az OnPlayerEditDynamicObject())
fpublic OnEditDynamicObject(playerid, objectid)
{
	GetPlayerPos(playerid, ArrExt(PlayerEditObjectPos[playerid]));
}

fpublic OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	// bugkihasználás ellen (ha messze mész, egy random objectet fog lerakni)
	if(response != EDIT_RESPONSE_CANCEL && GetPlayerDistanceFromPoint(playerid, ArrExt(PlayerEditObjectPos[playerid])) > 10.0)
	{
		CancelDynamicEdit(playerid, objectid);
		return 1;
	}

	Log("Debug", TFormatInline("OnPlayerEditDynamicObject() - [%d]%s - %d - %d - %.1f,%.1f,%.1f - %.1f,%.1f,%.1f", playerid, PlayerName(playerid), objectid, response, x, y, z, rx, ry, rz));
	
	if(response == EDIT_RESPONSE_UPDATE)
	{
		if(SzerkesztGraffiti[playerid] != NINCS)
		{
			if(GetPlayerDistanceFromPoint(playerid, x, y, z) > 10.0)
				return SendClientMessage(playerid, COLOR_BLUE, "Graffiti: Ne vidd ilyen messzire!!!");
		}
	}
	
	if(response == EDIT_RESPONSE_FINAL)
	{
		if(SzerkesztGraffiti[playerid] != NINCS)
		{
			new id = SzerkesztGraffiti[playerid];
			//SzerkesztGraffiti[playerid] = NINCS;
			if(GetPlayerDistanceFromPoint(playerid, x, y, z) > 8.0)
			{
				SzerkesztGraffiti[playerid] = NINCS;
				DestroyDynamicObject(Graffiti[id][gObject]);
				Graffiti[id][gVan] = false;
				Graffiti[id][gVId] = 0;
				SendClientMessage(playerid, COLOR_BLUE, "Graffiti: Túl messzire vitted! ( Törölve )");
				return 1;
			}

			Graffiti[id][gPosX] = x;
			Graffiti[id][gPosY] = y;
			Graffiti[id][gPosZ] = z;
			Graffiti[id][gPosRX] = rx;
			Graffiti[id][gPosRY] = ry;
			Graffiti[id][gPosRZ] = rz;
			
			SetDynamicObjectPos(Graffiti[id][gObject], x, y, z);
			SetDynamicObjectRot(Graffiti[id][gObject], rx, ry, rz);
			
			MunkaTimerID[playerid]=SetTimerEx("Munkavege", 3000, false, "dd", playerid, M_GRAFFITI);
			TogglePlayerControllable(playerid, false);
			ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);
			
			return 1;
		}
		if(AdminGraffiti[playerid] != NINCS)
		{
			new id = AdminGraffiti[playerid];
			
			Graffiti[id][gPosX] = x;
			Graffiti[id][gPosY] = y;
			Graffiti[id][gPosZ] = z;
			Graffiti[id][gPosRX] = rx;
			Graffiti[id][gPosRY] = ry;
			Graffiti[id][gPosRZ] = rz;
			
			SetDynamicObjectPos(Graffiti[id][gObject], x, y, z);
			SetDynamicObjectRot(Graffiti[id][gObject], rx, ry, rz);

			INI_Save(INI_TYPE_GRAFFITI, id);
			new szoveg[128];
			format(szoveg, sizeof(szoveg), "<< Graffiti: %s szerkesztett egy Graffitit! ID: %d Szöveg: %s >>", PlayerName(playerid), Graffiti[id][gId], Graffiti[id][gSzoveg]);
			ABroadCast(COLOR_LIGHTRED, szoveg, 1);
			
			AdminGraffiti[playerid] = NINCS;
			
			return 1;
		}
		if(ObjectSzerkeszt[playerid] != NINCS)
		{
			new id = ObjectSzerkeszt[playerid];
		
			OBJECT[id][sPosX] = x;
			OBJECT[id][sPosY] = y;
			OBJECT[id][sPosZ] = z;
			OBJECT[id][sPosZX] = rx;
			OBJECT[id][sPosZY] = ry;
			OBJECT[id][sPosA] = rz;
		
			SetDynamicObjectPos(OBJECT[id][sObjectID], OBJECT[id][sPosX],OBJECT[id][sPosY],OBJECT[id][sPosZ]);
			SetDynamicObjectRot(OBJECT[id][sObjectID], OBJECT[id][sPosZX],OBJECT[id][sPosZY],OBJECT[id][sPosA]);
			
			ObjectSzerkeszt[playerid] = NINCS;
			INI_Save(INI_TYPE_OBJECT, id);
			SendFormatMessage(playerid,  COLOR_LIGHTGREEN, "* OBJECT(ID: %d |Típ.: %d |X: %.2f |Y: %.2f |Z: %.2f |rx: %.2f |ry: %.2f |A: %.2f |VW: %d |INT: %d)",id, OBJECT[id][sTipus], OBJECT[id][sPosX], OBJECT[id][sPosY], OBJECT[id][sPosZ], OBJECT[id][sPosZX], OBJECT[id][sPosZY],OBJECT[id][sPosA], OBJECT[id][sVw],OBJECT[id][sInt]);
			
			return true;
		}
	    if(KapuID[playerid] != NINCS)
	    {
	        switch(SzerkesztesAllas[playerid])
		    {
				case 1:
				{
					Kapu[KapuID[playerid]][kZPos][0] = x;
					Kapu[KapuID[playerid]][kZPos][1] = y;
					Kapu[KapuID[playerid]][kZPos][2] = z;
					
					Kapu[KapuID[playerid]][kZRPos][0] = rx;
					Kapu[KapuID[playerid]][kZRPos][1] = ry;
					Kapu[KapuID[playerid]][kZRPos][2] = rz;
					
					SzerkesztesAllas[playerid] = 2;
					
					EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);
					
					SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Zárt pozíció sikeresen elmentve!");
					SendClientMessage(playerid, COLOR_GREEN, "[Info]: Most kérlek állítsd be és mentsd el a kapu nyitott állapotát!");
				    return true;
				}
				case 2:
				{
				    Kapu[KapuID[playerid]][kNPos][0] = x;
					Kapu[KapuID[playerid]][kNPos][1] = y;
					Kapu[KapuID[playerid]][kNPos][2] = z;

					Kapu[KapuID[playerid]][kNRPos][0] = rx;
					Kapu[KapuID[playerid]][kNRPos][1] = ry;
					Kapu[KapuID[playerid]][kNRPos][2] = rz;
					Kapu[KapuID[playerid]][kMozgo] = true;
					Kapu[KapuID[playerid]][kSzerkeszt] = false;
					
					new querycske[2048], hasznalocska[128], i = -1, numero = GetHasznaloNum(KapuID[playerid]);
					for(;++i < MAX_KAPU_HASZNALO;)
					{
					    if(Kapu[KapuID[playerid]][kHasznalo][i] > 0)
					    {
							format(hasznalocska, sizeof(hasznalocska), "%s%d%s", hasznalocska, Kapu[KapuID[playerid]][kHasznalo][i], (numero > i + 1 ? (",") : ("")));
					    }
					}
					
					format(querycske, sizeof(querycske), "INSERT INTO `"#SQL_DB_Kapu"`(Nev, Model, Tav, Speed, Pos, NPos, NRPos, ZPos, ZRPos, Hasznalo, nyit, Vw, Kod)");
					format(querycske, sizeof(querycske), "%s VALUES(", querycske);
					format(querycske, sizeof(querycske), "%s'%s', '%d',", querycske, Kapu[KapuID[playerid]][kNev], Kapu[KapuID[playerid]][kModel]);
					format(querycske, sizeof(querycske), "%s'%f', '3',", querycske, Kapu[KapuID[playerid]][kTav]);
					format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2]);
					format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, Kapu[KapuID[playerid]][kNPos][0], Kapu[KapuID[playerid]][kNPos][1], Kapu[KapuID[playerid]][kNPos][2]);
					format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, Kapu[KapuID[playerid]][kNRPos][0], Kapu[KapuID[playerid]][kNRPos][1], Kapu[KapuID[playerid]][kNRPos][2]);
					format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2]);
					format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2]);
					format(querycske, sizeof(querycske), "%s'%s','%d','%d',", querycske, (strlen(hasznalocska) > 0 ? hasznalocska : ("0")), Kapu[KapuID[playerid]][nyit], GetPlayerVirtualWorld(playerid));
					format(querycske, sizeof(querycske), "%s'%d')", querycske, Kapu[KapuID[playerid]][kKod]);
					doQuery(querycske);
					doQuery("SELECT last_insert_id()", SQL_KAPU_IDTOLTES, KapuID[playerid]);
					
					if(Kapu[KapuID[playerid]][kKod] > -1)
						ABroadCastFormat(COLOR_LIGHTRED, 1, "<< Admin %s létrehozott egy kaput! Obj: %d | Kód: %d | Folyamat: EDO >>", AdminName(playerid), Kapu[KapuID[playerid]][kModel], Kapu[KapuID[playerid]][kKod]);
					else
					    ABroadCastFormat(COLOR_LIGHTRED, 1, "<< Admin %s létrehozott egy kaput! Obj: %d | Fk: %s | Folyamat: EDO >>", AdminName(playerid), Kapu[KapuID[playerid]][kModel], hasznalocska);
					    
                    SendClientMessage(playerid, COLOR_GREEN, "[Info]: Kapu zárt és nyitott állapota sikeresen elmentve!");
					SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2]);
					SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2]);
					
					SzerkesztesAllas[playerid] = NINCS;
					KapuID[playerid] = NINCS;
				    return true;
				}
				case 3:
				{
					Kapu[KapuID[playerid]][kZPos][0] = x;
					Kapu[KapuID[playerid]][kZPos][1] = y;
					Kapu[KapuID[playerid]][kZPos][2] = z;
					
					Kapu[KapuID[playerid]][kZRPos][0] = rx;
					Kapu[KapuID[playerid]][kZRPos][1] = ry;
					Kapu[KapuID[playerid]][kZRPos][2] = rz;
					
					Kapu[KapuID[playerid]][kSzerkeszt] = false;
					
					new querycske[256];
					format(querycske, sizeof(querycske), "UPDATE `"#SQL_DB_Kapu"` SET ZPos = '%f,%f,%f', ZRPos = '%f,%f,%f' WHERE ID = '%d'", Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2], Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2], Kapu[KapuID[playerid]][kUID]);
					doQuery(querycske);
					
					KapuID[playerid] = NINCS;
					SendClientMessage(playerid, COLOR_GREEN, "[Info]: Kapu zárt állapota sikeresen frissítve!");
				    return true;
				}
				case 4:
				{
				    Kapu[KapuID[playerid]][kNPos][0] = x;
					Kapu[KapuID[playerid]][kNPos][1] = y;
					Kapu[KapuID[playerid]][kNPos][2] = z;

					Kapu[KapuID[playerid]][kNRPos][0] = rx;
					Kapu[KapuID[playerid]][kNRPos][1] = ry;
					Kapu[KapuID[playerid]][kNRPos][2] = rz;
					
					Kapu[KapuID[playerid]][kSzerkeszt] = false;

					new querycske[256];
					format(querycske, sizeof(querycske), "UPDATE `"#SQL_DB_Kapu"` SET NPos = '%f,%f,%f', NRPos = '%f,%f,%f' WHERE ID = '%d'", Kapu[KapuID[playerid]][kNPos][0], Kapu[KapuID[playerid]][kNPos][1], Kapu[KapuID[playerid]][kNPos][2], Kapu[KapuID[playerid]][kNRPos][0], Kapu[KapuID[playerid]][kNRPos][1], Kapu[KapuID[playerid]][kNRPos][2], Kapu[KapuID[playerid]][kUID]);
					doQuery(querycske);
					
					SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2]);
					SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2]);
					
					KapuID[playerid] = NINCS;
					SendClientMessage(playerid, COLOR_GREEN, "[Info]: Kapu nyitott állapota sikeresen frissítve!");
				    return true;
				}
		    }
		}
		
		new querycske[1024],formatalunk[512],
		kategoria[48],penz,nev[48],
		butorszam = ButorObjectID(objectid);

		if(!ButorInfo[butorszam][butorMegveve])
		{
			switch(ButorInfo[butorszam][butorTipus])
			{
				case 1:
				{
					kategoria = "Asztal";
					penz = Butor_Asztal[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Asztal[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 2:
				{
					kategoria = "Ülõgarnitúra";
					penz = Butor_Ulogarnitura[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Ulogarnitura[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 3:
				{
					kategoria = "Festmények, képek";
					penz = Butor_Kepek[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Kepek[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 4:
				{
					kategoria = "Lámpák";
					penz = Butor_Lampak[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Lampak[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 5:
				{
					kategoria = "TV-k";
					penz = Butor_TV[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_TV[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 6:
				{
					kategoria = "DVD-k, HiFi-k";
					penz = Butor_DVDHiFi[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_DVDHiFi[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 7:
				{
					kategoria = "Hangfal";
					penz = Butor_Hangfal[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Hangfal[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 8:
				{
					kategoria = "Szekrény";
					penz = Butor_Szekreny[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Szekreny[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 9:
				{
					kategoria = "Fotel";
					penz = Butor_Fotel[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Fotel[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 10:
				{
					kategoria = "Konyhabútor";
					penz = Butor_Konyhabutor[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Konyhabutor[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 11:
				{
					kategoria = "Hûtõ";
					penz = Butor_Huto[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Huto[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 12:
				{
					kategoria = "Számítógép";
					penz = Butor_Szamitogep[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Szamitogep[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 13:
				{
					kategoria = "Ajtó";
					penz = Butor_Ajto[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Ajto[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 14:
				{
					kategoria = "Mosógép";
					penz = Butor_Mosogep[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Mosogep[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 15:
				{
					kategoria = "Nyomtató";
					penz = Butor_Nyomtato[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Nyomtato[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 16:
				{
					kategoria = "Ágy";
					penz = Butor_Agy[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Agy[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 17:
				{
					kategoria = "WC";
					penz = Butor_WC[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_WC[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 18:
				{
					kategoria = "Zuhanyzó";
					penz = Butor_Zuhanyzo[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Zuhanyzo[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 19:
				{
					kategoria = "Mosdó";
					penz = Butor_Mosdo[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Mosdo[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 20:
				{
					kategoria = "Szõnyeg";
					penz = Butor_Szonyeg[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Szonyeg[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 21:
				{
					kategoria = "Szék";
					penz = Butor_Szek[ButorInfo[butorszam][butorListitem]][butorNEV];
					format(nev, sizeof(nev), Butor_Szek[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 22:
				{
					kategoria = "Íróasztal";
					penz = Butor_Iroasztal[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Iroasztal[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 23:
				{
					kategoria = "Fal";
					penz = Butor_Fal[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Fal[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 24:
				{
					kategoria = "Virág";
					penz = Butor_Virag[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Virag[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 25:
				{
					kategoria = "Egyéb";
					penz = Butor_Egyeb[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Egyeb[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
			}
			
			ButorInfo[butorszam][butorPosX] = x;
			ButorInfo[butorszam][butorPosY] = y;
			ButorInfo[butorszam][butorPosZ] = z;
			ButorInfo[butorszam][butorPosRX] = rx;
			ButorInfo[butorszam][butorPosRY] = ry;
			ButorInfo[butorszam][butorPosRZ] = rz;

			SzerkesztesButor[playerid] = butorszam;
			format(formatalunk, sizeof(formatalunk), #COL_FEHER"Biztos, hogy meg akarod venni a következõ bútort?\n\n\n"#COL_VKEK"Bútor kategóriája: "#COL_FEHER"%s\n"#COL_VKEK"Bútor neve: "#COL_FEHER"%s\n"#COL_VKEK"Bútor ára: "#COL_FEHER"%dFt", kategoria, nev, penz);
			ShowPlayerDialog(playerid, DIALOG_BUTOR_MEGVETEL, DIALOG_STYLE_MSGBOX, #COL_FEHER"Bútor "#COL_VKEK"megvétele", formatalunk, "Biztos!", "Mégse!");
			return true;
		}
		format(querycske, sizeof(querycske), "UPDATE `butorok` SET butorPosX = '%.2f', butorPosY = '%.2f', butorPosZ = '%.2f', butorPosRX = '%.2f', butorPosRY = '%.2f', butorPosRZ = '%.2f' WHERE id = '%d'", x, y, z, rx, ry, rz, butorszam);
		doQuery(querycske);

		SendClientMessage(playerid, COLOR_GREEN, "[Info]: Sikeresen elmentetted a bútort!");
	}

	if(response == EDIT_RESPONSE_CANCEL)
	{
		if(SzerkesztGraffiti[playerid] != NINCS)
		{
			Graffiti[SzerkesztGraffiti[playerid]][gVan] = false;
			DestroyDynamicObject(Graffiti[SzerkesztGraffiti[playerid]][gObject]);
			SzerkesztGraffiti[playerid] = NINCS;
		}
		if(AdminGraffiti[playerid] != NINCS)
		{
			new id = AdminGraffiti[playerid];
			
			SetDynamicObjectPos(Graffiti[id][gObject], Graffiti[id][gPosX], Graffiti[id][gPosY], Graffiti[id][gPosZ]);
			SetDynamicObjectRot(Graffiti[id][gObject], Graffiti[id][gPosRX], Graffiti[id][gPosRY], Graffiti[id][gPosRZ]);
		
			AdminGraffiti[playerid] = NINCS;
		}
		if(ObjectSzerkeszt[playerid] != NINCS)
		{
			INI_Save(INI_TYPE_OBJECT, ObjectSzerkeszt[playerid]);
			ObjectSzerkeszt[playerid] = NINCS;
		}
	    if(KapuID[playerid] != NINCS)
	    {
		    if((SzerkesztesAllas[playerid] == 1 || SzerkesztesAllas[playerid] == 2))
		    {
	            Kapu[KapuID[playerid]][kVan] = false;
	            Kapu[KapuID[playerid]][kSzerkeszt] = false;
				Kapu[KapuID[playerid]][kUID] = NINCS;
				Kapu[KapuID[playerid]][kModel] = 0;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kSpeed] = 0.0;
				Kapu[KapuID[playerid]][kPos][0] = 0.0;
				Kapu[KapuID[playerid]][kPos][1] = 0.0;
				Kapu[KapuID[playerid]][kPos][2] = 0.0;
				Kapu[KapuID[playerid]][kNPos][0] = 0.0;
				Kapu[KapuID[playerid]][kNPos][1] = 0.0;
				Kapu[KapuID[playerid]][kNPos][2] = 0.0;
				Kapu[KapuID[playerid]][kNRPos][0] = 0.0;
				Kapu[KapuID[playerid]][kNRPos][1] = 0.0;
				Kapu[KapuID[playerid]][kNRPos][2] = 0.0;
				Kapu[KapuID[playerid]][kZPos][0] = 0.0;
				Kapu[KapuID[playerid]][kZPos][1] = 0.0;
				Kapu[KapuID[playerid]][kZPos][2] = 0.0;
				Kapu[KapuID[playerid]][kZRPos][0] = 0.0;
				Kapu[KapuID[playerid]][kZRPos][1] = 0.0;
				Kapu[KapuID[playerid]][kZRPos][2] = 0.0;
				Kapu[KapuID[playerid]][kBarki] = false;
				Kapu[KapuID[playerid]][kMozgo] = false;
				Kapu[KapuID[playerid]][nyit] = 0;
				Kapu[KapuID[playerid]][Vw] = NINCS;
				if(IsValidDynamicObject(Kapu[KapuID[playerid]][kOID])) DestroyDynamicObject(Kapu[KapuID[playerid]][kOID]), Kapu[KapuID[playerid]][kOID]=INVALID_OBJECT_ID;
				SzerkesztesAllas[playerid] = 0;
				KapuID[playerid] = NINCS;
				SendClientMessage(playerid, COLOR_GREEN, "[Info]: Kiléptél a szerkesztési folyamatból, kapu sikeresen törölve!");
		        return true;
			}
			if(SzerkesztesAllas[playerid] == 4)
			{
		        SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2]);
				SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2]);
                Kapu[KapuID[playerid]][kSzerkeszt] = false;
				SzerkesztesAllas[playerid] = 0;
				KapuID[playerid] = NINCS;
				SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Kapu szerkesztése befejezve és visszaállítva az eredeti zárt állapotára!");
		        return false;
			}
		}
		new butorszam = ButorObjectID(objectid);
		if(ButorInfo[butorszam][butorMegveve])
		{
			SetDynamicObjectPos(ButorInfo[butorszam][butorObject], ButorInfo[butorszam][butorPosX], ButorInfo[butorszam][butorPosY], ButorInfo[butorszam][butorPosZ]);
			SetDynamicObjectRot(ButorInfo[butorszam][butorObject], ButorInfo[butorszam][butorPosRX], ButorInfo[butorszam][butorPosRY], ButorInfo[butorszam][butorPosRZ]);
		} else {
			ButorInfo[butorszam][butorPosX] = 0.0;
			ButorInfo[butorszam][butorPosY] = 0.0;
			ButorInfo[butorszam][butorPosZ] = 0.0;
			ButorInfo[butorszam][butorPosRX] = 0.0;
			ButorInfo[butorszam][butorPosRY] = 0.0;
			ButorInfo[butorszam][butorPosRZ] = 0.0;
			ButorInfo[butorszam][butorVW] = 0;
			ButorInfo[butorszam][butorInterior] = 0;
			ButorInfo[butorszam][butorHasznalva] = false;
			ButorInfo[butorszam][butorMegveve] = false;
			ButorInfo[butorszam][butorTipus] = NINCS;
			ButorInfo[butorszam][butorListitem] = NINCS;
			ButorInfo[butorszam][butorModel] = 0;
			ButorInfo[butorszam][butorPosRX] = 0.0;
			ButorInfo[butorszam][butorPosRY] = 0.0;
			ButorInfo[butorszam][butorPosRZ] = 0.0;
			if(IsValidDynamicObject(ButorInfo[butorszam][butorObject])) DestroyDynamicObject(ButorInfo[butorszam][butorObject]),ButorInfo[butorszam][butorObject]=INVALID_OBJECT_ID;
		}
	}
	
	MoveDynamicObject(objectid, x, y, z, 10.0, rx, ry, rz);
	return true;
}

fpublic OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	new butorid = ButorObjectID(objectid);
	if(butorid == NINCS)
	{
	    if(!SAdmin(playerid, 3) && ObjectIDje[playerid][2] == 0)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "[Hiba]: Drágá tezsvírem ne vidd el a tartó gerendát!");
			
        ObjectIDje[playerid][0] = objectid;
        ObjectIDje[playerid][1] = modelid;
        
        if(ObjectIDje[playerid][2] == 2)
			ShowPlayerDialog(playerid, DIALOG_OBJECT_TORLES, DIALOG_STYLE_INPUT, "Adatok mentése", "Add meg a menteni kívánt object nevét", "Mentés", "Mégse");
		else
		{
		    new formatasd[256], Float:objectposok[3];
		    GetDynamicObjectPos(ObjectIDje[playerid][0], ArrExt(objectposok));
		    format(formatasd, sizeof(formatasd), ""#COL_FEHER"=== [ Kiválasztott object adatai ] ===\nObject ID: "#COL_VKEK"%d"#COL_FEHER"\nPozíció: X: "#COL_VKEK"%f"#COL_FEHER" Y: "#COL_VKEK"%f"#COL_FEHER" Z: "#COL_VKEK"%f", ObjectIDje[playerid][1], ArrExt(objectposok));
		    ShowPlayerDialog(playerid, DIALOG_MSGINFO, DIALOG_STYLE_MSGBOX, "Adatok", formatasd, "Rendben", "");

		    ObjectIDje[playerid][0] = -1;
			ObjectIDje[playerid][1] = -1;
			ObjectIDje[playerid][2] = 0;
		} 
		return true;
 	}

	SzerkesztesButor[playerid] = butorid;
	ShowPlayerDialog(playerid, DIALOG_BUTOR_SZERKESZTES, DIALOG_STYLE_LIST, #COL_FEHER"Bútor "#COL_VKEK"szerkesztés", "Bútor mozgatása\nBútor törlése", "Mehet!", "Mégse!");

	CancelEdit(playerid);
	return true;
}

//-------------------------------------------------------------------------------------------------------

stock InChannel(playerid, view = false)
{
	if(view)
		return PlayerInfo[playerid][pViewReportChannel];
	else
		return PlayerInfo[playerid][pReportChannel];
}

stock Channel(playerid, channel = NINCS, view = false) // Berakja õt a channelre
{
	new ori;
	if(view)
	{
		ori = PlayerInfo[playerid][pViewReportChannel];
		PlayerInfo[playerid][pViewReportChannel] = channel;
		
		if(ori != NINCS)
		{
			if(ori == 555)
			{
				if(Admin(playerid, 1))
					for(new x = 0; x < MAX_CHANNEL; x++) ReportChannel[x][rAdmins]--;
				else
					for(new x = 0; x < MAX_CHANNEL; x++) ReportChannel[x][rAdminHelpers]--;
			}
			else
			{
				if(Admin(playerid, 1))
					ReportChannel[ori][rAdmins]--;
				else
					ReportChannel[ori][rAdminHelpers]--;
			}
		}
		if(channel != NINCS)
		{
			if(channel == 555)
			{
				if(Admin(playerid, 1))
					for(new x = 0; x < MAX_CHANNEL; x++) ReportChannel[x][rAdmins]++;
				else
					for(new x = 0; x < MAX_CHANNEL; x++) ReportChannel[x][rAdminHelpers]++;
			}
			else
			{
				if(Admin(playerid, 1))
					ReportChannel[channel][rAdmins]++;
				else
					ReportChannel[channel][rAdminHelpers]++;
			}
		}
	}
	else
	{
		ori = PlayerInfo[playerid][pReportChannel];
		PlayerInfo[playerid][pReportChannel] = channel;
		
		if(ori != NINCS)
			ReportChannel[ori][rPlayers]--;
		if(channel != NINCS)
		{
			ReportChannel[channel][rPlayers]++;
			TudReportolni[playerid] = 0;
		}
	}
	if(view && ori != NINCS)
	{
		if(ori != 555)
		{
			if(ReportChannel[ori][rAdmins] > 0 || ReportChannel[ori][rAdminHelpers] > 0) return 1;
			
			for(new x = 0; x < MAX_PLAYERS; x++)
			{
				if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
				if(PlayerInfo[x][pReportChannel] == ori)
				{
					Msg(x, "Ki lettél rúgva a channelrõl, mivel már nincs rajta se admin, se adminsegéd");
					PlayerInfo[x][pReportChannel] = NINCS;
					ReportChannel[ori][rPlayers]--;
				}
			}
		}
		else
		{
			for(new c = 0; c < MAX_CHANNEL; c++)
			{
				if(ReportChannel[c][rAdmins] > 0 || ReportChannel[c][rAdminHelpers] > 0) continue;
				
				for(new x = 0; x < MAX_PLAYERS; x++)
				{
					if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
					if(PlayerInfo[x][pReportChannel] == c)
					{
						Msg(x, "Ki lettél rúgva a channelrõl, mivel már nincs rajta se admin, se adminsegéd");
						PlayerInfo[x][pReportChannel] = NINCS;
						ReportChannel[c][rPlayers]--;
					}
				}
			}
		}
	}
	return 1;
}

stock FelsegitesMentesHely(p)
{
	new tav=60;
	if(GetPlayerVirtualWorld(p) == 1555)
		return 1;
	else if(PlayerToPoint(tav, p, 1461.7855,-1022.2781,23.8281) ||
		PlayerToPoint(tav, p, -1984.8756,523.3704,35.1719) ||
		PlayerToPoint(tav, p, -1944.0037,566.0212,35.2341) ||
		PlayerToPoint(tav, p, -1964.1956,521.9789,202.2833)) 
		return 1;
	else
		return 0;

}

stock SzerverRestartMentes()
{
	SendMessage(SEND_MESSAGE_ADMIN,"Szerver adatok mentése elkezdve!",COLOR_LIGHTRED,1337);
	PlayerSave();
	
	UpdatePerSec[uHaz] = 50;
	UpdatePerSec[uGarazs] = 50;
	UpdatePerSec[uKocsi] = 50;
	UpdatePerSec[uBiz] = 50;
	UpdatePerSec[uTerulet] =50;

	MySQLUpdater();
	ResiVan[0] = true;

	FrakcioKocsiMentes();
	MunkaKocsiMentes();
	/*Ez nem kell akkor elmenti mikor lerakod törlöd
	for(new t=0; t < MAX_OBJECTSZ; t++)
	{
		INI_Save(INI_TYPE_OBJECT, t);	
	}*/
	for(new t = 0; t < MAX_TELEFON; t++)
	{
		INI_Save(INI_TYPE_TELEFONDATA, t);
	}
	for(new t=0; t < MAX_FRAKCIO; t++)
	{
		INI_Save(INI_TYPE_FRAKCIO, t);	
		
		if(t)
			INI_SAVE_FrakcioAdat(t);
	}
	for(new t=0; t < MAX_POLICE_CLASS; t++)
	{
		INI_Save(INI_TYPE_ALFRAKCIO_POLICE, t);
	}
	for(new b = 0; b < MAX_BENZINKUT; b++)
	{
		INI_Save(INI_TYPE_KUTDATA, b);
	}
	for(new h = 0; h < MAXVSKOCSI; h++)
	{
		if(CarInfo[h][Van] == 1 && CarInfo[h][cId])
		{
			SaveCarTrunk(CarInfo[h][cId]);
			SaveCarParts(CarInfo[h][cId]);
		}
	}
	
	SaveGPS();
	SaveWar();
	SaveWifi();

	SendMessage(SEND_MESSAGE_ADMIN,"Szerver mentés befejezve!",COLOR_LIGHTRED,1337);	
	
}
//ebbe a fálj mentéek legyenek!
stock SzerverAdatMentes()
{
	SendMessage(SEND_MESSAGE_ADMIN,"Szerver adatok mentése elkezdve!",COLOR_LIGHTRED,5555);
	
	FrakcioKocsiMentes();
	MunkaKocsiMentes();
	
	for(new t = 0; t < MAX_TELEFON; t++)
	{
		INI_Save(INI_TYPE_TELEFONDATA, t);
	}
	for(new t=0; t < MAX_FRAKCIO; t++)
	{
		INI_Save(INI_TYPE_FRAKCIO, t);	
		
		if(t)
			INI_SAVE_FrakcioAdat(t);
	}
	for(new t=0; t < MAX_POLICE_CLASS; t++)
	{
		INI_Save(INI_TYPE_ALFRAKCIO_POLICE, t);
	}
	for(new b = 0; b < MAX_BENZINKUT; b++)
	{
		INI_Save(INI_TYPE_KUTDATA, b);
	}
	for(new h = 0; h < MAXVSKOCSI; h++)
	{
		if(CarInfo[h][Van] == 1 && CarInfo[h][cId])
		{
			SaveCarTrunk(CarInfo[h][cId]);
			SaveCarParts(CarInfo[h][cId]);
		}
	}


	SendMessage(SEND_MESSAGE_ADMIN,"Szerver mentés befejezve!",COLOR_LIGHTRED,5555);	
	
}

stock ReportUzenet(playerid, uzenet[], admin = false, osszeschannel = false, channel = NINCS) // Reportolás
{
	if(channel == NINCS)
	{
		if(Admin(playerid, 1) || IsAS(playerid))
			channel = PlayerInfo[playerid][pViewReportChannel];
		else
			channel = PlayerInfo[playerid][pReportChannel];
	}
	if(!osszeschannel)
	{
		
		foreach(Jatekosok, x)
		{
			if(PlayerInfo[x][pViewReportChannel] == channel || PlayerInfo[x][pViewReportChannel] == 555 || admin && PlayerInfo[x][pReportChannel] == channel || ReportChannel[channel][rSeeing] && PlayerInfo[x][pReportChannel] == channel || playerid == x)
			{
				if(!admin)
				{
					if(playerid != x)
						SendFormatMessage(x, COLOR_YELLOW2, "[Channel %d][%d][#%d]%s[%d]: %s", channel, playerid, PlayerInfo[playerid][pBID], PlayerName(playerid),PlayerInfo[playerid][pLevel], uzenet);
				}
				else
				{
					if(Admin(playerid, 1))
						SendFormatMessage(x, COLOR_LIGHTGREEN, "[Channel %d]Admin %s: %s", channel, PlayerName(playerid), uzenet);
					else
						SendFormatMessage(x, COLOR_LIGHTGREEN, "[Channel %d]Adminsegéd %s: %s", channel, PlayerName(playerid), uzenet);
				}
			}
		}
	}
	else
	{
		foreach(Jatekosok, x)
		{
			if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
			if(PlayerInfo[x][pViewReportChannel] != NINCS || PlayerInfo[x][pReportChannel] != NINCS)
			{
				if(!admin)
					SendFormatMessage(x, COLOR_YELLOW2, "[Összes Channelen]%s: %s", PlayerName(playerid), uzenet);
				else
				{
					if(Admin(playerid, 1))
						SendFormatMessage(x, COLOR_LIGHTGREEN, "[Összes Channelen]Admin %s: %s", PlayerName(playerid), uzenet);
					else
						SendFormatMessage(x, COLOR_LIGHTGREEN, "[Összes Channelen]Adminsegéd %s: %s", PlayerName(playerid), uzenet);
				}
			}
		}
	}
}

stock FloatOsztas(szam1, szam2, IntegerEredmeny = false)
{
	new Float:eredmeny, Float:sz1, Float:sz2;
	eredmeny = float(szam1) / float(szam2);
	
	if(IntegerEredmeny)
		return floatround(eredmeny);
	else
		return eredmeny;
}

stock HibasJelszo(playerid)
{
	new string[128];
	HibasBelepes[playerid]++;
	if(HibasBelepes[playerid] == 2)
	{
		Msg(playerid, "Többszöri hibás belépési kísérlet miatt bannolva lettél a szerverrõl pár percre!");
		format(string, sizeof(string), "[!!FIGYELMEZTETÉS!!]: %s kilett bannolva a rendszer által, oka: Hibás jelszó!", PlayerName(playerid)); BanLog(string);
		ABroadCast(COLOR_LIGHTRED, string, 1);
		SeeBan(playerid, (UnixTime + 600), NINCS, "Hibás jelszó", true);
		//TKick( playerid );
		return 1;
	}
	format(string, sizeof(string), "Hibás jelszó.\nKérlek írd be újra.");
	ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_INPUT, "Bejelentkezés", string, "Belépés","Mégse");
	
	return 1;
}

stock SetPInt(jatekos, adatmezo[], ertek)
{
	SetPVarInt(jatekos, adatmezo, ertek);
}
stock SetPFloat(jatekos, adatmezo[], Float:ertek)
{
	SetPVarFloat(jatekos, adatmezo, ertek);
}
stock SetPString(jatekos, adatmezo[], ertek[])
{
	SetPVarString(jatekos, adatmezo, ertek);
}
stock GetPInt(jatekos, adatmezo[])
{
	return GetPVarInt(jatekos, adatmezo);
}
stock GetPFloat(jatekos, adatmezo[])
{
	return GetPVarFloat(jatekos, adatmezo);
}
stock DelVar(jatekos, adatmezo[])
{
	DeletePVar(jatekos, adatmezo);
}

stock GetGunSlot(fegyo)
{
	if(fegyo < 0 || fegyo >= sizeof(aWeaponSlotok))
		return 0;
	return aWeaponSlotok[fegyo];
}

stock GetGunName(id)
{
	new nev[30];
	if(id < 0 || id >= sizeof(aWeaponNames))
		nev = "Nincs";
	else
		strmid(nev, aWeaponNames[id], 0, strlen(aWeaponNames[id]));
		
	return nev;	
}

stock GetGunID(string[])
{
	new fegyo;
	for(new x = 0; x < sizeof(aWeaponNames); x++)
	{
		if(egyezik(string, aWeaponNames[x]))
		{
			fegyo = x;
			break;
		}
	}
	
	return fegyo;
}

stock IsTrailer(kocsi)
{
	switch(GetVehicleModel(kocsi))
	{
		case 435, 450, 591, 606, 607, 608, 610, 611:
			return 1;
	}

	return 0;
}

stock TrailerAttached(trailer)
{
	new csatolva = NINCS;
	for(new x = 1; x < MAX_VEHICLES; x++)
	{
		if(!IsVehicleConnected(x) || x == trailer) continue;
		if(GetVehicleTrailer(x) == trailer)
		{
			csatolva = x;
			break;
		}
	}
	
	return csatolva;
}

stock ViadalMessage(uzenet, szin = COLOR_YELLOW, kellsms = true)
{
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || !BViadal[x]) continue;
		
		if(kellsms)
			SendFormatMessage(x, szin, "SMS: %s | Küldõ: Hitman Director", uzenet);
		else
			Msg(x, uzenet, false, szin);
	}
	return 1;
}

stock Berlo(playerid)
{
	return PlayerInfo[playerid][pBerlo];
}

stock NincsHaza(playerid)
{
	if(PlayerInfo[playerid][pPhousekey] == NINCS && PlayerInfo[playerid][pPhousekey2] == NINCS && PlayerInfo[playerid][pPhousekey3] == NINCS)
		return 1;
	return 0;
}

stock NincsHaza2(playerid)
{
	if(PlayerInfo[playerid][pHazKulcsok][0] == NINCS && PlayerInfo[playerid][pHazKulcsok][1] == NINCS && PlayerInfo[playerid][pHazKulcsok][2] == NINCS)
		return 1;
	return 0;
}

stock Hazban(playerid, haz)
{
	new VW = GetPlayerVirtualWorld(playerid), Int = GetPlayerInterior(playerid);
	new belso = HouseInfo[haz][hBelso];
	if(VW == haz && Int == IntInfo[belso][iNumber] && PlayerToPoint(150, playerid, IntInfo[belso][iExitX], IntInfo[belso][iExitY], IntInfo[belso][iExitZ]))
		return 1;
	return 0;
}

stock Haznal(playerid, haz)
{
	if(PlayerToPoint(2, playerid, HouseInfo[haz][hEntrancex], HouseInfo[haz][hEntrancey], HouseInfo[haz][hEntrancez]))
		return 1;
	return 0;
}

stock Garazsnal(playerid, garazs)
{
	if(PlayerToPoint(2, playerid, GarazsInfo[garazs][hEntrancex], GarazsInfo[garazs][hEntrancey], GarazsInfo[garazs][hEntrancez]))
		return 1;
	return 0;

}

stock HazaElottVan(playerid)
{
	if(NincsHaza(playerid)) return NINCS;
	
	if(PlayerInfo[playerid][pPhousekey] != NINCS)
	{
		if(Haznal(playerid, PlayerInfo[playerid][pPhousekey]))
			return PlayerInfo[playerid][pPhousekey];
	}
	if(PlayerInfo[playerid][pPhousekey2] != NINCS)
	{
		if(Haznal(playerid, PlayerInfo[playerid][pPhousekey2]))
			return PlayerInfo[playerid][pPhousekey2];
	}
	if(PlayerInfo[playerid][pPhousekey3] != NINCS)
	{
		if(Haznal(playerid, PlayerInfo[playerid][pPhousekey3]))
			return PlayerInfo[playerid][pPhousekey3];
	}
	
	return NINCS;
}

stock HazaElottVan2(playerid)
{
	if(NincsHaza2(playerid)) return NINCS;

	if(PlayerInfo[playerid][pHazKulcsok][0] != NINCS)
	{
		if(Haznal(playerid, PlayerInfo[playerid][pHazKulcsok][0]))
			return PlayerInfo[playerid][pHazKulcsok][0];
	}
	if(PlayerInfo[playerid][pHazKulcsok][1] != NINCS)
	{
		if(Haznal(playerid, PlayerInfo[playerid][pHazKulcsok][1]))
			return PlayerInfo[playerid][pHazKulcsok][1];
	}
	if(PlayerInfo[playerid][pHazKulcsok][2] != NINCS)
	{
		if(Haznal(playerid, PlayerInfo[playerid][pHazKulcsok][2]))
			return PlayerInfo[playerid][pHazKulcsok][2];
	}

	return NINCS;
}

stock GarazsElottVan(playerid)
{
	//SendFormatMessage(playerid,COLOR_YELLOW,"%d == %d || %d == %d || %d == %d",PlayerInfo[playerid][pPhousekey] ,GarazsInfo[GarazsElott[playerid]][hHaz] , PlayerInfo[playerid][pPhousekey2] ,GarazsInfo[GarazsElott[playerid]][hHaz],PlayerInfo[playerid][pGarazs],GarazsElott[playerid]);
	//SendFormatMessage(playerid,COLOR_YELLOW,"Garázs elõtt: %d",GarazsElott[playerid]);
	if(PlayerInfo[playerid][pPhousekey] != NINCS)
	{
		if(PlayerInfo[playerid][pPhousekey] == GarazsInfo[GarazsElott[playerid]][hHaz])
		{
				if(Garazsnal(playerid, GarazsElott[playerid]))
					return GarazsElott[playerid];
		}
	}
	if(PlayerInfo[playerid][pPhousekey2] != NINCS)
	{
		if(PlayerInfo[playerid][pPhousekey2] == GarazsInfo[GarazsElott[playerid]][hHaz])
		{
			if(Garazsnal(playerid, GarazsElott[playerid]))
				return GarazsElott[playerid];
		}
	}
	if(PlayerInfo[playerid][pPhousekey3] != NINCS)
	{
		if(PlayerInfo[playerid][pPhousekey3] == GarazsInfo[GarazsElott[playerid]][hHaz])
		{
			if(Garazsnal(playerid, GarazsElott[playerid]))
				return GarazsElott[playerid];
		}
	}
	if(PlayerInfo[playerid][pGarazs]==GarazsElott[playerid])
	{
			if(Garazsnal(playerid, GarazsElott[playerid]))
				return GarazsElott[playerid];
	}
	return NINCS;
}

stock HazabanVan(playerid)
{
	if(NincsHaza(playerid)) return NINCS;
	
	if(PlayerInfo[playerid][pPhousekey] != NINCS)
	{
		if(Hazban(playerid, PlayerInfo[playerid][pPhousekey]))
			return PlayerInfo[playerid][pPhousekey];
	}
	if(PlayerInfo[playerid][pPhousekey2] != NINCS)
	{
		if(Hazban(playerid, PlayerInfo[playerid][pPhousekey2]))
			return PlayerInfo[playerid][pPhousekey2];
	}
	if(PlayerInfo[playerid][pPhousekey3] != NINCS)
	{
		if(Hazban(playerid, PlayerInfo[playerid][pPhousekey3]))
			return PlayerInfo[playerid][pPhousekey3];
	}
	return NINCS;
}

stock HazabanVan2(playerid)
{
	if(NincsHaza2(playerid)) return NINCS;

	if(PlayerInfo[playerid][pHazKulcsok][0] != NINCS)
	{
		if(Hazban(playerid, PlayerInfo[playerid][pHazKulcsok][0]))
			return PlayerInfo[playerid][pHazKulcsok][0];
	}
	if(PlayerInfo[playerid][pHazKulcsok][1] != NINCS)
	{
		if(Hazban(playerid, PlayerInfo[playerid][pHazKulcsok][1]))
			return PlayerInfo[playerid][pHazKulcsok][1];
	}
	if(PlayerInfo[playerid][pHazKulcsok][2] != NINCS)
	{
		if(Hazban(playerid, PlayerInfo[playerid][pHazKulcsok][2]))
			return PlayerInfo[playerid][pHazKulcsok][2];
	}
	return NINCS;
}

stock PremiumPont(playerid)
{
	return PlayerInfo[playerid][pPremiumPont];
}

stock VanHaza(playerid)
{
	new van;
	if(PlayerInfo[playerid][pPhousekey] != NINCS) van++;
	if(PlayerInfo[playerid][pPhousekey2] != NINCS) van++;
	if(PlayerInfo[playerid][pPhousekey3] != NINCS) van++;
	
	return van;
}

stock ViadalRadar()
{
	new x, y;
	for(x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x)) continue;
		if(BViadal[x] || IsHitman(x) || IsDirector(x))
		{
			for(y = 0; y < MAX_PLAYERS; y++)
			{
				if(!IsPlayerConnected(y) || !Logged(y) || IsPlayerNPC(y)) continue;
				if(BViadal[y])
					SetPlayerMarkerForPlayer(x, y, COLOR_YELLOW);
			}
		}
	}
	return 1;
}

stock KocsiElad(kocsi, szoveg = 1)
{
	if(szoveg == 1) SendFormatMessageToAll(COLOR_LIGHTRED, "Car Zrt: Egy kocsi eladóvá vált. Megvehetõ az autókereskedõktõl! Elõzõ tulaj: %s", CarInfo[kocsi][cOwner]);
	
	CarInfo[kocsi][cOwned] = 0;
	strmid(CarInfo[kocsi][cOwner], "Nincs_Tulaj", 0, strlen("Nincs_Tulaj"), 20);
	CarInfo[kocsi][cTulaj] = NINCS;
	CarInfo[kocsi][cDate] = 0;
	CarInfo[kocsi][cKulcsok][0] = NINCS;
	CarInfo[kocsi][cKulcsok][1] = NINCS;
	
	//CarUpdate(kocsi, "Eladva='0', Tulaj='Nincs_Tulaj', UtolsoBelepes='0'", 0);
	CarUpdate(kocsi, CAR_Owned, CAR_Owner, CAR_Date, CAR_Tulaj);
	
	ParkCarToKereskedo(kocsi);
		
	return 1;
}

stock HazElad(haz, minimumar = 2500000, szoveg = 1)
{
	if(szoveg == 1) SendFormatMessageToAll(COLOR_LIGHTRED, "Házmesterek Zrt: Class utca %d eladó lett! Ára %dFt! Elõzõ tulaj: %s", haz, HouseInfo[haz][hValue], HouseInfo[haz][hOwner]);

	new nev[MAX_PLAYER_NAME];
	nev = "Senki";
	HouseInfo[haz][hOwner] = nev;
	HouseInfo[haz][hHel] = 0;
	HouseInfo[haz][hArm] = 0;
	HouseInfo[haz][hLock] = 0;
	HouseInfo[haz][hOwned] = 0;

	if(HouseInfo[haz][hValue] < minimumar)
		HouseInfo[haz][hValue] = minimumar;

	DestroyDynamicPickup(HazPickup[haz]);
	HazPickup[haz] = UjPickup(1273, 23, HouseInfo[haz][hEntrancex], HouseInfo[haz][hEntrancey], HouseInfo[haz][hEntrancez]);

	//HazUpdate(haz, "Elet='0', Pajzs='0', Zarva='0', Eladva='0', Ara='%d', Tulaj='Senki'", HouseInfo[haz][hValue]);
	HazUpdate(haz, HAZ_Owner, HAZ_Hel, HAZ_Arm, HAZ_Lock, HAZ_Owned, HAZ_Tulaj);
		
	return 1;
}

fpublic OnPlayerStreamIn(playerid, forplayerid)
{
	/*if(forplayerid != playerid && AText[playerid] != INVALID_3D_TEXT_ID && Anev[forplayerid])
		Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, AText[playerid], E_STREAMER_PLAYER_ID, forplayerid),Streamer_Update(forplayerid);*/

	if(Nevek[forplayerid] == 1 && (Admin(forplayerid, 1) && !NoName[playerid]) || (Nevek[forplayerid] && PlayerInfo[forplayerid][pRank] >= 0 && PlayerInfo[forplayerid][pMember] == PlayerInfo[playerid][pMember] ))
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	else
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
		
	if(Snevek[forplayerid] && (PlayerInfo[playerid][pMember] != PlayerInfo[forplayerid][pMember]) && PlayerInfo[playerid][pSwattag] == 1)
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	
	if(PlayerMarker[playerid][mType] != 0 && !PLAYER_MARKER_IS_HIDDEN(playerid))
		MarkerAction(playerid, PLAYER_MARKER_ON_STREAM, forplayerid);
	
	if(Erosites[playerid])
	{
		if(LMT(forplayerid, FRAKCIO_SCPD) || LMT(forplayerid, FRAKCIO_SFPD) || LMT(forplayerid, FRAKCIO_FBI) || LMT(forplayerid, FRAKCIO_NAV) || LMT(forplayerid, FRAKCIO_KATONASAG))
			SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_LIGHTGREEN);
	}
	
	if(CsaladBK[playerid])
	{
		if(PlayerInfo[playerid][pCsaladTagja] == PlayerInfo[forplayerid][pCsaladTagja])
			SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_ORANGE);
	}
	
	if(Snevek[playerid] == true && PlayerInfo[forplayerid][pSwattag] > 0)
		ShowPlayerNameTagForPlayer(playerid, forplayerid, 1);

	if(BViadal[playerid] && BViadal[forplayerid] && BVStart || BViadal[playerid] && IsHitman(forplayerid) || BViadal[playerid] && IsDirector(forplayerid))
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_YELLOW);
	
	//ide
	if(TaxiHivasJelzes[playerid] == forplayerid)
	{
		SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_YELLOW);
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_YELLOW);
	}
	if(TaxiHivasJelzes[forplayerid] == playerid)
	{
		SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_YELLOW);
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_YELLOW);
		
	}
	if(KiertMegy[playerid] == forplayerid)
		SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_LIGHTGREEN);
		
	if(KiertMegy[forplayerid] == playerid)
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_LIGHTGREEN);
	
	if(CallTuz[playerid] && LMT(forplayerid, FRAKCIO_TUZOLTO))
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_LIGHTGREEN);

	if(PlayerInfo[playerid][pHeadValue] > 0 && HitmanDuty[forplayerid] == 1)
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0x00FF00AA);
	
	if(PlayerRaceInfo[playerid][xVersenyen] != NINCS && PlayerRaceInfo[playerid][xVersenyen] == PlayerRaceInfo[forplayerid][xVersenyen])
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_YELLOW);
	
}

fpublic OnPlayerStreamOut(playerid, forplayerid)
{
	if(PlayerMarker[playerid][mType] != 0 && !PLAYER_MARKER_IS_HIDDEN(playerid))
		MarkerAction(playerid, PLAYER_MARKER_ON_STREAM, forplayerid);
	
	if(PlayerInfo[playerid][pHeadValue] > 0 && HitmanDuty[forplayerid] == 1)
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0x00FF00AA);
		
	if(PlayerRaceInfo[playerid][xVersenyen] != NINCS && PlayerRaceInfo[playerid][xVersenyen] == PlayerRaceInfo[forplayerid][xVersenyen])
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_YELLOW);
		
	if(TaxiHivasJelzes[playerid] == forplayerid)
	{
		SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_YELLOW);
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_YELLOW);
	}
	if(TaxiHivasJelzes[forplayerid] == playerid)
	{
		SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_YELLOW);
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_YELLOW);
		
	}
		
	if(KiertMegy[playerid] == forplayerid)
		SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_LIGHTGREEN); 
	if(KiertMegy[forplayerid] == playerid)
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_LIGHTGREEN);
		
	if(CallTuz[playerid] && LMT(forplayerid, FRAKCIO_TUZOLTO))
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_LIGHTGREEN);
	
	
	#if defined Megbizas
	if(LMT(playerid, FRAKCIO_COSANOSTRA) && PlayerInfo[playerid][pRank] == KivegzoRang[0] && PlayerInfo[forplayerid][pMegbizas] == 1) SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_LIGHTGREEN); 
	if(LMT(playerid, FRAKCIO_YAKUZA) && PlayerInfo[playerid][pRank] == KivegzoRang[1] && PlayerInfo[forplayerid][pMegbizas] == 2) SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_LIGHTGREEN); 
	if(LMT(playerid, FRAKCIO_TURKEY) && PlayerInfo[playerid][pRank] == KivegzoRang[2] && PlayerInfo[forplayerid][pMegbizas] == 3) SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_LIGHTGREEN); 
	#endif
	//SendFormatMessageToAll(COLOR_WHITE, "OnPlayerStreamOut(%s, for: %s)", PlayerName(playerid), PlayerName(forplayerid));
	//if(AdminDuty[playerid])
	//	SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_DBLUE);
}

stock NevMutatas(playerid, beki)
{
	foreach(Jatekosok, x)
	{
		if(Nevek[x] == 0) continue;
		ShowPlayerNameTagForPlayer(x, playerid, beki);
	}
}

stock ShowNames(playerid, beki)
{
	if(Admin(playerid,1) || IsScripter(playerid)) foreach(Jatekosok, x)
	{
		if(HitmanDuty[x] == 1 || NoName[x]) continue;
		ShowPlayerNameTagForPlayer(playerid, x, beki);
	}
	else foreach(Jatekosok, x)
	{
		if(HitmanDuty[x] == 1 || NoName[x] || PlayerInfo[x][pMember] != PlayerInfo[playerid][pMember]) continue;
		ShowPlayerNameTagForPlayer(playerid, x, beki);
	}
}

stock LoadVersion( bool: preQuery = true )
{
	if( preQuery )
	{
		format( _tmpString, 128, "SELECT Ertek FROM %s WHERE Nev='verzio'", SQL_DB_Server );
		doQuery( _tmpString, SQL_SYSTEM_VERSION );
		return 1;
	}
	
	new verzio[32], rows, fields;
	sql_data(rows, fields);

	if(rows == 1)
	{
		sql_get_str(0, verzio);
		format(verzio, 32, "ClassRPG v%s", verzio);
	}
	else
		verzio = "Hiba";
	
	SetGameModeText(verzio);
	
	return 1;
}

stock OnlineAdminok(minszint = 1, maxszint = NINCS)
{
	new adminok;
	
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || IsPlayerNPC(x) || !Logged(x)) continue;
		if(maxszint == NINCS && PlayerInfo[x][pAdmin] >= minszint || minszint != NINCS && PlayerInfo[x][pAdmin] >= minszint && PlayerInfo[x][pAdmin] <= maxszint) adminok++;
	}

	return adminok;
}

stock BVIdoCheck()
{
	if(BVStart != 1) return 1;
	
	if(BVIdo > 0)
		BVIdo--;

	if(BVIdo % 5 == 0)
		ViadalRadar();

	new uzi[128], uzii[128];
	if(BVJatekosok < 2)
	{
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || !Logged(x) || BViadal[x] != 1) continue;
			format(uzii, sizeof(uzii), "Viadal: A Viadalnak vége! Nyertes: %s", PlayerName(x));
			SendMessage(SEND_MESSAGE_HITMAN, uzii, COLOR_YELLOW);
			SendClientMessage(x, COLOR_YELLOW, "SMS: A Viadalnak vége! Te gyõztél, a pénzt átutaltuk! | Feladó: Hitman Director");
			PlayerInfo[x][pAccount] += BVPenz;
		}
		BVPenz = 0;
		BVStart = 0;
		BVIdo = 1800;
		BVJatekosok = 0;
		return 1;
	}
	if(BVIdo < 1)
	{
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || !Logged(x) || BViadal[x] != 1) continue;
			format(uzii, sizeof(uzii), "Viadal: A Viadalnak vége! Nincs nyertes, mert lejárt az idõ!", PlayerName(x));
			SendMessage(SEND_MESSAGE_HITMAN, uzii, COLOR_YELLOW);
			SendClientMessage(x, COLOR_YELLOW, "Az idõ lejárt. Mivel nem volt nyertes, ezért a testetekben lévõ bomba végzett veletek.");
			new Float:xx, Float:yy, Float:zz;
			GetPlayerPos(x, xx, yy, zz);
			CreateExplosion(xx, yy, zz, 4, 5);
			BViadal[x] = 0;
			SetHealth(x, 0);
		}
		BVPenz = 0;
		BVStart = 0;
		BVIdo = 1800;
		BVJatekosok = 0;
		return 1;
	}
    if(BVIdo > 0)
	{
		for(new x = 0; x < MAX_PLAYERS; x++)
		{
			if(!IsPlayerConnected(x) || !Logged(x) || BViadal[x] != 1) continue;
			Format(uzi, "~y~Meg ~r~%d ~b~mp...", BVIdo);
			GameTextForPlayer(x, uzi, 975, 4);
		}
	}
	return 1;
}

stock RabolasCheck()
{
	new penz, uzi[32];
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || IsPlayerNPC(x) || Rabol[x] != 1) continue;
		
		if(!PlayerToPoint(4, x, 2144.5344,1640.4023,993.6882))
			Rabol[x] = 0;
		
		if(BankRobIdo < 1)
		{
			Rabol[x] = 0;
			UnFreeze(x);
			ClearAnimations(x);
			TextDrawUpdate(x, TD_Info2);
			continue;
		}
		/*if(BankSzef <= 0)
		{
			Rabol[x] = 0;
			BankSzef = 0;
			Msg(x, "Elfogyott a pénz.");
			return 1;
		}*/
		
		penz = Rand(5000, 15000);
		if(JatekosZsak[x] >= MAXZSAKPENZ)
		{
			Rabol[x] = 0;
			UnFreeze(x);
			ClearAnimations(x);
			Cselekves(x, "zsákja megtelt");
			Msg(x, "A zsákod megtelt");
			SetPlayerAttachedObject(x, ATTACH_SLOT_ZSAK_PAJZS_BILINCS, 1550, 1, 0.1, -0.3, 0, 0, 40, 0, 1, 1, 1);
			TextDrawUpdate(x, TD_Info);
			continue;
		}
		
		if(BankSzefRablas < penz && BankSzefRablas > 0)
			penz = BankSzefRablas;
		else if(BankSzefRablas <= 0)
		{
			Rabol[x] = 0;
			UnFreeze(x);
			ClearAnimations(x);
			Msg(x, "A pénz elfogyott a bankszéfben");
			Cselekves(x, "végzett a pénzpakolással");
			TextDrawUpdate(x, TD_Info);
			continue;
		}
		
		if((JatekosZsak[x] + penz) >= MAXZSAKPENZ)
			penz = MAXZSAKPENZ - JatekosZsak[x];
			
		Format(uzi, "~y~+~g~%d", penz);
		GameTextForPlayer(x, uzi, 950, 5);
		JatekosZsak[x] += penz;
		BankSzefRablas -= penz;
	}
	return 1;
}

/*stock Rand(szam1, szam2)
{
	new szam;
	szam += szam1;
	szam += random(szam2-szam1+1);

	return szam;
}*/

stock BankSzamla(szam)
{
	new player = NINCS;
	foreach(Jatekosok, x)
	{
		if(PlayerInfo[x][pBankSzamlaSzam] == szam)
		{
			player = x;
			break;
		}
	}

	return player;
}

stock Float:KocsiElet(car)
{
	if(!IsVehicleConnected(car)) return 0.0;
	new Float:elet;
	GetVehicleHealth(car, elet);
	return elet;
}

stock ParkCarToKereskedo(car)
{
	new Float:x, Float:y, Float:z;
	x = -2053.8244015 + random(80);
	y = -191.9231375 - random(80);
	z = 38.0;
	ParkCar(car, x, y, z);
	return 1;
}

stock ParkCar(kocsi, Float:posx, Float:posy, Float:posz, Float:posa = 0.0, Int = 0, VW = 0)
{
	CarInfo[kocsi][cLocationx] = posx;
	CarInfo[kocsi][cLocationy] = posy;
	CarInfo[kocsi][cLocationz] = posz;
	CarInfo[kocsi][cAngle] = posa;
	
	CarInfo[kocsi][cInt] = Int;
	CarInfo[kocsi][cVW] = VW;

	//CarUpdate(kocsi, "LocX='%f', LocY='%f', LocZ='%f', Angle='%f'", posx, posy, posz, posa);
	CarUpdate(kocsi, CAR_X, CAR_Y, CAR_Z, CAR_Angle, CAR_Int, CAR_VW, CAR_KM);

	DestroyVehicle(CarInfo[kocsi][cId]);
	CarInfo[kocsi][cId] = UjKocsi(CarInfo[kocsi][cModel],CarInfo[kocsi][cLocationx],CarInfo[kocsi][cLocationy],CarInfo[kocsi][cLocationz],CarInfo[kocsi][cAngle],CarInfo[kocsi][cColorOne],CarInfo[kocsi][cColorTwo], Int, VW, CAR_TYPE_VS, kocsi);
	
	
	KocsiRespawn(CarInfo[kocsi][cId], false);
	
	ACrs[kocsi]=false;
	
	return 1;
}

stock Locker(car)
{
	if(Locked(car))
		LockCar(car);
	else
		UnLockCar(car);

	return 1;
}

stock CreateKereskedoCar()
{
	new hely = random(sizeof(KereskedoSpawn));
	UjCar(KereskedoSpawn[hely][0], KereskedoSpawn[hely][1], KereskedoSpawn[hely][2], KereskedoSpawn[hely][3], 0, 0, RendelesModel, RendelesAra[RendelesAzon], 0);
	RendeltKocsik++;

	return 1;
}

stock UjCar(Float:posx, Float:posy, Float:posz, Float:posa, szin1, szin2, model = 410, ara = 1000000, zarva = 0)
{
	new ureshely = UresKocsiHely();
	if(ureshely == -1)
		return 0;

	CarInfo[ureshely][Van] = 1;

	new nev[MAX_PLAYER_NAME];
	format(nev, sizeof(nev), "Nincs_Tulaj");

	CarInfo[ureshely][cOwned] = 0;
	CarInfo[ureshely][cOwner] = nev;
	CarInfo[ureshely][cTulaj] = NINCS;
	CarInfo[ureshely][cKulcsok][0] = NINCS;
	CarInfo[ureshely][cKulcsok][1] = NINCS;
	CarInfo[ureshely][cModel] = model;
	CarInfo[ureshely][cValue] = ara;
	CarInfo[ureshely][cLocationx] = posx;
	CarInfo[ureshely][cLocationy] = posy;
	CarInfo[ureshely][cLocationz] = posz;
	CarInfo[ureshely][cAngle] = posa;
	CarInfo[ureshely][cColorOne] = szin1;
	CarInfo[ureshely][cColorTwo] = szin2;
	CarInfo[ureshely][cLock] = zarva;
	CarInfo[ureshely][cDate] = UnixTime;
	KmSzamol[CarInfo[ureshely][cId]] = 0;
	
	CarInfo[ureshely][cValue] = JarmuAra[ CarInfo[ureshely][cModel] - 400 ][jAra];
	ara = CarInfo[ureshely][cValue];
	new nevek[100], adatok[256];
	nevek = "Id, Eladva, Tulaj, Model, Ara, LocX, LocY, LocZ, Angle, Szin1, Szin2, Zarva, UtolsoBelepes";
	Format(adatok, "'%d', '0', '%s', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d'", ureshely, nev, model, ara, posx, posy, posz, posa, szin1, szin2, zarva, UnixTime);

	Mysql_Insert(SQL_DB_Kocsik, nevek, adatok);

	CarInfo[ureshely][cId] = UjKocsi(model, posx, posy, posz, posa, szin1, szin2, .type = CAR_TYPE_VS, .uid = ureshely);
	
	gCarLock[CarInfo[ureshely][cId]] = zarva;
	
	return CarInfo[ureshely][cId];
}

stock GetVehicleModelName(id, bool:carid = false)
{
	new str[64];
	if(!carid)
	{
		if(id >= 400)
			id -= 400;
		Format(str, "%s", vehName[id]);
	}
	else
	{
		id = GetVehicleModel(id);
		if(id >= 400) id -= 400;
		if(id < 0) id = 0;
		Format(str, "%s", vehName[id]);
	}
	
	return str;
}
stock AtmKozel(playerid)
{
	for(new a = 0; a < MAX_ATM; a++)
	{
		if(PlayerToPoint(2, playerid, ATM[a][aPosX], ATM[a][aPosY], ATM[a][aPosZ]) && GetPlayerVirtualWorld(playerid) == ATM[a][aVw] && GetPlayerInterior(playerid) == ATM[a][aInt] && ATM[a][aObjectID] != NINCS )
		{
			return a;
		}
	}	
	return NINCS;

}
stock UresKocsiHely()
{
	new hely = -1;
	for(new x = 0; x < sizeof(CarInfo); x++)
	{
		if(CarInfo[x][Van] == 0)
		{
			hely = x;
			break;
		}
	}
	return hely;
}
stock TeleToCar(playerid, kocsi)
{
	new Float:pos[3];
	GetVehiclePos(kocsi, ArrExt(pos));
	Tele(playerid, ArrExt(pos), false, GetVehicleVirtualWorld(kocsi));
	
	return 1;
}
stock Tele(playerid, Float:posx, Float:posy, Float:posz, kocsival = true, VW = NINCS, Int = NINCS, Float:Angle = 0.0, freeze = 500)
{
	if(!IsPlayerConnected(playerid) || IsPlayerNPC(playerid) || !Logged(playerid)) return 1;
	new kocsi, trailer;
	//PlayerInfo[playerid][pTeleportAlatt] = 1;
	//removePlayerFromMento(playerid);
	if(kocsival && GetPlayerState(playerid) == 2)
	{
		kocsi = GetPlayerVehicleID(playerid);
		if(Angle != 0.0)
			SetVehicleZAngle(kocsi, Angle);
			
		SetVehiclePos(kocsi, posx, posy, posz+1.5);
		trailer = GetVehicleTrailer(kocsi);
		if(trailer != 0) AttachTrailerToVehicle(trailer, kocsi);
	}
	else
	{	
		//PlayerInfo[playerid][pTeleportAlatt] = 1;
		//PlayerInfo[playerid][pCFalsePositive] = 1;
		SetPlayerPos(playerid, posx, posy, posz);
		if(Angle != 0.0)
			SetPlayerFacingAngle(playerid, Angle);	
		
	}	
	if(VW != NINCS)
	{
		SetPlayerVirtualWorld(playerid, VW, "tele");
		if(kocsi != 0)
		{
			foreach(Jatekosok, i)
			{
				if(playerid != i && IsPlayerInVehicle(i, kocsi))
				{
					//PlayerInfo[playerid][pTeleportAlatt] = 1;
					//PlayerInfo[playerid][pCFalsePositive] = 1;
					SetPlayerVirtualWorld(i, VW, "tele2");
				}
					
			}
			SetVehicleVW(kocsi, VW);
			if(trailer != 0)
				SetVehicleVW(trailer, VW);
		}
	}
		
	if(Int != NINCS)
	{
		SetPlayerInterior(playerid, Int);
		if(kocsi != 0)
		{
			foreach(Jatekosok, i)
			{
				if(playerid != i && IsPlayerInVehicle(i, kocsi))
				{
					SetPlayerInterior(i, Int);
					//PlayerInfo[playerid][pTeleportAlatt] = 1;
					//PlayerInfo[playerid][pCFalsePositive] = 1;
				}
					
			}
			SetVehicleInterior(kocsi, Int);
			if(trailer != 0)
				SetVehicleInterior(trailer, Int);
		}
	}
	
	if(freeze > 0)
	{
		Freeze(playerid, freeze);
		Streamer_UpdateEx(playerid, posx, posy, posz, (VW != NINCS ? VW : GetPlayerVirtualWorld(playerid)), (Int != NINCS ? Int : GetPlayerInterior(playerid)));
	}
	
	SetCameraBehindPlayer(playerid);
	return 1;
}

stock CheckSzint(playerid, bool:message = false)
{
	if(Szint(playerid) < 0) return 1;

	if(Szint(playerid) == 0)
	{
		new bool:folytat = true, exp, lvlexp, lvl, jo;
		jo = PlayerInfo[playerid][pConnectTime];
		exp = jo;
		lvlexp = levelexp * 2;
		lvl = 1;
		while(folytat)
		{
			if(exp >= lvlexp)
			{
				lvl++;
				exp -= lvlexp;
				lvlexp += levelexp;
			}
			else
				folytat = false;
		}
		PlayerInfo[playerid][pExp] = exp;
		PlayerInfo[playerid][pLevel] = lvl;
		SendFormatMessage(playerid, COLOR_WHITE, "Szinted beállítva! Összesen %d játszott órád volt! Szinted: %d, maradék respect pontjaid: %d", jo, lvl, exp);
	}
	else
	{
		new exp, kell;
		exp = PlayerInfo[playerid][pExp];
		kell = (Szint(playerid) + 1) * levelexp;
		if(exp >= kell)
		{
			if(PlayerInfo[playerid][pTut] > UnixTime)
			{
				PlayerInfo[playerid][pExp] = 0;
				PlayerInfo[playerid][pLevel] += 1;
				SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
				SendFormatMessage(playerid, COLOR_WHITE, "Gratulálunk! Szintet léptél! Új szinted: %d! Következõ szinthez szükséges még %d játszott óra!!", PlayerInfo[playerid][pLevel], (Szint(playerid) + 1) * levelexp);
			}
			else
				SendClientMessage(playerid, COLOR_WHITE, "Nem sikerült szintet lépned, mivel nem töltötted ki a tesztet.");
		}
		else if(message)
			SendClientMessage(playerid, COLOR_WHITE, "Még nem léphetsz szintet");
	}

	return 1;
}

stock HirdetesSzidasEllenorzes(playerid, szoveg[], parancs[], tipus = ELLENORZES_MINDKETTO)
{
	new talalt, szoveg1[128], szoveg2[128], hol;
	if(tipus == ELLENORZES_HIRDETES || tipus == ELLENORZES_MINDKETTO)
	{
		new azonnali[23][] = {
			"icerpg", "ice rpg", "fayrpg", "fay rpg", "wrp", "bajarpg", "baja rpg", "royalrpg", "royal rpg", "skyrpg", "sky rpg", "ravelrpg", "ravel rpg", "rajrpg", "littletown",
			"80.249.173.238", "91.82.84.189","80.249.173.230", "80.249.173.122", "80.249.165.73", "178.248.200.34", "91.82.84.215", "91.82.84"
		};
		new cenzurak[19][] = {"fay", "WRP",":7750", ":7820", ":7070", ":7777", ":22000", ":7840", "slyde", "atw.hu", "clanbazis.com", "dtsh.hu", "moon-rpg", "gc4", "phoenix", "rpg", ":7780", "colorado", "mta"};
		
		for(new x = 0; x < sizeof(azonnali); x++)
		{
			if( strfind(szoveg, azonnali[x], true) != -1 )
			{
				talalt = 2;
				break;
			}
		}

		if(!talalt)
		{
			if(strfind(szoveg, "seerpg") != -1)
			{
				Format(szoveg1, "[Szerverhírdetés figyelmeztetés nem auto ban] ID: %d, Név: %s, Parancs: %s", playerid, PlayerName(playerid), parancs);
				Format(szoveg2, "Szöveg: %s", szoveg);
				if(OnlineAdminok() > 0)
				{
					ABroadCast(COLOR_LIGHTRED, szoveg1, 1);
					ABroadCast(COLOR_LIGHTRED, szoveg2, 1);
				}
				return 1;
			}

			for(new x = 0; x < sizeof(cenzurak); x++)
			{
				hol = strfind(szoveg, cenzurak[x], true);
				
				if(egyezik(cenzurak[x], "sky"))
				{
					if(strfind(szoveg, "sky") != -1 && strfind(szoveg, "skype") == -1 && strfind(szoveg, "skypo") == -1)
					{
						talalt = 1;
						break;
					}
				}
				else if(egyezik(cenzurak[x], "fay"))
				{
					if(strfind(szoveg, "fay", true) != -1 && strfind(szoveg, "fayg", true) == -1)
					{
						talalt = 1;
						break;
					}
				}
				else if(egyezik(cenzurak[x], "raj"))
				{
					if(strfind(szoveg, "raj", true) != -1)
					{
						talalt = 1;
						break;
					}
				}
				else if(hol != -1)
				{
					talalt = 1;
					break;
				}
			}
		}
		else
		{
			Format(szoveg1, "[Szerverhírdetés figyelmeztetés] ID: %d, Név: %s, Parancs: %s", playerid, PlayerName(playerid), parancs);
			Format(szoveg2, "Szöveg: %s", szoveg);
			
			new adminok = OnlineAdminok();
			if(adminok)
			{
				ABroadCast(COLOR_LIGHTRED, szoveg1, 1);
				ABroadCast(COLOR_LIGHTRED, szoveg2, 1);
			}
			else if(!adminok || talalt == 2)
			{
				if(talalt == 2) SeeBan(playerid, 0, NINCS, "Szerverhírdetés (I)" );
				else SeeBan(playerid, 0, NINCS, "Szerverhírdetés" );
				
				BanLog(szoveg1);
				BanLog(szoveg2);
			}

			return 1;
		}
	}
	if(tipus == ELLENORZES_SZIDAS || tipus == ELLENORZES_HIRDETES)
	{ 						//	   1	  2		  3			4		 5		   6		7		8		9		10		11	   12	  13	   14		15		  16	17		 18		19		20		21				22
		new cenzurak_x[22][] = {"fasz", "buzi", "geci", "cigány", "cigany", "zsidó", "zsido", "szop", "kurva", "baz", "bmeg", "b+", "anyád", "anyad", "köcsög", "low", "noob", "láma", "lama", "szar", "azdmeg", "jóédeskurvaanyád"};
		for(new x = 0; x < sizeof(cenzurak_x); x++)
		{
			hol = strfind(szoveg, cenzurak_x[x], true);
			if(hol != NINCS)
			{
				if(egyezik(cenzurak_x[x], "fasz"))
				{
					if(strfind(szoveg, "fasz", true) != NINCS && strfind(szoveg, "fasza", true) == NINCS)
					{
						talalt = 1;
						break;
					}
				}
				else
				{
					talalt = 1;
					break;
				}
			}
		}
		if(talalt)
		{
			Format(szoveg1, "[OOC Szidás figyelmeztetés] ID: %d, Név: %s, Parancs: %s", playerid, PlayerName(playerid), parancs);
			Format(szoveg2, "Szöveg: %s", szoveg);
			if(OnlineAdminok() > 0)
			{
				foreach(Jatekosok, o)
				{
					if(gBoocszidas[o] == 1 && Admin(o, 1))
					{
						SendClientMessage(o, COLOR_LIGHTRED, szoveg1);
						SendClientMessage(o, COLOR_LIGHTRED, szoveg2);
					}
				}
				//ABroadCast(COLOR_LIGHTRED, szoveg1, 1);
				//ABroadCast(COLOR_LIGHTRED, szoveg2, 1);
			}
			/*else
			{
				SeeKick(playerid, "OOC Szidás", NINCS);
				KickLog(szoveg1);
				KickLog(szoveg2);
			}*/
			//return 1;
		}
	}
	return 0;
}

stock EmlegetesEllenorzes(playerid, szoveg[], parancs[], tipus = ELLENORZES_SZEMELY)
{
	new talalt, szoveg1[128], szoveg2[128], hol;
	if(tipus == ELLENORZES_SZEMELY)
	{                   //	  1					2					 3						4					5				6			7				8			9		   10			 11			12	  13
		new nevek_x[37][] = {"Amos_Vincenzo", "Amos Vincenzo", "Krisztofer_Vincenzo", "Krisztofer Vincenzo", "Henrik", "Henrik_Vincenzo", "Max Brasco", "Max_Brasco", "Brasco", "Denaro", "Krisztofer","Henrik Vincenzo","Amos",
							 "Dominic", "Vincenzo", "Denny", "Szekely" ,"Krisz", "Admin","Michael", "Randy", "Renaldi","Cristian", "Cris", "Nelson","Nyalson","Vito","Robin","Clint","Nagato", "Akos", "Kevin", "Nunez", "Axel", "Hend", "Nick", "Costa"};
						//		14			15		   16		17		   18		19		20		  21		22			23		  24		25		26		27		28		29		30		31		32			33		34		35		36		37
		for(new x = 0; x < sizeof(nevek_x); x++)
		{
			hol = strfind(szoveg, nevek_x[x], true);
			if(hol != NINCS)
			{
				if(egyezik(nevek_x[x], "Amos"))
				{
					if(strfind(szoveg, "Amos", true) != NINCS && strfind(szoveg, "Villamos", true) == NINCS)
					{
						talalt = 1;
						break;
					}
				}
				else
				{
					talalt = 1;
					break;
				}
			}
		}
		if(talalt)
		{
			Format(szoveg1, "[Emlegetés] ID: %d, Név: %s, Parancs: %s", playerid, PlayerName(playerid), parancs);
			Format(szoveg2, "Szöveg: %s", szoveg);
			foreach(Jatekosok, o)
			{
				if(gBemlegetes[o] == 1 && Admin(o, 1) || gBemlegetes[o] == 1 && IsAmos(playerid) || gBemlegetes[o] == 1 && IsScripter(playerid))
				{
					SendClientMessage(o, COLOR_LIGHTBLUE, szoveg1);
					SendClientMessage(o, COLOR_LIGHTBLUE, szoveg2);
				}
			}
		}
	}
	return 0;
}

stock Civil(playerid)
{
	if(PlayerInfo[playerid][pMember] == 0 && PlayerInfo[playerid][pLeader] == 0)
		return 1;
	return 0;
}

stock SeeKick(playerid, miert[], kivolt = NINCS)
{
	new string[128], ki[MAX_PLAYER_NAME], jatekos[MAX_PLAYER_NAME];

	if(kivolt == NINCS || !IsPlayerConnected(kivolt) || IsPlayerNPC(kivolt))
		ki = "a rendszer";
	else
		ki = PlayerName(kivolt);

	jatekos = PlayerName(playerid);
	Format(string, "ClassRPG: %s kirúgva %s által | Oka: %s", jatekos, ki, miert);
	SendClientMessageToAll(COLOR_LIGHTRED, string);
	Kick(playerid);
	
	format(string, sizeof(string), "ClassRPG: %s kirúgva %s által | Oka: %s", PlayerName(playerid), ki, miert); KickLog(string);
	return 1;
}


stock LegalisSzervezetTagja(playerid)
{
	if(LMT(playerid, FRAKCIO_SCPD) || LMT(playerid, FRAKCIO_FBI) || LMT(playerid, FRAKCIO_SFPD) || LMT(playerid, FRAKCIO_MENTO) || LMT(playerid, FRAKCIO_SFMENTO) ||
		LMT(playerid, FRAKCIO_ONKORMANYZAT) || LMT(playerid, FRAKCIO_RIPORTER) || LMT(playerid, FRAKCIO_TAXI) || LMT(playerid, FRAKCIO_SFTAXI) || LMT(playerid, FRAKCIO_NEMHASZ) || LMT(playerid, FRAKCIO_OKTATO) || LMT(playerid, FRAKCIO_NAV) || LMT(playerid, FRAKCIO_TUZOLTO) || LMT(playerid, FRAKCIO_KATONASAG))
		return 1;
	return 0;
}

stock IllegalisSzervezetTagja(playerid)
{
	return (!Civil(playerid) && !LegalisSzervezetTagja(playerid));
}

/*stock FoglaltNev(string[])
{
	new where[40];
	Format(where, "nev='%s'", string);
	if(Mysql_Num(SQL_DB_Player, where, "ID") >= 1)
		return 1;
	return 0;
}*/

stock KocsiSofor(kocsi)
{
	new player = NINCS;
	foreach(Jatekosok, p)
	{
		if(IsPlayerInVehicle(p, kocsi) && GetPlayerState(p) == PLAYER_STATE_DRIVER)
		{
			player = p;
			break;
		}
	}
	return player;
}

fpublic RaceTimer()
{
	new string[16], uzenet[128];
	for(new race = 0; race < RACESLOTOK; race++)
	{
		if(RaceInfo[race][rStatusz] == RACE_INDUL)
		{
			RaceInfo[race][rIndul]--;
			new time = RaceInfo[race][rIndul];
			
			if((time >= 1800 && time % 1800 == 0) || (time >= 600 && time < 1800 && time % 600 == 0))
			{
				format(uzenet, 128, "A %s %s múlva indul! (( /gps race %d ))", RaceInfo[race][rNev], FormatTime(time), race);
				if(time > 1800)
				{
					SendClientMessageToAll(COLOR_WHITE, "========== Class City Racing Team ==========");
					SendClientMessageToAll(COLOR_RED, uzenet);
					SendClientMessageToAll(COLOR_LIGHTBLUE,"A versenyre RP-sen gyülekezetek ne álljátok el a forgalmat! /race join után áljatok be!");
				}
				else
				{
					SendClientMessageToAll(COLOR_WHITE, "========== Class City Racing Team ==========");
					SendClientMessageToAll(COLOR_LIGHTRED, uzenet);
					SendClientMessageToAll(COLOR_LIGHTBLUE,"A versenyre RP-sen gyülekezetek ne álljátok el a forgalmat! /race join után áljatok be!");
				}
			}
			else if(time >= 120 && time < 600 && time % 60 == 0)
			{
				if(time > 300) format(uzenet, 128, "A %s %s múlva indul! (( /gps race %d ))", RaceInfo[race][rNev], FormatTime(time), race);
				else format(uzenet, 128, "A %s %s múlva indul! (( /gps race %d )) - Mostmár lehet jelentkezni! (( /race join ))", RaceInfo[race][rNev], FormatTime(time), race);
				SendClientMessageToAll(COLOR_WHITE, "========== Class City Racing Team ==========");
				SendClientMessageToAll(COLOR_ORANGE, uzenet);
				SendClientMessageToAll(COLOR_LIGHTBLUE,"A versenyre RP-sen gyülekezetek ne álljátok el a forgalmat! /race join után áljatok be!");
			}
			else if(time == 60)
			{
				format(uzenet, 128, "A %s egy perc mulva indul! (( /gps race %d )) - Ha még nem jelentkeztél, jelentkezz! (( /race join ))", RaceInfo[race][rNev], race);
				SendClientMessageToAll(COLOR_WHITE, "========== Class City Racing Team ==========");
				SendClientMessageToAll(COLOR_YELLOW, uzenet);
			}
			else if(time == 30)
			{
				format(uzenet, 128, "A %s 30 másodperc mulva indul! (( /gps race %d )) - Ha még nem jelentkeztél, jelentkezz! (( /race join ))", RaceInfo[race][rNev], race);
				SendClientMessageToAll(COLOR_WHITE, "========== Class City Racing Team ==========");
				SendClientMessageToAll(COLOR_YELLOW, uzenet);
			}
			else if(time <= 15 && time > 0)
			{
				foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] != race) continue;

					if(time > 10)
						Format(string, "~g~%d", time);
					else if(time <= 10 && time >= 8)
						Format(string, "~g~~h~%d", time);
					else if(time <= 7&& time >= 6)
						Format(string, "~y~%d", time);
					else if(time <= 5 && time >= 4)
						Format(string, "~r~~h~~h~%d", time);
					else if(time <= 3 && time >= 2)
						Format(string, "~r~~h~%d", time);
					else if(time < 2)
						Format(string, "~r~%d", time);
					GameTextForPlayer(x, string, 925, 5);
				}
			}
			else if(time <= 0)
			{
				format(uzenet, 128, "A %s elindult!", RaceInfo[race][rNev]);
				SendClientMessageToAll(COLOR_WHITE, "========== Class City Racing Team ==========");
				SendClientMessageToAll(COLOR_LIGHTGREEN, uzenet);
				
				RaceInfo[race][rStatusz] = RACE_ELINDULT;
				foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == NINCS)
					{
						DisablePlayerRaceCheckpoint(x);
						continue;
					}
					Format(string, "~r~~h~Go!!", time);
					GameTextForPlayer(x, string, 3000, 5);
			
					
					PlayerRaceInfo[x][xCP] = RACE_CP_START;
					PlayerRaceInfo[x][xIdo] = 0;
					SetPlayerRaceCP(x);
				}
			}
		}
		else if(RaceInfo[race][rStatusz] == RACE_ELINDULT)
		{
			foreach(Jatekosok, x)
			{
				if(PlayerRaceInfo[x][xVersenyen] != race) continue;
				PlayerRaceInfo[x][xIdo]++;
			}
		}
	}

	return 1;
}

stock SetPlayerRaceCP(playerid)
{
	new cp = PlayerRaceInfo[playerid][xCP], race = PlayerRaceInfo[playerid][xVersenyen];
	if(cp == RACE_CP_START)
	{
		if(RaceInfo[race][rCP] > 0)
			SetPlayerRaceCheckpoint(playerid, 0, RaceStart[race][0], RaceStart[race][1], RaceStart[race][2], RaceCP[race][0][0], RaceCP[race][0][1], RaceCP[race][0][2], RACECPMERET);
		else
			SetPlayerRaceCheckpoint(playerid, 0, RaceStart[race][0], RaceStart[race][1], RaceStart[race][2], RaceCel[race][0], RaceCel[race][1], RaceCel[race][2], RACECPMERET);
	}
	else if(cp == RACE_CP_CEL)
		SetPlayerRaceCheckpoint(playerid, 1, RaceCel[race][0], RaceCel[race][1], RaceCel[race][2], 0.0, 0.0, 0.0, RACECPMERET);
	else
	{
		if((cp+1) >= RaceInfo[race][rCP])
			SetPlayerRaceCheckpoint(playerid, 0, RaceCP[race][cp][0], RaceCP[race][cp][1], RaceCP[race][cp][2], RaceCel[race][0], RaceCel[race][1], RaceCel[race][2], RACECPMERET);
		else
			SetPlayerRaceCheckpoint(playerid, 0, RaceCP[race][cp][0], RaceCP[race][cp][1], RaceCP[race][cp][2], RaceCP[race][cp+1][0], RaceCP[race][cp+1][1], RaceCP[race][cp+1][2], RACECPMERET);
	}

	return 1;
}

stock RaceStartnal(playerid)
{
	for(new x = 0; x < RACESLOTOK; x++)
	{
		if(RaceInfo[x][rStatusz] == RACE_INDUL)
		{
			if(PlayerToPoint(15, playerid, RaceStart[x][0], RaceStart[x][1], RaceStart[x][2]))
				return x;
		}
	}
	return -1;
}

stock FormatTime(ido)
{
	new string[128];
	if(ido < 60)
		Format(string, "%d másodperc", ido);
	else if(ido >= 60 && ido < 3600)
	{
		if(ido % 60 == 0)
			Format(string, "%d perc", (ido / 60));
		else
			Format(string, "%d perc és %d másodperc", floatround((ido / 60), floatround_floor), (ido % 60));
	}
	else if(ido >= 3600)
	{
		if(ido % 3600 == 0)
			Format(string, "%d óra", (ido / 3600));
		else
			Format(string, "%d óra és %d perc", floatround((ido / 3600), floatround_floor), floatround((ido % 3600) / 60));
	}

	return string;
}

stock HibasRaceSlot(playerid, slot)
{
	if(slot < 0 || slot > (RACESLOTOK - 1))
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "Hibás RaceSlot! A RaceSlot minimum 0 és max %d lehet!", (RACESLOTOK - 1));
		return 1;
	}
	return 0;
}

stock HibasBizNev(string[])
{
	if(strfind(string, "|") != -1 || strfind(string, ",") != -1 || strfind(string, ".") != -1 || strfind(string, "'") != -1 || strfind(string, "\"") != -1)
		return 1;
	return 0;
}

stock CorrectPlayerDatas(playerid)
{
	new x, talalat;
	for(x = 0; x < sizeof(BizzInfo); x++)
	{
		if(BizzInfo[x][bOwned] && BizzInfo[x][bTulaj] == PlayerInfo[playerid][pID])
		{
			PlayerInfo[playerid][pPbiskey] = x;
			if(!egyezik(BizzInfo[x][bOwner], PlayerName(playerid)))
			{
				strmid(BizzInfo[x][bOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 50);
				BizUpdate(x, BIZ_Owner);
			}
			talalat = 1;
			break;
		}
	}
	if(talalat != 1)
		PlayerInfo[playerid][pPbiskey] = NINCS;
	
	talalat = 0;	
	for(x = 0; x < MAX_BENZINKUT; x++)
	{
		if(BenzinKutak[x][bTav] > 0 && BenzinKutak[x][bTulajID] == PlayerInfo[playerid][pID])
		{
			PlayerInfo[playerid][pBenzinkut] = x;
			if(!egyezik(BenzinKutak[x][bTulaj], PlayerName(playerid)))
			{
				strmid(BenzinKutak[x][bTulaj], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 50);
			}
			talalat = 1;
			break;
		}
	}
	if(talalat != 1)
		PlayerInfo[playerid][pBenzinkut] = NINCS;
	
	talalat = 0;	
	for(x = 0; x < MAX_TELEFON; x++)
	{
		if(Telefonok[x][tEladva] && Telefonok[x][tTulajID] == PlayerInfo[playerid][pID])
		{
			PlayerInfo[playerid][pTelefon] = x;
			if(!egyezik(Telefonok[x][tTulaj], PlayerName(playerid)))
			{
				strmid(Telefonok[x][tTulaj], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 50);
			}
			talalat = 1;
			break;
		}
	}
	if(talalat != 1)
		PlayerInfo[playerid][pTelefon] = NINCS;	
	
	talalat = 0;	
	for(x = 0; x < sizeof(BizzInfo); x++)
	{
		if(BizzInfo[x][bOwned] && BizzInfo[x][bMTulajID] == PlayerInfo[playerid][pID])
		{
			PlayerInfo[playerid][pBizniszKulcs] = x;
			if(!egyezik(BizzInfo[x][bExtortion], PlayerName(playerid)))
			{
				strmid(BizzInfo[x][bExtortion], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 50);
				BizUpdate(x, BIZ_Extortion);
			}
			talalat = 1;
			break;
		}
	}
	if(talalat != 1)
		PlayerInfo[playerid][pBizniszKulcs] = NINCS;	

	talalat = 0;
	for(x = 0; x < sizeof(CarInfo); x++)
	{
		if(CarInfo[x][Van] == 1 && CarInfo[x][cOwned] && CarInfo[x][cTulaj] == PlayerInfo[playerid][pID])
		{
			if(talalat == 0)
			{
				PlayerInfo[playerid][pPcarkey] = x;
				if(!egyezik(CarInfo[x][cOwner], PlayerName(playerid)))
				{
					strmid(CarInfo[x][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 50);
					CarUpdate(x, CAR_Owner);
				}
			}
			else if(talalat == 1)
			{
				PlayerInfo[playerid][pPcarkey2] = x;
				if(!egyezik(CarInfo[x][cOwner], PlayerName(playerid)))
				{
					strmid(CarInfo[x][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 50);
					CarUpdate(x, CAR_Owner);
				}
			}
			else if(talalat == 2)
			{
				PlayerInfo[playerid][pPcarkey3] = x;
				if(!egyezik(CarInfo[x][cOwner], PlayerName(playerid)))
				{
					strmid(CarInfo[x][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 50);
					CarUpdate(x, CAR_Owner);
				}
			}
			else
			{
				KocsiElad(x);
			}
			talalat++;
		}
	}
	if(talalat == 0)
	{
		PlayerInfo[playerid][pPcarkey] = NINCS;
		PlayerInfo[playerid][pPcarkey2] = NINCS;
		PlayerInfo[playerid][pPcarkey3] = NINCS;
	}
	else if(talalat == 1)
	{
		PlayerInfo[playerid][pPcarkey2] = NINCS;
		PlayerInfo[playerid][pPcarkey3] = NINCS;
	}	
	else if(talalat == 2)
	{
		PlayerInfo[playerid][pPcarkey3] = NINCS;
	}	
	talalat = 0;
	for(x = 0; x < sizeof(HouseInfo); x++)
	{
		if(HouseInfo[x][Van] == 1 && HouseInfo[x][hOwned] && HouseInfo[x][hTulaj] == PlayerInfo[playerid][pID])
		{
			if(talalat == 0)
			{
				PlayerInfo[playerid][pPhousekey] = x;
				if(!egyezik(HouseInfo[x][hOwner], PlayerName(playerid)))
				{
					strmid(HouseInfo[x][hOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 50);
					HazUpdate(x, HAZ_Owner);
				}
			}
			else if(talalat == 1)
			{
				PlayerInfo[playerid][pPhousekey2] = x;
				if(!egyezik(HouseInfo[x][hOwner], PlayerName(playerid)))
				{
					strmid(HouseInfo[x][hOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 50);
					HazUpdate(x, HAZ_Owner);
				}
			}
			else if(talalat == 2)
			{
				PlayerInfo[playerid][pPhousekey3] = x;
				if(!egyezik(HouseInfo[x][hOwner], PlayerName(playerid)))
				{
					strmid(HouseInfo[x][hOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 50);
					HazUpdate(x, HAZ_Owner);
				}
			}
			else
				HazElad(x);
			talalat++;
		}
	}
	if(talalat == 0)
	{
		PlayerInfo[playerid][pPhousekey] = NINCS;
		PlayerInfo[playerid][pPhousekey2] = NINCS;
		PlayerInfo[playerid][pPhousekey3] = NINCS;
	}
	else if(talalat == 1)
	{	
		PlayerInfo[playerid][pPhousekey2] = NINCS;
		PlayerInfo[playerid][pPhousekey3] = NINCS;
	}
	else if(talalat == 2)
	{	
		PlayerInfo[playerid][pPhousekey3] = NINCS;
	}

	new haza = PlayerInfo[playerid][pPhousekey];
	if(haza != NINCS)
	{
		if(haza > MAXHAZ || HouseInfo[haza][Van] != 1 || HouseInfo[haza][hOwned] != 1)
			PlayerInfo[playerid][pPhousekey] = NINCS;
	}
	
	talalat = 0;
	for(x = 0; x < sizeof(CarInfo); x++)
	{
		if(CarInfo[x][Van] == 1 && CarInfo[x][cOwned] && CarInfo[x][cKulcsok][0] == PlayerInfo[playerid][pID] || CarInfo[x][cKulcsok][1] == PlayerInfo[playerid][pID])
		{
			if(talalat == 0)
				PlayerInfo[playerid][pKulcsok][0] = x;
			else if(talalat == 1)
				PlayerInfo[playerid][pKulcsok][1] = x;
			else if(talalat == 2)
				PlayerInfo[playerid][pKulcsok][2] = x;
			talalat++;
		}
	}
	if(talalat == 0)
	{
		PlayerInfo[playerid][pKulcsok][0] = NINCS;
		PlayerInfo[playerid][pKulcsok][1] = NINCS;
		PlayerInfo[playerid][pKulcsok][2] = NINCS;
	}
	else if(talalat == 1)
	{
		PlayerInfo[playerid][pKulcsok][1] = NINCS;
		PlayerInfo[playerid][pKulcsok][2] = NINCS;
	}
	else if(talalat == 2)
		PlayerInfo[playerid][pKulcsok][2] = NINCS;
	
	talalat = 0;
	
	for(x = 0; x < sizeof(HouseInfo); x++)
	{
		if(HouseInfo[x][Van] == 1 && (HouseInfo[x][hKulcsVan][0] == PlayerInfo[playerid][pID] || HouseInfo[x][hKulcsVan][1] == PlayerInfo[playerid][pID]))
		{
			if(talalat == 0)
				PlayerInfo[playerid][pHazKulcsok][0] = x;
			else if(talalat == 1)
				PlayerInfo[playerid][pHazKulcsok][1] = x;
			else if(talalat == 2)
				PlayerInfo[playerid][pHazKulcsok][2] = x;
			talalat++;
		}
	}
	if(talalat == 0)
	{
		PlayerInfo[playerid][pHazKulcsok][0] = NINCS;
		PlayerInfo[playerid][pHazKulcsok][1] = NINCS;
		PlayerInfo[playerid][pHazKulcsok][2] = NINCS;
	}
	else if(talalat == 1)
	{
		PlayerInfo[playerid][pHazKulcsok][1] = NINCS;
		PlayerInfo[playerid][pHazKulcsok][2] = NINCS;
	}
	else if(talalat == 2)
		PlayerInfo[playerid][pHazKulcsok][2] = NINCS;

	talalat = 0;
	
	return 1;
}

stock BizbeVan(playerid)
{
	new biz = NINCS, Interior, VW;
	Interior = GetPlayerInterior(playerid);
	VW = GetPlayerVirtualWorld(playerid);
	for(new x = 0; x < sizeof(BizzInfo); x++)
	{
		if(PlayerToPoint(100, playerid, BizzInfo[x][bExitX], BizzInfo[x][bExitY], BizzInfo[x][bExitZ]) && Interior == BizzInfo[x][bInterior] && VW == x)
		{
			biz = x;
			break;
		}
	}
	if(KikepzobenVan(playerid))
		biz=BIZ_PB;
	return biz;
}

stock HazKukaFrissites(q)
{
	new i = NINCS;
	for(new k = 0; k < sizeof(TrashInfo); k++) //szabad slot keresés, ha van slot tovább
	{
		if(TrashInfo[k][tSzemet]) continue;
		i = k;
		break;
	}
	if(i > NINCS) //talált slotot
	{
		new hid1 = PlayerInfo[q][pPhousekey];
		new hid2 = PlayerInfo[q][pPhousekey2];
		new hid3 = PlayerInfo[q][pPhousekey3];
		new van = false;
		
		if(hid1 == NINCS) return 1;
		if(HouseInfo[hid1][Van] == 1 && HouseInfo[hid1][hOwned] == 1 && PlayerInfo[q][pID] == HouseInfo[hid1][hTulaj]) //ha esetleg közben elvették volna a házát, de valami miatt a kulcs megmaradt.
		{
			for(new k = 0; k < sizeof(TrashInfo); k++)
			{
				if(TrashInfo[k][gId] == hid1)
					van = true;
			}
			if(!van)
			{
				TrashInfo[i][gId] = hid1;
				TrashInfo[i][tSzemetPos][0] = HouseInfo[hid1][hEntrancex];
				TrashInfo[i][tSzemetPos][1] = HouseInfo[hid1][hEntrancey];
				TrashInfo[i][tSzemetPos][2] = HouseInfo[hid1][hEntrancez] - 0.5;
				TrashInfo[i][tSzemet] = true;
				if(!IsValidDynamicObject(TrashInfo[i][tSzemetObject]))
					TrashInfo[i][tSzemetObject] = CreateDynamicObject(1265, TrashInfo[i][tSzemetPos][0], TrashInfo[i][tSzemetPos][1], TrashInfo[i][tSzemetPos][2], 0.0, 0.0, 0.0);
				if(!IsValidDynamic3DTextLabel(TrashInfo[i][tSzemetLabel]))
				{
					tformat(64, "Ház: %d\nSzemét", TrashInfo[i][gId]);
					TrashInfo[i][tSzemetLabel] = CreateDynamic3DTextLabel(_tmpString, 0xFFC801AA, ArrExt(TrashInfo[i][tSzemetPos]), 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
				}
				
				if(i < MAXSZEMET) i++;
				else return 1;
			}
		}
		if(hid2 == NINCS) return 1;
		van = false;
		if(HouseInfo[hid2][Van] == 1 && HouseInfo[hid2][hOwned] == 1 && PlayerInfo[q][pID] == HouseInfo[hid2][hTulaj]) //ha esetleg közben elvették volna a házát, de valami miatt a kulcs megmaradt.
		{
			for(new k = 0; k < sizeof(TrashInfo); k++)
			{
				if(TrashInfo[k][gId] == hid2)
					van = true;
			}
			
			if(!van)
			{
				TrashInfo[i][gId] = hid2;
				TrashInfo[i][tSzemetPos][0] = HouseInfo[hid2][hEntrancex];
				TrashInfo[i][tSzemetPos][1] = HouseInfo[hid2][hEntrancey];
				TrashInfo[i][tSzemetPos][2] = HouseInfo[hid2][hEntrancez] - 0.5;
				TrashInfo[i][tSzemet] = true;
				if(!IsValidDynamicObject(TrashInfo[i][tSzemetObject]))
					TrashInfo[i][tSzemetObject] = CreateDynamicObject(1265, TrashInfo[i][tSzemetPos][0], TrashInfo[i][tSzemetPos][1], TrashInfo[i][tSzemetPos][2], 0.0, 0.0, 0.0);
				if(!IsValidDynamic3DTextLabel(TrashInfo[i][tSzemetLabel]))
				{
					tformat(64, "Ház: %d\nSzemét", TrashInfo[i][gId]);
					TrashInfo[i][tSzemetLabel] = CreateDynamic3DTextLabel(_tmpString, 0xFFC801AA, ArrExt(TrashInfo[i][tSzemetPos]), 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
				}
				
				if(i < MAXSZEMET) i++;
				else return 1;
			}
		}
		if(hid3 == NINCS) return 1;
		van = false;
		if(HouseInfo[hid3][Van] == 1 && HouseInfo[hid3][hOwned] == 1 && PlayerInfo[q][pID] == HouseInfo[hid3][hTulaj]) //ha esetleg közben elvették volna a házát, de valami miatt a kulcs megmaradt.
		{
			for(new k = 0; k < sizeof(TrashInfo); k++)
			{
				if(TrashInfo[k][gId] == hid3)
					van = true;
			}
			
			if(!van)
			{
				TrashInfo[i][gId] = hid3;
				TrashInfo[i][tSzemetPos][0] = HouseInfo[hid3][hEntrancex];
				TrashInfo[i][tSzemetPos][1] = HouseInfo[hid3][hEntrancey];
				TrashInfo[i][tSzemetPos][2] = HouseInfo[hid3][hEntrancez] - 0.5;
				TrashInfo[i][tSzemet] = true;
				if(!IsValidDynamicObject(TrashInfo[i][tSzemetObject]))
					TrashInfo[i][tSzemetObject] = CreateDynamicObject(1265, TrashInfo[i][tSzemetPos][0], TrashInfo[i][tSzemetPos][1], TrashInfo[i][tSzemetPos][2], 0.0, 0.0, 0.0);
				if(!IsValidDynamic3DTextLabel(TrashInfo[i][tSzemetLabel]))
				{
					tformat(64, "Ház: %d\nSzemét", TrashInfo[i][gId]);
					TrashInfo[i][tSzemetLabel] = CreateDynamic3DTextLabel(_tmpString, 0xFFC801AA, ArrExt(TrashInfo[i][tSzemetPos]), 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
				}
				
				if(i < MAXSZEMET) i++;
				else return 1;
			}
		}
	}
	return 1;
}

stock SzemetLerak()
{
	new i = NINCS, count = 0;
	for(new k = 0; k < sizeof(TrashInfo); k++)
	{
		if(!TrashInfo[k][tSzemet])
		{
			i = k;
			break;
		}
	}
	if(i > NINCS)
	{
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(HouseInfo[h][Van] == 1 && HouseInfo[h][hOwned] == 1 && HouseInfo[h][Uj] == 0 && !TrashInfo[i][tSzemet])
			{
				TrashInfo[i][gId] = h;
				TrashInfo[i][tSzemetPos][0] = HouseInfo[h][hEntrancex];
				TrashInfo[i][tSzemetPos][1] = HouseInfo[h][hEntrancey];
				TrashInfo[i][tSzemetPos][2] = HouseInfo[h][hEntrancez] - 0.5;
				TrashInfo[i][tSzemet] = true;
				//TrashInfo[i][tSzemetPickup] = UjPickup(1265, 23, ArrExt(TrashInfo[i][tSzemetPos]), 0, 0);
				TrashInfo[i][tSzemetObject] = CreateDynamicObject(1265, TrashInfo[i][tSzemetPos][0], TrashInfo[i][tSzemetPos][1], TrashInfo[i][tSzemetPos][2], 0.0, 0.0, 0.0);
				tformat(64, "ID: %d\nSzemét", TrashInfo[i][gId]);
				TrashInfo[i][tSzemetLabel] = CreateDynamic3DTextLabel(_tmpString, 0xFFC801AA, ArrExt(TrashInfo[i][tSzemetPos]), 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
				count++;
				i++;
			}
		}
	}
	printf("%d kuka létrehozva [KukaFrissites]", count);
	ABroadCastFormat(COLOR_LIGHTRED, 1, "<< Minden házhoz szemét lerakva (%ddb) >>", count);
}

stock FaLerak(playerid, Float:xpoz, Float:ypoz, Float:zpoz)
{
	new
		index = GetNewFaIndex(),
		fastring[MAX_PLAYER_NAME + 11];

	if(index > -1)
	{
		FaAdatok[index][faposx] = xpoz;
		FaAdatok[index][faposy] = ypoz;
		FaAdatok[index][faposz] = zpoz;
		FaAdatok[index][fahasznalva] = true;
		FaAdatok[index][faplayerid] = playerid;

		GetPlayerName(playerid, fastring, MAX_PLAYER_NAME);
		format(fastring, sizeof(fastring), "FA\n[%s]", fastring);

		FaAdatok[index][falabel] = CreateDynamic3DTextLabel(fastring, -1, xpoz, ypoz, zpoz, 20.0);
	}
	Streamer_Update(playerid);
	return true;
}

stock Float:GetDistanceToFaHely(playerid, fa)
{
	if(IsPlayerConnected(playerid) && (fa > -1))
	{
		return GetPlayerDistanceFromPoint(playerid, FavagoHelyek[fa][fax], FavagoHelyek[fa][fay], FavagoHelyek[fa][faz]);
	}
	return INF_FLOAT;
}

stock GetClosestFaHely(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new
			kozelifa = -1,
			Float:closestdist = 9999.0,
			Float:dist
		;

		for(new fa=0; fa < sizeof(FavagoHelyek); fa++)
		{
			dist = GetDistanceToFaHely(playerid, fa);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelifa = fa;
			}
		}
		return kozelifa;
	}
	return -1;
}


stock Float:GetDistanceToFa(playerid, fa)
{
	if (IsPlayerConnected(playerid) && (fa > -1))
	{
		return GetPlayerDistanceFromPoint(playerid, FaAdatok[fa][faposx], FaAdatok[fa][faposy], FaAdatok[fa][faposz]);
	}
	return INF_FLOAT;
}

stock GetClosestFa(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new
			kozelifa = -1,
			Float:closestdist = 9999.0,
			Float:dist
		;

		for(new fa=0; fa < sizeof(FaAdatok); fa++)
		{
			dist = GetDistanceToFa(playerid, fa);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelifa = fa;
			}
		}
		return kozelifa;
	}
	return -1;
}

stock GetNewFaIndex()
{
	new
		fa = -1,
		visszateres = -1;
	for(;++fa < MAX_FA;)
	{
		if(!FaAdatok[fa][fahasznalva])
		{
			visszateres = fa;
			break;
		}
	}
	return visszateres;
}

stock BiznelVan(playerid)
{
	new biz = NINCS;
	for(new x = 0; x < sizeof(BizzInfo); x++)
	{
		if(PlayerToPoint(2.0, playerid, BizzInfo[x][bEntranceX], BizzInfo[x][bEntranceY], BizzInfo[x][bEntranceX]))
		{
			biz = x;
			break;
		}
	}
	return biz;
}

stock FaTorol(fa)
{
	FaAdatok[fa][faposx] = 0.0;
	FaAdatok[fa][faposy] = 0.0;
	FaAdatok[fa][faposz] = -10.0;
	FaAdatok[fa][faplayerid] = -1;
	DestroyDynamic3DTextLabel(FaAdatok[fa][falabel]);
	FaAdatok[fa][falabel]=INVALID_3D_TEXT_ID;
	FaAdatok[fa][fahasznalva] = false;
	return true;
}

stock BizPenzAktivitas(biz, penz, till, info = NINCS)
{
	//SendClientMessageToAll(COLOR_YELLOW,"BizPenzAktivitas");
	//bizaktiv
	new regi = penz;
	new string[128];
	
	if(penz < 0)
	{
	
		if(till == 1)
		{
			format(string, sizeof(string), "[biznisz TILL1: %d] Levont: %s,",biz,FormatInt(penz));
			Log("Scripter",string);
			BizzInfo[biz][bTill] += penz;
			BizUpdate(biz, BIZ_Till);
		}
		if(till == 2)
		{
			BizzInfo[biz][bTill2] += penz;
			format(string, sizeof(string), "[biznisz TILL1: %d] Levont: %s,",biz,FormatInt(penz));
			Log("Scripter",string);
		
			BizUpdate(biz, BIZ_Till2);
		}
	
	
	}
	
	new Float:szorzo, Float:tszorzo, Float:mszorzo;
	
	new Float:atlag1 = float(BizzInfo[biz][bHeti1]) / 7.0;
	new Float:atlag2 = float(BizzInfo[biz][bHeti2]) / 7.0;
	
	tszorzo=0;
	mszorzo=0;
	
	if(0.5 <= atlag1 < 1.0)
		tszorzo = 0.50;
	else if(1.0 <= atlag1 < 5.0)
		tszorzo = 1.00;
	else if(5.0 <= atlag1 < 7.0)
		tszorzo = 1.25;
	else if(7.0 <= atlag1)
		tszorzo = 2.00;
		
	if(0.5 <= atlag2 < 1.0)
		mszorzo = 0.50;
	else if(1.0 <= atlag2 < 5.0)
		mszorzo = 1.00;
	else if(5.0 <= atlag2 < 7.0)
		mszorzo = 1.25;
	else if(7.0 <= atlag2)	
		mszorzo = 2.00;	
	
	//printf("tszorzo: %f.1 atlag: %f.1",tszorzo,atlag1);

	if(info > NINCS)
	{
		if(till == 1)
		{
			if(BizzInfo[biz][bIdo1] < UnixTime-86400 && OnlineUID(BizzInfo[biz][bTulaj]) == NINCS)
				return Msg(info, "0 százalék haszon. Nem léptél be az elmúlt 24 órában!");
			if(0.5 <= BizzInfo[biz][bHeti1] / 7 < 1.0 && OnlineUID(BizzInfo[biz][bTulaj]) != NINCS)
				return SendFormatMessage(info, COLOR_LIGHTRED,"%d százalék haszon DE csak addig míg be vagy lépve, ha 0 százalék, azért mert heti átlagod kisebb mint 0.1.",floatround(tszorzo*100.0));
			else if(BizzInfo[biz][bHeti1] < 0.5)
				return Msg(info, "0 százalék haszon. A heti átlagod nem éri el még a 0.5 -öt sem!");
				
			
			SendFormatMessage(info, COLOR_LIGHTRED,"%d százalék haszon. Átlagod: %.f1 óra",floatround(tszorzo*100.0),atlag1);
			return 1;
		}
		if(till == 2)
		{
			if(BizzInfo[biz][bIdo1] < UnixTime-86400 || BizzInfo[biz][bIdo2] < UnixTime-86400 || BizzInfo[biz][bHeti2] / 7 < 1.0 || BizzInfo[biz][bHeti1] / 7 < 0.5) 
				return Msg(info, "0 százalék haszon. Okai lehetnek: Nem lépet be a tulaj/altulaj 24 órája, nem elég aktív az altulaj!");
			
			szorzo = floatmin(tszorzo,mszorzo);
			Msg(info, "Altulajként dominál a tulajdonos aktívsága is!");
			SendFormatMessage(info, COLOR_LIGHTRED,"%d százalék haszon. Átlagod: %.f1 óra",floatround(szorzo*100.0),atlag2);
			return 1;
		}
		
	}
	if(till == 1)
	{
		
		if(OnlineUID(BizzInfo[biz][bTulaj]) == NINCS && BizzInfo[biz][bTulaj] != 234 && BizzInfo[biz][bTulaj] != 8172424)
		{
			if(BizzInfo[biz][bIdo1] < UnixTime-86400)
			{
				format(string, sizeof(string), "[biznisz TILL1: %d] Eredeti összeg: %s, Adott: 0, HetiAktivsag: %d, Szorzó 0 oka: nem lépet be 24 órája",biz,FormatInt(regi),BizzInfo[biz][bHeti1]);
				Log("Scripter",string);
				return 1;
			}
			if(BizzInfo[biz][bHeti1] / 7 < 1.0) 
			{
				format(string, sizeof(string), "[biznisz TILL1: %d] Eredeti összeg: %s, Adott: 0, HetiAktivsag: %d, Szorzó 0 oka: heti átlag kisebb mint 7",biz,FormatInt(regi),BizzInfo[biz][bHeti1]);
				Log("Scripter",string);
				return 1;
			}
		}
		
		penz = floatround(float(penz) * tszorzo);
		
		BizzInfo[biz][bTill] += penz;
		
		format(string, sizeof(string), "[biznisz TILL1: %d] Eredeti összeg: %s, Adott: %s, HetiAktivsag: %d, Szorzó %f",biz,FormatInt(regi),FormatInt(penz),BizzInfo[biz][bHeti1],tszorzo);
		Log("Scripter",string);
		
		BizUpdate(biz, BIZ_Till);
		return 1;
	}
	if(till == 2)
	{
		szorzo = floatmin(tszorzo,mszorzo);
		
		if(OnlineUID(BizzInfo[biz][bMTulajID]) == NINCS)
		{
			if(BizzInfo[biz][bIdo1] < UnixTime-86400)
			{
				format(string, sizeof(string), "[biznisz TILL2: %d] Eredeti összeg: %s, Adott:0, HetiAktivsag: %d, Szorzó: %f Oka: FÕTulaj nem lépett be 24 órája",biz,FormatInt(regi),BizzInfo[biz][bHeti2],szorzo);
				Log("Scripter",string);
				return 1;
			
			}
			if(BizzInfo[biz][bIdo2] < UnixTime-86400)
			{
				format(string, sizeof(string), "[biznisz TILL2: %d] Eredeti összeg: %s, Adott:0, HetiAktivsag: %d, Szorzó: %f Oka: ALTulaj nem lépett be 24 órája",biz,FormatInt(regi),BizzInfo[biz][bHeti2],szorzo);
				Log("Scripter",string);
				return 1;
			
			}
			if(BizzInfo[biz][bHeti1] / 7 < 0.5)
			{
				format(string, sizeof(string), "[biznisz TILL2: %d] Eredeti összeg: %s, Adott:0, HetiAktivsag: %d, Szorzó: %f Oka: FÕTulaj heti átlaga kisebb mint 0.5",biz,FormatInt(regi),BizzInfo[biz][bHeti2],szorzo);
				Log("Scripter",string);
				return 1;
			}
			if(BizzInfo[biz][bHeti2] / 7 < 1.0)
			{
				format(string, sizeof(string), "[biznisz TILL2: %d] Eredeti összeg: %s, Adott:0, HetiAktivsag: %d, Szorzó: %f Oka: ALTulaj heti átlaga kisebb mint 1",biz,FormatInt(regi),BizzInfo[biz][bHeti2],szorzo);
				Log("Scripter",string);
				return 1;
			}
		}
		
		penz = floatround(float(penz) * szorzo);
		
		BizzInfo[biz][bTill2] += penz;
		format(string, sizeof(string), "[biznisz TILL2: %d] Eredeti összeg: %s, Adott: %s, HetiAktivsag: %d, Szorzó: %f",biz,FormatInt(regi),FormatInt(penz),BizzInfo[biz][bHeti2],szorzo);
		Log("Scripter",string);
		//SendFormatMessageToAll(COLOR_YELLOW,"Eredeti összeg: %s, Adott: %s ",FormatInt(regi),FormatInt(penz));
		BizUpdate(biz, BIZ_Till2);
		return 1;
	}

	return 1;
}
stock BizPenz(biz, penz, playerid = NINCS)
{
	
	if(penz == 0) return 1;
	
	if(penz < 0)
	{
		if(BizzInfo[biz][bSzazalek] <= 0)
			BizPenzAktivitas(biz, penz, 1);
		else
		{
			new szazalek = BizzInfo[biz][bSzazalek];
			new mtpenze = penz / 100 * szazalek; 
			new tpenze = penz - mtpenze; 
			
			
			BizPenzAktivitas(biz, tpenze, 1);
			
			BizPenzAktivitas(biz, mtpenze, 2);
		}
		return 1;
	}	
	if(penz > 0)
	{
		if(biz == BIZ_REZSI || biz == BIZ_OLAJ)
			penz = floatround(float(penz) * 0.08);
		else if(biz == BIZ_HIRDETES)
			penz = floatround(float(penz) * 0.25);
		else if(penz != BIZ_RONCSDERBI)
			penz = floatround(float(penz) * 0.7);
	}
		
		
	if(playerid != NINCS)
		GiveMoney(playerid, -penz);
		
	if(biz == BIZ_247)
	{
		new adomany, bizbe;
		adomany = floatround(float(penz)*0.2);
		bizbe = penz;
		bizbe -=adomany;
		
		BizzInfo[BIZ_247][bAdomany] +=adomany;
		FrakcioSzef(FRAKCIO_TAXI,adomany, 11);

		bizbe -=adomany;
	
		BizzInfo[BIZ_247][bAdomany] +=adomany;
		FrakcioSzef(FRAKCIO_RIPORTER,adomany, 11);
		
		BizzInfo[BIZ_247][bBevetel] +=bizbe;
		BizzInfo[biz][bTill] += bizbe;
		
		printf("adomany %d, bizbe: %d,penz: %d",adomany,bizbe,penz);
		new log[256];
		

		format(log,sizeof(log),"[%d. frakció(%s) - ADOMÁNY]TT bolt adomány %s Ft",FRAKCIO_TAXI,Szervezetneve[FRAKCIO_TAXI - 1][2],FormatInt(adomany));
		Log("Szef",log);
		
		format(log,sizeof(log),"[%d. frakció(%s) - ADOMÁNY]TT bolt adomány %s Ft",FRAKCIO_RIPORTER,Szervezetneve[FRAKCIO_RIPORTER - 1][2],FormatInt(adomany));
		Log("Szef",log);
	}
	else
	{
		if(BizzInfo[biz][bSzazalek] <= 0)
		{
			if(BizzInfo[biz][bTill] < 50000001)
			{	
				BizPenzAktivitas(biz, penz, 1);
				//BizzInfo[biz][bTill] += penz;
			}
			else
			{
				new bizpenz;
				if(100000001 > BizzInfo[biz][bTill] > 50000000)
					bizpenz = floatround(float(penz)*0.9);

				else if(250000001 > BizzInfo[biz][bTill] > 100000000)	
					bizpenz = floatround(float(penz)*0.75);
	
				else if(500000001 > BizzInfo[biz][bTill] > 250000000)
					bizpenz = floatround(float(penz)*0.5);
	
				else if(750000001 > BizzInfo[biz][bTill] > 500000000)	
					bizpenz = floatround(float(penz)*0.2);	

				else if(1000000001 > BizzInfo[biz][bTill] > 750000000)	
					bizpenz = floatround(float(penz)*0.05);	

				else if(BizzInfo[biz][bTill] > 1000000000)	
					bizpenz = floatround(float(penz)*0.01);
				
				BizPenzAktivitas(biz, bizpenz, 1);
				//BizzInfo[biz][bTill] += bizpenz;	
			}	
		}
		else
		{
			new szazalek = BizzInfo[biz][bSzazalek];
			new mtpenze = penz / 100 * szazalek; 
			new tpenze = penz - mtpenze; 
			if(BizzInfo[biz][bTill] < 50000001)
			{	
				//BizzInfo[biz][bTill] += tpenze;
				BizPenzAktivitas(biz, tpenze, 1);
			}
			else
			{
				new biztpenz;
				if(100000001 > BizzInfo[biz][bTill] > 50000000)
					biztpenz = floatround(float(tpenze)*0.9);
					
				else if(250000001 > BizzInfo[biz][bTill] > 100000000)
					biztpenz = floatround(float(tpenze)*0.75);
					
				else if(500000001 > BizzInfo[biz][bTill] > 250000000)
					biztpenz = floatround(float(tpenze)*0.5);
						
				else if(750000001 > BizzInfo[biz][bTill] > 500000000)
					biztpenz = floatround(float(tpenze)*0.2);	
					
				else if(1000000001 > BizzInfo[biz][bTill] > 750000000)
					biztpenz = floatround(float(tpenze)*0.05);	
				
				else if(BizzInfo[biz][bTill] > 1000000000)
					biztpenz = floatround(float(tpenze)*0.01);
				
				BizPenzAktivitas(biz, biztpenz, 1);
				//BizzInfo[biz][bTill] += biztpenz;
			}		
			if(BizzInfo[biz][bTill2] < 50000001)
			{	
				//BizzInfo[biz][bTill2] += mtpenze;
				BizPenzAktivitas(biz, mtpenze, 2);
			}
			else
			{
				new bizmtpnez;
				if(100000001 > BizzInfo[biz][bTill2] > 50000000)
					bizmtpnez = floatround(float(mtpenze)*0.9);
					
				else if(250000001 > BizzInfo[biz][bTill2] > 100000000)
					bizmtpnez = floatround(float(mtpenze)*0.75);
					
				else if(500000001 > BizzInfo[biz][bTill2] > 250000000)
					bizmtpnez = floatround(float(mtpenze)*0.5);
						
				else if(750000001 > BizzInfo[biz][bTill2] > 500000000)
					bizmtpnez = floatround(float(mtpenze)*0.2);	
					
				else if(1000000001 > BizzInfo[biz][bTill2] > 750000000)
					bizmtpnez = floatround(float(mtpenze)*0.05);	
				
				else if(BizzInfo[biz][bTill2] > 1000000000)
					bizmtpnez = floatround(float(mtpenze)*0.01);
				
				BizPenzAktivitas(biz, bizmtpnez, 2);
				//BizzInfo[biz][bTill2] += bizmtpnez;
			}
		}	
	}	
	
	return 1;
}
fpublic UnFreeze(playerid)
{
	TogglePlayerControllable(playerid, true);
	return 1;
}

/*	
fpublic FbiKapuBecsuk()
{
	MoveDynamicObject(Fbibelso, 1780.56824, -1298.08557, 13.70000, 3);
	return 1;
}*/

stock IsJimCar(vs)
{
	if(CarInfo[vs][cJim])
		return 1;
	return 0;
}

stock RangNev(playerid)
{
	new rangnev[32], munka = PlayerInfo[playerid][pMember] - 1, rang = PlayerInfo[playerid][pRank];

	if(rang <= 0) rangnev = Rangok[munka][0];
	else if(rang >= 1 && rang <= 11) rangnev = Rangok[munka][rang];
	else rangnev = Rangok[munka][12];

	return rangnev;
}

stock AdminName(playerid)
{
	new name[MAX_PLAYER_NAME];
	
	if(PlayerInfo[playerid][pAdminAlnevBe])
		strmid(name, PlayerInfo[playerid][pAdminAlnev], 0, strlen(PlayerInfo[playerid][pAdminAlnev]), 25);
	else
		strmid(name, PlayerInfo[playerid][pNev], 0, strlen(PlayerInfo[playerid][pNev]), 25);
		
	if(IsAllTerno(playerid))
		strmid(name, "Terno_Tommys", 0, strlen("Terno_Tommys"), 25);

	if(IsAllDenaro(playerid))
		strmid(name, "Denaro_Brasco", 0, strlen("Denaro_Brasco"), 25);	

	return name;
}

stock Nevvaltas(playerid, ujnev[])
{
	new x;

	for(x = 0; x < sizeof(HouseInfo); x++)
	{
		if(HouseInfo[x][hOwned] && HouseInfo[x][hTulaj] > NINCS && PlayerInfo[playerid][pID] == HouseInfo[x][hTulaj])
		{
			//HazUpdate(x, "Tulaj='%s'", ujnev);
			HazUpdate(x, HAZ_Owner);
			strmid(HouseInfo[x][hOwner], ujnev, 0, strlen(ujnev), 255);
		}
	}
	/*for(x = 0; x < sizeof(BizzInfo); x++)
	{
		if(BizzInfo[x][bOwned] && strlen(BizzInfo[x][bOwner]) > 0 && egyezik(PlayerName(playerid), BizzInfo[x][bOwner]))
		{
			strmid(BizzInfo[x][bOwner], ujnev, 0, strlen(ujnev), 255);
			//BizUpdate(x, "Tulaj='%s'", ujnev);
			BizUpdate(x, BIZ_Owner);
		}
	}*/
	for(x = 0; x < sizeof(CarInfo); x++)
	{
		if(CarInfo[x][cOwned] && strlen(CarInfo[x][cOwner]) > 0 && PlayerInfo[playerid][pID] == CarInfo[x][cTulaj])
		{
			//CarUpdate(x, "Tulaj='%s'", ujnev);
			CarUpdate(x, CAR_Owner, CAR_Tulaj);
			strmid(CarInfo[x][cOwner], ujnev, 0, strlen(ujnev), 255);
		}
	}

	strcpy( Nev( playerid ), ujnev, MAX_PLAYER_NAME );
	
	nformat( query, 128, "UPDATE %s SET Nev='%s' WHERE ID='%d'", SQL_DB_Player, ujnev, SQLID( playerid ));
	doQuery( query );
	SetPlayerName(playerid, ujnev);

}

/*stock PlayerSQLID(playerid)
{
	return PlayerInfo[playerid][pID];
}*/

stock MysqlFinalUpdate(query[], sqlid)
{
	new string[64];
	Format(string, " WHERE id = '%d'", sqlid);
	strcat(query, string, MAX_MYSQL_STRING);
	doQuery(query);
	return 1;
}

stock MysqlUpdateFlo(query[], nev[], Float:ertek)
{
	if(strfind(query, "=", true) != -1)
		strcat(query, ", ", MAX_MYSQL_STRING);
	new string[32];
	Format(string, "%s='%.3f'", nev, ertek);
	strcat(query, string, MAX_MYSQL_STRING);
	return 1;
}

stock MysqlUpdateStr(query[], nev[], ertek[])
{
	if(strfind(query, "=", true) != -1)
		strcat(query, ", ", MAX_MYSQL_STRING);
	new string[256];
	Format(string, "%s='%s'", nev, ertek);
	strcat(query, string, MAX_MYSQL_STRING);
	return 1;
}

stock MysqlUpdateInt(query[], nev[], ertek)
{
	if(strfind(query, "=", true) != -1)
		strcat(query, ", ", MAX_MYSQL_STRING);
	new string[32];
	Format(string, "%s='%d'", nev, ertek);
	strcat(query, string, MAX_MYSQL_STRING);
	return 1;
}

stock MoneyTrans(kitol, kinek, mennyit)
{
	if(!IsPlayerConnected(kitol) || !IsPlayerConnected(kinek)) return 1;

	GiveMoney(kitol, -mennyit);
	GiveMoney(kinek, mennyit);

	return 1;
}

stock SzerverNev()
{
	SzerverCounter++;

	szervernev_start:

	if(SzerverCounter <= 1) //« Class City »
		SendRconCommand("hostname [HUN] « ClassRPG ~ TS3: ip.classrpg.net »");
	else if(SzerverCounter == 5)
		SendRconCommand("hostname [HUN] « Több mint játék... Ahol a játék életre kel! »");
	else if(SzerverCounter == 8)
		SendRconCommand("hostname [HUN] « Váltsd valóra álmaidat! ~ Web: classrpg.net »");
	else if(SzerverCounter == 12)
		SendRconCommand("hostname [HUN] « Magyarország legclassabb szerverén »");
	else if(SzerverCounter == 15)
		SendRconCommand("hostname [HUN] « Gyere, érezd magad Te is Classul! »");
	else if(SzerverCounter >= 18)
	{
		SzerverCounter = 1;
		goto szervernev_start;
	}

	return 1;
}

stock Bortonben(playerid)
{
	if(PlayerInfo[playerid][pJailed] > 0)
		return 1;
	else
		return 0;
}

stock Bilincs(playerid, bilincs, ido = -1)
{
	if(ido == -1)
	{
		if(bilincs == 0)
			ido = 0;
		else if(bilincs == 1)
			ido = 60;
		else if(bilincs == 2)
			ido = 300;
		else if(bilincs == 3)
			ido = 60;
	}

	if(bilincs == 0)
	{
		PlayerCuffed[playerid] = 0;
		PlayerCuffedTime[playerid] = ido;
		UnFreeze(playerid);
		TogglePlayerControllable(playerid, 1);
	}
	else if(bilincs == 1)
	{
		PlayerCuffed[playerid] = 1;
		PlayerCuffedTime[playerid] = ido;
		TogglePlayerControllable(playerid, 0);
	}
	else if(bilincs == 2)
	{
		PlayerCuffed[playerid] = 2;
		PlayerCuffedTime[playerid] = ido;
		TogglePlayerControllable(playerid, 0);
	}
	return 1;
}

stock ConfigVal( nev[], ujertek = -999 )
{
	if( !fexist("Config/config.cfg") ) return 0;
	
	new val;
	
	if( ujertek == -999 )
	{
		if( dini_Isset("Config/config.cfg", nev) )
			val = dini_Int("Config/config.cfg", nev);
	}
	else
		dini_IntSet("Config/config.cfg", nev, ujertek);

	return val;
}

fpublic RandomHirdetes()
{
	new hirdetes, fajl[64], string[32], szoveg[256], mehet = 1, x = 1, osszes;
	format(fajl, sizeof(fajl), "Config/hirdetesek.cfg");

	while(mehet)
	{
		format(string, sizeof(string), "hirdetes%d", x);

		if(!dini_Isset(fajl, string)) { osszes = x; mehet = 0; }
		x++;
	}

	if(osszes > 0)
	{
		hirdetes = 1 + random(osszes-1);
		format(string, sizeof(string), "hirdetes%d", hirdetes);
		szoveg = dini_Get(fajl, string);

		SendFormatMessageToAll(COLOR_WHITE, "%s", szoveg);
	}

	return 1;
}

stock Cselekves(playerid, cselekves[], valaki = 0, bool:OOC = false)
{
	new string[128];
	if(valaki == 1 || Szajkendo[playerid] || Maszk[playerid])
		format(string, sizeof(string), "* Valaki %s", cselekves);
	elseif(valaki == 0)
	{
		if(PlayerInfo[playerid][pHamisNev] == 0)
			format(string, sizeof(string), "* %s %s", ICPlayerName(playerid), cselekves);
		else
			format(string, sizeof(string), "* %s %s", ICPlayerNameString(PlayerInfo[playerid][pHamisNev]), cselekves);
	}	
	elseif(valaki == 2 || valaki == NINCS)
		format(string, sizeof(string), "* %s", cselekves);
		
	if(OOC)
	{
		if(PlayerInfo[playerid][pHamisNev] == 0)
			format(string, sizeof(string), "(( OOC Cselekvés: %s %s ))", PlayerName(playerid), cselekves);
		else
			format(string, sizeof(string), "(( OOC Cselekvés: %s %s ))", PlayerInfo[playerid][pHamisNev], cselekves);
	}
	
	if(!Csendvan) ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);

	return 1;
}

fpublic HaznalVan(playerid)
{
	new haz = -1;

	for(new x = 0; x < sizeof(HouseInfo); x++)
	{
		if(PlayerToPoint(2, playerid, HouseInfo[x][hEntrancex], HouseInfo[x][hEntrancey], HouseInfo[x][hEntrancez]))
		{
			haz = x;
			break;
		}
	}

	return haz;
}

fpublic TextDrawUpdateAll()
{
	tdcounter ++;
	new bool:tdgo;
	UnixTime = gettime();
	
	if(tdcounter % 5 == 0) tdgo = true; else tdgo = false;
	
	if(tdcounter == 10)
	{
		foreach(Jatekosok, x)
		{
			TextDrawUpdate(x, TD_Info);
			TextDrawUpdate(x, TD_Info2);
			TextDrawUpdate(x, TD_Info3);
		}
	}
	else 
	{
		foreach(Jatekosok, x)
		{
			if(KocsibanVan[x] || Tevezik[x] || Rabol[x] || tdgo)
			{
				TextDrawUpdate(x, TD_Info);
				TextDrawUpdate(x, TD_Info2);
				TextDrawUpdate(x, TD_Info3);
			}
		}
	}
	if(tdcounter >= 10) tdcounter = 0;

}

stock TextDrawUpdate(playerid, textdraw)
{
	if(IsPlayerNPC(playerid)) return 1;

	if(textdraw == TD_Info)
	{
		new string[512], sor1[256], sor2[256], frakcio[64], masodik[64], fizuinfo[64], szervezet;
		new jatekos;
		if(Tevezik[playerid] < 0)
			jatekos=playerid;
		else
			jatekos=Tevezik[playerid];
		szervezet = PlayerInfo[jatekos][pMember];
		
		if(szervezet > 0)
			Format(frakcio, "%s [Rang: %d]", Szervezetneve[szervezet-1][2], PlayerInfo[jatekos][pRank]);
		else
			frakcio = "Nincs";
		
		if(KocsiRadio[GetPlayerVehicleID(playerid)] >= 1 && IsPlayerInAnyVehicle(playerid) || Zsebradio[playerid] >= 1 || (Hifirolhallgatzenet[playerid] && HifiZene[IsAt(playerid, IsAt_Haz)]))
		{
			Format(masodik, " ~r~~h~Frakci¦: ~l~%s %s", frakcio, fizuinfo);
			
			if(JatekosZsak[jatekos] >= 0)
				Format(masodik, " ~r~~h~Zs?k tartalma: ~l~%dFt (~l~%.0f%%)", JatekosZsak[jatekos], floatround((float(JatekosZsak[jatekos]) / float(MAXZSAKPENZ)) * 100.0));
			if(Loterben[jatekos] >= 0)
				Format(masodik, " ~r~~h~Pont: ~l~%ddb ~r~~h~id§: ~l~%dmp", LoterInfo[Loterben[jatekos]][lTalalat], LoterInfo[Loterben[jatekos]][lIdo]-UnixTime);
			if(Paintballozik[jatekos])
				Format(masodik, " ~r~~h~Pont: ~l~%ddb ~r~~h~id§: ~l~%dmp", PaintballOlesek[playerid], PaintballInfo[PBTerem[jatekos]][pbMerkozesIdo][0]-UnixTime);
			if(PlayerInfo[jatekos][pJailed] > 0 || PlayerInfo[jatekos][pKozmunka] != 0)
				Format(masodik, " ~r~~h~B¨rt¨n: ~l~%dmp", PlayerInfo[jatekos][pJailTime]);
			if(KorhazIdo[jatekos] > 0)
				Format(masodik, " ~r~~h~K¦rh?z: ~l~%dmp", KorhazIdo[jatekos]);
			if(PlayerRaceInfo[jatekos][xVersenyen] != NINCS)
				Format(masodik, " ~r~~h~~r~Helyezs: ~l~%d.", PlayerRaceInfo[jatekos][xHelyezes]);
			if(GetVehicleModel(GetPlayerVehicleID(jatekos)) == 408 && !RoncsDerby[playerid][rdVersenyez] && PlayerRaceInfo[jatekos][xVersenyen] == NINCS)
				Format(masodik, " ~r~~h~Szemttart?ly: ~l~%ddb/20db", SzemetAKocsiban[GetPlayerVehicleID(jatekos)]);
			if(Taxi[jatekos][tDuty] && (GetVehicleModel(GetPlayerVehicleID(jatekos)) == 420 || GetVehicleModel(GetPlayerVehicleID(jatekos)) == 438))
			{
				new sofor = jatekos;
		
				new vehicleid = GetPlayerVehicleID(sofor);
				new Float:megtettut;
				new fizet;
				
				if(Taxi[sofor][tUtas] != NINCS)
				{
					megtettut =  (KmSzamol[vehicleid]-Taxi[sofor][tKm])/1000;
					fizet = floatround( (float(FrakcioInfo[FRAKCIO_TAXI][fDij]) * megtettut));
				}
				Format(masodik, " ~r~~h~Taxi:~l~%sFt(%.1f km) ~r~~h~sszesen: ~l~%sFt", FormatInt(fizet),megtettut,FormatInt(Taxi[jatekos][tFizetes]));
			}
			
			if(TransportDriver[jatekos] != NINCS)
			{
				new sofor = TransportDriver[jatekos];
				if(Taxi[sofor][tUtas] == NINCS)
					Taxi[sofor][tUtas] = GetPlayerVehicleID(sofor);
					
				new vehicleid = Taxi[sofor][tJarmu];
				if(vehicleid != NINCS  && (GetVehicleModel(vehicleid) == 420 || GetVehicleModel(vehicleid) == 438))
				{
					new Float:megtettut =  (KmSzamol[vehicleid]-Taxi[sofor][tKm])/1000;
					new fizet = floatround( (float(FrakcioInfo[FRAKCIO_TAXI][fDij]) * megtettut));
					Format(masodik, " ~r~~h~Taxi:~l~%sFt(%.1f km)",FormatInt(fizet),megtettut);
				}
			}
			if(RoncsDerby[playerid][rdVersenyez])
			{
				if(RoncsDerbi[rIdo] > 1)
					Format(masodik, " ~r~~h~Futam indul: ~l~%dmp ~r~~h~Ellenfelek: ~l~%d f§",RoncsDerbi[rIdo],RoncsDerbi[rJatekos]-1);
				else if(RoncsDerbi[rInditva])
					Format(masodik, " ~r~~h~Ellenfelek: ~l~%d f§",RoncsDerbi[rJatekos]-1);
			}
			
			if(Zsebradio[playerid] >= 1 && Zsebradio[playerid] != 2)
			{
				Format(sor1, "	~r~~h~Id§: ~l~%s-%s-%s %s:%s	~r~~h~Bank: ~l~%sFt %s",Time("ev"), Time("honap"), Time("nap"), Time("ora"), Time("perc"), FormatNumber( PlayerInfo[jatekos][pAccount], 0, ',' ), masodik);
				Format(sor2, "                                                                 ~r~~h~%s",RadioClass[Zsebradio[playerid]-1][2]);
			}
			else if(Zsebradio[playerid] == 2)
			{
				new h,m,s;
				FormatSeconds(MP4YT[playerid][yMeddig]-UnixTime, h, m, s);
				Format(sor1, "	~r~~h~Id§: ~l~%s-%s-%s %s:%s	~r~~h~Bank: ~l~%sFt %s",Time("ev"), Time("honap"), Time("nap"), Time("ora"), Time("perc"), FormatNumber( PlayerInfo[jatekos][pAccount], 0, ',' ), masodik);
				Format(sor2, "	~r~~h~C¢m: ~l~%s ~r~~h~H?tra van: ~l~%02d:%02d:%02d", MP4YT[playerid][yNev], h, m, s);
			}
			else if(Hifirolhallgatzenet[playerid] && HifiZene[IsAt(playerid, IsAt_Haz)])
			{
				new h,m,s;
				FormatSeconds(H_stream[IsAt(playerid, IsAt_Haz)]-UnixTime, h, m, s);
				Format(sor1, "	~r~~h~Id§: ~l~%s-%s-%s %s:%s	~r~~h~Bank: ~l~%sFt %s",Time("ev"), Time("honap"), Time("nap"), Time("ora"), Time("perc"), FormatNumber( PlayerInfo[jatekos][pAccount], 0, ',' ), masodik);
				Format(sor2, "	~r~~h~C¢m: ~l~%s ~r~~h~H?tra van: ~l~%02d:%02d:%02d", H_title[IsAt(playerid, IsAt_Haz)], h, m, s);
			}
			else
			{
				Format(sor1, "	~r~~h~Id§: ~l~%s-%s-%s %s:%s	~r~~h~Bank: ~l~%sFt %s",Time("ev"), Time("honap"), Time("nap"), Time("ora"), Time("perc"), FormatNumber( PlayerInfo[jatekos][pAccount], 0, ',' ), masodik);
				Format(sor2, "                                                                 ~r~~h~%s",RadioClass[KocsiRadio[GetPlayerVehicleID(playerid)]-1][2]);
			}
			Format(string, "%s~n~%s", sor1, sor2);
		}
		else
		{
			new elso[64], bool:vanmasodik = false;
			elso = " ~r~~h~Weblapunk: ~l~classrpg.net";
			masodik = " ~r~~h~TS (v3) ~l~ip.classrpg.net";
			
			if(JatekosZsak[jatekos] >= 0)
			{
				Format(masodik, " ~r~~h~Zsák tartalma: ~l~%dFt (~l~%.0f%%)", JatekosZsak[jatekos], floatround((float(JatekosZsak[jatekos]) / float(MAXZSAKPENZ)) * 100.0));
				vanmasodik = true;
			}
			if(Loterben[jatekos] >= 0)
			{
				Format(masodik, " ~r~~h~Pont: ~l~%ddb ~r~~h~id§: ~l~%dmp", LoterInfo[Loterben[jatekos]][lTalalat], LoterInfo[Loterben[jatekos]][lIdo]-UnixTime);
				vanmasodik = true;
			}
			if(Paintballozik[jatekos])
			{
				Format(masodik, " ~r~~h~Pont: ~l~%ddb ~r~~h~id§: ~l~%dmp", PaintballOlesek[playerid], PaintballInfo[PBTerem[jatekos]][pbMerkozesIdo][0]-UnixTime);
				vanmasodik = true;
			}
			if(PlayerInfo[jatekos][pJailed] > 0 || PlayerInfo[jatekos][pKozmunka] != 0)
			{
				Format(masodik, " ~r~~h~Börtön: ~l~%dmp", PlayerInfo[jatekos][pJailTime]);
				vanmasodik = true;
			}
			if(KorhazIdo[jatekos] > 0)
			{
				Format(masodik, " ~r~~h~Kórház: ~l~%dmp", KorhazIdo[jatekos]);
				vanmasodik = true;
			}
			if(PlayerRaceInfo[jatekos][xVersenyen] != NINCS)
			{
				Format(masodik, " ~r~~h~~r~Helyezés: ~l~%d.", PlayerRaceInfo[jatekos][xHelyezes]);
				vanmasodik = true;
			}
			if(GetVehicleModel(GetPlayerVehicleID(jatekos)) == 408 && !RoncsDerby[playerid][rdVersenyez] && PlayerRaceInfo[jatekos][xVersenyen] == NINCS)
			{
				Format(masodik, " ~r~~h~Szeméttartály: ~l~%ddb/20db", SzemetAKocsiban[GetPlayerVehicleID(jatekos)]);
				vanmasodik = true;
			}
			if(Taxi[jatekos][tDuty])
			{
				new sofor = jatekos;
		
				new vehicleid = GetPlayerVehicleID(sofor);
				new Float:megtettut;
				new fizet;
				
				if(Taxi[sofor][tUtas] != NINCS)
				{
					megtettut =  (KmSzamol[vehicleid]-Taxi[sofor][tKm])/1000;
					fizet = floatround( (float(FrakcioInfo[FRAKCIO_TAXI][fDij]) * megtettut));
				}
				Format(masodik, " ~r~~h~Taxi:~l~%sFt(%.1f km) ~r~~h~összesen: ~l~%sFt", FormatInt(fizet),megtettut,FormatInt(Taxi[jatekos][tFizetes]));
				vanmasodik = true;
			}
			
			if(TransportDriver[jatekos] != NINCS)
			{
				new sofor = TransportDriver[jatekos];
				if(Taxi[sofor][tUtas] == NINCS)
					Taxi[sofor][tUtas] = GetPlayerVehicleID(sofor);
					
				new vehicleid = Taxi[sofor][tJarmu];
				if(vehicleid != NINCS)
				{
					new Float:megtettut =  (KmSzamol[vehicleid]-Taxi[sofor][tKm])/1000;
					new fizet = floatround( (float(FrakcioInfo[FRAKCIO_TAXI][fDij]) * megtettut));
					Format(masodik, " ~r~~h~Taxi:~l~%sFt(%.1f km)",FormatInt(fizet),megtettut);
					vanmasodik = true;
				}
			}
			if(RoncsDerby[playerid][rdVersenyez])
			{
				if(RoncsDerbi[rIdo] > 1)
				{
					Format(masodik, " ~r~~h~Futam indul: ~l~%dmp ~r~~h~Ellenfelek: ~l~%d f§",RoncsDerbi[rIdo],RoncsDerbi[rJatekos]-1);
					vanmasodik = true;
				}
				else if(RoncsDerbi[rInditva])
				{
					Format(masodik, " ~r~~h~Ellenfelek: ~l~%d f§",RoncsDerbi[rJatekos]-1);
					vanmasodik = true;
				}
			}
			if(PlayerInfo[playerid][pAS] > UnixTime)
			{
				new as;
				as = floatround((PlayerInfo[playerid][pAS]-UnixTime) / 3600);
				if(vanmasodik) Format(elso, " ~r~~h~Adminsegéd: ~l~%d IRL óra ", as);
				else Format(masodik, " ~r~~h~Adminsegéd: ~l~%d IRL óra", as);
				if(as < 1)
				{
					as=floatround( (PlayerInfo[playerid][pAS]-UnixTime)/ 60);
					if(vanmasodik) Format(elso, " ~r~~h~Adminsegéd: ~l~%d IRL perc ", as);
					else Format(masodik, " ~r~~h~Adminsegéd: ~l~%d IRL perc", as);
				}
			}
			Format(sor1, " ~r~~h~Bank: ~l~%sFt ~r~~h~Frakció: ~l~%s ~r~~h~Fizetés: ~l~%dp(%s Ft)", FormatNumber( PlayerInfo[jatekos][pAccount], 0, ',' ), frakcio, floatround((MinimumFizuhoz - PlayerInfo[jatekos][pPayDay]) / 60, floatround_floor),FormatNumber( PlayerInfo[jatekos][pPayCheck], 0, ',' ));
			Format(sor2, " ~r~~h~Idõ: ~l~%s-%s-%s %s:%s %s%s", Time("ev"), Time("honap"), Time("nap"), Time("ora"), Time("perc"), elso, masodik);
			Format(string, "%s~n~%s", sor1, sor2);
		}
		TextDrawSetString(InfoTextDraw[playerid], string);
	}
	else if(textdraw == TD_Info2)
	{
		new string[384]; //, sor1[256], sor2[256], ido[64], korhazido, frakcio[64], szervezet;
		new jatekos;
		if(Tevezik[playerid] < 0)
			jatekos=playerid;
		else
			jatekos=Tevezik[playerid];
		new ideiglenes;
		ideiglenes = (Szint(jatekos) + 1) * levelexp;

		Format(string, "~r~~h~%s~b~ (%d)~n~~r~~h~Szint: ~l~%d (mg %d ¦ra)~n~~r~~h~let: ~l~%.0f / %.0f~n~~r~~h~Páncl: ~l~%.0f%%",PlayerName(jatekos),jatekos, Szint(jatekos), (ideiglenes - PlayerInfo[jatekos][pExp]), MAXHP, iPlayerHealth[jatekos], iPlayerArmour[jatekos]);

		TextDrawSetString(InfoTextDraw2[playerid], string);
		
	}
	else if(textdraw == TD_Info3)
	{
		new string[400]; 
		new jatekos;
		if(Tevezik[playerid] < 0)
		{
			jatekos=playerid;
		}
		else
		{
			jatekos=Tevezik[playerid];
		}
		
		new jarmu = GetPlayerVehicleID(jatekos);
		if((PlayerState[jatekos] == PLAYER_STATE_DRIVER && jarmu) || (Oktat[jatekos] == 1 && PlayerState[jatekos] == PLAYER_STATE_PASSENGER))
		{
			new sebesseg = GetVehicleSpeed(jarmu);
			
			GetVehicleHealth(jarmu, KocsiElete[jarmu]);
			new Float:serules;
			if(IsAPancelozottKocsi(jarmu) && !RoncsDerby[playerid][rdVersenyez])
				serules = (100000.0 - KocsiElete[jarmu]) / 996.5;
				
			serules = (1000.0 - KocsiElete[jarmu]) / 6.5;
			
			if(RoncsDerby[playerid][rdVersenyez])
			{
				new model;
				if(RoncsDerbi[rModel] != NINCS)
					model = RoncsDerbi[rModel];
				else
					model = RoncsDerby[playerid][rdModel];
				
				switch(model)
				{
					case 403, 407, 408, 427, 433, 437, 443, 470, 515, 544, 601: serules = (1500.0 - KocsiElete[jarmu]) / 11.5;
					case 502, 503, 504, 549: serules = (3900.0 - KocsiElete[jarmu]) / 35.5;
					case 406, 428, 431, 444, 455, 486, 524, 528, 530, 531, 532, 556, 557, 573: serules = (1000.0 - KocsiElete[jarmu]) / 6.5;
					default: serules = (3500.0 - KocsiElete[jarmu]) / 31.5;
				}
			}
			
			if(serules < 0.0)
				serules = 0.0;
			else if(serules > 100.0)
				serules = 100.0;
			
			new BenzinInfo[64];
			if(IsABenzines(jarmu))
			{
				Format(BenzinInfo,"~~r~~h~Benzin: ~l~%dl / %dl (%.0f%%)",MaxBenzin(jarmu), Gas[jarmu], (Gas[jarmu] / float(MaxBenzin(jarmu)) * 100.0));
			}
			else if(IsADieseles(jarmu))	
			{
				Format(BenzinInfo,"~~r~~h~Diesel: ~l~%dl / %dl (%.0f%%)",MaxBenzin(jarmu), Gas[jarmu], (Gas[jarmu] / float(MaxBenzin(jarmu)) * 100.0));
			}
			else if(IsAKerozinos(jarmu))	
			{
				Format(BenzinInfo,"~~r~~h~Kerozin: ~l~%dl / %dl (%.0f%%)",MaxBenzin(jarmu), Gas[jarmu], (Gas[jarmu] / float(MaxBenzin(jarmu)) * 100.0));
			}
			else
			{	
				format(BenzinInfo,64,"~~r~~h~Ismeretlen");
			
			}
			new Float:level = CarPart[jarmu][cAkkumulator];
			new aksi[32];
			if(level >= 0.0 && level <= 10.0) 
				aksi="Akku: ~l~Nagyon gyenge";
			else if(level <= 40.0) 
				aksi="Akku: ~l~Gyenge"; 
			else if(level >= 41.0 && level <= 70.0) 
				aksi="Akku: ~l~K¨zepes"; 
			else if(level >= 71.0) 
				aksi="Akku: ~l~Magas"; 
				

			if(Gyujtas[jarmu] == false)
			{
				if(IsABenzines(jarmu))
				{
					BenzinInfo = "~~r~~h~Benzin: ~l~nincs";
				}	
				else if(IsADieseles(jarmu))
				{
					BenzinInfo = "~~r~~h~Diesel: ~l~nincs";
				}
				else if(IsAKerozinos(jarmu))
				{
					BenzinInfo = "~~r~~h~Kerozin: ~l~nincs";
				}
				else
				{
					BenzinInfo = "~~r~~h~Ismeretlen";
				}					
				aksi="Akku: ~l~nincs";
			}
			new trailer[40];
			if(GetVehicleTrailer(jarmu) != 0)
			{
				new uzem = GetVehicleTrailer(jarmu);
				if(Benzin[uzem] > 0)
				{
					Format(trailer,"~~r~~h~Benzin: ~l~%d",Benzin[uzem]);
				}
				else if(Diesel[uzem] > 0)
				{
					Format(trailer,"~~r~~h~Diesel: ~l~%d",Benzin[uzem]);
				}
				else if(Kerozin[uzem] > 0)
				{
					Format(trailer,"~~r~~h~Kerozin: ~l~%d",Benzin[uzem]);
				}				
			}
			new magassag[64];
			if(IsARepulo(jarmu))
			{
				new Float:x,Float:y,Float:z;
				GetPlayerPos(jatekos, x, y, z);
				Format(magassag, "~n~~r~~h~Magasság: ~l~%.3f ",z);
			}	
			if(!IsABicikli(jarmu))
			{
				
				if(IsTerno(playerid))
					Format(string, "~l~---[ Járm« ]---~n~~r~~h~Model: ~l~%s~n %s ~n~~r~~h~Sr¬ls: ~l~%.0f%%~n~~r~~h~Sebessg: ~l~%d km/h ~n~~r~~h~Km: ~l~%.2f Km%s ~n~~r~~h~%s[%.1f]", GetVehicleModelName(jarmu, true),BenzinInfo, serules, sebesseg, KmSzamol[jarmu]/1000,magassag,aksi,CarPart[jarmu][cAkkumulator]);

				else
					Format(string, "~l~---[ Járm« ]---~n~~r~~h~Model: ~l~%s~n %s ~n~~r~~h~Sr¬ls: ~l~%.0f%%~n~~r~~h~Sebessg: ~l~%d km/h ~n~~r~~h~Km: ~l~%.2f Km%s ~n~~r~~h~%s", GetVehicleModelName(jarmu, true),BenzinInfo, serules, sebesseg, KmSzamol[jarmu]/1000,magassag,aksi);

			}
			else
				Format(string, "~l~---[ Járm« ]---~n~~r~~h~Model: ~l~%s~n ~~r~~h~Sr¬ls: ~l~%.0f%%~n~~r~~h~Sebessg: ~l~%d km/h", GetVehicleModelName(jarmu, true), serules, sebesseg);
			
			if(sebesseg > 30 && TrafiPax[jatekos][tBuntetheto] == 0 && !OnDuty[jatekos] && !AdminDuty[jatekos])
			{
				TrafipaxCheck(jatekos, sebesseg, jarmu);
				FixTrafipaxCheck(jatekos, sebesseg, jarmu);
			}
		
		}
		TextDrawSetString(InfoTextDraw3[playerid], string);
	}
	/*else if(textdraw == TD_Info4)
	{
		new string[400], jatekos, korhazido;
		if(Tevezik[playerid] < 0)
			jatekos=playerid;
		else
			jatekos=Tevezik[playerid];
			
		korhazido =KorhazIdo[jatekos];
		
		if(JatekosZsak[jatekos] >= 0)
			Format(string, "~l~---[ Zs?k ]---~n~~r~Pnz: ~l~%dFt (%.0f%%)", JatekosZsak[jatekos], floatround((float(JatekosZsak[jatekos]) / float(MAXZSAKPENZ)) * 100.0));
		if(Loterben[jatekos] >= 0)
			Format(string, "~l~---[ L§tr ]---~n~~r~Pont: ~l~%ddb - Id§: %dmp",LoterInfo[Loterben[jatekos]][lTalalat], LoterInfo[Loterben[jatekos]][lIdo]-UnixTime);
		if(Paintballozik[jatekos])
			Format(string, "~l~---[ Paintball ]---~n~~r~Pont: ~l~%ddb - ~r~Id§: ~l~%dmp", PaintballOlesek[playerid], PaintballInfo[PBTerem[jatekos]][pbMerkozesIdo][0]-UnixTime);
		if(PlayerInfo[jatekos][pJailed] > 0 || PlayerInfo[jatekos][pKozmunka] != 0)
			Format(string, "~r~B¨rt¨n: ~l~%dmp", PlayerInfo[jatekos][pJailTime]);
		if(korhazido > 0)
			Format(string, "~r~K¦rh?z: ~l~%dmp", korhazido);
		if(PlayerRaceInfo[jatekos][xVersenyen] != NINCS)
			Format(string, "~r~Helyezsed: ~l~%d", PlayerRaceInfo[jatekos][xHelyezes]);
		if(GetVehicleModel(GetPlayerVehicleID(jatekos)) == 408)
			Format(string, "~r~Szemttart?ly: ~l~%ddb/20db", SzemetAKocsiban[GetPlayerVehicleID(jatekos)]);
		if(Taxi[jatekos][tDuty])
		{
			new sofor = jatekos;

			new vehicleid = GetPlayerVehicleID(sofor);
			new Float:megtetut;
			new fizet;
			
			if(Taxi[sofor][tUtas] != NINCS)
			{
				megtetut =  (KmSzamol[vehicleid]-Taxi[sofor][tKm])/1000;
				fizet = floatround( (float(FrakcioInfo[FRAKCIO_TAXI][fDij]) * megtetut));
			}
			Format(string, "~r~Taxi:~l~%sFt - %.1f Km", FormatInt(fizet),megtetut);
			Format(string, "%s~n~~r~Taxi DUTY:~l~%sFt", string,FormatInt(Taxi[jatekos][tFizetes]));
			
		}
		
		if(TransportDriver[jatekos] != NINCS)
		{
			//new utas = jatekos;
			new sofor = TransportDriver[jatekos];
			if(Taxi[sofor][tUtas] == NINCS)
				Taxi[sofor][tUtas] = GetPlayerVehicleID(sofor);
				
			new vehicleid = Taxi[sofor][tJarmu];
			if(vehicleid != NINCS)
			{
				new Float:megtetut =  (KmSzamol[vehicleid]-Taxi[sofor][tKm])/1000;
				new fizet = floatround( (float(FrakcioInfo[FRAKCIO_TAXI][fDij]) * megtetut));
				Format(string, "~n~~r~Taxi: ~l~%sFt - %.1f Km",FormatInt(fizet),megtetut);
			}
		}
		if(RoncsDerby[playerid][rdVersenyez])
		{
			if(RoncsDerbi[rIdo] > 1)
				Format(string, "~r~Futam indul: ~l~%d sec~n~~r~Ellenfelek: ~l~%d F§",RoncsDerbi[rIdo],RoncsDerbi[rJatekos]);
			else if(RoncsDerbi[rInditva])
			{
				Format(string, "~r~Ellenfelek: ~l~%d F§",RoncsDerbi[rJatekos]);
				//RoncsderbiSerules(GetPlayerVehicleID(playerid), playerid);
			}
		}
		TextDrawSetString(InfoTextDraw4[playerid], string);
		
	}*/
	return 1;
}

stock ShowPlayerTextDraw(player, textdraw)
{
	if(IsPlayerNPC(player)) return 1;

	new PlayerText:id;
	if(textdraw == TD_Login1) // Felsõ
	{
		if(!LoginTextDrawCreated[player])
		{
			LoginTextDrawCreated[player] = true;
			id = CreatePlayerTextDraw(player, 1, -45, "__");
			
			PlayerTextDrawAlignment(player, id, 1);
			PlayerTextDrawFont(player, id, 1);
			PlayerTextDrawSetShadow(player, id, 1);

			PlayerTextDrawColor(player, id, 0x000000FF);
			PlayerTextDrawBackgroundColor(player, id, 0x000000FF);
			PlayerTextDrawSetOutline(player, id, 1);
			
			PlayerTextDrawUseBox(player, id, 1);
			PlayerTextDrawBoxColor(player, id, 0x000000FF);
			PlayerTextDrawLetterSize(player, id, 1,14);

			PlayerTextDrawTextSize(player, id, 655, 80);

			LoginTextDraw[player] = id;
		}
		else
			id = LoginTextDraw[player];

		PlayerTextDrawShow(player, id);
	}
	else if(textdraw == TD_Login2) // Alsó
	{
		if(!LoginTextDrawCreated2[player])
		{
			LoginTextDrawCreated2[player] = true;
			id = CreatePlayerTextDraw(player, -2, 371, "__");

			PlayerTextDrawAlignment(player, id, 1);
			PlayerTextDrawFont(player, id, 1);
			PlayerTextDrawSetShadow(player, id, 1);

			PlayerTextDrawColor(player, id, 0x000000FF);
			PlayerTextDrawBackgroundColor(player, id, 0x000000FF);
			PlayerTextDrawSetOutline(player, id, 1);

			PlayerTextDrawUseBox(player, id, 1);
			PlayerTextDrawBoxColor(player, id, 0x000000ff);
			PlayerTextDrawLetterSize(player, id, 1,24);

			PlayerTextDrawTextSize(player, id, 840,240);

			LoginTextDraw2[player] = id;
		}
		else
			id = LoginTextDraw2[player];

		PlayerTextDrawShow(player, id);
	}
	return 1;
}

stock ShowTextDraw(playerid, textdraw, szin = TEXTDRAWBOX_COLOR_BLACK)
{
	if(IsPlayerNPC(playerid)) return 1;

	new Text:id;

	if(textdraw == TD_Info)
	{
		if(!InfoTextDrawCreated[playerid])
		{
			InfoTextDrawCreated[playerid] = 1;
			id = TextDrawCreate(0, 428, "Információk betöltése...");

			TextDrawAlignment(id, 1);
			TextDrawFont(id, 1);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, COLOR_BLACK); // COLOR_BLACK
			TextDrawBackgroundColor(id, COLOR_WHITE);
			TextDrawSetOutline(id, 1);

			TextDrawUseBox(id, 1);
			
			switch(PlayerInfo[playerid][pTextdrawszin])
			{
				case 0:TextDrawBoxColor(id, TEXTDRAWBOX_COLOR_BLACK);
				case 1:TextDrawBoxColor(id, TEXTDRAWBOX_COLOR_WHITE);
				case 2:TextDrawBoxColor(id, TEXTDRAWBOX_COLOR_LBLUE);
				case 3:TextDrawBoxColor(id, TEXTDRAWBOX_COLOR_DBLUE);
				case 4:TextDrawBoxColor(id, TEXTDRAWBOX_COLOR_LGREEN);
				case 5:TextDrawBoxColor(id, TEXTDRAWBOX_COLOR_DGREEN);
				case 6:TextDrawBoxColor(id, TEXTDRAWBOX_COLOR_RED);
				case 7:TextDrawBoxColor(id, TEXTDRAWBOX_COLOR_YELLOW);
				case 8:TextDrawBoxColor(id, TEXTDRAWBOX_COLOR_PINK);
				case 9:TextDrawBoxColor(id, TEXTDRAWBOX_COLOR_TRANSPARENT);
			}
			
			TextDrawLetterSize(id, 0.4, 1);

			TextDrawTextSize(id, 640, 480);

			InfoTextDraw[playerid] = id;
		}
		else
			id = InfoTextDraw[playerid];

		TextDrawShowForPlayer(playerid, id);
	}
	else if(textdraw == TD_Info2)
	{
		if(!InfoTextDrawCreated2[playerid])
		{
			InfoTextDrawCreated2[playerid] = 1;
			//id = TextDrawCreate(495, 110, "Bet¨lts..."); régi poz
			id = TextDrawCreate(495, 110, "Bet¨lts...");
			
			TextDrawAlignment(id, 1);
			TextDrawFont(id, 1);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, COLOR_ORANGE); // COLOR_BLACK
			TextDrawBackgroundColor(id, COLOR_WHITE);
			TextDrawSetOutline(id, 1);

			TextDrawUseBox(id, 1);
			TextDrawBoxColor(id, szin); // 0x111133AA //170
			TextDrawLetterSize(id, 0.3, 1);

			TextDrawTextSize(id, 640, 200);

			InfoTextDraw2[playerid] = id;
		}
		else
			id = InfoTextDraw2[playerid];
			
		TextDrawShowForPlayer(playerid, id);
	}
	else if(textdraw == TD_Info3)
	{
		if(!InfoTextDrawCreated3[playerid])
		{
			InfoTextDrawCreated3[playerid] = 1;
			//id = TextDrawCreate(495, 150, "Bet¨lts..."); régi poz
			id = TextDrawCreate(495, 150, "Betöltés...");
			
			TextDrawAlignment(id, 1);
			TextDrawFont(id, 1);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, COLOR_ORANGE); // COLOR_BLACK
			TextDrawBackgroundColor(id, COLOR_WHITE);//Körvonal szín(betû)
			TextDrawSetOutline(id, 1);

			TextDrawUseBox(id, 1);
			//TextDrawBoxColor(id, COLOR_ORANGE);
			TextDrawBoxColor(id, szin); // 0x111133AA //170
			TextDrawLetterSize(id, 0.3, 1);

			TextDrawTextSize(id, 640, 200);

			InfoTextDraw3[playerid] = id;
		}
		else
			id = InfoTextDraw3[playerid];
			
		TextDrawShowForPlayer(playerid, id);
	}
	else if(textdraw == TD_Info_Weapons)
	{
		if(!InfoTextDrawCreatedWeapons[playerid])
		{
			InfoTextDrawCreatedWeapons[playerid] = 1;
			//id = TextDrawCreate(495, 150, "Bet¨lts..."); régi poz
			if(PlayerInfo[playerid][pCustomHudWeapon] != 1)
				id = TextDrawCreate(492.000000, 4.000000, "class_weapons:0");
			else
				id = TextDrawCreate(492.000000, 4.000000, "class_custom_weapons:0c");
			
			TextDrawAlignment(id, 2);
			TextDrawFont(id, 4);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, -1); // COLOR_BLACK
			TextDrawBackgroundColor(id, 255);//Körvonal szín(betû)
			TextDrawSetOutline(id, 0);

			TextDrawUseBox(id, 1);
			//TextDrawBoxColor(id, COLOR_ORANGE);
			TextDrawBoxColor(id, 255); // 0x111133AA //170
			TextDrawLetterSize(id, 0.509998, 10.699995);

			TextDrawTextSize(id, 49.000000, 54.000000);
			TextDrawSetProportional(id, 1);
			TextDrawSetSelectable(id, 1);

			InfoTextDrawWeapons[playerid] = id;
		}
		else
			id = InfoTextDrawWeapons[playerid];
			
		TextDrawShowForPlayer(playerid, id);
	}
	else if(textdraw == TD_Info_Ammo)
	{
		if(!InfoTextDrawCreatedAmmo[playerid])
		{
			InfoTextDrawCreatedAmmo[playerid] = 1;
			//id = TextDrawCreate(495, 150, "Bet¨lts..."); régi poz
			id = TextDrawCreate(493.000000, 47.000000, "0");
			
			TextDrawAlignment(id, 2);
			TextDrawFont(id, 3);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, -1); // COLOR_BLACK
			TextDrawBackgroundColor(id, 255);//Körvonal szín(betû)
			TextDrawSetOutline(id, 1);

			TextDrawUseBox(id, 0);
			//TextDrawBoxColor(id, COLOR_ORANGE);
			TextDrawBoxColor(id, -1); // 0x111133AA //170
			TextDrawLetterSize(id, 0.259998, 1.099993);

			TextDrawTextSize(id, 0.259998, 1.099993);
			TextDrawSetProportional(id, 1);
			TextDrawSetSelectable(id, 0);

			InfoTextDrawAmmo[playerid] = id;
		}
		else
			id = InfoTextDrawAmmo[playerid];
			
		TextDrawShowForPlayer(playerid, id);
	}
	else if(textdraw == TD_Info_HUD)
	{
		if(!InfoTextDrawCreatedHUD[playerid])
		{
			InfoTextDrawCreatedHUD[playerid] = 1;
			//id = TextDrawCreate(495, 150, "Bet¨lts..."); régi poz
			id = TextDrawCreate(480.000000, 28.000000, "class_hud:healthbar100");
			
			TextDrawAlignment(id, 2);
			TextDrawFont(id, 4);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, -1); // COLOR_BLACK
			TextDrawBackgroundColor(id, 255);//Körvonal szín(betû)
			TextDrawSetOutline(id, 0);

			TextDrawUseBox(id, 1);
			//TextDrawBoxColor(id, COLOR_ORANGE);
			TextDrawBoxColor(id, 255); // 0x111133AA //170
			TextDrawLetterSize(id, 0.509998, 10.699995);

			TextDrawTextSize(id, 178.000000, 100.000000);
			TextDrawSetProportional(id, 1);
			TextDrawSetSelectable(id, 1);			

			InfoTextDrawHUD[playerid] = id;
		}
		else
			id = InfoTextDrawHUD[playerid];
			
		TextDrawShowForPlayer(playerid, id);
	}
	else if(textdraw == TD_Info_HUD_HEARTH)
	{
		if(!InfoTextDrawCreatedHUDHearth[playerid])
		{
			InfoTextDrawCreatedHUDHearth[playerid] = 1;
			//id = TextDrawCreate(495, 150, "Bet¨lts..."); régi poz
			id = TextDrawCreate(495.000000, 66.000000, "class_hud_icon:health");
			
			TextDrawAlignment(id, 2);
			TextDrawFont(id, 4);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, -1); // COLOR_BLACK
			TextDrawBackgroundColor(id, 255);//Körvonal szín(betû)
			TextDrawSetOutline(id, 0);

			TextDrawUseBox(id, 1);
			//TextDrawBoxColor(id, COLOR_ORANGE);
			TextDrawBoxColor(id, 255); // 0x111133AA //170
			TextDrawLetterSize(id, 0.509998, 10.699995);

			TextDrawTextSize(id, 18.000000, 20.000000);
			TextDrawSetProportional(id, 1);
			TextDrawSetSelectable(id, 1);

			InfoTextDrawHUDHearth[playerid] = id;
		}
		else
			id = InfoTextDrawHUDHearth[playerid];
			
		TextDrawShowForPlayer(playerid, id);
	}
	else if(textdraw == TD_Info_BAR_EHSEG)
	{
		if(!InfoTextDrawCreatedBAREHSEG[playerid])
		{
			InfoTextDrawCreatedBAREHSEG[playerid] = 1;
			//id = TextDrawCreate(495, 150, "Bet¨lts..."); régi poz
			id = TextDrawCreate(547.000000, -43.000000, "class_hud:bar_piros0");
			
			TextDrawAlignment(id, 2);
			TextDrawFont(id, 4);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, -1); // COLOR_BLACK
			TextDrawBackgroundColor(id, 255);//Körvonal szín(betû)
			TextDrawSetOutline(id, 0);

			TextDrawUseBox(id, 1);
			//TextDrawBoxColor(id, COLOR_ORANGE);
			TextDrawBoxColor(id, 255); // 0x111133AA //170
			TextDrawLetterSize(id, 0.509998, 10.699997);

			TextDrawTextSize(id, 94.000000, 133.000000);
			TextDrawSetProportional(id, 1);
			TextDrawSetSelectable(id, 1);

			InfoTextDrawBAREHSEG[playerid] = id;
		}
		else
			id = InfoTextDrawBAREHSEG[playerid];
			
		TextDrawShowForPlayer(playerid, id);
	}
	else if(textdraw == TD_Info_BAR_PEE)
	{
		if(!InfoTextDrawCreatedBARPEE[playerid])
		{
			InfoTextDrawCreatedBARPEE[playerid] = 1;
			//id = TextDrawCreate(495, 150, "Bet¨lts..."); régi poz
			id = TextDrawCreate(548.000000, -20.000000, "class_hud:bar_sarga0");
			
			TextDrawAlignment(id, 2);
			TextDrawFont(id, 4);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, -1); // COLOR_BLACK
			TextDrawBackgroundColor(id, 255);//Körvonal szín(betû)
			TextDrawSetOutline(id, 0);

			TextDrawUseBox(id, 1);
			//TextDrawBoxColor(id, COLOR_ORANGE);
			TextDrawBoxColor(id, 255); // 0x111133AA //170
			TextDrawLetterSize(id, 0.509998, 10.699997);

			TextDrawTextSize(id, 93.000000, 133.000000);
			TextDrawSetProportional(id, 1);
			TextDrawSetSelectable(id, 1);

			InfoTextDrawBARPEE[playerid] = id;
		}
		else
			id = InfoTextDrawBARPEE[playerid];
			
		TextDrawShowForPlayer(playerid, id);
	}
	else if(textdraw == TD_Info_BAR_ARMOR)
	{
		if(!InfoTextDrawCreatedBARARMOR[playerid])
		{
			InfoTextDrawCreatedBARARMOR[playerid] = 1;
			//id = TextDrawCreate(495, 150, "Bet¨lts..."); régi poz
			id = TextDrawCreate(498.000000, 10.000000, "class_hud:bar_szurke100");
			
			TextDrawAlignment(id, 2);
			TextDrawFont(id, 4);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, -1); // COLOR_BLACK
			TextDrawBackgroundColor(id, 255);//Körvonal szín(betû)
			TextDrawSetOutline(id, 0);

			TextDrawUseBox(id, 1);
			//TextDrawBoxColor(id, COLOR_ORANGE);
			TextDrawBoxColor(id, 255); // 0x111133AA //170
			TextDrawLetterSize(id, 0.509998, 10.699996);

			TextDrawTextSize(id, 89.000000, 110.000000);
			TextDrawSetProportional(id, 1);
			TextDrawSetSelectable(id, 1);

			InfoTextDrawBARARMOR[playerid] = id;
		}
		else
			id = InfoTextDrawBARARMOR[playerid];
			
		TextDrawShowForPlayer(playerid, id);
	}
	else if(textdraw == TD_Info_BAR_FOOD)
	{
		if(!InfoTextDrawCreatedBARFOOD[playerid])
		{
			InfoTextDrawCreatedBARFOOD[playerid] = 1;
			//id = TextDrawCreate(495, 150, "Bet¨lts..."); régi poz
			id = TextDrawCreate(546.000000, 9.000000, "class_hud_icon:food");
			
			TextDrawAlignment(id, 2);
			TextDrawFont(id, 4);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, -1); // COLOR_BLACK
			TextDrawBackgroundColor(id, 255);//Körvonal szín(betû)
			TextDrawSetOutline(id, 0);

			TextDrawUseBox(id, 1);
			//TextDrawBoxColor(id, COLOR_ORANGE);
			TextDrawBoxColor(id, 255); // 0x111133AA //170
			TextDrawLetterSize(id, 0.509998, 10.699996);

			TextDrawTextSize(id, 20.000000, 23.000000);
			TextDrawSetProportional(id, 1);
			TextDrawSetSelectable(id, 1);

			InfoTextDrawBARFOOD[playerid] = id;
		}
		else
			id = InfoTextDrawBARFOOD[playerid];
			
		TextDrawShowForPlayer(playerid, id);
	}
	else if(textdraw == TD_Info_BAR_TOILET)
	{
		if(!InfoTextDrawCreatedBARTOILET[playerid])
		{
			InfoTextDrawCreatedBARTOILET[playerid] = 1;
			//id = TextDrawCreate(495, 150, "Bet¨lts..."); régi poz
			id = TextDrawCreate(550.000000, 33.000000, "class_hud_icon:pee");
			
			TextDrawAlignment(id, 2);
			TextDrawFont(id, 4);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, -1); // COLOR_BLACK
			TextDrawBackgroundColor(id, 255);//Körvonal szín(betû)
			TextDrawSetOutline(id, 0);

			TextDrawUseBox(id, 1);
			//TextDrawBoxColor(id, COLOR_ORANGE);
			TextDrawBoxColor(id, 255); // 0x111133AA //170
			TextDrawLetterSize(id, 0.509998, 10.699996);

			TextDrawTextSize(id, 15.000000, 20.000000);
			TextDrawSetProportional(id, 1);
			TextDrawSetSelectable(id, 1);

			InfoTextDrawBARTOILET[playerid] = id;
		}
		else
			id = InfoTextDrawBARTOILET[playerid];
			
		TextDrawShowForPlayer(playerid, id);
	}
	/*else if(textdraw == TD_Info4)
	{
		if(!InfoTextDrawCreated4[playerid])
		{
			InfoTextDrawCreated4[playerid] = 1;
			id = TextDrawCreate(495, 378, "Bet¨lts...");
			
			TextDrawAlignment(id, 1);
			TextDrawFont(id, 1);
			TextDrawSetShadow(id, 1);

			TextDrawColor(id, COLOR_ORANGE); // COLOR_BLACK
			TextDrawBackgroundColor(id, COLOR_WHITE);//Körvonal szín(betû)
			TextDrawSetOutline(id, 1);

			TextDrawUseBox(id, 1);
			//TextDrawBoxColor(id, COLOR_ORANGE);
			TextDrawBoxColor(id, szin); // 0x111133AA //170
			TextDrawLetterSize(id, 0.3, 1);

			TextDrawTextSize(id, 640, 200);

			InfoTextDraw4[playerid] = id;
		}
		else
			id = InfoTextDraw4[playerid];
			
		TextDrawShowForPlayer(playerid, id);
	}*/
	return 1;
}
fpublic AfkChecker()
{
	//ParancsBetoltes2();
	/*new db=NINCS;
	new teszt[MAX_PLAYERS];
	teszt[db]=0;*/
	
	CheckClassClient();
	HelyezesCheck();
	
	if(R_stream < UnixTime && R_stream > 1) RiporterZeneVan = false;
	
	if(RoncsDerbi[rInditva])
	{
	
		new szamol=0;
		foreach(Jatekosok, x)
		{
			if(RoncsDerby[x][rdVersenyez])
				szamol++;
		}
		if(szamol <= 0)
			RoncsDerbiNullazas();
	
	}
	if(RoncsDerbi[rIdo] > 1)
	{
		if(RoncsDerbi[rIdo] == 150 || RoncsDerbi[rIdo] == 120 || RoncsDerbi[rIdo] == 60)
		{
			foreach(Jatekosok,r)
			{
				SendClientMessage(r,COLOR_WHITE,"======================= RONCSDERBI =======================");
				SendFormatMessage(r,COLOR_WHITE,"Futam indul a San Fieroi stadionban %d sec múlva! ((/roncsderbi))",RoncsDerbi[rIdo]);
			}
		}
		if(RoncsDerbi[rIdo] <= 5)
		{
			if(RoncsDerbi[rJatekos] <= 1)
			{
			
				foreach(Jatekosok,r)
				{
					SendClientMessage(r,COLOR_WHITE,"======================= RONCSDERBI =======================");
					SendClientMessage(r,COLOR_WHITE,"Futam elmarad kevés résztvevõ miatt!");
					
					if(RoncsDerby[r][rdVersenyez])
					{
						SendClientMessage(r,COLOR_WHITE,"======================= RONCSDERBI =======================");
						SendFormatMessage(r,COLOR_YELLOW,"A futam elmarad, kapsz %s Ft",FormatInt(BizzInfo[BIZ_RONCSDERBI][bEntranceCost]));
						GiveMoney(r,BizzInfo[BIZ_RONCSDERBI][bEntranceCost]);
						
						RoncsDerby[r][rdVersenyez] = false;
						new rdkocsi;
						rdkocsi = DerbiKocsi[RoncsDerby[r][rdSlot]];
						DerbiKocsi[RoncsDerby[r][rdSlot]] = NINCS;
						BizPenz(BIZ_RONCSDERBI, -floatround(BizzInfo[BIZ_RONCSDERBI][bEntranceCost]*0.05));
						
				//		RoncsderbiSerules(rdkocsi, r, true);
						
						DestroyVehicle(rdkocsi);
						
						Tele(r,-2110.9934,-444.3106,38.7344,false,0,0);
						RoncsDerbi[rFutam] = false;
						RoncsDerbi[rInditva] = false;
						RoncsDerbi[rNyeremenyOssz] = NINCS;
						RoncsDerbi[rNyeremeny3] = NINCS;
						RoncsDerbi[rNyeremeny2] = NINCS;
						RoncsDerbi[rNyeremeny1] = NINCS;
						RoncsDerbi[rModel] = NINCS;
						RoncsDerbi[rJatekos] = NINCS;
						SetPlayerHealth(r,150.0);	
						SetTimerEx("WarSegit", 5000, false, "i", r);
						TogglePlayerControllable(r, 1);
					}	

				}
			}
			RoncsDerbi[rInditva] = true;
			
					
			RoncsDerbi[rNyeremeny3] = floatround(float(RoncsDerbi[rNyeremenyOssz]) *0.2);
			RoncsDerbi[rNyeremeny2] = floatround(float(RoncsDerbi[rNyeremenyOssz]) *0.3);
			RoncsDerbi[rNyeremeny1] = floatround(float(RoncsDerbi[rNyeremenyOssz]) *0.5);
			RoncsDerbi[rIdo] = NINCS;
			foreach(Jatekosok,r)
			{
				if(RoncsDerby[r][rdVersenyez])
					Msg(r, "A verseny elindult!"),TogglePlayerControllable(r, 1);
			}
			
		}
		else
			RoncsDerbi[rIdo] -=5;
	}
	
	new interior, VW, tmp, ido = UnixTime, ping, msg[128];
	if(Rob > 0)
	{
		Rob=Rob-5;
		if(Rob<10)
		{
			//MoveDynamicObject(LsBankKapu, 1931.56549229, -2435.53287467, 14.6419142578,3); régi
			MoveDynamicObject(LsBankKapu, -1156.06, -212.17, 14.66,3);
			LSSzefKod = random(8000)+1000;
		}
	}
	
	for(new slot = 0; slot < RACESLOTOK; slot++)
	{
		if(RaceInfo[slot][rStatusz] == RACE_ELINDULT)
		{
			if(RaceInfo[slot][rVersenyIdo] < UnixTime && RaceInfo[slot][rVersenyIdo] != NINCS)
			{
	
				new uzenet[128];

				format(uzenet, 128, "[Auto]A %s versenynek vége, mivel régóta nem ért be senki", RaceInfo[slot][rNev]);


				foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == slot)
					{
						SendClientMessage(x, COLOR_WHITE, "========== Class City Racing Team ==========");
						SendClientMessage(x, COLOR_WHITE, uzenet);
						VersenyVege(x);
					}
				}
				RaceInfo[slot][rVersenyIdo] = NINCS;
				RaceInfo[slot][rStatusz] = RACE_VEGE;
			}
			
			if(RaceInfo[slot][rVersenyIdo] > UnixTime && RaceInfo[slot][rVersenyIdo] != NINCS)
			{
				new time;
				new string[12];
				time = RaceInfo[slot][rVersenyIdo] - UnixTime;
				foreach(Jatekosok, x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == slot)
					{
						if(500 <= time < 600)
							Format(string, "~g~%d", time);
						else if(500 <= time < 600)
							Format(string, "~g~~h~%d", time);
						else if(200 <= time < 500)
							Format(string, "~y~%d", time);
						else if(120 <= time < 200)
							Format(string, "~r~~h~~h~%d", time);
						else if(60 <= time < 120)
							Format(string, "~r~~h~%d", time);
						else if(time < 60)
							Format(string, "~r~%d", time);
						GameTextForPlayer(x, string, 925, 1);
					}
				}
			}
			
		}
	}
	for(new deer = 0; deer < sizeof(DeerInfo); deer++)
	{
		if(!DeerInfo[deer][dKilled]) continue;
		if(DeerInfo[deer][dSupplied]) continue;
		DeerInfo[deer][dHealth] -= 2;
		if(DeerInfo[deer][dHealth] <= 2) { RemoveDeer(deer); continue; }
		tformat(128, "[Õz] Egészség: %d százalék\nMegölte: %s (ezzel: %s)\nMég nincs ellátva", DeerInfo[deer][dHealth], DeerInfo[deer][dKiller], GunName(DeerInfo[deer][dWeaponType]));
		UpdateDynamic3DTextLabelText(DeerInfo[deer][dLabel], 0x8B4513EE, _tmpString);
	}
	if(HuntInfo[dSpawnTime] > 0)
	{
		HuntInfo[dSpawnTime] -= 5;
		if(HuntInfo[dSpawnTime] <= 0) CreateDeer();
	}
	foreach(Jatekosok, x)
	{
	
	
	
		
		
		if(KincsSzamlalo[x] > 2)
		{
			format(_tmpString,sizeof(_tmpString),"[FELTÉTELEZETT KINCS SHORT]név: %s, | néz utána a parancs logban!",PlayerName(x));
			SendMessage(SEND_MESSAGE_ADMIN,_tmpString,COLOR_LIGHTRED,6);
			
			format(_tmpString,sizeof(_tmpString),"[FELTÉTELEZETT KINCS SHORT]név: %s, | %d!",PlayerName(x),KincsSzamlalo[x]);
			Log("Scripter",_tmpString);
		}
		if(GyogyszerTime[x] > 0)
			GyogyszerTime[x]-=5;
		if(PlayerInfo[x][pTextDrawKeseltet] > NINCS)
			PlayerInfo[x][pTextDrawKeseltet] -=5;
		
		if(PlayerInfo[x][pTextDrawKeseltet]	== 0)
		{
			new colour = GetPlayerTextdrawColour(x);
				
			ShowTextDraw(x, TD_Info, colour);
			ShowTextDraw(x, TD_Info2, colour);
			ShowTextDraw(x, TD_Info3, colour);
			ShowTextDraw(x, TD_Info_Weapons, colour);
			ShowTextDraw(x, TD_Info_Ammo, colour);
			ShowTextDraw(x, TD_Info_HUD, colour);
			ShowTextDraw(x, TD_Info_HUD_HEARTH, colour);
			ShowTextDraw(x, TD_Info_BAR_EHSEG, colour);
			ShowTextDraw(x, TD_Info_BAR_PEE, colour);
			ShowTextDraw(x, TD_Info_BAR_FOOD, colour);
			ShowTextDraw(x, TD_Info_BAR_TOILET, colour);
			ShowTextDraw(x, TD_Info_BAR_ARMOR, colour);
			//ShowTextDraw(x, TD_Info4, colour);
			
			PlayerInfo[x][pTextDrawKeseltet] = NINCS;
		}
			
		
		
		if(PlayerInfo[x][pZarolva] == NINCS)
			PlayerInfo[x][pZarolva] = false;
			
		if(PlayerInfo[x][pReszegKeselteto] > 0)
			PlayerInfo[x][pReszegKeselteto] -=5;
		if(PlayerDrunk[x] > 0)
		{
			if(GetPlayerDrunkLevel(x) < 1000)
			{
				if(PlayerInfo[x][pReszegKeselteto] == NINCS)
					PlayerInfo[x][pReszegKeselteto] = 20;
				if(PlayerInfo[x][pReszegKeselteto] == 0)	
				{	
					if(PlayerDrunk[x] != 0)
						PlayerDrunk[x] = 0,Msg(x,"Már nem vagy részeg!"), PlayerInfo[x][pReszegKeselteto] = NINCS;
				}
			}
			elseif(GetPlayerDrunkLevel(x) < 10000)
			{
				if(PlayerDrunk[x] != 1)
				PlayerDrunk[x] = 1,Msg(x,"Részeg vagy! Szint 1.");
			}
			elseif(GetPlayerDrunkLevel(x) < 20000)
			{
				if(PlayerDrunk[x] != 2)
				PlayerDrunk[x] = 2,Msg(x,"Részeg vagy! Szint 2.");
			}
			elseif(GetPlayerDrunkLevel(x) < 30000)
			{
				if(PlayerDrunk[x] != 3)
				PlayerDrunk[x] = 3,Msg(x,"Részeg vagy! Szint 3.");
			}
			elseif(GetPlayerDrunkLevel(x) < 40000)
			{
				if(PlayerDrunk[x] != 4)
				PlayerDrunk[x] = 4,Msg(x,"Részeg vagy! Szint 4.");
			}
			else
			{
				if(PlayerDrunk[x] != 5)
				PlayerDrunk[x] = 5,Msg(x,"Részeg vagy! Szint 5.");
			}
		}
		if(RoncsDerby[x][rdVersenyez])
		{
			if(GetPlayerVirtualWorld(x) != 55555 || GetPlayerState(x) != PLAYER_STATE_DRIVER)
				RoncsDerbiKieses(x);
		}
		else if(GetPlayerVirtualWorld(x) == 55555 && !Admin(x,1337) && !Tevezik[x])
		{
			Tele(x,-2110.9934,-444.3106,38.7344,false,0,0);
			Msg(x, "Kimentél a verseny pályáról!");
		}
		
		if(Taxi[x][tDuty] && GetPlayerState(x) == PLAYER_STATE_DRIVER)
		{
			
			new sebeseg = GetVehicleSpeed(GetPlayerVehicleID(x));
			
			if(sebeseg < 30)
				Taxi[x][tFizetes] +=100,FrakcioSzef(FRAKCIO_TAXI, 100);
			else
				Taxi[x][tFizetes] +=150,FrakcioSzef(FRAKCIO_TAXI, 150);
		}	
		if(LaptopConnected[x])
		{
			new wifipont = GetClosestWifiPoint(x), wifierosseg = GetWifiSignal(x, wifipont);
			if(wifierosseg < 10.0)
			{
				LaptopConnected[x] = false;
				LaptopIP[x] = NINCS;
				Msg(x, "Eltávolodtál a wifi hotspottól, így megszakadt a kapcsolat!");
			}
		}
		
		if(Taxi[x][tUtas] != NINCS)
		{
			if(!IsPlayerInAnyVehicle(Taxi[x][tUtas]))
				Taxi[x][tUtas]= NINCS;
		
		}
		
		if(WeaponArmed(x))
		{
		
			
			if(RKFigyelo[x][RKido] > UnixTime)
			{
				if(PlayerToPoint(30,x,RKFigyelo[x][RKx],RKFigyelo[x][RKy],RKFigyelo[x][RKz]))
				{
					if(!IsValidDynamic3DTextLabel(RKFigyelo[x][RKid]))
					{
						new felirat[128];
						format(felirat,sizeof(felirat),"RK gyanú((/rk))",x,RKFigyelo[x][RKx],RKFigyelo[x][RKy],RKFigyelo[x][RKz]);
						RKFigyelo[x][RKid]=CreateDynamic3DTextLabel(felirat, COLOR_DYELLOW, 0.0, 0.0, 0.25, 50.0, x, INVALID_VEHICLE_ID);
						
					}	
			
				}
				else if(IsValidDynamic3DTextLabel(RKFigyelo[x][RKid])) DestroyDynamic3DTextLabel(RKFigyelo[x][RKid]),RKFigyelo[x][RKid]=INVALID_3D_TEXT_ID;
					
			}
			else if(IsValidDynamic3DTextLabel(RKFigyelo[x][RKid]) && RKFigyelo[x][RKido]+300 < UnixTime) DestroyDynamic3DTextLabel(RKFigyelo[x][RKid]),RKFigyelo[x][RKid]=INVALID_3D_TEXT_ID;
			
		}
		else if(IsValidDynamic3DTextLabel(RKFigyelo[x][RKid])) DestroyDynamic3DTextLabel(RKFigyelo[x][RKid]),RKFigyelo[x][RKid]=INVALID_3D_TEXT_ID;
			
		
		
		/*if( NPCElott[x] > NINCS)
		{
			new nid = NPC_ID[NPCElott[x]];
			if(nid != NINCS)
			{
				if(!NPC_Vezetok[nid][nMegallt])
				{
					if(NPCElottKick[x] > 2)
						SendFormatMessage(NPCElott[x], 1, "NPCPARANCS %d", NPC_AKCIO_FOLYTAT), Msg(x, "Várt rád eleget tovább hajt!");
			
					if(NPCElott[x] > NINCS)
						NPCElottKick[x]++, NPCElott[x]=NINCS, Msg(x, "Nem fog rád várni örökké, menj az npc elõl!");
					else
						NPCElottKick[x]=0;
				}
				else NPCElottKick[x]=0,  NPCElott[x]=NINCS;
			}
		}*/
		
		if(ClassClient && (KliensMode == KLIENS_MOD_KOTELEZO || PlayerInfo[x][pKliens] == 1) && !PlayerInfo[x][pKliensAktiv] && SQLID(x) != 1 && PlayerInfo[x][pKliensIdo] < UnixTime && !IsTerno(x) && !IsJim(x))
			{ WKick(x); tformat(128, "[%d]%s kirúgva, kliens hiánya miatt", x, Nev(x)); Log("Kick", _tmpString); continue; }
			
		PlayerWeaponsAC[x][pLastOpac][2] = 0;
		
		if(!IsACop(x))
		{
			if(PlayerInfo[x][pJelzesTerkep] || PlayerInfo[x][pJelzes])
			{
				PlayerInfo[x][pJelzesTerkep] = 0;
				PlayerInfo[x][pJelzes] = 0;
				
				foreach(Jatekosok, p)
				{
					SetPlayerMarkerForPlayer(x, p, COLOR_INVISIBLE);
				}
			}
		}
		
		if(PlayerInfo[x][pCash] < 0 && PlayerInfo[x][pAccount] > 0)
		{
			if(PlayerInfo[x][pCash] <= PlayerInfo[x][pAccount])
			{
				PlayerInfo[x][pAccount] += PlayerInfo[x][pCash];
				PlayerInfo[x][pCash] = 0;
			}
			else
			{
				PlayerInfo[x][pCash] += PlayerInfo[x][pAccount];
				PlayerInfo[x][pAccount] = 0;
			}
			
			Msg(x, "A tartozásod levonva a bankszámla egyenlegedbõl");
		}
		
		if(PlayerInfo[x][pSSS] > 0 && (PlayerInfo[x][pJailed] == 3 || PlayerInfo[x][pJailed] == 6 || PlayerInfo[x][pJailed] == 8) && PlayerInfo[x][pJailTime] >3000)
		{
			Msg(x, "Jailba kerülés miatt ki lettél rúgva SSS-bõl");
			PlayerInfo[x][pSSS]= 0;
		}
		if(PlayerInfo[x][pPayCheck] < 0)
		{
			if(PlayerInfo[x][pBankSzamla] > 0)
			{
				PlayerInfo[x][pAccount] += PlayerInfo[x][pPayCheck];
				Msg(x,"Mivel a fizetésed minuszba ment, ezért levontuk a számládról az összeget!");
			}
			else
			{
			    GiveMoney(x, PlayerInfo[x][pPayCheck]);
				Msg(x,"Mivel a fizetésed minuszba ment és bankszámlád sincs, ezért levontuk a zsebedbõl az összeget!");
			}
			PlayerInfo[x][pPayCheck] = 0;
		}	
		KikepzobenVan(x);
		if(PlayerInfo[x][pFuel] == 0)
		{
			PlayerInfo[x][pFuelTipus] = NINCS;
		}
		if(PlayerInfo[x][pFuelTipus] < NINCS || PlayerInfo[x][pFuelTipus] > 3)
		{
			PlayerInfo[x][pFuelTipus] = NINCS;
			PlayerInfo[x][pFuel] = 0;
			Msg(x,"Kannádba valami bebugolt, ezért debugolva lett és ürítve, kérlek jelezd egy Scripternek");
		}
		if(PlayerInfo[x][pGarazs] > NINCS)
		{
			new garazs=PlayerInfo[x][pGarazs];
			if(GarazsInfo[garazs][hEladva] == 0 || GarazsInfo[garazs][hTulajid] != PlayerInfo[x][pID])
				PlayerInfo[x][pGarazs] = NINCS;
		
		}
		if(PlayerInfo[x][pLevel] > 4)
		{
			if(IsValidDynamic3DTextLabel(KisLVL[x]))
				DestroyDynamic3DTextLabel(KisLVL[x]),KisLVL[x]=INVALID_3D_TEXT_ID;
				
			for(new i = 0; i < 4; i++)
			{
				if(IsValidDynamic3DTextLabel(FekvorendorText[x][i]))
					DestroyDynamic3DTextLabel(FekvorendorText[x][i]),FekvorendorText[x][i]=INVALID_3D_TEXT_ID;
			}
		}
		
		//if(IsValidDynamic3DTextLabel(NPC_Vezetok[x][nLeirasID]))
        //       DestroyDynamic3DTextLabel(NPC_Vezetok[x][nLeirasID]), NPC_Vezetok[x][nLeirasID] = INVALID_3D_TEXT_ID;
           
		if(IsValidDynamic3DTextLabel(ArveresNPCText))
            DestroyDynamic3DTextLabel(ArveresNPCText), ArveresNPCText = INVALID_3D_TEXT_ID;
               
		if(IsValidDynamic3DTextLabel(BankNPCText))
			DestroyDynamic3DTextLabel(BankNPCText), BankNPCText = INVALID_3D_TEXT_ID;
               
		if(IsValidDynamic3DTextLabel(BankSFNPCText))
			DestroyDynamic3DTextLabel(BankSFNPCText), BankSFNPCText = INVALID_3D_TEXT_ID;
		
		if(!LMT(x, FRAKCIO_RIPORTER))
		{
			if(IsValidDynamic3DTextLabel(SajtoIgazolvany[x]))
				DestroyDynamic3DTextLabel(SajtoIgazolvany[x]), SajtoIgazolvany[x] = INVALID_3D_TEXT_ID;
		}
		if(!Onkentesszolgalatban[x])
		{
			if(IsValidDynamic3DTextLabel(Onkentestext[x]))
				DestroyDynamic3DTextLabel(Onkentestext[x]), Onkentestext[x] = INVALID_3D_TEXT_ID;
		}
		if(PlayerInfo[x][pLevel] < 3)
		{
			new felirat[80]; format(felirat, 128, "[KEZDÕ]\nLVL: %d", PlayerInfo[x][pLevel]);
			if(!IsValidDynamic3DTextLabel(KisLVL[x]))
				KisLVL[x] = CreateDynamic3DTextLabel(felirat, 0x63FF60FF, 0.0, 0.0, 0.5, 40.0, x);
			
			if(!IsValidDynamic3DTextLabel(FekvorendorText[x][0]))
				FekvorendorText[x][0] = CreateDynamic3DTextLabel("VIGYÁZZ! FEKVÕRENDÕR!", COLOR_LIGHTRED, 1517.7975,-1732.3041,13.4519, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, -1, x);
			
			if(!IsValidDynamic3DTextLabel(FekvorendorText[x][1]))
				FekvorendorText[x][1] = CreateDynamic3DTextLabel("VIGYÁZZ! FEKVÕRENDÕR!", COLOR_LIGHTRED, 1441.7838,-1732.2639,13.4699, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, -1, x);
			
			if(!IsValidDynamic3DTextLabel(FekvorendorText[x][2]))
				FekvorendorText[x][2] = CreateDynamic3DTextLabel("VIGYÁZZ! FEKVÕRENDÕR!", COLOR_LIGHTRED, 1201.0139,-1304.3842,13.4637, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, -1, x);
			
			if(!IsValidDynamic3DTextLabel(FekvorendorText[x][3]))
				FekvorendorText[x][3] = CreateDynamic3DTextLabel("VIGYÁZZ! FEKVÕRENDÕR!", COLOR_LIGHTRED, 1200.9448,-1357.6608,13.4555, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, -1, x);
		}
		if(ScripterDuty[x] == 1 || AdminDuty[x] == 1)
		{
			new Float:regi;
			GetPlayerHealth(x, regi);
			if(regi < 150.0)
				SetHealth(x, 150.0);
		}
		for(new vehicleid=0;vehicleid<MAX_VEHICLES; vehicleid++)
		{
			new Alma1, Alma2;
			Alma1 = CarTrunk[vehicleid][cAlma];
			
			if(Alma1 == Alma2)	
				Almaszedeskozbe[vehicleid] = 0;
				
			Alma2 = CarTrunk[vehicleid][cAlma];
		}
		
		ping = GetPlayerPing(x);
		new MaxPing;
		if(Harcol[x])
			MaxPing=MAX_PING_WAR;
		else
			MaxPing=MAX_PING;
		if(ping > MaxPing && Logged(x) && !IsTerno(x) && !Admin(x, 1337))
		{
			PingKick[x]++;
			
			if(PingKick[x] >= MAX_PING_WARN)
			{
				Msg(x,"A pinged többszöri figyelmeztetés után sem csökkent, ezért a rendszer kirúgott!");
				format(msg, 128, "[%d/%d] [%d]%s kirúgva nagy ping (%d) miatt!", MAX_PING_WARN, PingKick[x], x, PlayerName(x), ping);
				ABroadCast(COLOR_LIGHTRED, msg, 1);
				PingKick[x] = 0;
				TKick(x);
				continue;
			}
			else
			{
				format(msg, 128, "[%d/%d] Túl nagy a pinged (%d), kérlek csökkentsd le (legalább %d alá), vagy ki fog rúgni a szerver", MAX_PING_WARN, PingKick[x], ping, MaxPing);
				SendClientMessage(x, COLOR_LIGHTRED, msg);
			}
		}
		//fps kick
		if(Harcol[x] && FPS2[x] < MAX_FPS_WAR && !Admin(x, 1337))
		{
			PingKick[x]++;
			if(PingKick[x] >= MAX_PING_WARN)
			{
				Msg(x,"Az FPS-ed többszöri figyelmeztetés után sem nõtt, ezért a rendszer kirúgott!");
				format(msg, 128, "[%d/%d] [%d]%s kirúgva kevés fps (%d) miatt!", MAX_PING_WARN, PingKick[x], x, PlayerName(x), FPS2[x]);
				ABroadCast(COLOR_LIGHTRED, msg, 1);
				PingKick[x] = 0;
				TKick(x);
				continue;
			}
			else
			{
				format(msg, 128, "[%d/%d] Túl kicsi az FPS-ed (%d), %d felett kell lennie, vagy ki fog rúgni a szerver", MAX_PING_WARN, PingKick[x], FPS2[x], MAX_FPS_WAR);
				SendClientMessage(x, COLOR_LIGHTRED, msg);
			}
		}
		if(ping > MaxPing && Admin(x, 1337))
		{
			format(msg, 128, "Túl nagy a pinged (%d)", ping);
			SendClientMessage(x, COLOR_LIGHTRED, msg);
		}
		if(Harcol[x] && FPS2[x] < MAX_FPS_WAR && Admin(x, 1337))
		{
			format(msg, 128, "Túl kicsi az FPS-ed (%d)", FPS2[x]);
			SendClientMessage(x, COLOR_LIGHTRED, msg);
		}
		if(RadarBe[x]==1 && LMT(x, FRAKCIO_KATONASAG))
		{
			foreach(Jatekosok, y)
			{
				new carid = GetPlayerVehicleID(y);
				new carid2 = GetPlayerVehicleID(x);
				if(IsARepulo(carid) && GetVehicleSpeed(carid) > 10 && GetPlayerState(y) == PLAYER_STATE_DRIVER && (IsAKatonaCar(carid2) || PlayerToPoint(10, x, 213.6858,1822.7659,6.4141)))
				{
					if(RepulesEngedely[y]>0)
					{
						SetPlayerMarkerForPlayer(x, y, COLOR_LIGHTGREEN);
						RepulesEngedely[y]=RepulesEngedely[y]-5;
					}
					else
					{
						if(IsACopCar(carid))
							SetPlayerMarkerForPlayer(x, y, COLOR_LIGHTBLUE);
						else if(IsAKatonaCar(carid))
							SetPlayerMarkerForPlayer(x, y, COLOR_BROWN);
						else
							SetPlayerMarkerForPlayer(x, y, COLOR_LIGHTRED);
					}
				}
				else if(LMT(x, FRAKCIO_KATONASAG))
				{
				SetPlayerMarkerForPlayer(x, y, COLOR_INVISIBLE);
				}
			}
		}
		new GunID = GetPlayerWeapon(x);
		if(GunID == 8 && Harcol[x])
		{
			SendClientMessage(x, COLOR_LIGHTRED, "Rendszer bezárt a börtönbe, Oka: Tíltott fegyver waron!");
			Jail(x, "set", 1800, "ajail2", "Tíltott fegyver waron");

		}
		new Veh = GetVehicleModel(GetPlayerVehicleID(x));
		if(TransportDuty[x] == 1 && IsPlayerInAnyVehicle(x) && Veh != 418 && Veh != 420 && Veh != 438 && Veh != 458 && Veh != 409)
		{
			Msg(x, "Nem kellene próbálkozni kijátszani a rendszert!!!");
			RemovePlayerFromVehicle(x);
		}
		//öv esetleges bugolása ellen
		if(!IsPlayerInAnyVehicle(x) && ov[x] == 1)
		{
			SetTimerEx("Munkavege", 2000, 0, "ddd", x, M_KISZALELL, 0);
		}
		new skin=GetPlayerSkin(x);
		if(IsPlayerName(x, "Terno_Tommys")  && skin  != 289 && !OnDuty[x] && SkinVed==1)
		{
			SetPlayerSkin(x, 289);
			PlayerInfo[x][pModel] = 289;
		}
		if(skin  == 77 && !Admin(x,1) || skin  == 75 && !Admin(x,1))
		{
			SetPlayerSkin(x, 10);
			PlayerInfo[x][pModel] = 10;
		
		}
		
		if(Paintballozik[x] && GetPlayerVirtualWorld(x) != 98765 && Tevezik[x] == NINCS)
		{
			//ResetWeapon(x);
			
			printf("|1|[%d]%s [VW: %d Paintbal: %d, Tevezik: %d]",x,PlayerName(x),GetPlayerVirtualWorld(x),Paintballozik[x],Tevezik[x]);
			new Float:xx,Float:yy,Float:zz;
			GetPlayerPos(x,xx,yy,zz);
			printf("POS: %.3f, %.3f, %.3f",xx,yy,zz);
			WeaponResetAll(x);
			Paintballozik[x] = false;
			SetPlayerInterior(x, 0);
			SetPlayerVirtualWorld(x, 0, "pbvege");
			//PlayerInfo[x][pTeleportAlatt] = 1;
			//PlayerInfo[x][pCFalsePositive] = 1;
			SetPlayerPos(x, BizzInfo[BIZ_PB][bEntranceX],BizzInfo[BIZ_PB][bEntranceY],BizzInfo[BIZ_PB][bEntranceZ]);
			Msg(x,"[DEBUG]1 Debugolva lettél PB-rõl! Ha NEM ott voltál írd TERNO && PEDRO topikba PONTOS IDÕVEL!");
			
		}
		if(Loterben[x] == NINCS && GetPlayerVirtualWorld(x) == 5995 && Tevezik[x] == NINCS)
		{
			//ResetWeapon(x);
			WeaponResetAll(x);
			SetPlayerInterior(x, 0);
			SetPlayerVirtualWorld(x, 0);
			Msg(x,"[DEBUG] Debugolva lettél lõtérrõl!");
			//PlayerInfo[x][pTeleportAlatt] = 1;
			//PlayerInfo[x][pCFalsePositive] = 1;
			SetPlayerPos(x, BizzInfo[BIZ_LOTER][bEntranceX],BizzInfo[BIZ_LOTER][bEntranceY],BizzInfo[BIZ_LOTER][bEntranceZ]);
		}
		if(SkinValasztoban[x] == 0 && GetPlayerInterior(x) == 14 && GetPlayerVirtualWorld(x) != 0 && Tevezik[x] == NINCS)
		{
			SkinValasztoban[x] = 0;
			SetPlayerInterior(x, 0);
			SetPlayerVirtualWorld(x, 0, "ruhaboltdebug");
			//PlayerInfo[x][pTeleportAlatt] = 1;
			//PlayerInfo[x][pCFalsePositive] = 1;
			SetPlayerPos(x, 1480.0736, -1737.7324, 13.266);
			Msg(x, "[DEBUG] Debugolva lettél a ruhaboltból!");
		}
		if(!Paintballozik[x] && GetPlayerVirtualWorld(x) == 98765 && Tevezik[x] == NINCS)
		{
			//ResetWeapon(x);
			printf("|2|[%d]%s [VW: %d Paintbal: %d, Tevezik: %d]",x,PlayerName(x),GetPlayerVirtualWorld(x),Paintballozik[x],Tevezik[x]);
			new Float:xx,Float:yy,Float:zz;
			GetPlayerPos(x,xx,yy,zz);
			printf("POS: %.3f, %.3f, %.3f",xx,yy,zz);
			
			WeaponResetAll(x);
			Paintballozik[x] = false;
			SetPlayerInterior(x, 0);
			SetPlayerVirtualWorld(x, 0, "pbvege");
			//PlayerInfo[x][pTeleportAlatt] = 1;
			//PlayerInfo[x][pCFalsePositive] = 1;
			SetPlayerPos(x, BizzInfo[BIZ_PB][bEntranceX],BizzInfo[BIZ_PB][bEntranceY],BizzInfo[BIZ_PB][bEntranceZ]);
			Msg(x,"[DEBUG]2 Debugolva lettél PB-rõl! Ha NEM ott voltál írd TERNO && PEDRO topikba PONTOS IDÕVEL!");
		}
		if(!LMT(x, FRAKCIO_OKTATO) && PlayerInfo[x][pAutmotSkill] != 0) { PlayerInfo[x][pAutmotSkill] = 0; }
		if(!LMT(x, FRAKCIO_OKTATO) && PlayerInfo[x][pKamiSkill] != 0) { PlayerInfo[x][pKamiSkill] = 0; }
		if(!LMT(x, FRAKCIO_OKTATO) && PlayerInfo[x][pRepSkill] != 0) { PlayerInfo[x][pRepSkill] = 0; }
		if(!LMT(x, FRAKCIO_OKTATO) && PlayerInfo[x][pFegySkill] != 0) { PlayerInfo[x][pFegySkill] = 0; }
		if(!LMT(x, FRAKCIO_OKTATO) && PlayerInfo[x][pAdrSkill] != 0) { PlayerInfo[x][pAdrSkill] = 0; }
		if(!LMT(x, FRAKCIO_OKTATO) && PlayerInfo[x][pHajoSkill] != 0) { PlayerInfo[x][pHajoSkill] = 0; }
		
		if(PlayerInfo[x][pFrakcioTiltIdo] >0 && PlayerInfo[x][pMember] != 0)
		{
			PlayerInfo[x][pMember] = 0;
			PlayerInfo[x][pRank] = 0;
			PlayerInfo[x][pLeader] = 0;
			PlayerInfo[x][pChar] = 0;
			PlayerInfo[x][pSwattag] = 0;
			PlayerInfo[x][pSwatRang] = 0;
			PlayerInfo[x][pSzerelo] = 0;
			PlayerInfo[x][pAutoker] = 0;
			//new rand = random(sizeof(CIV));
			PlayerInfo[x][pModel] = MAIN_CIVIL_SKIN; //CIV[rand];
			
			Msg(x, "Elvagy tiltva a frakcióktól, ezért ki vagy rúgva. /tiltásom");
		}
		if(Harcol[x] && Bejelento[x]) 
		{
			Bejelento[x] = false;
			foreach(Jatekosok, p)
			{
				if(p == x || BText[p] == INVALID_3D_TEXT_ID) continue;
				Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, BText[p], E_STREAMER_PLAYER_ID, x);
			}
			Streamer_Update(x);
			Msg(x, "Felirat kikapcsolva, war közben tilos");
			
			//printf("War IDK OFF");
		}
		if(Harcol[x] && Anev[x]) 
		{
			Anev[x] = false;
			foreach(Jatekosok, p)
			{
				if(p == x || BText[p] == INVALID_3D_TEXT_ID) continue;
				Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, AText[p], E_STREAMER_PLAYER_ID, x);
			}
			Streamer_Update(x);
			Msg(x, "Felirat kikapcsolva, war közben tilos");
		}
		if(Paintballozik[x] && Anev[x])
		{
			Anev[x] = false;
			foreach(Jatekosok, p)
			{
				if(p == x || BText[p] == INVALID_3D_TEXT_ID) continue;
				Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, AText[p], E_STREAMER_PLAYER_ID, x);
			}
			Streamer_Update(x);
			Msg(x, "Felirat kikapcsolva, paintball közben tilos");
		}
		if(Paintballozik[x] && Bejelento[x])
		{
			Bejelento[x] = false;
			foreach(Jatekosok, p)
			{
				if(p == x || BText[p] == INVALID_3D_TEXT_ID) continue;
				Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, BText[p], E_STREAMER_PLAYER_ID, x);
			}
			Streamer_Update(x);
			Msg(x, "Felirat kikapcsolva, paintball közben tilos");
		}

		//vá hoz idõ cucc/
		if(Admin(x, 1) || IsAS(x))
		{
			foreach(Jatekosok, xy)
			{
				if (ValaszokEll[x][xy] >0)
				{
					ValaszokEll[x][xy]=ValaszokEll[x][xy]-5;
				}
			}
		}
		
		tmp = ido - StatInfo[x][pRIdo];
		StatInfo[x][pRIdo] = ido;
		
		if(!AFK[x] && !Szunet[x] && AFKIdo[x] < 30)
		{
			StatInfo[x][pIdo] += tmp;
		
			if(PlayerInfo[x][pAdmin] && (AdminDuty[x] || ScripterDuty[x]))
				StatInfo[x][pOnduty] += tmp;
			
			if(StatInfo[x][pIdo] >= STAT_MENTES_IDO)
				StatMentes(x);
		}
			
		interior = GetPlayerInterior(x);
		VW = GetPlayerVirtualWorld(x);
		

		if(interior || VW)
		{
			if(Idojaras[x])
				IdojarasValt(x, 0);
		}
		else
		{
			if(!Idojaras[x])
				IdojarasValt(x, IdoJaras[iMost]);
		}
		if(IdoJaras[iMost] == 0 || IdoJaras[iMost] == 1)
		{
			IdojarasValt(x, 2);
		}
		if(GetPlayerAnimationIndex(x) == 1231)
		{
			if(GetPlayerSkin(x) == 0)
			{
				if(PlayerInfo[x][pModel])
					SetPlayerSkin(x, PlayerInfo[x][pModel]);
				else
					SetPlayerSkin(x, 29);
			}
				
			if(!OnlineAdminok())
			{
				CJFutasWarn[x]++;
				if(CJFutasWarn[x] == 5)
				{
					//SeeBan(x, 0, NINCS, "Cheat [CJ]");
					new string[128];
					Format(string, "ClassRPG: %s kirúgva rendszer által | Oka: Cheat [CJ]", PlayerName(x));
					
					KickLog(string);
					TKick(x);
					continue;
				}
			}
			else
				ABroadCastFormat(COLOR_LIGHTRED, 1, "<< CJ Futás: %s >>", PlayerName(x));

			SetPlayerSkin(x, GetPlayerSkin(x));
		}
		
		if(!AFK[x] && !PlayerInfo[x][pJailed])
			Szukseglet(x, 0.1, 0.05);
		
		if(Animban[x] && PlayerInfo[x][pLoves] > UnixTime && PlayerInfo[x][pEllatva])
			Msg(x, "Vérzel, ha nem látják el, elveszted az eszméleted!");
		
		if(!NemMozoghat(x) && !PlayerInfo[x][pJailed])
		{
			if(Ehseg[x] >= 100.0 && Vizelet[x] < 100.0)
				Msg(x, "Nagyon éhes vagy, romlik az egészséged..."), GiveHealth(x, -3.0);
			else if(Ehseg[x] < 100.0 && Vizelet[x] >= 100.0)
				Msg(x, "A szükségleted elérte a maximális határt, romlik az egészséged..."), GiveHealth(x, -3.0);
			else if(Ehseg[x] >= 100.0 && Vizelet[x] >= 100.0)
				Msg(x, "Nagyon éhes vagy, és a szükségleted is elérte a maximális határt, romlik az egészséged..."), GiveHealth(x, -5.0);
		}
			
		if(TrafiPax[x][tAktiv])
		{
			if(!PlayerToPoint(5, x, TrafiPax[x][tPosX], TrafiPax[x][tPosY], TrafiPax[x][tPosZ]))
			{
				TrafiPax[x][tAktiv] = false;
				Msg(x, "Mivel elmentél a helyedrõl, a traffipax törölve");
			}
		}
		
		if(!AFK[x] && !Admin(x, 1337) && !IsScripter(x) && PlayerInfo[x][pJailed] != 6 && PlayerInfo[x][pJailed] != 8 && Tevezik[x] == NINCS)
		{
			AFKIdo[x] += 5;
			if(AFKIdo[x] > MAXAFKIDO)
			{
				Msg(x, "Kirúgva AFK miatt.");
				TKick(x);
			}
			else if(AFKIdo[x] > (MAXAFKIDO - 15))
				Msg(x, "Figyelmeztetés: A rendszer hamarosan kirúg AFK miatt", false);
		}
		if(Tazer[x])
		{
			if(WeaponArmed(x) != WEAPON_DEAGLE && WeaponArmed(x) != WEAPON_SILENCED)
			{
				Tazer[x] = false;
				Msg(x, "[DEBUG] Sokkoló elvéve");
			}
		}
	}
	
	for(new terulet = 0; terulet < MAXTERULET; terulet++)
	{
		if(TeruletInfo[terulet][tVarakozasIdo] > 0)
		{
			TeruletInfo[terulet][tVarakozasIdo] -= 5;
			if(TeruletInfo[terulet][tVarakozasIdo] <= 600 && TeruletInfo[terulet][tVarakozasIdo] >= 60 && TeruletInfo[terulet][tVarakozasIdo] % 60 == 0)
			{
				foreach(Jatekosok, p)
				{
					if(LMT(p, TeruletInfo[terulet][tTulaj]))
					{
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: %d perc van hátra a harcig!", (TeruletInfo[terulet][tVarakozasIdo] / 60));
						Msg(p, "Figyelmeztetés: Ha nem megy oda legalább egy tag harcolni, a területet õk szerzik meg!", false);
						if(TeruletInfo[terulet][tLofegyver] == 1) {Msg(p, "Lõvös war lesz");} else {Msg(p, "Ütös war lesz");}
					}
					else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]))
					{
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: %d perc van hátra a harcig!", (TeruletInfo[terulet][tVarakozasIdo] / 60));
						Msg(p, "Figyelmeztetés: Ha nem megy oda legalább egy tag harcolni, a területet nem tudjátok megszerezni!", false);
						if(TeruletInfo[terulet][tLofegyver] == 1) {Msg(p, "Lõvös war lesz");} else {Msg(p, "Ütös war lesz");}
					}
				}
			}
			else if(TeruletInfo[terulet][tVarakozasIdo] < 60 && TeruletInfo[terulet][tVarakozasIdo] > 0 && TeruletInfo[terulet][tVarakozasIdo] % 15 ==  0)
			{
				foreach(Jatekosok, p)
				{
					if(LMT(p, TeruletInfo[terulet][tTulaj]))
					{
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: %d másodperc van hátra a harcig!", TeruletInfo[terulet][tVarakozasIdo]);
						Msg(p, "Figyelmeztetés: Ha nem megy oda legalább egy tag harcolni, a területet õk szerzik meg!", false);
						if(TeruletInfo[terulet][tLofegyver] == 1) {Msg(p, "Lõvös war lesz");} else {Msg(p, "Ütös war lesz");}
					}
					else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]))
					{
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: %d másodperc van hátra a harcig!", TeruletInfo[terulet][tVarakozasIdo]);
						Msg(p, "Figyelmeztetés: Ha nem megy oda legalább egy tag harcolni, a területet nem tudjátok megszerezni!", false);
						if(TeruletInfo[terulet][tLofegyver] == 1) {Msg(p, "Lõvös war lesz");} else {Msg(p, "Ütös war lesz");}
					}
				}
			}
			else if(TeruletInfo[terulet][tVarakozasIdo] == 0)
			{
				new vedo, tamado;
				foreach(Jatekosok, p)
				{
					if(LMT(p, TeruletInfo[terulet][tHarcolok][0]) && IsPlayerInDynamicArea(p, TeruletInfo[terulet][tArea]) && !NemMozoghat(p) && PlayerInfo[p][pHetiAktivitas] >= HETI_AKTIVITAS_WAR && PlayerInfo[p][pHaviAktivitas] >= HAVI_AKTIVITAS_WAR)
						vedo++;
					else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]) && IsPlayerInDynamicArea(p, TeruletInfo[terulet][tArea]) && !NemMozoghat(p) && PlayerInfo[p][pHetiAktivitas] >= HETI_AKTIVITAS_WAR && PlayerInfo[p][pHaviAktivitas] >= HAVI_AKTIVITAS_WAR)
						tamado++;
				}
				
				if(vedo < 1)
				{
					foreach(Jatekosok, p)
					{
						if(LMT(p, TeruletInfo[terulet][tTulaj]))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Mivel senki sem ment ki, a területeteket elvesztettétek: %s - Megszerezte a %s", TeruletInfo[terulet][tNev], Szervezetneve[ TeruletInfo[terulet][tHarcolok][1] - 1 ][0]);
						else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Mivel senki sem védte a területet, így megszereztétek: %s", TeruletInfo[terulet][tNev]);
					}
					TeruletInfo[terulet][tTulaj] = TeruletInfo[terulet][tHarcolok][1];
					HarcVan = false;
					TeruletInfo[terulet][tFoglalva] = UnixTime;
					FrakcioInfo[ TeruletInfo[terulet][tHarcolok][1]][fUtolsoTamadas] = UnixTime;
					TeruletUpdate(terulet, TERULET_Tulaj, TERULET_Foglalva);
					TeruletFrissites();
					
				}
				else if(tamado < 1)
				{
					foreach(Jatekosok, p)
					{
						if(LMT(p, TeruletInfo[terulet][tTulaj]))
							SendClientMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Mivel senki sem jött megtámadni a területet, így sikeresen megvédtétek");
						else if(LMT(p, TeruletInfo[terulet][tHarcolok][1]))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: Nem támadt senki, így nem tudtátok elfoglalni a területet: %s", TeruletInfo[terulet][tNev]);
					}
					HarcVan = false;
					FrakcioInfo[ TeruletInfo[terulet][tHarcolok][1]][fUtolsoTamadas] = UnixTime;
					TeruletInfo[terulet][tFoglalva] = UnixTime;
					TeruletUpdate(terulet, TERULET_Foglalva);

				}
				else //idekell
				{
					ABroadCast(COLOR_LIGHTRED, "<< War elindult >>", 1);
					foreach(Jatekosok, p)
					{
						if((LMT(p, TeruletInfo[terulet][tTulaj]) || LMT(p, TeruletInfo[terulet][tHarcolok][1])) && IsPlayerInDynamicArea(p, TeruletInfo[terulet][tArea]) && !NemMozoghat(p) &&
						PlayerInfo[p][pHetiAktivitas] >= HETI_AKTIVITAS_WAR && PlayerInfo[p][pHaviAktivitas] >= HAVI_AKTIVITAS_WAR && PlayerInfo[p][pKozmunka] == 0 && !Leutve[p] && Visz[p] == NINCS)
						{
							SendClientMessage(p, COLOR_LIGHTRED, "Figyelmeztetés: A HARC ELINDULT! AZ NYER, AKI TALPON MARAD!");
							Msg(p, "15 másodperces fagyasztás után indul a harc! Készülj fel!");
							FrakcioInfo[ TeruletInfo[terulet][tHarcolok][1]][fUtolsoTamadas] = UnixTime;
							Harcol[p] = true;
							HarcolTerulet[p] = terulet;
							Freeze(p,15000);							
							WeaponArm(p);
							
							new kocsi = GetClosestVehicle(p);
							if(GetPlayerDistanceFromVehicle(p, kocsi) < 7.5)
							{							
								if(GetVehicleModel(kocsi) == 487 && GetVehicleVirtualWorld(kocsi) == 0)
								{
									SetVehicleVirtualWorld(kocsi, 123456789);
								}
							}
							SetPlayerVirtualWorld(p, 123456789);
							if(!Harcol[p] && GetPlayerVirtualWorld(p) == 123456789 && Tevezik[p] == NINCS && Leutve[p])
							{
								SetPlayerVirtualWorld(p, 0);
								SeeBan(p, (UnixTime + 3600*24), -1, "Waron bugot használt ki!");
								Msg(p, "Az unban kérelmedben ne játszd a hülyét! Köszi ^.^");
							}
							//SetPlayerWorldBounds(p, TeruletInfo[terulet][tMaxX] - 5.0, TeruletInfo[terulet][tMinX] + 5.0, TeruletInfo[terulet][tMaxY] - 5.0, TeruletInfo[terulet][tMinY] + 5.0);
							
							
						}
					}
					//waride
					foreach(Jatekosok, p)
					{
						foreach(Jatekosok, x)
						{
							if(Harcol[p] || Harcol[x])
								SetPlayerMarkerForPlayer(p, x, COLOR_INVISIBLE);
						}
					}
					
					foreach(Jatekosok, p)
					{
						foreach(Jatekosok, x)
						{
							if(PlayerInfo[p][pMember] == PlayerInfo[x][pMember] && Harcol[p] && Harcol[x])
								SetPlayerMarkerForPlayer(p, x, COLOR_LIGHTGREEN);
						}
					}
					
					TeruletInfo[terulet][tHarc] = true;
					TeruletFrissites();
					
				}
			}
		}
	}
	
	
	//hack riaszto
	for(new car;car<MAXVSKOCSI;car++)
	{
	
		if(CarInfo[car][cCodeRiaszto][0] != NINCS && CarInfo[car][cCodeRiaszto][0] < UnixTime)
		{
			for( new i = 0; i < 6; i++ )
				CarInfo[car][cCodeRiaszto][ i ] = random(2);
			
			CarInfo[car][cCodeRiaszto][0] = NINCS;
		}
	
	//ideide
		if(Lopott[CarInfo[car][cId]])
		{	
			if(LopottTime[CarInfo[car][cId]] < UnixTime)
			{
				Lopott[CarInfo[car][cId]] = false;
				KocsiRespawn(CarInfo[car][cId]);
			}
		}
		
		//taxi felirat debug
		new model = GetVehicleModel(car);
		if(IsValidDynamic3DTextLabel(TAXITEXT[car]))
		{
			if(model != 420 && model != 438)
				DestroyDynamic3DTextLabel(TAXITEXT[car]), TAXITEXT[car]=INVALID_3D_TEXT_ID;
			else if(KocsiSofor(car) == NINCS)
				DestroyDynamic3DTextLabel(TAXITEXT[car]), TAXITEXT[car]=INVALID_3D_TEXT_ID;
		}	
	}
	
	
	return 1;
}

stock CIDBan(playerid, ido = 0, banner = NINCS, oka[], bool:szoveg =false)
{
	new query[256], orok[10], tipus[5], cim[60], bannolo[30];
	
	if(ido <= 0) orok = "i";
	else orok = "n";

	tipus = "";

	strmid(cim, PlayerInfo[playerid][pCode], 0, strlen(PlayerInfo[playerid][pCode]), 60);

	
	if(banner == NINCS) bannolo = "Rendszer";
	else strmid(bannolo, PlayerName(banner), 0, strlen(PlayerName(banner)), 30);

	format(query, sizeof(query), "INSERT INTO bans(Tipus, Cim, Ido, Orok, Bannolta, Oka, Datum) VALUES('%s', '%s', '%d', '%s', '%s', '%s', '%d')", tipus, cim, ido, orok, bannolo, oka, UnixTime);
	doQuery(query);

	if(szoveg)
		SendFormatMessageToAll(COLOR_LIGHTRED, "ClassRPG: %s bannolva %s által | Oka: %s", Nev(playerid), ((banner == NINCS) ? ("a rendszer") : bannolo), oka);

	
	TKick( playerid );

	return 1;

}
stock SeeBan(playerid, ido = 0, banner = NINCS, oka[], bool:ipban=false, bool:kick = true, bool:szoveg = false)
{
	new query[256], orok[10], tipus[5], cim[30], bannolo[30];

	if(ido <= 0) orok = "i";
	else orok = "n";

	if(ipban) tipus = "ip";
	else tipus = "nev";
	
	

	if(ipban) strmid(cim, PlayerIP(playerid), 0, strlen(PlayerIP(playerid)), 30);
	else strmid(cim, PlayerName(playerid), 0, strlen(PlayerName(playerid)), 30);

	if(ipban)
	{
		if(egyezik(cim,"127.0.0.1")) return 1;
	
	}
	if(banner == NINCS) bannolo = "Rendszer";
	else strmid(bannolo, PlayerName(banner), 0, strlen(PlayerName(banner)), 30);

	format(query, sizeof(query), "INSERT INTO bans(Tipus, Cim, Ido, Orok, Bannolta, Oka, Datum) VALUES('%s', '%s', '%d', '%s', '%s', '%s', '%d')", tipus, cim, ido, orok, bannolo, oka, UnixTime);
	doQuery(query);

	if(szoveg)
		SendFormatMessageToAll(COLOR_LIGHTRED, "ClassRPG: %s bannolva %s által | Oka: %s", Nev(playerid), ((banner == NINCS) ? ("a rendszer") : bannolo), oka);

	if(kick)
		TKick( playerid );

	return 1;
}

/*stock SeeBan(playerid, ido, banner = NINCS, oka[], bool:ipban=false, bool:kick = true)
{
	new query[256], orok[10], tipus[5], cim[30], bannolo[30];

	if(ido <= 0) orok = "i";
	else orok = "n";
	
	if(ipban) tipus = "ip";
	else tipus = "nev";
	
	if(ipban) strmid(cim, PlayerIP(playerid), 0, strlen(PlayerIP(playerid)), 30);
	else strmid(cim, PlayerName(playerid), 0, strlen(PlayerName(playerid)), 30);
	
	if(banner == NINCS) bannolo = "Rendszer";
	else strmid(bannolo, PlayerName(banner), 0, strlen(PlayerName(banner)), 30);
	
	format(query, sizeof(query), "INSERT INTO bans(Tipus, Cim, Ido, Orok, Bannolta, Oka, Datum) VALUES('%s', '%s', '%d', '%s', '%s', '%s', '%d')", tipus, cim, ido, orok, bannolo, oka, UnixTime);
	doQuery(query);
	
	if(kick)
		Kick(playerid);

	return 1;
}*/

stock Mysql_Insert(tabla[], adatok[], ertekek[])
{
	new query[512];
	Format(query, "INSERT INTO %s (%s) VALUES(%s)", tabla, adatok, ertekek);
	doQuery( query );
	return 1;
}

stock MysqlKapcsolodas(bool:muvelet = true)
{
	if(!Mysql && muvelet == true)
	{
		//new isreal = IsRealServer();
		new serverPort = GetServerVarAsInt("port");
		devmode = (serverPort == DEVMODE_PORT);
		if(serverPort == 7777 || devmode)
		{
			/*if(mysql_init(LOG_ALL, 1) == MySQL:-1)
			{
				print("MySQL kapcsolat hiba, leállás...");
				Stop();
			}*/
				
			sql_ID = mysql_connect(SQL_Host, SQL_User, SQL_Jelszo, SQL_Adatbazis);
		}
		else if(serverPort == 5555)
		{
			/*if(mysql_init(LOG_ALL, 1) == MySQL:-1)
			{
				print("MySQL kapcsolat hiba, leállás...");
				Stop();
			}*/
				
			sql_ID = mysql_connect(SQL_Host, SQL_UserTeszt, SQL_JelszoTeszt, SQL_AdatbazisTeszt);
		}
		//else if(isreal == -1)
		//	FatalServerStopping();
	}
	else if(Mysql && muvelet == false)
		mysql_close();

	return 1;
}

stock MysqlCheck()
{
	if(mysql_ping() == 1)
		return 1;
	return 0;
}

stock RendorKocsi(car)
{
	new f = IsFrakcioKocsi(car);
	switch(f)
	{
		case 1, 2, 14, 15, 20: return 1;
	}
	return 0;
}
//====================Lõtér====================
stock LoterUzenet(string[])
{
	foreach(Jatekosok, i)
	{
		if(LoterFigyel[i] == true)
		{
			SendClientMessage(i, COLOR_LIGHTRED, string);
		}
	}
}
stock LoterFrissites(loter)
{
	if(IsValidDynamicObject(LoterInfo[loter][lObject]))
	{
		DestroyDynamicObject(LoterInfo[loter][lObject]);
		LoterInfo[loter][lObject] = INVALID_OBJECT_ID;
	}	
	LoterInfo[loter][lHasznalva] = false;
	LoterInfo[loter][lHasznalo] = NINCS;
	LoterInfo[loter][lTalalat] = 0;
	LoterInfo[loter][lObject] = NINCS;
	LoterInfo[loter][lLoheto] = false;
	LoterInfo[loter][lTalalt] = false;
	LoterInfo[loter][lFegyver] = NINCS;
	KillTimer(LoterInfo[loter][lObjectTimer]);
	KillTimer(LoterInfo[loter][lTimer]);
	
	new szoveg[200];
	format(szoveg,200,"Lõtér(%d) frissült",loter);
	LoterUzenet(szoveg);
	return 1;
}
stock LoterVege(playerid, loter, fegyver)
{
	if(LoterInfo[loter][lTalalat] < 0)
	{
		SendClientMessage(playerid,COLOR_LIGHTBLUE,"Sajnos nem tudtál eredményesen lõni, próbálkozz újra!");
	}
	else
	{
		PlayerInfo[playerid][pFegyverSkillek][fegyver] += LoterInfo[loter][lTalalat];
		if(PlayerInfo[playerid][pFegyverSkillek][fegyver] >= MAX_SKILLFEGYVER)
			PlayerInfo[playerid][pFegyverSkillek][fegyver] = MAX_SKILLFEGYVER;
								
		SendFormatMessage(playerid,COLOR_LIGHTBLUE,"A gyakorlási idõd lejárt/kiléptél, %d tapasztalatot szereztél, új tapasztalatod: %d",LoterInfo[loter][lTalalat],PlayerInfo[playerid][pFegyverSkillek][fegyver]);	
	}
	FegyverSkillFrissites(playerid);
	KillTimer(LoterInfo[loter][lObjectTimer]);
	KillTimer(LoterInfo[loter][lTimer]);
	new szoveg[200];
	format(szoveg,200,"A játékos(%d) elhagyta a lõteret(%d)",playerid,loter);
	LoterUzenet(szoveg);
	Loterben[playerid] = NINCS;
	LoterFrissites(loter);
	//ResetWeapon(playerid);
	WeaponResetAll(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	//PlayerInfo[playerid][pTeleportAlatt] = 1;
	//PlayerInfo[playerid][pCFalsePositive] = 1;
	SetPlayerPos(playerid, BizzInfo[BIZ_LOTER][bEntranceX],BizzInfo[BIZ_LOTER][bEntranceY],BizzInfo[BIZ_LOTER][bEntranceZ]);
	return 1;
}
forward LoterGyakorlat(loter, playerid);
fpublic LoterGyakorlat(loter, playerid)
{
	new szoveg[200];
	switch(random(100))
	{
		case 0..70:
		{
			LoterInfo[loter][lObject] = CreateDynamicObject(1583, LoterInfo[loter][lPos][0]+random(13), LoterInfo[loter][lPos][1]+random(13), 1009.86, 0, 0, 90, 5995, NINCS, NINCS, 200.0);
			LoterInfo[loter][lLoheto] = true;
			LoterInfo[loter][ltorolheto] = false;
			format(szoveg,200,"A lõtér(%d) lerakott egy ellenséget",loter);
			Streamer_Update(playerid);
			LoterInfo[loter][lTalalt] = false;
		}
		case 71..100:
		{
			LoterInfo[loter][lObject] = CreateDynamicObject(1585, LoterInfo[loter][lPos][0]+random(13), LoterInfo[loter][lPos][1]+random(13), 1009.86, 0, 0, 90, 5995, NINCS, NINCS, 200.0);
			LoterInfo[loter][lLoheto] = false;
			LoterInfo[loter][ltorolheto] = true;
			format(szoveg,200,"A lõtér(%d) lerakott egy túszt",loter);
			LoterInfo[loter][lTimer] = SetTimerEx("LoterTuszTorles", 1000, false, "dd", loter, playerid);
			Streamer_Update(playerid);
			LoterInfo[loter][lTalalt] = false;
		}
	}
	LoterUzenet(szoveg);
	return 1;
}	
forward LoterTuszTorles(loter, playerid);
fpublic LoterTuszTorles(loter, playerid)
{
	if(IsValidDynamicObject(LoterInfo[loter][lObject]) && LoterInfo[loter][ltorolheto])
	{
		DestroyDynamicObject(LoterInfo[loter][lObject]);	
		LoterInfo[loter][lObject] = INVALID_OBJECT_ID;
		new szoveg[200];
		format(szoveg,200,"A lõtér(%d) törölte a túszt",loter);
		LoterUzenet(szoveg);
		LoterGyakorlat(loter, playerid);
		Streamer_Update(playerid);
	}
	return 1;	
}
//====================Lõtér====================

/*=================*\
 Paintball by Heller
 Továbbfejlesztett és jobb változat by Pedro
\*=================*/

fpublic PaintballBejarat(playerid)
{
	/*for(new terem = 0; terem < sizeof(PaintballInfo); terem++)
	{
		if(PBTerem[playerid] != terem) continue;
		PaintballFrissites(terem);
		break;
	}*/
	WeaponResetAll(playerid);
	Paintballozik[playerid] = false;
	PBTerem[playerid] = 0;
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	//PlayerInfo[playerid][pTeleportAlatt] = 1;
	//PlayerInfo[playerid][pCFalsePositive] = 1;
	SetPlayerPos(playerid, BizzInfo[BIZ_PB][bEntranceX],BizzInfo[BIZ_PB][bEntranceY],BizzInfo[BIZ_PB][bEntranceZ]);
	if(Animban[playerid] == 1)
	{
		Animban[playerid] = 0;
		SetPlayerDrunkLevel(playerid, 0);
		new Float:elet;
		GetPlayerHealth(playerid, elet);
		if(elet < 15.0)
			SetHealth(playerid, 22.0);
		else if(elet < 95.0)
			SetHealth(playerid, elet+5.0);
	}
	ClearAnim(playerid);
	UnFreeze(playerid);
	return 1;
}
stock PaintballFrissites(terem)
{
	PaintballInfo[terem][pbNevezesek] = 0;
	PaintballInfo[terem][pbNevezesIdo] = NINCS;
	PaintballInfo[terem][pbMerkozesIdo][0] = NINCS;
	PaintballInfo[terem][pbMerkozesIdo][1] = NINCS;
	PaintballInfo[terem][pbHasznalva] = false;
	PaintballInfo[terem][pbNyertes] = NINCS;
	PaintballInfo[terem][pbNyertesFegyver] = NINCS;
	PaintballInfo[terem][pbNyertesOles] = 0;
}
stock PaintballVege(terem)
{
	/*
	24 -	2 - WEAPONSKILL_DESERT_EAGLE
	27 -	5 - WEAPONSKILL_SPAS12_SHOTGUN
	29 -	7 - WEAPONSKILL_MP5
	31 -	9 - WEAPONSKILL_M4
	34 -	10 - WEAPONSKILL_SNIPERRIFLE
	*/
	new bool:ketten=false;
	if(Paintballozik[PaintballInfo[terem][pbNyertes]])
	{	
		new bentvan;
		foreach(Jatekosok, j)
		{
			if(Paintballozik[j] && PBTerem[j] == terem)
			{
				bentvan++;
			}
		}	
		
		if(bentvan > 2)
		{
			if(PaintballInfo[terem][pbNyertesFegyver] == 22) PlayerInfo[PaintballInfo[terem][pbNyertes]][pFegyverSkillek][0] += MAX_PBSKILL, SendClientMessage(PaintballInfo[terem][pbNyertes], COLOR_YELLOW, "A Colt45 skilled emelkedett "#MAX_PBSKILL" ponttal");
			if(PaintballInfo[terem][pbNyertesFegyver] == 23) PlayerInfo[PaintballInfo[terem][pbNyertes]][pFegyverSkillek][1] += MAX_PBSKILL, SendClientMessage(PaintballInfo[terem][pbNyertes], COLOR_YELLOW, "A Silenced skilled emelkedett "#MAX_PBSKILL" ponttal");
			if(PaintballInfo[terem][pbNyertesFegyver] == 24) PlayerInfo[PaintballInfo[terem][pbNyertes]][pFegyverSkillek][2] += MAX_PBSKILL+10, SendClientMessage(PaintballInfo[terem][pbNyertes], COLOR_YELLOW, "A Deagle skilled emelkedett "#MAX_PBSKILL+10" ponttal");
			if(PaintballInfo[terem][pbNyertesFegyver] == 25) PlayerInfo[PaintballInfo[terem][pbNyertes]][pFegyverSkillek][3] += MAX_PBSKILL, SendClientMessage(PaintballInfo[terem][pbNyertes], COLOR_YELLOW, "A Shotgun skilled emelkedett "#MAX_PBSKILL" ponttal");
			if(PaintballInfo[terem][pbNyertesFegyver] == 27) PlayerInfo[PaintballInfo[terem][pbNyertes]][pFegyverSkillek][5] += MAX_PBSKILL, SendClientMessage(PaintballInfo[terem][pbNyertes], COLOR_YELLOW, "A Combat skilled emelkedett "#MAX_PBSKILL" ponttal");
			if(PaintballInfo[terem][pbNyertesFegyver] == 29) PlayerInfo[PaintballInfo[terem][pbNyertes]][pFegyverSkillek][7] += MAX_PBSKILL, SendClientMessage(PaintballInfo[terem][pbNyertes], COLOR_YELLOW, "Az MP5 skilled emelkedett "#MAX_PBSKILL" ponttal");
			if(PaintballInfo[terem][pbNyertesFegyver] == 30) PlayerInfo[PaintballInfo[terem][pbNyertes]][pFegyverSkillek][8] += MAX_PBSKILL, SendClientMessage(PaintballInfo[terem][pbNyertes], COLOR_YELLOW, "Az AK47 skilled emelkedett "#MAX_PBSKILL" ponttal");
			if(PaintballInfo[terem][pbNyertesFegyver] == 31) PlayerInfo[PaintballInfo[terem][pbNyertes]][pFegyverSkillek][9] += MAX_PBSKILL, SendClientMessage(PaintballInfo[terem][pbNyertes], COLOR_YELLOW, "Az M4 skilled emelkedett "#MAX_PBSKILL" ponttal");
			FegyverSkillFrissites(PaintballInfo[terem][pbNyertes]);
			if(IsPlayerConnected(PaintballInfo[terem][pbNyertes]))
				GiveMoney(PaintballInfo[terem][pbNyertes], PaintballInfo[terem][pbNyertesOles]*5000);
			
			if(bentvan >= 5)
				GiveBonusKredit(PaintballInfo[terem][pbNyertes], 3, "paintball");
		}
		else ketten = true;
		
		bentvan = 0;	
	}
	
	new msg[128];
	if(ketten)
		msg = "Mivel csak ketten voltatok nem ad skillt és pénzt";
	else if(!IsPlayerConnected(PaintballInfo[terem][pbNyertes]))
		msg = "A Paintball mérkõzésnek vége. A nyertes kilépett.";
	else
		format(msg, 128, "A Paintball mérkõzésnek vége, %s nyerte %d öléssel! Jutalma %d forint, és %d fegyverskill!", ICPlayerName(PaintballInfo[terem][pbNyertes]), PaintballInfo[terem][pbNyertesOles], PaintballInfo[terem][pbNyertesOles] * 5000, MAX_PBSKILL);
	
    foreach(Jatekosok, i)
	{
		if(Paintballozik[i] && PBTerem[i] == terem)
		{
			SetTimerEx("PaintballBejarat", 3000, false, "u", i);
			WeaponResetAll(i);
			Freeze(i);
			Msg(i, msg, .szin = COLOR_YELLOW);
		}
	}
	
	PaintballFrissites(terem);
	
	return 1;
}

forward UzemanyagLeenged(playerid, fajta, liter, trailer, kut);
fpublic UzemanyagLeenged(playerid, fajta, liter, trailer, kut)
{
	if(fajta == 0)
	{
		new cash = (liter * 300);
		SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Feltöltöttél %d liter benzint, most %d liter van benne, %d Ft-ot kaptál érte", liter, BenzinKutak[kut][bBenzin], cash);
		BenzinKutak[kut][bSzef] -= cash;
		PlayerInfo[playerid][pPayCheck] += cash;
		UnFreeze(playerid);
		if(Benzin[trailer] < 1)
			BenzintSzallit[playerid] = false;
		MunkaFolyamatban[playerid] = 0;	
	}
	else if(fajta == 1)
	{
		new cash = (liter * 300);
		SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Feltöltöttél %d liter dieselt, most %d liter van benne, %d Ft-ot kaptál érte", liter, BenzinKutak[kut][bDiesel], cash);
		BenzinKutak[kut][bSzef] -= cash;
		PlayerInfo[playerid][pPayCheck] += cash;
		UnFreeze(playerid);
		if(Diesel[trailer] < 1)
			BenzintSzallit[playerid] = false;
		MunkaFolyamatban[playerid] = 0;	
	}
	else if(fajta == 2)
	{
		new cash = (liter * 400);
		SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* Feltöltöttél %d liter kerozint, most %d liter van benne, %d Ft-ot kaptál érte", liter, BenzinKutak[kut][bKerozin], cash);
		BenzinKutak[kut][bSzef] -= cash;
		PlayerInfo[playerid][pPayCheck] += cash;
		UnFreeze(playerid);
		if(Kerozin[trailer] < 1)
			BenzintSzallit[playerid] = false;	
		MunkaFolyamatban[playerid] = 0;	
	}
	BenzinKutFrissites(kut);
	return 1;
}		
forward Autotolvaj(playerid, szam);
fpublic Autotolvaj(playerid, szam)
{
	
	if(szam == 1)
		Cselekves(playerid, "betöri az ablakot..");
	else if(szam == 2)
		Cselekves(playerid, "leszedi a burkolatokat..");
	else if(szam == 3)
		Cselekves(playerid, "kikapcsolja a riasztót..");
	else if(szam == 4)
	{
		MunkaFolyamatban[playerid] = 0;
		new level = SkillLevel(PlayerInfo[playerid][pJackSkill]);
		new kocsiban = GetPlayerVehicleID(playerid);
		
		PlayerInfo[playerid][pJackSkill]++;
		
		new model = GetVehicleModel(kocsiban);
		if(!model)
			return Msg(playerid, "Nem vagy jármûben");
			
		new kocsiara = JarmuAra[model-400][jAra];
		
		
		if(kocsiara >= level*KOCSI_LOPAS_SZORZO) return Msg(playerid, "Ehhez a jármûhöz még nem értesz!");
		if(IsARepulo(kocsiban)) return Msg(playerid, "EZ nem KOCSI!");
		if(kocsiara >= 100000000) return Msg(playerid, "Ez meghaladja a tudásod, vagy nem is kocsi?!");
		
		switch(random(4))
		{
			case 1:
			{
				new kocsiserules, ido, Float:kocsielet;
				GetVehicleHealth(kocsiban, kocsielet);
				kocsiserules = 1000 - floatround(kocsielet);
				ido = 5500 + (kocsiserules * 3);
				SendClientMessage(playerid, COLOR_GREEN, "Összekötöd a vezetékeket...");
				SetTimerEx("Munkavege", ido, false, "ddd", playerid, M_MOTOR, 0);
				JarmuLopas[kocsiban][playerid] = UnixTime+3600;
				MunkaFolyamatban[playerid] = 1;
				ProxDetector(30.0, playerid, "* Valaki összeköti a vezetékeket...", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			case 2:
			{
				new kocsiserules, ido, Float:kocsielet;
				GetVehicleHealth(kocsiban, kocsielet);
				kocsiserules = 1000 - floatround(kocsielet);
				ido = 5500 + (kocsiserules * 3);
				SendClientMessage(playerid, COLOR_GREEN, "Összekötöd a vezetékeket...");
				SetTimerEx("Munkavege", ido, false, "ddd", playerid, M_MOTOR, 0);
				MunkaFolyamatban[playerid] = 1;
				ProxDetector(30.0, playerid, "* Valaki összeköti a vezetékeket...", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				JarmuLopas[kocsiban][playerid] = UnixTime+3600;
			}
			default:
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "* A jármûvet nem sikerült beindítani");
			}
		}
	
	
	}
	
	return 1;
}

stock Msg(playerid, szoveg[], bool:szerverNev = true, szin = COLOR_LIGHTRED)
{
	if(szerverNev)
	{
		new str[144];
		str = "ClassRPG: ";
		strcat(str, szoveg);
		return SendClientMessage(playerid, szin, str);
	}
	else
		return SendClientMessage(playerid, szin, szoveg);
}

stock Msg2(playerid, szoveg[], szin = COLOR_WHITE)
{
	if(!IsPlayerConnected(playerid)) return 1;
	SendClientMessage(playerid, szin, szoveg);
	return 1;
}

stock Online(nev[])
{
	foreach(Jatekosok, i)
	{
		if(strcmp(PlayerInfo[i][pNev], nev, false) == 0)
			return 1;
	}
	return 0;
}

stock OnlineKocsiTulaj(kocsi)
{
		//printf("Online uid: %d, kocsi %d id: %d",OnlineUID(CarInfo[kocsi][cTulaj]),kocsi,CarInfo[kocsi][cTulaj]);
		if(OnlineUID(CarInfo[kocsi][cTulaj]) != NINCS) 
			return 1;
		else
			return 0;

}
stock OnlineUID(uid)
{
	foreach(Jatekosok, i)
	{
		if(PlayerInfo[i][pID] == uid)
			return i;
	}
	return NINCS;
}

stock NameTag(playerid, bool:be)
{
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || playerid == x || IsPlayerNPC(x)) continue;
		ShowPlayerNameTagForPlayer(playerid, x, be);
	}
	return 1;
}

stock NameTagEngem(playerid, bool:be)
{
	for(new x = 0; x < MAX_PLAYERS; x++)
	{
		if(!IsPlayerConnected(x) || !Logged(x) || playerid == x || IsPlayerNPC(x)) continue;
		ShowPlayerNameTagForPlayer(x, playerid, be);
	}
	return 1;
}
stock GpsLista(playerid, tipus)
{
	if(tipus == GPS_SZEMELYES)
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "==============GPS - személyes lista==============");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "/gps [funkció]");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* ház [házszám], házam [1/2], kocsim [1/2]");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Fobb helyek: LSvárosháza, LSbank, SFbank, LSberlo, SFberlo, fegyenctelep, fort, kórház");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Munka: uttisztito, farm, almafarm, funyírók, kukás, szemettelep, pizzahut");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Munka: favágó, kamionhq, posta, hullaszallito, taxihq, temeto, prod, horgász");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Munka: pénzszállitó, vadász, csomagszallito, bánya, buszsofor");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Frakció: autokerhq, LSszerelo, oktatok, riporter, LSPD, NAV, FBI, SFszerelo, sfswat");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Szórakozóhelyek: paintball(pb), borozó, pigpen, kocsma, alhambra");
		SendClientMessage(playerid, COLOR_LIGHTRED, "_____ A parancsok ékezet nélkül is muködnek _____");
		return 1;
	}
	if(tipus == GPS_BOLTOK)
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "==============GPS - boltok lista==============");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "/gps [funkció]");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* (24/7)LS Boltok: bolt1, bolt2, bolt3, bolt4, bolt5, bolt6");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* (24/7)SF Boltok: sfbolt1, sfbolt2, sfbolt3, sfbolt4");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Ruhabolt: ruha1, ruha2, ruha3, ruha4(SF)");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* LSfegyverbolt, SFfegyverbolt, Lotér, paintball");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Autós: atalakito, autosbolt");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Autófestés: spray1, spray2, spray3, spray4(SF)");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Egyéb: lottó, gyógyszertár, sflottó ");
		SendClientMessage(playerid, COLOR_LIGHTRED, "_____ A parancsok ékezet nélkül is muködnek _____");
		return 1;
	}
	if(tipus == GPS_EGYEB)
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "==============GPS - egyéb lista==============");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "/gps [funkció]");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Gyárak: LSgyár, SFgyár");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Drog/Mati: LSmuanyag, SFmuanyag, LSdrog, SFdrog");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Verseny: race, gokart, motocross, roncsderbi, sfstadion, lsstadion");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Edzotermek: Box, Cobra");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Szolgáltatás: atm, bérszéf");
		SendClientMessage(playerid, COLOR_LIGHTRED, "_____ A parancsok ékezet nélkül is muködnek _____");
		return 1;
	}
	if(tipus == GPS_BIZNISZEK)
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "==============GPS - bizniszek lista==============");
		new bizirat[256];
		new eddig=0;
		for(new h = 0; h < MAXBIZ; h++)
		{
			format(bizirat, sizeof(bizirat), "%s [%d] %s | ", bizirat, h, BizzInfo[h][bBNev]);
			eddig++;
			if(eddig == 5)
			{
				SendClientMessage(playerid, COLOR_LIGHTGREEN, bizirat);
				eddig = 0;
				format(bizirat, sizeof(bizirat), "");
			}
		}
		if(eddig > 0)
			SendClientMessage(playerid, COLOR_LIGHTGREEN, bizirat);

		SendClientMessage(playerid, COLOR_LIGHTRED, "_____ A parancsok számokkal mûködnek_____");
		return 1;
	}
	return 1;
}
stock Reszegseg(playerid, fokozat=1)
{
	if(fokozat == 1)
	{
		if(GetPlayerDrunkLevel(playerid) < 1900)
		SetPlayerDrunkLevel(playerid, 800);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		if(PlayerDrunk[playerid] >= 1) GameTextForPlayer(playerid, "~p~Enyhn spicces~n~~w~vagy", 3500, 1);
	}
	if(fokozat == 2)
	{
		if(GetPlayerDrunkLevel(playerid) < 1900)
		SetPlayerDrunkLevel(playerid, 1900);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		if(PlayerDrunk[playerid] >= 2) GameTextForPlayer(playerid, "~p~Flspicces~n~~w~vagy", 3500, 1);
	}
	if(fokozat == 3)
	{
		if(GetPlayerDrunkLevel(playerid) < 1900)
		SetPlayerDrunkLevel(playerid, 1900);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		if(PlayerDrunk[playerid] >= 3) GameTextForPlayer(playerid, "~p~K¦tyagos~n~~w~vagy", 3500, 1);
	}
	if(fokozat == 4)
	{
		if(GetPlayerDrunkLevel(playerid) < 1900)
		SetPlayerDrunkLevel(playerid, 1900);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		if(PlayerDrunk[playerid] >= 4) GameTextForPlayer(playerid, "~p~Fl Rszeg~n~~w~vagy", 3500, 1);
	}
	if(fokozat == 5)
	{
		if(GetPlayerDrunkLevel(playerid) < 1900)
		SetPlayerDrunkLevel(playerid, 1900);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
		if(PlayerDrunk[playerid] >= 5) GameTextForPlayer(playerid, "~p~Rszeg~n~~w~vagy", 3500, 1);
	}
	return 0;
}
stock DiscoItallap(playerid, melyik)
{
	if(melyik == ITALLAP_RIO)
	{
		SendFormatMessage(playerid, COLOR_LIGHTBLUE,"========================= %s Itallap =========================",BizzInfo[BIZ_RIO ][bMessage]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE,"=========================Üdítõk=========================");
		SendClientMessage(playerid, COLOR_YELLOW,"Natur Aqua - 250ft ||| Coca Cola - 300ft ||| Fanta - 300ft ||| Sprite - 300ft");
		SendClientMessage(playerid, COLOR_LIGHTBLUE,"=========================Sörök=========================");
		SendClientMessage(playerid, COLOR_YELLOW,"Soproni - 350Ft ||| Kozel - 340Ft ||| Dreher - 360Ft");
		SendClientMessage(playerid, COLOR_LIGHTBLUE,"=========================Long Drink=========================");
		SendClientMessage(playerid, COLOR_YELLOW,"Bacardi Breezer - 430Ft ||| Summers By - 380Ft ||| Acapulco - 400Ft ||| Benedict - 400Ft");
		SendClientMessage(playerid, COLOR_LIGHTBLUE,"=========================Rövid Italok=========================");
		SendClientMessage(playerid, COLOR_YELLOW,"Jack Daniels - 360Ft ||| Whiskey Cola - 450Ft ||| Vodka Narancs - 450Ft");
		SendClientMessage(playerid, COLOR_YELLOW,"Vodka Sprite - 450Ft ||| Vodka Redbull - 500Ft ||| Bacardi Apple - 500Ft");
		SendClientMessage(playerid, COLOR_YELLOW,"Fütyülõs Barack - 500Ft ||| Unicum - 370Ft ||| Jager - 460Ft");
		SendClientMessage(playerid, COLOR_LIGHTBLUE,"=========================Koktélok=========================");
		SendClientMessage(playerid, COLOR_YELLOW,"Blue Arrow - 670Ft ||| Bronx - 700Ft ||| California Dream - 700Ft");
		SendClientMessage(playerid, COLOR_YELLOW,"Daiquiri - 730Ft ||| Bloody Mary - 670Ft ||| Sex On The Beach - 750Ft");
		SendClientMessage(playerid, COLOR_LIGHTRED,"=========================Club Rio Itallap=========================");
		Msg(playerid,"Az italokat egybe írjátok ne külön!(pl: BloodyMary)");
		return 1;
	}
	if(melyik == ITALLAP_KOCSMA)
	{
		SendFormatMessage(playerid, COLOR_WHITE, "|__________________ %s(Italok) __________________|", BizzInfo[BIZ_KOCSMA][bMessage]);
		SendClientMessage(playerid, COLOR_WHITE, "Használat: /drink [Ital]");
		SendClientMessage(playerid, COLOR_GREY, "Italok: Sör (450FT), Vodka (600FT), Whiskey (1000FT), Pálinka (700FT), Víz (100FT), Kristályvíz (300FT), CocaCola (350Ft)");
		SendClientMessage(playerid, COLOR_GREY, "Ételek: Chips(450Ft), Ropi(150Ft), Mogyoró(350Ft)");
		SendFormatMessage(playerid, COLOR_WHITE, "|__________________ %s(Italok) __________________|", BizzInfo[BIZ_KOCSMA][bMessage]);
		return 1;	
	}
	if(melyik == ITALLAP_MORIARTY)
	{
		SendFormatMessage(playerid, COLOR_LIGHTBLUE,"========================= %s Itallap =========================",BizzInfo[BIZ_MORIARTY][bMessage]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE,"=========================Üdítõk=========================");
		SendClientMessage(playerid, COLOR_YELLOW,"Natur Aqua - 250ft ||| Coca Cola - 300ft ||| Fanta - 300ft ||| Sprite - 300ft");
		SendClientMessage(playerid, COLOR_LIGHTBLUE,"=========================Sörök=========================");
		SendClientMessage(playerid, COLOR_YELLOW,"Soproni - 350Ft ||| Kozel - 340Ft ||| Dreher - 360Ft");
		SendClientMessage(playerid, COLOR_LIGHTBLUE,"=========================Long Drink=========================");
		SendClientMessage(playerid, COLOR_YELLOW,"Bacardi Breezer - 430Ft ||| Summers By - 380Ft ||| Acapulco - 400Ft ||| Benedict - 400Ft");
		SendClientMessage(playerid, COLOR_LIGHTBLUE,"=========================Rövid Italok=========================");
		SendClientMessage(playerid, COLOR_YELLOW,"Jack Daniels - 360Ft ||| Whiskey Cola - 450Ft ||| Vodka Narancs - 450Ft");
		SendClientMessage(playerid, COLOR_YELLOW,"Vodka Sprite - 450Ft ||| Vodka Redbull - 500Ft ||| Bacardi Apple - 500Ft");
		SendClientMessage(playerid, COLOR_YELLOW,"Fütyülõs Barack - 500Ft ||| Unicum - 370Ft ||| Jager - 460Ft");
		SendClientMessage(playerid, COLOR_LIGHTBLUE,"=========================Koktélok=========================");
		SendClientMessage(playerid, COLOR_YELLOW,"Blue Arrow - 670Ft ||| Bronx - 700Ft ||| California Dream - 700Ft");
		SendClientMessage(playerid, COLOR_YELLOW,"Daiquiri - 730Ft ||| Bloody Mary - 670Ft ||| Sex On The Beach - 750Ft");
		SendClientMessage(playerid, COLOR_LIGHTRED,"=========================Club Rio Itallap=========================");
		Msg(playerid,"Az italokat egybe írjátok ne külön!(pl: BloodyMary)");
		return 1;	
	}
	return 0;
}
stock IsAt(playerid, hol)
{
	new Int = GetPlayerInterior(playerid);
	if(hol == IsAt_RioMiki)
	{
		if(PlayerToPoint(3, playerid, 1657.8412,-1349.8939,19.2059))//Rio Miki
		return 1;
	}
	if(hol == IsAt_MoriartyMiki)
	{
		if(PlayerToPoint(3, playerid, -41.9120,-1115.4093,1.1553))//Moriarty Miki
		return 1;
	}
	if(hol == IsAt_RioPultnal)
	{
		if(PlayerToPoint(5, playerid, 1678.1423,-1344.4899,17.4059))//Rio Pultnál
		return 1;
	}
	if(hol == IsAt_MoriartyPultnal)
	{
		if(PlayerToPoint(5, playerid, -54.1100,-1135.8773,1.0781))//Moriarty Pultnál
		return 1;
	}
	if(hol == IsAt_Fegyverkeszitohely)
	{
		if(Int == 2 &&
		PlayerToPoint(2.0, playerid, 2543.1113,-1295.8663,1044.1250) ||
		PlayerToPoint(2.0, playerid, 2560.0732,-1303.5065,1044.1250) ||
		PlayerToPoint(2.0, playerid, 2552.0959,-1303.6090,1044.1250) ||
		PlayerToPoint(2.0, playerid, 2544.0491,-1303.6232,1044.1250) ||
		PlayerToPoint(2.0, playerid, 2556.0754,-1295.8505,1044.1250))
		return 1;
	}
	if(hol == IsAt_Drogkeszitohely)
	{
		if(Int == 2 &&
		PlayerToPoint(2.0, playerid, 2543.0957,-1290.9987,1044.1250) ||
		PlayerToPoint(2.0, playerid, 2555.9519,-1291.0038,1044.1250) ||
		PlayerToPoint(2.0, playerid, 2560.0454,-1283.8326,1044.1250) ||
		PlayerToPoint(2.0, playerid, 2552.0381,-1283.7162,1044.1250) ||
		PlayerToPoint(2.0, playerid, 2544.0610,-1283.6829,1044.1250))
		return 1;
	}
	if(hol == IsAt_ArrestHely)
	{
		for(new a = 0; a < MAX_OBJECTSZ; a++)
		{
			if(OBJECT[a][sTipus] == 19234)
			{
				if(PlayerToPoint(5, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
				{
					if(OBJECT[a][sVw] != NINCS)
					{
						if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
							return 1;
					}
					else
						return 1;
				}
			}
		}
	}
	if(hol == IsAt_Kordon)
    {
        for(new a = 0; a < MAX_OBJECTSZ; a++)
        {
            if(OBJECT[a][sTipus] == 1423 || OBJECT[a][sTipus] == 1238)
            {
                if(PlayerToPoint(0.5, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
                {
                    if(OBJECT[a][sVw] != NINCS)
                    {
                        if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
                            return 1;
                    }
                    else
                        return 1;
                }
            }
        }
    }
	if(hol == IsAt_Viragoskert)
    {
        for(new a = 0; a < MAX_OBJECTSZ; a++)
        {
            if(OBJECT[a][sTipus] == 869 || OBJECT[a][sTipus] == 870 || OBJECT[a][sTipus] == 877 || OBJECT[a][sTipus] == 878)
            {
                if(PlayerToPoint(2, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
                {
                    if(OBJECT[a][sVw] != NINCS)
                    {
                        if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
                            return 1;
                    }
                    else
                        return 1;
                }
            }
        }
    }
	if(hol == IsAt_SzereloHely)
    {
	
		if(PlayerToPoint(5, playerid, -1849.6693, 124.3866, 13.2226) ||//Új SFszerelõmûhely
		PlayerToPoint(5, playerid, -1836.9281, 124.0847, 13.5826) || //Új SFszerelõmûhely
		PlayerToPoint(10, playerid, 1874.2866,-2275.9460,13.5469) || //LS reptér
		PlayerToPoint(10, playerid, 1873.4825,-2298.4048,13.5469) || //LS reptér
		PlayerToPoint(15, playerid, -1311.73, -474.20, 13.84) || //SF reptér
		PlayerToPoint(15, playerid, 1636.16, 1549.72, 10.50) || //LV reptér
		PlayerToPoint(15, playerid, 247.10, 2547.78, 15.93) || //Repülõgéptemetõ
		PlayerToPoint(10, playerid, 2073.3018, -2068.2964, 11.6834) || //Szerelõ HQ Los Santos Új
		PlayerToPoint(10, playerid, 2060.6958, -2067.9758, 11.6834) || //Szerelõ HQ Los Santos Új
		PlayerToPoint(10, playerid, 2032.7006, -2068.5708, 12.3234) || //Szerelõ HQ Los Santos Új
		PlayerToPoint(10, playerid, 2020.0752, -2068.7749, 12.3234) || //Szerelõ HQ Los Santos Új
		PlayerToPoint(10, playerid, 2106.4363, 2741.0349, 10.8203)) return 1; //LV Szerelõ mûhely
	
        for(new a = 0; a < MAX_OBJECTSZ; a++)
        {
            if(OBJECT[a][sTipus] == 19898)
            {
                if(PlayerToPoint(10, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
                {
                    if(OBJECT[a][sVw] != NINCS)
                    {
                        if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
                            return 1;
                    }
                    else
                        return 1;
                }
            }
        }
    }
	if(hol == IsAt_SzereloDuty)//11705
    {
        for(new a = 0; a < MAX_OBJECTSZ; a++)
        {
            if(OBJECT[a][sTipus] == 19627)
            {
                if(PlayerToPoint(5, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
                {
                    if(OBJECT[a][sVw] != NINCS)
                    {
                        if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
                            return 1;
                    }
                    else
                        return 1;
                }
            }
        }
    }
	if(hol == IsAt_SignumDuty)//
    {
        for(new a = 0; a < MAX_OBJECTSZ; a++)
        {
            if(OBJECT[a][sTipus] == 11705)
            {
                if(PlayerToPoint(5, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
                {
                    if(OBJECT[a][sVw] != NINCS)
                    {
                        if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
                            return 1;
                    }
                    else
                        return 1;
                }
            }
        }
    }
	if(hol == IsAt_Kameraszoba)
    {
        for(new a = 0; a < MAX_OBJECTSZ; a++)
        {
            if(OBJECT[a][sTipus] == 19894)
            {
                if(PlayerToPoint(3, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
                {
                    if(OBJECT[a][sVw] != NINCS)
                    {
                        if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
                            return 1;
                    }
                    else
                        return 1;
                }
            }
        }
    }
	if(hol == IsAt_Szerencsegep)
	{
		if(PlayerToPoint(1.0,playerid,830.5533,-0.2790,1004.1797) ||
		PlayerToPoint(1.0,playerid,833.5961,3.2701,1004.1797) ||
		PlayerToPoint(1.0,playerid, 505.6412,-79.8423,998.9609) ||
		PlayerToPoint(1.0,playerid, 505.6580,-81.0739,998.9609))
		return 1;
		for(new a = 0; a < MAX_OBJECTSZ; a++)
		{
			if(OBJECT[a][sTipus] == 2754)
			{
				if(PlayerToPoint(2, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
				{
					if(OBJECT[a][sVw] != NINCS)
					{
						if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
							return 1;
					}
					else
						return 1;
				}
			}
		}			
	}
	if(hol == IsAt_Almafa)
	{
		for(new a = 0; a < MAX_OBJECTSZ; a++)
		{
			if(OBJECT[a][sTipus] == 737)
			{
				if(PlayerToPoint(5, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
				{
					if(OBJECT[a][sVw] != NINCS)
					{
						if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
							return 1;
					}
					else
						return 1;
				}
			}
		}
	}
	if(hol == IsAt_Telefonfulke)
	{
		if(PlayerToPoint(2, playerid, 638.6488,-1228.2339,18.1665) ||
			PlayerToPoint(1, playerid, 2258.5269,-1211.6892,23.9688) ||
			PlayerToPoint(1, playerid, 1926.1096,-1764.8553,13.5391) ||
			PlayerToPoint(1, playerid, 1505.1166,-1751.4348,13.5469) ||
			PlayerToPoint(1, playerid, 997.9195,-916.9601,42.1797) ||
			PlayerToPoint(1, playerid, 1359.2749,-1743.4990,13.5469) ||
			PlayerToPoint(1, playerid, 1318.8165,-1373.5201,13.7430) ||
			PlayerToPoint(1, playerid, 1929.5706,-1785.3256,13.5469) ||
			PlayerToPoint(1, playerid, 1948.4512,-1765.2966,13.5469)) 
		return 1;
		for(new a = 0; a < MAX_OBJECTSZ; a++)
		{
			if(OBJECT[a][sTipus]==1216)
			{
				if(PlayerToPoint(2, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
				{
					if(OBJECT[a][sVw] != NINCS)
					{
						if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
							return 1;
					}
					else
						return 1;
				}
			}
		}		
	}
	if(hol == IsAt_Csokiautomata)
	{
		if(PlayerToPoint(3, playerid, 1634.0973,-2238.2817,13.5078) ||
		PlayerToPoint(3, playerid, 2481.7778,-1958.6669,13.5817) ||
		PlayerToPoint(3, playerid, 2140.2891,-1161.9464,23.9922) ||
		PlayerToPoint(3, playerid, 2154.1648,-1016.1125,62.8740) ||
		PlayerToPoint(3, playerid, 662.2329,-551.3305,16.3359) ||
		PlayerToPoint(3, playerid, 361.5373,159.5193,1008.3828) || 
		PlayerToPoint(3, playerid, 500.2959,-2.3686,1000.6797) || 
		PlayerToPoint(3, playerid, -17.5830,-90.5193,1003.5469) ||
		PlayerToPoint(3, playerid, -36.3786,-57.1332,1003.5469) ||
		PlayerToPoint(3, playerid, -1349.3627,494.0229,11.1953) ||
		PlayerToPoint(3, playerid, -1819.9491,341.9710,-41.7493) ||
		PlayerToPoint(3, playerid, -1646.06, -2243.94, 31.58) ||
		PlayerToPoint(3, playerid, -2229.0271,287.2406,35.3203))
			return 1;
		for(new a = 0; a < MAX_OBJECTSZ; a++)
		{
			if(OBJECT[a][sTipus]==1776)
			{
				if(PlayerToPoint(3, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
				{
					if(OBJECT[a][sVw] != NINCS)
					{
						if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
							return 1;
					}
					else
						return 1;
				}
			}
		}		
			
	}
	else if(hol == IsAt_Fankos)
	{
		if(PlayerToPoint(3, playerid, 379.235, -187.871, 1000.632))
			return 1;
	}
	else if(hol == IsAt_Italautomata)
	{
		if(PlayerToPoint(3, playerid, 1787.5691,-1369.2091,15.7578) ||
		PlayerToPoint(3, playerid, 1153.3550,-1460.9474,15.7969) ||
		PlayerToPoint(3, playerid, -2005.7046,-490.8700,35.5313) ||
		PlayerToPoint(3, playerid, -2010.2950,-396.9321,35.5313) ||
		PlayerToPoint(3, playerid, -2039.9181,-397.5221,35.5313) ||
		PlayerToPoint(3, playerid, -2068.4399,-397.5222,35.5313) ||
		PlayerToPoint(3, playerid, -2097.3289,-397.5222,35.5313) ||
		PlayerToPoint(3, playerid, -2119.6128,-422.8927,35.5313) ||
		PlayerToPoint(3, playerid, -2092.2852,-490.8770,35.5313) ||
		PlayerToPoint(3, playerid, -2063.2310,-490.8701,35.5313) ||
		PlayerToPoint(3, playerid, -2034.3966,-490.8794,35.5313) ||
		PlayerToPoint(3, playerid, -2419.5813,984.4733,45.2969) ||
		PlayerToPoint(3, playerid, 1929.7091,-1772.0161,13.5469) ||
		PlayerToPoint(3, playerid, -16.8375,-90.8663,1003.5469) ||
		PlayerToPoint(3, playerid, 1729.5658,-1944.3823,13.5668) ||
		PlayerToPoint(3, playerid, 2060.6199,-1898.4546,13.5538) ||
		PlayerToPoint(3, playerid, 2325.6445,-1645.9592,14.8270) ||
		PlayerToPoint(3, playerid, 2353.0840,-1357.3569,24.3984) ||
		PlayerToPoint(3, playerid, 2224.3989,-1153.3273,1025.7969) ||
		PlayerToPoint(3, playerid, -1349.3037,492.4825,11.1953) ||
		PlayerToPoint(3, playerid, -1820.0435,337.3485,-41.7493)||
		PlayerToPoint(3, playerid, 1494.2998046875, -1767, 18.180000305176 ) ||
		PlayerToPoint(3, playerid, 1349.1899414063, -1759.1199951172, 12.920000076294) ||
		PlayerToPoint(3, playerid, 1548.1999511719, -1679.5999755859, 12.960000038147) ||
		PlayerToPoint(3, playerid, 2241.5, -1722.8199462891, 13) ||
		PlayerToPoint(3, playerid, 2443.8999023438, -2121.1999511719, 12.89999961853) ||
		PlayerToPoint(3, playerid, 1966.5600585938, -1272, 23.39999961853) ||
		PlayerToPoint(3, playerid, 1637.8000488281, -1171.8000488281, 23.5) ||
		PlayerToPoint(3, playerid, 1418, -1020.9000244141, 23.120000839233) ||
		PlayerToPoint(3, playerid, 921.59997558594, -1232.5999755859, 16.25) ||
		PlayerToPoint(3, playerid, 1050.4100341797, -1445, 12.89999961853) ||
		PlayerToPoint(3, playerid, 378.60000610352, -2064.3000488281, 7.2300000190735) ||
		PlayerToPoint(3, playerid, 1367.1999511719, -1287.8000488281, 12.800000190735) ||
		PlayerToPoint(3, playerid, 747, -1385.5, 12.998999595642) ||
		PlayerToPoint(3, playerid, 999.20001220703, -911, 41.700000762939) ||
		PlayerToPoint(3, playerid, 1315.5, -1367.9880371094, 12.89999961853) ||
		PlayerToPoint(3, playerid, 1810.8800048828, -1874.3000488281, 12.979999542236) ||
		PlayerToPoint(3, playerid, 1831.1800537109, -1774.4000244141, 12.998999595642) ||
		PlayerToPoint(3, playerid, 1174.1999511719, -1341.6999511719, 13.39999961853) ||
		PlayerToPoint(3, playerid, 1222.8000488281, -1861.6999511719, 12.89999961853) ||
		PlayerToPoint(3, playerid, -111.98999786377, -12.199999809265, 2.4000000953674) ||
		PlayerToPoint(3, playerid, 2742.6101074219, -2452.6398925781, 13.300000190735) ||
		PlayerToPoint(3, playerid, -1634.46, -2239.67, 31.55) ||
		PlayerToPoint(3, playerid, 1018.7867, -1343.6935, 2469.5093) ||
		PlayerToPoint(3, playerid, -359.6825, 1838.7903, 41.8000) ||
		PlayerToPoint(3, playerid, -1981.9413,142.5771,27.6875))
			return 1;
		for(new a = 0; a < MAX_OBJECTSZ; a++)
		{
			if(OBJECT[a][sTipus]==1775)
			{
				if(PlayerToPoint(3, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
				{
					if(OBJECT[a][sVw] != NINCS)
					{
						if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
							return 1;
					}
					else
						return 1;
				}
			}
		}				
			
	}
	else if(hol == IsAt_VLA)
	{
		if(PlayerToPoint(25, playerid,837.1998,-2059.3306,12.9859) || // Santa Maria
		PlayerToPoint(25, playerid, 2154.8672,-1736.3760,13.5573) || // Pizzahut
		PlayerToPoint(7.5, playerid, 2104.7690,-2541.8882,13.5659) && GetPlayerVirtualWorld(playerid) == 144) // LSPD - beleegyeztek
		return 1;
	}
	else if(hol == IsAt_McDonald)
	{
		if(PlayerToPoint(2, playerid, 375.730133, -67.441177, 1001.507812) && Int == 10)
			return 1;
	}
	else if(hol == IsAt_GrafitiTilt)
	{
		if(PlayerToPoint(30, playerid, -1565.9298,634.3604,7.0391) ||
		PlayerToPoint(30, playerid, -1715.0593,636.0367,24.7344) ||
		PlayerToPoint(30, playerid, -1713.8823,735.2250,24.7344) ||
		PlayerToPoint(30, playerid, -1560.4113,732.3200,7.0391))
			return 1;
        for(new a = 0; a < MAX_OBJECTSZ; a++)
        {
            if(OBJECT[a][sTipus] == 19177)
            {
                if(PlayerToPoint(30, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
                {
                    if(OBJECT[a][sVw] != NINCS)
                    {
                        if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
                            return 1;
                    }
                    else
                        return 1;
                }
            }
        }
	}
	else if(hol == IsAt_Bank)
	{
		//if(PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187) ||
		//PlayerToPoint(30, playerid, 1913.67269229, -2415.88067467, 13.9656142578)) régi
		if(PlayerToPoint(30, playerid, 2312.601562, -7.930725, 26.742187) ||
		PlayerToPoint(30, playerid, -1265.607, -98.560, 14.458))
			return 1;
	}
	else if(hol == IsAt_Pizzazo)
	{
		if(PlayerToPoint(3, playerid, 375.997497, -118.807800, 1001.499511) && Int == 5)
			return 1;
	}
	else if(hol == IsAt_Csirkes)
	{
		if(PlayerToPoint(2.5, playerid, 369.596130, -6.029798, 1001.858886) && Int == 9)
			return 1;
	}
	else if(hol == IsAt_Korhaz)
	{
		if(PlayerToPoint(100, playerid, 1934.6655,-2441.7776,13.5703) && GetPlayerVirtualWorld(playerid) == 104)
			return 1;
	}
	else if(hol == IsAt_Etterem)
	{
		if(PlayerToPoint(10, playerid, -786.0734,500.2314,1371.7422) && Int == 1 || PlayerToPoint(10, playerid, 2029.9584,-1833.9828,13.5532))
			return 1;
	}
	else if(hol == IsAt_LSPDBorton)
	{
		if(PlayerToPoint(10, playerid, 264.365966, 77.483154, 1001.039062) && Int == 6)
			return 1;
	}
	else if(hol == IsAt_Fort)
	{
		if(PlayerToPoint(50, playerid, 215.038833, 1862.826782, 13.140625))
			return 1;
	}
	else if(hol == IsAt_KereskedoHQ)
	{
		/*if(PlayerToPoint(90, playerid, -2053.8244015, -191.9231375, 37.820312) ||
		PlayerToPoint(15.0, playerid, 2127, -1139, 25) ||
		PlayerToPoint(15.0, playerid, 1375.1686,-1456.9171,13.5469)||
		PlayerToPoint(15.0, playerid, 1377.7013,-1465.5576,13.5469))*/ 
		
		if(PlayerToPoint(15.0, playerid, 1370.9365, -1472.0685, 13.5469) ||//LS
		PlayerToPoint(15.0, playerid, 1374.1360, -1456.1221, 13.5469) ||//LS
		PlayerToPoint(15.0, playerid, 1377.5206, -1439.9614, 13.5458) ||//LS
		PlayerToPoint(15.0, playerid, 1377.3882, -1424.8015, 13.5458) ||//LS
		PlayerToPoint(15.0, playerid, 2127, -1139, 25) || //LS Jefferson melletti HQ
		PlayerToPoint(65.0, playerid, -2047.8701, -187.7647, 35.3203))//SF Régi oktató HQ
		return 1;
	}
	/*else if(hol == IsAt_Hotel)
	{
		if(PlayerToPoint(3, playerid, -2425.4722,337.6092,37.0020))
			return 1;
	}*/
	else if(hol == IsAt_Buszmegallo)
	{
        for(new a = 0; a < MAX_OBJECTSZ; a++)
        {
            if(OBJECT[a][sTipus] == 19526)
            {
                if(PlayerToPoint(5, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
                {
                    if(OBJECT[a][sVw] != NINCS)
                    {
                        if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
                            return 1;
                    }
                    else
                        return 1;
                }
            }
        }
	}
	else if(hol == IsAt_Festo)
	{
		if(PlayerToPoint(5, playerid, 487.332397, -1741.302734, 11.131089) ||
			PlayerToPoint(5, playerid, 2066.086425, -1831.412353, 13.546875) ||
			PlayerToPoint(5, playerid, 1024.939453, -1024.406738, 31.798025) ||
			PlayerToPoint(5, playerid, 720.166687, -457.286499, 16.032396) ||
			PlayerToPoint(5, playerid, -2425.677734, 1022.328552, 50.080821) ||
			PlayerToPoint(5, playerid, -1904.543579, 282.904937, 40.743328))
		return 1;
	}
	else if(hol == IsAt_ATM)
	{
		
		for(new a = 0; a < MAX_ATM; a++)
		{
			if(PlayerToPoint(2, playerid, ATM[a][aPosX], ATM[a][aPosY], ATM[a][aPosZ]) && GetPlayerVirtualWorld(playerid) == ATM[a][aVw] && GetPlayerInterior(playerid) == ATM[a][aInt] && ATM[a][aObjectID] != NINCS )
			{
				return 1;
			}
		}	
		return 0;
	}
	else if(hol == IsAt_HotDog)
	{
		if(PlayerToPoint(1, playerid, 388.891296, -2070.652343, 7.835937) || // LS Kikötõ
			PlayerToPoint(1, playerid, 1000.174865, -1850.045043, 12.814621) || // LS Part
			PlayerToPoint(1, playerid, 1589.746948, -1288.330566, 17.511436) || // LS Csillagépület alatt
			PlayerToPoint(1, playerid, 1219.070678, -1324.420410, 13.481049) || // LS Kórház
			PlayerToPoint(1, playerid, 1491.664550, -1769.269042, 18.795755) || // LS Városháza
			PlayerToPoint(1, playerid, 1471.004882, -1044.569091, 23.828125) || // LS Bank
			PlayerToPoint(1, playerid, 1785.103637, -1184.715576, 23.876075) || // LS Gunshop
			PlayerToPoint(1, playerid, -2692.398437, 385.206237, 4.374998) || // SF Városháza
			PlayerToPoint(1, playerid, -2384.000000, -585.309448, 132.117187) || // SF Hegy
			PlayerToPoint(1, playerid, -2150.911376, -436.183837, 35.343013) || // SF Stadion 1
			PlayerToPoint(1, playerid, -2145.601318, -425.210449, 35.335937) || // SF Stadion 2
			PlayerToPoint(1, playerid, -2094.984863, -395.715881, 35.531250) || // SF Stadion 3
			PlayerToPoint(1, playerid, -2514.816406, -15.105303, 25.617187) || // SF Tetkós
			PlayerToPoint(1, playerid, -2285.479248, 148.160675, 35.312500) || // SF Park
			PlayerToPoint(1, playerid, -2198.201416, 612.508178, 35.164062) || // SF Yakuza 1
			PlayerToPoint(1, playerid, -2194.080566, 612.336303, 35.164062) || // SF Yakuza 2
			PlayerToPoint(1, playerid, -2193.901123, 606.258056, 35.164062) || // SF Yakuza 3
			PlayerToPoint(1, playerid, -2187.479003, 613.517028, 35.164062) || // SF Yakuza 4
			PlayerToPoint(1, playerid, -2181.962402, 612.755004, 35.164062) || // SF Yakuza 5
			PlayerToPoint(2, playerid, -1090.6948,-1195.2908,129.2188) || // Jim 1
			PlayerToPoint(2, playerid, 1380.00000000,-1496.50000000,13.60000038) || // autoker
			PlayerToPoint(2, playerid, 998.0557,-948.6887,42.0612) || // Északi benyakút
			PlayerToPoint(2, playerid, 1947.0992,-2156.4275,13.5443) || // /menu
			PlayerToPoint(2, playerid, 1949.3602,-1771.7235,13.5469) || 
			PlayerToPoint(2, playerid, 629.8110,-1122.0372,23.9063) || 
			PlayerToPoint(2, playerid, 1003.8104,-945.3782,42.1708) || 
			PlayerToPoint(2, playerid, 388.7458,-2072.7141,7.8359) || 
			PlayerToPoint(2, playerid, 1809.9497,-1120.2155,24.0781) || 
			PlayerToPoint(2, playerid, 2869.5613,-1931.6757,11.1084) || 
			PlayerToPoint(2, playerid, -1035.3276,-1223.0942,129.2188))
		return 1;
		for(new a = 0; a < MAX_OBJECTSZ; a++)
		{
			if(OBJECT[a][sTipus]==1340)
			{
				if(PlayerToPoint(2, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
				{
					if(OBJECT[a][sVw] != NINCS)
					{
						if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
							return 1;
					}
					else
						return 1;
				}
			}
		}			
	}
	if(hol == IsAt_Studio)
    {
        for(new a = 0; a < MAX_OBJECTSZ; a++)
        {
            if(OBJECT[a][sTipus] == 19611 || OBJECT[a][sTipus] == 19610 || OBJECT[a][sTipus] == 19612 || OBJECT[a][sTipus] == 19613)
            {
                if(PlayerToPoint(5, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
                {
                    if(OBJECT[a][sVw] != NINCS)
                    {
                        if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
                            return 1;
                    }
                    else
                        return 1;
                }
            }
        }
    }
	else if(hol == IsAt_Haz)
	{
		new haz = NINCS, belso, VW;
		VW = GetPlayerVirtualWorld(playerid);
		
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(HouseInfo[h][Van] != 1) continue;
			belso = HouseInfo[h][hBelso];
			if(PlayerToPoint(150, playerid, IntInfo[belso][iExitX], IntInfo[belso][iExitY], IntInfo[belso][iExitZ]) && VW == h)
			{
				haz = h;
				break;
			}
		}
		return haz;
	}
	else if(hol == IsAt_HazElott)
	{
		new haz = NINCS;
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(HouseInfo[h][Van] != 1) continue;
			if(PlayerToPoint(2, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
			{
				haz = h;
				break;
			}
		}
		return haz;
	}
	if(hol == IsAt_BankRobHely)
	{
		for(new r = 0; r < MAX_BANKROBHELY; r++)
		{
			if(ROBHELY[r][roLezarva] == 0)
			{
				if(PlayerToPoint(3, playerid, ROBHELY[r][roPosX], ROBHELY[r][roPosY], ROBHELY[r][roPosZ]))
				{
					if(ROBHELY[r][roVw] != NINCS)
					{
						if(ROBHELY[r][roInt] ==GetPlayerInterior(playerid) && ROBHELY[r][roVw]==GetPlayerVirtualWorld(playerid))
							return 1;
					}
					else
						return 1;
				}
			}
		}		
			
	}
	if(hol == IsAt_szallitHely)
	{
		for(new a = 0; a < MAX_OBJECTSZ; a++)
		{
			if(OBJECT[a][sTipus] == 19209)
			{
				if(PlayerToPoint(5, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
				{
					if(OBJECT[a][sVw] != NINCS)
					{
						if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
							return 1;
					}
					else
						return 1;
				}
			}
		}
	}
	if(hol == IsAt_bMunkaHely)
	{
		for(new a = 0; a < MAX_OBJECTSZ; a++)
		{
			if(OBJECT[a][sTipus] == 19204)
			{
				if(PlayerToPoint(5, playerid, OBJECT[a][sPosX], OBJECT[a][sPosY], OBJECT[a][sPosZ]))
				{
					if(OBJECT[a][sVw] != NINCS)
					{
						if(OBJECT[a][sInt] ==GetPlayerInterior(playerid) && OBJECT[a][sVw]==GetPlayerVirtualWorld(playerid))
							return 1;
					}
					else
						return 1;
				}
			}
		}
	}
	return 0;
}
stock Logged(playerid)
{
	if(gPlayerLogged[playerid] == 1)
		return 1;

	return 0;
}

stock BanKiiras( playerid, uIdo )
{
	SendClientMessage(playerid, COLOR_LIGHTRED, "Sajnálom, de te bannolva vagy.");
	
	if(uIdo > 0)
	{
		new ido;
		if(uIdo > 10000) 
			ido = floatround( ( float(uIdo) - float(UnixTime) ) / 3600.0, floatround_round);

		new meddig[128];
		if(ido > 0 && ido < 24) Format(meddig, "%d óráig", ido);
		else if(ido >= 24 && ido < (24*7))
		{
			if(ido % 24 == 0)
				Format(meddig, "%d napig", (ido / 24));
			else
				Format(meddig, "%d napig és %d óráig", floatround(ido/24, floatround_floor), (ido%24));
		}
		else if(ido >= (24*7))// && ido < (24*7*4))
		{
			if(ido % (24*7) == 0)
				Format(meddig, "%d hétig", (ido/24/7));
			else
			{
				if(ido % 24 == 0)
					Format(meddig, "%d hétig és %d napig", floatround(ido/24/7, floatround_floor), floatround((ido/24)%7, floatround_floor));
				else
					Format(meddig, "%d hétig, %d napig, és %d óráig", floatround(ido/24/7, floatround_floor), floatround((ido/24)%7, floatround_floor), (ido%24));
			}
		}
		
		if(ido)
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Idõ: %s", meddig);
	}

	TKick(playerid);
	return 1;
}

stock PreConfigure( playerid, fazis = 0 )
{
	if( !Connected[ playerid ] ) return 1;
	
	if( fazis == 0 )
	{
		format( _tmpString, 128, "SELECT Ido FROM %s WHERE cim='%s' OR cim='%s'", SQL_DB_Ban, Nev( playerid ), IP( playerid ) );
		doQuery( _tmpString, SQL_PLAYER_PRECONFIGURE, playerid, 1 );
	}
	else if( fazis == 1 ) // ban ellenõrzés
	{
		new rows, fields;
		sql_data(rows, fields);
		
		if(rows)
			BanKiiras( playerid, sql_get_int(0) );
		else
		{
			format( _tmpString, 128, "SELECT ID, Kliens FROM %s WHERE Nev='%s'", SQL_DB_Player, PlayerName( playerid ) );
			doQuery( _tmpString, SQL_PLAYER_PRECONFIGURE, playerid, 2 );
		}
	}
	else if( fazis == 2 ) // karakter regisztráció ellenõrzés
	{
		new rows, fields;
		sql_data(rows, fields);
		
		if( rows != 1 )
			SendClientMessage(playerid, COLOR_LIGHTRED, "ClassRPG: Nem vagy regisztrálva, kérlek regisztrálj az ucp.classrpg.net kezelõfelületen"), TKick(playerid);
		else
		{
			PlayerInfo[playerid][pID] = sql_get_int(0);
			PlayerInfo[playerid][pKliens] = sql_get_int(1);
			Registered(playerid) = 2;
			
			if(!ClassClient || KliensMode == KLIENS_MOD_VALTOZO && PlayerInfo[playerid][pKliens] == 0)
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "ClassRPG: Regisztrálva vagy. Használd a /login parancsot a belépéshez");
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "ClassRPG: Regisztrálva vagy. Amennyiben a kliens aktív, a rendszer automatikusan beléptet, légy türelemmel!");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "ClassRPG: Ha még nem töltötted le a ClassRPG klienst, a kliens.classrpg.net oldalról megteheted.");
			}
				
			format( _tmpString, 128, "SELECT ID FROM %s WHERE karakterek > 0 AND karakter1='%d' OR karakterek > 1 AND karakter2='%d'", SQL_DB_Account, SQLID(playerid), SQLID(playerid));
			doQuery( _tmpString, SQL_PLAYER_PRECONFIGURE, playerid, 3 );
		}
	}
	else if( fazis == 3 ) // karakter társítás ellenõrzés
	{
		new rows, fields;
		sql_data(rows, fields);
		
		if( rows == 0 )
			SendClientMessage(playerid, COLOR_LIGHTRED, "ClassRPG: A karaktered nincs társítva, kérlek társítsd az ucp.classrpg.net címen"), TKick(playerid);
		else
		{
			VanAccountja[playerid] = true;
			format( _tmpString, 128, "SELECT Pass FROM %s WHERE ID='%d'", SQL_DB_Player, SQLID(playerid) );
			doQuery( _tmpString, SQL_PLAYER_PRECONFIGURE, playerid, 4 );
		}
	}
	else if( fazis == 4 ) // jelszó lekérése
	{
		new rows;
		
		if( rows != 1 )
		{
			sql_get_str_len(0, PlayerInfo[playerid][pKey], 128);
			PreConfigured[ playerid ] = true;
			OnPreConfigurationComplete(playerid);
		}
		else
			SendClientMessage(playerid, COLOR_LIGHTRED, "ClassRPG: Hiba (#1) történt"), TKick(playerid);
	}
	
	return 1;
}

stock Locked(vehicleid)
{
	if(gCarLock[vehicleid] == 1)
		return 1;
	return 0;
}
stock AdminRangNev(playerid)
{
	new rangnev[64];
	
	switch(PlayerInfo[playerid][pAdmin])
	{
		case 6: rangnev = "FõadminSegéd";
		case 1337: rangnev = "Fõadmin";
		case 1338: rangnev = "SuperAdmin";
		case 1339: rangnev = "AdminControllerSegéd";
		case 1340: rangnev = "AdminController";
		case 1350: rangnev = "Szerver Felügyelõ";
		//case 5554: rangnev = "ScripterSegéd";
		case 5555: rangnev = "Scripter";
		default:
		{
			if(IsAS(playerid))
				rangnev = "AdminSegéd";
			else
				rangnev = "Admin";
		}
	}
	
	if(1 <= PlayerInfo[playerid][pAdmin] < 5555 && IsScripter(playerid))
		strcat(rangnev, " & Scripter", 64);

	//if(IsAllTerno(playerid))  rangnev = "Scripter";
	if(IsAllDenaro(playerid))  rangnev = "Szerver Felügyelõ";
	//if(PlayerInfo[playerid][pID] == 2326)  rangnev = "ScripterSegéd";
	if(IsJim(playerid) == 1) rangnev = "Tulajdonos";
	return rangnev;	
}
stock IsScripter(id)
{
	if(IsJim(id) || IdgScripter[id] || IsTerno(id)) return 1;
	if(PlayerInfo[id][pID] == 8183364) return 1; // Krisztofer
	if(PlayerInfo[id][pID] == 8186497) return 1; // Michael
	if(PlayerInfo[id][pID] == 8172424) return 1; // Pedro
	if(PlayerInfo[id][pID] == 163) return 1; // HendRoox
	
	return 0;
}


stock IsAmos(id)
{
	#pragma unused id
	//if(PlayerInfo[id][pID] == 2326) return 1; //Amos Vincenzo
	//if(PlayerInfo[id][pID] == 8176177) return 1; //Felice Therine
	return 0;
}
fpublic OnGameModeExit()
{
	for(new x = 0; x < sizeof(Timerek); x++)
	{
		if(Timerek[x] != -1)
			KillTimer(x);
	}
	
	print("Szerver leáll... MySQL kapcsolat bontása...");
	//mysql_close();
	print("MySQL kapcsolat bontva... Leállítás...");
	//SendRconCommand("unloadfs Objectek");
	
	#if defined PLUGIN_ENABLED_AUDIO
		Audio_DestroyTCPServer();
	#endif
	return 1;
}

stock GetParam(const string[], number)
{
	new kezdes=0, spacevolt=0, szavak=-1, eredmeny[MAX_PLAYER_NAME] = "-1";

	new utolsobetu = strlen(string) - 1;

	for(new x = 0; x < strlen(string); x++)
	{
		if(string[x] <= ' ' || x == utolsobetu)
		{
			if(!spacevolt)
			{
				szavak++;
				if(szavak == number)
				{
					if(x == utolsobetu && string[x] > ' ')
						strmid(eredmeny, string, kezdes, x+1);
					else
						strmid(eredmeny, string, kezdes, x);
				}
			}
			else if(x == utolsobetu)
			{
				if(string[x] > ' ')
				{
					szavak++;
					if(szavak == number)
					{
						strmid(eredmeny, string, x, x+1);
					}
				}
			}

			spacevolt = 1;
		}
		else
		{
			if(spacevolt == 1)
			{
				kezdes = x;
			}
			spacevolt = 0;
		}
	}
	return eredmeny;
}

stock Parameterek(string[])
{
	new volt, szam;
	for(new x = 0; x < strlen(string); x++)
	{
		if(string[x] <= ' ')
		{
			volt = 1;
		}
		else
		{
			if(volt == 1) szam++;
			volt = 0;
		}
	}

	return szam;
}

stock szabadCella()
{
	new szam = NINCS;
	for(new i = 0; i < MAXCELLA; i++)
	{
		if(!CellaInfo[i][cVan])
		{
			szam = i;
			break;
		}
	}
	
	return szam;
}

fpublic Jail(playerid, muvelet[], ido, tipus[], oka[])
{
	if(egyezik(muvelet, "+"))
	{
		if(PlayerInfo[playerid][pJailed] == 0)
			PlayerInfo[playerid][pJailTime] = ido;
		else
			PlayerInfo[playerid][pJailTime] += ido;

		//ResetWeapon(playerid);
		WeaponResetAll(playerid);

		// frakcio bortonok
		if(egyezik(tipus, "lspd")) // 264.542, 77.505, 1001.39 VW: 0 INT:6 - LSPD
		{
			PlayerInfo[playerid][pJailed] = 10;
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 0, "jail10");
			Freeze(playerid, 5000);
			SetPlayerPos(playerid, 264.542, 77.505, 1001.39);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "sheriff")) // 264.542, 77.505, 1001.39 VW: 30 INT:6 - Sheriff
		{
			PlayerInfo[playerid][pJailed] = 11;
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 30, "jail11");
			Freeze(playerid, 5000);
			SetPlayerPos(playerid, 264.542, 77.505, 1001.39);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "katonasag")) // 2264.542, 77.505, 1001.39 VW: 2 INT:6 - Katonaság
		{
			PlayerInfo[playerid][pJailed] = 12;
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 2, "jail12");
			Freeze(playerid, 5000);
			SetPlayerPos(playerid, 264.542, 77.505, 1001.39);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "fbi")) // 264.542, 77.505, 1001.39 VW: 3 INT:6 - FBI
		{
			PlayerInfo[playerid][pJailed] = 13;
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 3, "jail13");
			Freeze(playerid, 5000);
			SetPlayerPos(playerid, 264.542, 77.505, 1001.39);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		// frakcio bortonok
		else if(egyezik(tipus, "fegyenctelep"))
		{
			PlayerInfo[playerid][pJailed] = 14;
			Freeze(playerid, 5000);
			JailTime[playerid] = ido;
			
			cella[playerid] = szabadCella();
			
			if(cella[playerid] != NINCS)
				SetPlayerPos(playerid, fortCellak[cella[playerid]][0], fortCellak[cella[playerid]][1], fortCellak[cella[playerid]][2]);
			else
				SetPlayerPos(playerid, fortCellak[0][0], fortCellak[0][1], fortCellak[0][2]);
			
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 126, "jail14");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			if(ido > 0 && !egyezik(oka, "-")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "ajail"))
		{
			PlayerInfo[playerid][pJailed] = 3;
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 972.831, 2.768, 1001.148);
			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 8888, "jail6");
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			AJVarakozas[playerid] = 5;
		}
		else if(egyezik(tipus, "ajail2"))
		{
			PlayerInfo[playerid][pJailed] = 6;
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 414.628, -11.005, 1001.812);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 10000 + playerid, "jail7");
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			AJVarakozas[playerid] = 5;
		}
		else if(egyezik(tipus, "ajail3"))
		{
			PlayerInfo[playerid][pJailed] = 8;
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 414.628, -11.005, 1001.812);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 20000 + playerid, "jail8");
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			AJVarakozas[playerid] = 5;
		}
		else if(egyezik(tipus, "korhaz"))
		{
			SetPlayerVirtualWorld(playerid, 104, "jail8"); // 104 = Interior VWje
			SetPlayerInterior(playerid, 1);
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 1944.6885,-2458.5464,13.5703);
			
			Feketeseg(playerid, true);
			//SetPlayerInterior(playerid,1);
			SendClientMessage(playerid, COLOR_GREY, "Eszméletlen vagy. Amint felgyógyultál felébredsz!");
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			Freeze(playerid, ido);
			KorhazIdo[playerid] = ido;
		}
		else if(egyezik(tipus, "off"))
		{
			PlayerInfo[playerid][pJailed] = 3;
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "off2"))
		{
			PlayerInfo[playerid][pJailed] = 6;
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
	}
	else if(egyezik(muvelet, "-"))
	{
		if(PlayerInfo[playerid][pJailed] > 0)
		{
			if(ido <= PlayerInfo[playerid][pJailTime])
				PlayerInfo[playerid][pJailTime] -= ido;
			else
				PlayerInfo[playerid][pJailTime] = 0;
		}
	}
	else if(egyezik(muvelet, "set"))
	{
		PlayerInfo[playerid][pJailTime] = ido;
		PlayerInfo[playerid][pOvadek] = 0;
		Szukseglet(playerid, -100, -100);

		//ResetWeapon(playerid);
		WeaponResetAll(playerid);


		if(egyezik(tipus, "lspd")) // 264.542, 77.505, 1001.39 VW: 0 INT:6 - LSPD
		{
			PlayerInfo[playerid][pJailed] = 10;
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 0, "jail10");
			Freeze(playerid, 10000);
			SetPlayerPos(playerid, 264.542, 77.505, 1001.39);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "sheriff")) // 264.542, 77.505, 1001.39 VW: 30 INT:6 - Sheriff
		{
			PlayerInfo[playerid][pJailed] = 11;
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 30, "jail11");
			Freeze(playerid, 10000);
			SetPlayerPos(playerid, 264.542, 77.505, 1001.39);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "katonasag")) // 2264.542, 77.505, 1001.39 VW: 2 INT:6 - Katonaság
		{
			PlayerInfo[playerid][pJailed] = 12;
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 2, "jail12");
			Freeze(playerid, 10000);
			SetPlayerPos(playerid, 264.542, 77.505, 1001.39);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "fbi")) // 264.542, 77.505, 1001.39 VW: 3 INT:6 - FBI
		{
			PlayerInfo[playerid][pJailed] = 13;
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 3, "jail13");
			Freeze(playerid, 10000);
			SetPlayerPos(playerid, 264.542, 77.505, 1001.39);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "fegyenctelep"))
		{
			PlayerInfo[playerid][pJailed] = 14;
			Freeze(playerid, 5000);
			JailTime[playerid] = ido;
			
			cella[playerid] = szabadCella();
			
			if(cella[playerid] != NINCS)
				SetPlayerPos(playerid, fortCellak[cella[playerid]][0], fortCellak[cella[playerid]][1], fortCellak[cella[playerid]][2]);
			else
				SetPlayerPos(playerid, fortCellak[0][0], fortCellak[0][1], fortCellak[0][2]);
			
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 126, "jail14");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			if(ido > 0 && !egyezik(oka, "-")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "ajail"))
		{
			PlayerInfo[playerid][pJailed] = 3;
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 972.831, 2.768, 1001.148);
			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 8888, "jail11");
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			AJVarakozas[playerid] = 5;
		}
		else if(egyezik(tipus, "ajail2"))
		{
			PlayerInfo[playerid][pJailed] = 6;
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 414.628, -11.005, 1001.812);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 10000 + playerid, "jail12");
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			AJVarakozas[playerid] = 5;
		}
		else if(egyezik(tipus, "ajail3"))
		{
			PlayerInfo[playerid][pJailed] = 8;
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 414.628, -11.005, 1001.812);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 20000 + playerid, "jail8");
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			AJVarakozas[playerid] = 5;
		}
		else if(egyezik(tipus, "korhaz"))
		{
			SetPlayerVirtualWorld(playerid, 104, "jail13"); // 104 = Interior VWje
			SetPlayerInterior(playerid, 1);
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 1944.6885,-2458.5464,13.5703);
			
			Feketeseg(playerid, true);
			//SetPlayerInterior(playerid,1);
			SetPlayerWorldBounds(playerid,20000.0000,-20000.0000,20000.0000,-20000.0000);
			SendClientMessage(playerid, COLOR_GREY, "Eszméletlen vagy. Amint felgyógyultál felébredsz!");
			Freeze(playerid, ido);
			KorhazIdo[playerid] = ido;
		}
		else if(egyezik(tipus, "off"))
		{
			PlayerInfo[playerid][pJailed] = 3;
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "off2"))
		{
			PlayerInfo[playerid][pJailed] = 6;
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
	}

	return 1;
}

stock KocsiJavit(kocsi)
{
	RepairVehicle(kocsi); 
	Gas[kocsi] = MaxBenzin(kocsi);
	CarPart[kocsi][cMotorolaj] = 0.0;
	CarPart[kocsi][cAkkumulator] = 100.0;
	CarPart[kocsi][cKerekek] = 0.0;
	CarPart[kocsi][cMotor] = 0.0;
	CarPart[kocsi][cFek] = 0.0;
	CarPart[kocsi][cElektronika] = 0.0;
	if(IsAPancelozottKocsi(kocsi))
		SetVehicleHealth(kocsi, 100000);
	else
		SetVehicleHealth(kocsi, 1000);
}
stock UresATM()
{
	
	for(new a = 0; a < MAX_ATM; a++)
	{
		if(ATM[a][aPosX] == 0)
			return a;

	}
	return NINCS;
}
stock UresForgalom()
{
	for(new a = 0; a < MAX_AREA_HELY; a++)
	{
		//printf("%d",AreaForgalom[a][AVan]);
		if(!AreaForgalom[a][AVan])
			return a;

	}
	return NINCS;
}
stock UresObject()
{
	for(new a = 0; a < MAX_OBJECTSZ; a++)
	{
		if(OBJECT[a][sTipus] == 0)
			return a;

	}
	return NINCS;
}

stock KocsiRespawn(kocsi, bool:respawn = true)
{
	
	if(NPCKocsi[kocsi]) return 1;
	
	new vs = IsAVsKocsi(kocsi);

	Almaszedeskozbe[kocsi] = 0;
	new panelek, ajto, vilagitas, gumi, Float:kocsielet;
	GetVehicleHealth(kocsi, kocsielet);
	GetVehicleDamageStatus(kocsi, panelek, ajto, vilagitas, gumi);
	removePlayersFromVehicle(kocsi);
	if(kocsielet < 350.0)
		kocsielet = 350.0;
		
	new munkakocsi = IsMunkaKocsi(kocsi);
	if(munkakocsi > NINCS) KocsiJavit(kocsi);
	

	
	if(respawn)
		SetVehicleToRespawn(kocsi);
		
	if(CarType[kocsi] == CAR_TYPE_FK)
	{
		ChangeVehicleColor(kocsi, KocsiSzinek[kocsi][0], KocsiSzinek[kocsi][1]);
		SetVehicleHealth(kocsi, kocsielet);
		UpdateVehicleDamageStatus(kocsi, panelek, ajto, vilagitas, gumi);
	}	
		
	if(JarmuValtozasok[kocsi][0]) SetVehicleInterior(kocsi, 0);
	if(JarmuValtozasok[kocsi][1]) SetVehicleVW(kocsi, 0);
	
	if(GetVehicleModel(kocsi) == 428)
	{
		//BankSzef +=PenzszallitoPenz[kocsi];
		PenzszallitoPenz[kocsi] = 0;
	}
	
	if(CarType[kocsi] == CAR_TYPE_MK)
	{
		new idk = NINCS;
		new munka;
		for(new k = 0; k < MAX_MUNKAKOCSI; k++)
		{
			for(new kk = 0; kk  <MAX_MUNKA; kk++)
			{
				if(!MunkaKocsi[kk][k][kVan]) continue;
				
				if(MunkaKocsi[kk][k][kVan] && MunkaKocsi[kk][k][kID] == kocsi)
				{
					munka=kk;
					idk = k;
					break;
				}
			}
		}
		SetVehicleInterior(kocsi, MunkaKocsi[munka][idk][kInt] );
		SetVehicleVW(kocsi, MunkaKocsi[munka][idk][kVW] );
		SetVehicleHealth(kocsi, 1000.0);
		//KocsiAllapot[kocsi]=0.0;
		
		
	}
	
	if(CarType[kocsi] == CAR_TYPE_FK)
	{
		new idk = NINCS;
		new frakcio;
		for(new k = 0; k < MAX_FRAKCIOKOCSI; k++)
		{
			for(new kk = 0; kk  <MAX_FRAKCIO; kk++)
			{
				if(!FrakcioKocsi[kk][k][fVan]) continue;
				
				if(FrakcioKocsi[kk][k][fVan] && FrakcioKocsi[kk][k][fID] == kocsi)
				{
					frakcio=kk;
					idk = k;
					break;
				}
			}
		}
		SetVehicleInterior(kocsi, FrakcioKocsi[frakcio][idk][fInt] );
		SetVehicleVW(kocsi, FrakcioKocsi[frakcio][idk][fVW] );
	}
	Locker(kocsi);
	
	FrakcioJarmuTuning(kocsi);
	
	JarmuTuning(kocsi);
	new szeflog[128];
	if(vs != NINCS)
	{
	    SetVehicleHealth(kocsi, kocsielet);
		SetVehicleInterior(CarInfo[vs][cId], CarInfo[vs][cInt]);
		SetVehicleVW(CarInfo[vs][cId], CarInfo[vs][cVW]);
		UpdateVehicleDamageStatus(kocsi, panelek, ajto, vilagitas, gumi);
	}

	if(IsAPancelozottKocsi(kocsi)) SetVehicleHealth(kocsi, 100000);
	if(IsKocsi(kocsi, "Prod") || IsKocsi(kocsi, "uttisztito") || IsKocsi(kocsi, "Kamion") || IsKocsi(kocsi, "Farmer")  || IsKocsi(kocsi, "Funyiro") || IsKocsi(kocsi,"Kukas") || IsKocsi(kocsi, "Szerelo") || IsKocsi(kocsi, "Favago") || IsKocsi(kocsi, "Hulla") || IsKocsi(kocsi, "Taxi"))
	{
		
		SetVehicleHealth(kocsi, 1000.0);
		RepairVehicle(kocsi);
		
		if(CarPart[kocsi][cAkkumulator] <= 20)
		{
			if(FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >= 90000000)
			{
				CarPart[kocsi][cAkkumulator] = 100.0;
				FrakcioSzef(FRAKCIO_ONKORMANYZAT,-10000, 12);
				format(szeflog,sizeof(szeflog), "[%d. frakció]MunkaKocsi javítás akkumulátor: -10.000 Ft",FRAKCIO_ONKORMANYZAT);
				Log("Szef",szeflog);
				BizPenz(BIZ_AUTOSBOLT, 10000);
			}
		}
		if(CarPart[kocsi][cKerekek] >= 20)	
		{	
			if(FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >= 90000000)
			{
				FrakcioSzef(FRAKCIO_ONKORMANYZAT,-10000, 13);
				format(szeflog,sizeof(szeflog), "[%d. frakció]MunkaKocsi javítás kerekek: -10.000 Ft",FRAKCIO_ONKORMANYZAT);
				Log("Szef",szeflog);
				BizPenz(BIZ_AUTOSBOLT, 10000);
				CarPart[kocsi][cKerekek] = 0;
			}
		}
		if(Gas[kocsi] < MaxBenzin(kocsi))
		{
			new uzemanyagkell = MaxBenzin(kocsi) - Gas[kocsi];
			new Float:kocsiPos[3], Float:legkozelebb = 100000.0, Float:tav;
			GetVehiclePos(kocsi, kocsiPos[0], kocsiPos[1], kocsiPos[2]);
			new ara;
			new kozel;
			for(new b = 0; b < MAX_BENZINKUT; b++)
			{
				if(BenzinKutak[b][bMelyikvan] == 0)
				{
					if(BenzinKutak[kozel][bTav] != 0)
					{	
						tav = GetDistanceBetweenPoints(kocsiPos[0], kocsiPos[1], kocsiPos[2], BenzinKutak[b][bPosX], BenzinKutak[b][bPosY], BenzinKutak[b][bPosZ]);
						if(tav < legkozelebb)
						{
							legkozelebb = tav;
							kozel = b;
						}
					}	
				}
			}
			if(legkozelebb != 100000.0)
			{
				if(IsABenzines(kocsi))
				{
					if(BenzinKutak[kozel][bBenzin] > uzemanyagkell)
					{
						BenzinKutak[kozel][bBenzin] -= uzemanyagkell;
						ara = uzemanyagkell*BenzinKutak[kozel][bBenzinAra];
						Gas[kocsi] = MaxBenzin(kocsi);	
					}
				}
				if(IsADieseles(kocsi))
				{
					if(BenzinKutak[kozel][bDiesel] > uzemanyagkell)
					{
						BenzinKutak[kozel][bDiesel] -= uzemanyagkell;
						ara = uzemanyagkell*BenzinKutak[kozel][bDieselAra];
						Gas[kocsi] = MaxBenzin(kocsi);
					}
				}
			}
			else
			{
				ara = uzemanyagkell*300;
				Gas[kocsi] = MaxBenzin(kocsi);
			}
			if(FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >= 90000000)
			{
				FrakcioSzef(FRAKCIO_ONKORMANYZAT,-ara, 13);
				format(szeflog,sizeof(szeflog), "[%d. frakció]MunkaKocsi tankolás: %s Ft",FRAKCIO_ONKORMANYZAT,FormatInt(ara));
				Log("Szef",szeflog);
				BenzinKutak[kozel][bSzef] += ara;
			}
		}
		if(CarPart[kocsi][cMotorolaj] >= 70.0)	
		{	
			if(FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >= 90000000)
			{
				CarPart[kocsi][cMotorolaj] = 0.0;
				FrakcioSzef(FRAKCIO_ONKORMANYZAT,-10000, 14);
				format(szeflog,sizeof(szeflog), "[%d. frakció]MunkaKocsi MotorOlaj: -10.000 Ft",FRAKCIO_ONKORMANYZAT);
				Log("Szef",szeflog);
				BizPenz(BIZ_AUTOSBOLT, 10000);
			}
		}
		/*if(KocsiHibas[kocsi] > 0)
		{
			KocsiHibas[kocsi] = 0;
			FrakcioSzef(FRAKCIO_ONKORMANYZAT,-10000, 15);
			BizPenz(BIZ_AUTOSBOLT, 10000);
		}*/
	}

	return 1;
}

fpublic JarmuTuning(kocsi)
{
	new vs = IsAVsKocsi(kocsi);
	if(vs != NINCS)
	{
		new kerek = CarInfo[vs][cKerek];
		if(CarInfo[vs][cPainted] == 1)
		{
			SetVehicleColor(kocsi, CarInfo[vs][cColorOne], CarInfo[vs][cColorTwo]);
		}
		ChangeVehiclePaintjob(kocsi, CarInfo[vs][cMatrica]);
		//printf("[PAINTJOB]: ID: %d | MATRICA: %d", kocsi, CarInfo[vs][cMatrica]);
		
		for(new x = 1000; x < 1194; x++)
			RemoveVehicleComponent(kocsi, x);
		
		if(CarInfo[vs][cKerek] > 0)
		{
			AddVehicleComponent(kocsi, kerek);
		}
		if(CarInfo[vs][cHidraulika] == 1)
		{
			AddVehicleComponent(kocsi, 1087);
		}
		if(CarInfo[vs][cTuning] == 1)
		{
			if(CarInfo[vs][cModel] == 560)
			{
				AddVehicleComponent(kocsi, 1026);
				AddVehicleComponent(kocsi, 1027);
				AddVehicleComponent(kocsi, 1032);
				AddVehicleComponent(kocsi, 1169);
				AddVehicleComponent(kocsi, 1138);
				AddVehicleComponent(kocsi, 1141);
				AddVehicleComponent(kocsi, 1028);
			}
			if(CarInfo[vs][cModel] == 562)
			{
				AddVehicleComponent(kocsi, 1034);
				AddVehicleComponent(kocsi, 1038);
				AddVehicleComponent(kocsi,1036);
				AddVehicleComponent(kocsi, 1040);
				AddVehicleComponent(kocsi, 1147);
				AddVehicleComponent(kocsi, 1149);
				AddVehicleComponent(kocsi, 1171);
			}
			if(CarInfo[vs][cModel] == 559)
			{
				AddVehicleComponent(kocsi, 1065);
				AddVehicleComponent(kocsi, 1067);
				AddVehicleComponent(kocsi, 1069);
				AddVehicleComponent(kocsi, 1071);
				AddVehicleComponent(kocsi, 1159);
				AddVehicleComponent(kocsi, 1160);
				AddVehicleComponent(kocsi, 1162);
			}
			if(CarInfo[vs][cModel] == 560)
			{
				AddVehicleComponent(kocsi, 1026);
				AddVehicleComponent(kocsi, 1027);
				AddVehicleComponent(kocsi, 1032);
				AddVehicleComponent(kocsi, 1169);
				AddVehicleComponent(kocsi, 1138);
				AddVehicleComponent(kocsi, 1141);
				AddVehicleComponent(kocsi, 1028);
			}
			if(CarInfo[vs][cModel] == 558)
			{
				AddVehicleComponent(kocsi, 1088);
				AddVehicleComponent(kocsi, 1090);
				AddVehicleComponent(kocsi, 1092);
				AddVehicleComponent(kocsi, 1094);
				AddVehicleComponent(kocsi, 1164);
				AddVehicleComponent(kocsi, 1166);
				AddVehicleComponent(kocsi, 1168);
			}
			if(CarInfo[vs][cModel] == 561)
			{
				AddVehicleComponent(kocsi, 1055);
				AddVehicleComponent(kocsi, 1056);
				AddVehicleComponent(kocsi, 1058);
				AddVehicleComponent(kocsi, 1062);
				AddVehicleComponent(kocsi, 1064);
				AddVehicleComponent(kocsi, 1154);
				AddVehicleComponent(kocsi, 1155);
			}
			if(CarInfo[vs][cModel] == 565)
			{
				AddVehicleComponent(kocsi, 1046);
				AddVehicleComponent(kocsi, 1047);
				AddVehicleComponent(kocsi, 1049);
				AddVehicleComponent(kocsi, 1051);
				AddVehicleComponent(kocsi, 1054);
				AddVehicleComponent(kocsi, 1150);
				AddVehicleComponent(kocsi, 1153);
			}
		}
		if(CarInfo[vs][cTuning] == 2)
		{
			if(CarInfo[vs][cModel] == 560)
			{
				AddVehicleComponent(kocsi, 1029);
				AddVehicleComponent(kocsi, 1030);
				AddVehicleComponent(kocsi, 1031);
				AddVehicleComponent(kocsi, 1133);
				AddVehicleComponent(kocsi, 1139);
				AddVehicleComponent(kocsi, 1140);
				AddVehicleComponent(kocsi, 1170);
			}
			if(CarInfo[vs][cModel] == 562)
			{
				AddVehicleComponent(kocsi, 1035);
				AddVehicleComponent(kocsi, 1037);
				AddVehicleComponent(kocsi, 1039);
				AddVehicleComponent(kocsi, 1041);
				AddVehicleComponent(kocsi, 1146);
				AddVehicleComponent(kocsi, 1148);
				AddVehicleComponent(kocsi, 1172);
			}
			if(CarInfo[vs][cModel] == 559)
			{
				AddVehicleComponent(kocsi, 1066);
				AddVehicleComponent(kocsi, 1068);
				AddVehicleComponent(kocsi, 1070);
				AddVehicleComponent(kocsi, 1072);
				AddVehicleComponent(kocsi, 1158);
				AddVehicleComponent(kocsi, 1161);
				AddVehicleComponent(kocsi, 1173);
			}
			if(CarInfo[vs][cModel] == 558)
			{
				AddVehicleComponent(kocsi, 1089);
				AddVehicleComponent(kocsi, 1091);
				AddVehicleComponent(kocsi, 1093);
				AddVehicleComponent(kocsi, 1095);
				AddVehicleComponent(kocsi, 1163);
				AddVehicleComponent(kocsi, 1165);
				AddVehicleComponent(kocsi, 1167);
			}
			if(CarInfo[vs][cModel] == 561)
			{
				AddVehicleComponent(kocsi, 1057);
				AddVehicleComponent(kocsi, 1059);
				AddVehicleComponent(kocsi, 1050);
				AddVehicleComponent(kocsi, 1061);
				AddVehicleComponent(kocsi, 1063);
				AddVehicleComponent(kocsi, 1156);
				AddVehicleComponent(kocsi, 1157);
			}
			if(CarInfo[vs][cModel] == 565)
			{
				AddVehicleComponent(kocsi, 1045);
				AddVehicleComponent(kocsi, 1048);
				AddVehicleComponent(kocsi, 1050);
				AddVehicleComponent(kocsi, 1052);
				AddVehicleComponent(kocsi, 1053);
				AddVehicleComponent(kocsi, 1151);
				AddVehicleComponent(kocsi, 1152);
			}
		}
		for(new x = 0; x < MAXTUNING; x++)
		{
			if(CarInfo[vs][cTuningok][x] == 0) continue;
			AddVehicleComponent(kocsi, CarInfo[vs][cTuningok][x]);
		}
	}
	return true;
}


stock FrakcioJarmuTuning(kocsi, frakcio = NINCS, id = NINCS)
{
	if(frakcio == NINCS || id == NINCS)
		for(new k = 0; k < MAX_FRAKCIOKOCSI; k++)
		{
			for(new f = 0; f < MAX_FRAKCIO; f++)
			{
				if(!FrakcioKocsi[f][k][fVan]) continue;

				if(FrakcioKocsi[f][k][fVan] && FrakcioKocsi[f][k][fID] == kocsi)
				{
					frakcio = f;
					id = k;
					break;
				}
			}
		}
	
	if(id != NINCS)
	{
		new kerek = FrakcioKocsi[frakcio][id][fKerek];
		if(FrakcioKocsi[frakcio][id][fMatrica] == 1)
		{
			SetVehicleColor(kocsi, FrakcioKocsi[frakcio][id][fSzin][0], FrakcioKocsi[frakcio][id][fSzin][1]);
		}
		ChangeVehiclePaintjob(kocsi, FrakcioKocsi[frakcio][id][fMatrica]);
			
		if(FrakcioKocsi[frakcio][id][fKerek] > 0)
		{
			AddVehicleComponent(kocsi, kerek);
		}
		if(FrakcioKocsi[frakcio][id][fHidraulika] == 1)
		{
			AddVehicleComponent(kocsi, 1087);
		}
		if(FrakcioKocsi[frakcio][id][fKasztni] == 1)
		{
			if(FrakcioKocsi[frakcio][id][fModel] == 560)
			{
				AddVehicleComponent(kocsi, 1026);
				AddVehicleComponent(kocsi, 1027);
				AddVehicleComponent(kocsi, 1032);
				AddVehicleComponent(kocsi, 1169);
				AddVehicleComponent(kocsi, 1138);
				AddVehicleComponent(kocsi, 1141);
				AddVehicleComponent(kocsi, 1028);
			}
			if(FrakcioKocsi[frakcio][id][fModel] == 562)
			{
				AddVehicleComponent(kocsi, 1034);
				AddVehicleComponent(kocsi, 1038);
				AddVehicleComponent(kocsi,1036);
				AddVehicleComponent(kocsi, 1040);
				AddVehicleComponent(kocsi, 1147);
				AddVehicleComponent(kocsi, 1149);
				AddVehicleComponent(kocsi, 1171);
			}
			if(FrakcioKocsi[frakcio][id][fModel] == 559)
			{
				AddVehicleComponent(kocsi, 1065);
				AddVehicleComponent(kocsi, 1067);
				AddVehicleComponent(kocsi, 1069);
				AddVehicleComponent(kocsi, 1071);
				AddVehicleComponent(kocsi, 1159);
				AddVehicleComponent(kocsi, 1160);
				AddVehicleComponent(kocsi, 1162);
			}
			if(FrakcioKocsi[frakcio][id][fModel] == 560)
			{
				AddVehicleComponent(kocsi, 1026);
				AddVehicleComponent(kocsi, 1027);
				AddVehicleComponent(kocsi, 1032);
				AddVehicleComponent(kocsi, 1169);
				AddVehicleComponent(kocsi, 1138);
				AddVehicleComponent(kocsi, 1141);
				AddVehicleComponent(kocsi, 1028);
			}
			if(FrakcioKocsi[frakcio][id][fModel] == 558)
			{
				AddVehicleComponent(kocsi, 1088);
				AddVehicleComponent(kocsi, 1090);
				AddVehicleComponent(kocsi, 1092);
				AddVehicleComponent(kocsi, 1094);
				AddVehicleComponent(kocsi, 1164);
				AddVehicleComponent(kocsi, 1166);
				AddVehicleComponent(kocsi, 1168);
			}
			if(FrakcioKocsi[frakcio][id][fModel] == 561)
			{
				AddVehicleComponent(kocsi, 1055);
				AddVehicleComponent(kocsi, 1056);
				AddVehicleComponent(kocsi, 1058);
				AddVehicleComponent(kocsi, 1062);
				AddVehicleComponent(kocsi, 1064);
				AddVehicleComponent(kocsi, 1154);
				AddVehicleComponent(kocsi, 1155);
			}
			if(FrakcioKocsi[frakcio][id][fModel] == 565)
			{
				AddVehicleComponent(kocsi, 1046);
				AddVehicleComponent(kocsi, 1047);
				AddVehicleComponent(kocsi, 1049);
				AddVehicleComponent(kocsi, 1051);
				AddVehicleComponent(kocsi, 1054);
				AddVehicleComponent(kocsi, 1150);
				AddVehicleComponent(kocsi, 1153);
			}
		}
		if(FrakcioKocsi[frakcio][id][fKasztni] == 2)
		{
			if(FrakcioKocsi[frakcio][id][fModel] == 560)
			{
				AddVehicleComponent(kocsi, 1029);
				AddVehicleComponent(kocsi, 1030);
				AddVehicleComponent(kocsi, 1031);
				AddVehicleComponent(kocsi, 1133);
				AddVehicleComponent(kocsi, 1139);
				AddVehicleComponent(kocsi, 1140);
				AddVehicleComponent(kocsi, 1170);
			}
			if(FrakcioKocsi[frakcio][id][fModel] == 562)
			{
				AddVehicleComponent(kocsi, 1035);
				AddVehicleComponent(kocsi, 1037);
				AddVehicleComponent(kocsi, 1039);
				AddVehicleComponent(kocsi, 1041);
				AddVehicleComponent(kocsi, 1146);
				AddVehicleComponent(kocsi, 1148);
				AddVehicleComponent(kocsi, 1172);
			}
			if(FrakcioKocsi[frakcio][id][fModel] == 559)
			{
				AddVehicleComponent(kocsi, 1066);
				AddVehicleComponent(kocsi, 1068);
				AddVehicleComponent(kocsi, 1070);
				AddVehicleComponent(kocsi, 1072);
				AddVehicleComponent(kocsi, 1158);
				AddVehicleComponent(kocsi, 1161);
				AddVehicleComponent(kocsi, 1173);
			}
			if(FrakcioKocsi[frakcio][id][fModel] == 558)
			{
				AddVehicleComponent(kocsi, 1089);
				AddVehicleComponent(kocsi, 1091);
				AddVehicleComponent(kocsi, 1093);
				AddVehicleComponent(kocsi, 1095);
				AddVehicleComponent(kocsi, 1163);
				AddVehicleComponent(kocsi, 1165);
				AddVehicleComponent(kocsi, 1167);
			}
			if(FrakcioKocsi[frakcio][id][fModel] == 561)
			{
				AddVehicleComponent(kocsi, 1057);
				AddVehicleComponent(kocsi, 1059);
				AddVehicleComponent(kocsi, 1050);
				AddVehicleComponent(kocsi, 1061);
				AddVehicleComponent(kocsi, 1063);
				AddVehicleComponent(kocsi, 1156);
				AddVehicleComponent(kocsi, 1157);
			}
			if(FrakcioKocsi[frakcio][id][fModel] == 565)
			{
				AddVehicleComponent(kocsi, 1045);
				AddVehicleComponent(kocsi, 1048);
				AddVehicleComponent(kocsi, 1050);
				AddVehicleComponent(kocsi, 1052);
				AddVehicleComponent(kocsi, 1053);
				AddVehicleComponent(kocsi, 1151);
				AddVehicleComponent(kocsi, 1152);
			}
		}
	}
	return true;
}

fpublic VsTuningok()
{
	for(new x = 1; x < MAX_VEHICLES; x++)
	{
		new vs = IsAVsKocsi(x);
		if(vs != NINCS)
		{
			new kerek = CarInfo[vs][cKerek];
			if(kerek > 0)
			{
				AddVehicleComponent(x, kerek);
			}
			if(CarInfo[vs][cTuning] == 1)
			{
				if(CarInfo[vs][cModel] == 560)
				{
					AddVehicleComponent(x, 1026);
					AddVehicleComponent(x, 1027);
					AddVehicleComponent(x, 1032);
					AddVehicleComponent(x, 1169);
					AddVehicleComponent(x, 1138);
					AddVehicleComponent(x, 1141);
					AddVehicleComponent(x, 1028);
				}
				if(CarInfo[vs][cModel] == 562)
				{
					AddVehicleComponent(x, 1034);
					AddVehicleComponent(x, 1038);
					AddVehicleComponent(x, 1036);
					AddVehicleComponent(x, 1040);
					AddVehicleComponent(x, 1147);
					AddVehicleComponent(x, 1149);
					AddVehicleComponent(x, 1171);
				}
				if(CarInfo[vs][cModel] == 559)
				{
					AddVehicleComponent(x, 1065);
					AddVehicleComponent(x, 1067);
					AddVehicleComponent(x, 1069);
					AddVehicleComponent(x, 1071);
					AddVehicleComponent(x, 1159);
					AddVehicleComponent(x, 1160);
					AddVehicleComponent(x, 1162);
				}
				if(CarInfo[vs][cModel] == 558)
				{
					AddVehicleComponent(x, 1088);
					AddVehicleComponent(x, 1090);
					AddVehicleComponent(x, 1092);
					AddVehicleComponent(x, 1094);
					AddVehicleComponent(x, 1164);
					AddVehicleComponent(x, 1166);
					AddVehicleComponent(x, 1168);
				}
				if(CarInfo[vs][cModel] == 561)
				{
					AddVehicleComponent(x, 1055);
					AddVehicleComponent(x, 1056);
					AddVehicleComponent(x, 1058);
					AddVehicleComponent(x, 1062);
					AddVehicleComponent(x, 1064);
					AddVehicleComponent(x, 1154);
					AddVehicleComponent(x, 1155);
				}
				if(CarInfo[vs][cModel] == 565)
				{
					AddVehicleComponent(x, 1046);
					AddVehicleComponent(x, 1047);
					AddVehicleComponent(x, 1049);
					AddVehicleComponent(x, 1051);
					AddVehicleComponent(x, 1054);
					AddVehicleComponent(x, 1150);
					AddVehicleComponent(x, 1153);
				}
			}
			if(CarInfo[vs][cTuning] == 2)
			{
				if(CarInfo[vs][cModel] == 560)
				{
					AddVehicleComponent(x, 1029);
					AddVehicleComponent(x, 1030);
					AddVehicleComponent(x, 1031);
					AddVehicleComponent(x, 1133);
					AddVehicleComponent(x, 1139);
					AddVehicleComponent(x, 1140);
					AddVehicleComponent(x, 1170);
				}
				if(CarInfo[vs][cModel] == 562)
				{
					AddVehicleComponent(x, 1035);
					AddVehicleComponent(x, 1037);
					AddVehicleComponent(x, 1039);
					AddVehicleComponent(x, 1041);
					AddVehicleComponent(x, 1146);
					AddVehicleComponent(x, 1148);
					AddVehicleComponent(x, 1172);
				}
				if(CarInfo[vs][cModel] == 559)
				{
					AddVehicleComponent(x, 1066);
					AddVehicleComponent(x, 1068);
					AddVehicleComponent(x, 1070);
					AddVehicleComponent(x, 1072);
					AddVehicleComponent(x, 1158);
					AddVehicleComponent(x, 1161);
					AddVehicleComponent(x, 1173);
				}
				if(CarInfo[vs][cModel] == 558)
				{
					AddVehicleComponent(x, 1089);
					AddVehicleComponent(x, 1091);
					AddVehicleComponent(x, 1093);
					AddVehicleComponent(x, 1095);
					AddVehicleComponent(x, 1163);
					AddVehicleComponent(x, 1165);
					AddVehicleComponent(x, 1167);
				}
				if(CarInfo[vs][cModel] == 561)
				{
					AddVehicleComponent(x, 1057);
					AddVehicleComponent(x, 1059);
					AddVehicleComponent(x, 1050);
					AddVehicleComponent(x, 1061);
					AddVehicleComponent(x, 1063);
					AddVehicleComponent(x, 1156);
					AddVehicleComponent(x, 1157);
				}
				if(CarInfo[vs][cModel] == 565)
				{
					AddVehicleComponent(x, 1045);
					AddVehicleComponent(x, 1048);
					AddVehicleComponent(x, 1050);
					AddVehicleComponent(x, 1052);
					AddVehicleComponent(x, 1053);
					AddVehicleComponent(x, 1151);
					AddVehicleComponent(x, 1152);
				}
			}
		}
	}
	return 1;
}

stock EvHonapNap()
{
	new ev, honap, nap, ido[32];
	getdate(ev, honap, nap);
	
	format(ido, 32, "%d", ev);
	
	if(honap < 10) format(ido, 32, "%s-0%d", ido, honap);
	else format(ido, 32, "%s-%d", ido, honap);

	if(nap < 10) format(ido, 32, "%s-0%d", ido, nap);
	else format(ido, 32, "%s-%d", ido, nap);
	
	return ido;
}

stock OraPercMP()
{
	new ora, perc, mp, ido[32];
	gettime(ora, perc, mp);
	
	if(ora < 10) format(ido, 32, "0%d", ora);
	else format(ido, 32, "%d", ora);
	
	if(perc < 10) format(ido, 32, "%s:0%d", ido, perc);
	else format(ido, 32, "%s:%d", ido, perc);

	if(mp < 10) format(ido, 32, "%s:0%d", ido, mp);
	else format(ido, 32, "%s:%d", ido, mp);
	
	return ido;
}

stock Time(mikell[])
{
	new masodperc, perc, ora, nap, honap, ev;
	new string[32];
	if(egyezik(mikell, "mp"))
	{
		gettime(ora, perc, masodperc);
		if(masodperc < 10)
			format(string, sizeof(string), "0%d", masodperc);
		else
			format(string, sizeof(string), "%d", masodperc);
	}

	else if(egyezik(mikell, "perc"))
	{
		gettime(ora, perc, masodperc);
		if(perc < 10)
			format(string, sizeof(string), "0%d", perc);
		else
			format(string, sizeof(string), "%d", perc);
	}

	else if(egyezik(mikell, "ora"))
	{
		gettime(ora, perc, masodperc);
		if(ora < 10)
			format(string, sizeof(string), "0%d", ora);
		else
			format(string, sizeof(string), "%d", ora);
	}

	else if(egyezik(mikell, "nap"))
	{
		getdate(ev, honap, nap);
		if(nap < 10)
			format(string, sizeof(string), "0%d", nap);
		else
			format(string, sizeof(string), "%d", nap);
	}

	else if(egyezik(mikell, "honap"))
	{
		getdate(ev, honap, nap);
		if(honap < 10)
			format(string, sizeof(string), "0%d", honap);
		else
			format(string, sizeof(string), "%d", honap);
	}

	else if(egyezik(mikell, "ev"))
	{
		getdate(ev, honap, nap);
		format(string, sizeof(string), "%d", ev);
	}

	return string;
}

stock IsPlayerName(playerid, nev[])
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	if(!strcmp(nev, name, false)) return 1;
	return 0;
}

stock HitmanName(playerid)
{
	new nev[MAX_PLAYER_NAME];
	
	if((PlayerInfo[playerid][pHitman] != 1 && PlayerInfo[playerid][pHitman] != 2) || PlayerInfo[playerid][pHitmanNev] == 0)
		strmid(nev, PlayerInfo[playerid][pNev], 0, strlen(PlayerInfo[playerid][pNev]), 25);
	else
		strmid(nev, PlayerInfo[playerid][pHitmanNev], 0, strlen(PlayerInfo[playerid][pHitmanNev]), 25);
		
	return nev;
}

stock ICPlayerName(playerid)
{
	new nev[MAX_PLAYER_NAME];
	strmid(nev, PlayerInfo[playerid][pNev], 0, strlen(PlayerInfo[playerid][pNev]), 25);
	strrep(nev, '_', ' ');
	return nev;
}

stock ICPlayerNameEx(playerid)
{
	new nev[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nev, sizeof(nev));
	strrep(nev, '_', ' ');
	return nev;
}

stock ICPlayerNameString(str[])
{
	new nev[MAX_PLAYER_NAME];
	strmid(nev, str, 0, strlen(str), 25);
	strrep(nev, '_', ' ');
	return nev;
}

stock PlayerName(playerid)
{
	new nev[MAX_PLAYER_NAME];
	strmid(nev, PlayerInfo[playerid][pNev], 0, strlen(PlayerInfo[playerid][pNev]), 25);
	return nev;
}

stock PlayerNameEx(playerid)
{
	new nev[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nev, sizeof(nev));
	return nev;
}

stock PlayerIP(playerid)
{
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

fpublic Restart()
{
	SendRconCommand("gmx");
	return 1;
}

fpublic Stop()
{
	SendRconCommand("exit");
	return 1;
}


fpublic PenzCheck(playerid, uj, regi, penzmozgas, minusz)
{
	if(!IsPlayerConnected(playerid)) return 1;

	if(minusz == 1)
	{
		if((regi - penzmozgas) != uj)
		{
			new nev[MAX_PLAYER_NAME], uzi[128];
			GetPlayerName(playerid, nev, sizeof(nev));
			ABroadCast(COLOR_LIGHTRED, "============== ADMIN FIGYELMEZTETÉS! ==============", 1);
			format(uzi, sizeof(uzi), "%s kivett a számlájára %dFtot, de nem változott a pénzze!", nev, penzmozgas);
			ABroadCast(COLOR_LIGHTRED, uzi, 1);
			format(uzi, sizeof(uzi), "%dFtot vett ki, régi pénzze: %dFt, új pénzze %dFt | Ennyinek kellene lenni: %d", penzmozgas, regi, uj);
			ABroadCast(COLOR_LIGHTRED, uzi, 1);
		}
	}
	else
	{
		if((regi + penzmozgas) != uj)
		{
			new nev[MAX_PLAYER_NAME], uzi[128];
			GetPlayerName(playerid, nev, sizeof(nev));
			ABroadCast(COLOR_LIGHTRED, "============== ADMIN FIGYELMEZTETÉS! ==============", 1);
			format(uzi, sizeof(uzi), "%s betett a számlájára %dFtot, de nem változott a pénzze!", nev, penzmozgas);
			ABroadCast(COLOR_LIGHTRED, uzi, 1);
			format(uzi, sizeof(uzi), "%dFtot rakott be, régi pénzze: %dFt, új pénzze %dFt", penzmozgas, regi, uj);
			ABroadCast(COLOR_LIGHTRED, uzi, 1);
		}
	}
	return 1;
}

stock GetNewBerSzefIndex()
{
	new i = -1, visszateres = -1;
	for(;++i < MAX_BSZEF;)
	{
	    if(!BerSzef[i][bHasznalva])
	    {
	        visszateres = i;
			break;
	    }
	}
	return visszateres;
}

stock GetPlayerBerSzefID(playerid)
{
	new i = -1, visszateres = -1;
	for(;++i < MAX_BSZEF;)
	{
	    if(BerSzef[i][bHasznalva] && BerSzef[i][bTulajid] == PlayerInfo[playerid][pID])
	    {
	        visszateres = i;
	        break;
	    }
	}
	return visszateres;
}

stock NumPlayerBerSzef(playerid)
{
	new i = -1, visszateres = 0;
	for(;++i < MAX_BSZEF;)
	{
	    if(BerSzef[i][bHasznalva] && BerSzef[i][bTulajid] == PlayerInfo[playerid][pID])
	    {
			visszateres++;
	    }
	}
	return visszateres;
}


fpublic MunkaCheckpointCheck(playerid)
{
	new szeflog[128];
	if((AMT(playerid, MUNKA_UTTISZTITO) || PlayerInfo[playerid][pKozmunka] == MUNKA_UTTISZTITO) && Munkaban[playerid] == MUNKA_UTTISZTITO)
	{
		if(IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "Uttisztito"))
		{
			new Float:r_x, Float:r_y, Float:r_z;
			new csekkpont = MunkaCheckpoint[playerid];
			r_x = UttisztitoCheckpointok[csekkpont][0];
			r_y = UttisztitoCheckpointok[csekkpont][1];
			r_z = UttisztitoCheckpointok[csekkpont][2];

			if(PlayerToPoint(15, playerid, r_x, r_y, r_z))
			{
				new Float:tavolsag, fizetes, Float:px, Float:py, Float:pz;
				new string[60];

				if(MunkaCheckpoint2[playerid] == NINCS)
				{
					px = MunkaStarthely[playerid][0];
					py = MunkaStarthely[playerid][1];
					pz = MunkaStarthely[playerid][2];
				}
				else
				{
					px = UttisztitoCheckpointok[MunkaCheckpoint2[playerid]][0];
					py = UttisztitoCheckpointok[MunkaCheckpoint2[playerid]][1];
					pz = UttisztitoCheckpointok[MunkaCheckpoint2[playerid]][2];
				}

				tavolsag = GetDistanceBetweenPoints(r_x, r_y, r_z, px, py, pz);
				
				if(PlayerInfo[playerid][pKozmunka] != MUNKA_UTTISZTITO)
				{
					fizetes = floatround(tavolsag * MUNKA_PENZ_SZORZO*2*2);
					
					if(fizetes > 1000000)
					{
						printf("[BigFizu] Úttisztítás - %s - %dFt - %f", Nev(playerid), fizetes, tavolsag);
						fizetes = 500;
					}
					
					PlayerInfo[playerid][pPayCheck] += fizetes;
					
					if(FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >= 50000000)
					{
						FrakcioSzef(FRAKCIO_ONKORMANYZAT,-fizetes, 16);
						format(szeflog,sizeof(szeflog), "[%d. frakció]Úttisztítás: %s Ft",FRAKCIO_ONKORMANYZAT,FormatInt(fizetes));
						Log("Szef",szeflog);
					}
					format(string, sizeof(string), "~g~~h~+%dFt", fizetes);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
					new ido = 60+(random(5));
					Format(string,"B¨rt¨n id§d cs¨kkentve %dmpvel.", ido);
					GameTextForPlayer(playerid, string, 2500, 1);
					PlayerInfo[playerid][pJailTime] -= ido;
				}

				MunkaCheckpoint2[playerid] = MunkaCheckpoint[playerid];
				MunkaCheckpoint[playerid] = random(sizeof(UttisztitoCheckpointok));

				while(MunkaCheckpoint2[playerid] == MunkaCheckpoint[playerid])
					MunkaCheckpoint[playerid] = random(sizeof(UttisztitoCheckpointok));

				new Float:x, Float:y, Float:z;
				x = UttisztitoCheckpointok[MunkaCheckpoint[playerid]][0];
				y = UttisztitoCheckpointok[MunkaCheckpoint[playerid]][1];
				z = UttisztitoCheckpointok[MunkaCheckpoint[playerid]][2];

				SetPlayerCheckpoint(playerid, x, y, z, 5);
			}
		}
	}
	else if((AMT(playerid, MUNKA_FUNYIRO) || PlayerInfo[playerid][pKozmunka] == MUNKA_FUNYIRO) && Munkaban[playerid] == MUNKA_FUNYIRO)
	{
		if(IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "Funyiro"))
		{
			new Float:r_x, Float:r_y, Float:r_z;
			new csekkpont = MunkaCheckpoint[playerid];
			r_x = FunyiroCheckpointok[csekkpont][0];
			r_y = FunyiroCheckpointok[csekkpont][1];
			r_z = FunyiroCheckpointok[csekkpont][2];

			if(PlayerToPoint(15, playerid, r_x, r_y, r_z))
			{
				new Float:tavolsag, fizetes, Float:px, Float:py, Float:pz;
				new string[60];

				if(MunkaCheckpoint2[playerid] == NINCS)
				{
					px = MunkaStarthely[playerid][0];
					py = MunkaStarthely[playerid][1];
					pz = MunkaStarthely[playerid][2];
				}
				else
				{
					px = FunyiroCheckpointok[MunkaCheckpoint2[playerid]][0];
					py = FunyiroCheckpointok[MunkaCheckpoint2[playerid]][1];
					pz = FunyiroCheckpointok[MunkaCheckpoint2[playerid]][2];
				}

				tavolsag = GetDistanceBetweenPoints(r_x, r_y, r_z, px, py, pz);
				
				if(PlayerInfo[playerid][pKozmunka] != MUNKA_FUNYIRO)
				{
					fizetes = floatround(tavolsag * 4 * MUNKA_PENZ_SZORZO);
					
					if(fizetes > 1000000)
					{
						printf("[BigFizu] Fûnyíró - %s - %dFt - %f", Nev(playerid), fizetes, tavolsag);
						fizetes = 500;
					}

					PlayerInfo[playerid][pPayCheck] += fizetes;
					
					if(FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >= 50000000)
					{
						FrakcioSzef(FRAKCIO_ONKORMANYZAT,-fizetes, 18);
						format(szeflog,sizeof(szeflog), "[%d. frakció]Fûnyíró: %s Ft",FRAKCIO_ONKORMANYZAT,FormatInt(fizetes));
						Log("Szef",szeflog);
					}
					
					format(string, sizeof(string), "~g~~h~+%dFt", fizetes);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
					new ido = 10+(random(5));
					Format(string,"B¨rt¨n id§d cs¨kkentve %dmpvel.", ido);
					GameTextForPlayer(playerid, string, 2500, 1);
					PlayerInfo[playerid][pJailTime] -= ido;
				}

				MunkaCheckpoint2[playerid] = MunkaCheckpoint[playerid];
				MunkaCheckpoint[playerid] = random(sizeof(FunyiroCheckpointok));

				while(MunkaCheckpoint2[playerid] == MunkaCheckpoint[playerid])
					MunkaCheckpoint[playerid] = random(sizeof(FunyiroCheckpointok));

				new Float:x, Float:y, Float:z;
				x = FunyiroCheckpointok[MunkaCheckpoint[playerid]][0];
				y = FunyiroCheckpointok[MunkaCheckpoint[playerid]][1];
				z = FunyiroCheckpointok[MunkaCheckpoint[playerid]][2];

				SetPlayerCheckpoint(playerid, x, y, z, 5);
			}
		}
	}
	else
	if(AMT(playerid, MUNKA_FARMER) && Munkaban[playerid] == MUNKA_FARMER)
	{
		if(IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "Farmer"))
		{
			new Float:r_x, Float:r_y, Float:r_z;
			new csekkpont = MunkaCheckpoint[playerid];
			r_x = FarmerCheckpointok[csekkpont][0];
			r_y = FarmerCheckpointok[csekkpont][1];
			r_z = FarmerCheckpointok[csekkpont][2];

			if(PlayerToPoint(15, playerid, r_x, r_y, r_z))
			{
				new Float:tavolsag, fizetes, Float:px, Float:py, Float:pz;
				new string[60];

				if(MunkaCheckpoint2[playerid] == NINCS)
				{
					px = MunkaStarthely[playerid][0];
					py = MunkaStarthely[playerid][1];
					pz = MunkaStarthely[playerid][2];
				}
				else
				{
					px = FarmerCheckpointok[MunkaCheckpoint2[playerid]][0];
					py = FarmerCheckpointok[MunkaCheckpoint2[playerid]][1];
					pz = FarmerCheckpointok[MunkaCheckpoint2[playerid]][2];
				}

				tavolsag = GetDistanceBetweenPoints(r_x, r_y, r_z, px, py, pz);
				
				fizetes = floatround(tavolsag * MUNKA_PENZ_SZORZO);
				//fizetes = floatround(fizetes * 0.45);
				
				if(fizetes > 1000000)
				{
					printf("[BigFizu] Farmer - %s - %dFt - %f", Nev(playerid), fizetes, tavolsag);
					fizetes = 500;
				}
				
				PlayerInfo[playerid][pPayCheck] += fizetes;
				
				if(FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >= 50000000)
				{
					FrakcioSzef(FRAKCIO_ONKORMANYZAT,-fizetes, 19);
					format(szeflog,sizeof(szeflog), "[%d. frakció]Farmer: %s Ft",FRAKCIO_ONKORMANYZAT,FormatInt(fizetes));
					Log("Szef",szeflog);
				}
				format(string, sizeof(string), "~g~~h~+%dFt", fizetes);
				GameTextForPlayer(playerid, string, 5000, 1);

				MunkaCheckpoint2[playerid] = MunkaCheckpoint[playerid];
				MunkaCheckpoint[playerid] = random(sizeof(FarmerCheckpointok));

				while(MunkaCheckpoint2[playerid] == MunkaCheckpoint[playerid])
					MunkaCheckpoint[playerid] = random(sizeof(FarmerCheckpointok));

				new Float:x, Float:y, Float:z;
				x = FarmerCheckpointok[MunkaCheckpoint[playerid]][0];
				y = FarmerCheckpointok[MunkaCheckpoint[playerid]][1];
				z = FarmerCheckpointok[MunkaCheckpoint[playerid]][2];

				SetPlayerCheckpoint(playerid, x, y, z, 5);
			}
		}
	}

}

/*stock removePlayerFromMento(playerid)
{
	if(IsPlayerConnected(playerid) && Conn[playerid] == 1)
	{
		if(PlayerInfo[playerid][pMentobenvan] != NINCS)
		{
			SendFormatMessage(playerid, -1, "Debug: pMentobenvan: %d vehid: %d", PlayerInfo[playerid][pMentobenvan], (PlayerInfo[playerid][pMentobenvan]-69));
			new Float:x, Float:y, Float:z, vw, vehid = (PlayerInfo[playerid][pMentobenvan]-69);
			if(!IsVehicleConnected(vehid))
			{
				Tele(playerid, 1178.275024, -1322.871704, 14.112019, false);
				return Msg(playerid, "Debugolva lettél a jármûbõl.");
			}
			
			GetVehiclePos(vehid, x,y,z);
			Msg(playerid, "debug: 1");
			vw = GetVehicleVirtualWorld(vehid);
			SetPlayerVirtualWorld(playerid, vw);
			Msg(playerid, "debug: 2");
			SetPlayerInterior(playerid, 0);
			Msg(playerid, "debug: 3");
			Tele(playerid, x, y, z+1, false);
			Msg(playerid, "debug: 4");
			PlayerInfo[playerid][pMentobenvan] = NINCS;
			if(CAR_Mento[(69+vehid)][mCarNum] > 0) CAR_Mento[(69+vehid)][mCarNum]--;
			Msg(playerid, "debug: 5");
			SetCameraBehindPlayer(playerid);
			Freeze(playerid, 3000);
			return 1;
		} 
		else
		{
			Tele(playerid, 1178.275024, -1322.871704, 14.112019, false);
			return Msg(playerid, "Debugolva lettél a jármûbõl.");
		}
	}
	return 1;
}*/

fpublic CreateLaserStuff()
{
	Create3DTextLabel("/felvesz c4 majd a szökéshez\nA konyhában a szellõzõnél /c4 felszerel", COLOR_YELLOW, 1533.649, 1555.009, 10.918, 10.0, 669, 0);
	Create3DTextLabel("/exit a csatornából való kimászáshoz!", COLOR_YELLOW, -3271.260, 2021.950, 0.930, 20.0, 667, 0);
	LaserArea = CreateDynamicRectangle(1519.419, 1521.231, 1547.882, 1540.555, 669);
	
	//CreateDynamicObject (1499, -2694.95, 1594.16, 2.21, 0.000000, -64.799995, 91.12, 0, 0); szarajtó faszért forog
	
	return 1;
}

fpublic CreateLaser()
{
	print("Lasers creating...");
	Laser[0] = CreateDynamicObject (18643, 1535.052368, 1532.205932, 8.599954, 0.000000, -64.799995, 177.928024, 669, 0);
	Laser[1] = CreateDynamicObject (18643, 1531.608276, 1540.989868, 8.176301, 0.000000, -160.299942, 93.067916, 669, 0);
	Laser[2] = CreateDynamicObject (18643, 1529.454345, 1538.904174, 9.610749, -62.299953, -64.100006, 256.888763, 669, 0);
	Laser[3] = CreateDynamicObject (18643, 1537.431640, 1539.432617, 9.800750, 0.000000, -18.800008, 224.928588, 669, 0);
	Laser[4] = CreateDynamicObject (18643, 1525.317626, 1517.390136, 11.030754, 0.000000, 0.000000, 43.580825, 669, 0);
	Laser[5] = CreateDynamicObject (18643, 1538.965332, 1538.965332, 10.649378, 10.500000, -167.099929, -98.364646, 669, 0);
	Laser[6] = CreateDynamicObject (18643, 1543.578735, 1522.615600, 9.729696, 0.000000, -22.500020, 152.194076, 669, 0);
	Laser[7] = CreateDynamicObject (18643, 1535.516235, 1524.921875, 9.155488, 6.999998, -23.500009, 5.999669, 669, 0);
	Laser[8] = CreateDynamicObject (18643, 1529.911376, 1538.984008, 9.514322, 5.500000, -31.900033, 4.439152, 669, 0);
	Laser[9] = CreateDynamicObject (18643, 1526.139282, 1536.941650, 11.030754, 0.000000, -3.999998, 21.493446, 669, 0);
	Laser[10] = CreateDynamicObject (18643, 1538.776367, 1540.684326, 9.514986, 0.000000, -158.199920, 2.482937, 669, 0);
	Laser[11] = CreateDynamicObject (18643, 1533.767822, 1528.514770, 9.614216, 0.000000, -94.000000, 10.629656, 669, 0);
	Laser[12] = CreateDynamicObject (18643, 1529.976318, 1529.976318, 9.676455, 0.000000, 9.676455, 2.482858, 669, 0);
	Laser[13] = CreateDynamicObject (18643, 1532.615600, 1526.114868, 8.626081, 0.000000, -43.999992, 18.355527, 669, 0);
	Laser[14] = CreateDynamicObject (18643, 1537.101074, 1520.685180, 11.030754, 0.000000, 0.000000, 49.696136, 669, 0);
	Laser[15] = CreateDynamicObject (18643, 1532.218383, 1520.768554, 11.030754, 0.000000, 0.000000, 93.460266, 669, 0);
	Laser[16] = CreateDynamicObject (18643, 1535.759033, 1520.751098, 11.030754, 0.000000, 0.000000, 86.513511, 669, 0);
	Laser[17] = CreateDynamicObject (18643, 1529.948852, 1520.778930, 12.520759, 0.000000, 0.000000, 85.413238, 669, 0);
	Laser[18] = CreateDynamicObject (18643, 1537.428588, 1520.789062, 12.920760, 0.000000, 0.000000, 91.786956, 669, 0);
	Laser[19] = CreateDynamicObject (18643, 1523.394042, 1520.727294, 11.030754, 0.000000, 0.000000, 90.130821, 669, 0);
	Laser[20] = CreateDynamicObject (18643, 1520.031005, 1520.951538, 12.505779, 0.000000, 4.700001, 84.558708, 669, 0);
	Laser[21] = CreateDynamicObject (18643, 1524.864624, 1520.760498, 12.040763, 0.000000, 0.000000, 79.786567, 669, 0);
	Laser[22] = CreateDynamicObject (18643, 1530.840000, 1521.050000, 14.590000, 0.000000, 48.39000, -1.040000, 669, 0);
	Laser[23] = CreateDynamicObject (18643, 1536.390000, 1521.040000, 14.490000, -0.50000, 49.59000, -178.2200, 669, 0);
	Laser[24] = CreateDynamicObject (18643, 1534.070000, 1521.010000, 15.400000, 0.000000, 90.70000, 197.90000, 669, 0);
	Laser[25] = CreateDynamicObject (18643, 1533.240000, 1521.040000, 15.120000, 0.000000, 90.60000, 196.96000, 669, 0);
	print("Lasers created...");
	return 1;
}

fpublic DestroyLaser()
{
	print("Lasers destroying...");
	for(new i = 0; i < sizeof(Laser); i++) if(IsValidDynamicObject(Laser[i])) DestroyDynamicObject(Laser[i]);
	print("Lasers destroyed...");
	return 1;
}

fpublic LaserAktival()
{
	CopMsg(COLOR_ALLDEPT, "Biztonsági õr: A rendszer némi áram kimaradást érzékelt az Alcatrazban! Vége.");
	CopMsg(COLOR_ALLDEPT, "Biztonsági õr: Sikeresen helyreállítottuk a károkat és a lézerháló újra üzemel! Vége.");
	
	CreateLaser();
	LezerDeaktivalva = false;
	return 1;
}

fpublic CreateAjto()
{
	print("Door creating...");
	AlcatrazAjto = CreateDynamicObject(2634, 1533.64, 1541.07, 11.60, 0.00, 0.00, -179.94, 669, 0);
	print("Door created...");
	return 1;
}

fpublic AjtoDeaktival()
{
	MoveDynamicObject(AlcatrazAjto, 1533.64, 1541.58, 11.60, 1.0, 0.00, 0.00, -179.94);
	SetTimer("AjtoDeaktival2", 10*1000, false);
	return 1;
}

fpublic AjtoDeaktival2()
{
	MoveDynamicObject(AlcatrazAjto, 1531.60, 1541.58, 11.60, 1.0, 0.00, 0.00, -179.94);
	SetTimer("AjtoAktival", 300*1000, false);
	return 1;
}

fpublic AjtoAktival()
{
	MoveDynamicObject(AlcatrazAjto, 1533.64, 1541.58, 11.60, 1.0, 0.00, 0.00, -179.94);
	SetTimer("AjtoAktival2", 10*1000, false);
	return 1;
}

fpublic AjtoAktival2()
{
	MoveDynamicObject(AlcatrazAjto, 1533.64, 1541.07, 11.60, 1.0, 0.00, 0.00, -179.94);
	AjtoDeaktivalva = false;
	return 1;
}

stock removePlayersFromVehicle(vehid)
{
	for(new playerid = 0;playerid <MAX_PLAYERS; playerid++)
	{
		if(IsPlayerConnected(playerid) && Conn[playerid] == 1)
		{
			//new vstate = GetPlayerState(playerid);
			if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(playerid, vehid))
			{
				RemovePlayerFromVehicle(playerid);
			}
			if(PlayerInfo[playerid][pMentobenvan] == (69+vehid))
			{
				new Float:x, Float:y, Float:z;
				GetVehiclePos(vehid, x,y,z);
				SetPlayerVirtualWorld(playerid, GetVehicleVirtualWorld(vehid));
				SetPlayerInterior(playerid, 0);
				Tele(playerid, x, y, z+1, false);
				PlayerInfo[playerid][pMentobenvan] = NINCS;
				if(CAR_Mento[69+vehid][mCarNum] > 0) CAR_Mento[69+vehid][mCarNum]--;
			}
		}
		
	}
}

fpublic PenzUpdate()
{
	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		if(IsPlayerConnected(playerid) && Conn[playerid] == 1)
		{
			new string[32], penz = GetMoney(playerid);
			if(penz != Money[playerid] && penz != 0)
			{

				if(penz > 0 && penz <= 999999999)
				{
					if(penz < 10)
						format(string, sizeof(string), "~g~00000000%iFt", penz);

					else if(penz <= 99)
						format(string, sizeof(string), "~g~0000000%iFt", penz);

					else if(penz <= 999)
						format(string, sizeof(string), "~g~000000%iFt", penz);

					else if(penz <= 9999)
						format(string, sizeof(string), "~g~00000%iFt", penz);

					else if(penz <= 99999)
						format(string, sizeof(string), "~g~0000%iFt", penz);

					else if(penz <= 999999)
						format(string, sizeof(string), "~g~000%iFt", penz);

					else if(penz <= 9999999)
						format(string, sizeof(string), "~g~00%iFt", penz);

					else if(penz <= 99999999)
						format(string, sizeof(string), "~g~0%iFt", penz);
						
					else if(penz <= 999999999)
						format(string, sizeof(string), "~g~%iFt", penz);
				}

				else if(penz < 0 && penz >= -999999999)
				{
					new TheNewMoney = penz * -1;

					if(penz > -10)
						format(string, sizeof(string), "~r~-00000000%iFt", TheNewMoney);

					else if(penz >= -99)
						format(string, sizeof(string), "~r~-0000000%iFt", TheNewMoney);

					else if(penz >= -999)
						format(string, sizeof(string), "~r~-000000%iFt", TheNewMoney);

					else if(penz >= -9999)
						format(string, sizeof(string), "~r~-00000%iFt", TheNewMoney);

					else if(penz >= -99999)
						format(string, sizeof(string), "~r~-0000%iFt", TheNewMoney);

					else if(penz >= -999999)
						format(string, sizeof(string), "~r~-000%iFt", TheNewMoney);

					else if(penz >= -9999999)
						format(string, sizeof(string), "~r~-00%iFt", TheNewMoney);

					else if(penz >= -99999999)
						format(string, sizeof(string), "~r~-0%iFt", TheNewMoney);
						
					else if(penz >= -999999999)
						format(string, sizeof(string), "~r~-%iFt", TheNewMoney);
				}
				TextDrawSetString(MoneyTxt[playerid], string);
			}

			if(CurCol[playerid] != 1 && penz >= 20000) // You can change the default >= and 20000 to whatever you wish.  This means if they have 20000 or greater cash their money will be the color green.
			{
				CurCol[playerid] = 1;
				TextDrawHideForPlayer(playerid,MoneyTxt[playerid]);
				TextDrawColor(MoneyTxt[playerid],COLOR_GreenMoney);
				TextDrawShowForPlayer(playerid,MoneyTxt[playerid]);
			}
			else if(CurCol[playerid] != 3 && penz < 0) // You can change the default < and 0 to whatever you wish.  This means if they have less than 0 cash (negative cash) their money will be the color red.
			{
				CurCol[playerid] = 3;
				TextDrawHideForPlayer(playerid,MoneyTxt[playerid]);
				TextDrawColor(MoneyTxt[playerid],COLOR_RedMoney);
				TextDrawShowForPlayer(playerid,MoneyTxt[playerid]);
			}
			else if(CurCol[playerid] != 2 && penz < 20000 && penz > 0) // You can change the default < and 20000 to whatever you wish.  This means if they have less than 20000 cash their money will be the color yellow.
			{
				CurCol[playerid] = 2;
				TextDrawHideForPlayer(playerid,MoneyTxt[playerid]);
				TextDrawColor(MoneyTxt[playerid],COLOR_YellowMoney);
				TextDrawShowForPlayer(playerid,MoneyTxt[playerid]);
			}
			if(CurCol[playerid] != 4 && penz == 0)
			{
				CurCol[playerid] = 4;
				TextDrawHideForPlayer(playerid,MoneyTxt[playerid]);
				TextDrawColor(MoneyTxt[playerid],COLOR_GreyMoney);
				TextDrawShowForPlayer(playerid,MoneyTxt[playerid]);
				TextDrawSetString(MoneyTxt[playerid], "~g~00000000Ft");
			}
			Money[playerid] = GetMoney(playerid);
		}
	}
}

fpublic Munkaruha(playerid, ruha)
{
	if(ruha == 1)
		SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
	else if(ruha == 2)
	{
		switch(PlayerInfo[playerid][pPoliceAlosztalyFo])
		{
			case 1: SetPlayerSkin(playerid, PlayerInfo[playerid][pPoliceRuha][0]);
			case 2: SetPlayerSkin(playerid, PlayerInfo[playerid][pPoliceRuha][1]);
			case 3: SetPlayerSkin(playerid, PlayerInfo[playerid][pPoliceRuha][2]);
			default: SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		}
	}
	else
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		
	return 1;
}

fpublic DutyFegyverekBeallitasa(playerid)
{
	if(LMT(playerid, FRAKCIO_TUZOLTO))
	{
		if(PlayerInfo[playerid][pRank] != 1 && PlayerInfo[playerid][pRank] != 0)
		{
			
			WeaponGiveWeapon(playerid, WEAPON_CHAINSAW);
		}
		
		WeaponGiveWeapon(playerid, WEAPON_FIREEXTINGUISHER, 5000);
	}

	return 1;
}
stock LMT(playerid, munka)
{
	if(PlayerInfo[playerid][pLeader] == munka || PlayerInfo[playerid][pMember] == munka)
		return 1;
	
	return 0;
}

stock AMT(playerid, munka)
{
	if(PlayerInfo[playerid][pJob1] == munka || PlayerInfo[playerid][pJob2] == munka)
		return 1;

	return 0;
}

Nincsbelepve(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(!Logged(playerid))
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Elõbb lépj be! ( /login )");
		    return 1;
  		}
	}
	return 0;
}

stock UjPickup(pickup, tipus, Float:spawn_x, Float:spawn_y, Float:spawn_z, VirtualWorld = -1, Interior = -1)
{
	new id;
	id = CreateDynamicPickup(pickup, tipus, spawn_x, spawn_y, spawn_z, VirtualWorld, Interior);
	return id;
}

stock IsVehicleConnected(vehicleid) //By Sacky (edited by Gabriel "Larcius" Cordes)
{
	if(vehicleid < 1 || vehicleid >= MAX_VEHICLES) return 0;
	
	new Float:x1,Float:y1,Float:z1;
	GetVehiclePos(vehicleid,x1,y1,z1);
	if(x1==0.0 && y1==0.0 && z1==0.0)
	{
		return 0;
	}
	return 1;
}

stock GetClosestVehicle(playerid, benneulcheck = true, model = NINCS, Float:tav = 0.0)
{
	new kocsi = GetPlayerVehicleID(playerid);
	if(benneulcheck && kocsi != 0)
		return kocsi;
	
	new closestvehicle = 1;
	new Float:closestdist = 99999.0, Float:dist;
	for(new vehicleid = 1; vehicleid < MAX_VEHICLES; vehicleid++)
	{
		if(vehicleid == kocsi) continue;
		
		
	
		if(model == NINCS)
		{
			if(GetVehicleVirtualWorld(vehicleid) == GetPlayerVirtualWorld(playerid))
			{
				
				dist = GetPlayerDistanceFromVehicle(playerid,vehicleid);
				if(dist < closestdist && dist != INF_FLOAT)
				{
					closestdist = dist;
					closestvehicle = vehicleid;
				}
			}
		}
		else
		{
			if(GetVehicleVirtualWorld(vehicleid) == GetPlayerVirtualWorld(playerid) && GetVehicleModel(vehicleid) == model)
			{
				dist = GetPlayerDistanceFromVehicle(playerid,vehicleid);
				if(dist < closestdist && dist != INF_FLOAT)
				{
					closestdist = dist;
					closestvehicle = vehicleid;
				}
			}
		}
	}
	return (tav == 0.0 || closestdist <= tav ? closestvehicle : NINCS);
}

stock GetClosestCar(playerid, asd = false)
{
	return GetClosestVehicle(playerid, asd);
}

stock JarmuElromlas(v)
{
	#warning ki van kapcsolva valamiért;
	//if(IsMunkaJarmuElromlas(v)) return true; lassú
	//if(IsMunkaKocsi(v) > NINCS ) return true; sokkal gyorsabb
	if(CarType[v] == CAR_TYPE_MK) return true;
    new veletlen;

	if(KocsiHibas[v]==0)
	{
		if(KmSzamol[v]/1000 > 15000.0)
		{
			veletlen=random(100);
			if(veletlen>60)
			{
				KocsiHibas[v]=random(3)+7;
				engineOn[v] = 0;
				SetJarmu(v, KOCSI_MOTOR, false);
				
			}
		}
		if(KocsiAllapot[v] > KOCSIROMLAS_MAX)
		{
			KocsiHibas[v]=random(3)+7;
			engineOn[v] = 0;
			SetJarmu(v, KOCSI_MOTOR, false);
		}
		if(KocsiAllapot[v] > KOCSIROMLAS_NAGY-KOCSIROMLAS_TOLAS && KocsiAllapot[v] < KOCSIROMLAS_NAGY)
		{
			veletlen=random(100); //40% esély
			//printf("80 s : %d",veletlen)
			if(veletlen>60)
			{
				KocsiHibas[v]=random(3)+7;
				engineOn[v] = 0;
				SetJarmu(v, KOCSI_MOTOR, false);
				//SendFormatMessageToAll(COLOR_LIGHTBLUE, "A kocsi elromlott %d Állapot %.3f",v, KocsiAllapot[v]);
			}
		}
		if(KocsiAllapot[v] > KOCSIROMLAS_KOZEPES-KOCSIROMLAS_TOLAS && KocsiAllapot[v] < KOCSIROMLAS_KOZEPES)
		{
			veletlen=random(100); //30% esély
		//	printf("60 s : %d",veletlen)
			if(veletlen>70)
			{
				KocsiHibas[v]=random(3)+4;
				engineOn[v] = 0;
				SetJarmu(v, KOCSI_MOTOR, false);
			//	SendFormatMessageToAll(COLOR_LIGHTBLUE, "A kocsi elromlott %d Állapot %.3f",v, KocsiAllapot[v]);
			}
		}
	}
	
	return 1;
}

fpublic UjMunka(playerid, munkaszama, munka)
{
	if(munkaszama == 1)
		PlayerInfo[playerid][pJob1] = munka;
	else
    	PlayerInfo[playerid][pJob2] = munka;

	return 1;
}

stock MunkaLeader(playerid, munka)
{
	//Leaderes melók
	if(PlayerInfo[playerid][pLeader] == munka)
		return 1;

	return 0;
}


stock Munkarang(playerid, rang)
{
	if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0)
	{
	    if(PlayerInfo[playerid][pRank] >= rang)
	        return 1;
	}

	return 0;
}

stock SajatKocsi(id, kocsi)
{
	if(IsPlayerConnected(id))
	{
		new frakciokocsi = IsFrakcioKocsi(kocsi);
		new munkakocsi = IsMunkaKocsi(kocsi);
		new mid = NINCS;
		if(munkakocsi != NINCS)
			mid = MunkaKocsiID(kocsi, munkakocsi);
		
		
		//roncsderbi
		if(RoncsDerby[id][rdVersenyez])
		{
			for(new x=0; x < MAX_DERBI_KOCSI; x++)
			{
				if(DerbiKocsi[x]  == kocsi) return 1;
			}
		
		}
		// bérli
		if(munkakocsi != NINCS && mid != NINCS && MunkaKocsi[munkakocsi][mid][kBerelido] > UnixTime && MunkaKocsi[munkakocsi][mid][kBerel] == id)
			return 1;
		
		//munkák
		if(munkakocsi == PlayerInfo[id][pJob1] || munkakocsi == PlayerInfo[id][pJob2]) 
			return 1;
		
		if(PlayerInfo[id][pSSS] > 0 && munkakocsi == MUNKA_SSS)
			return 1;
			
		if(PlayerInfo[id][pOnkentes] > 0 && munkakocsi == MUNKA_ONKENTES)
			return 1;
		
		if(munkakocsi == 0 || munkakocsi == MUNKA_CROSS)
			return 1;
		
		//alfrakció
		if(munkakocsi == MUNKA_TAXI || munkakocsi == MUNKA_SWAT)
			return 1;
			
		if(frakciokocsi == PlayerInfo[id][pMember] || frakciokocsi == 16 && (Vizsgafajta[id] > 0))
			return 1;

		if(PlayerInfo[id][pPcarkey] != NINCS)
			if(kocsi == CarInfo[PlayerInfo[id][pPcarkey]][cId])
				return 1;
				
		if(PlayerInfo[id][pPcarkey2] != NINCS)
			if(kocsi == CarInfo[PlayerInfo[id][pPcarkey2]][cId])
				return 1;
				
		if(PlayerInfo[id][pPcarkey3] != NINCS)
			if(kocsi == CarInfo[PlayerInfo[id][pPcarkey3]][cId])
				return 1;
				
		if(kocsi == JarmuKulcs[id])
			return 1;

		if(kocsi == HireCar[id])
		    return 1;

		if(IsKocsi(kocsi, "Prod") || IsKocsi(kocsi, "uttisztito") || IsKocsi(kocsi, "Gokart")  || IsKocsi(kocsi, "Kamion") || IsKocsi(kocsi, "Pilota") || IsKocsi(kocsi, "Farmer")  || IsKocsi(kocsi, "Funyiro") || IsKocsi(kocsi,"Kukas") || IsKocsi(kocsi, "Szerelo") || IsKocsi(kocsi, "Busz") || IsKocsi(kocsi, "Szabad") || IsKocsi(kocsi, "Postas") || IsKocsi(kocsi, "Pizza") || IsKocsi(kocsi, "Taxi") || IsKocsi(kocsi, "Favago") || IsKocsi(kocsi, "Hulla"))
			return 1;

	/*	if(kocsi > UtolsoKocsi)
		    return 1;
*/
		if(Lefoglalt[id])
			return 1;
		
		new car = IsAVsKocsi(kocsi);
		if(car != NINCS)
		{
			if(CarInfo[car][cKulcsok][0] == PlayerInfo[id][pID])
				return 1;
					
			if(CarInfo[car][cKulcsok][1] == PlayerInfo[id][pID])
				return 1;	
		}
		
		/*if(PlayerInfo[id][pKulcsok][0] != NINCS)
			if(kocsi == CarInfo[PlayerInfo[id][pKulcsok][0]][cId])
				return 1;
				
		if(PlayerInfo[id][pKulcsok][1] != NINCS)
			if(kocsi == CarInfo[PlayerInfo[id][pKulcsok][1]][cId])
				return 1;
				
		if(PlayerInfo[id][pKulcsok][2] != NINCS)
			if(kocsi == CarInfo[PlayerInfo[id][pKulcsok][2]][cId])
				return 1;*/
	}
	return 0;
}


stock UjKocsi(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:angle = 0.0, color1 = 0, color2 = 0, Int = 0, VW = 0, type = CAR_TYPE_NONE, uid = NINCS, uid2 = NINCS, szirena = 0)
{
	new id;
	if(!ModBetoltve || modelid == 538)
		id = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, 0);
	else
	{
		if(szirena)
			id = CreateVehicle(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, 0, 1);
		else
			id = CreateVehicle(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, 0);
	}
	
	//printf("UjKocsi = [%d] model: %d - pos: %f,%f,%f,%f - color: %d,%d - int,vw: %d,%d - type: %d - uid: %d - uid2: %d", id, modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, Int, VW, type, uid, uid2);
	if(modelid < 300 )
		print("modelid");
	if(id == INVALID_VEHICLE_ID )
		print("invalid");
	if(id >= MAX_VEHICLES)
		print("sok");
	if(id < 1)
		print("kis id");
	if(modelid < 300 || id == INVALID_VEHICLE_ID || id >= MAX_VEHICLES || id < 1)
		return printf("HIBÁS UJKOCSI: model: %d, x: %f, y: %f, z: %f, a: %f, c1: %d, c2: %d, int: %d, vw: %d, type: %d, uid: %d, uid2: %d", modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, Int, VW, type, uid, uid2);

	if(id < 1)
		return 0;
	
	CarType[id] = type;
	CarUID[id] = uid;
	CarUID2[id] = uid2;
	
	KocsiSzinek[id][0] = color1;
	KocsiSzinek[id][1] = color2;
	KocsiRendszam(id);
	FrakcioJarmuTuning(id);
	//KocsiObjectTorol(id);
	
	if(Int != 0) SetVehicleInterior(id, Int);
	if(VW != 0) SetVehicleVW(id, VW);
	
	if(id)
		VehiclePos[id][0] = spawn_x, VehiclePos[id][1] = spawn_y, VehiclePos[id][2] = spawn_z;

	vehicleh[id] = 1000.0;
	if(IsAPancelozottKocsi(id))
	{
		ArmoredVehicle[id] = true;
		SetVehicleHealth(id, 100000);
	}
	KocsiObjectTorol(id);
	return id;
}

fpublic IdojarasValtozas()
{
	//Msg(0,"IdojarasValtozas");
	/*for(new v=0;v<MAX_VEHICLES; v++)
	{
		JarmuElromlas(v);
		//NEM KELL KIVÉTEL A VERSENYRE, SZÉPEN TARTSÁK KARBAN A KOCSIT... + MEGEMELVE LASSABBAN ROMLIK EL.
	}*/

	new navmessage[128];
	new osszeg;
	SendMessage(SEND_MESSAGE_FRACTION, "<< ========== (Be nem fizetett adók) ========== >>", COLOR_RED, FRAKCIO_SCPD);
	foreach(Jatekosok, s)
	{
		if((((Szint(s) + 1) * levelexp) - PlayerInfo[s][pExp]) <= -1)
			Msg(s, "Nem töltötted ki a tesztet, így nem tudsz szintet lépni");
			
		if(!IsPlayerConnected(s) || IsPlayerNPC(s) || PlayerInfo[s][pAdokIdo] > 1) continue;
		
		osszeg = PlayerInfo[s][pAdokOsszeg];
		format(navmessage, sizeof(navmessage), "%s befizetési határidõ: %d fizetés Összeg: %sFt", ICPlayerName(s), PlayerInfo[s][pAdokIdo], FormatNumber(osszeg, 0, ',' ));
		SendMessage(SEND_MESSAGE_FRACTION, navmessage, COLOR_RED, FRAKCIO_SCPD);
	}
	SendMessage(SEND_MESSAGE_FRACTION, "<< ========== (Be nem fizetett adók) ========== >>", COLOR_RED, FRAKCIO_SCPD);
	
	for(new k = 0; k < MAX_BENZINKUT; k++)
	{
		if(BenzinKutak[k][bBenzinAra] < 300)
			BenzinKutak[k][bBenzinAra] = 300;
			
		if(BenzinKutak[k][bDieselAra] < 300)
			BenzinKutak[k][bDieselAra] = 300;
		
		if(BenzinKutak[k][bKerozinAra] < 400)
			BenzinKutak[k][bKerozinAra] = 400;	
	}	
	
	FrakcioKocsiMentes();
	
	MunkaKocsiMentes();
	
	new idojaras[128];
	new idojarasok[13] = {
		0,	// Tiszta
		3,	// Felhõs
		4,	// Ködös
		7,	// Borult
		//8,	// Vihar
		9,	// Erõs köd
		10,	// Felhõs
		12,	// Borús
		13,	// Felhõs
		14,	// Felhõs
		15,	// Borús
		17,	// Tiszta
		18,	// Tiszta
		//19,	// Erõsen ködös
		20	// Erõsen borús
		//NINCS	// Havazás
	};
	if(!IdoJaras[iValtas])
	{
		switch(IdoJaras[iLesz])
		{
			// Tiszta
			case 0, 17, 18: idojaras = "Napos, száraz, meleg idõ várható";
		
			// Felhõs
			case 3, 10, 13, 14: idojaras = "Felhõs idõ várható";
		
			// Borús
			case 7, 12, 15: idojaras = "Borús idõ várható";
		
			// Erõsen borús
			case 20: idojaras = "Erõsen borús idõ várható";
		
			// Vihar
			//case 8: idojaras = "Vihar várható";
		
			// Köd
			case 4: idojaras = "Köd várható";
		
			// Erõs köd
			case 9, 19: idojaras = "Erõs köd várható";
			
			// Havazás
			//case NINCS: idojaras = "Havazás várható";
		}
		SendFormatMessageToAll(COLOR_NEWS, "<< Idõjárás elõrejelzés: %s >>", idojaras);
	}
	else
	{
		IdoJaras[iMost] = IdoJaras[iLesz];
		switch(IdoJaras[iMost])
		{
			// Tiszta
			case 0, 17, 18: idojaras = "Jelenleg napos, száraz, meleg idõ van";
		
			// Felhõs
			case 3, 10, 13, 14: idojaras = "Jelenleg felhõs idõ van";
		
			// Borús
			case 7, 12, 15: idojaras = "Jelenleg borús idõ van";
		
			// Erõsen borús
			case 20: idojaras = "Erõsen borús idõ van";
		
			// Vihar
			//case 8: idojaras = "Vihar van! Vigyázz, mert csúszik az út!";
		
			// Köd
			case 4: idojaras = "Köd van, vigyázz, nehogy neki menj valakinek!";
		
			// Erõs köd
			case 9: idojaras = "Erõs köd van, vigyázz, nehogy neki menj valakinek!";
			
			// Havazás
			//case NINCS: idojaras = "Esik a hó, vigyázz az utakon!";
		}
		SendFormatMessageToAll(COLOR_NEWS, "<< Idõjárás jelentés: %s >>", idojaras);
		//SetWeather(IdoJaras[iMost]);
		IdojarasValt(NINCS, IdoJaras[iMost]);
	}
	
	new lesz;
	if(IdoJaras[iValtas])
	{
		switch(IdoJaras[iMost])
		{
			// Borús idõk
//			case 7, 12, 15, 20:
//			{
//				lesz = 19;
//			}
			// Viharos idõk
			case 19:
			{
				switch(random(2))
				{
					case 0: lesz = 4;
					case 1: lesz = 9;
				}
			}
			default:
			{
				lesz = idojarasok[random(sizeof(idojarasok))];
				
				// Ne rakjon be viharos és ködös idõt
				while(lesz == 19 || lesz == 4 || lesz == 9 || (lesz == 7  || lesz == 12 || lesz == 15 || lesz == 20) && random(10) != 1)
					lesz = idojarasok[random(sizeof(idojarasok))];
			}
		}
		IdoJaras[iLesz] = lesz;
		IdoJaras[iValtas] = false;
	}
	else
		IdoJaras[iValtas] = true;

	
	LoadVersion();

	return 1;
}

fpublic Drog()
{
	new p;
	for(p = 0; p < MAX_PLAYERS; p++)
	{
	    if(PlayerInfo[p][pDrogido] > 0)
	    {
	        PlayerInfo[p][pDrogido]--;
	        if(PlayerInfo[p][pDrogido] <= 0)
	            SetPlayerWeather(p, IdoJaras[iMost]);
	    }
	    if(Drogozott[p] == 1)
	        Drogozott[p] = 0;
	}
}

fpublic IsVehicleOccupied(vehicleid)
{
	foreach(Jatekosok, i)
		if(IsPlayerInVehicle(i,vehicleid)) return 1;
	return 0;
}

fpublic AllCarSpawn()
{
	printf("\n================V-s jarmuvek betoltese es lerakasa folyamatban================\n");
	LoadCar();
	printf("\n================V-s jarmuvek betoltve es lerakva ================\n");
	
	printf("\n================Frakcio jarmuvek betoltese es lerakasa folyamatban================\n");
	FrakcioKocsiBetoltes();
	printf("\n================Frakcio jarmuvek betoltve es lerakva ================\n");
	
	printf("\n================Munka jarmuvek betoltese es lerakasa folyamatban================\n");
	MunkaKocsiBetoltes();
	printf("\n================Munka jarmuvek betoltven================\n");

	//UjKocsi(538, 1700.7551,-1953.6531,14.8756,200.0,-1,-1);
	//trailerek LV Chuckup
	UjKocsi(435,1426.50000000,1061.69995117,11.50000000,90.00000000,1,-1);
	UjKocsi(435,1426.59997559,1056.30004883,11.50000000,90.00000000,1,-1);
	UjKocsi(435,1426.69995117,1051.30004883,11.50000000,90.00000000,1,-1);
	UjKocsi(435,1426.69995117,1045.00000000,11.50000000,90.00000000,1,-1);
	//trailerek LV bánya
	UjKocsi(450,687.90002441,903.70001221,-38.90000153,92.00000000,6,1);
	UjKocsi(450,687.90002441,899.40002441,-38.90000153,92.00000000,6,1);
	UjKocsi(450,687.90002441,895.29998779,-38.90000153,92.00000000,6,1);
	UjKocsi(450,688.09997559,890.40002441,-38.90000153,92.00000000,6,1);
	//trailer LV gyár
	UjKocsi(584,247.60000610,1371.69995117,11.69999981,270.00000000,-1,-1);
	UjKocsi(584,247.60000610,1396.00000000,11.69999981,270.00000000,-1,-1);
	UjKocsi(584,247.89999390,1348.59997559,11.69999981,270.00000000,-1,-1);
	//trailer Chiliad lába
	UjKocsi(450,-1914.30004883,-1704.69995117,22.39999962,185.99993896,123,1);
	UjKocsi(450,-1909.00000000,-1704.40002441,22.39999962,184.00000000,123,1);
	UjKocsi(450,-1903.80004883,-1703.69995117,22.39999962,185.99853516,123,1);
	UjKocsi(450,-1898.30004883,-1703.19995117,22.39999962,185.99853516,123,1);
	

	return 1;

}

fpublic AllCarRespawn() // pacr
{
	if(CarRespawnSzamlalo == NINCS) return 1;
	new ido = UnixTime;
	new maxszamol=CarRespawnSzamlalo+CarresiDB;
	
	if(maxszamol > MAX_VEHICLES)
		maxszamol=MAX_VEHICLES;
		//ideide
	for(new vehicleid=CarRespawnSzamlalo;vehicleid < maxszamol; vehicleid++)
	{
		CarRespawnSzamlalo++;
		if(IsVehicleConnected(vehicleid))
		{
			if(!IsVehicleOccupied(vehicleid))
			{

				new bool:kihagy=false;
				for(new rb; rb < MAX_DERBI_KOCSI; rb++)
				{
					if(DerbiKocsi[rb] == vehicleid)
						kihagy=true;
				}
				
				if(KocsiUtolsoHasznalat[vehicleid] < (ido - 300) && TrailerAttached(vehicleid) == NINCS && Lopott[vehicleid] == false)
				{
				
					new vs = IsAVsKocsi(vehicleid);
					new mk = IsMunkaKocsi(vehicleid);
		
					if(vs != NINCS )
					{
						if(OnlineUID(CarInfo[vs][cTulaj]) == NINCS)
							KocsiRespawn(vehicleid),KocsiObjectTorol(vehicleid);
					}
					else if(mk != NINCS)
					{
					  if(!BereltKocsi(vehicleid))
						KocsiRespawn(vehicleid),KocsiObjectTorol(vehicleid);
					
					}
					else if(!kihagy)
						KocsiRespawn(vehicleid),KocsiObjectTorol(vehicleid);
					
				}
				
			}
			KocsiRendszam(vehicleid, true);
		}
	}
	new string[32];
	Format(string, "CarResi: %d->%d", maxszamol-CarresiDB,CarRespawnSzamlalo);
	TextDrawSetString(resitd, string);
	
	if(CarRespawnSzamlalo >= MAX_VEHICLES)
	{
		CarRespawnSzamlalo = NINCS;
		ResiCounterFIX=true;
		TextDrawHideForAll(resitd);
		SendClientMessageToAll(COLOR_GREEN, "<<< Minden Használaton kívüli jármû visszavontatva >>>");
		ResiCounter = AutoResi;
	}
	return 1;
}

fpublic Edzes(playerid)
{
	if(IsPlayerConnected(playerid) && Logged(playerid))
	{
		TogglePlayerControllable(playerid, 1);
		Msg(playerid, "Megtanultad a harc stílust!");
		PlayerInfo[playerid][pStilus] = TanultStilus[playerid];
		Cselekves(playerid, "befejezte az edzést...");
		Edzik[playerid] = 0;
		if(TanultStilus[playerid] == 1)
		{
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
		    TanultStilus[playerid] = 0;
		}
		else if(TanultStilus[playerid] == 2)
		{
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
		    TanultStilus[playerid] = 0;
	 	}
		else if(TanultStilus[playerid] == 3)
		{
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		    TanultStilus[playerid] = 0;
		}
        else if(TanultStilus[playerid] == 5)
        {
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
		    TanultStilus[playerid] = 0;
		}
	}
	return 1;
}
fpublic BankLezar()
{
	if(IsValidDynamicObject(BankAjto)) DestroyDynamicObject(BankAjto), BankAjto=INVALID_OBJECT_ID;
	BankAjto = CreateDynamicObject(2634, 2144.1845703125, 1627.1131591797, 994.28723144531, 0, 0, 180.63439941406); 
	foreach(Jatekosok, i)
	{
		if(PlayerToPoint(10, i, 2144.1914,1633.8092,993.6882))
		{
			//PlayerInfo[i][pTeleportAlatt] = 1;
			//PlayerInfo[i][pCFalsePositive] = 1;
			SetPlayerPos(i, 2144.2673,1620.8644,993.6882);
			Rabol[i] = 0;
			ClearAnimations(i);
			UnFreeze(i);
		}
	}
	MikorRabolhato = SF_ROB_IDO;
	BankRobIdo = 0;
	
	if(BankSzefRablas < 1) BankSzef = 0;
	else BankSzef = BankSzefRablas;
	return 1;
}
fpublic BankC4Robban(playerid)
{
	if(BankC4 == 0) return 1;

	//CreateExplosion(2144.5300292969, 1626.8874511719, 994.06573486328, 2, 200.0);
	foreach(Jatekosok,x)
	{
		if(PlayerToPoint(B_Cselekves,x,2145.56640625, 1632.2729492188, 992.6943359375, 1555))
		{
			if(PlayerToPoint(4,x,2145.56640625, 1632.2729492188, 992.6943359375, 1555))
			{
				SetHealth(x, 0);
				Msg(x,"Felrobbantál, mert közel áltál a c4-hez!");
			}
		}
		if(PlayerVW[x] == 1555)
			CreateExplosionForPlayer(x, 2145.56640625, 1632.2729492188, 992.6943359375, 7, 15.0);
	}
	
	DestroyDynamicObject(BankC4);
	BankC4 = 0;
	if(IsValidDynamicObject(BankAjto)) DestroyDynamicObject(BankAjto), BankAjto=INVALID_OBJECT_ID;
	BankAjto = CreateDynamicObject(2634, 2145.56640625, 1632.2729492188, 992.6943359375, 85.355010986328, 292.65710449219, 119.51965332031);
	//SetTimer("BankLezar", 36000, 1);
	BankRobIdo = 900;
	BankSzefRablas = BankSzef;
	PlayerInfo[playerid][pC4] = 0;
	
	return 1;
}
fpublic AlcatrazRobbant(playerid)
{
	if(SzellozoC4 == 0) return 1;

	//CreateExplosion(2144.5300292969, 1626.8874511719, 994.06573486328, 2, 200.0);
	foreach(Jatekosok,x)
	{
		if(PlayerToPoint(10.0,x,1429.308, 1560.698, 10.980, 666))
		{
			SetHealth(x, 0);
			Msg(x,"Felrobbantál, mert közel áltál a c4-hez!");
		}
		if(PlayerVW[x] == 666)
			CreateExplosionForPlayer(x, 1429.308, 1560.698, 10.980, 7, 15.0);
	}
	
	if(IsValidDynamicObject(SzellozoC4)) DestroyDynamicObject(SzellozoC4);
	SzellozoC4 = 0;
	if(IsValidDynamic3DTextLabel(AlcatrazSzokes3DText)) DestroyDynamic3DTextLabel(AlcatrazSzokes3DText);
	AlcatrazSzokes3DText = Create3DTextLabel("*Kirobbantott szellõzõ: /enter", COLOR_LIGHTBLUE, 1429.308, 1560.698, 10.980, 10.0, 666, 0);
	Szokhet = true;
	
	SendClientMessage(playerid, COLOR_RED, "Sikeresen kirobbantottad a szellõzõt. Azonban ez hangos volt és bejelzett a rendõröknek!");
	SendClientMessage(playerid, COLOR_RED, "Mássz be a szellõzõbe és gyorsan pattanj meg az alagúton keresztül!");
	CopMsg(COLOR_ALLDEPT, "Alcatraz: Robbanás hallatszott az Alcatrazban! Azonnal járjatok utána!");
	
	SetTimer("ResetSzokhet",  300*1000, false);
	
	return 1;
}

fpublic ResetSzokhet()
{
	CopMsg(COLOR_ALLDEPT, "Alcatraz: Sikeresen megjavítottuk a szellõzõrácsokat, mostmár egy fegyenc sem tud meglépni!");
	Szokhet = false;
	if(IsValidDynamic3DTextLabel(AlcatrazSzokes3DText)) DestroyDynamic3DTextLabel(AlcatrazSzokes3DText);
	return 1;
}
fpublic c4szereles(playerid)
{
	if(PlayerToPoint(3, playerid, 2144.5300292969, 1626.8874511719, 994.06573486328))
	{
		
		C4Lerakva[playerid] = 1;
		PlayerInfo[playerid][pC4] = 0;
		BankC4 = CreateDynamicObject(1654, 2144.4560546875, 1626.865234375, 994.27081298828, 0, 0, 0);
		Msg(playerid, "C4 felszerelve a széf ajtajára, hamarosan robban!");
		Cselekves(playerid, "felszerelt egy C4-et a széf ajtajára...");
		//SetTimer("BankC4Robban", 6000, 1);
	
		SetTimerEx("BankC4Robban",  6000, false, "i", playerid);
		
		return 1;
	}
	if(PlayerToPoint(2, playerid, 1429.308, 1560.698, 10.980, 666))
	{
	
		C4Lerakva[playerid] = 1;
		PlayerInfo[playerid][pC4] = 0;
		SzellozoC4 = CreateDynamicObject(1654, 1428.93, 1560.68, 10.80, 0, 0, 82.09);
		Msg(playerid, "C4 felszerelve a szellõzõ nyílására, hamarosan robban!");
		Cselekves(playerid, "felszerelt egy C4-et a szellõzõ nyílására...");
		//SetTimer("BankC4Robban", 6000, 1);
	
		SetTimerEx("AlcatrazRobbant",  6000, false, "i", playerid);
		
		return 1;
	}
	if(C4Kocsiban[playerid] == NINCS)
	{
		C4Lerakva[playerid] = 1;
	    ClearAnimations(playerid);
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		C4X[playerid] = x;
		C4Y[playerid] = y;
		C4Z[playerid] = z;
		C4Object[playerid] = CreateDynamicObject(1654, x, y, z - 0.8, 90, 90, 90);
		C4Text[playerid] = CreateDynamic3DTextLabel("C4 Robbanószer", 0xAA000033, x, y, z, 5.0);
		Streamer_Update(playerid);
		Msg(playerid, "C4 felszerelve! Robbantás: (/C4 robbant)");
		Cselekves(playerid, "felszerelt egy C4-et...");
		return 1;
	}
	else
	{
		C4Lerakva[playerid] = 1;
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		C4X[playerid] = x;
		C4Y[playerid] = y;
		C4Z[playerid] = z;
	    Msg(playerid, "C4 felszerelve a kocsiba! Robbantás: (/C4 robbant)");
		Cselekves(playerid, "felszerelt egy C4-et a kocsiba...");
		return 1;
	}
}

fpublic PrepareKarting()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 9;
				SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
				SendClientMessage(i, COLOR_YELLOW, "Kart Race will start in 20 seconds, go to the starting line.");
	        }
		}
	}
	SetTimer("StartKarting", 20000, 0);
	return 1;
}

fpublic StartKarting()
{
	KartingRound = 1;
	StartingKartRound = 0;
	EndingKartRound = 0;
	FirstKartWinner = 999;
	SecondKartWinner = 999;
	ThirdKartWinner = 999;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 10;
	            SendClientMessage(i, COLOR_YELLOW, "Green light, go go go !");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	            SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
	        }
	    }
	}
	SetTimer("KartingEnded", 240000, 0);
	return 1;
}

fpublic KartingEnded()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 0;
	            DisablePlayerCheckpoint(i);
	        }
		}
	}
	AnnouncedKartRound = 0;
    KartingRound = 0;
	return 1;
}

fpublic DollahScoreUpdate()
{
	new score;
	foreach(Jatekosok, i)
	{
		if(ASzint[i] == NINCS)
		{
			score = PlayerInfo[i][pLevel];
			SetPlayerScore(i, score);
		}
	}
	return 1;
}

/*stock udb_hash(buf[])
{
	new length=strlen(buf);
	new s1 = 1;
	new s2 = 0;
	new n;
	for (n=0; n<length; n++)
	{
		s1 = (s1 + buf[n]) % 65521;
		s2 = (s2 + s1)     % 65521;
	}
	return (s2 << 16) + s1;
}*/

fpublic Encrypt(string[])
{
	for(new x=0; x < strlen(string); x++)
	{
		string[x] += (3^x) * (x % 15);
		if(string[x] > (0xff))
			string[x] -= 256;
	}
	return 1;
}

stock NumLines(fname[])
{
	new
		File:fHnd = fopen(fname, io_read),
		lines = 0;
	if (fHnd)
	{
		new
			buffer[256]; // Size of the likely longest line / 4
		while (fread(fHnd, buffer, .pack = true))
		{
			lines++;
		}
	}
	return lines;
}

//------------------------------------------------------------------------------------------------------

stock PoliceAlosztalyKocsiVanJoga(playerid, vehicleid)
{
	if(!PoliceAlosztalyban(playerid)) return 0;
	
	new kocsifrakcio = NINCS, id = NINCS;
	
	kocsifrakcio = IsFrakcioKocsi(vehicleid);
	
	if(kocsifrakcio != NINCS) id = FrakcioKocsiID(vehicleid, kocsifrakcio);
	else return 0;
	
	if(id == NINCS) return 0;
	
	id+=1;
			
	if(kocsifrakcio != FRAKCIO_SFPD) return 0;
	
	//SendFormatMessage(playerid, COLOR_RED, "FrakcioKocsiID = %d", id);
	
	for(new i=0; i<MAX_FRAKCIO_SKIN; i++)
	{
		if(PlayerInfo[playerid][pPoliceAlosztaly][0] > 0)
		{
			if(PoliceKocsik[0][i] == id)
			{
				//SendFormatMessage(playerid, COLOR_RED, "PoliceKocsik[0][%d] == %d", i, id);
				return 1;
			}
		}
		
		if(PlayerInfo[playerid][pPoliceAlosztaly][1] > 0)
		{
			if(PoliceKocsik[1][i] == id)
			{
				//SendFormatMessage(playerid, COLOR_RED, "PoliceKocsik[1][%d] == %d", i, id);
				return 1;
			}
		}
		
		if(PlayerInfo[playerid][pPoliceAlosztaly][2] > 0)
		{
			if(PoliceKocsik[2][i] == id)
			{
				//SendFormatMessage(playerid, COLOR_RED, "PoliceKocsik[2][%d] == %d", i, id);
				return 1;
			}
		}
		
	}
	
	return 0;
}
stock PoliceAlosztalyKocsi(vehicleid)
{
	new kocsifrakcio = NINCS, id = NINCS;
	
	kocsifrakcio = IsFrakcioKocsi(vehicleid);
	
	if(kocsifrakcio != NINCS) id = FrakcioKocsiID(vehicleid, kocsifrakcio);
	else return 0;
			
	if(id == NINCS) return 0;
	
	id+=1;
			
	if(kocsifrakcio != FRAKCIO_SFPD) return 0;
	
	for(new i=0; i<MAX_FRAKCIO_SKIN; i++)
	{
		if(PoliceKocsik[0][i] == id)
		{
			return 1;
		}
		if(PoliceKocsik[1][i] == id)
		{
			return 1;
		}
		if(PoliceKocsik[2][i] == id)
		{
			return 1;
		}
	}
	
	return 0;
}

stock RadioElotagPD(playerid)
{
	new bool:talalt = false;
	new elotag[32];
	if(IsPlayerInAnyVehicle(playerid))
	{
		new kocsifrakcio = NINCS;
				
		new vehicleid = GetPlayerVehicleID(playerid);
	
		kocsifrakcio = IsFrakcioKocsi(vehicleid);
			
		if(kocsifrakcio == PlayerInfo[playerid][pMember] && IsValidVehicle(vehicleid) && PlayerInfo[playerid][pPoliceAlosztalyFo] <= 0)
		{
			new vehiclemodel[128];
			format(vehiclemodel, sizeof(vehiclemodel), "%s", GetVehicleModelName(GetVehicleModel(vehicleid)-400));
			if(LMT(playerid, FRAKCIO_SFPD)) format(elotag, sizeof(elotag), "SF-%s%d", GetSingleChar(vehiclemodel, 0), vehicleid);
			if(LMT(playerid, FRAKCIO_SCPD)) format(elotag, sizeof(elotag), "LS-%s%d", GetSingleChar(vehiclemodel, 0), vehicleid);
			talalt = true;
		}
		else if(kocsifrakcio == PlayerInfo[playerid][pMember] && IsValidVehicle(vehicleid) && PlayerInfo[playerid][pPoliceAlosztalyFo] > 0)
		{
			switch(PlayerInfo[playerid][pPoliceAlosztalyFo])
			{
				case 1: format(elotag, sizeof(elotag), "SF-M%d", vehicleid);
				case 2: format(elotag, sizeof(elotag), "SF-BM%d", vehicleid);
				case 3: format(elotag, sizeof(elotag), "SF-B%d", vehicleid);
			}
			talalt = true;
		}
						
	}
			
	if(!talalt)
	{
		if(LMT(playerid, FRAKCIO_SFPD)) format(elotag, sizeof(elotag), "SF");
		if(LMT(playerid, FRAKCIO_SCPD)) format(elotag, sizeof(elotag), "LS");
	}
	
	return elotag;
}
fpublic JatekosBeszallas(playerid, vehicleid)
{
	if(Lefoglalt[playerid]) return 1;

	new Float:x, Float:y, Float:z, nemnekivalo = 0;
	GetPlayerPos(playerid, x, y, z);

	new kocsifrakcio = IsFrakcioKocsi(vehicleid), id = NINCS;
	
	if(kocsifrakcio != NINCS) id = FrakcioKocsiID(vehicleid, kocsifrakcio);
	
	if(kocsifrakcio != NINCS && id != NINCS && (kocsifrakcio != PlayerInfo[playerid][pMember] || PlayerInfo[playerid][pRank] < FrakcioKocsi[kocsifrakcio][ id ][fRang]) &&
		(kocsifrakcio != 16 || kocsifrakcio == 16 && Vizsgafajta[playerid] == 0))
	{
		Msg(playerid, "Ebbe a jármûbe nem szállhatsz be");
		if(!IsScripter(playerid)) nemnekivalo = 1;
	}
	
	if(id != NINCS && kocsifrakcio == PlayerInfo[playerid][pMember] && kocsifrakcio == FRAKCIO_SFPD)
	{
		if(!PoliceAlosztalyKocsiVanJoga(playerid, vehicleid) && PoliceAlosztalyKocsi(vehicleid))
		{
			Msg(playerid, "Ebbe a jármûbe nem szállhatsz be");
			if(!IsScripter(playerid)) nemnekivalo = 1;
		}
	}
	
	if(IsAAdminKocsi(vehicleid) && !Admin(playerid,1) && !RoncsDerby[playerid][rdVersenyez]) Msg(playerid, "Ez admin jármû, nem használhatod"), nemnekivalo=1;
	 
	new munka = IsMunkaKocsi(vehicleid);

	if(munka == MUNKA_ONKENTES)
	{
		if(PlayerInfo[playerid][pOnkentes] < 1)
		{
			Msg(playerid, "Nem vagy önkéntes!");
			nemnekivalo = 1;
		}
	}
	if(munka == MUNKA_SSS)
	{
		if(PlayerInfo[playerid][pSSS] < 1)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy SSS tag!");
			nemnekivalo = 1;
		}
	
	}
	
	if(munka == MUNKA_FAVAGO)
	{
	    if(!AMT(playerid, MUNKA_FAVAGO))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy Favágó!");
			nemnekivalo = 1;
		}
	}
	if(munka == MUNKA_HULLA)
	{
	    if(!AMT(playerid, MUNKA_HULLA))
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy Hullaszállító!");
			nemnekivalo = 1;
		}
	}
	if(munka == MUNKA_SWAT)
	{
	    if(PlayerInfo[playerid][pSwattag] != 1)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ez SWAT jármû, csak SWAT tagok használhatják!");
			nemnekivalo = 1;
		}
	}
	if(munka == MUNKA_UTTISZTITO)
	{
		if(!AMT(playerid, MUNKA_UTTISZTITO) && PlayerInfo[playerid][pKozmunka] != MUNKA_UTTISZTITO)
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy úttisztító!");
			nemnekivalo = 1;
		}
	}
	if(munka == MUNKA_KAMIONOS)
	{
		if(!AMT(playerid, MUNKA_KAMIONOS))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy kamionsofõr!");
			nemnekivalo = 1;
		}
	}
    if(munka == MUNKA_FARMER)
	{
		if(!AMT(playerid, MUNKA_FARMER))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy farmer!");
			nemnekivalo = 1;
		}
	}
	if(munka == MUNKA_SZERELO)
	{
		if(PlayerInfo[playerid][pSzerelo] < 1)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Ez szerelõ kocsi, csak szerelõk használhatják!");
			nemnekivalo = 1;
		}
	}
	if(munka == MUNKA_FUNYIRO)
	{
		if(!AMT(playerid, MUNKA_FUNYIRO) && PlayerInfo[playerid][pKozmunka] != MUNKA_FUNYIRO)
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy fûnyírós!");
			nemnekivalo = 1;
		}
	}
	if(munka == MUNKA_KUKAS)
	{
		if(!AMT(playerid, MUNKA_KUKAS))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy kukás!");
			nemnekivalo = 1;
		}
	}
	if(munka == MUNKA_BUS)
	{
		if(!AMT(playerid, MUNKA_BUS))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy busz sofõr!");
			nemnekivalo = 1;
		}
	}
	if(munka == MUNKA_PILOTA)
	{
		if(!AMT(playerid, MUNKA_PILOTA))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy pilóta!");
			nemnekivalo = 1;
		}
	}
	if(munka == MUNKA_BANYASZ)
	{
		if(!AMT(playerid, MUNKA_BANYASZ))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy bányász!");
			nemnekivalo = 1;
		}
	}
	if(munka == MUNKA_VILLANYSZERELO)
	{
		if(!AMT(playerid, MUNKA_VILLANYSZERELO))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy villanyszerelõ!");
			nemnekivalo = 1;
		}
	}
	if(nemnekivalo == 1)
	{
	    RemovePlayerFromVehicle(playerid);
		if(IsAMotor(vehicleid))
			ResetPlayerPos(playerid);
		return 0;
	}

	return 1;
}

fpublic OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(IsPlayerNPC(playerid)) return 1;
	
	seo_carEntering[playerid] = 15;
	
	new model = GetVehicleModel( vehicleid );
	
	if(PajzsNala[playerid] == true)
	{
		ResetPlayerPos(playerid);
		Msg(playerid, "Elõbb rakd el a pajzsot");
		return 1;
	}
	if(!ispassenger && (model == 444 || model == 556 || model == 557) && PlayerInfo[playerid][pAdmin] < 1 )
	{
		ResetPlayerPos( playerid );
		Msg(playerid, "Adminjármûbe nem szállhatsz be");
		return 1;
	}
	
	if(!ispassenger)
	{
		if(!IsPlayerNPC(playerid) && NPCKocsi[vehicleid])
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);
			Msg(playerid, "Ebbe ne szállj be!");
			return 1;
		}
		new VanVezeto = -1;
		foreach(Jatekosok, jatekos)
		{
			if(IsPlayerInVehicle(jatekos, vehicleid))
			{
				if(GetPlayerState(jatekos) == 2)
				{
					VanVezeto = jatekos;
					break;
				}
			}
		}
		if(VanVezeto != -1)
		{
			new Float:x, Float:y, Float:z;
			ClearAnimations(playerid);
			TogglePlayerControllable(VanVezeto, true);
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, (z+1));

			LopasProbalkozas[playerid]++;
			if(LopasProbalkozas[playerid] < 5)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "ClassRPG: Ez nonos kocsilopás! Használd a /kiszed parancsot!");
			}
		/*	else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "ClassRPG: Mondtam, hogy jailt kapsz!");
				Jail(playerid, "+", 300, "ajail", "Nonos kocsilopás");
				LopasProbalkozas[playerid] = 0;
			}*/
			return 0;
		}
	}
	if(Animban[playerid])
	{
		new Float:x, Float:y, Float:z;
		ClearAnimations(playerid);
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, (z+1));
		Msg(playerid, "Ne vezess animban!!");
	}
	if(JatekosZsak[playerid] >= 0)
	{
		Msg(playerid, "Zsák van a hátadon, elõbb tedd be a jármûbe!");
		ClearAnimations(playerid);
		return true;
	}
	if(VanSzemetNala[playerid])
	{
		Msg(playerid, "Szemetes zsák van nálad, elõbb tedd le azt, vagy tedd be a szemeteskocsi tartályába!");
		ResetPlayerPos(playerid);
	}
	if(PlayerInfo[playerid][pKiesetKocsi] > UnixTime)
	{
		Msg(playerid, "Most repültél ki a kocsiból! Várj egy kicsit!");
		ClearAnimations(playerid);
		return 1;
	}
	if(ov[playerid] == 0)
	{
		if(Bikes(vehicleid)) 
			Msg(playerid, "Nincs rajtad bukósisak, felvevéséhez írd be: ('/sisak')");
		else
			Msg(playerid, "Az öved nincs becsatolva, becsatoláshoz írd be: ('/öv')");
	}
	if(NPCKocsi[vehicleid])
	{
		new money;
		money = GetMoney(playerid);
		if(PlayerInfo[playerid][pJegy] == 1)
		{
			Cselekves(playerid, "Érvényesítette a jegyét.");
			return 1;
		}
		else if(PlayerInfo[playerid][pJegy] > UnixTime)
		{
			Cselekves(playerid, "Felmutatta a bérletét.");
			return 1;
		}
		if(money >= 1500)
		{
			GiveMoney(playerid, -1500);
			SendClientMessage(playerid, COLOR_RED, " 1500 forintot fizettél a busz jegyért");
			Cselekves(playerid, "vett egy jegyet.");
			return 1;
		}
		else
		{
			new Float:x, Float:y, Float:z;
			ClearAnimations(playerid);
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);
			SendClientMessage(playerid, COLOR_RED, " Nincs jegyed és bérleted. 1500 forint a buszjegy a buszon. Ezért nem utazhatsz!");
			return 1;
		}
	}
	
	new Veh = GetVehicleModel(vehicleid);
	
	if(Taxi[playerid][tDuty] && (Veh == 420 || Veh == 438))
	{
		new taxiszoveg[64];
		format(taxiszoveg, 64, "Taxisofõr SZABAD\nViteldíj: %d Ft / KM",FrakcioInfo[FRAKCIO_TAXI][fDij]);
		
		if(IsValidDynamic3DTextLabel(TAXITEXT[vehicleid])) DestroyDynamic3DTextLabel(TAXITEXT[vehicleid]), TAXITEXT[vehicleid]=INVALID_3D_TEXT_ID;
		TAXITEXT[vehicleid] = CreateDynamic3DTextLabel(taxiszoveg, COLOR_GREEN_TAXI, 0.0, 0.0, 2.0, 20.0, INVALID_PLAYER_ID, vehicleid, 1);
	}
	else if(Taxi[playerid][tDuty])
		RemovePlayerFromVehicle(playerid);
		
	if(IsKocsi(GetPlayerVehicleID(playerid), "Villanyszerelo") && vmunk[playerid] && GetVehicleModel(GetPlayerVehicleID(playerid)) == 552)
	{
		Msg(playerid, "Vissza szálltál a kocsiba! Menj és folytasd a munkád!", false, COLOR_GREEN);
		return 1;
	}
	
	return 1;
}

fpublic IsAnInstructor(playerid)
{
	if(LMT(playerid, FRAKCIO_OKTATO)) return 1;
	return 0;
}

fpublic IsAMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==5 || member==6 || member==8 || member==11|| member==12|| member==13|| leader==3)
		{
		    return 1;
		}
		if(leader==5 || leader==6 || leader==8 || leader==11|| leader==12|| leader==13|| leader==3)
		{
		    return 1;
		}
	}
	return 0;
}

/*fpublic IsACop(playerid)
{
	if(LMT(playerid, FRAKCIO_SCPD) || LMT(playerid, FRAKCIO_FBI) || LMT(playerid, FRAKCIO_SFPD) || LMT(playerid, FRAKCIO_NAV))
		return 1;
		
	return 0;
}*/

fpublic IsHitman(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pHitman] > 0)
		    return 1;
	}
	return 0;
}
fpublic IsDirector(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pHitman] == 2)
		    return 1;
	}
	return 0;
}

fpublic IsAdminDuty(playerid)
{
	if(Admin(playerid, 1) && (AdminDuty[playerid] || ScripterDuty[playerid]))
		return true;
	
	return false;
}
/*public IsAdmin(playerid)
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	    return 1;
	else
		return 0;
}*/

fpublic IsAS(playerid)
{
	if(PlayerInfo[playerid][pAS] >UnixTime || PlayerInfo[playerid][pAS] == NINCS)
	    return 1;
	else
		return 0;
}

stock Admin(playerid, szint = 1, maxszint = NINCS)
{
	if(maxszint == NINCS && PlayerInfo[playerid][pAdmin] >= szint || maxszint == 0 && PlayerInfo[playerid][pAdmin] == szint || PlayerInfo[playerid][pAdmin] >= szint && PlayerInfo[playerid][pAdmin] <= maxszint || IsJim(playerid) || IsTerno(playerid) || IsAllDenaro(playerid) && szint != 5555 || IsScripter(playerid))
	   return 1;
	else
		return 0;
}
stock IsKocsi(carid, tipus[])
{
	if(carid <= 0) return 0;

	new munka = IsMunkaKocsi(carid);
	
	if(egyezik(tipus, "Uttisztito"))
	{
		if(munka == MUNKA_UTTISZTITO)
			return 1;
	}
	else if(egyezik(tipus, "Prod"))
	{
		if(munka == MUNKA_BARKI && GetVehicleModel(carid) == 499)
			return 1;
	}
	else if(egyezik(tipus, "Kamion"))
	{
		if(munka == MUNKA_KAMIONOS)
			return 1;
	}
	else if(egyezik(tipus, "Gokart"))
	{
		if(munka == MUNKA_BARKI && GetVehicleModel(carid) == 571)
			return 1;
	}
	else if(egyezik(tipus, "Farmer"))
	{
		if(munka == MUNKA_FARMER)
			return 1;
	}
    else if(egyezik(tipus, "Funyiro"))
	{
		if(munka == MUNKA_FUNYIRO)
			return 1;
	}
	else if(egyezik(tipus, "Kukas"))
	{
		if(munka == MUNKA_KUKAS)
			return 1;
	}
	else if(egyezik(tipus, "Szerelo"))
	{
		if(munka == MUNKA_SZERELO)
			return 1;
	}
	else if(egyezik(tipus, "Busz"))
	{
		if(munka == MUNKA_BUS)
			return 1;
	}
	else if(egyezik(tipus, "Taxi"))
	{
		if(munka == MUNKA_TAXI)
			return 1;
	}
	else if(egyezik(tipus, "Favago"))
	{
		if(munka == MUNKA_FAVAGO)
			return 1;
	}
	else if(egyezik(tipus, "Hulla"))
	{
		if(munka == MUNKA_HULLA)
			return 1;
	}

    else if(egyezik(tipus, "Szabad"))
	{
		if(munka == MUNKA_BARKI)
			return 1;
	}
	else if(egyezik(tipus, "Pilota"))
	{
		if(munka == MUNKA_PILOTA)
			return 1;
	}
	else if(egyezik(tipus, "Banyasz"))
	{
		if(munka == MUNKA_BANYASZ && GetVehicleModel(carid) == 554)
			return 1;
	}
	else if(egyezik(tipus, "Villanyszerelo"))
	{
		if(munka == MUNKA_VILLANYSZERELO && (GetVehicleModel(carid) == 578 || GetVehicleModel(carid) == 552))
			return 1;
	}
	
	return 0;
}

stock IsAAdminKocsi(carid)
{
	new model = GetVehicleModel(carid);
	if(model < 400 || model > 611)
	return 1;

	new model2 = model - 400;
	if(JarmuAra[model2][jFrakciok][0] == NINCS || !JarmuAra[model2][jVeheto])
		return 1;
		
	return 0;
}

stock IsAVsKocsi(kocsi)
{
	new x;
	for(x = 0; x < MAXVSKOCSI; x++)
	{
	    if(CarInfo[x][Van] == 1)
	    {
	        if(CarInfo[x][cId] == kocsi)
		        return x;
	    }
	}
	
	return -1;
}

fpublic IsAtDealership(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(20.0, playerid, 1078.572753, -1756.450561, 16.768434))
			return 1;
	}
	return 0;
}

fpublic IsAtClothShop(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(40.0,playerid,207.5627,-103.7291,1005.2578) || PlayerToPoint(40.0,playerid,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
		    return 1;
		}
		else if(PlayerToPoint(40.0,playerid,214.4470,-7.6471,1001.2109) || PlayerToPoint(50.0,playerid,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
		    return 1;
		}
		else if(PlayerToPoint(15, playerid, 215.0768,-155.5955,1000.5234)) // Új skinválasztó hely
			return 1;
	}
	return 0;
}

fpublic IsAtGasStation(playerid)
{
	for(new b = 0; b < MAX_BENZINKUT; b++)
	{
		if(PlayerToPoint(BenzinKutak[b][bTav], playerid, BenzinKutak[b][bPosX], BenzinKutak[b][bPosY], BenzinKutak[b][bPosZ]))
		{
			return b;
		}
	}
	
	return NINCS;
}

fpublic IsAtFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(1.0,playerid,403.8266,-2088.7598,7.8359) || PlayerToPoint(1.0,playerid,398.7553,-2088.7490,7.8359))
		{//LS Legális Horgászhely #1
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,396.2197,-2088.6692,7.8359) || PlayerToPoint(1.0,playerid,391.1094,-2088.7976,7.8359))
		{//LS Legális Horgászhely #2
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,383.4157,-2088.7849,7.8359) || PlayerToPoint(1.0,playerid,374.9598,-2088.7979,7.8359))
		{//LS Legális Horgászhely #3
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,369.8107,-2088.7927,7.8359) || PlayerToPoint(1.0,playerid,367.3637,-2088.7925,7.8359))
		{//LS Legális Horgászhely #4
		    return 1;
		}
		else if(PlayerToPoint(1.0,playerid,362.2244,-2088.7981,7.8359) || PlayerToPoint(1.0,playerid,354.5382,-2088.7979,7.8359))
		{//LS Legális Horgászhely #5
		    return 1;
		}
		else if(PlayerToPoint(5.0,playerid,-2894.4326,1251.7067,7.1016))
		{//SF Legális Horgászhely #1
			return 1;
		}
		else if(PlayerToPoint(5.0,playerid,1628.0471,575.4127,1.7578))
		{//LV Legális Horgászhely #1
			return 1;
		}
	}
	return 0;
}
fpublic IsAtCookPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(3.0,playerid,369.9786,-4.0798,1001.8589))
	    {//Cluckin Bell
	        return 1;
	    }
	    else if(PlayerToPoint(3.0,playerid,376.4466,-60.9574,1001.5078) || PlayerToPoint(3.0,playerid,378.1215,-57.4928,1001.5078))
		{//Burgershot
		    return 1;
		}
		else if(PlayerToPoint(3.0,playerid,374.1185,-113.6361,1001.4922) || PlayerToPoint(3.0,playerid,377.7971,-113.7668,1001.4922))
		{//Well Stacked Pizza
		    return 1;
		}
	}
	return 0;
}

fpublic IsAtBar(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(4.0,playerid,495.7801,-76.0305,998.7578) || PlayerToPoint(10.0,playerid,-229.143188, 1401.401611, 27.765625) ||
		PlayerToPoint(4.0,playerid,499.9654,-20.2515,1000.6797) || PlayerToPoint(4.0,playerid, -1985.5898,321.0883,35.3359) || PlayerToPoint(7.0,playerid,1257.7136,-791.0314,1084.0078))
		{//In grove street bar (with girlfriend), and in Havanna, mafi hq
		    return 1;
		}
		else if(PlayerToPoint(4.0,playerid,1215.9480,-13.3519,1000.9219) || PlayerToPoint(10.0,playerid,-2658.9749,1407.4136,906.2734))
		{//PIG Pen
		    return 1;
		}
		else if(PlayerToPoint(10.0, playerid, 580.756, -4347.130, 6.355)) // csárli sziget
			return 1;
		else if(PlayerToPoint(10.0, playerid, 2029.9584,-1833.9828,13.5532)) // turkey étterem
			return 1;
		else if(PlayerToPoint(10.0, playerid, 170.904, 139.826, 3.270)) // William drink
			return 1;
		else if(PlayerToPoint(10.0, playerid, 2457.4233,-950.5443,80.0733))  //Vagos drink
			return 1;
		else if(PlayerToPoint(10.0, playerid, -1348.0750,-277.0186,14.6797))  //Önkori drink
			return 1;	
		else if(PlayerToPoint(10.0, playerid, -1640.17, -2238.81, 31.01))
			return 1;
		else if(PlayerToPoint(10.0, playerid,-224.8074,1406.1986,27.7734)) //VLA drink
			return 1;
		else if(PlayerToPoint(10.0, playerid, 1448.3390,1594.5601,15.3363)) // Aztecas drink
			return 1;
		else if(PlayerToPoint(10.0, playerid, -1968.4196,684.7263,46.5683)) // yakuza sf drink
			return 1;
		else if(PlayerToPoint(10.0, playerid, 2217.834,1591.706,999.984)) // Yakuza drink 2
			return 1;
		else if(PlayerToPoint(10.0, playerid, 1836.15674, -2431.90747, 12.84000)) // SoA Drink
			return 1;
	}		
	return 0;
}
fpublic IsADieseles(carid)
{
	new model = GetVehicleModel(carid);
	for(new u = 0; u < sizeof(Dieseles_Kocsik); u++)
	{
		if(Dieseles_Kocsik[u] == model)
			return 1;
	}
	return 0;
}

fpublic IsABenzines(carid)
{
	new model = GetVehicleModel(carid);
	for(new u = 0; u < sizeof(Benzines_Kocsik); u++)
	{
		if(Benzines_Kocsik[u] == model)
			return 1;
	}
	return 0;
}

fpublic IsAKerozinos(carid)
{
	new model = GetVehicleModel(carid);
	for(new u = 0; u < sizeof(Repcsik); u++)
	{
		if(Repcsik[u] == model)
			return 1;
	}
	return 0;
}
stock IsABicikli(carid, bool:modelre = true)
{
	new model;
	if(modelre)
		model = GetVehicleModel(carid);
	else
		model = carid;
		
	new biciklik[3] = {481, 509, 510};
	for(new u = 0; u < sizeof(biciklik); u++)
	{
		if(biciklik[u] == model)
			return 1;
	}
	return 0;
}
stock IsABoat(carid, bool:modelre = true)
{
	new model;
	if(modelre)
		model = GetVehicleModel(carid);
	else
		model = carid;
		
	new hajok[10] = {430, 446, 452, 453, 454, 472, 473, 484, 493, 595};
	for(new u = 0; u < sizeof(hajok); u++)
	{
		if(hajok[u] == model)
			return 1;
	}
	return 0;
}

fpublic IsAPlane(carid)
{
	new model = GetVehicleModel(carid);
	for(new u = 0; u < sizeof(Repcsik); u++)
	{
		if(Repcsik[u] == model)
			return 1;
	}
	return 0;
}
fpublic LakoKocsik(carid)
{
	new model = GetVehicleModel(carid);
	new lako[2] = {483, 508};
	for(new u = 0; u < sizeof(lako); u++)
	{
		if(lako[u] == model)
			return 1;
	}
	return 0;
}
fpublic Bikes(carid)
{
	new model = GetVehicleModel(carid);
	new bikes[14] = {448, 461, 471, 462, 463, 468, 521, 522, 581, 586, 481, 509, 510, 523};
	for(new u = 0; u < sizeof(bikes); u++)
	{
		if(bikes[u] == model)
			return 1;
	}
	return 0;
}

fpublic IsAMotor(carid)
{
	new model = GetVehicleModel(carid);
	new bikes[13] = {448, 461, 471, 462, 463, 468, 521, 522, 581, 586, 523};
	for(new u = 0; u < sizeof(bikes); u++)
	{
		if(bikes[u] == model)
			return 1;
	}
	return 0;
}
stock CarMunkaTilt(model)
{

	if(IsARepulo(model,false) || IsABicikli(model,false) || IsAPlato(model,false))
		return 1;
	
	new tilt[19] ={596,597,598,599,601,571,572,544,531,530,523,470,432,427,416,407,490,435,450};
	for(new u = 0; u < sizeof(tilt); u++)
	{
		if(tilt[u] == model)
			return 1;
	}
	

	return 0;
}
stock RoncsDerbiTilt(model)
{

	new biciklik[3] = {481, 509, 510};
	for(new u = 0; u < sizeof(biciklik); u++)
	{
		if(biciklik[u] == model)
			return 1;
	}
	new egyeb[12] = {606, 607, 608, 610, 611, 441, 464, 465, 594, 528, 601, 407};
	for(new u = 0; u < sizeof(egyeb); u++)
	{
		if(egyeb[u] == model)
			return 1;
	}
	for(new u = 0; u < sizeof(Repcsik); u++)
	{
		if(Repcsik[u] == model)
			return 1;
	}
	new hajok[12] = {430, 446, 452, 453, 454, 472, 473, 484, 493, 595, 432, 564};
	for(new u = 0; u < sizeof(hajok); u++)
	{
		if(hajok[u] == model)
			return 1;
	}
	new bikes[13] = {448, 461, 471, 462, 463, 468, 521, 522, 581, 586, 523};
	for(new u = 0; u < sizeof(bikes); u++)
	{
		if(bikes[u] == model)
			return 1;
	}
	
	return 0;
}

fpublic IsATuzoltoCar(carid)
{
	new f = IsFrakcioKocsi(carid);
	switch(f)
	{
		case 12: return 1;
	}
	return 0;

}
fpublic IsAKatonaCar(carid)
{
	new f = IsFrakcioKocsi(carid);
	switch(f)
	{
		case 13: return 1;
	}
	return 0;
}
fpublic IsACopCar(carid)
{
	new f = IsFrakcioKocsi(carid);
	switch(f)
	{
		case 1, 2, 13, 14, 20: return 1;
	}
	if(IsMunkaKocsi(carid) == MUNKA_SWAT) return 1;
	return 0;
}
fpublic IsAPancelozottKocsi(carid)
{
	if(!IsValidVehicleID(carid))
		return 0;
	
	if((IsMunkaKocsi(carid) == MUNKA_SWAT) && (GetVehicleModel(carid) == 416)) return 1;
	new c = GetVehicleModel(carid);
	switch(c)
	{
		case
			// bónusz - Kliens
			404, // Perennial
			
			425, // Hunter
			427, // Enforcer
			428, // Securicar
			432, // Rhino
			433, // Barracks
			520, // Hydra
			528, // FBI Truck
			548, // Cargobob
			601  // SWAT Tank
		:
		return 1;
	}
	return 0;
}
stock bool:EzzelShockolhat(carid)
{
    if(IsABoat(carid) || IsABicikli(carid)) return false;
    new model = GetVehicleModel(carid);
	if(IsAMotor(carid) && (model != 523 && model != 522)) return false;
	new f = IsFrakcioKocsi(carid), oke = false;
	switch(f)
	{
		case 1, 2, 13, 14, 15, 20: oke = true;
	}
	if(IsMunkaKocsi(carid) == MUNKA_SWAT) oke = true;
	if(!oke) return false;
	else return true;
}

fpublic IsAnAmbulance(carid)
{
	if(IsFrakcioKocsi(carid) == 4)
		return 1;
	return 0;
}

stock IsARepulo(carid, bool:modelre=true)
{
	new model;
	if(modelre)
		 model = GetVehicleModel(carid);
	else
		model = carid;
		
	new jarmuvek[20]= {417, 447, 469, 487, 520, 563, 548, 460, 476, 488, 511, 512, 513, 519, 553, 577, 592, 593, 425, 497};
	for(new u = 0; u < sizeof(jarmuvek); u++)
	{
		if(jarmuvek[u] == model)
			return 1;
	}
	return 0;
}
fpublic IsAPRepulo(carid)
{
	new model = GetVehicleModel(carid);
	new jarmuvek[4]= {519, 553, 577, 592};
	for(new u = 0; u < sizeof(jarmuvek); u++)
	{
		if(jarmuvek[u] == model)
			return 1;
	}
	return 0;
}

stock IsATaxi(carid)
{

	new model = GetVehicleModel(carid);
	if(model == 420 || model == 438)
		return 1;
	else
		return 0;

}

fpublic IsATruck(carid)
{
	new model = GetVehicleModel(carid);
	new jarmuvek[10] = {403, 414, 433, 456, 498, 499, 514, 515, 573, 609};
	for(new u = 0; u < sizeof(jarmuvek); u++)
	{
		if(jarmuvek[u] == model)
			return 1;
	}
	return 0;
}

stock IsAPlato(carid, bool:modelre=true)
{
	new model;
	if(modelre)
		 model = GetVehicleModel(carid);
	else
		model = carid;
	new jarmuvek[4] = {435, 450, 591, 584};
	for(new u = 0; u < sizeof(jarmuvek); u++)
	{
		if(jarmuvek[u] == model)
			return 1;
	}
	return 0;
}

stock IsCarupCar(kocsinev[], carupid)
{

	new Carup0[][] = {
		{"Linerunner"},
		{"Dumper"},
		{"Firetruck"},
		{"Trashmaster"},
		{"Pony"},
		{"Mule"},
		{"Leviathan"},
		{"Whoopee"},
		{"Hunter"},
		{"Rhino"},
		{"Barracks"},
		{"Packer"},
		{"Monster0"},
		{"Seasparrow"},
		{"Flatbed"},
		{"Sparrow"},
		{"Dinghy"},
		{"Rustler"},
		{"BMX"},
		{"Dozer"},
		{"Hotring0"},
		{"Sandking"},
		{"HotringA"},
		{"HotringB"},
		{"Bloodring"},
		{"Bike"},
		{"Mountain"},
		{"Tanker"},
		{"Roadtrain"},
		{"Hydra"},
		{"Cement"},
		{"Forklift"},
		{"Tractor"},
		{"Combine"},
		{"Vortex"},
		{"Cargobob"},
		{"Utility"},
		{"MonsterA"},
		{"MonsterB"},
		{"Raindance"},
		{"Kart"},
		{"Mower"},
		{"Dune"},
		{"DFT30"},
		{"Ranger"},
		{"SWAT"}
	};

	new Carup1[][] = {
		{"Caddy"},
		{"Baggage"},
		{"Tug"}
	};

    new Carup2[][] = {
	    {"Faggio"},
		{"Admiral"},
		{"Bravura"},
		{"Cadrona"},
		{"Camper"},
		{"Clover"},
		{"Esperanto"},
		{"Glendale"},
		{"Greenwood"},
		{"Hermes"},
		{"Intruder"},
		{"Majestic"},
		{"Oceanic"},
		{"Perennial"},
		{"Phoenix"},
		{"Picado"},
		{"Premier"},
		{"Previon"},
		{"Primo"},
		{"Regina"},
		{"Sadler"},
		{"Sunrise"},
		{"Tahoma"},
		{"Tampa"},
		{"Walton"}
	};

	new Carup3[][] = {
	    {"BF400"},
		{"Freeway"},
		{"Sanchez"},
		{"Quad"},
		{"Alpha"},
		{"Bandito"},
		{"Blista"},
		{"Bobcat"},
		{"Buccaner"},
		{"Buffalo"},
		{"Burrito"},
		{"Club"},
		{"Elegant"},
		{"Emperor"},
		{"Euros"},
		{"Fortune"},
		{"Journey"},
		{"Landstalker"},
		{"Mesa"},
		{"Nebula"},
		{"Rancher"},
		{"Sabre"},
		{"Solair"},
		{"Stallion"},
		{"Vincent"},
		{"Virgo"},
		{"Washington"},
		{"Willard"},
		{"Yosemite"},
		{"ZR350"}
	};

	new Carup4[][] = {
	    {"FCR900"},
		{"PCJ600"},
		{"Wayfarer"},
		{"Banshee"},
		{"Bullet"},
		{"Cheetah"},
		{"Comet"},
		{"Feltzer"},
		{"Huntley"},
		{"Hustler"},
		{"Infernus"},
		{"Merit"},
		{"Sentinel"},
		{"SuperGT"},
		{"Turismo"},
		{"Windsor"}
	};

	new Carup5[][] = {
	    {"NRG500"},
		{"Hotknife"},
		{"Patriot"},
		{"Stafford"},
		{"Stretch"},
		{"Maverick"}
	};

	new Carup6[][] = {
	    {"Elegy"},
		{"Flash"},
		{"Jester"},
		{"Stratum"},
		{"Sultan"},
		{"Uranus"}
	};

	new Carup7[][] = {
	    {"Blade"},
		{"Broadway"},
		{"Remington"},
		{"Savanna"},
		{"Slamvan"},
		{"Tornado"},
		{"Voodoo"}
	};

	new darab[8];
	darab[0] = 45;
	darab[1] = 3;
	darab[2] = 25;
	darab[3] = 30;
	darab[4] = 16;
	darab[5] = 6;
	darab[6] = 6;
	darab[7] = 7;

	if(carupid == 0)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if(egyezik(Carup0[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 1)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (egyezik(Carup1[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 2)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (egyezik(Carup2[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 3)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (egyezik(Carup3[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 4)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (egyezik(Carup4[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 5)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (egyezik(Carup5[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 6)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (egyezik(Carup6[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 7)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if (egyezik(Carup7[a], kocsinev))
				return 1;
		}
	}

	return 0;
}
stock KikepzobenVan(x)
{
	
	if(GetPlayerVirtualWorld(x) >= 999 && GetPlayerVirtualWorld(x) < MAX_KIKEPZO+1000 || GetPlayerVirtualWorld(x) == 134 && GetPlayerInterior(x) == 10)// kiképzõ
	{
		Kikepzoben[x] = true;
	}
	else
		Kikepzoben[x] = false;
	
	return Kikepzoben[x];
}
stock NagyKezdobetusNev(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;

	new nev[MAX_PLAYER_NAME];
	nev = PlayerNameEx(playerid);

	for(new n = 0; n < strlen(nev); n++)
	{
		if(n == 0 && nev[n] == chrtolower(nev[n]))
			return 0;
		if(nev[n] == '_' && n > 0 && nev[n+1] == chrtolower(nev[n+1]))
			return 0;
		//if(n > 0 && nev[n] != '_' && nev[n-1] != '_' && nev[n] != chrtolower(nev[n])) // Hogy a többi betü kisbetü-e
		//	return 0;
	}

	return 1;
}

stock IsValidName(playerid)
{
    if (IsPlayerConnected(playerid))
    {
        new player[24], alahuzasok = 0;
        GetPlayerName(playerid,player,24);

		new cenzura[3][10] = { "buzi", "kocsog", "hulye" };

		for(new x = 0; x < sizeof(cenzura); x++)
		{
			if(strfind(player, cenzura[x], false) != -1)
				return 0;
		}

        for(new n = 0; n < strlen(player); n++)
        {
        	if(player[n] == ']' || player[n] == '[' || player[n] == '_' && n == 0 || player[n] == '_' && n == (strlen(player) - 1))
				return 0;
        	if(player[n] == '_')
			{
				if(player[n-1] == '_' || player[n+1] == '_')
					return 0;
				else
					alahuzasok++;
			}
        }
        if(alahuzasok < 1 || alahuzasok > 2)
            return 0;
    }
    return 1;
}

stock IsValidNameFromString(string[])
{
	new alahuzasok = 0;
	for(new n = 0; n < strlen(string); n++)
	{
		if (string[n] == '_')
			alahuzasok++;
		if (string[n] == ']' || string[n] == '[')
			return 0;
	}

	if(alahuzasok < 1 || alahuzasok > 2)
		return 0;

    return 1;
}

//------------------------------------------------------------------------------------------------------

stock ValtozoNullazas(playerid) //vnull
{
	removeKalap(playerid);
	
	SkipRealSpawn[playerid] = 0;
	AnimClearBlockedUntil[playerid] = 0;
	CanWakeUpAfter[playerid] = 0;
	
	PlayerInfo[playerid][pSpawnType] = 0;
	PlayerInfo[playerid][pSpawnId] = 0;
	
	PlayerInfo[playerid][pReportCooldown] = 0;
	
	PlayerInfo[playerid][pMentobenvan] = NINCS;
	//PlayerInfo[playerid][pTeleportAlatt] = 0;
	//PlayerInfo[playerid][pCPos_x] = 0;
	//PlayerInfo[playerid][pCPos_y] = 0;
	//PlayerInfo[playerid][pCPos_z] = 0;
	//PlayerInfo[playerid][pCTav] = 0;
	//PlayerInfo[playerid][pCFigyelm] = 0;
	//PlayerInfo[playerid][pCFalsePositive] = 0;
	
	PlayerInfo[playerid][pJogsiTiltIdo] = NINCS;
	//userdata nullázása
	PlayerInfo[playerid][pAdoAuto] = false;
	Taxi[playerid][tDuty] = false;
	PlayerInfo[playerid][pTextdrawszin] = 0; OnDuty[playerid] = NINCS; Onkentesszolgalatban[playerid] = false;
	
	PlayerInfo[playerid][pMarkLevel] = 0;
	PlayerInfo[playerid][pMarkTriggerTime] = 0;
	PlayerInfo[playerid][pMarkMinPlayers] = 0;
	PlayerInfo[playerid][pMarkMinMarkedPlayers] = 0;
	
	//élet szükségletek
	EhsegRelog[playerid] = NINCS; VizeletRelog[playerid] = NINCS; EletRelog[playerid] = NINCS;
	//pilótához
	Repul[playerid] = NINCS;
	PlayerInfo[playerid][pSpecialJogsiKm] = 0.0;
	PilotaMunkaPos[playerid][PilotaX] = NINCS;
	PilotaMunkaPos[playerid][PilotaY] = NINCS;
	PilotaMunkaPos[playerid][PilotaZ] = NINCS;
	PilotaMunkaPos[playerid][PilotaHP] = NINCS;
	PilotaMunkaPos[playerid][PilotaTavolsag] = NINCS;
	PilotaMunkaPos[playerid][PilotaSzorzo] = NINCS;
	PilotaMunkaPos[playerid][PilotaFizetes] = NINCS;
	format(PilotaMunkaPos[playerid][PilotaCel],200,"");
	format(PilotaMunkaPos[playerid][PilotaKezd],200,"");
	//kamion 
	Szallit[playerid] = NINCS;
	KamionStartPoz[playerid][KamX] = NINCS;
	KamionStartPoz[playerid][KamY] = NINCS;
	KamionStartPoz[playerid][KamZ] = NINCS;
	KamionStartPoz[playerid][KamElet] = NINCS;
	KamionStartPoz[playerid][KamTavolsag] = NINCS;
	KamionStartPoz[playerid][KamSzorzo] = NINCS;
	KamionStartPoz[playerid][KamRendszam] = NINCS;
	KamionStartPoz[playerid][KamPotRendszam] = NINCS;
	KamionStartPoz[playerid][KamFizetes] = NINCS;
	BenzintSzallit[playerid] = NINCS;
	kamionrandom[playerid] = NINCS;
	KamionKihagyva[playerid] = NINCS;
	KamionSzoveg[playerid] = "-";
	KamionEgyeb[playerid] = NINCS;
	SSSTamogatas[playerid] = NINCS;

	// Premium
	PremiumInfo[playerid][pKamat]= NINCS;
	PremiumInfo[playerid][pKamatIdo]= NINCS;
	PremiumInfo[playerid][pAdo]= NINCS;
	PremiumInfo[playerid][pAdoIdo]= NINCS;

	//mdc
	format(PlayerCrime[playerid][pVad],32,"");
	format(PlayerCrime[playerid][pJelento],32,"");
	WantedLevel[playerid] = NINCS;
	
	//jogosítvány
	VizsgaRacePoint[playerid][0]= NINCS;
	VizsgaRacePoint[playerid][1]= NINCS;
	VizsgaRacePoint[playerid][2]= NINCS;
	Hajocp[playerid]= NINCS;
	Autocp[playerid]= NINCS;
	Adrcp[playerid]= NINCS;
	Kamioncp[playerid]= NINCS;
	Helicp[playerid]= NINCS;
	Repulocp[playerid]= NINCS;
	Jogsineki[playerid]= NINCS;
	Oktato[playerid]= NINCS;
	Oktat[playerid]= NINCS;
	Vizsgafajta[playerid]= NINCS;
	
	//PB Fegyerek
	PlayerInfo[playerid][pPBFegyver][0] = WEAPON_DEAGLE;
	PlayerInfo[playerid][pPBFegyver][1] = WEAPON_MP5;
	PlayerInfo[playerid][pPBFegyver][2] = WEAPON_COMBAT;
	PlayerInfo[playerid][pPBFegyver][3] = WEAPON_M4;
	
	//rádió

	NewsRadioHallgatas[playerid] = NINCS;
	
	gInfo[playerid]= NINCS;
	togkill[playerid]= NINCS;
	toghatarok[playerid]= NINCS;
	PlayerInfo[playerid][pOlesIdo]= NINCS;
	PlayerInfo[playerid][pAlakitIdo]= NINCS;
	
	PlayerInfo[playerid][pHitel]= NINCS;PlayerInfo[playerid][pTorleszto]= NINCS;PlayerInfo[playerid][pHitelOra]= NINCS;PlayerInfo[playerid][pHitelHatralek] = NINCS; PlayerInfo[playerid][pZarolva] = false;
	
	gNews[playerid] = NINCS;
	
	PlayerInfo[playerid][pJelzes] = PLAYER_MARKER_DEFAULT_JELZES; PlayerInfo[playerid][pJelzesTerkep] = PLAYER_MARKER_DEFAULT_JELZES_TERKEP;
	ForaglomFigyelmezteto[playerid]= NINCS;
	//munkabenzin
	PInfo(playerid,MunkaBenzin) = NINCS; PInfo(playerid,MunkaAra) = NINCS; PInfo(playerid,MunkaRendszam) = NINCS;
	
	PlayerInfo[playerid][pHackIdo] = NINCS;
	Bankkartya[playerid] = false;

	PlayerInfo[playerid][plecsukta] = NINCS;

	PlayerInfo[playerid][pTojas] = NINCS;
	//PlayerInfo[playerid][pMikulasSapka] = NINCS; PlayerInfo[playerid][pMikulasCsomag] = NINCS; PlayerInfo[playerid][pVirgacs] = NINCS;
	
	PlayerInfo[playerid][pAjandekUnixtime] = NINCS; PlayerInfo[playerid][pAjandek] = NINCS; 
	
	JailTime[playerid] = NINCS; 
	PlayerInfo[playerid][pVadaszEngedely] = NINCS; 
	PlayerInfo[playerid][pPaintballKitiltva] = NINCS; 
	PlayerInfo[playerid][pKulcsok][0] = NINCS; PlayerInfo[playerid][pKulcsok][1] = NINCS; PlayerInfo[playerid][pKulcsok][2] = NINCS;
	PlayerInfo[playerid][pHazKulcsok][0] = NINCS; PlayerInfo[playerid][pHazKulcsok][1] = NINCS; PlayerInfo[playerid][pHazKulcsok][2] = NINCS;
	
	PlayerInfo[playerid][pSMS]=false;
	
	ObjectSzemuveg[playerid][OPosX] = NINCS; ObjectSzemuveg[playerid][OPosY] = NINCS; ObjectSzemuveg[playerid][OPosZ] = NINCS; ObjectSzemuveg[playerid][OPosRX] = NINCS; ObjectSzemuveg[playerid][OPosRY] = NINCS; ObjectSzemuveg[playerid][OPosRZ] = NINCS; 
	
	for(new slot;slot < MAXGOTOMARK;slot++)
	{
		MarkPos[playerid][slot][Markx] = NINCS; MarkPos[playerid][slot][Marky] = NINCS; MarkPos[playerid][slot][Markz] = NINCS; MarkPos[playerid][slot][MarkVW] = NINCS; MarkPos[playerid][slot][MarkINT] = NINCS; 
	}
	PlayerInfo[playerid][pAspirin] = 0;
	PlayerInfo[playerid][pCataflan] = 0;
	
	//vege
	
	AdminDutySkin[playerid] = 0;
	PlayerInfo[playerid][pKiesetKocsi] = NINCS;
	LabTalalat[playerid] = 0; ObjectSzerkeszt[playerid] = NINCS; ObjectSzemuveg[playerid][OSzerkeszt] = false;
	RoncsDerby[playerid][rdVersenyez] = false;
	Health[playerid] = 150; Armour[playerid] = 0; NoDamage[playerid] = 0; DontWriteJustLoggedIn[playerid] = false;
	PreConfigured[ playerid ] = false;
	Havazas[playerid] = true;
	Taxi[playerid][tUtas] = NINCS; PlayerInfo[playerid][pAjandek]=NINCS; PlayerInfo[playerid][pAjandekUnixtime] = NINCS;
	Taxi[playerid][tOKm] = 0.0;
	Taxi[playerid][tHivasok] = 0;
	Taxi[playerid][tOKmValt] = 0.0;
	Taxi[playerid][tHivasokValt] = 0;
	
	TaxiHivasJelzes[playerid] = NINCS;
	Valtozott[playerid] = false;
	//AFKstring[playerid]=NINCS;
	PlayerInfo[playerid][pTaxiDuty] = false;
	PlayerWeaponsReset(playerid);PInfo(playerid,Elajult)=false;
	SzallitPenz[playerid] = NINCS;
	PlayerInfo[playerid][pHitel] = 0;
	PlayerInfo[playerid][pTorleszto] = 0;
	PlayerInfo[playerid][pHitelOra] = 0;
	PlayerInfo[playerid][pHitelHatralek] = 0;
	NPCElott[playerid] = NINCS;
	NPCElottKick[playerid] = NINCS;
	LoginTime{playerid} = 0;
	PlayerMarker[playerid][mType] = 0;
	PlayerMarker[playerid][mTime] = 0;
	PlayerMarker[playerid][mHidden] = 0;
	PlayerPlace[playerid][pHiding] = NINCS;
	PlayerPlace[playerid][pWarArea] = NINCS;
	PremiumInfo[playerid][pKamat] = 0; PremiumInfo[playerid][pKamatIdo] = 0; PremiumInfo[playerid][pAdo] = 0; PremiumInfo[playerid][pAdoIdo] = 0;
	BelepveFake[playerid] = false; PlayerInfo[playerid][pID] = 0; PlayerInfo[playerid][pKredit] = 0;
	PlayerInfo[playerid][pIndexQE] = true; PlayerInfo[playerid][pIndexSzam] = true; UserDataBeallit[playerid] = false;
    NemregiKocsi[playerid] = 0; AText[playerid] = INVALID_3D_TEXT_ID; BText[playerid] = INVALID_3D_TEXT_ID; PlayerInfo[playerid][pVeszHivo] = 0;
	Rabolt[playerid] = 0; BicikliFlood[playerid] = 0; seo_carEntering[playerid] = 0;
	Idojaras[playerid] = NINCS; Crosscp[playerid]=0; ov[playerid]=0; IDK[playerid] = 0; RifleTalalat[playerid] = 0;
	noclipdata[playerid][cameramode] 	= CAMERA_MODE_NONE; SSSDuty[playerid]=NINCS; PlayerInfo[playerid][pEllatva] = false;
	noclipdata[playerid][lrold]	   	 	= 0; 
	noclipdata[playerid][udold]   		= 0; ScripterDuty[playerid]=0;  TogVa[playerid] = 0; LsBankban[playerid]=false; 
	noclipdata[playerid][mode]   		= 0; PlayerInfo[playerid][pAkkuTolto] = 0; PlayerInfo[playerid][pMaszk]=0; PlayerInfo[playerid][pSwatKituntetes] = 0;
	noclipdata[playerid][lastmove]   	= 0; PlayerInfo[playerid][pLaptopChat] = 0;
	PlayerInfo[playerid][pRepSkill] = 0; PlayerInfo[playerid][pHajoSkill] = 0;PlayerInfo[playerid][pAutmotSkill] = 0;
	PlayerInfo[playerid][pKamiSkill] = 0;PlayerInfo[playerid][pFegySkill] = 0;PlayerInfo[playerid][pAdrSkill] = 0; Snevek[playerid]=false;
	noclipdata[playerid][accelmul]   	= 0.0; RepulesEngedely[playerid]=0;Zsebradio[playerid] = 0;CigiFuggo[playerid]=false;
	Baraktiv[playerid] = true; WeaponsAktiv[playerid] = true; HUDAktiv[playerid] = true; togkill[playerid]=true; toghatarok[playerid]=true; Tvenged[playerid]= false; PlayerInfo[playerid][pCrossido]=0; AJFigyelmeztetes[playerid]=false;Oktat[playerid]=0;
	StatInfo[playerid][pID] = NINCS; StatInfo[playerid][pDatum][0] = EOS; StatInfo[playerid][pIdo] = 0; StatInfo[playerid][pOnduty] = 0; StatInfo[playerid][pVA] = 0; StatInfo[playerid][pPM] = 0;
	StatInfo[playerid][pIdoOsszes] = 0; StatInfo[playerid][pOndutyOsszes] = 0;
	Ehseg[playerid] = 0.0; Vizelet[playerid] = 0.0; KincsMutat[playerid] = false; MikulasSapka[playerid] = false; Mechanikus[playerid] = false; Tuzolto[playerid] = false; TuzetOlt[playerid] = false;
	Bankkartya[playerid] = false; Joypad[playerid] = 0;
	Desync[playerid] = 0; MarBelepett[playerid] = false; C4Ido[playerid] = 0; SzereloHiv[playerid]=0;
	GyemantNala[playerid] = NINCS; Gyemantjai[playerid] = 0; CJFutasWarn[playerid] = 0; Pee[playerid] = false; Bejelento[playerid] = false; Anev[playerid]= false;
	Ul[playerid] = false; Ajtozott[playerid] = 0; //OnHitVedelem[playerid] = 0;
	AJSzovegIdo[playerid] = 10; AJSzoveg[playerid] = 0; AJSzovegHiba[playerid] = 0; AJSzovegString[playerid][0] = EOS; Bicikli[playerid] = 0;
	Felberelve[playerid] = NINCS; FelberelveOsszeg[playerid] = NINCS;
	Favago[playerid] = 0;
	Sisak[playerid] = 0; SisakotVesz[playerid] = 0; Posta[playerid] = 0;
	Szajkendo[playerid] = 0; Maszk[playerid] = 0; CallCost[playerid] = NINCS;
	Katonabazis[playerid] = 0; ParancsAjto[playerid] = false; BejelentIdo[playerid] = 0;
	PlayerInfo[playerid][pValaszok] = 0; Valasz[playerid] = 0;PlayerInfo[playerid][pGarazs]=NINCS;
	Erosites[playerid] = false; CsaladBK[playerid] = false; ReportolasIdo[playerid] = 0; RiobanVan{playerid}=0; ZeneVan[playerid]=false;
	Aukciozik[playerid] = false; Harcol[playerid] = false; HarcolTerulet[playerid] = NINCS; AJSzokesek[playerid] = 0; KocsitSokkolt[playerid] = 0;
	Rejtett[playerid] = 0; Ugrasok[playerid] = {0,0,0}; TaxiHivas[playerid] = 0; MentoHivas[playerid] = 0; CallTuz[playerid] = 0;
	Vizsgafajta[playerid] = 0; AnimIdo[playerid] = 0; SzemBekotve[playerid] = 0; SzajBekotve[playerid] = 0; JatekBetoltve[playerid] = false; Licitalt[playerid] = false;
	OvFlood[playerid] = 0; SebessegKorlat[playerid] = 0; Szunet[playerid] = false; SzunetIdo[playerid] = 0; Fbios[playerid] = NINCS; Hazbanvan[playerid] = 0;
	Nyomozott[playerid] = 0; JarmuKulcs[playerid] = NINCS; HazKulcs[playerid] = NINCS; NPC_ID[playerid] = NINCS; PlayerInfo[playerid][pCode][0] = 0;
	Sokkolt[playerid] = 0; Leutott[playerid] = 0; Leutve[playerid] = false; LeutveIdo[playerid] = 0; BelepesIdo[playerid] = 0; TrafiPax[playerid][tAktiv] = false; TrafiPax[playerid][tBuntetheto] = 0; Tankol[playerid][0] = 0; Kilepesek[playerid] = true; Belepesek[playerid] = true; PlayerInfo[playerid][pKliensAktiv] = 0; PlayerInfo[playerid][pKliensIdo] = 0;
	JatekosZsak[playerid] = NINCS; BenzintSzallit[playerid] = false; PlayerOnline[playerid] = true; Szallit[playerid]=0; Repul[playerid]=0; Felleszallas[playerid]=0; SzedKocsi[playerid] = 0; SzedZseb[playerid] = 0;
	HolTart[playerid] = NINCS; Tszin[playerid] = NINCS; Tkerek[playerid] = NINCS; Csere[playerid] = NINCS; MitCsere[playerid] = NINCS; SzefEngedely[playerid] = 0;
	RadioHallgatas[playerid] = NINCS; LezartUtat[playerid] = 0; LezartUtZ[playerid] = 0.000000; LezartUtY[playerid] = 0.000000; LezartUtX[playerid] = 0.000000;
 	KiMergezte[playerid] = NINCS; Mergezve[playerid] = 0; VanSzelvenye[playerid] = 0; talalatok[playerid] = 0;
	PSzam5[playerid] = 0; PSzam6[playerid] = 0; PSzam7[playerid] = 0; PSzam8[playerid] = 0;
	PSzam1[playerid] = 0; PSzam2[playerid] = 0; PSzam3[playerid] = 0; PSzam4[playerid] = 0;
	TudReportolni[playerid] = 0; Locsolas[playerid] = NINCS; Locsolniakar[playerid] = NINCS;
	BViadal[playerid] = 0; Nevek[playerid] = 0; Biztos[playerid] = 0; FbiBelepve[playerid] = 0; Fbicelpont[playerid] = NINCS; 
	PrivatEngedely[playerid] = NINCS; PrivatAr[playerid] = NINCS; PrivatAjanlat[playerid] = NINCS; VizsgaAr[playerid] = 0; VizsgaAjanlat[playerid] = NINCS; C4Kocsiban[playerid] = NINCS; C4Z[playerid] = 0.000000; C4Y[playerid] = 0.000000; C4X[playerid] = 0.000000; C4Lerakva[playerid] = 0; PlayerInfo[playerid][pCodeBanned] = -1;
	CsatlakozottSzamla[playerid] = NINCS; Szondaztat[playerid] = NINCS; KereskedoKocsiCsere[playerid] = NINCS; KereskedoKocsiElad[playerid] = NINCS; KereskedoKocsiVetel[playerid] = NINCS; Rabol[playerid] = 0; PlayerInfo[playerid][pFPSlimiter] = 0; PlayerInfo[playerid][pFPSlimiterWarn] = 0; //Tankol[playerid] = 0;
	Edzik[playerid] = 0; TanultStilus[playerid] = 0; AdasVeteliNeki[playerid] = NINCS; AdasVeteliTipus[playerid] = NINCS; MostLepettBe[playerid] = 1; /*Fegyvere[playerid] = 0;*/
	HitmanDuty[playerid] = 0; HibasBelepes[playerid] = 0; tuningolo[playerid] = 0; 
	reporttiltva[playerid] = 0; FelujitasElfogadas[playerid] = NINCS; RegEngedely[playerid] = 0; RegAdatok[playerid] = 0;
	ElsoSpawn[playerid] = 1; Dialog[playerid] = -1; AFKIdo[playerid] = 0; AdminDuty[playerid] = 0;
	AFK[playerid] = 0; Visz[playerid] = NINCS; HVisz[playerid] = NINCS; Engedely[playerid] = 0; LopasProbalkozas[playerid] = 0; AnimVezetes[playerid] = 0; RioMiki[playerid] = 0; MoriartyMiki[playerid] = 0; RioZeneenged[playerid] = 0; MoriartyZeneenged[playerid] = 0;
	HidePM[playerid] = 0; PhoneOnline[playerid] = false; ReportDuty[playerid] = 0;
	ChosenSkin[playerid] = 0; SkinValasztoban[playerid] = 0; SkinValasztas[playerid] = 0;
	KickPlayer[playerid] = 0; CurrentMoney[playerid] = 0; UsedFind[playerid] = 0;
	CP[playerid] = 0; Robbed[playerid] = 0; Autocp[playerid] = 0; Repulocp[playerid] = 0; Hajocp[playerid] = 0; Kamioncp[playerid] = 0; Adrcp[playerid] = 0;Motorcp[playerid] = 0; Tanulofelpenz[playerid] = 0;
	RobbedTime[playerid] = 0; MoneyMessage[playerid] = 0; Condom[playerid] = 0;
	STDPlayer[playerid] = 0; SexOffer[playerid] = 999; SexPrice[playerid] = 0;
	TalkingLive[playerid] = 255; LiveOffer[playerid] = 999; TakingLesson[playerid] = 0;
	PlayerCuffed[playerid] = 0; PlayerCuffedTime[playerid] = 0;
	RegistrationStep[playerid] = 0; OnCK[playerid] = 999;
	ConnectedToPC[playerid] = 0; HitmanRendeles[playerid] = 0;
	skine[playerid] = 0; fegyvere[playerid] = 0;
	OnDuty[playerid] = 0; Swatduty[playerid] = 0;WantedLevel[playerid] = 0;
	TransportDuty[playerid] = 0; PlayerTied[playerid] = 0;
	BusCallTime[playerid] = 0; TaxiCallTime[playerid] = 0; MedicCallTime[playerid] = 0; MechanicCallTime[playerid] = 0;
	FindTimePoints[playerid] = 0; FindTime[playerid] = 0; JobDuty[playerid] = 0; FarmerDuty[playerid] = 0;
	Mobile[playerid] = 255;
	PlayerDrunk[playerid] = 0;
	Unspec[playerid][sVW] = 0; Unspec[playerid][sINT] = 0; FishCount[playerid] = 0;
 	ConsumingMoney[playerid] = 0;
    gLastCar[playerid] = 0; FirstSpawn[playerid] = 0; gBooc[playerid] = 0; gBoocszidas[playerid] = 0;
	gOoc[playerid] = 0; gNews[playerid] = 0; BigEar[playerid] = false; gDice[playerid] = 0; gFam[playerid] = 0;  /*gReport[playerid] = 0;*/ gInfo[playerid] = 0;
	roadblock[playerid] = 0; block[playerid] = NINCS;
	gPlayerLogged[playerid] = 0;
 	PlayerKarting[playerid] = 0; PlayerInKart[playerid] = 0;
	PlayerStoned[playerid] = 0;
	StartTime[playerid] = 0; TicketOffer[playerid] = 999;
	Drogozott[playerid] = 0; Animban[playerid] = 0; Animbanemrakhato[playerid] = 1; MunkaFelvetel[playerid] = 0;
	NevvaltasiEngedely[playerid] = 0; Skinsel[playerid] = 0; MunkaFolyamatban[playerid] = 0; Adminseged[playerid] = 0; TvEngedely[playerid] = 0;
	Valasz[playerid] = 0;
	TaxiAccepted[playerid] = 999; BusAccepted[playerid] = 999;
	PlayerInfo[playerid][pCash] = 0;
	HireCar[playerid] = NINCS; PlayersChannel[playerid] = 999; SSSinfo[playerid]=0;
	TransportValue[playerid] = 0; TransportMoney[playerid] = 0; TransportTime[playerid] = 0; TransportCost[playerid] = 0; TransportDriver[playerid] = NINCS;
	Locator[playerid] = 0; PlayerOnMission[playerid] = 0; MissionCheckpoint[playerid] = 0;
	Tevezik[playerid] = NINCS; Tevezve[playerid] = NINCS; PlayerPaintballKills[playerid] = 0;
	Fishes[playerid][pLastFish] = 0; Fishes[playerid][pFishID] = 0;
	ProposeOffer[playerid] = 999; MarryWitness[playerid] = 999; MarryWitnessOffer[playerid] = 999; MarriageCeremoney[playerid] = 0; ProposedTo[playerid] = 999; GotProposedBy[playerid] = 999; DivorceOffer[playerid] = 999;
	seo_carFlood[playerid] = 0; seo_carTeleportFlood[playerid] = 0;
	Tiltottszam[playerid] = false;
	PlayerInfo[playerid][pHullaMutat] = false;
 	RendorPajzsIdo[playerid] = 0;
	CellTime[playerid] = NINCS;
	RingTone[playerid] = 0;
	ObjectIDje[playerid][0] = -1;
	ObjectIDje[playerid][1] = -1;
	ObjectIDje[playerid][2] = 0;
	FlyModeBa[playerid] = false;
	PD_Fegyver_Felvett[playerid] = 0;
	KocsiAlakitModel[playerid] = 0;
	KocsiAlakitID[playerid] = NINCS;
	PlayerInfo[playerid][pBSA] = 0;
	PlayerInfo[playerid][pBSADuty] = false;
	PlayerInfo[playerid][pJarmubenUlt] = 0;
	PlayerInfo[playerid][pLevel] = 0;
	PlayerInfo[playerid][pBID] = 0;
	PlayerInfo[playerid][pANyelv] = 0;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pConnectTime] = -1;
	PlayerInfo[playerid][pSex] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pHack] = 0;
	PlayerInfo[playerid][pOrigin] = 0;
	PlayerInfo[playerid][pExp] = 0;
	PlayerInfo[playerid][pAccount] = 0;
	PlayerInfo[playerid][pVontatokotel] = 0;
	PlayerInfo[playerid][pVK] = 0;
	PlayerInfo[playerid][pLaptop] = 0;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pPhoneBook] = 0;
	PlayerInfo[playerid][pLottoNr] = 0;
	PlayerInfo[playerid][pFishes] = 0;
	PlayerInfo[playerid][pBiggestFish] = 0;
	PlayerInfo[playerid][pJob1] = 0;
	PlayerInfo[playerid][pJob2] = 0;
	PlayerInfo[playerid][pPayCheck] = 0;
	PlayerInfo[playerid][pMuted] = 0;
	PlayerInfo[playerid][pHeadValue] = 0;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pMats] = 0;
	PlayerInfo[playerid][pKokain] = 0;
	PlayerInfo[playerid][pHeroin] = 0;
	PlayerInfo[playerid][pMarihuana] = 0;
	PlayerInfo[playerid][pVizsgal] = false;
	PlayerInfo[playerid][pLeader] = 0;
	PlayerInfo[playerid][pMember] = 0;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pSzemuveg] = 0;
	PlayerInfo[playerid][pChar] = 0;
	PlayerInfo[playerid][pDetSkill] = 0;
	PlayerInfo[playerid][pSexSkill] = 0;
	PlayerInfo[playerid][pBetoroSkill] = 0;
	PlayerInfo[playerid][pLawSkill] = 0;
	PlayerInfo[playerid][pMechSkill] = 0;
	PlayerInfo[playerid][pJackSkill] = 0;
	PlayerInfo[playerid][pCarSkill] = 0;
	PlayerInfo[playerid][pNewsSkill] = 0;
	PlayerInfo[playerid][pDrugsSkill] = 0;
	PlayerInfo[playerid][pCookSkill] = 0;
	PlayerInfo[playerid][pFishSkill] = 0;
	PlayerInfo[playerid][pRiasztoSkill] = 0;
	PlayerInfo[playerid][pHackingSkill] = 0;
	PlayerInfo[playerid][pSzajkendo] = 0;
	//PlayerInfo[playerid][pHealth] = MAXHP;
	PlayerInfo[playerid][pPos_x] = 2246.6;
	PlayerInfo[playerid][pPos_y] = -1161.9;
	PlayerInfo[playerid][pPos_z] = 1029.7;
	PlayerInfo[playerid][pInt] = 15;
	PlayerInfo[playerid][pLocal] = NINCS;
	PlayerInfo[playerid][pModel] = 167;
	//new randphone = 1000 + random(8999);//minimum 1000  max 9999 //giving one at the start
	PlayerInfo[playerid][pPnumber] = 0;
	PlayerInfo[playerid][pPhousekey] = NINCS;
	PlayerInfo[playerid][pPhousekey3] = NINCS;
	PlayerInfo[playerid][pPbiskey] = NINCS;
	PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pHeliLic] = 0;
	PlayerInfo[playerid][pBoatLic] = 0;
	PlayerInfo[playerid][pFishLic] = 0;
	PlayerInfo[playerid][pGunLic] = 0;
	PlayerInfo[playerid][pCarTime] = 0;
	PlayerInfo[playerid][pPayDay] = 0;
	PlayerInfo[playerid][pPayDayHad] = 0;
	PlayerInfo[playerid][pCDPlayer] = 0;
	PlayerInfo[playerid][pWins] = 0;
	PlayerInfo[playerid][pLoses] = 0;
	PlayerInfo[playerid][pAlcoholPerk] = 0;
	PlayerInfo[playerid][pDrugPerk] = 0;
	PlayerInfo[playerid][pMiserPerk] = 0;
	PlayerInfo[playerid][pPainPerk] = 0;
	PlayerInfo[playerid][pTraderPerk] = 0;
	PlayerInfo[playerid][pTut] = 0;
	PlayerInfo[playerid][pWarns] = 0;
	PlayerInfo[playerid][pKWarns] = 0;
	PlayerInfo[playerid][pFuel] = 0;
	PlayerInfo[playerid][pLokator] = 0;
	PlayerInfo[playerid][pHamisNev] = 0;
	//PlayerInfo[playerid][pNyomkoveto] = 0;
	//PlayerInfo[playerid][pNyomkovetes] = 0;
	PlayerInfo[playerid][pSpawned] = 0;
	PlayerInfo[playerid][pGPS] = false;
	PlayerInfo[playerid][pMuanyag] = 0;
	PlayerInfo[playerid][pSSS] = 0;
	PlayerInfo[playerid][pCserje] = 0;
	PlayerInfo[playerid][pMak] = 0;
	PlayerInfo[playerid][pCannabis] = 0;
	PlayerInfo[playerid][pKaja] = 0;
	PlayerInfo[playerid][pDrogido] = 0;
	PlayerInfo[playerid][pAS] = 0;
	PlayerInfo[playerid][pOnkentes] = 0;
	PlayerInfo[playerid][pCPosX] = 0.000000;
	PlayerInfo[playerid][pCPosY] = 0.000000;
	PlayerInfo[playerid][pCPosZ] = 0.000000;
	PlayerInfo[playerid][pCInt] = 0;
	PlayerInfo[playerid][pCVW] = 0;
	PlayerInfo[playerid][pCrash] = 0;
	PlayerInfo[playerid][pCelet] = MAXHP;
	PlayerInfo[playerid][pCpajzs] = 100.0;
	PlayerInfo[playerid][pPcarkey] = NINCS;
	PlayerInfo[playerid][pPcarkey3] = NINCS;
	PlayerInfo[playerid][pCigiUsed] = 0;
	PlayerInfo[playerid][pCigiFuggoseg] = 0;
	PlayerInfo[playerid][pCigi] = 0;
	PlayerInfo[playerid][pNikotin] = 0;
	PlayerInfo[playerid][pGyujto] = 0;
	PlayerInfo[playerid][pPia] = 0;
	PlayerInfo[playerid][pSwattag] = 0;
	PlayerInfo[playerid][pSwatRang] = 0;
	PlayerInfo[playerid][pKituntetes] = 0;
	PlayerInfo[playerid][pSzallitott] = 0;
	PlayerInfo[playerid][pSpawnchange] = 0;
	PlayerInfo[playerid][pAdminAlnevBe] = 0;
	PlayerInfo[playerid][pTeloEgyenleg] = 0;
	PlayerInfo[playerid][pUtlevel] = 0;
	PlayerInfo[playerid][pSzemelyi] = 0;
	PlayerInfo[playerid][pTaxiEngedely] = 0;
	PlayerInfo[playerid][pSzerelt] = 0;
	PlayerInfo[playerid][pLakcimkartya] = 0;
	PlayerInfo[playerid][pStilus] = 0;
	PlayerInfo[playerid][pBankSzamla] = 0;
	PlayerInfo[playerid][pBankSzamlaSzam] = 0;
	PlayerInfo[playerid][pBankSzamlaJelszo] = 0;
	PlayerInfo[playerid][pC4] = 0;
	PlayerInfo[playerid][pHitman] = 0;
	PlayerInfo[playerid][pHitmanNev][0] = EOS;
	PlayerInfo[playerid][pKey][0] = EOS;
	PlayerInfo[playerid][pPremiumCsomag] = 0;
	PlayerInfo[playerid][pPremiumIdo] = 0;
	PlayerInfo[playerid][pPremiumPont] = 0;
	PlayerInfo[playerid][pPower] = 0;
	PlayerInfo[playerid][pMotorJogsi] = 0;
	PlayerInfo[playerid][pKamionJogsi] = 0;
	PlayerInfo[playerid][pKreszJogsi] = 0;
	PlayerInfo[playerid][pAdrJogsi] = 0;	
	PlayerInfo[playerid][pJogsiTiltIdo] = 0;
	AutokerKulcs[playerid] = 0;
	PlayerInfo[playerid][pFrakcioTiltIdo] =0;
	PlayerInfo[playerid][pReportChannel] = NINCS;
	PlayerInfo[playerid][pViewReportChannel] = NINCS;
	PlayerInfo[playerid][pMegbizas] = 0;
	PlayerInfo[playerid][pValaszok] = 0;
	PlayerInfo[playerid][pAlma] = 0;
	NoName[playerid] = false;
	/*PlayerInfo[playerid][pAdoHaz] = 0;
	PlayerInfo[playerid][pAdoHazHol] = 0;
	PlayerInfo[playerid][pAdoSzint] = 0;
	PlayerInfo[playerid][pAdoJarmu] = 0;
	PlayerInfo[playerid][pAdoKitoltve] = 0;
	PlayerInfo[playerid][pAdo] = 0;
	PlayerInfo[playerid][pAdoEllenorizve] = 0;*/
	
	PlayerInfo[playerid][pRadioHallgat] = false;
	PlayerInfo[playerid][pRadioID] = NINCS;
	PlayerInfo[playerid][pRadioHID] = NINCS;
	PlayerInfo[playerid][pRadioHangero] = 100;
	PajzsNala[playerid] = false;
	
	
	PlayerRaceInfo[playerid][xVersenyen] = NINCS;
	PlayerRaceInfo[playerid][xEpites] = NINCS;
	
	ButorKategoria[ playerid ] = NINCS;
	SzerkesztesButor[ playerid ] = NINCS;
	SKapuEngedely[ playerid ] = false;
	PlayerInfo[playerid][pBikazoKabel] = 0;
	PlayerInfo[playerid][pKormanyKituntetes] = 0;
	NekiSzerelt[playerid] = 0;
	SzamlaraUtal[playerid] = NINCS;
	PlayerInfo[playerid][pKulcsok][0] = NINCS;
	PlayerInfo[playerid][pKulcsok][1] = NINCS;
	PlayerInfo[playerid][pKulcsok][2] = NINCS;
	PlayerInfo[playerid][pBizniszKulcs] = NINCS;
	HalalInti[playerid] = NINCS;
	HalalVW[playerid] = NINCS;
	HalalPos[playerid][0] = NINCS;
	HalalPos[playerid][1] = NINCS;
	HalalPos[playerid][2] = NINCS;
	PlayerInfo[playerid][pFuelTipus] = NINCS;
	Kikepzoben[playerid] = false;
	PlayerInfo[playerid][pElhasznaltUzemanyag][0] = 0;
	PlayerInfo[playerid][pElhasznaltUzemanyag][1] = 0;
	PlayerInfo[playerid][pElhasznaltUzemanyag][2] = NINCS;
	Kamera[playerid] = NINCS;
	MelyikKamera[playerid] = NINCS;
	
	for(new x=0;x<=10;x++)
		PlayerInfo[playerid][pFegyverSkillek][x] = 0;
		
	PlayerInfo[playerid][pBenzinkut] = NINCS;
	Loterben[playerid] = NINCS;
	Lehallgat[playerid] = NINCS;
	LoterFigyel[playerid] = false;
	PlayerInfo[playerid][pTelefon] = NINCS;
	PlayerInfo[playerid][pSSSValaszok] = 0;
	SSSCheck[playerid] = false;
	Paintballozik[playerid] = false;
	Paintballnevezve[playerid] = false;
	PaintballOlesek[playerid] = 0;
	PlayerInfo[playerid][pMegad] = false;
	Poloskazott[playerid] = false;
	Poloskazta[playerid] = NINCS;
	Poloska[playerid] = false;
	Invitejog[playerid] = 0;
	ASzint[playerid] = NINCS;
	Loginspawnolas[playerid] = true;
	PlayerInfo[playerid][pArany] = 0;
	PlayerInfo[playerid][pAranyBank] = 0;
	//PlayerInfo[playerid][pTextdrawszin] = 0;
	PlayerInfo[playerid][pMobilnet] = NINCS;
	LaptopConnected[playerid] = false;
	LaptopIP[playerid] = NINCS;
	PlayerInfo[playerid][pKozmunka] = 0;
	PlayerInfo[playerid][pKozmunkaIdo] = 0;
	PlayerInfo[playerid][pJelveny] = 1;
	JailTime[playerid] = 0;
	SzemetDebug[playerid] = false;
	IdgScripter[playerid] = false;
	PBTerem[playerid] = 0;
	//Meghalt[playerid] = false;
	Warozott[playerid] = 0;
	Evett[playerid] = 0;
	JailTime[playerid] = 0;
	JelvenyNeve[playerid] = "Ismeretlen";
	JelvenySzervezet[playerid] = NINCS;
	JelvenyRangnev[playerid] = NINCS;
	Onkentesszolgalatban[playerid] = false;
	PilotaRadar[playerid] = 0;
	PlayerInfo[playerid][pLaptopBe] = false;
	IRCBanTime[playerid] = NINCS;
	IRCBanRoom[playerid] = NINCS;
	gPB[playerid] = 1;
	gOColor[playerid] = 0;
	PlayerInfo[playerid][pPluszBer] = 0;
	PlayerInfo[playerid][pPluszBerMeddig] = EOS;
	PlayerInfo[playerid][pMegfigyelve] = 0;
	PlayerInfo[playerid][pMegfigyelveOK] = EOS;
	PlayerInfo[playerid][pBuntetopont] = 0;
	PlayerInfo[playerid][pTrafik] = 0;
	PlayerInfo[playerid][pTrafiOsszeg] = 0;
	PlayerInfo[playerid][pFrissitesUzenetVan] = 0;
	PlayerInfo[playerid][pFrissitesUzenet] = EOS;
	PlayerInfo[playerid][pRKA] = 0;
	PlayerInfo[playerid][pRKARang] = 0;
	PlayerInfo[playerid][pPoliceAlosztaly][0] = NINCS;
	PlayerInfo[playerid][pPoliceAlosztaly][1] = NINCS;
	PlayerInfo[playerid][pPoliceAlosztaly][2] = NINCS;
	PlayerInfo[playerid][pPoliceAlosztalyFo] = NINCS;
	PlayerInfo[playerid][pPoliceRuha] = NINCS;
	PlayerInfo[playerid][pCsaladTagja] = 0;
	PlayerInfo[playerid][pCsaladLeader] = 0;
	PlayerInfo[playerid][pCsaladRang] = 0;
	PlayerInfo[playerid][pMoriartySzalag] = 0;
	PlayerInfo[playerid][pMoriartySzalagIdo] = 0;
	RKAOnDuty[playerid]=0;
	gTogLR[playerid]=0;
	Haldoklik[playerid] = false;
	HaldoklasIdo[playerid] = NINCS;
	HaldoklasPoz[playerid][0] = 0.0;
	HaldoklasPoz[playerid][1] = 0.0;
	HaldoklasPoz[playerid][2] = 0.0;
	HaldoklasInt[playerid] = NINCS;
	HaldoklasVW[playerid] = NINCS;
	KereskedoLicitalt[playerid] = false;
	CsomagAllapot[playerid] = 0;
	Csomag[playerid][0] = 0.0;
	Csomag[playerid][1] = 0.0;
	Csomag[playerid][2] = 0.0;
	gBemlegetes[playerid] = 0;
	VamkommandoDuty[playerid] = false;
	ResetTuningVariables(playerid);
	CheckpointHackCount[playerid] = 0;
	LastCheckpoint[playerid] = Float:{0.0, 0.0, 0.0};
	LastCheckpointTime[playerid] = 0;
	LastCheckpointHackTime[playerid] = 0;
	ElvettRadio[playerid] = NINCS, gFam2[playerid] = 1;
	pGumilovedek[playerid] = NINCS;
	Gumilovedek[playerid][fxMP5] = 0;
	Gumilovedek[playerid][fxAK47] = 0;
	Gumilovedek[playerid][fxM4A1] = 0;
	Gumilovedek[playerid][fxShotgun] = 0;
	Gumilovedek[playerid][fxCombat] = 0;
	Gumilovedek[playerid][fxDeagle] = 0;
	Gumilovedek[playerid][fxColt45] = 0;
	Gumilovedek[playerid][fxSilencedColt45] = 0;
	Gumilovedek[playerid][fxRifle] = 0;
	Gumilovedek[playerid][fxSniper] = 0;
	Hifirolhallgatzenet[playerid] = false;
	YouTubeZeneRakas[playerid] = 0;
	Boltotrabol[playerid] = false;
	selecting[playerid] = false;
	
	//bányász
	PlayerInfo[playerid][pSzen] = 0;
	PlayerInfo[playerid][pVas] = 0;
	PlayerInfo[playerid][pAranym] = 0;
	PlayerInfo[playerid][pGyemant] = 0;
	PlayerInfo[playerid][pSzenP] = 0;
	PlayerInfo[playerid][pVasP] = 0;
	PlayerInfo[playerid][pAranymP] = 0;
	PlayerInfo[playerid][pGyemantP] = 0;
	banyaszbsz[playerid] = false;
	vanNalaKo[playerid] = false;
	
	//drogteszt
	Drogteszt[playerid] = -1;
	PlayerInfo[playerid][pDrogozott] = 0;
	
	//villanyszerelõ
	oszlopcsere[playerid] = false;
	vmunk[playerid] = false;
	hova[playerid] = 0;
	
	//szemét felvesz/lerak
	VanSzemetNala[playerid] = false;
	kuka[playerid] = NINCS;
	
	//rabszállít
	szallit[playerid] = NINCS;
	szallitasz[playerid] = false;
	
	//Börtönmunka
	PlayerInfo[playerid][pBmunka] = NINCS;
	
	//graffiti
	SzerkesztGraffiti[playerid] = NINCS;
	AdminGraffiti[playerid] = NINCS;
	KeyGraffiti[playerid] = NINCS;
	KellGomb[playerid] = NINCS;
	KeyCount[playerid] = 0;
	
	//gps
	AdminGPS[playerid] = NINCS;
	
	GovEngedely[playerid] = false;
	
	PlayerInfo[playerid][pCustomHudWeapon] = 0;
	

} // vnullend

fpublic OnPlayerEnterAnyCheckpoint(playerid, bool:race)
{
	new lastEnter = LastCheckpointTime[playerid];
	new Float:lastCheckpoint[3];
	ArrCopy(lastCheckpoint, LastCheckpoint[playerid]);
	
	GetPlayerPos(playerid, ArrExt(LastCheckpoint[playerid]));
	LastCheckpointTime[playerid] = UnixTime;
	
	if(lastEnter != 0)
	{
		new Float:pos[3];
		GetPlayerPos(playerid, ArrExt(pos));
		
		new timeDelta = (UnixTime - lastEnter);
		new Float:distance = GetDistanceBetweenPoints(ArrExt(lastCheckpoint), ArrExt(pos));
		new Float:speed = (distance / float(max(1, timeDelta)));
		
		new Float:vehMaxSpeed;
		if(IsPlayerInAnyVehicle(playerid))
			vehMaxSpeed = GetVehicleTopSpeed(GetVehicleModel(GetPlayerVehicleID(playerid)));
			
		if(vehMaxSpeed < 1) // gyalog
			vehMaxSpeed = 300;
		
		new lastHackDelta = (UnixTime - LastCheckpointHackTime[playerid]);
		
		if(!IsAdmin(playerid) && speed > floatround(vehMaxSpeed * 1.1))
		{
			if(lastHackDelta < 300)
				CheckpointHackCount[playerid]++;
			else
				CheckpointHackCount[playerid] = 1;
			
			LastCheckpointHackTime[playerid] = UnixTime;
			Log("Events", TFormatInline("%s(playerid = [%d]%s) - [time: %ds, dist: %0.1fm, speed: %0.1fkm/h, vehMaxSpeed: %.1fkm/h] - CHEAT (%d)", \
				(race ? "OnPlayerEnterRaceCheckpoint" : "OnPlayerEnterCheckpoint"), playerid, PlayerInfo[playerid][pNev], timeDelta, distance, speed, vehMaxSpeed, CheckpointHackCount[playerid]));
			
			if(CheckpointHackCount[playerid] == 3)
				SeeBan(playerid, 0, _, "CPH");
			
			return 0;
		}
		else
		{
			Log("Events", TFormatInline("%s(player = [%d]%s) - [time: %ds, dist: %0.1fm, speed: %.1fkm/h, vehMaxSpeed: %.1fkm/h]", \
				(race ? "OnPlayerEnterRaceCheckpoint" : "OnPlayerEnterCheckpoint"), playerid, PlayerInfo[playerid][pNev], timeDelta, distance, speed, vehMaxSpeed));
		}
	}
	else
		Log("Events", TFormatInline("%s(player = [%d]%s)", \
			(race ? "OnPlayerEnterRaceCheckpoint" : "OnPlayerEnterCheckpoint"), playerid, PlayerInfo[playerid][pNev]));
		
	return 1;
}

/*stock TKick( playerid ) //
{
    SetSpawnInfo( playerid, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0 );
	SpawnPlayer( playerid );
	Kick( playerid );
}*/

stock TKick( playerid )
{
	SetTimerEx( "TKickEx", 1000, false, "d", playerid );
}

fpublic TKickEx( playerid )
{
 	Kick( playerid );
	printf("[%d]%s TKick", playerid, Nev(playerid));
}

stock OnPlayerConnectKick(playerid)
{
	// auto desync
	Desync[playerid] = 0;
	
	if(!IsValidName(playerid))
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ez RP szerver! Csak RP-s névvel jöhetsz! Azaz: Vezetéknév_Keresztnév");
		TKick(playerid);
		return 1;
	}

	if(!NagyKezdobetusNev(playerid))
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "A valóságban sem kisbetüvel írják a nevüket az emberek, kérlek írd át te is...");
		TKick(playerid);
		return 1;
	}

	/*if(!strcmp(PlayerName(playerid), "Jim_Moriarty", true) && strcmp(PlayerIP(playerid), "194.149.62.5"))
	{
		if(strcmp(PlayerIP(playerid), "127.0.0.1"))
		{
			SendFormatMessage(playerid,COLOR_LIGHTRED, "ClassRPG: %s kibannolva Jim szelleme által | Oka: Ne gyere már fel a karimmal légyszives... Köszi, pápá :)", PlayerIP(playerid));
			SeeBan(playerid, 0, NINCS, "Jim karakter", true, false);
			Kick( playerid );
			return 1;
		}
	}*/

	/*if(ClassClient)
	{
		if(IsTerno(playerid) && !egyezik(PlayerInfo[playerid][pCode],"A23D-5401-82D1-BB6E-31E2-4B9A-5EB6-D0CB"))
		{
			new string[128];
			format(string, 128,"ClassRPG: %s kibannolva Terno szelleme által | Oka: Ne gyere már fel a karimmal légyszives... Köszi, pápá :)", PlayerIP(playerid));
			SendMessage(SEND_MESSAGE_ADMIN,string,COLOR_LIGHTRED,1);
			Msg(playerid,string);
			SeeBan(playerid, 0, NINCS, "Terno karakter", true, false);
			TKick(playerid);
			return 1;
		}
		if(egyezik(PlayerName(playerid), "Franklin_F_Gates") && !egyezik(PlayerInfo[playerid][pCode],"82F3-006C-8D01-D717-46AE-8FDA-EE14-3E3A"))
		{
			Format(_tmpString, "ClassRPG: %s kibannolva Franklin szelleme által | Oka: Ne gyere már fel a karimmal légyszives... Köszi, pápá :)", PlayerIP(playerid));
			SendMessage(SEND_MESSAGE_ADMIN,_tmpString,COLOR_LIGHTRED,1);
			Msg(playerid,_tmpString);
			SeeBan(playerid, 0, NINCS, "Franklin karakter", true, false);
			TKick(playerid);
			return 1;
		}
	}*/
	/*
	if(!strcmp(PlayerName(playerid), "Terno_Tommys", true) && strcmp(PlayerIP(playerid), "37.17.175.245"))
	{
		if(strcmp(PlayerIP(playerid), "127.0.0.1"))
		{
			SendFormatMessageToAll(COLOR_LIGHTRED, "ClassRPG: %s kibannolva Terno szelleme által | Oka: Ne gyere már fel a karimmal légyszives... Köszi, pápá :)", PlayerIP(playerid));
			SeeBan(playerid, 0, NINCS, "Terno karakter", true, false);
			TKick(playerid);
			return 1;
		}
	}
	*/
	return 0;
}

stock CsatlakozasEngedelyezve(playerid, &valasz)
{
	if(egyezik(IP(playerid), "127.0.0.1") || egyezik(IP(playerid), "localhost")) return 1;
	
	valasz = -1;
	
	new db, c;
	
	for(c = 0; c < MAX_PLAYERS; c++)
	{
		if( !Connected[ c ] || c == playerid ) continue;
		
		if( egyezik( IP(playerid), IP(c) ) )
			db++;
	}
	
	if(db >= MAX_CONNECT_PER_IP )
	{
		valasz = 1;
		return 0;
	}
	
	new ures = NINCS, van = NINCS;
	
	for(c = 0; c < MAX_IP_STORE; c++)
	{
		if( IPConnects[ c ][ iTime ] >= UnixTime && ( !strlen( IPConnects[ c ][ iCim ] ) || egyezik( IPConnects[ c ][ iCim ], IP(playerid) ) ) )
		{
			van = c;
			break;
		}
		else if( ures == NINCS )
			ures = c;
	}
	
	if( van != NINCS )
	{
		IPConnects[ van ][ iDB ] ++;
		
		if( IPConnects[ van ][ iDB ] >= 10 )
			BanEx( playerid, "IPFlood" );
		
		printf("[IPProtection] Elozo csatlakozas %d masodperce", UnixTime - (IPConnects[ van ][ iTime ] - CONNECT_TIME_LIMIT) );
		
		IPConnects[ van ][ iTime ] = UnixTime + CONNECT_TIME_LIMIT;
		
		valasz = 2;
		return 0;
	}

	if( ures == NINCS )
		ures = MAX_IP_STORE - 1;
	
	IPConnects[ ures ][ iDB ] = 1;
	IPConnects[ ures ][ iTime ] = UnixTime + CONNECT_TIME_LIMIT;
	strcpy( IPConnects[ ures ][ iCim ], IP( playerid ), IP_ADDRESS_LENGTH );
	
	return 1;
}

fpublic OnPlayerConnect(playerid)
{
	//printf("OnPlayerConnect UID: %d",PlayerInfo[playerid][pID]);
	
	Connected[playerid] = true;
	if(LastID < playerid) LastID = playerid;

	GetPlayerName(playerid, PlayerInfo[playerid][pNev], MAX_PLAYER_NAME);
	GetPlayerIp(playerid, PlayerInfo[playerid][pIP], IP_ADDRESS_LENGTH);
	
	NPC[playerid] = IsPlayerNPC(playerid) == 1;

	ValtozoNullazas(playerid);
	
	gLohet[playerid] = false;

	if(!NPC(playerid))
	{
		ShowPlayerTextDraw(playerid, TD_Login1);
		ShowPlayerTextDraw(playerid, TD_Login2);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Betöltés folyamatban... kérlek várj...");
	}
	else
	{
		gPlayerLogged[playerid] = 1;
		//SpawnPlayer(playerid);
		NPCCsatlakozas(PlayerName(playerid), playerid);
		return 1;
	}
	TogglePlayerControllable(playerid, 0);
	CreateKeyPad(playerid);
	

	ClearPlayerCrime(playerid);
	ClearFishes(playerid);
	ClearCooking(playerid);
	ClearGroceries(playerid);
	ClearMarriage(playerid);
	
	if( OnPlayerConnectKick(playerid) )
		return 1;

	//CheckUtolso();

	if( !IsPlayerNPC( playerid ) )
		PreConfigure( playerid );

	//SetPlayerColor(playerid,COLOR_GRAD2);
	SetPlayerColor(playerid, COLOR_INVISIBLE);

	new bekistring[128];
	format(bekistring, sizeof(bekistring), "[IP:%s, ID: %d]%s Csatlakozott", IP(playerid), playerid, PlayerName(playerid));
	BeKilepes(bekistring);

	new string[128];
	format(string, sizeof(string), "~g~Üdvözlünk!~n~~y~Érezd jól magad!~n~~r~Weblapunk:~n~~b~~h~%s", weblap);
	GameTextForPlayer(playerid, string, 5000, 3);
	
	for(new c = 0; c < MAX_VEHICLES; c++)
	{
		if(!IsVehicleConnected(c)) continue;
		if(Locked(c))
			SetVehicleParamsForPlayer(playerid, c, 0, 1);
	}
	SpawnHely[playerid] = random(sizeof(LoginSpawn));
	
	for(new b = 0; b < MAX_OBJECTSZ; b++)
	{
		if(OBJECT_TOROL[b][sTipus] != NINCS && OBJECT_TOROL[b][sTipus] != 0)
			RemoveBuildingForPlayer(playerid, OBJECT_TOROL[b][sTipus], OBJECT_TOROL[b][sPosX], OBJECT_TOROL[b][sPosY], OBJECT_TOROL[b][sPosZ], OBJECT_TOROL[b][sTav]);
	}
	//printf("OnPlayerConnect UID: %d",PlayerInfo[playerid][pID]);
	return 1;
}

fpublic JoinChannelNr(playerid, number)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[256];
		new sendername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayersChannel[playerid] < 999)
	    {
			format(string, sizeof(string), "* %s otthagyta a szobát.", sendername);
			SendMessage(SEND_MESSAGE_IRC, string, COLOR_GREEN, PlayersChannel[playerid]);
			IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
	    }
		new channel = number;
	    PlayersChannel[playerid] = number;
	    IRCInfo[PlayersChannel[playerid]][iPlayers] += 1;

		if(IRCInfo[number][iAdminID] == SQLID(playerid))
		{
		    format(string, sizeof(string), "* Csatlakoztál a %d. channelre adminisztrátorként.", channel);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		else
		{
		    format(string, sizeof(string), "* Csatlakoztál a %d. channelre, admin: %s.", channel, IRCInfo[number][iAdmin]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		format(string, sizeof(string), "MOTD: %s.", IRCInfo[number][iMOTD]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "* %s csatlakozott a channelre.", sendername);
		SendMessage(SEND_MESSAGE_IRC, string, COLOR_GREEN, number);
	}
	return 1;
}

fpublic SendLaptopMessage(color, string[])//laptoprendszer
{
	foreach(Jatekosok, i)
	{
		if((PlayerInfo[i][pLaptop] == 1) && (PlayerInfo[i][pLaptopChat] == 1))
		{
			if(PlayerInfo[i][pMobilnet] != NINCS && !LaptopConnected[i])
				PlayerInfo[i][pMobilnet] += random(6);
			SendClientMessage(i, color, string);
		}
	}
}

fpublic ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "No-one");
		strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
		PlayerInfo[playerid][pMarried] = 0;
	}
	return 1;
}

stock ClearPlayerCrime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "-");
		strmid(PlayerCrime[playerid][pVad], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pJelento], string, 0, strlen(string), 255);
		WantedLevel[playerid] = 0;
	}
	return 1;
}
stock ClearVehicleCrime(vehicleid)
{
	if(IsVehicleConnected(vehicleid))
	{
		new sztring[32];
		format(sztring, sizeof(sztring), "-");
		strmid(VehicleCrime[vehicleid][vVad], sztring, 0, strlen(sztring), 32);
		strmid(VehicleCrime[vehicleid][vJelento], sztring, 0, strlen(sztring), 32);
		CarWantedLevel[vehicleid] = 0;
	}
	return 1;
}

fpublic FishCost(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new cost = 0;
		switch (fish)
		{
		    case 1:
		    {
		        cost = 1;
		    }
		    case 2:
		    {
		        cost = 3;
		    }
		    case 3:
		    {
		        cost = 3;
		    }
		    case 5:
		    {
		        cost = 5;
		    }
		    case 6:
		    {
		        cost = 2;
		    }
		    case 8:
		    {
		        cost = 8;
		    }
		    case 9:
		    {
		        cost = 12;
		    }
		    case 11:
		    {
		        cost = 9;
		    }
		    case 12:
		    {
		        cost = 7;
		    }
		    case 14:
		    {
		        cost = 12;
		    }
		    case 15:
		    {
		        cost = 9;
		    }
		    case 16:
		    {
		        cost = 7;
		    }
		    case 17:
		    {
		        cost = 7;
		    }
		    case 18:
		    {
		        cost = 10;
		    }
		    case 19:
		    {
		        cost = 4;
		    }
		    case 21:
		    {
		        cost = 3;
		    }
		}
		return cost;
	}
	return 0;
}

fpublic ClearFishes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
		Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0;
		Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
		Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
	}
	return 1;
}

fpublic ClearFishID(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		switch (fish)
		{
		    case 1:
		    {
		        strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight1] = 0;
		        Fishes[playerid][pFid1] = 0;
		    }
		    case 2:
		    {
		        strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight2] = 0;
		        Fishes[playerid][pFid2] = 0;
		    }
		    case 3:
		    {
		        strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight3] = 0;
		        Fishes[playerid][pFid3] = 0;
		    }
		    case 4:
		    {
		        strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight4] = 0;
		        Fishes[playerid][pFid4] = 0;
		    }
		    case 5:
		    {
		        strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight5] = 0;
		        Fishes[playerid][pFid5] = 0;
		    }
		}
	}
	return 1;
}

fpublic ClearCooking(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Cooking[playerid][pCookID1] = 0; Cooking[playerid][pCookID2] = 0; Cooking[playerid][pCookID3] = 0;
		Cooking[playerid][pCookID4] = 0; Cooking[playerid][pCookID5] = 0;
		Cooking[playerid][pCWeight1] = 0; Cooking[playerid][pCWeight2] = 0; Cooking[playerid][pCWeight3] = 0;
		Cooking[playerid][pCWeight4] = 0; Cooking[playerid][pCWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nothing");
		strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
	}
	return 1;
}

fpublic ClearCookingID(playerid, cook)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nothing");
		switch (cook)
		{
		    case 1:
		    {
		        strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight1] = 0;
		        Cooking[playerid][pCookID1] = 0;
		    }
		    case 2:
		    {
		        strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight2] = 0;
		        Cooking[playerid][pCookID2] = 0;
		    }
		    case 3:
		    {
		        strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight3] = 0;
		        Cooking[playerid][pCookID3] = 0;
		    }
		    case 4:
		    {
		        strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight4] = 0;
		        Cooking[playerid][pCookID4] = 0;
		    }
		    case 5:
		    {
		        strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight5] = 0;
		        Cooking[playerid][pCookID5] = 0;
		    }
		}
	}
	return 1;
}

fpublic ClearGroceries(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
	    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
	    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
	}
	return 1;
}

fpublic Lotto()
{
	new number;
	number = random(80) + 1;
	
	Nyeroszam = number;
	new JackpotFallen = 0;
	new string[256];
	new winner[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Lottó: A mai nyerõszám: %d.", number);
    SendMessage(SEND_MESSAGE_OOCOFF, string, COLOR_WHITE);
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLottoNr] > 0)
		    {
			    if(PlayerInfo[i][pLottoNr] == number)
			    {
			        JackpotFallen = 1;
			        GetPlayerName(i, winner, sizeof(winner));
					strrep(winner, '_', ' ');
					format(string, sizeof(string), "Lottóhírek: %s megnyerte a %sFtos fõnyereményt!", winner, FormatNumber( Jackpot, 0, ',' ));
					SendMessage(SEND_MESSAGE_OOCOFF, string, COLOR_WHITE);
					format(string, sizeof(string), "* Gratulálunk! Megnyerted a fõnyereményt! Ami %sFt + egy láda", FormatNumber( Jackpot, 0, ',' ));
					SendClientMessage(i, COLOR_YELLOW, string);
					ConsumingMoney[i] = 1;
					GiveMoney(i, Jackpot);
					
					#if defined SYSTEM_BONUS
					GiveRandomToken(i, BONUS_REASON_LOTTERY);
					#endif
			    }
			    else
			    {
			        SendClientMessage(i, COLOR_LIGHTBLUE, "* Sajnos most nem nyertél a lottón...");
			    }
			}
			PlayerInfo[i][pLottoNr] = 0;
		}
	}
	if(JackpotFallen)
	{
	    Jackpot = 50000;
	    //SaveStuff();
	    format(string, sizeof(string), "Lottóhírek: A lottósorsolás újraindult! Fõnyeremény: %sFt", FormatNumber( Jackpot, 0, ',' ));
		SendMessage(SEND_MESSAGE_OOCOFF, string, COLOR_WHITE);
	}
	else
	{
	    new rand = random(15000); rand += 22473;
	    Jackpot += rand;
	    //SaveStuff();
	    format(string, sizeof(string), "Lottóhírek: A fõnyeremény emelkedett: %sFt", FormatNumber( Jackpot, 0, ',' ));
		SendMessage(SEND_MESSAGE_OOCOFF, string, COLOR_WHITE);
	}
	return 1;
}

//------------------------------------------------------------------------------------------------------
fpublic OnPlayerDisconnect(playerid, reason)
{

	LoginTextDrawCreated[playerid] = false;
	LoginTextDrawCreated2[playerid] = false;
	RoncsDerbiKieses(playerid);
	for(new i = 0; i < 4; i++)
	{
		if(IsValidDynamic3DTextLabel(FekvorendorText[playerid][i]))
			DestroyDynamic3DTextLabel(FekvorendorText[playerid][i]),FekvorendorText[playerid][i]=INVALID_3D_TEXT_ID;
	}
	
	PlayerInfo[playerid][pTaxiDuty] = false;
	if(MunkaTimerID[playerid] != NINCS)
		KillTimer(MunkaTimerID[playerid]),MunkaTimerID[playerid]=NINCS;
	
	MunkaFolyamatban[playerid] = 0;
	

	for(new a=0; a < MAX_GIFTS; a++)
	{
		if(Gift[a][gTulajUid] == PlayerInfo[playerid][pBID])
			Gift[a][gTulajUid]=NINCS;
	}
	foreach(Jatekosok, p)
	{
		SetPlayerMarkerForPlayer(playerid, p, COLOR_INVISIBLE);
		
		if(TaxiHivasJelzes[p] == playerid)
		{
			Taxi[p][tHivas] = false;
			TaxiHivasJelzes[p] = NINCS;
			SendFormatMessage(p,COLOR_LIGHTRED,"[TAXI] %s lemondta a hívásodat. ((kilépet))",PlayerName(playerid));
			SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
		}
		if(TaxiHivasJelzes[playerid] == p)
		{
			Taxi[playerid][tHivas] = false;
			TaxiHivasJelzes[playerid] = NINCS;
			SendFormatMessage(playerid,COLOR_LIGHTRED,"[TAXI] %s lemondta a hívásodat. ((kilépet))",PlayerName(p));
			SetPlayerMarkerForPlayer(playerid, p, COLOR_INVISIBLE);
		}
		
	}
		
	if(NPC(playerid))
	{
		printf("Npc lecsatlakozott [%d] %s",playerid,PlayerName(playerid));
		
		
		if(BankNPC == playerid)
			if(IsValidDynamic3DTextLabel(BankNPCText)) DestroyDynamic3DTextLabel(BankNPCText), BankNPCText = INVALID_3D_TEXT_ID, BankNPC= NINCS;
		
		
		if(BankSFNPC == playerid)
			if(IsValidDynamic3DTextLabel(BankSFNPCText)) DestroyDynamic3DTextLabel(BankSFNPCText), BankSFNPCText = INVALID_3D_TEXT_ID;
		
		if(ArveresNPC == playerid)
			if(IsValidDynamic3DTextLabel(ArveresNPCText)) DestroyDynamic3DTextLabel(ArveresNPCText), ArveresNPCText = INVALID_3D_TEXT_ID;
		
		if(egyezik(PlayerName(playerid),"NPC_Buszsofor_LS") ||
			egyezik(PlayerName(playerid),"NPC_Buszsofor_LS1") ||
			egyezik(PlayerName(playerid),"NPC_Buszsofor_LS2") ||
			egyezik(PlayerName(playerid),"NPC_Buszsofor_LS_SF1") ||
			egyezik(PlayerName(playerid),"NPC_Buszsofor_LS_SF2") ||
			egyezik(PlayerName(playerid),"NPC_Vonatsofor_LS_1") ||
			egyezik(PlayerName(playerid),"NPC_Vonatsofor_LS_2") ||
			egyezik(PlayerName(playerid),"NPC_Vonatsofor_LS_3") ||
			egyezik(PlayerName(playerid),"NPC_Vonatsofor_LS_4") ||
			egyezik(PlayerName(playerid),"NPC_Vonatsofor_LS_5") ||
			egyezik(PlayerName(playerid),"NPC_Villamos_1") ||
			egyezik(PlayerName(playerid),"NPC_Villamos_2") ||
			egyezik(PlayerName(playerid),"NPC_Villamos_3"))

		{
			new nid = NPC_ID[playerid];
			NPC_STOP(playerid);
			DestroyDynamic3DTextLabel(NPC_Vezetok[nid][nLeirasID]), NPC_Vezetok[nid][nLeirasID] = INVALID_3D_TEXT_ID;
			KocsiObjectTorol(NPC_Vezetok[nid][nKocsi]);
			DestroyVehicle(NPC_Vezetok[nid][nKocsi]);
			NPC_Vezetok[nid][nHolTart] = NINCS;
			NPC_Vezetok[nid][nMegallokSzama] = NINCS;
			NPCKocsi[NPC_Vezetok[nid][nKocsi]] = false;
			KocsiRadio[NPC_Vezetok[nid][nKocsi]] = NINCS;
			NPC_Vezetok[nid][nKocsi] = NINCS;
			NPC_Vezetok[nid][nConnected] = false;
			NPC_ID[playerid] = NINCS;
			NPC[playerid] = false;
			SetPlayerColor(playerid, COLOR_INVISIBLE);

			if(egyezik(PlayerName(playerid),"NPC_Buszsofor_LS"))
				ConnectNPC("NPC_Buszsofor_LS", "ClassBusz"), SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", nid, 2);
			if(egyezik(PlayerName(playerid),"NPC_Buszsofor_LS1"))
				ConnectNPC("NPC_Buszsofor_LS1", "ClassBusz"), SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", nid, 2);
			if(egyezik(PlayerName(playerid),"NPC_Buszsofor_LS2"))
				ConnectNPC("NPC_Buszsofor_LS2", "ClassBusz"), SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", nid, 2);
			if(egyezik(PlayerName(playerid),"NPC_Buszsofor_LS_SF1"))
				ConnectNPC("NPC_Buszsofor_LS_SF1", "ClassBusz"), SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", nid, 2);
			if(egyezik(PlayerName(playerid),"NPC_Buszsofor_LS_SF2"))
				ConnectNPC("NPC_Buszsofor_LS_SF2", "ClassBusz"), SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", nid, 2);
			//vonatok
			if(egyezik(PlayerName(playerid),"NPC_Vonatsofor_LS_1"))
				ConnectNPC("NPC_Vonatsofor_LS_1", "ClassBusz"), SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", nid, 2);
			if(egyezik(PlayerName(playerid),"NPC_Vonatsofor_LS_2"))
				ConnectNPC("NPC_Vonatsofor_LS_2", "ClassBusz"), SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", nid, 2);				
			if(egyezik(PlayerName(playerid),"NPC_Vonatsofor_LS_3"))
				ConnectNPC("NPC_Vonatsofor_LS_3", "ClassBusz"), SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", nid, 2);
			if(egyezik(PlayerName(playerid),"NPC_Vonatsofor_LS_4"))
				ConnectNPC("NPC_Vonatsofor_LS_4", "ClassBusz"), SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", nid, 2);		
			if(egyezik(PlayerName(playerid),"NPC_Vonatsofor_LS_5"))
				ConnectNPC("NPC_Vonatsofor_LS_5", "ClassBusz"), SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", nid, 2);	
			//villamos
			if(egyezik(PlayerName(playerid),"NPC_Villamos_1"))
				ConnectNPC("NPC_Villamos_1", "ClassBusz"), SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", nid, 2);	
			if(egyezik(PlayerName(playerid),"NPC_Villamos_2"))
				ConnectNPC("NPC_Villamos_2", "ClassBusz"), SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", nid, 2);	
			if(egyezik(PlayerName(playerid),"NPC_Villamos_3"))
				ConnectNPC("NPC_Villamos_3", "ClassBusz"), SetTimerEx("FelvetelFolytatasa", 13000, false, "dd", nid, 2);					
				

			printf("KICK NID %d",nid);
		}		
		NPC_ID[playerid] = NINCS;
		NPC[playerid] = false;
		SetPlayerColor(playerid, COLOR_INVISIBLE);
		if(egyezik(PlayerName(playerid),"NPC_1Bank"))
				ConnectNPC("NPC_1Bank", "NPC_Bank");
		if(egyezik(PlayerName(playerid),"NPC_2Bank"))
				ConnectNPC("NPC_2Bank", "NPC_Bank");
		if(egyezik(PlayerName(playerid),"NPC_Arveres"))
				ConnectNPC("NPC_Arveres", "NPC_Arveres");
						


    }
	if(IsValidDynamic3DTextLabel(Elajult[playerid])) DestroyDynamic3DTextLabel(Elajult[playerid]), Elajult[playerid] = INVALID_3D_TEXT_ID;
	BejelentoFelirat(playerid, false);
	AdminNevek(playerid, false);
	if(IsAllTerno(playerid) || IsAllDenaro(playerid))
			PlayerInfo[playerid][pAdmin] = 0;
	if(PajzsNala[playerid] == true)
		PajzsTorles(playerid);
	if(IsValidDynamic3DTextLabel(SajtoIgazolvany[playerid]))
	{
		DestroyDynamic3DTextLabel(SajtoIgazolvany[playerid]), SajtoIgazolvany[playerid] = INVALID_3D_TEXT_ID;
	}
	if(IsValidDynamic3DTextLabel(Onkentestext[playerid]))
	{
		DestroyDynamic3DTextLabel(Onkentestext[playerid]), Onkentestext[playerid] = INVALID_3D_TEXT_ID;
	}
	if(IsValidDynamic3DTextLabel(KozmunkasFelirat[playerid]))
		DestroyDynamic3DTextLabel(KozmunkasFelirat[playerid]), KozmunkasFelirat[playerid] = INVALID_3D_TEXT_ID;
	if(Paintballnevezve[playerid])
	{	
		Paintballnevezve[playerid] = false;
		PaintballInfo[PBTerem[playerid]][pbNevezesek]--;
		PBTerem[playerid] = NINCS;
	}
	for(new l = 0; l < MaxLoter; l++)
	{
		if(LoterInfo[l][lHasznalva] == true && LoterInfo[l][lHasznalo] == playerid)
		{
			LoterVege(playerid, l, LoterInfo[l][lFegyver]);
		}
	}	
	if(PlayerInfo[playerid][pPbiskey] > NINCS)
	{
		new biz=PlayerInfo[playerid][pPbiskey];
		if(Admin(playerid,1337) && PlayerInfo[playerid][pHetiAktivitas] < 14)
		{
			BizzInfo[biz][bHeti1]=14;
			BizzInfo[biz][bHavi1]=PlayerInfo[playerid][pHaviAktivitas];
			BizzInfo[biz][bIdo1]=UnixTime;
		}
		else
		{
			BizzInfo[biz][bHeti1]=PlayerInfo[playerid][pHetiAktivitas];
			BizzInfo[biz][bHavi1]=PlayerInfo[playerid][pHaviAktivitas];
			BizzInfo[biz][bIdo1]=UnixTime;
		}
		
		
		BizUpdate(biz, BIZ_Aktivsag);
	}	
	if(PlayerInfo[playerid][pBizniszKulcs] > NINCS)
	{
		new biz=PlayerInfo[playerid][pBizniszKulcs];
		if(Admin(playerid,1337) && PlayerInfo[playerid][pHetiAktivitas] < 14)
		{
			BizzInfo[biz][bHeti2]=14;
			BizzInfo[biz][bHavi2]=PlayerInfo[playerid][pHaviAktivitas];
			BizzInfo[biz][bIdo2]=UnixTime;
		}
		else
		{
			BizzInfo[biz][bHeti2]=PlayerInfo[playerid][pHetiAktivitas];
			BizzInfo[biz][bHavi2]=PlayerInfo[playerid][pHaviAktivitas];
			BizzInfo[biz][bIdo2]=UnixTime;
		}
		BizUpdate(biz, BIZ_Aktivsag);
	}	
	Connected[playerid] = false;

	if(LastID <= playerid)
	{
		LastID = 0;
		for(new p = 0; p < MAX_PLAYERS; p++)
		{
			if(!Connected[p] || p == playerid) continue;
			
			if(LastID < p)
				LastID = p;
		}
	}
	
	if( TuzVan && LMT(playerid, FRAKCIO_TUZOLTO) )
	{
		for( new t = 0; t < TUZ_MAX; t++ )
		{
			if( Tuz[ t ][tuzAktiv] && Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, playerid) )
				Streamer_RemoveArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, playerid);
		}
		
		//printf("Tuzolto MAP OFF");
	}
	if(Erosites[playerid]) Erosites[playerid]=false;
	if(CsaladBK[playerid]) CsaladBK[playerid]=false;
	
 	Bejelento[playerid] = false;
	Anev[playerid] = false;
	foreach(Jatekosok, p)
	{
		if(p == playerid || BText[p] == INVALID_3D_TEXT_ID) continue;
		Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, BText[p], E_STREAMER_PLAYER_ID, playerid);

		if(p == playerid || AText[p] == INVALID_3D_TEXT_ID) continue;
		Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, AText[p], E_STREAMER_PLAYER_ID, playerid);
		
		if(Poloskazott[playerid] && Poloskazta[p] == playerid)
		{
			Poloskazott[playerid] = false;
			Poloskazta[p] = NINCS;
			Poloska[p] = false;
		}
	}
	if(Rabolt[playerid] > 0)
		CopMsgFormat(COLOR_ALLDEPT, "<< Bankrabló %d kilépett - rabolt: %d másodperce >>", PlayerInfo[playerid][pBID], abs( Rabolt[playerid] - 300 ) );
		
	if(Boltotrabol[playerid])
		CopMsgFormat(COLOR_ALLDEPT, "<< Boltrabló %d kilépett/crashelt (rablás közben) >>", PlayerInfo[playerid][pBID]);
		
	if(Mobile[playerid] == 1003 && OnAirID == playerid)
	{
		format(_tmpString, 128, "** Megszakadt a kapcsolat %s-val **", ICPlayerName(playerid));
		SendMessage(SEND_MESSAGE_OOCNEWS, _tmpString, COLOR_NEWS);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		TeloElrak[playerid]=TELOELRAK;
		CellTime[playerid] = 0;
		SendClientMessage(playerid,  COLOR_GRAD2, "Leraktad.");
		OnAirID = 255;
		Mobile[playerid] = 255;
	}
	
	if(PlayerVW[playerid] == 123456789)
		PlayerVW[playerid] = 0;
	
	if(Zsebradio[playerid] > 0)
	{
		Zsebradio[playerid] = 0;
    }
    StopAudioStreamForPlayer(playerid);
	
	if(Sokkol[playerid])
	{
		Sokkol[playerid] = false;
		if(IsValidDynamicObject(SokkObject[GetPlayerVehicleID(playerid)])) DestroyDynamicObject(SokkObject[GetPlayerVehicleID(playerid)]);
		SokkObject[GetPlayerVehicleID(playerid)] = INVALID_OBJECT_ID;
	}

	if(IsValidDynamic3DTextLabel(KisLVL[playerid]))
		DestroyDynamic3DTextLabel(KisLVL[playerid]),KisLVL[playerid]=INVALID_3D_TEXT_ID;
		
	for(new i = 0; i < 4; i++)
	{
		if(IsValidDynamic3DTextLabel(FekvorendorText[playerid][i]))
			DestroyDynamic3DTextLabel(FekvorendorText[playerid][i]),FekvorendorText[playerid][i]=INVALID_3D_TEXT_ID;
	}
	
	if(PlayerVW[playerid] == 98765)
	{
		//ResetWeapon(playerid);
		WeaponResetAll(playerid);
		Paintballozik[playerid] = false;
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0, "disc");
		//PlayerInfo[playerid][pTeleportAlatt] = 1;
		//PlayerInfo[playerid][pCFalsePositive] = 1;
		SetPlayerPos(playerid, BizzInfo[BIZ_PB][bEntranceX],BizzInfo[BIZ_PB][bEntranceY],BizzInfo[BIZ_PB][bEntranceZ]);
	}
	
	if(PlayerVW[playerid] == 5995)
	{
		WeaponResetAll(playerid);
		Loterben[playerid] = 0;
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0, "disc");
		//PlayerInfo[playerid][pTeleportAlatt] = 1;
		//PlayerInfo[playerid][pCFalsePositive] = 1;
		SetPlayerPos(playerid, BizzInfo[BIZ_LOTER][bEntranceX],BizzInfo[BIZ_LOTER][bEntranceY],BizzInfo[BIZ_LOTER][bEntranceZ]);
	}
	
	if(IsPlayerNPC(playerid)) return 1;
	if(Logged(playerid))
	{
		Iter_Remove(Jatekosok, playerid);
		OnlineJatekosok--;
	}
	
	for(new i = 0; i < MAX_BOLYA; i++)
	{
		if(Bolya[playerid][i][bPos][0])
		{
			Bolya[playerid][i][bPos][0] = 0.0;
			if(IsValidDynamicObject(Bolya[playerid][i][bObject])) DestroyDynamicObject(Bolya[playerid][i][bObject]), Bolya[playerid][i][bObject]=INVALID_OBJECT_ID;
		}
	}
	
	for(new i = 0; i < MAX_KORDON; i++)
    {
        if(Kordon[playerid][i][korPos][0])
        {
            Kordon[playerid][i][korPos][0] = 0.0;
            if(IsValidDynamicObject(Kordon[playerid][i][korObject])) DestroyDynamicObject(Kordon[playerid][i][korObject]), Kordon[playerid][i][korObject]=INVALID_OBJECT_ID;
        }
    }
	
	if(NetKavezo[playerid] != 0)
		NetKavezo[playerid] = 0;
	
	//HelyezesFelrak(playerid, false);
	BejelentoFelirat(playerid, false);
	AdminNevek(playerid, false);
	
	/*for(new o = 0; o < MAX_HO_OBJECT; o++)
		if(IsValidDynamicObject(HoObject[playerid][o]))
			DestroyDynamicObject(HoObject[playerid][o]), HoObject[playerid][o] = INVALID_OBJECT_ID;*/
	
	if(KincsMutat[playerid])
	{
		for(new k = 0; k < MAX_KINCS; k++)
		{
			if( Kincs[k][kPos][0] != 0.0 && Kincs[k][kMapID] && Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, Kincs[k][kMapID], E_STREAMER_PLAYER_ID, playerid) )
				Streamer_RemoveArrayData( STREAMER_TYPE_MAP_ICON, Kincs[k][kMapID], E_STREAMER_PLAYER_ID, playerid);
		}
	}
	
	if(TuzMutat[playerid])
	{
		for(new k = 0; k < TUZ_MAX_POZ; k++)
		{
			if( TuzPoz[k][tPoz][0] != 0.0 && TuzPoz[k][tMapID] && Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[k][tMapID], E_STREAMER_PLAYER_ID, playerid) )
				Streamer_RemoveArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[k][tMapID], E_STREAMER_PLAYER_ID, playerid);
		}
	}
	
	if(Bicikli[playerid])
		DestroyVehicle(Bicikli[playerid]);
	
	/*if(EhsegBar[playerid] != INVALID_BAR_ID)
	{
		DestroyProgressBar( EhsegBar[playerid] );
		EhsegBar[playerid] = INVALID_BAR_ID;
	}
	if(VizeletBar[playerid] != INVALID_BAR_ID)
	{
		DestroyProgressBar( VizeletBar[playerid] );
		VizeletBar[playerid] = INVALID_BAR_ID;
	}*/
	
	new kocsi = GetPlayerVehicleID(playerid);
	if(IsValidDynamic3DTextLabel(TAXITEXT[kocsi])) DestroyDynamic3DTextLabel(TAXITEXT[kocsi]), TAXITEXT[kocsi]=INVALID_3D_TEXT_ID;
	TaxiHivas[playerid] = 0;
	MentoHivas[playerid] = 0;
	CallTuz[playerid] = 0;
	Posta[playerid] = 0;
	for(new p = 0; p < MAX_PLAYERS; p++)
	{
		if(Felberelve[p] == playerid)
		{
			Msg(p, "A célpont elhagyta a várost. A megbízás törölve.");
			Felberelve[p] = NINCS;
			FelberelveOsszeg[p] = NINCS;
		}	
	}
	KillTimer(robtimer);
	
	if((C4Lerakva[playerid] || C4Ido[playerid]) && C4Kocsiban[playerid] == NINCS)
	{
		if(IsValidDynamicObject(C4Object[playerid])) DestroyDynamicObject(C4Object[playerid]), C4Object[playerid]=INVALID_OBJECT_ID;
		if(IsValidDynamic3DTextLabel(C4Text[playerid])) DestroyDynamic3DTextLabel(C4Text[playerid]),C4Text[playerid]=INVALID_3D_TEXT_ID;
	}
	
	if( GyemantNala[playerid] != NINCS)
		GyemantAkcio( GYEMANT_LERAK, playerid, GyemantNala[playerid] );
	
	if(Sisak[playerid] == 1)
	{
		RemovePlayerAttachedObject(playerid, ATTACH_SLOT_SISAK);
		Sisak[playerid] = 0;
	}
	
	if(HarcVan && Harcol[playerid] && TeruletInfo[ HarcolTerulet[playerid] ][tHarc])
		HarcKieses(playerid, "Kilépett");
	
	if(Utzarak[playerid][uVan])
		Utzar(playerid, UTZAR_TOROL_MOST);
	
	if(Aukcio[aLicitalo] == playerid)
	{
		Aukcio[aLicitalo] = INVALID_PLAYER_ID;
		Aukcio[aLicit] = Aukcio[aKezdoLicit];
		
		strmid(Aukcio[aLicitaloVolt], PlayerInfo[playerid][pNev], 0, strlen(PlayerInfo[playerid][pNev]), MAX_PLAYER_NAME);
		
		new result[128]; format(result, 128, "A licitáló kilépett: %s - Így a licit megint %dFt", Aukcio[aLicitaloVolt], Aukcio[aLicit]);
		foreach(Jatekosok, x)
		{
			if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
				SendClientMessage(x, COLOR_LIGHTBLUE, result);
		}
	}
	//CheckUtolso();
	
	if(SzemetDebug[playerid])
		SzemetDebug[playerid] = false;
		
	if(Jelvenytlopott[playerid])
	{
		JelvenyNeve[playerid] = "Ismeretlen";
		JelvenySzervezet[playerid] = NINCS;
		JelvenyRangnev[playerid] = NINCS;
		Jelvenytlopott[playerid] = false;
	}
	
	if(Szajkendo[playerid] || Maszk[playerid])
	{
	    RemovePlayerAttachedObject(playerid, ATTACH_SLOT_KENDO_MASZK);
	    Szajkendo[playerid] = 0;
		Maszk[playerid] = 0;
	}
	if(Tevezve[playerid] != NINCS && IsPlayerConnected(Tevezve[playerid]))
	{
		TogglePlayerSpectating(Tevezve[playerid], 0);
		//PlayerInfo[playerid][pTeleportAlatt] = 1;
		//PlayerInfo[playerid][pCFalsePositive] = 1;
		SetPlayerPos(Tevezve[playerid], TVPos[Tevezve[playerid]][0], TVPos[Tevezve[playerid]][1], TVPos[Tevezve[playerid]][2]);
		SetPlayerInterior(Tevezve[playerid], TVInt[Tevezve[playerid]]);
		SetPlayerVirtualWorld(Tevezve[playerid], TVVW[Tevezve[playerid]], "tevezveDISC");
		Freeze(Tevezve[playerid], 3000);
		Tevezik[Tevezve[playerid]] = NINCS;
	}
	
	if(IsValidDynamic3DTextLabel(AdminDuty3D[playerid])) DestroyDynamic3DTextLabel(AdminDuty3D[playerid]),AdminDuty3D[playerid]=INVALID_3D_TEXT_ID;
	if(AdminDuty[playerid])
	{
		SendClientMessageToAll(COLOR_WHITE, "====================================================================");
		SendFormatMessageToAll(COLOR_LIGHTRED, "%s már nincs szolgálatban, ne zavard õt | Ha kérdésed van írj nekünk a /report paranccsal", AdminName(playerid));
 		SetPlayerColor(playerid, COLOR_INVISIBLE);
		AdminDuty[playerid] = 0;
		gBooc[playerid] = 0;
	}
	
	if(IsValidDynamic3DTextLabel(Swat3D[playerid])) DestroyDynamic3DTextLabel(Swat3D[playerid]),Swat3D[playerid]=INVALID_3D_TEXT_ID;
	
	if(InChannel(playerid, true) != NINCS)
		Channel(playerid, NINCS, true);
	if(InChannel(playerid) != NINCS)
		Channel(playerid, NINCS);
	
	new fa = -1;
	for(;++fa < MAX_FA;)
	{
	    if(FaAdatok[fa][faplayerid] == playerid)
	    {
		    FaAdatok[fa][faposx] = 0.0;
			FaAdatok[fa][faposy] = 0.0;
			FaAdatok[fa][faposz] = -20.0;
			FaAdatok[fa][fahasznalva] = false;
			FaAdatok[fa][faplayerid] = -1;
			DestroyDynamic3DTextLabel(FaAdatok[fa][falabel]);
			FaAdatok[fa][falabel]=INVALID_3D_TEXT_ID;
		}
	}
	
	new tav, egyebinfo[128];
	if(PlayerCuffed[playerid] == 1) egyebinfo = "sokkolva";
	else if(PlayerCuffed[playerid] == 2) egyebinfo = "bilincsben";
	if(Animban[playerid] && SpawnVedelem[playerid] == 0)
	{
		if(reason == 1)
		{
			if(Szint(playerid) >= 10)
			{
				if(OnlineAdminok() > 0 || PlayerInfo[playerid][pKotszer] >= 2)
				{
					if(PlayerInfo[playerid][pJailed] == 0)
						AnimbaRak(playerid);
						//Jail(playerid, "+", 3600, "ajail", "Animba kilépés");
				}
			}
		}
		if(!strlen(egyebinfo)) egyebinfo = "animban";
		else format(egyebinfo, 128, "%s, animban", egyebinfo);
	}
	
	if(Leutve[playerid])
	{
		if(!strlen(egyebinfo)) egyebinfo = "leütve";
		else format(egyebinfo, 128, "%s, leütve", egyebinfo);
	}
	
	if(PlayerMarker[playerid][mType] && !PlayerMarker[playerid][mHidden])
	{
		if(!strlen(egyebinfo)) format(egyebinfo, 128, "jelezve(%d)", PlayerMarker[playerid][mType]);
		else format(egyebinfo, 128, "%s, jelezve(%d)", egyebinfo, PlayerMarker[playerid][mType]);
	}
	
	if(!strlen(egyebinfo))
		egyebinfo = "nincs";
	
	if(!ResiVan[0]) foreach(Jatekosok, x)
	{
		/*if(RendesJatekos(x) && Tevezik[x] == playerid)
		{
			TogglePlayerSpectating(x, 0);
			SetPlayerPos(x, TVPos[x][0], TVPos[x][1], TVPos[x][2]);
			SetPlayerInterior(x, TVInt[x]);
			SetPlayerVirtualWorld(x, TVVW[x]);
			Freeze(x, 3000);
			Tevezik[x] = NINCS;
		}*/
		
		if(!Logged(x) || IsPlayerNPC(x) || !Kilepesek[x] || playerid == x) continue;
		tav = floatround(GetDistanceBetweenPlayers(playerid, x));
		if(tav <= 50 && tav >= 0.0)
		{			
			switch(reason)
			{
				case 0: SendFormatMessage(x, COLOR_GREY, "(( Kilépés: %s crashelt a közeledben (táv: %dm, egyéb: %s) ))", PlayerName(playerid), tav, egyebinfo);
				case 1: SendFormatMessage(x, COLOR_GREY, "(( Kilépés: %s kilépett a közeledben (táv: %dm, egyéb: %s) ))", PlayerName(playerid), tav, egyebinfo);
				case 2: SendFormatMessage(x, COLOR_GREY, "(( Kilépés: %s kickelve/bannolva lett a közeledben (táv: %dm, egyéb: %s) ))", PlayerName(playerid), tav, egyebinfo);
			}
		}
	}
	
	if(LezartUtat[playerid] != 0)
	{
		if(IsValidDynamicObject(LezartUtat[playerid])) DestroyDynamicObject(LezartUtat[playerid]), LezartUtat[playerid]=INVALID_OBJECT_ID;
		LezartUtZ[playerid] = 0.000000; 
		LezartUtY[playerid] = 0.000000; 
		LezartUtX[playerid] = 0.000000; 
	}	
	
	if(block[playerid] != NINCS)
		if(IsValidDynamicObject(block[playerid])) DestroyDynamicObject(block[playerid]), block[playerid]=INVALID_OBJECT_ID;
		
	if(Conn[playerid] == 1)
	{
		//TextDrawHideForAll(MoneyTxt[playerid]);
		//TextDrawHideForAll(InfoTextDraw[playerid]);
		TextDrawHideForPlayer(playerid, MoneyTxt[playerid]);
		TextDrawHideForPlayer(playerid, InfoTextDraw[playerid]);
		TextDrawHideForPlayer(playerid, InfoTextDraw2[playerid]);
		TextDrawSetString(InfoTextDraw[playerid], "Informaciok betoltese...");
		TextDrawSetString(InfoTextDraw2[playerid], "Betoltes...");
		Conn[playerid] = 0;
		CurCol[playerid] = 0;
	}
	for(new x = 0; x < MAX_VEHICLES; x++)
	{
		if(VanBombaBenne[x] == NINCS) continue;
		if(VanBombaBenne[x] == playerid)
		{
			VanBombaBenne[x] = 0;
			break;
		}
	}
	
	#if defined Megbizas
	if(PlayerInfo[playerid][pMegbizas] == 1)
	{
		foreach(Jatekosok, x)
		{
			if(LMT(x, FRAKCIO_COSANOSTRA) && PlayerInfo[x][pRank] == KivegzoRang[0])
			{
				SendFormatMessage(x, COLOR_YELLOW, "%s elhagyta a várost, várj amíg visszajön!", PlayerName(playerid));
				SetPlayerMarkerForPlayer(x, playerid, 0xFFFFFF00);
			}
		}
	}
	if(PlayerInfo[playerid][pMegbizas] == 2)
	{
		foreach(Jatekosok, x)
		{
			if(LMT(x, FRAKCIO_YAKUZA) && PlayerInfo[x][pRank] == KivegzoRang[1])
			{
				SendFormatMessage(x, COLOR_YELLOW, "%s elhagyta a várost, várj amíg visszajön!", PlayerName(playerid));				
				SetPlayerMarkerForPlayer(x, playerid, 0xFFFFFF00);
			}
		}
	}
	if(PlayerInfo[playerid][pMegbizas] == KivegzoRang[2])
	{
		foreach(Jatekosok, x)
		{
			if(LMT(x, FRAKCIO_TURKEY) && PlayerInfo[x][pRank] == 4)
			{
				SendFormatMessage(x, COLOR_YELLOW, "%s elhagyta a várost, várj amíg visszajön!", PlayerName(playerid));				
				SetPlayerMarkerForPlayer(x, playerid, 0xFFFFFF00);
			}
		}
	}
	#endif
	new bekistring[128], tipus[32];
	if(reason == 0) tipus = "crashelt";
	else if (reason == 1) tipus = "kilépett";
	else tipus = "kickelve/bannolva lett";

	format(bekistring, sizeof(bekistring), "%s %s %s", PlayerName(playerid), tipus, egyebinfo);
	BeKilepes(bekistring);

	PlayerInfo[playerid][pDrogido] = 0;
	

/*	if(PlayerInfo[playerid][pNyomkovetes] == 1)
	{
	    PlayerInfo[playerid][pNyomkoveto] = 0;
	    PlayerInfo[playerid][pNyomkovetes] = 0;
	    PlayerInfo[playerid][pJailed] = 2;
		if(PlayerInfo[playerid][pJailTime] < 600)
		    PlayerInfo[playerid][pJailTime] = 1200;
		else if(PlayerInfo[playerid][pJailTime] >= 600 && PlayerInfo[playerid][pJailTime] < 1800)
		    PlayerInfo[playerid][pJailTime] += 1200;
		else if(PlayerInfo[playerid][pJailTime] >= 1800 && PlayerInfo[playerid][pJailTime] < 3600)
		    PlayerInfo[playerid][pJailTime] += 1800;
		else
		    PlayerInfo[playerid][pJailTime] += 2000;

	    new playername[MAX_PLAYER_NAME], string[128];
	    for(new p = 0; p < MAX_PLAYERS; p++)
	    {
	        if(IsACop(p))
	        {
		        GetPlayerName(playerid, playername, sizeof(playername));
		        format(string, sizeof(string), "(( %s Gyáva módon kilépett üldözés közben! De visszakerül Sona-ba! ))");
	    	    SendClientMessage(p, COLOR_RED, string);
   	    	}
	    }
	}*/

	if(Visz[playerid] != NINCS)
		Visz[playerid] = NINCS;
		
	if(HVisz[playerid] != NINCS)
		HVisz[playerid] = NINCS;

	if(PlayerCuffed[playerid] == 2)
	{
		Jail(playerid, "+", 10800, "off", "Cuffba kilépés");
		Bilincs(playerid, 0);
	}

	/*if(Animban[playerid] == 1 && reason == 1)
	{
	Jail(playerid, "+", 9000, "off");
	}
	*/
	if(BViadal[playerid] > 0)
	{
        new BV[256];
		format(BV, sizeof(BV), "Viadal: %s kilépett a szerverrõl", PlayerName(playerid));
		SendMessage(SEND_MESSAGE_HITMAN, BV, COLOR_YELLOW);
		BVJatekosok--;
	}

	for(new q = 0; q < MAX_PLAYERS; q++)
	{
		if(Visz[q] != NINCS)
		{
			if(Visz[q] == playerid)
				Visz[q] = NINCS;
		}
		if(AdasVeteliNeki[q] != NINCS)
		{
			if(AdasVeteliNeki[q] == playerid)
				AdasVeteliNeki[q] = NINCS;
		}
	}
	if(PlayerToPoint(10.0, playerid, 1993.103, 1143.598, 8805.083) && GetPlayerInterior(playerid) == 1) //ha kamion intiben van
	{
		for(new k = 0; k < MAX_VEHICLES; k++)
		{
			new m = GetVehicleModel(k);
			if(m == 435 || m == 591)
			{
				if((k + 100) == GetPlayerVirtualWorld(playerid))
				{
					new Float:x, Float:y, Float:z;
					GetVehiclePos(k, x, y, z);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInterior(playerid, 0);
					//PlayerInfo[playerid][pCFalsePositive] = 1;
					SetPlayerPos(playerid, x+2, y, z);

				}
			}
		}
	}
	
	PlayerOnline[playerid] = false;
	if(IsPlayerConnected(playerid) && Logged(playerid) && !ResiVan[0])
	{
		PlayerSave(playerid);
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {

	        if(TaxiAccepted[i] < 999)
	        {
		        if(TaxiAccepted[i] == playerid)
		        {
		            TaxiAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Left the game", 5000, 1);
		            TaxiCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	        else if(BusAccepted[i] < 999)
	        {
		        if(BusAccepted[i] == playerid)
		        {
		            BusAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~Bus Caller~n~~r~Left the game", 5000, 1);
		            BusCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	    }
	}
	if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
	{
	    KartingPlayers --;
	}
	if(PlayersChannel[playerid] < 999)
	{
		IRCInfo[PlayersChannel[playerid]][iPlayers] -= 1;
	}
	if(HireCar[playerid] != NINCS)
	{
		UnLockCar(HireCar[playerid]);
	}
    else if(TransportDuty[playerid] == 2)
	{
		BusDrivers -= 1;
	}
	if(LMT(playerid, FRAKCIO_MENTO) || LMT(playerid, FRAKCIO_SFMENTO))
	{
	    if(OnDuty[playerid] == 1) { Medics--; }
	}
	if(IsOnkentes(playerid) && Onkentesszolgalatban[playerid])
		Medics--;
	
	if(Mechanikus[playerid])
	    Mechanics--;
	if(Tuzolto[playerid])
		Tuzoltok--;
	if((SzerkesztesAllas[playerid] == 1 || SzerkesztesAllas[playerid] == 2) && KapuID[playerid] != -1)
    {
        Kapu[KapuID[playerid]][kVan] = false;
		Kapu[KapuID[playerid]][kUID] = NINCS;
		Kapu[KapuID[playerid]][kModel] = 0;
		Kapu[KapuID[playerid]][kTav] = 0.0;
		Kapu[KapuID[playerid]][kSpeed] = 0.0;
		Kapu[KapuID[playerid]][kPos][0] = 0.0;
		Kapu[KapuID[playerid]][kPos][1] = 0.0;
		Kapu[KapuID[playerid]][kPos][2] = 0.0;
		Kapu[KapuID[playerid]][kNPos][0] = 0.0;
		Kapu[KapuID[playerid]][kNPos][1] = 0.0;
		Kapu[KapuID[playerid]][kNPos][2] = 0.0;
		Kapu[KapuID[playerid]][kNRPos][0] = 0.0;
		Kapu[KapuID[playerid]][kNRPos][1] = 0.0;
		Kapu[KapuID[playerid]][kNRPos][2] = 0.0;
		Kapu[KapuID[playerid]][kZPos][0] = 0.0;
		Kapu[KapuID[playerid]][kZPos][1] = 0.0;
		Kapu[KapuID[playerid]][kZPos][2] = 0.0;
		Kapu[KapuID[playerid]][kZRPos][0] = 0.0;
		Kapu[KapuID[playerid]][kZRPos][1] = 0.0;
		Kapu[KapuID[playerid]][kZRPos][2] = 0.0;
		Kapu[KapuID[playerid]][kBarki] = false;
		Kapu[KapuID[playerid]][kMozgo] = false;
		Kapu[KapuID[playerid]][nyit] = 0;
		Kapu[KapuID[playerid]][Vw] = NINCS;
		if(IsValidDynamicObject(Kapu[KapuID[playerid]][kOID])) DestroyDynamicObject(Kapu[KapuID[playerid]][kOID]), Kapu[KapuID[playerid]][kOID]=INVALID_OBJECT_ID;
		SzerkesztesAllas[playerid] = 0;
		KapuID[playerid] = NINCS;
		//SendClientMessage(playerid, COLOR_GREEN, "[Info]: Kiléptél a szerkesztési folyamatból, kapu sikeresen törölve!");
        return true;
    }
    if(PlayerInfo[playerid][pHullaMutat])
    {
        new cikluska = -1;
        for(;++cikluska < MAX_HULLA;)
        {
            if(PlayerInfo[playerid][pHullaIcon][cikluska] > -1)
            	DestroyDynamicMapIcon(PlayerInfo[playerid][pHullaIcon][cikluska]);
        }
        PlayerInfo[playerid][pHullaMutat] = false;
    }
	new butorszam = SzerkesztesButor[playerid];
	if(butorszam > -1)
	{
		if(!ButorInfo[butorszam][butorMegveve])
		{
			ButorInfo[butorszam][butorPosX] = 0.0;
			ButorInfo[butorszam][butorPosY] = 0.0;
			ButorInfo[butorszam][butorPosZ] = 0.0;
			ButorInfo[butorszam][butorPosRX] = 0.0;
			ButorInfo[butorszam][butorPosRY] = 0.0;
			ButorInfo[butorszam][butorPosRZ] = 0.0;
			ButorInfo[butorszam][butorVW] = 0;
			ButorInfo[butorszam][butorInterior] = 0;
			ButorInfo[butorszam][butorHasznalva] = false;
			ButorInfo[butorszam][butorMegveve] = false;
			ButorInfo[butorszam][butorTipus] = NINCS;
			ButorInfo[butorszam][butorListitem] = NINCS;
			ButorInfo[butorszam][butorModel] = 0;
			ButorInfo[butorszam][butorPosRX] = 0.0;
			ButorInfo[butorszam][butorPosRY] = 0.0;
			ButorInfo[butorszam][butorPosRZ] = 0.0;
			if(IsValidDynamicObject(ButorInfo[butorszam][butorObject])) DestroyDynamicObject(ButorInfo[butorszam][butorObject]), ButorInfo[butorszam][butorObject]=INVALID_OBJECT_ID;
		}
	}
	
	if(Munkaban[playerid] == MUNKA_BANYASZ || PlayerInfo[playerid][pBmunka] == MUNKA_BBANYASZ)
		RemovePlayerAttachedObject(playerid, ATTACH_SLOT_SISAK);
		
	if(IsKocsi(GetPlayerVehicleID(playerid), "Banyasz") && banyaszbsz[playerid])
	{
		DestroyDynamicObject(obj[0]);
		DestroyDynamicObject(obj[1]);
		DestroyDynamicObject(obj[2]);
		DestroyDynamicObject(obj[3]);
	}
	
	//szemét
	if(VanSzemetNala[playerid])
	{
		RemovePlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS);
		TrashInfo[kuka[playerid]][gId] = 0;
		TrashInfo[kuka[playerid]][tSzemet] = false;
	}
	
	//bányász kõ a kézben
	if(vanNalaKo[playerid])
	{
		RemovePlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS);
		vanNalaKo[playerid] = false;
	}
	
	//rabszállít
	if(szallit[playerid] != NINCS)
	{
		PlayerInfo[playerid][pJailed] = 14;
		szallitasz[szallit[playerid]] = false;
		szallit[playerid] = NINCS;
	}
	
	//Graffiti
	if(SzerkesztGraffiti[playerid] != NINCS)
	{
		Graffiti[SzerkesztGraffiti[playerid]][gVan] = false;
		Graffiti[SzerkesztGraffiti[playerid]][gVId] = 0;
		DestroyDynamicObject(Graffiti[SzerkesztGraffiti[playerid]][gObject]);
		SzerkesztGraffiti[playerid] = NINCS;
	}
	if(AdminGraffiti[playerid] != NINCS)
	{
		SzerkesztGraffiti[playerid] = NINCS;
	}
	
	//GPS
	if(AdminGPS[playerid] != NINCS)
	{
		GPS[AdminGPS[playerid]][gVan] = false;
		AdminGPS[playerid] = NINCS;
	}
	
	ButorKategoria[playerid] = NINCS;
	SzerkesztesButor[playerid] = NINCS;
	GumitCserel[playerid] = false;
	OlajatCserel[playerid] = false;
	AkkutCserel[playerid] = false;
	MotortCserel[playerid] = false;
	ElektronikatCserel[playerid] = false;
	FeketCserel[playerid] = false;
	KarosszeriatCserel[playerid] = false;
	JavitasAra[playerid] = 0;
	AlkatreszAr[playerid] = 0;
	NekiSzerel[playerid] = NINCS;
	Invitejog[playerid] = 0;
	Munkaban[playerid] = NINCS;
	return 1;
}

fpublic SetPlayerSpawn(playerid)
{
	
	if(IsPlayerConnected(playerid))
	{
		#if defined Clint_Activated
		KulsoFegyverFrissites(playerid, true);
		#endif
		
		//StopAudioStreamForPlayer(playerid);
		Ehseg[playerid] = 0.0;
		Vizelet[playerid] = 0.0;
		
		FegyverSkillFrissites(playerid);
		
		if(KorhazIdo[playerid] != NINCS && !Paintballozik[playerid] && !Kikepzoben[playerid] && !AdminDuty[playerid] && !ScripterDuty[playerid])
		{
			PlayerInfo[playerid][pGPS] = false;
			Radar(playerid, false);
		}
		
		/*if(EhsegBar[playerid] != INVALID_BAR_ID)
		{
            SetProgressBarValue( EhsegBar[playerid], 0.0 );
			UpdateProgressBar( EhsegBar[playerid], playerid );
			ShowProgressBarForPlayer(playerid, EhsegBar[playerid]);
		}
		if(VizeletBar[playerid] != INVALID_BAR_ID)
		{
			SetProgressBarValue( VizeletBar[playerid], 0.0 );
			UpdateProgressBar( VizeletBar[playerid], playerid );
			ShowProgressBarForPlayer(playerid, VizeletBar[playerid]);
		}*/
		
		if(Logged(playerid) && PlayerInfo[playerid][pTextDrawKeseltet] == NINCS)
		{
			TextDrawSetString(InfoTextDrawBAREHSEG[playerid], "class_hud:bar_piros0");
			TextDrawShowForPlayer(playerid, InfoTextDrawBAREHSEG[playerid]);
				
			TextDrawSetString(InfoTextDrawBARPEE[playerid], "class_hud:bar_sarga0");
			TextDrawShowForPlayer(playerid, InfoTextDrawBARPEE[playerid]);
		}
		
		if(TuzVan && LMT(playerid, FRAKCIO_TUZOLTO))
		{
			TextDrawShowForPlayer(playerid, TuzInfo[0]);
			TextDrawShowForPlayer(playerid, TuzInfo[1]);
			//TextDrawShowForPlayer(playerid, TuzInfo[2]);
			
			//printf("SetPlayerSpawn - TuzVan - AppendArrayData");
			for(new t = 0; t < TUZ_MAX; t++)
			{
				if(Tuz[t][tuzAktiv] && !Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, playerid))
					Streamer_AppendArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, playerid);
			}
		}
		else
		{
			TextDrawHideForPlayer(playerid, TuzInfo[0]);
			TextDrawHideForPlayer(playerid, TuzInfo[1]);
			//TextDrawHideForPlayer(playerid, TuzInfo[2]);
		}
		
		SetPlayerDrunkLevel(playerid, 0);
		Animbanemrakhato[playerid] = 0;
		Animban[playerid] = 0;
		SetHealth(playerid, MAXHP);
		Bilincs(playerid, 0);
		AJVarakozas[playerid] = 10;
		ElsoSpawn[playerid] = 0;
		if(PlayerInfo[playerid][pSzerelt] < 0)
		{
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Debug futtatva]: Szereléseid száma átírva! Régi: %d | Új: 0", PlayerInfo[playerid][pSzerelt]);
		    PlayerInfo[playerid][pSzerelt] = 0;
		}
		if(!LMT(playerid, FRAKCIO_NAV) && PlayerInfo[playerid][pVK] == 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "[Debug futtatva]: Vámkommandó tagság elvéve.");
		    PlayerInfo[playerid][pVK]=0;
		}
		if(PlayerInfo[playerid][pKozmunka] != 0 && PlayerInfo[playerid][pKozmunkaIdo] > 0)
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Figyelmeztetés] Még %d játszott óra lehetõséged van ledolgozni a közmunkát.", PlayerInfo[playerid][pKozmunkaIdo]);
	    PlayerInfo[playerid][pSpawned] = 1;
	    Almaszedeskozbe[NemregiKocsi[playerid]] = 0;
		NemregiKocsi[playerid] = 0;
		IdojarasValt(playerid, IdoJaras[iMost]);
		
		if(KikepzobenVan(playerid))
		{
			SetPlayerInterior(playerid, 10);
			
			if(GetPlayerVirtualWorld(playerid) == 134)
			{
				//PlayerInfo[playerid][pTeleportAlatt] = 1;
				//PlayerInfo[playerid][pCFalsePositive] = 1;
				if(random(2))
					SetPlayerPos(playerid, 2075.8618,-2595.4656,13.7491);
				else
					SetPlayerPos(playerid, 1930.4042,-2498.4412,13.7491);
			}
			else
			{
				//PlayerInfo[playerid][pTeleportAlatt] = 1;
				//PlayerInfo[playerid][pCFalsePositive] = 1;
				if(random(2))
					SetPlayerPos(playerid, -974.8533,1090.3230,1344.9747);
				else
					SetPlayerPos(playerid, -1132.2489,1029.3568,1345.7339);
			}
			KorhazIdo[playerid] = NINCS;
		    return 1;
		}
		
		if(PlayerInfo[playerid][pGPS] == true)
			Radar(playerid, true);
		
		if(Paintballozik[playerid])
		{
			new rand;
			WeaponResetAll(playerid);
			if(PlayerInfo[playerid][pPBFegyver][0] != 0)
				WeaponGiveWeapon(playerid, PlayerInfo[playerid][pPBFegyver][0], 500);
			if(PlayerInfo[playerid][pPBFegyver][1] != 0)	
				WeaponGiveWeapon(playerid, PlayerInfo[playerid][pPBFegyver][1], 500);
			if(PlayerInfo[playerid][pPBFegyver][2] != 0)
				WeaponGiveWeapon(playerid, PlayerInfo[playerid][pPBFegyver][2], 500);
			if(PlayerInfo[playerid][pPBFegyver][3] != 0)
				WeaponGiveWeapon(playerid, PlayerInfo[playerid][pPBFegyver][3], 500);
			
			if(PaintballOlesek[playerid] > 0)
				PaintballOlesek[playerid]--;
				
			SendFormatMessage(playerid, COLOR_YELLOW, "[Paintball] Pontjaid: %d",PaintballOlesek[playerid]);
			SetPlayerVirtualWorld(playerid, 98765, "PBSpawn");
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			if(PBTerem[playerid] == 2) { rand = random(sizeof(PBSpawnSivatag)); SetPlayerPos(playerid, ArrExt(PBSpawnSivatag[rand])); SetPlayerInterior(playerid, 0); }
			elseif(PBTerem[playerid] == 3) { rand = random(sizeof(PBSpawnSivatagNagy)); SetPlayerPos(playerid, ArrExt(PBSpawnSivatagNagy[rand])); SetPlayerInterior(playerid, 0); }
			elseif(PBTerem[playerid] == 4) { rand = random(sizeof(PBSpawnArea)); SetPlayerPos(playerid, ArrExt(PBSpawnArea[rand])); SetPlayerInterior(playerid, 0); }
			else { rand = random(sizeof(PaintballSpawns)); SetPlayerPos(playerid, ArrExt(PaintballSpawns[rand])); SetPlayerInterior(playerid, 10); }
		
			KorhazIdo[playerid] = NINCS;
			SpawnVedelem[playerid] = 7;
			Halal[playerid] = false;
			//SendFormatMessageToAll(COLOR_YELLOW,"Halal állítva %d -nek", playerid);
		    return 1;
		}
		
		/*if(Haldoklik[playerid])
		{
			SetPlayerVirtualWorld(playerid, HaldoklasVW[playerid], "haldoklás");
			SetPlayerInterior(playerid, HaldoklasInt[playerid]);
			SetPlayerPos(playerid, HaldoklasPoz[playerid][0], HaldoklasPoz[playerid][1], HaldoklasPoz[playerid][2]);
			SetPlayerHealth(playerid, 150.0);
			AnimbaRak(playerid, false);
			Halal[playerid] = false;
		}*/
		
		//Ez kell
		if(PlayerInfo[playerid][pJailed] == 1)
		{
			SetPlayerVirtualWorld(playerid, 0, "spawn1");
			SetPlayerInterior(playerid, 6);
			
			Freeze(playerid, 90000);
			SetPlayerPos(playerid,264.6288,77.5742,1001.0391);
			return 1;
		}
		else if(PlayerInfo[playerid][pJailed] == 3)
		{
			SetPlayerPos(playerid, 972.831, 2.768, 1001.148);
			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 8888, "spawn3");
			return 1;
		}
		else if(PlayerInfo[playerid][pJailed] == 4)
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 2081.677, -2568.560, 13.655);
			SetPlayerVirtualWorld(playerid, 129, "spawn4");
			return 1;
		}
		else if(PlayerInfo[playerid][pJailed] == 5)
		{
		    SetPlayerInterior(playerid, 3);
			SetPlayerPos(playerid,198.2832,162.2480,1003.0300);
			SetPlayerVirtualWorld(playerid, 0, "spawn5");
			return 1;
		}
		else if(PlayerInfo[playerid][pJailed] == 6)
		{
			SetPlayerPos(playerid, 414.628, -11.005, 1001.812);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 10000 + playerid, "spawn6");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 10) // LSPD
		{
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 0, "spawn10");
			Freeze(playerid, 5000);
			SetPlayerPos(playerid, 264.542, 77.505, 1001.39);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
		else if(PlayerInfo[playerid][pJailed] == 11) // Sheriff
		{
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 30, "spawn11");
			Freeze(playerid, 5000);
			SetPlayerPos(playerid, 264.542, 77.505, 1001.39);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
		else if(PlayerInfo[playerid][pJailed] == 12) // Katonaság
		{
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 2, "spawn12");
			Freeze(playerid, 5000);
			SetPlayerPos(playerid, 264.542, 77.505, 1001.39);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
		else if(PlayerInfo[playerid][pJailed] == 13) //  FBI
		{
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 3, "spawn13");
			Freeze(playerid, 5000);
			SetPlayerPos(playerid, 264.542, 77.505, 1001.39);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
		else if(PlayerInfo[playerid][pJailed] == 14)
		{
			Freeze(playerid, 5000);
			cella[playerid] = szabadCella();
			
			if(cella[playerid] != NINCS)
				SetPlayerPos(playerid, fortCellak[cella[playerid]][0], fortCellak[cella[playerid]][1], fortCellak[cella[playerid]][2]);
			else
				SetPlayerPos(playerid, fortCellak[0][0], fortCellak[0][1], fortCellak[0][2]);

			SetPlayerVirtualWorld(playerid, 126, "spawn14");
			SetPlayerInterior(playerid, 0);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
		if(KorhazIdo[playerid] > NINCS && !Paintballozik[playerid] && !Kikepzoben[playerid] && !AdminDuty[playerid] && !ScripterDuty[playerid] && PlayerInfo[playerid][pMostlepetbeTime] > UnixTime)
		{
			WeaponResetAll(playerid);
			SetPlayerArmour(playerid, 0.0);
			Feketeseg(playerid, true);
			Halal[playerid] = false;
			SetPlayerVirtualWorld(playerid, 104, "spawn9 LoginKorhaz"); // 104 = Interior VWje
			SetPlayerInterior(playerid,1);
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 1944.6885,-2458.5464,13.5703);
			Streamer_UpdateEx(playerid, 1944.6885,-2458.5464,13.5703);
			SendClientMessage(playerid, COLOR_GREY, "Eszméletlen vagy még mindig. Amint felgyógyultál felébredsz!");
	        TogglePlayerControllable(playerid, 0);
			Freeze(playerid, KorhazIdo[playerid]);
			PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);
			tformat(128, "%s LOGINkórház jail ideje: %d mp", PlayerName(playerid), KorhazIdo[playerid]);
			EgyebLog(_tmpString);
		    return 1;
		}
		else if(PlayerInfo[playerid][pJailed] == 8)
		{
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 414.628, -11.005, 1001.812);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 20000 + playerid, "spawn8");
			return 1;
		}
		else if(KorhazIdo[playerid] > NINCS && !Paintballozik[playerid] && !Kikepzoben[playerid] && !AdminDuty[playerid] && !ScripterDuty[playerid]/* && !Haldoklik[playerid]*/)
		{
			WeaponResetAll(playerid);
			SetPlayerArmour(playerid, 0.0);
			Feketeseg(playerid, true);
			Halal[playerid] = false;
			SetPlayerVirtualWorld(playerid, 104, "spawn7 korhaz"); // 104 = Interior VWje
			SetPlayerInterior(playerid,1);
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 1944.6885,-2458.5464,13.5703);
			Streamer_UpdateEx(playerid, 1944.6885,-2458.5464,13.5703);
			SendClientMessage(playerid, COLOR_GREY, "Eszméletlen vagy. Amint felgyógyultál felébredsz!");
	        TogglePlayerControllable(playerid, 0);
			Freeze(playerid, 90000+PlayerInfo[playerid][pOlesIdo]);
	       
			KorhazIdo[playerid] = 90+PlayerInfo[playerid][pOlesIdo];
	        PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);
			tformat(128, "%s kórház jail ideje: %d mp", PlayerName(playerid), 90+PlayerInfo[playerid][pOlesIdo]);
			EgyebLog(_tmpString);
		    return 1;
		}

		if(MostLepettBe[playerid] == 1 && PlayerInfo[playerid][pCPosX] != 0.0 && (UnixTime - PlayerInfo[playerid][pUtolsoBelepes]) < 1800)
		{
			FixPos( PlayerInfo[playerid][pCPosX], PlayerInfo[playerid][pCPosY], PlayerInfo[playerid][pCPosZ], PlayerInfo[playerid][pCInt], PlayerInfo[playerid][pCVW] );
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, PlayerInfo[playerid][pCPosX], PlayerInfo[playerid][pCPosY], PlayerInfo[playerid][pCPosZ]);
			Freeze(playerid, 5000);
		//	Streamer_Update(playerid);
			
			SetPlayerInterior(playerid, PlayerInfo[playerid][pCInt]);
			SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pCVW], "spawn8");
			Streamer_UpdateEx(playerid, PlayerInfo[playerid][pCPosX], PlayerInfo[playerid][pCPosY], PlayerInfo[playerid][pCPosZ], PlayerInfo[playerid][pCVW], PlayerInfo[playerid][pCInt]);
			
			if(PlayerInfo[playerid][pCVW] >= 50000 && PlayerInfo[playerid][pCVW] <= (50000 + MAX_PLAYERS))
			{
				if(NPCBuszban(playerid) != NINCS)
					Freeze(playerid, 3000);
			}
			
			if(PlayerInfo[playerid][pCVW] == 9999)
				Freeze(playerid, 5000);

			iPlayerHealth[playerid] = PlayerInfo[playerid][pCelet];
			JatekosElete[playerid] = PlayerInfo[playerid][pCelet];
			SetHealth(playerid, PlayerInfo[playerid][pCelet]);
			SetPlayerArmour(playerid, PlayerInfo[playerid][pCpajzs]);

			Animbanemrakhato[playerid] = 0;
			Animban[playerid] = 0;

			MostLepettBe[playerid] = 0;
			
			WeaponRefreshAttachments(playerid);
			SetTimerEx("SendLoginMessage", 5000, 0, "d", playerid);
			return 1;
		}
		
		//new house = PlayerInfo[playerid][pPhousekey];
		/*if(house != NINCS)
		{
		    if(PlayerInfo[playerid][pSpawnchange] == 0) //
		    {
				InvisibleColor(playerid);
				//PlayerInfo[playerid][pTeleportAlatt] = 1;
				//PlayerInfo[playerid][pCFalsePositive] = 1;
				SetPlayerPos(playerid, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]); // Warp the player
				SetPlayerVirtualWorld(playerid, 0, "spawn9");
				SetPlayerInterior(playerid, 0);
				SetTimerEx("SendLoginMessage", 5000, 0, "d", playerid);
				return 1;
			}
		}
	
		if(PlayerInfo[playerid][pPhousekey] != NINCS)
		{
			new haz = PlayerInfo[playerid][pPhousekey];
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, HouseInfo[haz][hEntrancex], HouseInfo[haz][hEntrancey], HouseInfo[haz][hEntrancez]);
			return 1;
		}
		if(PlayerInfo[playerid][pPhousekey2] != NINCS)
		{
			new haz = PlayerInfo[playerid][pPhousekey2];
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, HouseInfo[haz][hEntrancex], HouseInfo[haz][hEntrancey], HouseInfo[haz][hEntrancez]);
			return 1;
		}
		if(PlayerInfo[playerid][pPhousekey3] != NINCS)
		{
			new haz = PlayerInfo[playerid][pPhousekey3];
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, HouseInfo[haz][hEntrancex], HouseInfo[haz][hEntrancey], HouseInfo[haz][hEntrancez]);
			return 1;
		}
		
		//PlayerInfo[playerid][pTeleportAlatt] = 1;
		//PlayerInfo[playerid][pCFalsePositive] = 1;
		SetPlayerPos(playerid, 1480.6, -1749.7, 15.445);
		SetPlayerVirtualWorld(playerid, 0, "spawn12");
		SetPlayerInterior(playerid, 0);*/
		
		AnimClearBlockedUntil[playerid] = (UnixTime + 30);
		//ShowPlayerFadeScreenToBlank(playerid, 10, 0, 0, 0, 255);
		
		if(SkipRealSpawn[playerid] >= UnixTime /*|| PlayerInfo[playerid][pSpawnType] == SPAWN_TYPE_FIRST_LOGIN*/)
		{
			//SkipRealSpawn[playerid] = 0;
			Tele(playerid, 1480.6, -1749.7, 15.445, .VW = 0, .Int = 0, .freeze = 0);
			SetTimerEx("SendLoginMessage", 5000, 0, "d", playerid);
			return 1;
		}
		
		new bool:spawnedAtHouse;
		if(PlayerInfo[playerid][pSpawnType] == SPAWN_TYPE_HOUSE)
		{
			new haz = PlayerInfo[playerid][pSpawnId];
			if(IsValidHouse(haz))
			{
				new belso = HouseInfo[haz][hBelso];
				Tele(playerid, IntInfo[belso][iBedX], IntInfo[belso][iBedY], IntInfo[belso][iBedZ], .VW = haz, .Int = IntInfo[belso][iNumber], .Angle = IntInfo[belso][iBedAngle], .freeze = 0);
				InterpolateCameraPos(playerid, ArrExt(IntInfo[belso][iCamStartPos]), ArrExt(IntInfo[belso][iCamEndPos]), 6000);
				InterpolateCameraLookAt(playerid, ArrExt(IntInfo[belso][iCamStartLookAt]), ArrExt(IntInfo[belso][iCamEndLookAt]), 6000);
				spawnedAtHouse = true;
			}
		}
		
		// szálló - ágyaknál
		if(!spawnedAtHouse)
		{
			PickedSpawnSpot[playerid] = random(5);
			switch(PickedSpawnSpot[playerid])
			{
				case 0:
				{
					Tele(playerid, 1169.955, 2566.082, 11.686, .VW = VW_HAJLEKTALAN_SZALLO, .Int = 0, .Angle = 312.916, .freeze = 0);
				}
				
				case 1:
				{
					Tele(playerid, 1167.593, 2568.432, 11.650, .VW = VW_HAJLEKTALAN_SZALLO, .Int = 0, .Angle = 309.565, .freeze = 0);
				}
				
				case 2:
				{
					Tele(playerid, 1171.933, 2568.195, 11.681, .VW = VW_HAJLEKTALAN_SZALLO, .Int = 0, .Angle = 146.340, .freeze = 0);
				}
				
				case 3:
				{
					Tele(playerid, 1170.063, 2570.277, 11.689, .VW = VW_HAJLEKTALAN_SZALLO, .Int = 0, .Angle = 136.000, .freeze = 0);
				}
				
				case 4:
				{
					Tele(playerid, 1167.934, 2572.439, 11.692, .VW = VW_HAJLEKTALAN_SZALLO, .Int = 0, .Angle = 141.397, .freeze = 0);
				}
			}
		}

		new wakeUpDelay = 5;
		if(PlayerInfo[playerid][pSpawnType] == SPAWN_TYPE_FIRST_LOGIN && PlayerInfo[playerid][pLevel] == 1)
		{
			wakeUpDelay = 9999;
			ShowPlayerFilledScreen(playerid, 0, 0, 0, 255);
			ShowPlayerWelcomeDialog(playerid);
		}
		else
		{
			SpawnFinish(playerid);
		}

		if(PlayerInfo[playerid][pSpawnType] == SPAWN_TYPE_FIRST_LOGIN)
			PlayerInfo[playerid][pSpawnType] = SPAWN_TYPE_DEFAULT;
			
		Freeze(playerid);
		ApplyAnimation(playerid, "CRACK", "CRCKIDLE2", 4.0, 1, 1, 1, 1, 1);
		CanWakeUpAfter[playerid] = (UnixTime + wakeUpDelay);
		ForceSleepAnimation[playerid] = (UnixTime + wakeUpDelay);
		return 1;
		
	}
	return 1;
}

stock ShowPlayerWelcomeDialog(playerid)
{
	new msg[4096];
	format(msg, sizeof(msg), "             \t{FFFF00}Egy új lehetõségekkel teli napra virradtunk Los Santosban. \n\
{00FFFF}Új életed megkezdéséhez menj el a legközelebbi boltba, ami a hajléktalanszállóval szemben található.\n\
Itt szerezd be az alapvetõ felszereléseket, mint: \n\
GPS, Telefon, Telefonkönyv, 2 csomag kötszer, 3 darab szendvics. A boltban az alábbi paranccsal tudsz vásárolni:\n\
{FFFF00}/buy{00FFFF}. Ne feledd, hogy vegyél egy biciklit is, - amit szintén a boltban tudsz beszerezni \n\
{FFFF00}/bicikli vesz{00FFFF}  parnccsal -, mert nagyon hasznos lesz ha a városban akad elintéznivalód. \n\
Elõvételét, elrakását a {FFFF00}/bicikli{00FFFF}  mutatja meg neked.\n\
	\n\
             \tAmint beszerezted ezeket a dolgokat neki is láthatsz keresni egy új munkahelyet. Munkát a  a munkaügyi \n\
központ a Városháza harmadik emeletén jobbra az elsõ irodában veheted fel. Ott fel kell venni a kapcsolatot egy \n\
ügyintézõvel. A Városházát az új GPS-ed segítségével találod meg({FFFF00}/gps be és /gps{00FFFF}) \n\
LSvaroshaza parancs mutatni fogja a helyét, egy piros négyzettel a térképen. A GPS-re a legújabb szoftver van \n\
feltöltve, és csomó helyet le tudsz keresni benne a{00FFFF} /gps lista{00FFFF}  segítségével, így könnyedén \n\
eltalálsz szinte bárhova. Javaslom tanulmányozd át.\n\
	\n\
             \tÉleted megkezdéséhez jóváírunk neked: 300.000 ezer forintot, ebbõl gazdálkodj amíg nem találsz munkahelyet, \n\
nagyon vigyázz rá, ne költsd el felesleges dolgokra. Azt tanácsolom neked mielõtt elhagynád, hogy egy \n\
bankszámlán lenne a legjobb helye, és haszos is, mert már a legtöbb helyen lehet bankkártyával fizetni. Bankban \n\
megtudod nyitni az elsõ bankszámlád és ide várhatod elsõ fizetésed is, GPS-en keresd ki a Bank helyét, menj be, \n\
és ott segíteni fog egy alkalmazott. ( Épületekbe {FFFF00}/enter{00FFFF} paranccsal tudsz bemenni )\n\
	\n\
           \tHa netán elakadnál az adminsegédeinktõl bármikor segítséget kérhetsz a {FFFF00}/report join 0{00FFFF} paranccsal.\n\
           \tDe a Szeretetszolgálatos kollégákat is nyugodtad zaklathatod, szívesen segítenek, parancsa az {FFFF00}/SSSpm{00FFFF}.\n\
	\n\
				\t\t{FFFF00}Sok sikert, jó idõtöltést kívánunk a szerveren!"
	);
	
	msg = str_replace_huge("PLAYERNEVE", PlayerInfo[playerid][pNev], msg);

	CustomDialog(playerid, D:welcomeDialog, DIALOG_STYLE_MSGBOX, "Kezdés", msg, "Folytatás", "");
}

Dialog:welcomeDialog(playerid, result, listitem, inputtext[])
{
	HidePlayerFilledScreen(playerid);
	SpawnFinish(playerid);
}

stock SpawnFinish(playerid)
{
	if(PlayerInfo[playerid][pSpawnType] != SPAWN_TYPE_HOUSE)
	{
		switch(PickedSpawnSpot[playerid])
		{
			case 0:
			{
				InterpolateCameraPos(playerid, 1164.076, 2570.675, 12.646, 1171.080, 2570.156, 13.152, 6000);
				InterpolateCameraLookAt(playerid, 1168.953, 2570.610, 11.545, 1169.746, 2565.788, 11.119, 6000);
			}
			
			case 1:
			{
				InterpolateCameraPos(playerid, 1164.076, 2570.675, 12.646, 1169.339, 2571.174, 12.638, 6000);
				InterpolateCameraLookAt(playerid, 1168.953, 2570.610, 11.545, 1166.750, 2567.321, 10.781, 6000);
			}
			
			case 2:
			{
				InterpolateCameraPos(playerid, 1164.076, 2570.675, 12.646, 1169.865, 2565.168, 13.159, 6000);
				InterpolateCameraLookAt(playerid, 1168.953, 2570.610, 11.545, 1172.269, 2568.898, 10.855, 6000);
			}
			
			case 3:
			{
				InterpolateCameraPos(playerid, 1164.076, 2570.675, 12.646, 1167.965, 2567.909, 12.861, 6000);
				InterpolateCameraLookAt(playerid, 1168.953, 2570.610, 11.545, 1170.887, 2571.212, 10.504, 6000);
			}
			
			case 4:
			{
				InterpolateCameraPos(playerid, 1164.076, 2570.675, 12.646, 1166.264, 2568.616, 13.153, 6000);
				InterpolateCameraLookAt(playerid, 1168.953, 2570.610, 11.545, 1167.927, 2572.703, 10.800, 6000);
			}
		}
		
		new house = PlayerInfo[playerid][pPhousekey];
		if(house != NINCS)
		{
			Msg(playerid, "A hajléktalan szállón ébredtél", false, COLOR_LIGHTBLUE);
			Msg(playerid, "Ha legközelebb a saját lakásodnál szeretnél ébredni, a /beállítások paranccsal módosíthatod", false, COLOR_LIGHTBLUE);
		}
		else
			Msg(playerid, "A hajléktalan szállón ébredtél, mivel még nincs saját lakásod", false, COLOR_LIGHTBLUE);
	}
		
	Msg(playerid, "Az Y gomb megnyomásával a karaktered felébred", false, COLOR_LIGHTBLUE);
	CanWakeUpAfter[playerid] = (UnixTime + 5);
	ForceSleepAnimation[playerid] = (UnixTime + 5);
	
	SetTimerEx("SendLoginMessage", 10000, 0, "d", playerid);
}

fpublic SendLoginMessage(playerid)
{
	if(IsPlayerConnected(playerid) && !DontWriteJustLoggedIn[playerid] && AdminDuty[playerid] == 0)
	{
		if(!ResiVan[0]) foreach(Jatekosok, i)
		{
			new tav;
			if(!Logged(i) || IsPlayerNPC(i) || !Belepesek[i] || playerid == i || GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(i) || GetPlayerInterior(playerid) != GetPlayerInterior(i)) continue;
			tav = floatround(GetDistanceBetweenPlayers(playerid, i));
			if(tav <= 50 && tav >= 0.0)
				SendFormatMessage(i, COLOR_GREY, "(( Belépés: %s belépett a közeledben (táv: %dm) ))", PlayerName(playerid), tav);
		}
	}
}

//------------------------------------------------------------------------------------------------------

stock SetVehicleIndex(playerid, vehicleid, bool:left=false, bool:right=false, bool:kozos=false)
{
	if(right)
	{
			new trailerid;
			if(!left || !kozos)
			{
				if(IsValidDynamicObject(VehicleInfo[vehicleid][BalIndex1])) DestroyDynamicObject(VehicleInfo[vehicleid][BalIndex1]), VehicleInfo[vehicleid][BalIndex1]=INVALID_OBJECT_ID;
				if(IsValidDynamicObject(VehicleInfo[vehicleid][BalIndex2])) DestroyDynamicObject(VehicleInfo[vehicleid][BalIndex2]), VehicleInfo[vehicleid][BalIndex2]=INVALID_OBJECT_ID;
				if(IsTrailerAttachedToVehicle(vehicleid))
				{
					trailerid=GetVehicleTrailer(vehicleid);
					if(IsValidDynamicObject(VehicleInfo[trailerid][BalTrailer1])) DestroyDynamicObject(VehicleInfo[trailerid][BalTrailer1]), VehicleInfo[trailerid][BalTrailer1]=INVALID_OBJECT_ID;
					if(IsValidDynamicObject(VehicleInfo[trailerid][BalTrailer2])) DestroyDynamicObject(VehicleInfo[trailerid][BalTrailer2]), VehicleInfo[trailerid][BalTrailer2]=INVALID_OBJECT_ID;
				}
				VehicleInfo[vehicleid][BalIndex] = 0;
			}
			new bool:ellenoriz=false;
			if(IsValidDynamicObject(VehicleInfo[vehicleid][JobbIndex1])) DestroyDynamicObject(VehicleInfo[vehicleid][JobbIndex1]), VehicleInfo[vehicleid][JobbIndex1]=INVALID_OBJECT_ID,ellenoriz = true;
			if(IsValidDynamicObject(VehicleInfo[vehicleid][JobbIndex2])) DestroyDynamicObject(VehicleInfo[vehicleid][JobbIndex2]), VehicleInfo[vehicleid][JobbIndex2]=INVALID_OBJECT_ID,ellenoriz = true;
			if(IsTrailerAttachedToVehicle(vehicleid))
			{
				trailerid=GetVehicleTrailer(vehicleid);
				if(IsValidDynamicObject(VehicleInfo[trailerid][JobbTrailer1])) DestroyDynamicObject(VehicleInfo[trailerid][JobbTrailer1]), VehicleInfo[trailerid][JobbTrailer1]=INVALID_OBJECT_ID,ellenoriz = true;
				if(IsValidDynamicObject(VehicleInfo[trailerid][JobbTrailer2])) DestroyDynamicObject(VehicleInfo[trailerid][JobbTrailer2]), VehicleInfo[trailerid][JobbTrailer2]=INVALID_OBJECT_ID,ellenoriz = true;
			}
			
			if(ellenoriz)
			{
				VehicleInfo[vehicleid][JobbIndex]=0;
				return 1;	
			}
			
			VehicleInfo[vehicleid][JobbIndex1] = CreateDynamicObject(19294, 10.0, 10.0, 10.0, 0, 0, 0);
			VehicleInfo[vehicleid][JobbIndex2] = CreateDynamicObject(19294, 10.0, 10.0, 10.0, 0, 0, 0);
			switch(GetVehicleModel(vehicleid))
			{
				case 417, 425, 430, 432, 441, 446, 447, 449, 452, 453, 454, 460, 464, 465, 469, 472, 473, 476, 481, 484, 487, 488, 493, 497, 501, 509, 510, 511, 512, 513, 519, 520, 537, 538, 539, 548, 553, 563, 564, 569, 570, 571, 577, 590, 592, 593, 594, 595:
				{
					VehicleInfo[vehicleid][JobbIndex] = 0;
					return 1;
				}
				case 400:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.929999, -2.275004, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.949999, 2.069999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 401:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.969999, -2.305005, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.039999, 2.495009, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 402:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.934999, -2.590011, 0.039999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.999999, 2.565011, -0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 403:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.549999, -4.195048, -0.719999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.989999, 4.455054, -0.809999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 404:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.819999, -2.720014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.694999, 2.280004, -0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 405:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.874999, -2.720014, -0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.874999, 2.325005, -0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 406:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 2.230003, -5.130069, 0.439999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.924998, 4.985066, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 407:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.999999, -3.515032, 0.070000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.844999, 4.145047, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 408:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.829999, -4.035044, -0.504999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.974999, 4.835062, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 409:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.859999, -3.905041, -0.030000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.909999, 3.440031, -0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 410:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.829999, -2.165001, 0.104999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.879999, 2.150001, 0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 411:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.854999, -2.470008, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.999999, 2.520009, -0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 412:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.989999, -3.595034, -0.154999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.009999, 2.725014, -0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 413:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.909999, -2.660013, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.954999, 2.570011, -0.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 414:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.104999, -3.405030, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.709999, 2.875018, -0.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 415:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.749999, -2.430008, 0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.924999, 2.495009, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 416:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.369999, -3.665036, 1.459998, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.049999, 2.935019, 0.030000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 418:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.004999, -2.545010, 0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.984999, 2.360006, -0.219999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 419:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.929999, -3.005021, -0.279999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.014999, 2.375006, -0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 420:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.009999, -2.705014, -0.004999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.004999, 2.285004, -0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 421:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.839999, -2.895018, -0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.909999, 2.530010, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 422:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.914999, -2.470009, -0.259999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.794999, 2.290004, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 423:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.839999, -2.250004, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.774999, 2.325005, 0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 424:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.749999, -1.619998, 0.240000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.874999, 1.354999, 0.159999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 426:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.014999, -2.645013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.059999, 2.290004, -0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 427:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.934999, -3.925042, 0.339999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.999999, 2.695014, 0.249999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 428:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.924999, -2.965020, 0.175000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.939999, 2.435008, 0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 429:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.814999, -2.435008, -0.024999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.799999, 2.275004, -0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 431:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.039999, -5.810085, -0.009999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.944999, 5.890087, 0.399999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 433:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.334998, -4.735060, -0.084999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.264999, 3.725037, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 434:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.659999, -1.964998, -0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.619999, 1.894998, -0.309999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 436:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.889999, -2.485009, 0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.874999, 2.240003, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 437:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.164999, -5.330074, 1.279999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.194999, 5.560079, -0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 438:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.064999, -2.520009, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.119999, 2.370006, -0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 439:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.759999, -2.650012, -0.364999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.804999, 2.370006, -0.479999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 440:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.909999, -2.625012, 0.080000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.979999, 2.565011, -0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 442:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.024999, -3.125023, -0.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.019999, 2.810016, -0.189999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 443:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.474998, -6.870109, -0.729999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.074999, 5.820085, -1.029999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 444:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.119999, -3.065022, 0.539999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.139999, 2.730014, 0.689999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 445:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.924999, -2.800016, -0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.939999, 2.335005, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 448:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.180000, -0.999999, -0.174999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.250000, 0.479999, 0.254999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 451:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.864999, -2.560011, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.954999, 1.944998, -0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 455:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.349998, -4.560056, -0.784999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.294999, 3.730037, -0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 456:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.209999, -4.560056, -0.669999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.944999, 3.360029, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 457:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.509999, -1.294998, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.449999, 1.179999, -0.095000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 458:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.949999, -2.805016, -0.165000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.974999, 2.415007, -0.145000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 459:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.889999, -2.640012, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.974999, 2.580011, -0.085000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 461:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.200000, -1.074999, 0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.210000, 0.749999, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 462:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.155000, -0.909999, -0.194999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.210000, 0.749999, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 463:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.180000, -1.044999, 0.129999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.195000, 0.749999, 0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 466:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.009999, -2.770015, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.904999, 2.625012, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 467:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.924999, -3.025021, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.904999, 2.820017, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 468:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.145000, -0.864999, 0.119999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.245000, 0.494999, 0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 470:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.019999, -2.685013, -0.234999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.054999, 2.160001, 0.189999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 471:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.399999, -0.779999, 0.204999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.364999, 0.764999, 0.314999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 474:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.959999, -2.825016, -0.219999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.894999, 2.590011, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 475:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.859999, -2.825016, -0.249999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.859999, 2.485009, -0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 477:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.019999, -2.660013, 0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.864999, 2.485009, -0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 478:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.834999, -2.555010, -0.289999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.079999, 1.994998, 0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 479:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.939999, -2.755015, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.984999, 2.525010, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 480:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.844999, -2.375006, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.619999, 2.295005, -0.439999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 482:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.859999, -2.565011, -0.289999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.894999, 2.405007, -0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 483:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.644999, -2.765015, -0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.794999, 2.610012, -0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 485:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.664999, -1.444998, -0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.644999, 1.749998, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 486:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.569999, -3.180025, 1.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.819999, 1.449998, 0.769999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 489:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.119999, -2.655013, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.114999, 2.590011, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 490:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.099999, -3.095023, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.084999, 3.190025, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 491:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.834999, -2.910018, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.829999, 2.500009, -0.099999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 492:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.899999, -2.795016, -0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.684999, 2.500009, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 494:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.789999, -2.890018, 0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.854999, 2.365006, -0.194999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 495:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.094999, -2.205002, -0.020000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.109999, 2.365006, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 496:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.934999, -2.125000, 0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.939999, 2.190002, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 498:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.954999, -3.110023, 0.334999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.879999, 3.080023, 0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 499:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.119999, -3.425030, 0.409999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.779999, 2.495009, -0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 500:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.739999, -1.969998, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.399999, 2.125001, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 502:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.774999, -2.715014, -0.010000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.859999, 2.605012, -0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 503:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.829999, -2.840017, -0.155000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.859999, 2.410007, -0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 504:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.069999, -2.780015, -0.155000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.894999, 2.635012, -0.089999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 505:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.074999, -2.625012, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.089999, 2.605012, 0.020000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 506:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.049999, 2.090000, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.814999, -2.460008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 507:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.049999, 3.250026, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.024999, -2.845017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 508:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.104999, 3.135024, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.584998, -3.995043, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 514:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.349998, 4.325051, 0.140000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.224999, -4.990066, -0.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 515:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.349998, 4.325051, -0.519999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.299998, -4.990066, -1.164999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 516:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 517:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 518:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 521:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.204999, 0.674999, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 522:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.229999, 0.714999, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 523:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.229999, 0.714999, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 524:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.139999, -3.970043, -1.024999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.644998, 4.080045, -0.319999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 525:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.224999, -3.060022, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.179999, 2.905019, 0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 526:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.889999, -2.325005, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.004999, 2.440008, -0.105000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 527:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.889999, -2.230003, 0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.964999, 2.465008, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 528:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.049999, 2.530010, 0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.134999, -2.640012, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 529:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.044999, 2.610012, 0.115000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.124999, -2.670013, 0.244999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 530:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.474999, -1.874998, 1.314998, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 531:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.419999, 1.579998, -0.169999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 532:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.389998, 3.050022, 1.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.684999, -1.974998, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 533:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.004999, 2.445008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.054999, -2.520010, -0.009999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 534:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.109999, 2.910019, -0.164999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.599999, -2.700014, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 535:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.829999, 2.515010, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.934999, -2.700014, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 536:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.829999, 2.515010, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.739999, -3.105023, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 540:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.829999, -2.745015, -0.115000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.944999, 2.585011, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 541:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.724999, -2.400007, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.684999, 2.390007, -0.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 542:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.859999, 2.650013, -0.040000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.689999, -2.960020, -0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 543:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.799999, 2.235003, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.014999, -2.620012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 544:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.729999, 3.720037, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.834999, -3.355029, -0.544999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 545:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.494999, 1.659998, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.829999, -2.064999, -0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 546:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.014999, -2.755015, 0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.014999, 2.635012, 0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 547:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.919999, -2.665013, 0.065000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.984999, 2.485009, 0.035000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 549:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.874999, -2.565011, 0.040000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.014999, 2.485009, -0.004999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 550:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.994999, -2.700014, -0.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.029999, 2.585011, -0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 551:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.974999, -3.040022, 0.010000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.029999, 2.620012, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 552:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.994999, -3.030021, 0.609999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.104999, 3.090023, 0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 554:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.109999, -2.815016, -0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.144999, 2.505009, 0.080000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 555:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.749999, -2.480009, -0.119999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.739999, 2.305005, -0.269999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 556:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.074999, -2.940019, 0.479999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.009999, 2.530010, 0.499999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 557:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.134999, -2.785016, 0.584999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.184999, 2.490009, 0.724999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 558:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.914999, -2.430008, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.919999, 2.170002, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 559:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.864999, -2.300005, 0.169999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.859999, 2.565011, -0.264999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 560:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.929999, -2.260004, 0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.929999, 2.520010, -0.264999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 561:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.929999, -2.555011, -0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.869999, 2.605012, -0.110000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 562:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.854999, -2.275004, 0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.939999, 2.365006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 565:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.874999, -1.924998, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.844999, 2.049999, 0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 566:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.079999, -2.965020, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.149999, 2.690014, -0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 567:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.079999, -2.965020, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.149999, 2.925019, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 568:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.189999, -1.514998, 0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.444999, 2.160001, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 572:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.434999, -1.039999, 0.039999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 573:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.984999, -3.360029, -0.389999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.989999, 3.175025, -0.354999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 574:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.679999, -1.199999, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.704999, 1.679998, -0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 575:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.974999, -2.740015, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.029999, 2.265004, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 576:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.974999, -3.205025, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.074999, 2.445008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 578:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.239999, 4.360052, -0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.309998, -5.560079, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 579:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.144999, -2.815016, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.219999, 2.395007, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 580:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.144999, -2.815016, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.219999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 581:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.189999, -1.014999, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 582:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.034999, -3.425030, 0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.089999, 2.505009, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 583:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.724999, -1.604998, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.669999, 1.399998, 0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 585:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.159999, 2.900018, 0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.974999, -2.850017, 0.174999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 586:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.394999, -1.234999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.384999, 0.599999, 0.159999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 587:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.129999, -2.560011, 0.110000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.019999, 2.115000, -0.314999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 588:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.039999, -3.945042, -0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.414998, 3.400030, -0.424999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 589:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 0.984999, -2.330005, 0.364999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.889999, 2.335005, 0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 596:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 597:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 598:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 599:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.049999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 600:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.049999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 601:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.169999, -3.065022, 1.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.179999, 3.130024, 0.879999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 602:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 603:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 604:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 605:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 608:
				{
					VehicleInfo[vehicleid][JobbIndex] = 0;
					return 1;
				}
				case 609:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex1], vehicleid, 1.119999, -2.880018, 0.254999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][JobbIndex2], vehicleid, 1.314998, 2.660013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				
			}
			VehicleInfo[vehicleid][JobbIndex] = 1;
			if(IsTrailerAttachedToVehicle(vehicleid))
			{
				trailerid=GetVehicleTrailer(vehicleid);
				if(IsValidDynamicObject(VehicleInfo[trailerid][JobbTrailer1])) DestroyDynamicObject(VehicleInfo[trailerid][JobbTrailer1]), VehicleInfo[trailerid][JobbTrailer1]=INVALID_OBJECT_ID;
				
				VehicleInfo[trailerid][JobbTrailer1] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
				switch(GetVehicleModel(trailerid))
				{
					case 435:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][JobbTrailer1], trailerid, 1.019999, -3.950042, -1.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 450:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][JobbTrailer1], trailerid, 1.049999, -3.975043, -1.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 584:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][JobbTrailer1],trailerid, 1.214999, -4.320051, -0.714999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 591:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][JobbTrailer1], trailerid, 1.354998, -3.960043, -0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 606:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][JobbTrailer1], trailerid, 0.569999, -1.564998, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 607:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][JobbTrailer1], trailerid, 0.569999, -1.564998, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 610:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][JobbTrailer1], trailerid, 1.104999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 611:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][JobbTrailer1], trailerid, 0.814999, 1.269999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
				}
			}
			
	}
	if(left)
	{
			new trailerid;
			if(!right || !kozos)
			{
				if(IsValidDynamicObject(VehicleInfo[vehicleid][JobbIndex1])) DestroyDynamicObject(VehicleInfo[vehicleid][JobbIndex1]), VehicleInfo[vehicleid][JobbIndex1]=INVALID_OBJECT_ID;
				if(IsValidDynamicObject(VehicleInfo[vehicleid][JobbIndex2])) DestroyDynamicObject(VehicleInfo[vehicleid][JobbIndex2]), VehicleInfo[vehicleid][JobbIndex2]=INVALID_OBJECT_ID;
				if(IsTrailerAttachedToVehicle(vehicleid))
				{
					trailerid=GetVehicleTrailer(vehicleid);
					if(IsValidDynamicObject(VehicleInfo[trailerid][JobbTrailer1])) DestroyDynamicObject(VehicleInfo[trailerid][JobbTrailer1]), VehicleInfo[trailerid][JobbTrailer1]=INVALID_OBJECT_ID;
					if(IsValidDynamicObject(VehicleInfo[trailerid][JobbTrailer2])) DestroyDynamicObject(VehicleInfo[trailerid][JobbTrailer2]), VehicleInfo[trailerid][JobbTrailer2]=INVALID_OBJECT_ID;
				
				}
				VehicleInfo[vehicleid][JobbIndex] = 0;
			}
			
			new bool:ellenoriz2=false;
			if(IsValidDynamicObject(VehicleInfo[vehicleid][BalIndex1])) DestroyDynamicObject(VehicleInfo[vehicleid][BalIndex1]), VehicleInfo[vehicleid][BalIndex1]=INVALID_OBJECT_ID,ellenoriz2 = true;
			if(IsValidDynamicObject(VehicleInfo[vehicleid][BalIndex2])) DestroyDynamicObject(VehicleInfo[vehicleid][BalIndex2]), VehicleInfo[vehicleid][BalIndex2]=INVALID_OBJECT_ID,ellenoriz2 = true;
			if(IsTrailerAttachedToVehicle(vehicleid))
			{
				trailerid=GetVehicleTrailer(vehicleid);
				if(IsValidDynamicObject(VehicleInfo[trailerid][BalTrailer1])) DestroyDynamicObject(VehicleInfo[trailerid][BalTrailer1]), VehicleInfo[trailerid][BalTrailer1]=INVALID_OBJECT_ID,ellenoriz2 = true;
				if(IsValidDynamicObject(VehicleInfo[trailerid][BalTrailer2])) DestroyDynamicObject(VehicleInfo[trailerid][BalTrailer2]), VehicleInfo[trailerid][BalTrailer2]=INVALID_OBJECT_ID,ellenoriz2 = true;
			}

			
			if(ellenoriz2)
			{
				VehicleInfo[vehicleid][BalIndex] = 0;
				return 1;
			}
			
			VehicleInfo[vehicleid][BalIndex1] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
			VehicleInfo[vehicleid][BalIndex2] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
			switch(GetVehicleModel(vehicleid))
			{
				case 417, 425, 430, 432, 441, 446, 447, 449, 452, 453, 454, 460, 464, 465, 469, 472, 473, 476, 481, 484, 487, 488, 493, 497, 501, 509, 510, 511, 512, 513, 519, 520, 537, 538, 539, 548, 553, 563, 564, 569, 570, 571, 577, 590, 592, 593, 594, 595, 608:
				{
					VehicleInfo[vehicleid][BalIndex] = 0;
					return 1;
				}
				case 400:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.929999, -2.275004, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.949999, 2.069999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 401:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.969999, -2.305005, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.039999, 2.495009, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 402:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.934999, -2.590011, 0.039999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.999999, 2.565011, -0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 403:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.549999, -4.195048, -0.719999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.989999, 4.455054, -0.809999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 404:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.819999, -2.720014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.694999, 2.280004, -0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 405:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.874999, -2.720014, -0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.874999, 2.325005, -0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 406:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -2.230003, -5.130069, 0.439999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.924998, 4.985066, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 407:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.999999, -3.515032, 0.070000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.844999, 4.145047, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 408:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.829999, -4.035044, -0.504999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.974999, 4.835062, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 409:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.859999, -3.905041, -0.030000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.909999, 3.440031, -0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 410:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.829999, -2.165001, 0.104999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.879999, 2.150001, 0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 411:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.854999, -2.470008, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.999999, 2.520009, -0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 412:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.989999, -3.595034, -0.154999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.009999, 2.725014, -0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 413:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.909999, -2.660013, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.954999, 2.570011, -0.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 414:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.104999, -3.405030, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.709999, 2.875018, -0.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 415:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.749999, -2.430008, 0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.924999, 2.495009, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 416:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.369999, -3.665036, 1.459998, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.049999, 2.935019, 0.030000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 418:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.004999, -2.545010, 0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.984999, 2.360006, -0.219999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 419:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.929999, -3.005021, -0.279999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.014999, 2.375006, -0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 420:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.009999, -2.705014, -0.004999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.004999, 2.285004, -0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 421:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.839999, -2.895018, -0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.909999, 2.530010, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 422:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.914999, -2.470009, -0.259999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.794999, 2.290004, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 423:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.839999, -2.250004, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.774999, 2.325005, 0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 424:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.749999, -1.619998, 0.240000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.874999, 1.354999, 0.159999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 426:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.014999, -2.645013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.059999, 2.290004, -0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 427:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.934999, -3.925042, 0.339999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.999999, 2.695014, 0.249999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 428:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.924999, -2.965020, 0.175000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.939999, 2.435008, 0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 429:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.814999, -2.435008, -0.024999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.799999, 2.275004, -0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 431:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.039999, -5.810085, -0.009999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.944999, 5.890087, 0.399999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 433:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.334998, -4.735060, -0.084999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.264999, 3.725037, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 434:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.659999, -1.964998, -0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.619999, 1.894998, -0.309999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 436:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.889999, -2.485009, 0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.874999, 2.240003, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 437:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.164999, -5.330074, 1.279999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.194999, 5.560079, -0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 438:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.064999, -2.520009, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.119999, 2.370006, -0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 439:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.759999, -2.650012, -0.364999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.804999, 2.370006, -0.479999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 440:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.909999, -2.625012, 0.080000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.979999, 2.565011, -0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 442:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.024999, -3.125023, -0.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.019999, 2.810016, -0.189999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 443:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.474998, -6.870109, -0.729999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.074999, 5.820085, -1.029999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 444:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.119999, -3.065022, 0.539999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.139999, 2.730014, 0.689999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 445:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.924999, -2.800016, -0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.939999, 2.335005, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 448:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.180000, -0.999999, -0.174999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.250000, 0.479999, 0.254999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 451:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.864999, -2.560011, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.954999, 1.944998, -0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 455:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.349998, -4.560056, -0.784999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.294999, 3.730037, -0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 456:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.209999, -4.560056, -0.669999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.944999, 3.360029, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 457:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.509999, -1.294998, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.449999, 1.179999, -0.095000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 458:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.949999, -2.805016, -0.165000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.974999, 2.415007, -0.145000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 459:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.889999, -2.640012, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.974999, 2.580011, -0.085000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 461:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.200000, -1.074999, 0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.210000, 0.749999, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 462:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.155000, -0.909999, -0.194999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.210000, 0.749999, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 463:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.180000, -1.044999, 0.129999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.195000, 0.749999, 0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 466:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.009999, -2.770015, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.904999, 2.625012, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 467:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.924999, -3.025021, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.904999, 2.820017, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 468:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.145000, -0.864999, 0.119999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.245000, 0.494999, 0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 470:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.019999, -2.685013, -0.234999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.054999, 2.160001, 0.189999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 471:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.399999, -0.779999, 0.204999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.364999, 0.764999, 0.314999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 474:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.959999, -2.825016, -0.219999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.894999, 2.590011, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 475:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.859999, -2.825016, -0.249999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.859999, 2.485009, -0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 477:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.019999, -2.660013, 0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.864999, 2.485009, -0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 478:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.834999, -2.555010, -0.289999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.079999, 1.994998, 0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 479:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.939999, -2.755015, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.984999, 2.525010, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 480:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.844999, -2.375006, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.619999, 2.295005, -0.439999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 482:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.859999, -2.565011, -0.289999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.894999, 2.405007, -0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 483:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.644999, -2.765015, -0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.794999, 2.610012, -0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 485:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.664999, -1.444998, -0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.644999, 1.749998, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 486:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.569999, -3.180025, 1.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.819999, 1.449998, 0.769999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 489:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.119999, -2.655013, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.114999, 2.590011, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 490:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.099999, -3.095023, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.084999, 3.190025, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 491:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.834999, -2.910018, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.829999, 2.500009, -0.099999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 492:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.899999, -2.795016, -0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.684999, 2.500009, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 494:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.789999, -2.890018, 0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.854999, 2.365006, -0.194999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 495:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.094999, -2.205002, -0.020000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.109999, 2.365006, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 496:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.934999, -2.125000, 0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.939999, 2.190002, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 498:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.954999, -3.110023, 0.334999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.879999, 3.080023, 0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 499:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.119999, -3.425030, 0.409999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.779999, 2.495009, -0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 500:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.739999, -1.969998, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.399999, 2.125001, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 502:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.774999, -2.715014, -0.010000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.859999, 2.605012, -0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 503:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.829999, -2.840017, -0.155000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.859999, 2.410007, -0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 504:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.069999, -2.780015, -0.155000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.894999, 2.635012, -0.089999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 505:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.074999, -2.625012, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.089999, 2.605012, 0.020000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 506:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.049999, 2.090000, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.814999, -2.460008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 507:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.049999, 3.250026, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.024999, -2.845017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 508:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.104999, 3.135024, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.584998, -3.995043, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 514:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.349998, 4.325051, 0.140000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.224999, -4.990066, -0.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 515:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.349998, 4.325051, -0.519999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.299998, -4.990066, -1.164999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 516:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 517:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 518:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 521:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.204999, 0.674999, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 522:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.229999, 0.714999, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 523:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.229999, 0.714999, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 524:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.139999, -3.970043, -1.024999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.644998, 4.080045, -0.319999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 525:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.224999, -3.060022, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.179999, 2.905019, 0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 526:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.889999, -2.325005, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.004999, 2.440008, -0.105000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 527:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.889999, -2.230003, 0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.964999, 2.465008, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 528:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.049999, 2.530010, 0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.134999, -2.640012, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 529:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.044999, 2.610012, 0.115000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.124999, -2.670013, 0.244999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 530:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.474999, -1.874998, 1.314998, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 531:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.419999, 1.579998, -0.169999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 532:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.389998, 3.050022, 1.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.684999, -1.974998, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 533:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.004999, 2.445008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.054999, -2.520010, -0.009999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 534:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.109999, 2.910019, -0.164999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.599999, -2.700014, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 535:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.829999, 2.515010, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.934999, -2.700014, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 536:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.829999, 2.515010, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.739999, -3.105023, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 540:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.829999, -2.745015, -0.115000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.944999, 2.585011, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 541:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.724999, -2.400007, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.684999, 2.390007, -0.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 542:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.859999, 2.650013, -0.040000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.689999, -2.960020, -0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 543:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.799999, 2.235003, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.014999, -2.620012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 544:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.729999, 3.720037, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.834999, -3.355029, -0.544999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 545:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.494999, 1.659998, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.829999, -2.064999, -0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 546:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.014999, -2.755015, 0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.014999, 2.635012, 0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 547:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.919999, -2.665013, 0.065000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.984999, 2.485009, 0.035000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 549:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.874999, -2.565011, 0.040000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.014999, 2.485009, -0.004999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 550:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.994999, -2.700014, -0.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.029999, 2.585011, -0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 551:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.974999, -3.040022, 0.010000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.029999, 2.620012, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 552:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.994999, -3.030021, 0.609999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.104999, 3.090023, 0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 554:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.109999, -2.815016, -0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.144999, 2.505009, 0.080000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 555:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.749999, -2.480009, -0.119999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.739999, 2.305005, -0.269999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 556:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.074999, -2.940019, 0.479999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.009999, 2.530010, 0.499999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 557:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.134999, -2.785016, 0.584999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.184999, 2.490009, 0.724999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 558:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.914999, -2.430008, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.919999, 2.170002, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 559:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.864999, -2.300005, 0.169999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.859999, 2.565011, -0.264999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 560:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.929999, -2.260004, 0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.929999, 2.520010, -0.264999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 561:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.929999, -2.555011, -0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.869999, 2.605012, -0.110000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 562:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.854999, -2.275004, 0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.939999, 2.365006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 565:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.874999, -1.924998, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.844999, 2.049999, 0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 566:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.079999, -2.965020, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.149999, 2.690014, -0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 567:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.079999, -2.965020, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.149999, 2.925019, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 568:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.189999, -1.514998, 0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.444999, 2.160001, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 572:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.434999, -1.039999, 0.039999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 573:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.984999, -3.360029, -0.389999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.989999, 3.175025, -0.354999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 574:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.679999, -1.199999, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.704999, 1.679998, -0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 575:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.974999, -2.740015, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.029999, 2.265004, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 576:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.974999, -3.205025, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.074999, 2.445008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 578:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.239999, 4.360052, -0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.309998, -5.560079, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 579:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.144999, -2.815016, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.219999, 2.395007, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 580:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.144999, -2.815016, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.219999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 581:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.189999, -1.014999, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 582:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.034999, -3.425030, 0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.089999, 2.505009, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 583:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.724999, -1.604998, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.669999, 1.399998, 0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 585:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.159999, 2.900018, 0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.974999, -2.850017, 0.174999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 586:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.394999, -1.234999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.384999, 0.599999, 0.159999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 587:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.129999, -2.560011, 0.110000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.019999, 2.115000, -0.314999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 588:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.039999, -3.945042, -0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.414998, 3.400030, -0.424999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 589:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -0.984999, -2.330005, 0.364999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.889999, 2.335005, 0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 596:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 597:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 598:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 599:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.049999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 600:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.049999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 601:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.169999, -3.065022, 1.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.179999, 3.130024, 0.879999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 602:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 603:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 604:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 605:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 609:
				{
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex1], vehicleid, -1.119999, -2.880018, 0.254999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(VehicleInfo[vehicleid][BalIndex2], vehicleid, -1.314998, 2.660013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				
			}
			VehicleInfo[vehicleid][BalIndex] = 1;
			if(IsTrailerAttachedToVehicle(vehicleid))
			{
				trailerid=GetVehicleTrailer(vehicleid);
				VehicleInfo[trailerid][BalTrailer1] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
				switch(GetVehicleModel(trailerid))
				{
					case 435:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][BalTrailer1], trailerid, -1.019999, -3.950042, -1.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 450:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][BalTrailer1], trailerid, -1.049999, -3.975043, -1.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 584:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][BalTrailer1], trailerid, -1.214999, -4.320051, -0.714999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 591:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][BalTrailer1], trailerid, -1.354998, -3.960043, -0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 606:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][BalTrailer1], trailerid, -0.569999, -1.564998, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 607:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][BalTrailer1], trailerid, -0.569999, -1.564998, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 610:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][BalTrailer1], trailerid, -1.104999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 611:
					{
						AttachDynamicObjectToVehicle(VehicleInfo[trailerid][BalTrailer1], trailerid, -0.814999, 1.269999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
				}
			}

	}
	Streamer_Update(playerid);
	return 1;
}

fpublic OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	new animationIndex = GetPlayerAnimationIndex(playerid);
	
	#define HOLDING(%0) ((newkeys & (%0)) == (%0))
	#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
	#define RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))


	if(PRESSED(KEY_YES))
	{
		BuyFuggveny(playerid);
	}
	// 65536 Y 131072 N 1024 ALT
	new munkagomb = 65536;

	if(PRESSED(KEY_CTRL_BACK) && !IsPlayerInAnyVehicle(playerid))
	{
		if(!selecting[playerid]) SelectTextDraw(playerid, -1), selecting[playerid] = true;
		else CancelSelectTextDraw(playerid), selecting[playerid] = false;
	}

	if(newkeys == KEY_YES)
	{
		if(CanWakeUpAfter[playerid] != 0 && CanWakeUpAfter[playerid] < UnixTime && (CanWakeUpAfter[playerid] + 300) >= UnixTime)
		{
			CanWakeUpAfter[playerid] = 0;
			UnFreeze(playerid);
			SetCameraBehindPlayer(playerid);
			ClearAnim(playerid);
		}
	}
	
	
	//Graffiti
	if(SzerkesztGraffiti[playerid] != NINCS)
	{
		if(KellGomb[playerid] != NINCS)
		{
			if(KeyGraffiti[playerid] == 0)
			{
				if(newkeys == 65536)
				{
					KeyCount[playerid]++;
				}
				else
				{
					SendClientMessage(playerid, COLOR_BLUE, "Graffiti: Mellé festettél ezért javítanod kell!");
					KeyCount[playerid]--;
				}
			}
			elseif(KeyGraffiti[playerid] == 1)
			{
				if(newkeys == 131072)
				{
					KeyCount[playerid]++;
				}
				else
				{
					SendClientMessage(playerid, COLOR_BLUE, "Graffiti: Mellé festettél ezért javítanod kell!");
					KeyCount[playerid]--;
				}
			}
			
			KellGomb[playerid] = NINCS;
			return 1;
		}
	}
		
	
	//Börtönmunka
	if(newkeys == munkagomb && PlayerInfo[playerid][pBmunka] == MUNKA_BTAKARITO && PlayerInfo[playerid][pJailed] == 14)
	{
		if(!PlayerToPoint(1.0, playerid, bTakarito[btakaritok][0], bTakarito[btakaritok][1], bTakarito[btakaritok][2], 126, 0)) return Msg(playerid, "Nem itt kell takarítanod! Menj a CP-be!");
		if(MunkaFolyamatban[playerid] != 0) return Msg(playerid, "Nyugi már...");
		
		btakaritok = random(sizeof(bTakarito));
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, bTakarito[btakaritok][0], bTakarito[btakaritok][1], bTakarito[btakaritok][2], 1.0);
		
		MunkaFolyamatban[playerid] = 1;
		TogglePlayerControllable(playerid, false);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 1, 1, 1, -1);
		MunkaTimerID[playerid]=SetTimerEx("Munkavege", 10000, false, "dd", playerid, M_BTAKARITO);
		
		return 1;
	}
	
	if(newkeys == munkagomb && PlayerInfo[playerid][pBmunka] == MUNKA_BBANYASZ && PlayerInfo[playerid][pJailed] == 14)
	{
		if(!PlayerToPoint(3, playerid, bBanyasz[bbanyaszk][0], bBanyasz[bbanyaszk][1], bBanyasz[bbanyaszk][2])) return Msg(playerid, "Nem itt kell bányásznod! Menj a CP-be!");
		if(MunkaFolyamatban[playerid] != 0) return Msg(playerid, "Nyugi már...");
		
		bbanyaszk = random(sizeof(bBanyasz));
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, bBanyasz[bbanyaszk][0], bBanyasz[bbanyaszk][1], bBanyasz[bbanyaszk][2], 3);
		
		SetPlayerAttachedObject(playerid, ATTACH_SLOT_SISAK, 1636, 6, 0.014000, 0.010000, 0.133999);
		
		MunkaFolyamatban[playerid] = 1;
		TogglePlayerControllable(playerid, false);
		ApplyAnimation(playerid, "FIGHT_D", "FIGHTD_M", 4.1, 1, 1, 1, 1, -1);
		MunkaTimerID[playerid]=SetTimerEx("Munkavege", 10000, false, "dd", playerid, M_BBANYASZ);
		
		return 1;
	}
	
	
	
	// Bányász
	if(newkeys == munkagomb && Munkaban[playerid] == MUNKA_BANYASZ && AMT(playerid, MUNKA_BANYASZ))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !banyaszbsz[playerid] && !IsPlayerInAnyVehicle(playerid))
		{
			if((PlayerToPoint(5, playerid, 1476.135, 1604.605, 34.185) || PlayerToPoint(5, playerid, 1476.209, 1587.139, 34.177) ||
				PlayerToPoint(5, playerid, 1477.027, 1514.936, 34.206) || PlayerToPoint(4, playerid, 1472.839, 1498.843, 34.211) || 
				PlayerToPoint(4, playerid, 1472.377, 1601.753, 34.185) || PlayerToPoint(4, playerid, 1472.778, 1515.885, 34.214))) // kõ bányászás
			{
				if(MunkaFolyamatban[playerid] == 1)
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Nyugi már...");
				if(vanNalaKo[playerid])
					return Msg(playerid, "Már van nálad kõ!");
				
				SetPlayerAttachedObject(playerid, ATTACH_SLOT_SISAK, 1636, 6, 0.014000, 0.010000, 0.133999);
				MunkaFolyamatban[playerid] = 1;
				Cselekves(playerid, "kezébe veszi a csákányt majd elkezdi ütni a sziklát.");
				TogglePlayerControllable(playerid, false);
				vanNalaKo[playerid] = true;
				ApplyAnimation(playerid, "FIGHT_D", "FIGHTD_M", 4.1, 1, 1, 1, 1, -1);
				MunkaTimerID[playerid]=SetTimerEx("Munkavege", MunkaIdo[13], false, "dd", playerid, M_BANYASZ_KO);
				
				return 1;
			}
			
			if((PlayerToPoint(2.5, playerid, 1476.948, 1449.521, 34.232) || PlayerToPoint(2.5, playerid, 1482.452, 1449.521, 34.232) ||
				PlayerToPoint(2.5, playerid, 1483.41382, 1448.90613, 34.47062) || PlayerToPoint(2.5, playerid, 1462.15881, 1491.11047, 34.47060) || 
				PlayerToPoint(2.5, playerid, 1462.19080, 1503.82483, 34.47060) || PlayerToPoint(2.5, playerid, 1462.10193, 1517.18469, 34.47060) || 
				PlayerToPoint(2.5, playerid, 1462.22974, 1544.25269, 34.47060) || PlayerToPoint(2.5, playerid, 1463.00647, 1576.06384, 34.47060) || 
				PlayerToPoint(2.5, playerid, 1462.51917, 1559.66272, 34.47060) || PlayerToPoint(2.5, playerid, 1463.70166, 1601.06323, 34.47060) ||
				PlayerToPoint(2.5, playerid, 1463.48303, 1589.13953, 34.47060))) // feldolgozás
			{
				if(MunkaFolyamatban[playerid] == 1)
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Nyugi már...");
				if(!vanNalaKo[playerid])
					return Msg(playerid, "Nincs nálad kõ!");
				
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS);
				MunkaFolyamatban[playerid] = 1;
				TogglePlayerControllable(playerid, false);
				ApplyAnimation(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 1, 1, 1, -1);
				MunkaTimerID[playerid]=SetTimerEx("Munkavege", MunkaIdo[13], false, "dd", playerid, M_BANYASZ_FELDOLGOZ);
				
				return 1;
			}
		}
	}
	
	// Kukás
	if(newkeys == munkagomb && Munkaban[playerid] == MUNKA_KUKAS && AMT(playerid, MUNKA_KUKAS))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !VanSzemetNala[playerid] && !IsPlayerInAnyVehicle(playerid) && MunkaFolyamatban[playerid] == 0)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			for(new k = 0; k < sizeof(TrashInfo); k++)
			{
				if(GetDistanceBetweenPoints(x, y, z, ArrExt(TrashInfo[k][tSzemetPos])) < 2 && IsValidDynamicObject(TrashInfo[k][tSzemetObject]) && TrashInfo[k][tSzemet])
				{
					TrashInfo[k][tSzemet] = false;
					TrashInfo[k][gId] = 0;
					VanSzemetNala[playerid] = true;
					MunkaFolyamatban[playerid] = 1;
					SetPlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS, 1265, 6, 0.189000, -0.236000, 0.011999, -55.500057, 0.000000, 110.500022);
					if(IsValidDynamicObject(TrashInfo[k][tSzemetObject])) DestroyDynamicObject(TrashInfo[k][tSzemetObject]);
					if(IsValidDynamic3DTextLabel(TrashInfo[k][tSzemetLabel])) DestroyDynamic3DTextLabel(TrashInfo[k][tSzemetLabel]), TrashInfo[k][tSzemetLabel] = INVALID_3D_TEXT_ID;
					Streamer_Update(playerid);
					Msg(playerid, "A szemét felvéve, vidd a kukáskocsi hátuljához, hogy berakhasd a tartályba.");
					
					return 1;
				}
			}
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && VanSzemetNala[playerid])
		{
			new kocsi = GetClosestVehicle(playerid);
			if(GetPlayerDistanceFromVehicle(playerid, kocsi) > 5.0) return Msg(playerid, "Nincs a közeledben egy kukáskocsi!");
			if(GetVehicleModel(kocsi) != 408) return Msg(playerid, "A legközelebbi jármû nem egy kukáskocsi!");
			if(SzemetAKocsiban[kocsi] == 20) return Msg(playerid, "Ebbe már nem fér több szemét!");
			SzemetAKocsiban[kocsi] ++;
			VanSzemetNala[playerid] = false;
			MunkaFolyamatban[playerid] = 0;
			SendFormatMessage(playerid, COLOR_GREEN, "Sikeresen beraktad a szemetet a tartályba, jelenleg %d van benne", SzemetAKocsiban[kocsi]);
			RemovePlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS);
			
			return 1;
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 408)
		{
			if(!PlayerToPoint(10.0, playerid, -567.5259,-1539.9019,9.7829))
			{
				SetPlayerCheckpoint(playerid, -567.5259,-1539.9019,9.7829, 5.0);
				Msg(playerid, "Nem vagy a szemétlerakónál!");
				return 1;
			}
			new vehicleid = GetPlayerVehicleID(playerid);
			Msg(playerid, "Elkezdted a szemetet kiüríteni, várj türelemmel, míg teljesen kiürül!");
			MunkaFolyamatban[playerid] = 1;
			SetTimerEx("Munkavege", SzemetAKocsiban[vehicleid]*3000, false, "ddd", playerid, M_SZEMETLERAKAS, vehicleid);
			Freeze(playerid);
			
			return 1;
		}
	}
	
	// Vadász
	if(newkeys == munkagomb && Munkaban[playerid] == MUNKA_VADASZ && AMT(playerid, MUNKA_VADASZ))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !IsPlayerInAnyVehicle(playerid))
		{
			new oz = GetClosestDeer(playerid), kocsi = GetClosestVehicle(playerid);
			if(GetDistanceToDeer(playerid, oz) < 3.0 && GetPlayerDistanceFromVehicle(playerid, kocsi) > 5.0) // ellát
			{
				if(PlayerInfo[playerid][pPayCheck] > 1700000) return Msg(playerid, "Túl sok vadat lõttél már ki, nem adhatsz le többet!");
				
				if(Munkaban[playerid] != MUNKA_VADASZ) return Msg(playerid, "Nem vagy vadász szolgálatban!");
				if(WeaponArmed(playerid) != 4) return Msg(playerid, "Egy kés kell ahhoz, hogy a golyót el tudd távolítani az oz testébõl!");
				if(GetDistanceToDeer(playerid, oz) > 2.0) return Msg(playerid, "Túl messzi vagy az õztõl!");
				if(DeerInfo[oz][dSupplied]) return Msg(playerid, "Ez az õz már el van látva!");
				if(!DeerInfo[oz][dKilled]) return Msg(playerid, "Ez az õz nincs megölve!");
				if(DeerInfo[oz][dHealth] < 5) return Msg(playerid, "Ezt az õzet már hiába látod el, túlságosan elfertõzõdött a seb, nem kapnál érte fizetést!");
				if(MunkaFolyamatban[playerid] == 1) return Msg(playerid, "Épp végzel valamit, nem tudod ellátni az õz sérülését!");
				SetTimerEx("Munkavege", (101-DeerInfo[oz][dHealth])*1000, false, "ddd", playerid, M_OZELLATAS, oz);
				SendClientMessage(playerid, COLOR_GREEN, "Elkezdted ellátni az õz sérülését a késed segítségével.");
				MunkaFolyamatban[playerid] = 1;
				Freeze(playerid);
				ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
				
				return 1;
			}
		
			if(GetDistanceToDeer(playerid, oz) < 3.0 && GetPlayerDistanceFromVehicle(playerid, kocsi) < 5.0) // felpakol
			{
				if((GetDistanceToDeer(playerid, oz) > 5.0))
					return Msg(playerid, "Nincs õz a közeledben!");
				if(GetPlayerDistanceFromVehicle(playerid, kocsi) > 5.0)
					return Msg(playerid, "Nincs jármû a közeledben!");
				if(IsPlayerInAnyVehicle(playerid))
					return Msg(playerid, "Jármûben hogy akarod?");
				if(GetVehicleModel(kocsi) != 554)
					return Msg(playerid, "Ezzel a jármûvel nem tudod elszállítani az õz(eke)t!");
				if(!DeerInfo[oz][dSupplied])
					return Msg(playerid, "Ez az oz nincs ellátva!");
				
				if(VehicleAdatok[kocsi][_DEER_NUM_] != 5)
					VehicleAdatok[kocsi][_DEER_NUM_]++;
				else
					return Msg(playerid, "Erre a jármûre már nem tudsz több vadat pakolni!");

				switch(VehicleAdatok[kocsi][_DEER_NUM_])
				{
					case 1:
					{
						if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_1_]))  DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_1_]),VehicleAdatok[kocsi][_OBJECT_DEER_1_] = INVALID_OBJECT_ID; 
						VehicleAdatok[kocsi][_OBJECT_DEER_1_] = CreateDynamicObject(19315, -0.54010, -2.26840, 0.17500,   -50.00000, 0.00000, 90.00000);
						AttachDynamicObjectToVehicle(VehicleAdatok[kocsi][_OBJECT_DEER_1_], kocsi, -0.54010, -2.26840, 0.17500,   -50.00000, 0.00000, 90.00000);
						VehicleAdatok[kocsi][_DEER_DISTANCE_1_] = DeerInfo[oz][dDistance];
						VehicleAdatok[kocsi][_DEER_HEALTH_1_] = DeerInfo[oz][dHealth];
						if(DeerInfo[oz][dWeaponType] == 25) VehicleAdatok[kocsi][_DEER_GUN_1_] = 1;
						else VehicleAdatok[kocsi][_DEER_GUN_1_] = 2;
					}
					case 2:
					{
						if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_2_]))  DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_2_]),VehicleAdatok[kocsi][_OBJECT_DEER_2_] = INVALID_OBJECT_ID; 
						VehicleAdatok[kocsi][_OBJECT_DEER_2_] = CreateDynamicObject(19315, -0.51425, -1.43365, 0.17500,   -50.00000, 0.00000, 90.00000);
						AttachDynamicObjectToVehicle(VehicleAdatok[kocsi][_OBJECT_DEER_2_], kocsi, -0.51425, -1.43365, 0.17500,   -50.00000, 0.00000, 90.00000);
						VehicleAdatok[kocsi][_DEER_DISTANCE_2_] = DeerInfo[oz][dDistance];
						VehicleAdatok[kocsi][_DEER_HEALTH_2_] = DeerInfo[oz][dHealth];
						if(DeerInfo[oz][dWeaponType] == 25) VehicleAdatok[kocsi][_DEER_GUN_2_] = 1;
						else VehicleAdatok[kocsi][_DEER_GUN_2_] = 2;
					}
					case 3:
					{
						if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_3_]))  DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_3_]),VehicleAdatok[kocsi][_OBJECT_DEER_3_] = INVALID_OBJECT_ID; 
						VehicleAdatok[kocsi][_OBJECT_DEER_3_] = CreateDynamicObject(19315, 0.38580, -2.24810, 0.17500,   -90.00000, 0.00000, 90.00000);
						AttachDynamicObjectToVehicle(VehicleAdatok[kocsi][_OBJECT_DEER_3_], kocsi, 0.38580, -2.24810, 0.17500,   -90.00000, 0.00000, 90.00000);
						VehicleAdatok[kocsi][_DEER_DISTANCE_3_] = DeerInfo[oz][dDistance];
						VehicleAdatok[kocsi][_DEER_HEALTH_3_] = DeerInfo[oz][dHealth];
						if(DeerInfo[oz][dWeaponType] == 25) VehicleAdatok[kocsi][_DEER_GUN_3_] = 1;
						else VehicleAdatok[kocsi][_DEER_GUN_3_] = 2;
					}
					case 4:
					{
						if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_4_]))  DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_4_]),VehicleAdatok[kocsi][_OBJECT_DEER_4_] = INVALID_OBJECT_ID; 
						VehicleAdatok[kocsi][_OBJECT_DEER_4_] = CreateDynamicObject(19315, 0.43840, -1.48990, 0.17500,   -90.00000, 0.00000, 90.00000);
						AttachDynamicObjectToVehicle(VehicleAdatok[kocsi][_OBJECT_DEER_4_], kocsi, 0.43840, -1.48990, 0.17500,   -90.00000, 0.00000, 90.00000);
						VehicleAdatok[kocsi][_DEER_DISTANCE_4_] = DeerInfo[oz][dDistance];
						VehicleAdatok[kocsi][_DEER_HEALTH_4_] = DeerInfo[oz][dHealth];
						if(DeerInfo[oz][dWeaponType] == 25) VehicleAdatok[kocsi][_DEER_GUN_4_] = 1;
						else VehicleAdatok[kocsi][_DEER_GUN_4_] = 2;
					}
					case 5:
					{
						if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_5_])) DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_5_]),VehicleAdatok[kocsi][_OBJECT_DEER_5_] = INVALID_OBJECT_ID; 
						VehicleAdatok[kocsi][_OBJECT_DEER_5_] = CreateDynamicObject(19315, -0.48040, -0.86470, 0.17500,   -29.00000, 0.00000, 0.00000);
						AttachDynamicObjectToVehicle(VehicleAdatok[kocsi][_OBJECT_DEER_5_], kocsi, -0.48040, -0.86470, 0.17500,   -29.00000, 0.00000, 0.00000);
						SendClientMessage(playerid, COLOR_GREEN, "A jármûre már nem tudsz több õzt pakolni! Vidd el az erdészetre õket!");
						SetPlayerCheckpoint(playerid, -1945.2025,-1084.0623,30.7779, 10.0);
						VehicleAdatok[kocsi][_DEER_DISTANCE_5_] = DeerInfo[oz][dDistance];
						VehicleAdatok[kocsi][_DEER_HEALTH_5_] = DeerInfo[oz][dHealth];
						if(DeerInfo[oz][dWeaponType] == 25) VehicleAdatok[kocsi][_DEER_GUN_5_] = 1;
						else VehicleAdatok[kocsi][_DEER_GUN_5_] = 2;
					}
				}
				Streamer_Update(playerid);
				SendClientMessage(playerid, COLOR_GREEN, "Az õz(ek) sikeresen felpakolva a platóra!");
				RemoveDeer(oz);
				
				return 1;
			}
		}
		
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 554) // lead
		{
			new kocsi = GetPlayerVehicleID(playerid);
			if(!PlayerToPoint(10.0, playerid, -1945.2025,-1084.0623,30.7779)) return SetPlayerCheckpoint(playerid, -1945.2025,-1084.0623,30.7779, 10.0);
			if(Munkaban[playerid] != MUNKA_VADASZ) return Msg(playerid, "Ez nem vadászfelszerelés, vedd fel elõször azt!");
			if(GetVehicleModel(kocsi) != 554) return Msg(playerid, "Ez nem egy Yosemite!");
			if(VehicleAdatok[kocsi][_DEER_NUM_] == 0) return Msg(playerid, "Ennek a Yosemitenak a hátulján nincsen egy elejtett állat sem!");
			
			if(PlayerInfo[playerid][pPayCheck] > 1700000) return Msg(playerid, "Túl sok vadat lõttél már ki, nem adhatsz le többet!");
			
			SendClientMessage(playerid, COLOR_GREEN, "Erdészet szakigazgató: "COL_FEHER"Munkásaim elkezdték a lõtt vadak lepakolását, kivizsgálását feldolgozását! Kérem várjon türelemmel!");
			Freeze(playerid, 25000);
			
			/* **************************************************************** */
			new fizu, hpszorzo;
			
			//ezzel vissza lehet venni a nagy bevételt
			new vadaszok;
			foreach(Jatekosok, i)
			{
				if(Munkaban[i] == MUNKA_VADASZ)
					vadaszok++;
			}
			new fizetesszorzo=3;
			new fizetesosszeg = 8000;
			
			switch(vadaszok)
			{
				case 0..2: fizetesszorzo=2,fizetesosszeg=7000;
				case 3..5: fizetesszorzo=2,fizetesosszeg=7200;
				case 6..8: fizetesszorzo=3,fizetesosszeg=7500;
				case 9..10: fizetesszorzo=3,fizetesosszeg=8500;
				case 11..400: fizetesszorzo=3,fizetesosszeg=9000;
				default: fizetesszorzo=3,fizetesosszeg=7000;
			}
			
			if(VehicleAdatok[kocsi][_DEER_NUM_] > 4)
			{
				if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_5_]))DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_5_]),VehicleAdatok[kocsi][_OBJECT_DEER_5_]=INVALID_OBJECT_ID;
				if(VehicleAdatok[kocsi][_DEER_HEALTH_5_] >= 6 && VehicleAdatok[kocsi][_DEER_HEALTH_5_] <= 25) hpszorzo = 1;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_5_] >= 26 && VehicleAdatok[kocsi][_DEER_HEALTH_5_] <= 50) hpszorzo = 2;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_5_] >= 51 && VehicleAdatok[kocsi][_DEER_HEALTH_5_] <= 75) hpszorzo = 3;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_5_] >= 76) hpszorzo = 4;
				fizu = fizetesosszeg+(floatround(VehicleAdatok[kocsi][_DEER_DISTANCE_5_])*fizetesszorzo)*hpszorzo*VehicleAdatok[kocsi][_DEER_GUN_5_];
				PlayerInfo[playerid][pPayCheck] += fizu;
				VehicleAdatok[kocsi][_DEER_HEALTH_5_] = 0;
				VehicleAdatok[kocsi][_DEER_DISTANCE_5_] = 0.0;
				VehicleAdatok[kocsi][_DEER_GUN_5_] = 0;
				VehicleAdatok[kocsi][_DEER_NUM_] = 4;
				return SendFormatMessage(playerid, COLOR_GREEN, "Erdészeti szakigazgató: "COL_FEHER"Az állatot rendben találtuk. Ezért a lõtt vadért %s forintot írtunk a fizetési csekkére!", FormatInt(fizu));
			}
			if(VehicleAdatok[kocsi][_DEER_NUM_] > 3)
			{
				if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_4_]))DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_4_]),VehicleAdatok[kocsi][_OBJECT_DEER_4_]=INVALID_OBJECT_ID;
				if(VehicleAdatok[kocsi][_DEER_HEALTH_4_] >= 6 && VehicleAdatok[kocsi][_DEER_HEALTH_4_] <= 25) hpszorzo = 1;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_4_] >= 26 && VehicleAdatok[kocsi][_DEER_HEALTH_4_] <= 50) hpszorzo = 2;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_4_] >= 51 && VehicleAdatok[kocsi][_DEER_HEALTH_4_] <= 75) hpszorzo = 3;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_4_] >= 76) hpszorzo = 4;
				fizu = fizetesosszeg+(floatround(VehicleAdatok[kocsi][_DEER_DISTANCE_4_])*fizetesszorzo)*hpszorzo*VehicleAdatok[kocsi][_DEER_GUN_4_];
				PlayerInfo[playerid][pPayCheck] += fizu;
				VehicleAdatok[kocsi][_DEER_HEALTH_4_] = 0;
				VehicleAdatok[kocsi][_DEER_DISTANCE_4_] = 0.0;
				VehicleAdatok[kocsi][_DEER_GUN_4_] = 0;
				VehicleAdatok[kocsi][_DEER_NUM_] = 3;
				return SendFormatMessage(playerid, COLOR_GREEN, "Erdészeti szakigazgató: "COL_FEHER"Az állatot rendben találtuk. Ezért a lõtt vadért %s forintot írtunk a fizetési csekkére!", FormatInt(fizu));
			}
			if(VehicleAdatok[kocsi][_DEER_NUM_] > 2)
			{
				if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_3_]))DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_3_]),VehicleAdatok[kocsi][_OBJECT_DEER_3_]=INVALID_OBJECT_ID;
				if(VehicleAdatok[kocsi][_DEER_HEALTH_3_] >= 6 && VehicleAdatok[kocsi][_DEER_HEALTH_3_] <= 25) hpszorzo = 1;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_3_] >= 26 && VehicleAdatok[kocsi][_DEER_HEALTH_3_] <= 50) hpszorzo = 2;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_3_] >= 51 && VehicleAdatok[kocsi][_DEER_HEALTH_3_] <= 75) hpszorzo = 3;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_3_] >= 76) hpszorzo = 4;
				fizu = fizetesosszeg+(floatround(VehicleAdatok[kocsi][_DEER_DISTANCE_3_])*fizetesszorzo)*hpszorzo*VehicleAdatok[kocsi][_DEER_GUN_3_];
				PlayerInfo[playerid][pPayCheck] += fizu;
				VehicleAdatok[kocsi][_DEER_HEALTH_3_] = 0;
				VehicleAdatok[kocsi][_DEER_DISTANCE_3_] = 0.0;
				VehicleAdatok[kocsi][_DEER_GUN_3_] = 0;
				VehicleAdatok[kocsi][_DEER_NUM_] = 2;
				return SendFormatMessage(playerid, COLOR_GREEN, "Erdészeti szakigazgató: "COL_FEHER"Az állatot rendben találtuk. Ezért a lõtt vadért %s forintot írtunk a fizetési csekkére!", FormatInt(fizu));
			}
			if(VehicleAdatok[kocsi][_DEER_NUM_] > 1)
			{
				if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_2_]))DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_2_]),VehicleAdatok[kocsi][_OBJECT_DEER_2_]=INVALID_OBJECT_ID;
				if(VehicleAdatok[kocsi][_DEER_HEALTH_2_] >= 6 && VehicleAdatok[kocsi][_DEER_HEALTH_2_] <= 25) hpszorzo = 1;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_2_] >= 26 && VehicleAdatok[kocsi][_DEER_HEALTH_2_] <= 50) hpszorzo = 2;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_2_] >= 51 && VehicleAdatok[kocsi][_DEER_HEALTH_2_] <= 75) hpszorzo = 3;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_2_] >= 76) hpszorzo = 4;
				fizu = fizetesosszeg+(floatround(VehicleAdatok[kocsi][_DEER_DISTANCE_2_])*fizetesszorzo)*hpszorzo*VehicleAdatok[kocsi][_DEER_GUN_2_];
				PlayerInfo[playerid][pPayCheck] += fizu;
				VehicleAdatok[kocsi][_DEER_HEALTH_2_] = 0;
				VehicleAdatok[kocsi][_DEER_DISTANCE_2_] = 0.0;
				VehicleAdatok[kocsi][_DEER_GUN_2_] = 0;
				VehicleAdatok[kocsi][_DEER_NUM_] = 1;
				return SendFormatMessage(playerid, COLOR_GREEN, "Erdészeti szakigazgató: "COL_FEHER"Az állatot rendben találtuk. Ezért a lõtt vadért %s forintot írtunk a fizetési csekkére!", FormatInt(fizu));
			}
			if(VehicleAdatok[kocsi][_DEER_NUM_] > 0)
			{
				if(IsValidDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_1_]))DestroyDynamicObject(VehicleAdatok[kocsi][_OBJECT_DEER_1_]),VehicleAdatok[kocsi][_OBJECT_DEER_1_]=INVALID_OBJECT_ID;
				if(VehicleAdatok[kocsi][_DEER_HEALTH_1_] >= 6 && VehicleAdatok[kocsi][_DEER_HEALTH_1_] <= 25) hpszorzo = 1;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_1_] >= 26 && VehicleAdatok[kocsi][_DEER_HEALTH_1_] <= 50) hpszorzo = 2;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_1_] >= 51 && VehicleAdatok[kocsi][_DEER_HEALTH_1_] <= 75) hpszorzo = 3;
				elseif(VehicleAdatok[kocsi][_DEER_HEALTH_1_] >= 76) hpszorzo = 4;
				fizu = fizetesosszeg+(floatround(VehicleAdatok[kocsi][_DEER_DISTANCE_1_])*fizetesszorzo)*hpszorzo*VehicleAdatok[kocsi][_DEER_GUN_1_];
				PlayerInfo[playerid][pPayCheck] += fizu;
				VehicleAdatok[kocsi][_DEER_HEALTH_1_] = 0;
				VehicleAdatok[kocsi][_DEER_DISTANCE_1_] = 0.0;
				VehicleAdatok[kocsi][_DEER_GUN_1_] = 0;
				VehicleAdatok[kocsi][_DEER_NUM_] = 0;
				return SendFormatMessage(playerid, COLOR_GREEN, "Erdészeti szakigazgató: "COL_FEHER"Az állatot rendben találtuk. Ezért a lõtt vadért %s forintot írtunk a fizetési csekkére!", FormatInt(fizu));
			}
			Msg(playerid, "Ennek a Yosemitenak a hátulján nincsen egy elejtett állat sem!");
			return 1;
		}
	}

	// Pénzszállító
	if(newkeys == munkagomb && Munkaban[playerid] == MUNKA_PENZ && AMT(playerid, MUNKA_PENZ))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !IsPlayerInAnyVehicle(playerid) && PenzSzallitoDuty[playerid])
		{
			if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerDistanceFromVehicle(playerid, GetClosestVehicle(playerid)) < 6.0 && GetVehicleModel(GetClosestVehicle(playerid)) == 428) // felvesz
			{
				new kocsi = GetClosestVehicle(playerid);
				if(IsMunkaKocsi(kocsi) != MUNKA_PENZ) return Msg(playerid, "Ez nem munka kocsi!");
			
				if(PenzszallitoPenz[kocsi] < MAXTASKAPENZ)
				{
					Msg(playerid, "Nincs benne több táska! Menj San Fierro bankba!");
					SetPlayerCheckpoint(playerid,-1979.5792,442.3809,26.9659,5);
					return 1;
				}
				if(SzallitPenz[playerid] != NINCS) return Msg(playerid, "Van már nálad táska!");
				
				SzallitPenz[playerid] = MAXTASKAPENZ;
				PenzszallitoPenz[kocsi] -= MAXTASKAPENZ;
				
				Cselekves(playerid, "kivett egy pénz kazetta táskát a pénzszállítóból");
				SendFormatMessage(playerid, COLOR_YELLOW,"[info]%d DB van a kocsiban 10-bol!",PenzszallitoPenz[kocsi]/MAXTASKAPENZ);
				SetPlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS, 1210, 5, 0.2949, 0.1309, 0.0409, 139.2000, -70.6999, 157.9999, 0.9739, 1.0000, 1.0000, 0, 0);
				Freeze(playerid, 1500); ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
				
				return 1;
			}
			if(GetPlayerVirtualWorld(playerid) == 1555 && GetPlayerInterior(playerid) == 0) // felvesz pénztáros
			{
				if(GetPlayerVirtualWorld(playerid) != 1555) return Msg(playerid, "Szerintem nem jó helyen vagy!");
				if(GetDistanceBetweenPlayers(playerid, BankSFNPC) > 2) return Msg(playerid, "Nincs a közeledbe a pénztáros!");
				if(SzallitPenz[playerid] != NINCS) return Msg(playerid, "Van már nálad táska!");
				PenzSzallitimer[playerid] = 10;
				Freeze(playerid, 5500); 
				if(MegyPenzTimer) return Msg(playerid, "Egyszerre csak egy embert tud kiszolgálni!");
				MegyPenzTimer=true;
				
				return 1;
			}
			if(GetPlayerVirtualWorld(playerid) == 1555 && GetPlayerInterior(playerid) == 1) // berak kocsiba
			{
				if(!IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS) || SzallitPenz[playerid] != MAXTASKAPENZ)
					return Msg(playerid, "Nincs nálad a táska!");
				
				
				new kocsi = GetClosestVehicle(playerid);
				if(GetPlayerDistanceFromVehicle(playerid, kocsi) > 6.0) return Msg(playerid, "Nincs jármû a közeledben!");
				if(GetVehicleModel(kocsi) != 428) return Msg(playerid, "Ez nem pénzszállító!");
				if(IsMunkaKocsi(kocsi) != MUNKA_PENZ) return Msg(playerid, "Ez nem munka kocsi!");
				
				if((PenzszallitoPenz[kocsi] +  SzallitPenz[playerid]) <= MAXTASKAPENZ*10)
				{
					PenzszallitoPenz[kocsi] += SzallitPenz[playerid];
					SzallitPenz[playerid] = NINCS;
					Cselekves(playerid, "bepakolt egy pénzzel teli táskát a pénzszállítóba");
					RemovePlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS);
					Freeze(playerid, 1500); ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
					SendFormatMessage(playerid, COLOR_YELLOW,"[info]%d DB van a kocsiban 10-bol!",PenzszallitoPenz[kocsi]/MAXTASKAPENZ);
					return 1;
				}
				else
					return Msg(playerid, "Teli van a kocsi nem fér bele több! Menj és töltsd fel az ATM-eket!");
			}
			
			if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0) // berak ATM be
			{
				new atmid=AtmKozel(playerid);
				
				if(atmid == NINCS)
				{
					new Float:Pos[3];
					GetPlayerPos(playerid, ArrExt(Pos));
					new penz=MAXATMPENZ-MAXTASKAPENZ;
					new Float:legkozelebb = 5000.0;
					new Float:tav = 0.0;
					for(new a=0; a < MAX_ATM; a++)
					{
						tav = GetDistanceBetweenPoints(ATM[a][aPosX],ATM[a][aPosY],ATM[a][aPosZ], ArrExt(Pos));
						if(tav < legkozelebb && ATM[a][aObjectID] != NINCS && ATM[a][aPosX] != 0.0 && penz > ATM[a][aPenz])
						{
							legkozelebb = tav;
							atmid = a;
						}
					}
					
					if(atmid == NINCS) return Msg(playerid, "Minden ATM teli van!");
					
					if(ATM[atmid][aVw] > 0 || ATM[atmid][aInt] > 0)
					{
					
						legkozelebb = 5000.0, tav = 0.0;
						new ajto;
			
						new Interior = ATM[atmid][aInt];
						new VW = ATM[atmid][aVw];
						for(new a = 0; a < sizeof(Ajtok); a++)
						{
							if(Ajtok[a][Van] != 1 || VW != Ajtok[a][KiVW] || Interior != Ajtok[a][KiInt]) continue;
							tav = GetDistanceBetweenPoints(ATM[atmid][aPosX],ATM[atmid][aPosY],ATM[atmid][aPosZ], Ajtok[a][KiX], Ajtok[a][KiY], Ajtok[a][KiZ]);
							if(tav < legkozelebb &&  0 == Ajtok[a][BeVW])
							{
								legkozelebb = tav;
								ajto = a;
							}
						}
						if(legkozelebb != 5000.0)
							SetPlayerCheckpoint(playerid, Ajtok[ajto][BeX], Ajtok[ajto][BeY], Ajtok[ajto][BeZ],4), Msg(playerid, "Az ATM egy házban van. Megjelölve a bejárat!");
							
						return 1;
					}
					
					if(ATM[atmid][aVw] == GetPlayerVirtualWorld(playerid) && ATM[atmid][aInt] == GetPlayerInterior(playerid))
						SetPlayerCheckpoint(playerid,ATM[atmid][aPosX],ATM[atmid][aPosY],ATM[atmid][aPosZ],4),Msg(playerid, "Megjelölve a GPS-en egy ATM amit fel kell tölteni!");
						
					if(IsTerno(playerid))
						SendFormatMessage(playerid, COLOR_YELLOW,"ATM id:%d",atmid);
					return 1;
				}
				
				
				if(IsPlayerInAnyVehicle(playerid))
					return Msg(playerid, "Jármûbõl akarod feltölteni az ATM-et?");
				if(! IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS) || SzallitPenz[playerid] != MAXTASKAPENZ)
					return Msg(playerid, "Nincs nálad a táska! Vedd ki a kocsiból!");	
					
				if(ATM[atmid][aPenz]+SzallitPenz[playerid] > MAXATMPENZ) return Msg(playerid, "Nincs üres kazetta az ATM-be!");
				
				ATM[atmid][aPenz] += SzallitPenz[playerid];
				SzallitPenz[playerid] = NINCS;
				Cselekves(playerid, "feltöltötte az ATM-et pénzzel!");
				Freeze(playerid, 1500); ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
				RemovePlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS);
				SendFormatMessage(playerid, COLOR_YELLOW, "Feltöltötted az ATM-et 1 kazettával. Ne feledd 1 kazetta %s Ft-ot tartalmaz és csak üreset cserélhetsz.",FormatInt(MAXTASKAPENZ));
				SendFormatMessage(playerid, COLOR_YELLOW, "ATM infó: %s Ft tartalom. Maximum %s Ft",FormatInt(ATM[atmid][aPenz]),FormatInt(MAXATMPENZ));
				PlayerInfo[playerid][pPayCheck] +=25000;
				
				return 1;
			}
		}
	}
	
	// Hullaszállító
	if(newkeys == munkagomb && (AMT(playerid, MUNKA_HULLA) || LMT(playerid, FRAKCIO_MENTO)))
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			new hulla = GetClosestHulla(playerid), kocsi = GetClosestVehicle(playerid);
   			if(GetDistanceToHulla(playerid, hulla) < 5.0)
			{
				if(HullaInfo[hulla][Hvw] != GetPlayerVirtualWorld(playerid))
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Na-na! A hulla másik VWben van!");
			
				if(GetPlayerDistanceFromVehicle(playerid, kocsi) < 5.0)
				{
					if((GetVehicleModel(kocsi) == 442) || GetVehicleModel(kocsi) == 416)
					{
						if(HullakSzama[kocsi] != 4)
 						{
							HullakSzama[kocsi]++;
							SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Sikeresen bekapoltad a hullát! Hullák száma a jármûben: %d", HullakSzama[kocsi]);
							HullaTorol(hulla);
							Cselekves(playerid, "berakott egy hullát a jármûvébe", 1, false);
  						}
						else
				    		return SendClientMessage(playerid, COLOR_LIGHTRED, "A jármû tele van!");
					}
					else
 						return SendClientMessage(playerid, COLOR_LIGHTRED, "Ebbe a kocsiba nem rakhatod be!");
				}
				else
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs a közeledben jármû!");
			}
		}
		
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
	        new kocsi = GetPlayerVehicleID(playerid);
			if(!PlayerToPoint(5, playerid, 939.592, -1086.810, 24.296))
			{
				Msg(playerid, "Itt nem tudod leadni a hullákat. Menj a Los Santosi temeto ravatalozójába! (Térképen jelzi)");
				SetPlayerCheckpoint(playerid, 939.592, -1086.810, 24.296, 2.5);
				return 1;
			}
			if((GetVehicleModel(kocsi) == 442) || (GetVehicleModel(kocsi) == 416))
			{
				if(HullakSzama[kocsi] > 0)
				{
 					new kapsz = HullakSzama[kocsi] * 50500;
					GiveMoney(playerid, kapsz);
					SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Sikeresen leadtál %d hullát amiért kaptál %d Ft-ot.", HullakSzama[kocsi], kapsz);
					HullakSzama[kocsi] = 0;
				}
				else
				 	return SendClientMessage(playerid, COLOR_LIGHTRED, "A jármûben nincs egy hulla se!");
			}
		}
	}
	





	if(PRESSED(KEY_SECONDARY_ATTACK) && PlayerToPoint(3.0, playerid, 316.004, 1033.611, 1946.125, -1, 9))
	{
			new Float:Pos[3];
			GetVehiclePos(GetPlayerVirtualWorld(playerid)-40000, Pos[0], Pos[1], Pos[2]);
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, Pos[0]-5.0, Pos[1], Pos[2]);
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			Freeze(playerid, 3000);
			Cselekves(playerid, "kimászott a Cargobobból");
	}
	if(PRESSED(KEY_SECONDARY_ATTACK) && PlayerToPoint(3.0, playerid, 2003.441, 2284.221, 1011.125, -1, 1))
	{
			new Float:Pos[3];
			GetVehiclePos(GetPlayerVirtualWorld(playerid)-69, Pos[0], Pos[1], Pos[2]);
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, Pos[0]-5.0, Pos[1], Pos[2]);
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			//removePlayerFromMento(playerid);
			Cselekves(playerid, "kimászott a mentõautóból");
	}
	
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && (HOLDING(KEY_DOWN) || HOLDING(KEY_HANDBRAKE) || HOLDING(KEY_JUMP) || PRESSED(KEY_DOWN) || PRESSED(KEY_HANDBRAKE) || PRESSED(KEY_JUMP)) && engineOn[GetPlayerVehicleID(playerid)] == 1)
	{
		new cid = GetPlayerVehicleID(playerid), Float:x, Float:y, Float:z;
		GetVehicleVelocity(cid, x, y, z);
		if(CarPart[cid][cFek] >= 100.0)
		{
			CarPart[cid][cFek] = 100.0;
			if(GetVehicleSpeed(cid) > 25.0)
				SetVehicleVelocity(cid, x+0.065, y, z);
			//SendFormatMessage(playerid, COLOR_LIGHTRED, "Fékezés folyamatban (x: %.2f . y: %.2f . z: %.2f)", x, y, z);
		}
		else if(IsABoat(cid) || IsABicikli(cid) || IsARepulo(cid))
		{
			CarPart[cid][cFek] = 0.00;
		}
		else if(CarPart[cid][cFek] != 100.0)
			CarPart[cid][cFek] += 0.01;
		return 1;
	}
	
	if(PRESSED(KEY_NO))
	{
		new vs;
		new carid;
		if(IsPlayerInAnyVehicle(playerid))
		{
			carid = GetPlayerVehicleID(playerid);
			vs = IsAVsKocsi(carid);
		}
		else
		{	
			carid = GetClosestVehicle(playerid);
			if(GetPlayerDistanceFromVehicle(playerid, carid) > 8.0) return 1;
		}
		vs = IsAVsKocsi(carid);
		if(vs == NINCS) return 1;
		if(CarInfo[vs][cOwned] != 1 || CarInfo[vs][cTulaj] != PlayerInfo[playerid][pID] && CarInfo[vs][cKulcsok][0] != PlayerInfo[playerid][pID] && CarInfo[vs][cKulcsok][1] != PlayerInfo[playerid][pID] && JarmuKulcs[playerid] != CarInfo[vs][cId]) return 1;
		SetVehicleIndex(playerid, carid, true, true, true);
		VehicleInfo[carid][Kozos] = 1;
		if(CarInfo[vs][cLock] == 1)
		{
			CarInfo[vs][cLock] = 0;
			KocsiRiaszto[carid] = 0;
			Inditasgatlo[carid] = 0;
			SetJarmu(carid, KOCSI_RIASZTO, 0);
			GameTextForPlayer(playerid, "~w~J?rm«~n~~r~nyitva", 4000, 3);
			if(CarInfo[vs][cRiaszto] >= 1)
				Cselekves(playerid, "kinyitotta a jármûvét és kikapcsolta a riasztót",0);
			else
				Cselekves(playerid, "kinyitotta a jármûvét",0);
			UnLockCar(carid);
		}
		else
		{
			VehicleInfo[carid][Kozos] = 1;
			CarInfo[vs][cLock] = 1;
			KocsiRiaszto[carid] = 1;
			SetJarmu(carid, KOCSI_RIASZTO, 0);
			GameTextForPlayer(playerid, "~w~J?rm«~n~~r~z?rva", 4000, 3);
			if(CarInfo[vs][cRiaszto] >= 1)
				Cselekves(playerid, "bezárta a jármûvét és bekapcsolta a riasztót",0);
			else
				Cselekves(playerid, "bezárta a jármûvét",0);
			LockCar(carid);
		}
		new Float:pos[3];
		GetPlayerPos(playerid, ArrExt(pos));
		foreach(Jatekosok, p)
		{
			if(PlayerToPoint(10, p, ArrExt(pos))) 
				PlayerPlaySound(p, 1145, 0.0, 0.0, 0.0);
		}
		SetTimerEx("Indexvege", 500, false, "dd", carid, playerid);
		CarUpdate(vs, CAR_Lock);
		return 1;
	}
	/*if((PRESSED(KEY_FIRE) || PRESSED(KEY_CROUCH) || PRESSED(KEY_ACTION) || PRESSED(KEY_JUMP)) && PlayerInfo[playerid][pHullacipel] > -1)
	    return ClearAnimations(playerid), ApplyPlayerAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 1, 1, 1, 1, 1);*/

	if(IsPlayerInAnyVehicle(playerid) && PRESSED(KEY_YES) && PlayerState[playerid] == PLAYER_STATE_DRIVER)
	{
		new veh = GetPlayerVehicleID(playerid);
		if(IsABicikli(veh) || IsABoat(veh)) return 1;
		if(GetJarmu(veh, KOCSI_LAMPA) == 1)
		{
			SetJarmu(veh, KOCSI_LAMPA, 0);
			TrailerHatsoLampa(veh, false);
			//Cselekves(playerid, "kikapcsolta a lámpát");
		}
		else
		{
			if(CarPart[veh][cAkkumulator] < 0.1)//akku
				return Msg(playerid, "Lemerült az akkumulátor!");//akku
			if(CarPart[veh][cElektronika] >= 100.0) return Msg(playerid, "Az elektronika tönkrement, így nem tudod bekapcsolni!");
			CarPart[veh][cElektronika] += 0.01;
			SetJarmu(veh, KOCSI_LAMPA, 1);
			TrailerHatsoLampa(veh, true);
			//Cselekves(playerid, "bekapcsolta a lámpát");
		}
		return 1;
	}
	//itt
	if(ScripterDuty[playerid] && PlayerState[playerid] == PLAYER_STATE_DRIVER)
	{		
		if(PRESSED(KEY_ANALOG_UP))
		{
			new Float:speed[3], car = GetPlayerVehicleID(playerid);
			new Float:szorzo=2.0;
			GetVehicleVelocity(car, ArrExt(speed));
			speed[0] *= szorzo, speed[1] *= szorzo, speed[2] *= szorzo;
			SetVehicleVelocity(car, ArrExt(speed));
			
			SetGVarInt("JBSpeedProtect", UnixTime + 0, car);
		}
		if(PRESSED(KEY_ANALOG_DOWN))
		{
			new Float:speed[3], car = GetPlayerVehicleID(playerid);
			GetVehicleVelocity(car, ArrExt(speed));
			SetVehicleVelocity(car, ArrExt2(speed), 0.4);
			
			SetGVarInt("JBSpeedProtect", UnixTime + 0, car);
		}
		if(PRESSED(KEY_ANALOG_LEFT))
		{
		
			new Float:speed[3], car = GetPlayerVehicleID(playerid);
			GetVehicleVelocity(car, ArrExt(speed));
			SetVehicleVelocity(car, speed[0]-0.5, speed[1]-0.5, speed[2]);
			
			SetGVarInt("JBSpeedProtect", UnixTime + 0, car);

		}
		
	}
	else 
	{
		
		if(PRESSED(KEY_ANALOG_LEFT) || PRESSED(KEY_LOOK_LEFT))
		{
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(PlayerInfo[playerid][pIndexSzam] && PRESSED(KEY_ANALOG_LEFT) || PlayerInfo[playerid][pIndexQE] && PRESSED(KEY_LOOK_LEFT))
				{
					new vehicleidje = GetPlayerVehicleID(playerid);
						
					if(VehicleInfo[vehicleidje][Kozos]) SetVehicleIndex(playerid, vehicleidje, false, true), VehicleInfo[vehicleidje][Kozos] = 0;
					else SetVehicleIndex(playerid, vehicleidje, true);
				}

			}
		}
		if(PRESSED(KEY_ANALOG_RIGHT) || PRESSED(KEY_LOOK_RIGHT))
		{
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(PlayerInfo[playerid][pIndexSzam] && PRESSED(KEY_ANALOG_RIGHT) || PlayerInfo[playerid][pIndexQE] && PRESSED(KEY_LOOK_RIGHT))
				{
					new vehicleidje = GetPlayerVehicleID(playerid);

					if(VehicleInfo[vehicleidje][Kozos]) SetVehicleIndex(playerid, vehicleidje, true), VehicleInfo[vehicleidje][Kozos] = 0;
					else SetVehicleIndex(playerid, vehicleidje, false, true);
				}
			}
		}
		if(PRESSED(KEY_ANALOG_DOWN))
		{
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && PlayerInfo[playerid][pIndexSzam])
			{
				new vehicleidje = GetPlayerVehicleID(playerid);

				if(!VehicleInfo[vehicleidje][Kozos])
				{
					SetVehicleIndex(playerid, vehicleidje, true, true, true);
					VehicleInfo[vehicleidje][Kozos] = 1;
				}
				else
				{
					SetVehicleIndex(playerid, vehicleidje, true, true);
					VehicleInfo[vehicleidje][Kozos] = 0;
				}
			}
		}
	}
	/*if(IsScripter(playerid)) // NE TÖRÖLD!!
	{
		
		new
			fel_le,
			bal_jobb,
			gombok
		;
		GetPlayerKeys(playerid, gombok, fel_le, bal_jobb);
		SendFormatMessage(playerid, COLOR_WHITE, "Newkeys: %d, Oldkeys: %d, Fel_le: %d, Bal_jobb: %d", newkeys, oldkeys, fel_le, bal_jobb);
		
		if(GetPlayerAnimationIndex(playerid) && newkeys != 0)
		{
			new
				animlib[32],
				animname[32],
				msg[128],
				id
			;
			
			id = GetPlayerAnimationIndex(playerid);
			GetAnimationName(id, animlib, 32, animname, 32);
			format(msg, 128, "[Futó animáció] ID: %d Részleg: %s Név: %s", id, animlib, animname);
			SendClientMessage(playerid, 0xFFFFFFFF, msg);
		}
	} // NE TÖRÖLD!! */

	AFKIdo[playerid] = 0;
	new vehid = GetPlayerVehicleID(playerid);
	if(HOLDING(KEY_FIRE) && !TuzetOlt[playerid] && (WeaponArmed(playerid) == WEAPON_FIREEXTINGUISHER || GetVehicleModel(vehid) == 407)) // bal egérgomb v. bal egérgomb + jobb egérgomb
		TuzetOlt[playerid] = true;
	else if(RELEASED(KEY_FIRE) && TuzetOlt[playerid])
		TuzetOlt[playerid] = false;

	new
	    faformat[32];
    if(HOLDING(KEY_FIRE) && AMT(playerid, MUNKA_FAVAGO))
	{
		if(GetPlayerWeapon(playerid) == 9)
		{
			new fa = GetClosestFaHely(playerid);

			if((GetDistanceToFaHely(playerid, fa) < 5.0))
			{
				
				foreach(Jatekosok,c)
				{
					if( 0 < GetDistanceBetweenPlayers(playerid, c) < 5.0) return Msg(playerid, "Valaki a közelben áll, így nem vághatod a fát!");

				}
				
			    if(!PlayerInfo[playerid][pFavagozik])
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "** Sajnálom, de te nem vetted fel a munkát!");
			        
				if(FavagoHelyek[fa][faallapot] > 0)
				{
					KillTimer(PlayerInfo[playerid][pFavagoMunkaTimer]);
					SendClientMessage(playerid, -1, "Elkezdted a favágást!");
					PlayerInfo[playerid][pFavagoMunkaTimer] = SetTimerEx("FavagasTimer", 1000, false, "ii", playerid, fa);
					PlayerInfo[playerid][pFavagoMunkazik] = true;
					format(faformat, sizeof(faformat), "~w~Allapot: ~r~%d%%", FavagoHelyek[fa][faallapot]);
					PlayerTextDrawSetString(playerid, FaVagasTD, faformat);
					PlayerTextDrawShow(playerid, FaVagasTD);
				} else
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Ez a fa már ki van vágva!");
			}
		}
	}
	else if(RELEASED(KEY_FIRE) && AMT(playerid, MUNKA_FAVAGO))
	{
		PlayerInfo[playerid][pFavagoMunkazik] = false;
		KillTimer(PlayerInfo[playerid][pFavagoMunkaTimer]);
		PlayerTextDrawHide(playerid, FaVagasTD);
	}
	
	if(PRESSED(KEY_CROUCH) && IsPlayerInAnyVehicle(playerid) && PlayerState[playerid] != PLAYER_STATE_DRIVER)
	{	
		new kocsi, Float:kocsih;
		kocsi = GetPlayerVehicleID(playerid);
		GetVehicleHealth(kocsi, kocsih);
		new fegyo = WeaponArmed(playerid);
		if(kocsih > 1000.0 || fegyo == 22 || fegyo == 23 || fegyo == 24 || fegyo == 25 || fegyo == 26 || fegyo == 27)
		{
			Msg(playerid, "A-a!!");
			ClearAnim(playerid);
			return 1;
		}
		if(!DriveBy[playerid]) 
		{
			if(WeaponArmed(playerid)) DriveBy[playerid] = true;
				else { DriveBy[playerid] = false; ApplyAnimation(playerid,"PED","CAR_GETIN_RHS",4.1,0,0,0,0,1,1); ClearAnim(playerid); }
		}
		else
		{
			ApplyAnimation(playerid,"PED","CAR_GETIN_RHS",4.1,0,0,0,0,1,1);
			DriveBy[playerid] = false;
		}

		return 1;
	}

	if((PRESSED(KEY_FIRE) || PRESSED(KEY_ACTION)) && PlayerRaceTuning[playerid][tNitro] > 0 && PlayerRaceTuning[playerid][tNitroIdo] == 0 && KocsibanVan[playerid])
	{
		switch(PlayerRaceTuning[playerid][tNitro])
		{
			case 1: PlayerRaceTuning[playerid][tNitroIdo] = 38;
			case 2: PlayerRaceTuning[playerid][tNitroIdo] = 30;
		}
	}
	new vehicleid = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
    {
		if(RELEASED(KEY_ACTION))
		{
			Msg(playerid, "Ne bunnyzz!");
			Freeze(playerid, 300);
		}
	}
	if(HOLDING(KEY_FIRE) || HOLDING(KEY_SECONDARY_ATTACK) && HOLDING(KEY_HANDBRAKE))
	{
		if(PlayerInfo[playerid][pJailed] == 3)
		{
			Cselekves(playerid, "ütöget jailban, így szerzett +2perc börtönidõt", 0, true);
			PlayerInfo[playerid][pJailTime] += 120;
		}
	}
	
	if(PRESSED(KEY_ACTION) && Sokkol[playerid])
	{
		new
			veh,
			Float:x, Float:y, Float:z,
			Float:X, Float:Y, Float:Z,
			Float:tav, Float:tav2 = 99999.9, legkozelebbi = NINCS;
		
		veh = GetPlayerVehicleID(playerid);
		if(!EzzelShockolhat(veh)) return Msg(playerid, "Ezzel akarsz sokkolni?");
		if(IsARepulo(veh)) return Msg(playerid, "Ezzel akarsz sokkolni?");

		
		GetVehiclePos(veh, x, y, z);
		GetXYInFrontOfVehicle(playerid, x, y, SokkTav[playerid]);
		
		for(new car = 1; car < MAX_VEHICLES; car++)
		{
			if(!IsVehicleConnected(car) || car == veh) continue;
			GetVehiclePos(car, X, Y, Z);
			tav = GetDistanceBetweenPoints(x, y, z, X, Y, Z);
			if(tav < tav2)
			{
				tav2 = tav;
				legkozelebbi = car;
			}
		}
		
		if(tav2 > 5.0)
			return Msg(playerid, "Messze van, próbáld újra");
		
		new
			sebesseg = GetVehicleSpeed(veh),
			fail
		;
		
		if(165 > sebesseg >= 150)
		{
			switch(random(100))
			{
				case 1..5: fail = 1;
			}
		}
		else if(180 > sebesseg >= 165)
		{
			switch(random(100))
			{
				case 1..10: fail = 1;
			}
		}
		else if(sebesseg >= 180)
		{
			switch(random(100))
			{
				case 1..15: fail = 1;
			}
		}
		
		new sofor = KocsiSofor(legkozelebbi);
		if(fail != 1 && sofor != NINCS && PlayerRaceInfo[sofor][xVersenyen] != NINCS && PlayerRaceTuning[sofor][tEMP] > 0)
		{
			switch(PlayerRaceTuning[sofor][tEMP])
			{
				case 1:
				{
					switch(random(100))
					{
						case 1..20: fail = 2;
					}
				}
				
				case 2:
				{
					switch(random(100))
					{
						case 1..40: fail = 2;
					}
				}
				
				case 3:
				{
					switch(random(100))
					{
						case 1..75: fail = 2;
					}
				}
			}
		}
		
		if(random(2) == 1)
		{
			Cselekves(playerid, "megpróbált sokkolni, de nem sikerült");

			KocsitSokkolt[playerid] = 10;
		
			Sokkol[playerid] = false;
			if(IsValidDynamicObject(SokkObject[veh])) DestroyDynamicObject(SokkObject[veh]);
			SokkObject[veh] = INVALID_OBJECT_ID;
			
			GameTextForPlayer(playerid,"~n~~n~~n~~r~~h~Sikertelen sokkolas", 5000, 3);
			foreach(Jatekosok, p)
			{
				if(IsPlayerInVehicle(p, legkozelebbi))
					GameTextForPlayer(p,"~n~~n~~n~~r~~h~A jarmuvet majdnem sokkoltak!~n~~g~~h~Vigyazz!", 5000, 3);
			}
		}
		else if(fail == 1)
		{
			new kocsi = GetPlayerVehicleID(playerid);
			
			Cselekves(playerid, "megpróbált lesokkolni egy jármûvet, de a nagy sebesség miatt a saját kocsija lett sokkolva");

			KocsitSokkolt[playerid] = 15;
			KocsiSokkolva[kocsi] = 15;
		
			Sokkol[playerid] = false;
			if(IsValidDynamicObject(SokkObject[veh])) DestroyDynamicObject(SokkObject[veh]);
			SokkObject[veh] = INVALID_OBJECT_ID;

			engineOn[kocsi] = 0;
			SetJarmu(kocsi, KOCSI_MOTOR, 0);
			
			GameTextForPlayer(playerid,"~n~~n~~n~~r~~h~A jarmuved sokkolva hiba miatt", 5000, 3);
			foreach(Jatekosok, p)
			{
				if(IsPlayerInVehicle(p, legkozelebbi))
					GameTextForPlayer(p,"~n~~n~~n~~r~~h~A jarmuvet majdnem sokkoltak!~n~~g~~h~A rendor kocsija leallt", 5000, 3);
			}
		}
		else if(fail == 2)
		{			
			Cselekves(playerid, "megpróbált lesokkolni egy jármûvet, de a kocsi EMP védelme hárította, így ez nem sikerült");

			KocsitSokkolt[playerid] = 15;
		
			Sokkol[playerid] = false;
			if(IsValidDynamicObject(SokkObject[veh])) DestroyDynamicObject(SokkObject[veh]);
			SokkObject[veh] = INVALID_OBJECT_ID;
			
			GameTextForPlayer(playerid,"~n~~n~~n~~r~~h~Sajnos nem sikerult a sokkolas az EMP vedelem miatt!~n~~g~~h~Probald ujra!", 8000, 3);
			foreach(Jatekosok, p)
			{
				if(IsPlayerInVehicle(p, legkozelebbi))
					GameTextForPlayer(p,"~n~~n~~n~~r~~h~Majdnem lesokkoltak!~n~~g~~h~Vigyazz!", 5000, 3);
			}
		}
		else
		{			
			foreach(Jatekosok, p)
			{
				if(IsPlayerInVehicle(p, legkozelebbi))
					GameTextForPlayer(p,"~n~~n~~n~~r~~h~A jarmuvet sokkoltak", 5000, 3);
			}
			
			Cselekves(playerid, "lesokkolt egy jármûvet");
			
			KocsitSokkolt[playerid] = 15;
			KocsiSokkolva[legkozelebbi] = 120;
			CarPart[GetPlayerVehicleID(playerid)][cAkkumulator] -= 15.0;
			
			if(CarPart[legkozelebbi][cAkkumulator] < 0.0)
				CarPart[legkozelebbi][cAkkumulator] = 0.0;
			
			CarPart[legkozelebbi][cElektronika] = 100.0;
			
			Sokkol[playerid] = false;
			if(IsValidDynamicObject(SokkObject[veh])) DestroyDynamicObject(SokkObject[veh]);
			SokkObject[veh] = INVALID_OBJECT_ID;

			engineOn[legkozelebbi] = 0;
			Gyujtas[vehicleid] = false;
			SetJarmu(legkozelebbi, KOCSI_MOTOR, 0);
		}
	}
	
	/*if(newkeys & KEY_CROUCH && newkeys & KEY_SPRINT)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && IsACop(playerid) && OnDuty[playerid] && !Sokkolt[playerid])
		{
			if(GetPlayerWeapon(playerid) == 24 || GetPlayerWeapon(playerid) == 22)
			{
				new player = GetClosestPlayer(playerid);
				if(GetDistanceBetweenPlayers(playerid, player) > 5.0 && IsPlayerNPC(player))
					return Msg(playerid, "Nincs a közeledben senki");
				
				if(IsPlayerInWater(player) || IsPlayerInWater(playerid))
					return Msg(playerid, "Vízben lévõt akarsz lesokkolni? Az áram agyonüt titeket!");
				
				if(GetPlayerTargetPlayer(playerid) == player)
				{
					if(Rabol[player] == 1) Rabol[player] = 0;
					SendClientMessage(player, COLOR_LIGHTBLUE, "* Lesokkolt egy rendõr, és 60 másodpercig megbénultál.");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Lesokkoltad 60 másodpercre.");
					Cselekves(playerid, "lõ a sokkolóval, és lesokkolja a célszemélyt", 1);
					GameTextForPlayer(player, "~r~Sokkoltak", 2500, 3);
					Bilincs(player, 1);
					ApplyAnimation(player,"CRACK","crckdeth2",4.1,0,1,1,1,0);
					//FegyverElrak(player);
					WeaponArm(player);
					Sokkolt[playerid] = 15;
				}
				else
				{
					new string[128];
					format(string, sizeof(string), "* Majdnem lesokkolt egy rendõr! Vigyázz!");
					SendClientMessage(player, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Ejj ez nem jött össze...");
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					Cselekves(playerid, "lõ a sokkolóval, és majdnem lesokkolja a célszemélyt", 1);
					GameTextForPlayer(player, "~r~Majdnem lesokkolt!", 2500, 3);
					Sokkolt[playerid] = 5;
				}
			}
		}
	}*/
	
	if(PRESSED(KEY_JUMP) && PlayerInfo[playerid][pMegbotlott])
	{
	    if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !Animban[playerid] && GetPlayerWeapon(playerid) != 34 && !NemMozoghat(playerid))
		{
			ApplyAnimation(playerid, "PED", "getup_front", 2.3, 0, 1, 1, 0, -1, 1);
			PlayerInfo[playerid][pMegbotlott] = false;
		}
	}
	
	if(PRESSED(KEY_JUMP) && !HOLDING(KEY_HANDBRAKE) && !PlayerInfo[playerid][pMegbotlott])
	{
	    if(AdminDuty[playerid] == 0 && ScripterDuty[playerid] == 0 && !Desync[playerid] && PlayerInfo[playerid][pJailed] == 0)
	    {
			if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && Ugrasok[playerid][0] == 0 && !Animban[playerid] && GetPlayerWeapon(playerid) != 34 && !NemMozoghat(playerid))
			{
				Ugrasok[playerid][0] = 1;

				if(Ugrasok[playerid][1] == 0)
					Ugrasok[playerid][1] = 10; // 10mp

				Ugrasok[playerid][2]++;

				new bool:anim = false;
				switch(Ugrasok[playerid][2])
				{
					case 1..3: {}
					case 4:
					{
						switch(random(10))
						{
							case 1..2: anim = true;
						}
					}
					case 5:
					{
						switch(random(10))
						{
							case 1..5: anim = true;
						}
					}
					case 6:
					{
						switch(random(10))
						{
							case 1..7: anim = true;
						}
					}
					default: anim = true;
				}
				if(Kamera[playerid] == NINCS)
					Szukseglet(playerid, (random(10)/10)+0.7);
					
				if(anim)
				{
					ClearAnimations(playerid);
					ApplyAnimation(playerid, "PED", "KO_shot_front", 2.3, 0, 1, 1, 1, 0, 1);
					PlayerInfo[playerid][pMegbotlott] = true;
				}
			}
  		}
	}
	
	if(newkeys == KEY_HANDBRAKE && oldkeys == 0) // jobb gombnál animációtörlés
	{
		if(Mobile[playerid] == 255 && !Rabol[playerid] && !PlayerCuffed[playerid] && !Leutve[playerid] && !Animban[playerid] && AnimClearBlockedUntil[playerid] < UnixTime)
		{
			if(IsFallingAnimation(animationIndex)) // aki ugrás közben bugot használ ki, egy kis meglepi ^-^
			{
				new Float:hp;
				GetPlayerHealth(playerid, hp);
				
				if(hp >= 30)
					SetPlayerHealth(playerid, hp - 15.0);
					
				if(random(3) == 0)
					ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
			}
			else
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		}
	}

	if(newkeys == KEY_SECONDARY_ATTACK)
	{
		
		new vw = GetPlayerVirtualWorld(playerid);
		if(vw >= 50000 && vw <= (50000 + MAX_PLAYERS))
		{
			vw -= 50000;
			if(IsPlayerConnected(vw) && IsPlayerNPC(vw))
			{
				new nid = NPC_ID[vw];
				if(!NPC_Vezetok[nid][nMegallt])
					return Msg(playerid, "A busz még nem állt meg, várj a megállóig!");
				if(!PlayerToPoint(1.5, playerid, 2021.936, 2235.204, 2103.953))
					return Msg(playerid, "Az ajtónál kell leszállni!");
				
				new megallo = NPC_Vezetok[nid][nHolTart]-1;
				//PlayerInfo[playerid][pCFalsePositive] = 1;
				SetPlayerPos(playerid, NPC_Megallok[nid][megallo][0], NPC_Megallok[nid][megallo][1], NPC_Megallok[nid][megallo][2]);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0, "keystatechange");
				Cselekves(playerid, "leszállt a buszról");
				if(PlayerInfo[playerid][pJegy] == 1)
				{
					PlayerInfo[playerid][pJegy] = 0;
					Msg(playerid, "A jegyed már nem érvényes");
				}
				JegyBuntetve[playerid] = false;
			}
		}
	}
	if(PRESSED(KEY_JUMP) && Kamera[playerid] != NINCS && MelyikKamera[playerid] != NINCS)
	{
		if(MelyikKamera[playerid] == 1)
		{
			if(Kamera[playerid] == 1)
			{
				SetPlayerCameraPos(playerid, -1962.093, 588.351, 39.980); 
				SetPlayerCameraLookAt(playerid, -1950.864, 566.055, 35.234);
				Kamera[playerid] = 2;
			}
			else if(Kamera[playerid] == 2)
			{
				SetPlayerCameraPos(playerid, -1962.093, 588.351, 39.980); 
				SetPlayerCameraLookAt(playerid, -1979.185, 558.746, 35.118);
				Kamera[playerid] = 3;
			}
			else if(Kamera[playerid] == 3)
			{
				SetPlayerCameraPos(playerid, 2316.853, -17.153, 28.526); 
				SetPlayerCameraLookAt(playerid, 2309.581, -8.211, 26.742);
				Tele(playerid, 2325.446, -10.469, 26.742, false, 1555, 0);
				Kamera[playerid] = 4;
				
			}
			else if(Kamera[playerid] == 4)
			{
				SetPlayerCameraPos(playerid, 2317.125, -0.169, 28.689); 
				SetPlayerCameraLookAt(playerid, 2309.281, -9.862, 26.742);
				Kamera[playerid] = 5;
			}
			else if(Kamera[playerid] == 5)
			{
				SetPlayerCameraPos(playerid, 2306.144, -17.321, 28.598); 
				SetPlayerCameraLookAt(playerid, 2314.806, -1.466, 26.742);
				Kamera[playerid] = 6;
			}
			else if(Kamera[playerid] == 6)
			{
				SetPlayerCameraPos(playerid, 2306.144, -17.321, 28.598); 
				SetPlayerCameraLookAt(playerid, 2314.806, -1.466, 26.742);
				Tele(playerid, 2144.606, 1594.452, 999.755, false, 1555, 1);
				Kamera[playerid] = 7;
			}
			else if(Kamera[playerid] == 7)
			{
				SetPlayerCameraPos(playerid, 2142.929, 1604.062, 1003.821); 
				SetPlayerCameraLookAt(playerid, 2150.481, 1602.958, 1001.970);
				Kamera[playerid] = 8;
			}
			else if(Kamera[playerid] == 8)
			{
				SetPlayerCameraPos(playerid, 2140.601, 1620.260, 1002.323); 
				SetPlayerCameraLookAt(playerid, 2147.851, 1605.643, 1001.363);
				Kamera[playerid] = 9;
			}
			else if(Kamera[playerid] == 9)
			{
				SetPlayerCameraPos(playerid, 2151.853, 1606.368, 1003.096); 
				SetPlayerCameraLookAt(playerid, 2143.480, 1619.888, 1000.968);
				Kamera[playerid] = 10;
			}
			else if(Kamera[playerid] == 10)
			{
				SetPlayerCameraPos(playerid, 2141.104, 1607.320, 996.070); 
				SetPlayerCameraLookAt(playerid, 2147.659, 1624.965, 993.688);
				Kamera[playerid] = 11;
			}
			else if(Kamera[playerid] == 11)
			{
				SetPlayerCameraPos(playerid, 2144.004, 1626.562, 996.290); 
				SetPlayerCameraLookAt(playerid, 2144.360, 1604.194, 993.568);
				Kamera[playerid] = 12;
			}
			else if(Kamera[playerid] == 12)
			{
				SetPlayerCameraPos(playerid, 2147.158, 1627.724, 996.374); 
				SetPlayerCameraLookAt(playerid, 2143.953, 1641.954, 993.576);
				Kamera[playerid] = 13;
			}
			else if(Kamera[playerid] == 13)
			{
				SetPlayerCameraPos(playerid, 2155.774, 1596.058, 1002.768); 
				SetPlayerCameraLookAt(playerid, 2159.241, 1619.883, 999.967);
				Tele(playerid, 2165.480, 1612.761, 999.972, false, 1555, 1);
				Kamera[playerid] = 14;
			}
			else if(Kamera[playerid] == 14)
			{
				SetPlayerCameraPos(playerid, 2226.284, 1621.254, 1003.014); 
				SetPlayerCameraLookAt(playerid, 2224.382, 1598.751, 999.983);
				Tele(playerid, 2238.217, 1585.519, 999.971, false, 1555, 1);
				Kamera[playerid] = 15;
			}
			else if(Kamera[playerid] == 15)
			{
				SetPlayerCameraPos(playerid, 2226.284, 1621.254, 1003.014); 
				SetPlayerCameraLookAt(playerid, 2196.668, 1617.161, 999.972); 
				Kamera[playerid] = 16;
			}
			else if(Kamera[playerid] == 16)
			{
				SetPlayerCameraPos(playerid, 2216.615, 1595.099, 1002.567); 
				SetPlayerCameraLookAt(playerid, 2222.118, 1570.528, 999.997);
				Kamera[playerid] = 17;
			}
			else if(Kamera[playerid] == 17)
			{
				SetPlayerCameraPos(playerid, 2168.703, 1581.614, 1002.653); 
				SetPlayerCameraLookAt(playerid, 2191.559, 1587.863, 999.978);
				Kamera[playerid] = 18;
			}
			else if(Kamera[playerid] == 18)
			{
				SetPlayerCameraPos(playerid, -1924.521, 588.865, 42.181); 
				SetPlayerCameraLookAt(playerid, -1948.613, 564.146, 35.207);
				Tele(playerid, -1943.552, 550.390, 37.267, false, 0, 0);
				Kamera[playerid] = 1;
			}
		}
		else if(MelyikKamera[playerid] == 2)
		{	
			if(Kamera[playerid] == 19)
			{
				SetPlayerCameraPos(playerid, 1925.36969229, -2440.82577467, 16.5399142578); 
				SetPlayerCameraLookAt(playerid, 1919.96179229, -2428.40717467, 14.9999142578);
				Kamera[playerid] = 20;
			}
			else if(Kamera[playerid] == 20)
			{
				SetPlayerCameraPos(playerid, 1930.35009229, -2437.08617467, 18.5399142578); 
				SetPlayerCameraLookAt(playerid, 1930.35009229, -2437.08617467, 10.5399142578);
				Kamera[playerid] = 21;
			}
			else if(Kamera[playerid] == 21)
			{
				SetPlayerCameraPos(playerid, 1423.7068, -1045.5217, 36.2174); 
				SetPlayerCameraLookAt(playerid, 1440.4279, -1036.3112, 30);
				Tele(playerid, 1447.0922, -1035.0599, 20, false, 0, 0);
				Kamera[playerid] = 22;
			}
			else if(Kamera[playerid] == 22)
			{
				SetPlayerCameraPos(playerid, 1894.67199229, -2429.68037467, 16.9999142578); 
				SetPlayerCameraLookAt(playerid, 1904.86069229, -2426.21337467, 15.9999142578);
				Tele(playerid, 1918.29959229, -2428.31927467, 10.9656142578, false, 1555, 0); 
				Kamera[playerid] = 19;
			}
		}	
		else if(MelyikKamera[playerid] == 3)
		{	
			if(Kamera[playerid] == 23)
			{
				SetPlayerCameraPos(playerid, 64.6270, -1546.2535, 9.4645); 
				SetPlayerCameraLookAt(playerid, 50.8215, -1538.4445, 6.4109);
				Tele(playerid, 69.5301, -1547.3535, 0.7020, false, 0, 0);
				Kamera[playerid] = 24;
			}
			else if(Kamera[playerid] == 24)
			{
				SetPlayerCameraPos(playerid, 1440.3658, -1756.2223, 26.0224); 
				SetPlayerCameraLookAt(playerid, 1478.0836, -1734.6091, 15.1434);
				Tele(playerid,1441.6880, -1755.9028, 7.9034, false, 0, 0);
				Kamera[playerid] = 25;
			}
			else if(Kamera[playerid] == 25)
			{
				SetPlayerCameraPos(playerid, 1467.50, -1752.79, 24.25); 
				SetPlayerCameraLookAt(playerid, 1479.0868, -1767.4955, 19.1645);
				Tele(playerid,1465.6407, -1756.8179, 21.9892, false, 0, 0);
				Kamera[playerid] = 26;
			}
			else if(Kamera[playerid] == 26)
			{
				SetPlayerCameraPos(playerid, 1929.51, -1765.60, 15.72); 
				SetPlayerCameraLookAt(playerid, 1938.2274, -1777.4841, 14.4064);
				Tele(playerid,1925.3287, -1771.5802, 11.5173, false, 0, 0);
				Kamera[playerid] = 27;
			}
			else if(Kamera[playerid] == 27)
			{
				SetPlayerCameraPos(playerid, 1015.62, -928.00, 45.29); 
				SetPlayerCameraLookAt(playerid, 1004.1381, -936.9189, 43.4445);
				Tele(playerid,1014.0941, -926.2975, 40.6561, false, 0, 0);
				Kamera[playerid] = 28;
			}
			else if(Kamera[playerid] == 28)
			{
				SetPlayerCameraPos(playerid, -892.95, -1108.23, 105.70); 
				SetPlayerCameraLookAt(playerid, -913.4893, -1092.3210, 102.0390);
				Tele(playerid,-894.8271, -1101.0953, 93.0126, false, 0, 0);
				Kamera[playerid] = 29;
			}
			else if(Kamera[playerid] == 29)
			{
				SetPlayerCameraPos(playerid, -1222.47, -782.34, 70.58); 
				SetPlayerCameraLookAt(playerid, -1163.9612, -835.2014, 67.9231);
				Tele(playerid,-1222.5817, -789.4741, 64.3133, false, 0, 0);
				Kamera[playerid] = 30;
			}
			else if(Kamera[playerid] == 30)
			{
				SetPlayerCameraPos(playerid, -1980.07, 109.42, 33.37); 
				SetPlayerCameraLookAt(playerid, -1993.9071, 150.0355, 27.3390);
				Tele(playerid,-1982.8337, 110.0123, 22.7714, false, 0, 0);
				Kamera[playerid] = 31;
			}
			else if(Kamera[playerid] == 31)
			{
				SetPlayerCameraPos(playerid, 41.13, -1517.58, 9.46); 
				SetPlayerCameraLookAt(playerid, 51.5929, -1525.2882, 6.7844);
				Tele(playerid, 32.8127, -1516.1107, -1.4058, false, 0, 0);
				Kamera[playerid] = 23;
			}
		}
	}
	if(newkeys == KEY_SPRINT && (Admin(playerid,1) || IsAS(playerid)) && Tevezik[playerid] != NINCS)
	{
	//tv rendszer
		//PlayerInfo[playerid][pCFalsePositive] = 1;
		new x = NINCS;
		foreach(Jatekosok, y)
		{
			if(Tevezik[playerid] < y && playerid != y && x == NINCS && ((PlayerInfo[y][pAdmin] > PlayerInfo[playerid][pAdmin] && Tvenged[y]) ||  (PlayerInfo[y][pAdmin] <= PlayerInfo[playerid][pAdmin])))
			{
				x = y;
				SendFormatMessage(playerid, COLOR_YELLOW,"Továbblépés %d -idre",x);
				
			}

		}
		if(x == NINCS)
		{
			foreach(Jatekosok, y)
			{
				if(playerid != y && x == NINCS && ((PlayerInfo[y][pAdmin] > PlayerInfo[playerid][pAdmin] && Tvenged[y]) ||  (PlayerInfo[y][pAdmin] <= PlayerInfo[playerid][pAdmin])))
				{
					x = y;
					SendFormatMessage(playerid, COLOR_YELLOW,"Elõrõl kezdés %d -idre",x);
				}
				
			}
		
		}
		if(x == NINCS) return Msg(playerid, "Nincs fent akire lehetne váltani");
		Tevezve[Tevezik[playerid]] = NINCS;

		if(PlayerInfo[x][pAdmin] > PlayerInfo[playerid][pAdmin] && !Tvenged[x]) return Msg(playerid, "Õt nem tv-heted!"), Tevezik[playerid] = x;
		if(PlayerInfo[x][pAdmin] > PlayerInfo[playerid][pAdmin])
		{
			SendFormatMessage(x, COLOR_GREY, "[TV]%s tévéz téged", PlayerName(playerid));
		}


		Tevezik[playerid] = x;
		TogglePlayerSpectating(playerid, 1);

		SetPlayerInterior(playerid, GetPlayerInterior(x));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(x));

		if(!IsPlayerInAnyVehicle(x))
			PlayerSpectatePlayer(playerid, x);
		else
			PlayerSpectateVehicle(playerid, GetPlayerVehicleID(x));
		
		new sendername[32],giveplayer[32];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(x, giveplayer, sizeof(giveplayer));
		
		new string[128];
		if(TvEngedely[playerid] > UnixTime)
		{
			format(string, sizeof(string), "<< Adminsegéd %s megfigyeli %s-t! >>", sendername, giveplayer);
			ABroadCast(COLOR_LIGHTRED, string, 1);
		}

		Tevezik[playerid] = x;
		Tevezve[x] = playerid;
		TextDrawUpdate(playerid, TD_Info);
		TextDrawUpdate(playerid, TD_Info2);
		TextDrawUpdate(playerid, TD_Info3);
		//TextDrawUpdate(playerid, TD_Info4);	
	}
	if(PRESSED(KEY_HANDBRAKE))
	{
		
		if(IsPlayerInAnyVehicle(playerid) && engineOn[GetPlayerVehicleID(playerid)] == 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !IsABicikli(GetPlayerVehicleID(playerid)) && KocsibanVan[playerid])
		{
			
			new kocsi = GetPlayerVehicleID(playerid), vkocsi = IsAVsKocsi(kocsi);
			if(vkocsi != -1)
			{
				if(CarInfo[vkocsi][cOwned] == 0 && (PlayerInfo[playerid][pAutoker]<1 && AutokerKulcs[playerid] !=1 && !Lefoglalt[playerid]))
				{
					return 1;
				}
			}
				
			if(KocsiElet(kocsi) <= 350)
			{
				if(RoncsDerby[playerid][rdVersenyez])
					RoncsDerbiKieses(playerid);
				else
					return Msg(playerid, "A jármû elromlott! Hívj szerelõt!");
			}
			if(CarPart[kocsi][cMotorolaj] >= 100.0) return Msg(playerid,"Az olaj nagyon elhasználódott, az elektronika letiltotta a kocsi mûködését, hívj szerelõt");
			if(CarPart[kocsi][cMotor] >= 500.0) return Msg(playerid, "A motorblokk tönkrement! Hívj szerelõt, hogy megjavíthassa a jármûvet!");
			if(Inditasgatlo[kocsi] == 1 &&  !Lefoglalt[playerid]) return Msg(playerid,"Az indításgátló lezárta a kocsi motorját nem tudod elvinni(Ha tiéd a kocsi zárd be majd nyisd ki)");
			if(Almaszedeskozbe[kocsi] == 1) return Msg(playerid,"A kocsiba éppen almát szednek, ne vidd el!!");
			//if(KocsiHibas[kocsi]>0) return Msg(playerid, "A jármû elromlott! Nyisd fel a motorháztatõt, hátha megtalálod a hibát, vagy hívj szerelõt! /szerel átnéz ");
			if(Gas[kocsi] <= 0)
				return Msg(playerid, "Nincs üzemanyag!");
				
			if(bikazott[kocsi] == 0 && CarPart[kocsi][cAkkumulator] < 4.1) return Msg(playerid, "Lemerült az akkumulátor!");
			
			if(KocsiSokkolva[kocsi])
				return Msg(playerid, "A jármû sokkolva van");
			
			if(Tankolaskozben[kocsi]) return Msg(playerid,"Ebbe a kocsiba már tankolnak!");

			new Slot = NINCS;
			for(new x = 0; x < sizeof(CreatedCars); x++)
			{
				if(CreatedCars[x] == kocsi)
				{ 
					Slot = 1;
					break;
				}
			}
			if(IsMunkaKocsi(kocsi) == MUNKA_CROSS)
			{
				if(PlayerInfo[playerid][pCrossido]>0)
				{
					if(MunkaFolyamatban[playerid] == 1) return 1;
					new kocsiserules, ido, Float:kocsielet;
					GetVehicleHealth(kocsi, kocsielet);
					kocsiserules = 1000 - floatround(kocsielet);
					ido = 1000 + (kocsiserules * 5);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Beindítod a jármûvet...");
					KocsiHasznal[kocsi]=PlayerName(playerid);
					SetTimerEx("Munkavege", ido, false, "ddd", playerid, M_MOTOR, 0);
					MunkaFolyamatban[playerid] = 1;
					return 1;
				}
				else
					SendClientMessage(playerid, COLOR_YELLOW, "Ha szeretnél mutatványozni írd be, hogy /cross");
			}
			if(SajatKocsi(playerid, kocsi) || vkocsi != -1 && CarInfo[vkocsi][cOwned] == 0 || Slot==1 || JarmuKulcs[playerid] == kocsi)
			{
				if(MunkaFolyamatban[playerid] == 1) return Msg(playerid, "Valami folyamatban van!");
				
				new kocsiserules, ido, Float:kocsielet;
				GetVehicleHealth(kocsi, kocsielet);
				kocsiserules = 1000 - floatround(kocsielet);
				ido = 1000 + (kocsiserules * 5);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Beindítod a jármûvet...");
				KocsiHasznal[kocsi]=PlayerName(playerid);
				SetTimerEx("Munkavege", ido, false, "ddd", playerid, M_MOTOR, 0);
				MunkaFolyamatban[playerid] = 1;
				if(CarPart[kocsi][cMotorolaj] >= 70.0)
					Msg(playerid,"Lassan olajat kell cserélni, keress fel egy szerelõt!");
				if(CarPart[kocsi][cFek] >= 100.0)
					Msg(playerid, "A fékbetét elhasználódott, így nehezebb lesz fékezni!");
				if(CarPart[kocsi][cElektronika] >= 100.0)
					Msg(playerid, "Az elektronika tönkrement, így nem tudsz semmilyen elektronikus eszközt használni!");
				CarPart[kocsi][cAkkumulator] -= 4.0;
				return 1;
			}
			else
				SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs kulcsod ehhez a jármûhöz! El kell lopnod. (( /ellop ))");
		}
	}
	return 1;
}

forward FavagasTimer(playerid, fa);
fpublic FavagasTimer(playerid, fa)
{
	new
		faformat[32];

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, FavagoHelyek[fa][fax], FavagoHelyek[fa][fay], FavagoHelyek[fa][faz]))
	{
		PlayerInfo[playerid][pFavagoMunkazik] = false;
		KillTimer(PlayerInfo[playerid][pFavagoMunkaTimer]);
		PlayerTextDrawHide(playerid, FaVagasTD);
		return true;
	}

	if((FavagoHelyek[fa][faallapot] > 0) && (GetPlayerWeapon(playerid) == 9))
	{
		KillTimer(PlayerInfo[playerid][pFavagoMunkaTimer]);
		FavagoHelyek[fa][faallapot] -= random(6);
		format(faformat, sizeof(faformat), "~w~Allapot: ~r~%d%%", FavagoHelyek[fa][faallapot]);
		PlayerTextDrawSetString(playerid, FaVagasTD, faformat);
		PlayerInfo[playerid][pFavagoMunkaTimer] = SetTimerEx("FavagasTimer", 1000, false, "ii", playerid, fa);
	} else if(((FavagoHelyek[fa][faallapot] <= 0) && PlayerInfo[playerid][pFavagoMunkazik]) || (GetPlayerWeapon(playerid) != 9))
	{
		KillTimer(PlayerInfo[playerid][pFavagoMunkaTimer]);
		SendClientMessage(playerid, -1, "Sikeresen kivágtad a fát!");

		PlayerInfo[playerid][pFavagoMunkazik] = false;

		new
			Float:playerposok[3];
		GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);

		PlayerTextDrawHide(playerid, FaVagasTD);

		FaLerak(playerid, playerposok[0], playerposok[1], playerposok[2]);
		//SetTimerEx("FaVisszaallitas", 30000, false, "i", fa);
	}
	if(FavagoHelyek[fa][faallapot] <= 0)
	    SetTimerEx("FaVisszaallitas", 30000, false, "i", fa);
	    
	return true;
}

forward FaVisszaallitas(fa);
fpublic FaVisszaallitas(fa)
{
	FavagoHelyek[fa][faallapot] = 100;
	return true;
}

fpublic OnPlayerDeath(playerid, killerid, reason)
{
	if(RoncsDerby[playerid][rdVersenyez] || RoncsDerby[playerid][rKiesett] > UnixTime) return RoncsDerbiKieses(playerid);
	
	if(LastDamagerDamage[playerid] > (UnixTime - LAST_SHOOT_FOR_KILLER))
	{
		killerid = LastDamager[playerid];
		reason = LastDamagerType[playerid];
	}
	
	if(!gPlayerLogged[playerid])
		return BanEx(playerid, "DieBeforeLogin");
		
	if(Paintballozik[playerid])
	{
		KorhazIdo[playerid] = NINCS;
		if(killerid != INVALID_PLAYER_ID)
		{
			PaintballOlesek[killerid] ++;
			if(PaintballOlesek[killerid] > PaintballInfo[PBTerem[playerid]][pbNyertesOles])
			{
				PaintballInfo[PBTerem[playerid]][pbNyertes] = killerid;
				PaintballInfo[PBTerem[playerid]][pbNyertesOles] = PaintballOlesek[killerid];
				PaintballInfo[PBTerem[playerid]][pbNyertesFegyver] = WeaponArmed(killerid);
				
			}
			PaintballInfo[PBTerem[playerid]][pbNyertesOles] = PaintballOlesek[PaintballInfo[PBTerem[playerid]][pbNyertes]];
			foreach(Jatekosok, i)
			{
				if(Paintballozik[i] && PBTerem[i] == PBTerem[playerid])
					SendFormatMessage(i, COLOR_YELLOW, "[Paintball] %s vezet %d öléssel.",ICPlayerName(PaintballInfo[PBTerem[i]][pbNyertes]),PaintballInfo[PBTerem[i]][pbNyertesOles]);
			}
		}
		return 1;
	}
	if(AdminDuty[playerid] == 1 || ScripterDuty[playerid] == 1 || RoncsDerby[playerid][rdVersenyez])
	{
		//Meghalt[playerid] = true;
		KorhazIdo[playerid] = NINCS;
		return 1;
	}
	if(Kikepzoben[playerid])
	{
		KorhazIdo[playerid] = NINCS;
		WeaponArm(playerid);
		return 1;
	}
	
	if(reason == 0 && !BelepveFake[killerid])
	{
		SeeBan(killerid, 0, NINCS, "Bocs haver, de ezt már meguntuk csáó! [FAKEKILL]", true, true); // utolsó paraméter az a kick, nem false kellett volna, hanem true
		return 1;
	}
		
	if(Halal[playerid]) return 1;
	else Halal[playerid] = true;

	/*if(!Haldoklik[playerid])
	{
		Halal[playerid] = false;
		Haldoklik[playerid] = true;
		HaldoklasIdo[playerid] = 10;
		new Float:pos[3];
		GetPlayerPos(playerid, ArrExt(pos));
		HaldoklasPoz[playerid][0] = pos[0];
		HaldoklasPoz[playerid][1] = pos[1]; 
		HaldoklasPoz[playerid][2] = pos[2];
		HaldoklasInt[playerid] = GetPlayerInterior(playerid);
		HaldoklasVW[playerid] = GetPlayerVirtualWorld(playerid);
		SendClientMessage(playerid, COLOR_RED, "Súlyosan megsérültél és most haldoklasz...");
		SendFormatMessage(playerid, COLOR_RED, "Ha úgy gondolod hogy nonosan öltek meg akkor F8 és PK! (#%d)", PlayerInfo[killerid][pBID]);
		SetTimerEx("HaldoklikTimer", 1000, false, "d", playerid);
		
		return 1;
	}
	else
	{
		Haldoklik[playerid] = false;
	}*/
	
	
	if(IsValidDynamic3DTextLabel(Elajult[playerid])) 
		DestroyDynamic3DTextLabel(Elajult[playerid]), Elajult[playerid] = INVALID_3D_TEXT_ID;
	if(PInfo(playerid,Elajult))
	{
		Animban[playerid] = 0;
		PInfo(playerid,Elajult) = false;
		Feketeseg(playerid, false);
		Leutve[playerid] = false;
		UnFreeze(playerid);
	}
	
	if(PajzsNala[playerid] == true)
		PajzsTorles(playerid);
	
	if(IsValidDynamic3DTextLabel(SajtoIgazolvany[playerid]))
		DestroyDynamic3DTextLabel(SajtoIgazolvany[playerid]), SajtoIgazolvany[playerid] = INVALID_3D_TEXT_ID;
	
	if(IsValidDynamic3DTextLabel(Onkentestext[playerid]))
		DestroyDynamic3DTextLabel(Onkentestext[playerid]), Onkentestext[playerid] = INVALID_3D_TEXT_ID;
	
	if(Paintballnevezve[playerid])
	{	
		Paintballnevezve[playerid] = false;
		PaintballInfo[PBTerem[playerid]][pbNevezesek]--;
		PBTerem[playerid] = NINCS;
	}
	
	for(new l = 0; l < MaxLoter; l++)
	{
		if(LoterInfo[l][lHasznalva] == true && LoterInfo[l][lHasznalo] == playerid)
		{
			LoterVege(playerid, l, LoterInfo[l][lFegyver]);
		}
	}
	
	if(!Paintballozik[playerid] && ScripterDuty[playerid] != 1 && AdminDuty[playerid] != 1 && !Kikepzoben[playerid] && !Admin(playerid,1338)
	&& killerid != INVALID_PLAYER_ID && !Harcol[playerid] && !PlayerInfo[playerid][pJailed])
	{
		new osszskill= 0;
		for(new x = 0; x <= 10; x++)
			osszskill += PlayerInfo[playerid][pFegyverSkillek][x]; 
			
		new levonas;
		switch(osszskill)
		{
			case 0..500: levonas = 15;
			case 501..2000: levonas = 30;
			case 2001..3000: levonas = 45;
			case 3001..4000: levonas = 60;
			case 4001..5000: levonas = 75;
			case 5001..6000: levonas = 90;
			case 6001..7000: levonas = 90;
			case 7001..8000: levonas = 100;
			case 8001..9000: levonas = 120;
			case 9001..10000: levonas = 140;
			case 10001..11000: levonas = 170;
			default: levonas = 300;
		}
		for(new x = 0; x <= 10; x++)
			if(PlayerInfo[playerid][pFegyverSkillek][x] > 300) PlayerInfo[playerid][pFegyverSkillek][x] -=levonas; 
	}
	
	// térfigyelõ - ölés
	if(killerid != INVALID_PLAYER_ID && !PLAYER_MARKER_IS_HIDDEN(killerid) && !PlayerMarker[killerid][mHidden] && !IsACop(killerid)
		&& (PLAYER_MARKER_WEAPONS_KILL(killerid) || (WeaponArmed(killerid) == WEAPON_SNIPER || WeaponArmed(killerid) == WEAPON_RIFLE) && GetDistanceBetweenPlayers(killerid, playerid) <= PLAYER_MARKER_RIFLE_DISTANCE)
	)
	{
		switch(PlayerMarker[killerid][mType])
		{
			case PLAYER_MARKER_KILL:
			{
				MarkerAction(killerid, PLAYER_MARKER_SET, PLAYER_MARKER_MKILL);
			}
			case PLAYER_MARKER_MKILL:
			{
				if((PlayerMarker[killerid][mTime] + PLAYER_MARKER_TIME_MKILL) > PLAYER_MARKER_MTIME_MKILL)
					PlayerMarker[killerid][mTime] = PLAYER_MARKER_MTIME_MKILL;
				else
					PlayerMarker[killerid][mTime] += PLAYER_MARKER_TIME_MKILL;
			}
			default:
			{
				MarkerAction(killerid, PLAYER_MARKER_SET, PLAYER_MARKER_KILL);
			}
		}
	}
	
	MarkerAction(playerid, PLAYER_MARKER_CLEAR);
	
	new lastdeath = (LastDeath[playerid] == 0 ? 30 : UnixTime - LastDeath[playerid]);
	LastDeath[playerid] = UnixTime;

	if(!ScriptShoot[playerid] && killerid != INVALID_PLAYER_ID && (Shooted[playerid][killerid] < (UnixTime - 10) || reason <= 42 && GetPlayerWeapon(killerid) != reason || lastdeath <= 3))
	{
		seo_fakekillCount[playerid]++;
		seo_fakekillTime[playerid] += 3;

		new string[128];
		format(string, sizeof(string), "<< Lehetséges FakeKill: [%d]%s - reason: %d (%d) - shoot: %dmp - death: %dmp - %dx >>", playerid, Nev(playerid), reason, GetPlayerWeapon(killerid), Shooted[playerid][killerid], lastdeath);
		Log("Cheat", string);

		if(seo_fakekillCount[playerid] >= 2)
		{
			ABroadCast(COLOR_LIGHTRED, string, 1);

			if(seo_fakekillCount[playerid] >= 5)
				SeeBan(playerid, .oka = "Cheat (FK)", .szoveg = true);

			return 1;
		}
	}
	
	new name2[MAX_PLAYER_NAME];
	if(killerid != INVALID_PLAYER_ID)
		GetPlayerName(killerid, name2, sizeof(name2));
	else
		name2 = "-";

	new Float:pos[3], penz = GetMoney(playerid);
	GetPlayerPos(playerid, ArrExt(pos));
	if(reason == 16 || reason == 38)
	{
		/*if(Paintballozik[playerid])
			format(_tmpString, 128, "[PB] %s megölte %s-t ezzel: %s - Pénz: %dFt - Pos: %.0f, %.0f, %.0f", name2, PlayerName(playerid), aWeaponNames[reason], penz, ArrExt(pos));
		else if(Kikepzoben[playerid])
			format(_tmpString, 128, "[Kiképzõ] %s megölte %s-t ezzel: %s - Pénz: %dFt - Pos: %.0f, %.0f, %.0f", name2, PlayerName(playerid), aWeaponNames[reason], penz, ArrExt(pos));
		else
		{*/
		format(_tmpString, 128, "%s megölte %s-t ezzel: %s - Pénz: %dFt - Pos: %.0f, %.0f, %.0f", name2, PlayerName(playerid), aWeaponNames[reason], penz, ArrExt(pos));
		KillLog(_tmpString, 1);
		RKFigyelo[playerid][RKido] = UnixTime + RK_FIGYELO_IDO;
		RKFigyelo[playerid][RKx] = pos[0];
		RKFigyelo[playerid][RKy] = pos[1];
		RKFigyelo[playerid][RKz] = pos[2];
		RKFigyelo[playerid][RKnamekill] = name2;
		RKFigyelo[playerid][RKWeapon] = aWeaponNames[reason];
		//}

		foreach(Jatekosok, i)
		{
			if(togkill[i] && PlayerInfo[i][pAdmin] > 0 || togkill[i] && IsScripter(playerid))
				SendClientMessage(i, COLOR_GREY, _tmpString);
		}
		if(!AdminDuty[killerid] && !Harcol[killerid] && !Paintballozik[killerid] && !Kikepzoben[killerid] && !Halal[killerid])
		{
			PlayerInfo[killerid][pOlesIdo] +=K_OLES_IDO;
			tformat(128, "%s plusz kórház jail ideje %d másodpercre nõtt (+"#K_OLES_IDO"mp)", PlayerName(killerid), PlayerInfo[killerid][pOlesIdo]);
			KillLog(_tmpString, 0);
		}


	}
	else if(reason >= 0 && reason <= 47 || reason == 51)
	{
		if(reason == 51)
		{
			if(BViadal[killerid] && BViadal[playerid])
				format(_tmpString, 128, "Az egyik viadal játékos felrobbantotta a másikat!");
			else if(IsHitman(killerid) && HitmanDuty[killerid] == 1 && PlayerInfo[playerid][pHeadValue] > 0)
				format(_tmpString, 128, "%s felrobbantotta %s-t - Pénz: %dFt - Pos: %.0f, %.0f, %.0f", PlayerInfo[killerid][pHitmanNev],  PlayerName(playerid), aWeaponNames[reason], penz, ArrExt(pos));
			else
				format(_tmpString, 128, "%s felrobbantotta %s-t - Pénz: %dFt - Pos: %.0f, %.0f, %.0f", name2, PlayerName(playerid), aWeaponNames[reason], penz, ArrExt(pos));
		}
		else
		{
			if(BViadal[killerid] && BViadal[playerid])
				format(_tmpString, 128, "Az egyik viadal játékos megölte a másikat!");
			else if(IsHitman(killerid) && HitmanDuty[killerid] == 1 && PlayerInfo[playerid][pHeadValue] > 0)
				format(_tmpString, 128, "%s megölte %s-t ezzel: %s - Pénz: %dFt - Pos: %.0f, %.0f, %.0f", PlayerInfo[killerid][pHitmanNev],  PlayerName(playerid), aWeaponNames[reason], penz, ArrExt(pos));
			else
				format(_tmpString, 128, "%s megölte %s-t ezzel: %s - Pénz: %dFt - Pos: %.0f, %.0f, %.0f", name2, PlayerName(playerid), aWeaponNames[reason], penz, ArrExt(pos));
		}
		
		if(BViadal[playerid])
		{
			BViadal[playerid] = 0;
			BVJatekosok--;
		}
		
		RKFigyelo[playerid][RKido] = UnixTime + RK_FIGYELO_IDO;
		RKFigyelo[playerid][RKx] = pos[0];
		RKFigyelo[playerid][RKy] = pos[1];
		RKFigyelo[playerid][RKz] = pos[2];
		RKFigyelo[playerid][RKnamekill] = name2;
		RKFigyelo[playerid][RKWeapon] = aWeaponNames[reason];
		foreach(Jatekosok, i)
		{
			if(togkill[i] && PlayerInfo[i][pAdmin] > 0)
				SendClientMessage(i, COLOR_GREY, _tmpString);
		}
		
		if(reason == 51)
			format(_tmpString, 128, "%s felrobbantotta %s-t - Pénz: %dFt - Pos: %.0f, %.0f, %.0f", name2, PlayerName(playerid), aWeaponNames[reason], penz, ArrExt(pos));
		else
			format(_tmpString, 128, "%s megölte %s-t ezzel: %s - Pénz: %dFt - Pos: %.0f, %.0f, %.0f", name2, PlayerName(playerid), aWeaponNames[reason], penz, ArrExt(pos));
		
		KillLog(_tmpString, 0);

		if(!AdminDuty[killerid] && !Harcol[killerid] && !Paintballozik[killerid] && !Kikepzoben[killerid] && !Halal[killerid])
		{
			PlayerInfo[killerid][pOlesIdo] +=K_OLES_IDO;
			tformat(128, "%s plusz kórház jail ideje %d másodpercre nõtt (+"#K_OLES_IDO"mp)", PlayerName(killerid), PlayerInfo[killerid][pOlesIdo]);
			KillLog(_tmpString, 0);
		}
	}
	else
	{
		if(reason >= 49 && reason <= 54 && reason != 52)
		{
		    new killer = GetClosestPlayer(playerid);
			new oka[32];
			if(reason == 49)
			    oka = "Autó";
			else if(reason == 50)
			    oka = "Helikopter";
			else if(reason == 51)
                oka = "Robbanás";
			else if(reason == 53)
                oka = "Megfulladt";
			else if(reason == 54)
                oka = "Leesett";
			PlayerInfo[playerid][pEllatva] = false;
			if(reason != 54 && reason != 53 && reason != 51)
				format(_tmpString, 128, "%s meghalt (%s), oka: %s | Lehet, hogy %s ölte meg, mert a közelben volt - Pénz: %dFt - Pos: %.0f, %.0f, %.0f", PlayerName(playerid), name2, oka, PlayerName(killer), penz, ArrExt(pos));
			else
			    format(_tmpString, 128, "%s meghalt (%s), oka: %s - Pénz: %dFt - Pos: %.0f, %.0f, %.0f", PlayerName(playerid), name2, oka, penz, ArrExt(pos));
			KillLog(_tmpString, 0);
			foreach(Jatekosok, i)
			{
				if(PlayerInfo[i][pAdmin] > 0 && togkill[i])
					SendClientMessage(i, COLOR_GREY, _tmpString);
			}
		}
	}
	if(reason == 38)
	{
		if(IsPlayerConnected(killerid))
		{
			format(_tmpString, 128, "FIGYELMEZTETÉS: [%d]%s minigunnal ölt meg valakit!",killerid, PlayerName(killerid));
			ABroadCast(COLOR_YELLOW,_tmpString,1);
			KorhazIdo[playerid] = NINCS;
		}
	}
	if(gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}
	new caller = Mobile[playerid];
	if(caller != 255 && caller < 255 && IsPlayerConnected(caller))
	{
		SendClientMessage(caller,  COLOR_GRAD2, "   Megszakadt a vonal....");
		CellTime[caller] = 0;
		Mobile[caller] = 255;
	}

	ClearPlayerCrime(playerid);
	new Float:Angle; 
	new Float:playerpos[3];
	GetPlayerPos(playerid, playerpos[0], playerpos[1], playerpos[2]);
	GetPlayerFacingAngle(playerid, Angle);
	if(!Paintballozik[playerid] && ScripterDuty[playerid] != 1 && AdminDuty[playerid] != 1 && !Kikepzoben[playerid])
	{
		if(killerid != INVALID_PLAYER_ID)
			HullaLerak(playerid, playerpos[0], playerpos[1], playerpos[2], reason, GetPlayerVirtualWorld(playerid),Angle,PlayerName(killerid));
		else
			HullaLerak(playerid, playerpos[0], playerpos[1], playerpos[2], reason, GetPlayerVirtualWorld(playerid), Angle);
		
		//if(!IsACop(playerid))
		//{
		//DropAddWeapon(ArrExt(pos), GetPlayerWeapon(playerid), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		//DropAddAmmo(ArrExt(pos), GetPlayerWeapon(playerid), GetPlayerAmmo(playerid), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		//}

		// Ö#1
		/*if(!IsACop(playerid)) {
			FegyverEldob(playerid, GetPlayerWeapon(playerid),GetPlayerAmmo(playerid),playerpos[0], playerpos[1], playerpos[2],GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		}*/
	}
	
	new sloti = -1;
 	for(; ++sloti < MAX_PLAYER_ATTACHED_OBJECTS;) //törli az összes testre csatolható objectet
    {
        if(IsPlayerAttachedObjectSlotUsed(playerid, sloti))
			RemovePlayerAttachedObject(playerid, sloti);
    }
    
    if(killerid != INVALID_PLAYER_ID)
    {
		if(!IsHitman(killerid) && HitmanDuty[killerid] != playerid)
		{
			if(reason != 49)
				SetPlayerCriminal(killerid,255, "Elsõfokú Gyilkos");
			else if (reason == 49)
				SetPlayerCriminal(killerid,255, "Cserbenhagyás");
		}
		
		if(IsAt(killerid, IsAt_Korhaz))
		{
			ABroadCastFormat(COLOR_LIGHTRED, 1, "%s kórház DMelt - Auto 20perc magánzárka", PlayerName(killerid));

			Msg(killerid, "Tilos a kórház DM!");
			Jail(killerid, "+", 1200, "ajail2", "Kórház DM");
		}
		else if(PlayerInfo[killerid][pJailed] > 0)
		{
			if(PlayerInfo[killerid][pJailed] == 1 || PlayerInfo[killerid][pJailed] == 4 ||PlayerInfo[killerid][pJailed] == 5 || PlayerInfo[killerid][pJailed] == 7 ||PlayerInfo[killerid][pJailed] == 2)
			{
				ABroadCastFormat(COLOR_LIGHTRED, 1, "%s börtön DMelt - Auto 30perc magánzárka", PlayerName(killerid));

				Msg(killerid, "Tilos a börtön DM!");
				Jail(killerid, "+", 1800, "ajail2", "Börtön DM");
			}
		}

		if(TilosOlni > 0 && !IsPlayerNPC(killerid) && !Harcol[killerid] && !Paintballozik[killerid] && !Kikepzoben[killerid])
		{
			Msg(killerid, "Zeró tolerancia érvényben van, és mivel megszegted, 120 perc Ajail-t kaptál!");
			Jail(killerid, "+", 7200, "ajail", "Zero tolerancia");
		}
	}
	
	GameTextForPlayer(playerid, "~r~Sªlyosan megsr¬ltl", 2500, 0);
	ScriptShoot[playerid] = false;
	ClearAnimations(playerid);
    if(Zsebradio[playerid] > 0)
		Zsebradio[playerid] = 0;
	
    StopAudioStreamForPlayer(playerid);
	LsBankban[playerid]=false;

	if(OnDuty[playerid] != 0)
	{
        OnDuty[playerid] = 1;
		Munkaruha(playerid, 1);
	}
	
	#if defined Clint_Activated
	KulsoFegyverFrissites(playerid, true);
	#endif

	if( GyemantNala[playerid] != NINCS)
		GyemantAkcio( GYEMANT_LERAK, playerid, GyemantNala[playerid] );

	Ehseg[playerid] = 0.0;
	Vizelet[playerid] = 0.0;
	AirtaxiJob[playerid] = 0;
	ov[playerid]=0;
	Crosscp[playerid]=0;
	RepulesEngedely[playerid]=0;
	//if(EhsegBar[playerid] != INVALID_BAR_ID)
	//	HideProgressBarForPlayer(playerid, EhsegBar[playerid]);
	//if(VizeletBar[playerid] != INVALID_BAR_ID)
	//	HideProgressBarForPlayer(playerid, VizeletBar[playerid]);
	
	if(HarcVan && Harcol[playerid] && TeruletInfo[ HarcolTerulet[playerid] ][tHarc])
		HarcKieses(playerid, "Súlyosan megsérült");
	
	if(Visz[playerid] != NINCS)
		Visz[playerid] = NINCS;
	if(HVisz[playerid] != NINCS)
		HVisz[playerid] = NINCS;
	if(Rabol[playerid] == 1)
		Rabol[playerid] = 0;

    Animbanemrakhato[playerid] = 1;
    Animban[playerid] = 0;
	PlayerInfo[playerid][pSpawned] = 0;
	PlayerInfo[playerid][pLocal] = NINCS;
	Favago[playerid] = 0;
	Mobile[playerid] = 255;
	CellTime[playerid] = 0;
	JatekosZsak[playerid] = NINCS;
 	Szajkendo[playerid] = 0;
	Maszk[playerid] = 0;
	Sisak[playerid] = 0;
	RendorPajzsIdo[playerid] = 0;
	killerid = INVALID_PLAYER_ID;
	SetHealth(playerid, MAXHP);
	return 1;
}

fpublic OnPlayerSpawn(playerid)
{
	if(IsPlayerNPC(playerid))
	{
		NPCSpawn(playerid);
		return 1;
	}

	if(Logged(playerid) == 0)
		return 1;
	else if(!Paintballozik[playerid])
		SpawnVedelem[playerid] = 6;
	
	SetPlayerTeam(playerid, 0);
	
	BejelentoFelirat(playerid);
	AdminNevek(playerid);

   // TextDrawShowForPlayer(playerid, Textdraw2);
	STDPlayer[playerid] = 0;
	
	if(!AdminDuty[playerid])
	{
		if(PlayerInfo[playerid][pChar] > 0 && OnDuty[playerid] || PlayerInfo[playerid][pChar] > 0 && !LegalisSzervezetTagja(playerid) && !Civil(playerid))
			SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
		else
			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	}
	else
	{
		if(AdminDutySkin[playerid])
			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		else
			SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
	}

	SetPlayerSpawn(playerid);
	
	InvisibleColor(playerid);
	PlayerFixRadio(playerid);
	//for(new i = 0; i < sizeof(Turfs); i++)
	//    GangZoneShowForPlayer(playerid, i, TurfInfo[i][zColor]);
	  
	PlayerInfo[playerid][pGPS] = false;
	Radar(playerid, false);
	PlayerInfo[playerid][pSpawned] = 1;
	
	
	if(!LegalisSzervezetTagja(playerid) && !Civil(playerid) || Admin(playerid, 1337) || IsScripter(playerid))
		TeruletekMutatasa(playerid);
		
	UpdateWeaponHud(playerid);
	UpdateAmmoHud(playerid);
	UpdateHealthHud(playerid);
	UpdateArmorHud(playerid);
	return 1;
}


fpublic OnIncomingConnection(playerid, ip_address[], port)
{
	SendRconCommand("reloadbans");
    return 1;
}

fpublic KillLog(string[], cheat)
{
	new entry[256], fajl[64];

	if(cheat)
		format(fajl, sizeof(fajl), "Log/Kill/%s-%s-%s(cheat).log", Time("ev"), Time("honap"), Time("nap"));
	else
		format(fajl, sizeof(fajl), "Log/Kill/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock Log(log[], mi[])
{
	new entry[512], fajl[64];

    format(fajl, 64, "Log/%s/%s.log", log, EvHonapNap());
	format(entry, 512, "[%s] %s\n", OraPercMP(), mi);

	new File:hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

fpublic PayLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Pay/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

fpublic KickLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Kick/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

fpublic ChatLog(string[])
{
	new entry[256], fajl[64];
	
	foreach(Jatekosok, x)
	{
		if(BigEar[x])
			SendFormatMessage(x, COLOR_WHITE,"%s",string);
	}

    format(fajl, sizeof(fajl), "Log/Chat/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

fpublic CommandLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Parancsok/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
fpublic PosLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Log/poziciok.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
function CamLog(string[])
{
	new entry[512];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Log/kamerak.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

fpublic BeKilepes(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Connect/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
stock CheatLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Cheat/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
fpublic BanLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Ban/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

fpublic EgyebLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Egyeb/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
fpublic OnPlayerEnterCheckpoint(playerid)
{
	if(!OnPlayerEnterAnyCheckpoint(playerid, false))
		return 1;
	
	new string[128];
	new name[MAX_PLAYER_NAME];
	new oktato = OnlineUID(Oktato[playerid]);
	
	if(PlayerInfo[playerid][pJailed] == 3) 
	{
		if(AJCPValtozo[playerid] == 1) 
		{
			new ido = 30+(random(4));
			Format(string,"Admin Jail id§d cs¨kkentve %dmp-el.", ido);
			DisablePlayerCheckpoint(playerid);
			GameTextForPlayer(playerid, string, 5000, 1);
			AJCPValtozo[playerid] = 0;
			PlayerInfo[playerid][pJailTime] -= ido;
		}
	}
	
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 511)
     {
        if(AirtaxiJob[playerid] == 1)
        {
            AirtaxiJob[playerid] = 2;
            SetPlayerCheckpoint(playerid,405.2466,2453.1785,16.0646,10); //LV kicsi
            GameTextForPlayer(playerid,"~y~Remek munka! Menj tovabb!",5000,3);
            return 1;
         }
        if(AirtaxiJob[playerid] == 2)
        {
            AirtaxiJob[playerid] = 3;
            SetPlayerCheckpoint(playerid, 1569.2825,-2651.0815,13.5469,10); //LS
            GameTextForPlayer(playerid,"~y~Remek munka! Menj tovabb!",5000,3);
            return 1;
         }
        if(AirtaxiJob[playerid] == 3)
        {
            AirtaxiJob[playerid] = 4;
            SetPlayerCheckpoint(playerid,-1362.3613,-494.5784,13.7365,10); //SF Reptér
            GameTextForPlayer(playerid,"~y~Remek munka! Menj tovabb!",5000,3);
            return 1;
         }
        if(AirtaxiJob[playerid] == 4)
        {
			AirtaxiJob[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			PlayerInfo[playerid][pPayCheck] += 80000;
			SendClientMessage(playerid,COLOR_YELLOW,"* A csomagok elszállítva, fizetésed: 80.000 forint.");
			return 1;
        }
     }
	
	
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
	    TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(BusCallTime[playerid] > 0 && BusAccepted[playerid] < 999)
	{
	    BusAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		BusCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid]==1)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
		    PlayerInfo[playerid][pJackSkill] ++;
			if(PlayerInfo[playerid][pJackSkill] == 50)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Car Jack Skill is now Level 2, you will earn more Money and quicker Reload Time."); }
			else if(PlayerInfo[playerid][pJackSkill] == 100)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Car Jack Skill is now Level 3, you will earn more Money and quicker Reload Time."); }
			else if(PlayerInfo[playerid][pJackSkill] == 200)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Car Jack Skill is now Level 4, you will earn more Money and quicker Reload Time."); }
			else if(PlayerInfo[playerid][pJackSkill] == 400)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Car Jack Skill is now Level 5, you will earn more Money and quicker Reload Time."); }
			new level = PlayerInfo[playerid][pJackSkill];
			if(level >= 0 && level <= 50)
			{
			    new rand = random(sizeof(SELLCAR1));
			    format(string, sizeof(string), "You sold a car for %dFt, your reload time is 20 minutes.", SELLCAR1[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GiveMoney(playerid, SELLCAR1[rand]);
			    PlayerInfo[playerid][pCarTime] = 1200;
			}
			else if(level >= 51 && level <= 100)
			{
			    new rand = random(sizeof(SELLCAR2));
			    format(string, sizeof(string), "You sold a car for %dFt, your reload time is 18 minutes.", SELLCAR2[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GiveMoney(playerid, SELLCAR2[rand]);
			    PlayerInfo[playerid][pCarTime] = 1080;
			}
			else if(level >= 101 && level <= 200)
			{
			    new rand = random(sizeof(SELLCAR3));
			    format(string, sizeof(string), "You sold a car for %dFt, your reload time is 16 minutes.", SELLCAR3[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GiveMoney(playerid, SELLCAR3[rand]);
			    PlayerInfo[playerid][pCarTime] = 960;
			}
			else if(level >= 201 && level <= 400)
			{
			    new rand = random(sizeof(SELLCAR4));
			    format(string, sizeof(string), "You sold a car for %dFt, your reload time is 14 minutes.", SELLCAR4[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GiveMoney(playerid, SELLCAR4[rand]);
			    PlayerInfo[playerid][pCarTime] = 840;
			}
			else if(level >= 401)
			{
			    new money = 6000;
			    format(string, sizeof(string), "You sold a car for %dFt, your reload time is 12 minutes.", money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GiveMoney(playerid, money);
			    PlayerInfo[playerid][pCarTime] = 720;
			}
			GameTextForPlayer(playerid, "~y~Sold the car", 2500, 1);
			CP[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    KocsiRespawn(GetPlayerVehicleID(playerid));
		}
		else
		{
		    GameTextForPlayer(playerid, "Not in a car", 5000, 1);
		}
	}
	else if(CP[playerid] == 5)
	{
	    GameTextForPlayer(playerid, "~y~At the Missions Checkpoint", 2500, 1);
		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 9)//Karting
	{
		GameTextForPlayer(playerid, "~r~Wait here for more Kart Racers", 4000, 3);
		DisablePlayerCheckpoint(playerid);
	}
	else if(Favago[playerid] == 2)
	{
		Favago[playerid] = 3;
		SetPlayerCheckpoint(playerid,-1947.4995,-2440.8176,30.6250,10);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Menj vissza, és pakold le a fát! (/lepakol-fa)");
		return 1;
	 }
	else if(Favago[playerid] == 5)
	{
		Favago[playerid] = 0;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Gratulálok! Elvégezted a munkát! Fizetséged: 25.000 forint.");
		GiveMoney(playerid, 25000);
		return 1;
	 }
	else if(CP[playerid] == 10) { CP[playerid] = 11; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2258.7874,-2402.9712,12.7035,8.0); }
	else if(CP[playerid] == 11) { CP[playerid] = 12; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2225.8755,-2461.3875,12.7190,8.0); }
	else if(CP[playerid] == 12) { CP[playerid] = 13; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2276.9983,-2662.8328,12.8580,8.0); }
	else if(CP[playerid] == 13) { CP[playerid] = 14; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2449.1399,-2663.0562,12.8138,8.0); }
	else if(CP[playerid] == 14) { CP[playerid] = 15; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2566.9814,-2504.5686,12.7692,8.0); }
	else if(CP[playerid] == 15) { CP[playerid] = 16; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2719.0520,-2503.5962,12.7706,8.0); }
	else if(CP[playerid] == 16) { CP[playerid] = 17; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2720.7881,-2405.6589,12.7441,8.0); }
	else if(CP[playerid] == 17) { CP[playerid] = 18; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2571.5195,-2401.1531,12.7528,8.0); }
	else if(CP[playerid] == 18) { CP[playerid] = 19; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2406.6995,-2423.1182,12.6641,8.0); }
	else if(CP[playerid] == 19) { CP[playerid] = 20; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2322.9194,-2341.5715,12.6664,8.0); }
	else if(CP[playerid] == 20)//End of Karting
	
	{
	    CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    GetPlayerName(playerid, name, sizeof(name));
	    if(FirstKartWinner == 999)
	    {
	        FirstKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s finished First in the Kart Race.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(SecondKartWinner == 999)
	    {
	        SecondKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s finished Second in the Kart Race.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		            }
				}
			}
	    }
	    else if(ThirdKartWinner == 999)
	    {
	        ThirdKartWinner = playerid;
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnected(i))
	            {
		            if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		            {
		                format(string, sizeof(string), "* %s finished Third in the Kart Race.",name);
		                SendClientMessage(i, COLOR_WHITE, string);
		                SendClientMessage(i, COLOR_WHITE, "** Karting Race Over **");
		                CP[i] = 0;
		                DisablePlayerCheckpoint(i);
		            }
				}
	        }
	    }
	}
	//ide
	else if(Hajocp[playerid] == 2) {Hajocp[playerid] = 3, VizsgaRaceAllit(playerid, 53.7223,-1314.2769,-0.1171);}
	else if(Hajocp[playerid] == 3) {Hajocp[playerid] = 4, VizsgaRaceAllit(playerid, 32.6353,-1330.8391,-0.0964);}
	else if(Hajocp[playerid] == 4 ) { Hajocp[playerid] = 5, VizsgaRaceAllit(playerid, 385.2141,-2043.6469,-0.2836);}
	else if(Hajocp[playerid] == 5) { Hajocp[playerid] = 6, VizsgaRaceAllit(playerid, 1143.1094,-2519.0381,0.0469);}
	else if(Hajocp[playerid] == 6) { Hajocp[playerid] = 7, VizsgaRaceAllit(playerid, 844.6083,-1971.7008,0.0960);}
	else if(Hajocp[playerid] == 7)  { Hajocp[playerid] = 8, VizsgaRaceAllit(playerid, 728.3119,-1494.5437,0.0093);}
	else if(Hajocp[playerid] == 8 ) { Hajocp[playerid] = 9, VizsgaRaceAllit(playerid, 719.6855,-1630.5509,-0.3211);}
	else if(Hajocp[playerid] == 9 )
	{
		if(oktato == NINCS || GetDistanceBetweenPlayers(playerid, oktato) > 5.0) return Msg(playerid, "Nincs jelen az oktató! Ennek okai lehet: LAGG vagy kilépett!");
		{
			Msg(playerid, "Áthaladtál az összes checkpointon kérem állj félre szabályosan, és állisd le a motort.");
			DisablePlayerCheckpoint(playerid);
			Hajocp[playerid] = 0;

			DisablePlayerCheckpoint(oktato);	
			Autocp[oktato] = 22;
			Hajocp[oktato] = 0;		
			Msg(oktato, "A vizsgának vége, ha a tanuló megfelelt ird be igen, ha nem felelt meg ird be nem.");
			PlayerInfo[oktato][pHajoSkill] ++;
		}
	}
	else if(Helicp[playerid] == 2) { Helicp[playerid] = 3;  VizsgaRaceAllit(playerid, -1185.5914,24.2073,14.3231);}
	else if(Helicp[playerid] == 3) { Helicp[playerid] = 4; VizsgaRaceAllit(playerid, 1545.3843,-1354.6393,329.6508);}
	else if(Helicp[playerid] == 4 )
	{
		if(oktato == NINCS || GetDistanceBetweenPlayers(playerid, oktato) > 5.0) return Msg(playerid, "Nincs jelen az oktató! Ennek okai lehet: LAGG vagy kilépett!");
		{
			Msg(playerid, "Áthaladtál az összes checkpointon kérem szállj le szabályosan, és állisd le a motort.");
			DisablePlayerCheckpoint(playerid);
			Helicp[playerid] = 0;

			DisablePlayerCheckpoint(oktato);
			Autocp[oktato] = 22;
			Helicp[oktato] = 0;	
			Msg(oktato, "A vizsgának vége, ha a tanuló megfelelt ird be igen, ha nem felelt meg ird be nem.");
			PlayerInfo[oktato][pRepSkill] ++;
		}
	
	}
	else if(Repulocp[playerid] == 2) { Repulocp[playerid] = 3;  VizsgaRaceAllit(playerid, 1763.5691,-2592.9497,13.5469);}
	else if(Repulocp[playerid] == 3) { Repulocp[playerid] = 4; VizsgaRaceAllit(playerid, -1657.7188,-164.9527,14.1484);}
	else if(Repulocp[playerid] == 4) { Repulocp[playerid] = 5; VizsgaRaceAllit(playerid, -1336.3794,-564.9724,14.0408);}
	else if(Repulocp[playerid] == 5) { Repulocp[playerid] = 6; VizsgaRaceAllit(playerid, -1613.1356,-489.4807,21.9815);}
	else if(Repulocp[playerid] == 6) { Repulocp[playerid] = 7; VizsgaRaceAllit(playerid, -1646.1191,-154.4375,14.0417);}
	else if(Repulocp[playerid] == 7) { Repulocp[playerid] = 8; VizsgaRaceAllit(playerid, 1477.5151,1623.5779,10.8125);}
	else if(Repulocp[playerid] == 8) { Repulocp[playerid] = 9; VizsgaRaceAllit(playerid, 1612.2505,1550.3362,10.8144);}
	else if(Repulocp[playerid] == 9) { Repulocp[playerid] = 10; VizsgaRaceAllit(playerid, 366.0967,2537.1526,16.6612);}
	else if(Repulocp[playerid] == 10) { Repulocp[playerid] = 11; VizsgaRaceAllit(playerid, 1502.8485,-2493.7388,13.5547);}
	else if(Repulocp[playerid] == 11)
	{
		if(oktato == NINCS || GetDistanceBetweenPlayers(playerid, oktato) > 5.0) return Msg(playerid, "Nincs jelen az oktató! Ennek okai lehet: LAGG vagy kilépett!");
		{
			Msg(playerid, "Áthaladtál az összes checkpointon kérem szállj le szabályosan, és állisd le a motort.");
			DisablePlayerCheckpoint(playerid);
			Repulocp[playerid] = 0;

			DisablePlayerCheckpoint(oktato);
			Autocp[oktato] = 22;
			Repulocp[oktato] = 0;	
			Msg(oktato, "A vizsgának vége, ha a tanuló megfelelt ird be igen, ha nem felelt meg ird be nem.");
			PlayerInfo[oktato][pRepSkill] ++;
		}
	
	}
	//---------------adr vizsga------------------
	else if(Adrcp[playerid]==2)
	{
		Adrcp[playerid] = 3; DisablePlayerCheckpoint(playerid); VizsgaRaceAllit(playerid, 2632.8652,-2117.6516,14.5727); 
	}
	else if(Adrcp[playerid] == 3)
	{
		new veh= 0;
		veh= GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleModel(GetVehicleTrailer(veh)) != 584)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "[ADR vizsga]: Nincs felkapcsolva Petrol Trailer!");
			SendClientMessage(oktato, COLOR_LIGHTRED, "[ADR vizsga]: Nincs felkapcsolva Petrol Trailer!");
		}
		else
		{ 
		Adrcp[playerid] = 4; VizsgaRaceAllit(playerid, 997.2233,-940.8109,42.7398);
		}
	}
	else if(Adrcp[playerid] == 4 )
	{
		Adrcp[playerid] = 5;  VizsgaRaceAllit(playerid, 905.2053,-1251.7772,16.2076);
	}
	else if(Adrcp[playerid] == 5 )
	{
		new veh= 0;
		veh= GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleModel(GetVehicleTrailer(veh)) != 584)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "[ADR vizsga]: Nincs felkapcsolva Petrol Trailer!");
			SendClientMessage(oktato, COLOR_LIGHTRED, "[ADR vizsga]: Nincs felkapcsolva Petrol Trailer!");
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "[ADR vizsga]: Pótkocsi lekapcsolása.");
			SendClientMessage(playerid, COLOR_YELLOW, "[ADR vizsga]: Menj oktató központba.");
			Freeze(playerid, 3000);
			KocsiRespawn(GetVehicleTrailer(veh));
			Adrcp[playerid] = 6; VizsgaRaceAllit(playerid, 1046.226,-1459.924,13.636);
		}
	}
	else if(Adrcp[playerid] == 6)
	{
		if(oktato == NINCS || GetDistanceBetweenPlayers(playerid, oktato) > 5.0) return Msg(playerid, "Nincs jelen az oktató! Ennek okai lehet: LAGG vagy kilépett!");
		{
			Msg(playerid, "Áthaladtál az összes checkpointon kérem állj félre szabályosan, parkolj le, és állisd le a jármûvet.");
			DisablePlayerCheckpoint(playerid);
			Adrcp[playerid] = 0;

			DisablePlayerCheckpoint(oktato);
			Adrcp[oktato] = 0;		
			Autocp[oktato] = 22;
			Msg(oktato, "A vizsgának vége, ha a tanuló megfelelt ird be igen, ha nem felelt meg ird be nem.");
			PlayerInfo[oktato][pAdrSkill] ++;
		}
		
	}
	else if(Kamioncp[playerid] == 2) { Kamioncp[playerid] = 3; VizsgaRaceAllit(playerid, 908.5102,-1221.9182,17.9997);}
	else if(Kamioncp[playerid] == 3) 
	{
		new veh= 0;
		veh= GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleModel(GetVehicleTrailer(veh)) != 435) {SendClientMessage(playerid, COLOR_YELLOW, "[Kamion vizsga]: Vegyél fel egy Article Trailer -t!");}
		else{ Kamioncp[playerid] = 4; VizsgaRaceAllit(playerid,1535.2347,-993.4286,43.3031);}
	}
	else if(Kamioncp[playerid] == 4)
	{
		Kamioncp[playerid] = 5;  VizsgaRaceAllit(playerid,1692.1459,-387.2889,39.9449); 
	}
	else if(Kamioncp[playerid] == 5) 
	{
		new veh= 0;
		veh= GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleModel(GetVehicleTrailer(veh)) != 435) {SendClientMessage(playerid, COLOR_LIGHTRED, "[Kamion vizsga]: Nincs felkapcsolva Article Trailer!");}
		else{ Kamioncp[playerid] = 6;VizsgaRaceAllit(playerid,1389.7400,885.8477,8.9231);}
	}
	else if(Kamioncp[playerid] == 6) 
	{
		Kamioncp[playerid] = 7; VizsgaRaceAllit(playerid,328.0479,805.6159,12.1658);
	}
	else if(Kamioncp[playerid] == 7)
	{
		Kamioncp[playerid] = 8; VizsgaRaceAllit(playerid,828.0441,1120.6207,30.7690);
	}
	else if(Kamioncp[playerid] == 8) 
	{
		new veh= 0;
		veh= GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleModel(GetVehicleTrailer(veh)) != 435) {SendClientMessage(playerid, COLOR_LIGHTRED, "[Kamion vizsga]: Nincs felkapcsolva Article Trailer!");}
		else{ Kamioncp[playerid] = 9; VizsgaRaceAllit(playerid,813.6331,845.8314,11.3151);}
	}
	else if(Kamioncp[playerid] == 9) 
	{
		Kamioncp[playerid] = 10; VizsgaRaceAllit(playerid,587.0988,845.3990,-41.5267);
	}
	else if(Kamioncp[playerid] == 10)
	{
		new veh= 0;
		veh= GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleModel(GetVehicleTrailer(veh)) != 435) {SendClientMessage(playerid, COLOR_LIGHTRED, "[Kamion vizsga]: Nincs felkapcsolva Article Trailer!");}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "[Kamion vizsga]: Pótkocsi lekapcsolása.");
			Freeze(playerid, 3000);
			KocsiRespawn(GetVehicleTrailer(veh));
			Kamioncp[playerid] = 11; VizsgaRaceAllit(playerid,623.6502,922.9997,-39.9297);
			SendClientMessage(playerid, COLOR_YELLOW, "[Kamion vizsga]: Vegyél fel egy Article Trailer 2 -õt!.");
		}
	}
	else if(Kamioncp[playerid] == 11) 
	{
		new veh= 0;
		veh= GetPlayerVehicleID(playerid);
		
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleModel(GetVehicleTrailer(veh)) != 450) {SendClientMessage(playerid, COLOR_LIGHTRED, "[Kamion vizsga]: Nincs felkapcsolva Article Trailer 2!");}
		else { Kamioncp[playerid] = 12; VizsgaRaceAllit(playerid,811.4652,843.5664,10.9914);}
	}
	else if(Kamioncp[playerid] == 12) 
	{
		Kamioncp[playerid] = 13; VizsgaRaceAllit(playerid,828.0441,1120.6207,30.7690);
	}
	else if(Kamioncp[playerid] == 13) 
	{
		Kamioncp[playerid] = 14; VizsgaRaceAllit(playerid,784.8570,1130.2721,29.3525);
	}
	else if(Kamioncp[playerid] == 14)
	{
		new veh= 0;
		veh= GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleModel(GetVehicleTrailer(veh)) != 450) {SendClientMessage(playerid, COLOR_LIGHTRED, "[Kamion vizsga]: Nincs felkapcsolva Article Trailer 2!");}
		else{ Kamioncp[playerid] = 15; VizsgaRaceAllit(playerid,306.3041,781.6377,14.4421);}
	}

	else if(Kamioncp[playerid] == 15) 
	{
		Kamioncp[playerid] = 16; VizsgaRaceAllit(playerid,514.2352,187.6570,19.8594);
	}
	else if(Kamioncp[playerid] == 16) 
	{
		Kamioncp[playerid] = 17; VizsgaRaceAllit(playerid,679.3433,-697.3047,17.1993); 
	}	
	else if(Kamioncp[playerid] == 17) 
	{
		Kamioncp[playerid] = 18; VizsgaRaceAllit(playerid,905.4968,-1247.5016,16.4760); 
	}	
	else if(Kamioncp[playerid] == 18) 
	{
		new veh= 0;
		veh= GetPlayerVehicleID(playerid);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER || GetVehicleModel(GetVehicleTrailer(veh)) != 450) {SendClientMessage(playerid, COLOR_LIGHTRED, "[Kamion vizsga]: Nincs felkapcsolva Article Trailer 2!");}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "[Kamion vizsga]: Pótkocsi lekapcsolása.");
			Freeze(playerid, 3000);
			KocsiRespawn(GetVehicleTrailer(veh));		
			Kamioncp[playerid] = 19;  VizsgaRaceAllit(playerid,1046.226,-1459.924,13.636);
		}
	}	
	else if(Kamioncp[playerid] == 19)
	{
		if(oktato == NINCS || GetDistanceBetweenPlayers(playerid, oktato) > 5.0) return Msg(playerid, "Nincs jelen az oktató! Ennek okai lehet: LAGG vagy kilépett!");
		{
			Msg(playerid, "Áthaladtál az összes checkpointon kérem állj félre szabályosan, parkolj le, és állisd le a jármûvet.");
			DisablePlayerCheckpoint(playerid);
			Kamioncp[playerid] = 0;

			DisablePlayerCheckpoint(oktato);
			Autocp[oktato] = 22;
			Kamioncp[oktato] = 0;
			Msg(oktato, "A vizsgának vége, ha a tanuló megfelelt ird be igen, ha nem felelt meg ird be nem.");
			PlayerInfo[oktato][pKamiSkill] ++;
		}
	}
	else if(Autocp[playerid] == 2) { Autocp[playerid] = 3;  VizsgaRaceAllit(playerid,355.1847,-1698.3477,6.5892, 5); }
	else if(Autocp[playerid] == 3) { Autocp[playerid] = 4;  VizsgaRaceAllit(playerid,159.4185,-1389.9797,48.4269, 5); }
	else if(Autocp[playerid] == 4) { Autocp[playerid] = 5;  VizsgaRaceAllit(playerid,262.9900,-1035.0072,56.1360, 5); }
	else if(Autocp[playerid] == 5) { Autocp[playerid] = 6;  VizsgaRaceAllit(playerid,396.2571,-1175.4740,78.4958, 5); }
	else if(Autocp[playerid] == 6) { Autocp[playerid] = 7; VizsgaRaceAllit(playerid,858.1437,-867.4191,75.7155, 5); }
	else if(Autocp[playerid] == 7) { Autocp[playerid] = 8; VizsgaRaceAllit(playerid,1451.7195,-715.4467,91.1484, 5); }
	else if(Autocp[playerid] == 8) { Autocp[playerid] = 9; VizsgaRaceAllit(playerid,1356.0708,-1017.6235,26.4719, 5); }
	else if(Autocp[playerid] == 9) { Autocp[playerid] = 10; VizsgaRaceAllit(playerid,1573.6744,-1117.6497,23.3127, 5); }
	else if(Autocp[playerid] == 10) { Autocp[playerid] = 11; VizsgaRaceAllit(playerid,1509.6980,-1159.0787,23.7984, 5); }
	else if(Autocp[playerid] == 11) { Autocp[playerid] = 12; VizsgaRaceAllit(playerid,1427.6702,-1695.2241,13.2755, 5); }
	else if(Autocp[playerid] == 12) { Autocp[playerid] = 13; VizsgaRaceAllit(playerid,1315.3336,-1682.9579,13.2756, 5); }
	else if(Autocp[playerid] == 13) { Autocp[playerid] = 14; VizsgaRaceAllit(playerid,1364.6217,-1546.6616,13.43972, 5); }
	else if(Autocp[playerid] == 14) { Autocp[playerid] = 15; VizsgaRaceAllit(playerid,1172.9937,-1397.8478,13.2120, 5); }
	else if(Autocp[playerid] == 15) { Autocp[playerid] = 16; VizsgaRaceAllit(playerid,1046.226,-1459.924,13.636, 5); }
	
	else if(Autocp[playerid] == 16)
	{
		if(oktato == NINCS || GetDistanceBetweenPlayers(playerid, oktato) > 5.0) return Msg(playerid, "Nincs jelen az oktató! Ennek okai lehet: LAGG vagy kilépett!");
		{
			Msg(playerid, "Áthaladtál az összes checkpointon kérem menj be szabályosan, parkolj le, és állisd le a jármûvet.");
			DisablePlayerCheckpoint(playerid);
			Autocp[playerid] = 0;

			DisablePlayerCheckpoint(oktato);
			Autocp[oktato] = 22;
			Msg(oktato, "A vizsgának vége, ha a tanuló megfelelt ird be igen, ha nem felelt meg ird be nem.");
			PlayerInfo[oktato][pAutmotSkill] ++;
		}

	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_HOME:
		    {
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				GameTextForPlayer(playerid, "~w~You are~n~~y~Home", 5000, 1);
		    }
		}
	}
	
	if(IsKocsi(GetPlayerVehicleID(playerid), "Banyasz") && banyaszbsz[playerid])
	{
		if(!PlayerToPoint(10, playerid, -2418.103, -2183.778, 33.328))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, -2418.103, -2183.778, 33.328, 10.0);
			return Msg(playerid, "Ez egy nagyon szép próbálkozás lett volna! :D");
		}
		if(!IsKocsi(GetPlayerVehicleID(playerid), "Banyasz"))
			return Msg(playerid, "Szép próbálkozás de ez nem az a kocsi...");

		MunkaFolyamatban[playerid] = 1;
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Elkezdték lepakolni az árút. Légy türelemmel...");
		Cselekves(playerid, "bejelentkezik a kereskedõnél és várakozik amíg felbecsülik az értékeket.");
		TogglePlayerControllable(playerid, false);
		MunkaTimerID[playerid]=SetTimerEx("Munkavege", (MunkaIdo[13]*4), false, "dd", playerid, M_BANYASZ_SZALLIT_VEGE);
	}
	
	if(IsKocsi(GetPlayerVehicleID(playerid), "Villanyszerelo") && !oszlopcsere[playerid] && Munkaban[playerid] == MUNKA_VILLANYSZERELO)
	{
		if(!PlayerToPoint(10.0, playerid, VillanyszereloCheckpointok[hova[playerid]][0], VillanyszereloCheckpointok[hova[playerid]][1], VillanyszereloCheckpointok[hova[playerid]][2]))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, VillanyszereloCheckpointok[hova[playerid]][0], VillanyszereloCheckpointok[hova[playerid]][1], VillanyszereloCheckpointok[hova[playerid]][2], 5.0);
			return Msg(playerid, "Ez egy nagyon szép próbálkozás lett volna! :D");
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 552)
			return Msg(playerid, "Ez nem megfelelõ jármû! Ezt az oszlopot csak vizsgálni kell! (( Utility Van ))");
		
		MunkaFolyamatban[playerid] = 1;
		SendClientMessage(playerid, COLOR_GREEN, "Elkezdted megvizsgálni az oszlopot. Várj...");
		Cselekves(playerid, "elkezdte megvizsgálni az oszlopot...");
		TogglePlayerControllable(playerid, false);
		MunkaTimerID[playerid]=SetTimerEx("Munkavege", MunkaIdo[14], false, "dd", playerid, M_VILLANYSZERELO_VIZSGAL);
	}
	else if(IsKocsi(GetPlayerVehicleID(playerid), "Villanyszerelo") && oszlopcsere[playerid] && Munkaban[playerid] == MUNKA_VILLANYSZERELO)
	{
		if(!PlayerToPoint(10.0, playerid, VillanyszereloCheckpointok[hova[playerid]][0], VillanyszereloCheckpointok[hova[playerid]][1], VillanyszereloCheckpointok[hova[playerid]][2]))
		{
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, VillanyszereloCheckpointok[hova[playerid]][0], VillanyszereloCheckpointok[hova[playerid]][1], VillanyszereloCheckpointok[hova[playerid]][2], 5.0);
			return Msg(playerid, "Ez egy nagyon szép próbálkozás lett volna! :D");
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 578)
			return Msg(playerid, "Ez nem megfelelõ jármû! Ezt az oszlopot cserélni kell! (( DFT-30 ))");
		
		MunkaFolyamatban[playerid] = 1;
		SendClientMessage(playerid, COLOR_GREEN, "Elkezdted kicserélni az oszlopot. Várj...");
		Cselekves(playerid, "elkezdte kicserélni az oszlopot...");
		TogglePlayerControllable(playerid, false);
		MunkaTimerID[playerid]=SetTimerEx("Munkavege", MunkaIdo[14]*3, false, "dd", playerid, M_VILLANYSZERELO_OSZLOP);
		//oszlopcsere DFT-vel
	}

	MunkaCheckpointCheck(playerid);

	return 1;
}

fpublic OnPlayerLeaveCheckpoint(playerid)
{
	Log("Events", TFormatInline("OnPlayerLeaveCheckpoint(playerid = %d)", playerid));
	return 1;
}

fpublic OnRconCommand(cmd[])
{
	return 1;
}

fpublic OnObjectMoved(objectid)
{
	return 1;
}

/*public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}*/


//oppudp

fpublic OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(AMT(playerid, MUNKA_FARMER))
	{
	    new i = -1;
		for(;++i < sizeof(Aratas_Objectek);)
		{
			if(pickupid == AratasInfo[i][aratasPickup])
			{
				new fizetes;
				if(!Aratas_Objectek[i][aratasLearatva])
				{
					
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 532)
					{
						new szeflog[128];
						
						if(IsValidDynamicObject(AratasInfo[i][aratasObject])) DestroyDynamicObject(AratasInfo[i][aratasObject]), AratasInfo[i][aratasObject]=INVALID_OBJECT_ID;
						//UpdateDynamic3DTextLabelText(AratasInfo[i][aratasText], -1, "Veteményes\nLearatva");
						fizetes = Rand(20, 45);
						PlayerInfo[playerid][pPayCheck] +=fizetes; 
						if(FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >= 50000000)
						{
							FrakcioSzef(FRAKCIO_ONKORMANYZAT,-fizetes, 100);
							format(szeflog,sizeof(szeflog), "[%d. frakció]Farmer: %s Ft",FRAKCIO_ONKORMANYZAT,FormatInt(fizetes));
							Log("Szef",szeflog);
						}
						Aratas_Objectek[i][aratasLearatva] = true;
					}
				} 
				else 
				{
					if((GetVehicleModel(GetPlayerVehicleID(playerid)) == 531) && (GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(playerid))) == 610))
					{
						AratasInfo[i][aratasObject] = CreateDynamicObject(Aratas_Objectek[i][aratasID], Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ], Aratas_Objectek[i][aratasRX], Aratas_Objectek[i][aratasRY], Aratas_Objectek[i][aratasRZ]);
						//UpdateDynamic3DTextLabelText(AratasInfo[i][aratasText], -1, "Veteményes\nNincs aratva");
						fizetes = Rand(20, 45);
						PlayerInfo[playerid][pPayCheck] += fizetes;
						new szeflog[128];
						if(FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >= 50000000)
						{
						
							FrakcioSzef(FRAKCIO_ONKORMANYZAT,-fizetes, 100);
							format(szeflog,sizeof(szeflog), "[%d. frakció]Farmer: %s Ft",FRAKCIO_ONKORMANYZAT,FormatInt(fizetes));
							Log("Szef",szeflog);
						}
						Aratas_Objectek[i][aratasLearatva] = false;
					}
				}
				DestroyDynamicPickup(AratasInfo[i][aratasPickup]);
				AratasInfo[i][aratasPickup] = CreateDynamicPickup(1007, 14, Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ] + 0.8, 0);
				break;
			}
		}
	}
    if(pickupid == InfoPickup)
	{
	    if(AMT(playerid, MUNKA_FAVAGO))
	    {
			GameTextForPlayer(playerid, "~w~Kezdeshez ird be: ~n~~r~/favagas kezd", 3000, 0);
			return true;
		}
	}
	new bool:zar = false, pstate = GetPlayerState(playerid);
	
	if(!ParancsAjto[playerid] && (pstate == PLAYER_STATE_ONFOOT || pstate == PLAYER_STATE_DRIVER)) for(new a = 0; a < MAXAJTO; a++)
	{
		
		for(new i = 0; i < sizeof(TrashInfo); i++)
		{
			if(PlayerToPoint(2.0,playerid,TrashInfo[i][tSzemetPos][0],TrashInfo[i][tSzemetPos][1],TrashInfo[i][tSzemetPos][2],0,0))
				return 1;
		
		}
		
		
		if(!Ajtok[a][Van]) continue;
		if(Ajtok[a][PickupBe] == pickupid)
		{
			if(Ajtok[a][BeVW] != PlayerVW[playerid] || Ajtok[a][BeInt] != PlayerInterior[playerid])
			{
				zar = true;
				break;
			}
			
			if(Ajtozott[playerid] > 0)
			{
				zar = true;
				break;
			}
			else
				Ajtozott[playerid] = 5;
				
			if(Ajtok[a][Zarva])
				Msg(playerid, "Az ajtó zárva van");
			else
			{
				Tele(playerid, Ajtok[a][KiX], Ajtok[a][KiY], Ajtok[a][KiZ], false, Ajtok[a][KiVW], Ajtok[a][KiInt],Ajtok[a][KiAngle], Ajtok[a][Freezel]);
				
				if(Ajtok[a][Freezel] >= 1000)
				{
					//Freeze(playerid, Ajtok[a][Freezel]);
					Ajtozott[playerid] += floatround( float(Ajtok[a][Freezel]) / 1000.0, floatround_ceil);
				}
				
				//OnHitVedelem[playerid] = 3;
			}

			zar = true;
			break;
		}
		else if(Ajtok[a][PickupKi] == pickupid)
		{
			if(Ajtok[a][KiVW] != PlayerVW[playerid] || Ajtok[a][KiInt] != PlayerInterior[playerid])
			{
				zar = true;
				break;
			}
			
			if(Ajtozott[playerid] > 0)
			{
				zar = true;
				break;
			}
			else
				Ajtozott[playerid] = 5;
				
			if(Ajtok[a][Zarva])
				Msg(playerid, "Az ajtó zárva van");
			else
			{
				Tele(playerid, Ajtok[a][BeX], Ajtok[a][BeY], Ajtok[a][BeZ], false, Ajtok[a][BeVW], Ajtok[a][BeInt],Ajtok[a][BeAngle], Ajtok[a][Freezel]);
			
				if(Ajtok[a][Freezel] >= 1000)
				{
					//Freeze(playerid, Ajtok[a][Freezel]);
					Ajtozott[playerid] += floatround( float(Ajtok[a][Freezel]) / 1000.0, floatround_ceil);
				}
				
				//OnHitVedelem[playerid] = 3;
			}
			
			zar = true;
			break;
		}
		if(Ajtok[a][PickupKocsiBe] == pickupid)
		{
			if(Ajtok[a][BeVW] != PlayerVW[playerid] || Ajtok[a][BeInt] != PlayerInterior[playerid])
			{
				zar = true;
				break;
			}
			
			Ajtok[a][PickupKocsiBeRe] = true;
			if(Ajtozott[playerid] > 0)
			{
				zar = true;
				break;
			}
			else
				Ajtozott[playerid] = 5;
				
			if(Ajtok[a][Zarva])
				Msg(playerid, "Az ajtó zárva van");
			else
			{
				Tele(playerid, Ajtok[a][KiX], Ajtok[a][KiY], Ajtok[a][KiZ], true, Ajtok[a][KiVW], Ajtok[a][KiInt],Ajtok[a][KiAngle], Ajtok[a][Freezel]);

				if(Ajtok[a][Freezel] >= 1000)
				{
					//Freeze(playerid, Ajtok[a][Freezel]);
					Ajtozott[playerid] += floatround( float(Ajtok[a][Freezel]) / 1000.0, floatround_ceil);
				}
				
				//OnHitVedelem[playerid] = 3;
			}

			zar = true;
			break;
		}
		else if(Ajtok[a][PickupKocsiKi] == pickupid)
		{
			if(Ajtok[a][KiVW] != PlayerVW[playerid] || Ajtok[a][KiInt] != PlayerInterior[playerid])
			{
				zar = true;
				break;
			}
			
			Ajtok[a][PickupKocsiKiRe] = true;
			if(Ajtozott[playerid] > 0)
			{
				zar = true;
				break;
			}
			else
				Ajtozott[playerid] = 5;
				
			if(Ajtok[a][Zarva])
				Msg(playerid, "Az ajtó zárva van");
			else
			{
				Tele(playerid, Ajtok[a][BeX], Ajtok[a][BeY], Ajtok[a][BeZ], true, Ajtok[a][BeVW], Ajtok[a][BeInt],Ajtok[a][BeAngle], Ajtok[a][Freezel]);
			
				if(Ajtok[a][Freezel] >= 1000)
				{
					//Freeze(playerid, Ajtok[a][Freezel]);
					Ajtozott[playerid] += floatround( float(Ajtok[a][Freezel]) / 1000.0, floatround_ceil);
				}
				
				//OnHitVedelem[playerid] = 3;
			}
			
			zar = true;
			break;
		}
	}
	if(zar) return 1;

	

	if( pickupid == AjtoSF[0])
	{
		if(AjtoSFTimer[playerid] < UnixTime)
		{
			if(!AMT(playerid, MUNKA_PENZ)) return 1;
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid,2319.3892,-1.7706,26.7496);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid,1555);
			new result[128];
			format(result, 128, "Pénztáros: Üdvözlöm kolléga.");
			ProxDetector(B_Tavol, BankSFNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
			SetPlayerChatBubble(BankSFNPC, result, COLOR_WHITE, B_Normal, 5000);
			SetPlayerFacingAngle(BankSFNPC, 2.53);
			Msg(playerid, "Kérd el a pénzkazettákat a pénztárostól. ((/pénzszállító felvesz))",false,COLOR_YELLOW);
			AjtoSFTimer[playerid] = UnixTime+7;
			
		}
	
	
	}
	if( pickupid == AjtoSF[1])
	{
		if(AjtoSFTimer[playerid] < UnixTime)
		{
			if(!AMT(playerid, MUNKA_PENZ)) return 1;
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid,2169.9451,1589.8287,999.9761);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid,1555);
			Msg(playerid, "Rakd be a pénzkazetákat a pénzszállítóba! Ha még fér a kocsiba hozz még! ((/pénzszállító berak))");
			AjtoSFTimer[playerid] = UnixTime+7;
		
		}

	}
	if(zar) return 1;
	
	new x;
	foreach(Fekvorendor, f)
	{
		for( x = 0; x < MAX_FEKVORENDOR_PICK; x++ )
		{
			if( pickupid == Fekvorendorok[f][x] && !IsABicikli(GetPlayerVehicleID(playerid)) )
			{
				ToresFekvorendor(playerid);
				zar = true;
				break;
			}
		}
	}
	if(zar) return 1;
	
	
    foreach(Jatekosok, utzar)
	{
		if(!Utzarak[utzar][uVan]) continue;
		
    	if(pickupid == Utzarak[utzar][uPickup][0])
		{
		    new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
			
    	    if(Utzarak[utzar][uTipus] == UTZAR_KICSI)
    	        Utzarak[utzar][uPickup][0] = CreateDynamicPickup(1007, 14, X+(1.5*dis1), Y+(1.5*dis2), Z, 0);
    	    else
				Utzarak[utzar][uPickup][0] = CreateDynamicPickup(1007, 14, X+(4.0*dis1), Y+(4.0*dis2), Z, 0);
				
    	    break;
    	}
    	else if(pickupid == Utzarak[utzar][uPickup][1])
		{
	    	new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
			
    	    if(Utzarak[utzar][uTipus] == UTZAR_KICSI)
    	        Utzarak[utzar][uPickup][1] = CreateDynamicPickup(1007, 14, X-(1.5*dis1), Y-(1.5*dis2), Z, 0);
    	    else
				Utzarak[utzar][uPickup][1] = CreateDynamicPickup(1007, 14, X+(1.25*dis1), Y+(1.25*dis2), Z, 0);

    	    break;
    	}
    	else if(pickupid == Utzarak[utzar][uPickup][2])
		{
	    	new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
			
			Utzarak[utzar][uPickup][2] = CreateDynamicPickup(1007, 14, X-(4.0*dis1), Y-(4.0*dis2), Z, 0);
    	    break;
    	}
    	else if(pickupid == Utzarak[utzar][uPickup][3])
		{
	    	new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
			
			Utzarak[utzar][uPickup][3] = CreateDynamicPickup(1007, 14, X-(1.25*dis1), Y-(1.25*dis2), Z, 0);
    	    break;
    	}
    }
	return 1;
}

fpublic OnPlayerStateChange(playerid, newstate, oldstate) // opsc
{
	PlayerState[playerid] = newstate;
	
	// TÉRFIGYELÕ
	if(!IsPlayerNPC(playerid))
	{
		// engedély nélküli vezetés
		if(PlayerMarker[playerid][mType] == 0 && newstate == PLAYER_STATE_DRIVER && !IsPlayerHaveLicenseForVehicle(playerid, GetPlayerVehicleID(playerid)))
			MarkerAction(playerid, PLAYER_MARKER_SET, PLAYER_MARKER_ENGEDELY);
			
		// engedély nélküli vezetés - törlés
		else if(PlayerMarker[playerid][mType] == PLAYER_MARKER_ENGEDELY && newstate != PLAYER_STATE_DRIVER)
			MarkerAction(playerid, PLAYER_MARKER_CLEAR);
	}
	
	switch(newstate)
	{
		case PLAYER_STATE_DRIVER, PLAYER_STATE_PASSENGER:
			PlayerVehicle[playerid] = GetPlayerVehicleID(playerid);
		default:
			PlayerVehicle[playerid] = NINCS;
	}
	
	if(!IsPlayerNPC(playerid))
	{
		if(newstate == PLAYER_STATE_DRIVER)
		{
			if(seo_carEntering[playerid] <= 5)
			{
				format(_tmpString, 256, "<< AntiCheat: Jármûbe beteleportálás: [%d]%s - %dmp >>", playerid, Nev(playerid), seo_carEntering[playerid]);
				Log("Cheat", _tmpString);
			}
			
			seo_carEnterTime[playerid] = GetTickCount();
		}
		else if(oldstate == PLAYER_STATE_DRIVER && (GetTickCount() - seo_carEnterTime[playerid]) < 220 && !IsABoat(GetPlayerVehicleID(playerid)))
		{
			seo_carFloodTime[playerid] += 2;
			seo_carFlood[playerid]++;
			if(seo_carFlood[playerid] < 3)
			{
				format(_tmpString, 128, "<< AntiCheat bejelentés - [%d]%s - cheat: CarFlood - %dx >>", playerid, Nev(playerid), seo_carFlood[playerid]);
				Log("Cheat", _tmpString);
				
				if(seo_carFlood[playerid] >= 2)
					ABroadCast(COLOR_LIGHTRED, _tmpString, 1);
			}
			else
			{
				format(_tmpString, 128, "<< AntiCheat bejelentés - [%d]%s - cheat: CarFlood - %dx - BANNED >>", playerid, Nev(playerid), seo_carFlood[playerid]);
				ABroadCast(COLOR_LIGHTRED, _tmpString, 1);
				Log("Cheat", _tmpString);
				
				SeeBan(playerid, .oka = "Cheat (CF)", .szoveg = true, .kick = true);
				return 1;
			}
		}
	}
	
	if(IsPlayerNPC(playerid))
	{
		//printf("OnNPCStateChange(npc: %d, newstate: %d, oldstate: %d)", playerid, newstate, oldstate);
		return 1;
	}
	
	if(oldstate == PLAYER_STATE_DRIVER)
	{
		if(Sisak[playerid] == 1)
		{
			RemovePlayerAttachedObject(playerid, ATTACH_SLOT_SISAK);
			Sisak[playerid] = 0;
			Cselekves(playerid, "levette a bukósisakot...");
		}

		if(Sokkol[playerid])
		{
			Sokkol[playerid] = false;
			if(IsValidDynamicObject(SokkObject[GetPlayerVehicleID(playerid)])) DestroyDynamicObject(SokkObject[GetPlayerVehicleID(playerid)]);
			SokkObject[GetPlayerVehicleID(playerid)] = INVALID_OBJECT_ID;
		}
	}
	
	if(TrafiPax[playerid][tAktiv])
	{
		TrafiPax[playerid][tAktiv] = false;
		Msg(playerid, "Mivel elmentél a helyedrõl, a traffipax törölve");
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(KocsiRadio[GetClosestVehicle(playerid)] >= 1)
		{
		 	StopAudioStreamForPlayer(playerid);
			//GameTextForPlayer(playerid, "~r~R?DI KIKAPCSOLVA", 950, 5);
   			//Msg(playerid, "PLAYER_STATE_ONFOOT Meghívódott");
			TextDrawUpdate(playerid, TD_Info);
			if(RiporterZeneVan)
			{
			    //Msg(playerid, "PLAYER_STATE_ONFOOT - RiporterZeneVan Meghívódott");
				PlayAudioStreamForPlayer(playerid, RiporterZene);
			}
		}
		SebessegKorlat[playerid] = 0;
		
		if(Tevezve[playerid] != NINCS)
			PlayerSpectatePlayer(Tevezve[playerid], playerid);
			
	    if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
		{
		    PlayerInKart[playerid] = 0;
		    KartingPlayers --;
		}
	    if(TransportDuty[playerid] > 0)
		{
			
			if(TransportDuty[playerid] == 2)
			{
			    BusDrivers -= 1;
			}
			SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Elhagytad a jármûvet! Összesen kerestél %d forintot!", TransportMoney[playerid]);
			//GiveMoney(playerid, TransportMoney[playerid]);
			
			ConsumingMoney[playerid] = 1; 
			TransportValue[playerid] = 0;
			TransportMoney[playerid] = 0;
		}
		//taxi 
		if(Taxi[playerid][tDuty])
		{
			new vehicleid = Taxi[playerid][tJarmu];
			
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Elhagytad a jármûvet! NEM léptél ki a szolgálatból!");
			if(IsValidDynamic3DTextLabel(TAXITEXT[vehicleid])) DestroyDynamic3DTextLabel(TAXITEXT[vehicleid]), TAXITEXT[vehicleid]=INVALID_3D_TEXT_ID;
			Taxi[playerid][tJarmu]=NINCS;
			
			if(Taxi[playerid][tFizetes] > 0)
			{
				new fizet;
				new szeflog[128];
				fizet = floatround(Taxi[playerid][tFizetes]/2.0);
				FrakcioSzef(FRAKCIO_ONKORMANYZAT,-fizet);
				format(szeflog,sizeof(szeflog), "[%d. frakció][TAXI]Szolgálati fizetség: %s Ft",FRAKCIO_ONKORMANYZAT,FormatInt(fizet));
				Log("Szef",szeflog);
				
				FrakcioSzef(FRAKCIO_TAXI,fizet);
				PlayerInfo[playerid][pPayCheck] += fizet;
				SendFormatMessage(playerid,COLOR_YELLOW,"[TAXI]Szolgálati fizetség: %s Ft",FormatInt(fizet));
				Taxi[playerid][tFizetes] = 0;
				
			}
		}
		if(TransportDriver[playerid] != NINCS)
		{
		
			new soforid = TransportDriver[playerid];
			new vehicleid = Taxi[soforid][tJarmu];
			if(vehicleid != NINCS)
			{
				new Float:megtetut =  (KmSzamol[vehicleid]-Taxi[soforid][tKm])/1000;
				new szeflog[128];
				new fizet = floatround( float(FrakcioInfo[FRAKCIO_TAXI][fDij]) * megtetut);
				new tamogatas = floatround( float(fizet) * 1.5) - fizet;
	
				FrakcioSzef(FRAKCIO_ONKORMANYZAT,-tamogatas);
				format(szeflog,sizeof(szeflog), "[%d. frakció][TAXI]Szállítási támogatás: %s Ft",FRAKCIO_ONKORMANYZAT,FormatInt(tamogatas));
				Log("Szef",szeflog);
				
				fizet = floatround(fizet/2.0);
				
				Taxi[soforid][tHivasok]++;
				Taxi[soforid][tHivasokValt]++;
				Taxi[soforid][tOKm] += KmSzamol[vehicleid]-Taxi[soforid][tKm];
				Taxi[soforid][tOKmValt] += KmSzamol[vehicleid]-Taxi[soforid][tKm];
				
				SendFormatMessage(playerid,COLOR_YELLOW,"Megtett út: %.3f KM, Díj: %d, Fizetendõ: %s Ft",megtetut,FrakcioInfo[FRAKCIO_TAXI][fDij],FormatInt(fizet*2));
				SendFormatMessage(soforid,COLOR_YELLOW,"Megtett út: %.3f KM, Díj: %d, [Fizetet: %s Ft | Ebbõl Taxi széf: %s Ft]",megtetut,FrakcioInfo[FRAKCIO_TAXI][fDij],FormatInt(fizet*2), FormatInt(fizet));
				
				PlayerInfo[soforid][pPayCheck] += fizet;
				FrakcioSzef(FRAKCIO_TAXI,fizet+tamogatas);
				
				new string[128];
				format(string, sizeof(string), "~w~Fizettel~n~~r~%dFT-t",fizet*2);
				GameTextForPlayer(playerid, string, 5000, 4);
				format(string, sizeof(string), "~w~Utas fizetett~n~~g~%dFT-t",fizet*2);
				GameTextForPlayer(TransportDriver[playerid], string, 5000, 4);
				BankkartyaFizet(playerid, fizet*2);
				TransportDriver[playerid] = NINCS;
				Taxi[soforid][tUtas] = NINCS;
				Taxi[soforid][tKm] = 0.0;
				
				new taxiszoveg[64];
				format(taxiszoveg, 64, "Taxisofõr SZABAD\nViteldíj: %d Ft / KM",FrakcioInfo[FRAKCIO_TAXI][fDij]);
				if(IsValidDynamic3DTextLabel(TAXITEXT[vehicleid])) DestroyDynamic3DTextLabel(TAXITEXT[vehicleid]), TAXITEXT[vehicleid]=INVALID_3D_TEXT_ID;
				TAXITEXT[vehicleid] = CreateDynamic3DTextLabel(taxiszoveg, COLOR_GREEN_TAXI, 0.0, 0.0, 2.0, 20.0, INVALID_PLAYER_ID, vehicleid, 1);
				
				foreach(Jatekosok, p)
				{
					SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
					SetPlayerMarkerForPlayer(playerid, p, COLOR_INVISIBLE);
					//if(KiertMegy[p] == playerid) KiertMegy[p] = NINCS;
					if(TaxiHivasJelzes[p] == playerid) TaxiHivasJelzes[p] = NINCS;
	
				}
			}
		}

		if(TransportDriver[playerid] != NINCS && SemiValidPlayer(TransportDriver[playerid]))
		{
			TransportTime[playerid] = 0;
			TransportDriver[playerid] = NINCS;
		}
				
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
	}
	if(newstate == PLAYER_STATE_PASSENGER) // TAXI & BUSSES
	{
		
	    new name[MAX_PLAYER_NAME], iSeat = GetPlayerVehicleSeat(playerid), Float:x, Float:y, Float:z;
		if(iSeat == 128) { GetPlayerPos(playerid, x, y, z); Tele(playerid, x, y, (z+1), false); return 1; }
	    GetPlayerName(playerid, name, sizeof(name));
	    new vehicleid = GetPlayerVehicleID(playerid);
		
		new sofor = KocsiSofor(vehicleid);
		
		if(!IsABicikli(vehicleid))
			RadioBetoltes(playerid, sofor);
			
		if(Tevezve[playerid] != NINCS)
			PlayerSpectateVehicle(Tevezve[playerid], vehicleid);
		
		if(sofor != NINCS && IsPlayerNPC(sofor) && GetVehicleModel(vehicleid) == 437)
		{
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 2022.0273, 2235.2402, 2103.9536);
			SetPlayerFacingAngle(playerid, 0);
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 50000+sofor, "keystatechange1");
			Freeze(playerid, 3000);
			Cselekves(playerid, "felszállt a buszra");
			if(PlayerInfo[playerid][pJegy] == 0)
				Msg(playerid, "Vigyázz, nincs jegyed, az ellenõr elkaphat!");
		}
		if(GetVehicleModel(vehicleid) == 548)
		{
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 315.886, 984.129, 1959.112);
			SetPlayerFacingAngle(playerid, 2.620);
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid, 9);
			SetPlayerVirtualWorld(playerid, 40000+vehicleid);
			Freeze(playerid, 3000);
			Cselekves(playerid, "bemászott a Cargobobba");
		}
		if(GetVehicleModel(vehicleid) == 416 && iSeat > 1)
		{
			new mid = 69+vehicleid;
			if(CAR_Mento[mid][mCarNum] > 3) { GetPlayerPos(playerid, x, y, z); Tele(playerid, x, y, (z+1), false); return Msg(playerid, "Túl sokat ülnek a mentõautóban."); }
			//PlayerInfo[playerid][pTeleportAlatt] = 1;
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerPos(playerid, 2003.441, 2284.221, 1011.125);
			SetPlayerFacingAngle(playerid, 4.488);
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, mid);
			Freeze(playerid, 3000);
			Cselekves(playerid, "beült a mentõautóba");
			CAR_Mento[mid][mCarNum]++;
			PlayerInfo[playerid][pMentobenvan] = mid;
		}
		if(Sisak[playerid] == 1)
		{
			RemovePlayerAttachedObject(playerid, ATTACH_SLOT_SISAK);
			Sisak[playerid] = 0;
			Cselekves(playerid, "levette a bukósisakot...");
		}
		//taxi
	    foreach(Jatekosok, i)
	    {
			if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && (TransportDuty[i] > 0 || Taxi[i][tDuty]))
			{
			
				if(Taxi[i][tDuty] && Taxi[i][tUtas] == NINCS)
				{
					if(!BankkartyaFizet(playerid, FrakcioInfo[FRAKCIO_TAXI][fDij]*10,false))
					{
						//format(string, sizeof(string), "* Beszálláshoz %dFt kell minimum.", TransportValue[i]);
						SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Beszálláshoz %dFt kell minimum.", FrakcioInfo[FRAKCIO_TAXI][fDij]*10);
						RemovePlayerFromVehicle(playerid);
					}
					else
					{
						if(Taxi[i][tDuty])
						{
							SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Beszáltál a taxiba, %dFt / km", FrakcioInfo[FRAKCIO_TAXI][fDij]);
							SendFormatMessage(i, COLOR_LIGHTBLUE, "* %s beszállt a taxiba.", name);
							Taxi[i][tHivas] = false;
							
							new taxiszoveg[64];
							format(taxiszoveg, 64, "Taxisofõr FOGLALT\nViteldíj: %d Ft / KM",FrakcioInfo[FRAKCIO_TAXI][fDij]);
							
							if(IsValidDynamic3DTextLabel(TAXITEXT[vehicleid])) DestroyDynamic3DTextLabel(TAXITEXT[vehicleid]), TAXITEXT[vehicleid]=INVALID_3D_TEXT_ID;
							TAXITEXT[vehicleid] = CreateDynamic3DTextLabel(taxiszoveg, COLOR_RED_TAXI, 0.0, 0.0, 2.0, 20.0, INVALID_PLAYER_ID, vehicleid, 1);
							
							Taxi[i][tKm] = KmSzamol[vehicleid];
							Taxi[i][tJarmu] = vehicleid;
							Taxi[i][tUtas] = playerid;
							TransportDriver[playerid] = i;
							
							TaxiHivasJelzes[i] = NINCS; 
							TaxiHivas[playerid] = 0;
						}
					}
				}
				else if(TransportDuty[i] == 2)
				{
					
					if(!BankkartyaFizet(playerid,TransportMoney[i],false))
					{
						//format(string, sizeof(string), "* Beszálláshoz %dFt kell minimum.", TransportValue[i]);
						SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Beszálláshoz %dFt kell minimum.", TransportMoney[i]*10);
						RemovePlayerFromVehicle(playerid);
					}
					else
					{
					
						SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Beszáltál a buszba. %dFt.", TransportValue[i]);
						
						SendFormatMessage(i, COLOR_LIGHTBLUE, "* %s beszállt a buszba.", name);
						
						BankkartyaFizet(playerid, TransportCost[i]);
						TransportMoney[i] += TransportValue[i];
						GiveMoney(playerid, - TransportValue[i]);
					}
				}
				
					
			
			}
	    }
	}
	
	if(newstate == PLAYER_STATE_WASTED)
		KorhazIdo[playerid] = 90;
	
	if(newstate == PLAYER_STATE_DRIVER) //buggy dont finnish
	{// 38 / 49 / 56 = SS

		
		new newcar = GetPlayerVehicleID(playerid);
		
		new model = (newcar > 0 ? GetVehicleModel(newcar) : 400);
		KocsiUtolsoHasznalat[newcar] = UnixTime;
	
		if(!IsABicikli(newcar))
			RadioBetoltes(playerid);
			
		if(IsABicikli(newcar))
			SebessegKorlat[playerid] = 28;

		// Monstert csak admin vezetheti
		
		if( (model == 444 || model == 556 || model == 557) && PlayerInfo[playerid][pAdmin] < 1 )
		{
			RemoveFromCar( playerid );
			return 1;
		}
		if(model == 532)
		{
			SebessegKorlat[playerid] = 40;
		}
		
		if(!IsPlayerNPC(playerid) && NPCKocsi[newcar])
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);
			Msg(playerid, "Ebbe ne szállj be!");
			return 1;
		}
		
		KocsibanVan[playerid] = true;
		WeaponArm(playerid);

		if(Tevezve[playerid] != NINCS)
			PlayerSpectateVehicle(Tevezve[playerid], newcar);

		if(JatekosBeszallas(playerid, newcar) == 0) return 1;
		{	
			GetPlayerPos(playerid, Kmx[playerid], Kmy[playerid], Kmz[playerid]);
			Startup(playerid, newcar);
			UtoljaraHasznalta[newcar] = PlayerName(playerid);
			PlayerInfo[playerid][pJarmubenUlt] = 3;
			
		}
		
		if(IsMunkaKocsi(newcar) != NINCS)
		{
			if(PInfo(playerid,MunkaBenzin) > 0 && PInfo(playerid,MunkaRendszam) != newcar)
			{
				SendFormatMessage(playerid, COLOR_YELLOW, "Átültél egy másik jármûbe, az elõzõt meg nem töltötted fel benzinnel %d L. Ezért %s Ft-ot fizetsz",PInfo(playerid,MunkaBenzin),FormatInt(PInfo(playerid,MunkaAra)));
				PlayerInfo[playerid][pPayCheck] -= PInfo(playerid,MunkaAra);
				PInfo(playerid,MunkaBenzin) =0;
				PInfo(playerid,MunkaAra) =0;
				PInfo(playerid,MunkaRendszam) = NINCS;
				
			}
			
		}
		else if(PInfo(playerid,MunkaBenzin) > 0 && IsMunkaKocsi(newcar) == NINCS)
		{
			
			SendFormatMessage(playerid, COLOR_YELLOW, "Átültél egy másik jármûbe, az elõzõt meg nem töltötted fel benzinnel %d L. Ezért %s Ft-ot fizetsz",PInfo(playerid,MunkaBenzin),FormatInt(PInfo(playerid,MunkaAra)));
			PlayerInfo[playerid][pPayCheck] -= PInfo(playerid,MunkaAra);
			PInfo(playerid,MunkaBenzin) =0;
			PInfo(playerid,MunkaAra) =0;
			PInfo(playerid,MunkaRendszam) = NINCS;

		}
			
		new kocsi = IsAVsKocsi(newcar);

		if(kocsi != -1)
		{
		    if(CarInfo[kocsi][cOwned] == 0)
		    {
				if(PlayerInfo[playerid][pAutoker]<1 && AutokerKulcs[playerid] !=1)
				{
					
					GameTextForPlayer(playerid, "~n~~n~~n~~b~~h~Autokereskedoi kocsi~n~~r~~h~Nem viheted el!", 10000, 3);
					engineOn[newcar] = 0;
					SetJarmu(newcar, KOCSI_MOTOR, 0);
					SendFormatMessage(playerid, COLOR_YELLOW,"A kocsi ára: %s Ft, ((/v vásárol))",FormatInt(CarInfo[kocsi][cValue]));
				}
				else
					SendFormatMessage(playerid, COLOR_YELLOW,"A kocsi ára: %s Ft, ((/k vásárol))",FormatInt(CarInfo[kocsi][cValue]));
				

		    }
		}

		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		
	    if(PlayerDrunk[playerid] >= 2)
			SetPlayerCriminal(playerid,255, "Ittas vezetés");

		if(IsKocsi(newcar, "Prod")) 
		{
			SendFormatMessage(playerid, TEAM_GROVE_COLOR, "Prodok: %d/%d", MAXPROD, PlayerHaul[newcar][pLoad]);
			SendClientMessage(playerid, COLOR_WHITE, "INFO: A prodokat el tudod adni a bizniszeknél");
			SendClientMessage(playerid, COLOR_WHITE, "INFO: Parancsok /load /buyprods /sellprods");
		}
		new munkakocsi = IsMunkaKocsi(newcar);
		//new munkakocsiID = NINCS;
		//if(munkakocsi != NINCS)
		//	munkakocsiID = MunkaKocsiID(newcar, munkakocsi);
			
		if(munkakocsi == MUNKA_BEREL1)
		{
			//printf("BEREL: %d %d %d", playerid, HireCar[playerid], newcar);
			if (HireCar[playerid] != newcar) //MunkaKocsi[munkakocsi][munkakocsiID][kBerel] != SQLID(playerid)
			{
				//print("NO");
			    new string3[128];
				format(string3, sizeof(string3), "~w~Ez a kocsi brelhet§~n~?ra:~g~%dFT~n~~w~Brls:~g~/rentcar",BizzInfo[BIZ_BERLES1][bEntranceCost]);
				GameTextForPlayer(playerid, string3, 5000, 3);
				
				Gyujtas[newcar] = false;
				engineOn[newcar] = 0;
				SetJarmu(newcar, KOCSI_MOTOR, 0);
			}
		}

		if(munkakocsi == MUNKA_BEREL2)
		{
			//printf("BEREL: %d %d %d", playerid, HireCar[playerid], newcar);
			if (HireCar[playerid] != newcar)
			{
				//print("NO");
			    new string4[128];
				format(string4, sizeof(string4), "~w~Ez a kocsi brelhet§~n~?ra:~g~%dFT~n~~w~Brls:~g~/rentcar",BizzInfo[BIZ_BERLES2][bEntranceCost]);
				GameTextForPlayer(playerid, string4, 5000, 3);
				
				Gyujtas[newcar] = false;
				engineOn[newcar] = 0;
				SetJarmu(newcar, KOCSI_MOTOR, 0);
			}
		}
		
		if(munkakocsi == MUNKA_BEREL3)
		{
			//printf("BEREL: %d %d %d", playerid, HireCar[playerid], newcar);
			if (HireCar[playerid] != newcar)
			{
				//print("NO");
			    new string5[128];
				format(string5, sizeof(string5), "~w~Ez a kocsi brelhet§~n~?ra:~g~%dFT~n~~w~Brls:~g~/rentcar",BizzInfo[BIZ_HAJO][bEntranceCost]);
				GameTextForPlayer(playerid, string5, 5000, 3);
				
				Gyujtas[newcar] = false;
				engineOn[newcar] = 0;
				SetJarmu(newcar, KOCSI_MOTOR, 0);
			}
		}

		gLastCar[playerid] = newcar;
	}
	//new vehicle = GetPlayerVehicleID(playerid);
	//SetTimerEx("Startup", 1, false, "ii", playerid, vehicle);
	//if(GetPlayerState(playerid) == 2)
	//	Startup(playerid, vehicle);
	return 1;
}

fpublic HireCost(carid)
{
	switch (carid)
	{
		case 69:
		{
			return 90000; //bullit
		}
		case 70:
		{
			return 130000; //infurnus
		}
		case 71:
		{
			return 100000; //turismo
		}
		case 72:
		{
			return 80000;
		}
		case 73:
		{
			return 70000;
		}
		case 74:
		{
			return 60000;
		}
	}
	return 0;
}

fpublic CarCheck()
{
	foreach(Jatekosok, j)
	{
		if(PlayerInfo[j][pJailed] == 3)
		{
			AJCPValtozo[j] = 1;
			new randomajcp;
			randomajcp = random(sizeof(AJCP));
			SetPlayerCheckpoint(j, AJCP[randomajcp][0], AJCP[randomajcp][1], AJCP[randomajcp][2], 3.0);
			SendClientMessage(j, COLOR_LIGHTBLUE, "Menj bele a következõ CP-be!(A CP-t a minimappon találod)");
			if(OnDuty[j]==1)
				OnDuty[j]=0;
		}

		new Float:health;
		GetPlayerHealth(j, health);
		if(STDPlayer[j]==1)
		{
		    GetPlayerHealth(j, health);
			if(STDPlayer[j]==1)
			{
			    GetPlayerHealth(j, health);
			    SetHealth(j, health - 5.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Lost 4 health due to STD.");
			}
			else if(STDPlayer[j]==2)
			{
			    GetPlayerHealth(j, health);
			    SetHealth(j, health - 12.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Lost 8 health due to STD.");
			}
			else if(STDPlayer[j]==3)
			{
			    GetPlayerHealth(j, health);
			    SetHealth(j, health - 20.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Lost 12 health due to STD.");
			}
			else
			{
			    MoneyMessage[j] = 0;
			}
		}
		else
		{
		    MoneyMessage[j] = 0;
		}
	}
	return 1;
}

fpublic LockCar(carid)
{
	new vs = IsAVsKocsi(carid);
	if(vs != NINCS)
		CarInfo[vs][cLock] = 1;

	gCarLock[carid] = 1;
	foreach(Jatekosok, p)
		SetVehicleParamsForPlayer(carid, p, 0, 1);
	return 1;
}

fpublic UnLockCar(carid)
{
	new vs = IsAVsKocsi(carid);
	if(vs != NINCS)
		CarInfo[vs][cLock] = 0;

	gCarLock[carid] = 0;
	foreach(Jatekosok, p)
		SetVehicleParamsForPlayer(carid, p, 0, 0);
	return 1;
}

fpublic OnPlayerExitVehicle(playerid, vehicleid)
{
	if(PlayerRaceTuning[playerid][tNitro] > 0 && PlayerRaceTuning[playerid][tNitroIdo] == 0 && KocsibanVan[playerid])
		PlayerRaceTuning[playerid][tNitroIdo] = 0;

	if(NPCKocsi[vehicleid] && PlayerInfo[playerid][pJegy] == 1)
	{
		PlayerInfo[playerid][pJegy] = 0;
		Msg(playerid, "A jegyed már nem érvényes");
	}

	if(szallit[playerid] != NINCS)
	{
		Msg(playerid, "Szállítanak! Nem szállhatsz ki! (( Azért nem kaptál Freeze, hogy tudd mozgatni a kamerát! ))");
		PutPlayerInVehicle(playerid, vehicleid, 3);
	}

	if(IsKocsi(GetPlayerVehicleID(playerid), "Banyasz") && banyaszbsz[playerid])
	{
		DestroyDynamicObject(obj[0]);
		DestroyDynamicObject(obj[1]);
		DestroyDynamicObject(obj[2]);
		DestroyDynamicObject(obj[3]);
		
		return 1;
	}
	
	if(IsKocsi(GetPlayerVehicleID(playerid), "Villanyszerelo") && vmunk[playerid])
	{
		Msg(playerid, "Kiszálltál a kocsiból, hogy folytatni tudd a munkát szállj vissza!", false, COLOR_GREEN);
		Msg(playerid, "Ha már nem akarod folytatni a munkát vetkõzz le! (( /villanyszerelõ átöltöz ))", false, COLOR_GREEN);
		return 1;
	}
	
	if(AirtaxiJob[playerid] > 0)
    {
        AirtaxiJob[playerid] = 0;
        SendClientMessage(playerid, COLOR_RED, "ClassRPG: Kiszálltál a jármûbõl, így vége a megbízásnak!");
        DisablePlayerCheckpoint(playerid);
        RemovePlayerMapIcon(playerid, 5);
        return 1;
    }
	if(Gokartozik[playerid] == 1)
	{
		SendClientMessage(playerid, COLOR_ORANGE, "A jármûvet elhagytad, ezért befejzeted a gokártozást!");
		SetTimerEx("SetVehicleToRespawn", 40000, false, "d", vehicleid);
		Gokartozik[playerid] = 0;
		Gyujtas[vehicleid] = false;
		engineOn[vehicleid] = 0;
		SetJarmu(vehicleid, KOCSI_MOTOR, false);
		SendClientMessage(playerid, COLOR_GREEN, "A motor automatikusan leállítva!");
		ProxDetector(30.0, playerid, "* Valaki leállította a jármû motorját!", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
				
	//if(IsValidDynamic3DTextLabel(TAXITEXT[vehicleid])) DestroyDynamic3DTextLabel(TAXITEXT[vehicleid]), TAXITEXT[vehicleid]=INVALID_3D_TEXT_ID;
	KocsibanVan[playerid] = false;
	
	if(Lefoglalt[playerid]) Lefoglalt[playerid] = false;
	if(ov[playerid] == 1 && PotkocsiSzamlalo[playerid] <= 0 )
	{
		new ules = GetPlayerVehicleSeat(playerid);

		if(ules == 0)
		{
			SetTimerEx("Munkavege", 2000, 0, "ddd", playerid, M_KISZAL, vehicleid);
		}
		else if(OvFlood[playerid] == 0)
		{
			Msg(playerid, "A biztonsági öved bevan csatolva.");
			OvFlood[playerid] = 5;
		}
		PutPlayerInVehicle(playerid, vehicleid, ules);
	}
	if(PotkocsiSzamlalo[playerid] > 0 && Szallit[playerid])
	{
		new ules = GetPlayerVehicleSeat(playerid);

		if(ules == 0)
		{
			SetTimerEx("Munkavege", 2000, 0, "ddd", playerid, M_KISZAL, vehicleid);
		}
		else if(OvFlood[playerid] == 0)
		{
			Msg(playerid, "A pótkocsi le van szakadva, elõbb vedd fel!!");
			OvFlood[playerid] = 5;
		}
		PutPlayerInVehicle(playerid, vehicleid, ules);
	}
	else if(PotkocsiSzamlalo[playerid] > 0 && !Szallit[playerid])
		PotkocsiSzamlalo[playerid] =0;

	if(engineOn[vehicleid] == 1 && GetPlayerState(playerid) == 2 && !IsABicikli(vehicleid))
		Msg(playerid, "Figyelmeztetés: A motor nincs leállítva", false, COLOR_LIGHTBLUE);
		
	if(Sokkol[playerid])
	{
		Sokkol[playerid] = false;
		if(IsValidDynamicObject(SokkObject[vehicleid])) DestroyDynamicObject(SokkObject[vehicleid]);
		SokkObject[vehicleid] = INVALID_OBJECT_ID;
	}

	if(KocsiRadio[vehicleid] > 0 && Zsebradio[playerid] == 0)
	{
		StopAudioStreamForPlayer(playerid);
		GameTextForPlayer(playerid, "~r~R?DI KIKAPCSOLVA", 950, 5);
		TextDrawUpdate(playerid, TD_Info);
		//Msg(playerid, "Lefutott");
	}

	KocsiUtolsoHasznalat[vehicleid] = UnixTime;

	if((GetVehicleModel(vehicleid) == 578) && (VehicleAdatok[vehicleid][_TREE_NUM_] > 0))
	{
		new Float:playerposok[3];
		GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);
		SetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);
	}
	if(IsMunkaKocsi(vehicleid) != NINCS && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(PInfo(playerid,MunkaBenzin) < 1 || PInfo(playerid,MunkaRendszam) < 1 || PInfo(playerid,MunkaAra) < 1)
		{
			PInfo(playerid,MunkaBenzin) = 0;
			PInfo(playerid,MunkaRendszam) = 0;
			PInfo(playerid,MunkaAra) = 0;
		}
		engineOn[vehicleid] = 0;
		Gyujtas[vehicleid] = false;
		SetJarmu(vehicleid, KOCSI_MOTOR, 0); 
		new Float:kocsiPos[3];
		GetVehiclePos(vehicleid, kocsiPos[0], kocsiPos[1], kocsiPos[2]);
		new penz, benzin;
		new maxbenzin = MaxBenzin(vehicleid);
	

		benzin = maxbenzin - Gas[vehicleid];
		penz = benzin*MUNKA_BENZIN;
		
		if(benzin > 10 && AMT(playerid, IsMunkaKocsi(vehicleid)))
		{
			SendFormatMessage(playerid,COLOR_LIGHTRED,"A munkajármûbõl %d liter üzemanyag hiányzik, tankold fel a gépet és úgy rakd le a telepen, vagy neked kell kifizetni %s Ft-ot",benzin,FormatInt(penz));
			
			PInfo(playerid,MunkaBenzin) =benzin;
			PInfo(playerid,MunkaAra) = penz;
			PInfo(playerid,MunkaRendszam) = vehicleid;
		}
	}
	if(Taxi[playerid][tDuty] && (GetVehicleModel(vehicleid)  == 420 || GetVehicleModel(vehicleid)  == 438))
	{
		
		if(IsValidDynamic3DTextLabel(TAXITEXT[vehicleid])) DestroyDynamic3DTextLabel(TAXITEXT[vehicleid]), TAXITEXT[vehicleid]=INVALID_3D_TEXT_ID;
		
	}
	return 1;
}

fpublic OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid)) return 1;

	if(Logged(playerid) || !Logged(playerid) && ElsoSpawn[playerid] == 1)
	{
		//PlayAudioStreamForPlayer(playerid,"http://music.gc4.hu/fajlok/login.mp3");
		/*switch(random(9))
		{
			case 0: PlayAudioStreamForPlayer(playerid,"http://ip.classrpg.net/egyeb/login1.mp3");
			case 1: PlayAudioStreamForPlayer(playerid,"http://ip.classrpg.net/egyeb/login2.mp3");
			case 2: PlayAudioStreamForPlayer(playerid,"http://ip.classrpg.net/egyeb/login3.mp3");
			case 3: PlayAudioStreamForPlayer(playerid,"http://ip.classrpg.net/egyeb/login4.mp3");
			case 4: PlayAudioStreamForPlayer(playerid,"http://ip.classrpg.net/egyeb/login5.mp3");
			case 5: PlayAudioStreamForPlayer(playerid,"http://ip.classrpg.net/egyeb/login6.mp3");
			case 6: PlayAudioStreamForPlayer(playerid,"http://ip.classrpg.net/egyeb/login7.mp3");
			case 7: PlayAudioStreamForPlayer(playerid,"http://ip.classrpg.net/egyeb/login8.mp3");
			case 8: PlayAudioStreamForPlayer(playerid,"http://ip.classrpg.net/egyeb/login9.mp3");
		}*/
	}

	if(Logged(playerid) == 0)
	{
		// TEMPORARYFIX03d
		SetSpawnInfo(playerid, SPAWNID, PlayerInfo[playerid][pChar],0.0,0.0,0.0,0,0,0,0,0,0,0);
		SpawnPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid, LoginSpawn[SpawnHely[playerid]][3], LoginSpawn[SpawnHely[playerid]][4], LoginSpawn[SpawnHely[playerid]][5]);
		SetPlayerCameraPos(playerid, LoginSpawn[SpawnHely[playerid]][0], LoginSpawn[SpawnHely[playerid]][1], LoginSpawn[SpawnHely[playerid]][2]);
		SetPlayerCameraLookAt(playerid, LoginSpawn[SpawnHely[playerid]][3], LoginSpawn[SpawnHely[playerid]][4], LoginSpawn[SpawnHely[playerid]][5]);
		SetPlayerVirtualWorld(playerid, 65535, "requestclass2");
		TogglePlayerControllable(playerid, false);

		if(ElsoSpawn[playerid] == 1)
		{
			//SetTimer("Spawnolas", 3000, false);
			ElsoSpawn[playerid] = 0;
			JatekBetoltve[playerid] = true;
		}

		return 1;
	}
	SetupPlayerForClassSelection(playerid);
	return 1;
}

fpublic Spawnolas()
{
	new p;
	for(p = 0; p < MAX_PLAYERS; p++)
	{
		if(IsPlayerConnected(p))
		{
			if(GetPlayerState(p) == PLAYER_STATE_WASTED && Logged(p) || GetPlayerState(p) == PLAYER_STATE_NONE && Logged(p) == 0)
			{
				OnPlayerRequestClass(p, GetPlayerSkin(p));
			}
		}
	}
	return 1;
}

fpublic OnPlayerRequestSpawn(playerid)
{
	if(Logged(playerid) == 0 && !IsPlayerNPC(playerid))
		return 0;
	return 1;
}

fpublic SetupPlayerForClassSelection(playerid)
{

    SetPlayerInterior(playerid,0);
	//PlayerInfo[playerid][pTeleportAlatt] = 1;
	//PlayerInfo[playerid][pCFalsePositive] = 1;
	SetPlayerPos(playerid,-1657.5237,1207.6644,13.6719);
	SetPlayerFacingAngle(playerid,357.6906);
    SetPlayerCameraPos(playerid, -1657.4678,1211.2292,13.6781);
    SetPlayerCameraLookAt(playerid,-1657.5237,1207.6644,13.6719);

}
fpublic Indexvege(carid, playerid)
{
	VehicleInfo[carid][Kozos] = 0;
	SetVehicleIndex(playerid, carid, true, true, false);
}
//---------------------------------------------------------
fpublic SetVehicleCriminal(vehicleid, reporter, reason[]) // Példa: SetVehicleCriminal(carid, playerid, "Lopott jármû");
{
	new jelento[MAX_PLAYER_NAME], vs = IsAVsKocsi(vehicleid), fk = IsFrakcioKocsi(vehicleid);
	strmid(VehicleCrime[vehicleid][vVad], reason, 0, strlen(reason), 255);
	if(reporter == 255)
	{
		format(jelento, sizeof(jelento), "CCTV Kamera");
		strmid(VehicleCrime[vehicleid][vJelento], jelento, 0, strlen(jelento), 255);
	}
	else
	{
		GetPlayerName(reporter, jelento, sizeof(jelento));
		strmid(VehicleCrime[vehicleid][vJelento], jelento, 0, strlen(jelento), 255);
	}
	if(vs > NINCS)
		SendFormatMessage(OnlineUID(CarInfo[vs][cTulaj]), COLOR_LIGHTRED, "A CLS-%d rendszámú jármûvedet feljelentették, vád: %s, jelentõ: %s", vehicleid, reason, ICPlayerName(reporter));
	else if(fk > NINCS)
	{
		new frakcio = IsFrakcioKocsi(vehicleid);
		format(_tmpString, sizeof(_tmpString), "<< A CLS-%d rendszámú jármûveteket körözik, vád: %s, jelentõ: %s >>", vehicleid, reason, ICPlayerName(reporter));
		foreach(Jatekosok, x)
		{
			if(LMT(x, frakcio))
				SendClientMessage(x, COLOR_LIGHTRED, _tmpString);
		}
	}
	CarWantedLevel[vehicleid] = UnixTime + 604800;
	CopMsgFormat(TEAM_BLUE_COLOR, "HQ: Minden egységnek! Körözött jármû: CLS-%d", vehicleid);
	CopMsgFormat(TEAM_BLUE_COLOR, "HQ: Vád: %s | Jelentõ: %s", reason, ICPlayerName(reporter));
	return 1;
}

fpublic SetPlayerCriminal(playerid, reporter, reason[])
{
	new jelento[MAX_PLAYER_NAME];
	if(IsPlayerNPC(playerid)) return 1;	
	if(reporter == 255)
	{
		if(Harcol[playerid]) return 1;
		if(Szajkendo[playerid] || Maszk[playerid])
		{
			new chanceforillegal = random(100), bool:k;
			switch(chanceforillegal)
			{
				case 0..65: { Msg(playerid, "Szerencséd volt ezúttal, a CCTV Kamera nem tudott azonosítani", false, COLOR_GREEN); k = true; }
				default: Msg(playerid, "Sajnos nem jártál szerencsével, a CCTV Kamera be tudott azonosítani, így feljelentettek!", false, COLOR_LIGHTRED);
			}
			if(k) return 1;
		}
		WantedLevel[playerid] += UnixTime + 604800;
		format(jelento, sizeof(jelento), "CCTV Kamera");
		strmid(PlayerCrime[playerid][pVad], reason, 0, strlen(reason), 255);
		strmid(PlayerCrime[playerid][pJelento], jelento, 0, strlen(jelento), 255);
		SendFormatMessage(playerid, COLOR_LIGHTRED, "Feljelentettek! Vád: %s - Jelentõ: CCTV Kamera", reason);
		CopMsgFormat(TEAM_BLUE_COLOR, "HQ: Minden egységnek! Körözött személy: %s",ICPlayerName(playerid));
		CopMsgFormat(TEAM_BLUE_COLOR, "HQ: Vád: %s | Jelentõ: CCTV Kamera", reason);
	}
	else
	{
		WantedLevel[playerid] += UnixTime + 604800;
		GetPlayerName(reporter, jelento, sizeof(jelento));
		strmid(PlayerCrime[playerid][pJelento], jelento, 0, strlen(jelento), 255);
		strmid(PlayerCrime[playerid][pVad], reason, 0, strlen(reason), 255);
		SendFormatMessage(playerid, COLOR_LIGHTRED, "Feljelentettek! Vád: %s - Jelentõ: %s", reason, ICPlayerName(reporter));
		CopMsgFormat(TEAM_BLUE_COLOR, "HQ: Minden egységnek! Körözött személy: %s",ICPlayerName(playerid));
		CopMsgFormat(TEAM_BLUE_COLOR, "HQ: Vád: %s | Jelentõ: %s", reason, ICPlayerName(reporter));
	}
	return 1;
}
//---------------------------------------------------------

stock SetPlayerFree(playerid,declare)//,reason[])
{ // Hogyan csináljunk 20 sorból 4et xd
	new spf[96];
	ClearPlayerCrime(playerid);
	format(spf, sizeof(spf), "HQ: %s letartóztatta %s-t",ICPlayerName(declare), ICPlayerName(playerid));
	SendMessage(SEND_MESSAGE_COP, spf, COLOR_BLUE);
}

fpublic RingToner()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 6 && RingTone[i] != 0 && RingTone[i] < 11)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 6)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 20)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
			}
		}
	}
	SetTimer("RingTonerRev", 1000, 0);
	return 1;
}

fpublic RingTonerRev()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 5 && RingTone[i] != 0 && RingTone[i] < 10)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1137, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 5)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 19)
			{
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
				RingTone[i] = 0;
			}
		}
	}
	SetTimer("RingToner", 1000, 0);
	return 1;
}

fpublic PuttoSorsolas()
{
	if(PSorsolas < 1)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(VanSzelvenye[i] == 1)
			{
					//SendClientMessage(i, COLOR_LIGHTBLUE, "* Puttó Sorsolás elkezdõdött!");
					new Szam1 = Rand(1, 20);
					new Szam2 = Rand(1, 20);
					new Szam3 = Rand(1, 20);
					new Szam4 = Rand(1, 20);
					new Szam5 = Rand(1, 20);
					new Szam6 = Rand(1, 20);
					new Szam7 = Rand(1, 20);
					new Szam8 = Rand(1, 4);
					if(Szam1 == Szam2 || Szam1 == Szam3 ||  Szam1 == Szam4 ||  Szam1 == Szam5 ||  Szam1 == Szam6 ||  Szam1 == Szam7) return PuttoSorsolas();
					if(Szam2 == Szam1 || Szam2 == Szam3 ||  Szam2 == Szam4 ||  Szam2 == Szam5 ||  Szam2 == Szam6 ||  Szam2 == Szam7) return PuttoSorsolas();
					if(Szam3 == Szam1 || Szam3 == Szam2 ||  Szam3 == Szam4 ||  Szam3 == Szam5 ||  Szam3 == Szam6 ||  Szam3 == Szam7) return PuttoSorsolas();
					if(Szam4 == Szam1 || Szam4 == Szam2 ||  Szam4 == Szam3 ||  Szam4 == Szam5 ||  Szam4 == Szam6 ||  Szam4 == Szam7) return PuttoSorsolas();
					if(Szam5 == Szam1 || Szam5 == Szam2 ||  Szam5 == Szam3 ||  Szam5 == Szam3 ||  Szam5 == Szam6 ||  Szam5 == Szam7) return PuttoSorsolas();
					if(Szam6 == Szam1 || Szam6 == Szam2 ||  Szam6 == Szam3 ||  Szam6 == Szam4 ||  Szam6 == Szam5 ||  Szam6 == Szam7) return PuttoSorsolas();
					if(Szam7 == Szam1 || Szam7 == Szam2 ||  Szam7 == Szam3 ||  Szam7 == Szam4 ||  Szam7 == Szam5 ||  Szam7 == Szam6) return PuttoSorsolas();

					SendClientMessage(i, COLOR_LIGHTBLUE, "* Puttó Sorsolás elkezdõdött!");
					SendFormatMessage(i, COLOR_LIGHTBLUE, "* Nyerõ számok: %d, %d, %d, %d, %d, %d, %d, B:%d", Szam1, Szam2, Szam3, Szam4, Szam5, Szam6, Szam7, Szam8);
					SendFormatMessage(i, COLOR_LIGHTBLUE, "* Te számaid: %d, %d, %d, %d, %d, %d, %d, B:%d", PSzam1[i], PSzam2[i], PSzam3[i], PSzam4[i], PSzam5[i], PSzam6[i], PSzam7[i], PSzam8[i]);
					if(PSzam1[i] == Szam1 || PSzam1[i] == Szam2 || PSzam1[i] == Szam3 || PSzam1[i] == Szam4 || PSzam1[i] == Szam5 || PSzam1[i] == Szam6 || PSzam1[i] == Szam7) talalatok[i]++;
					if(PSzam2[i] == Szam1 || PSzam2[i] == Szam2 || PSzam2[i] == Szam3 || PSzam2[i] == Szam4 || PSzam2[i] == Szam5 || PSzam2[i] == Szam6 || PSzam2[i] == Szam7) talalatok[i]++;
					if(PSzam3[i] == Szam1 || PSzam3[i] == Szam2 || PSzam3[i] == Szam3 || PSzam3[i] == Szam4 || PSzam3[i] == Szam5 || PSzam3[i] == Szam6 || PSzam3[i] == Szam7) talalatok[i]++;
					if(PSzam4[i] == Szam1 || PSzam4[i] == Szam2 || PSzam4[i] == Szam3 || PSzam4[i] == Szam4 || PSzam4[i] == Szam5 || PSzam4[i] == Szam6 || PSzam4[i] == Szam7) talalatok[i]++;
					if(PSzam5[i] == Szam1 || PSzam5[i] == Szam2 || PSzam5[i] == Szam3 || PSzam5[i] == Szam4 || PSzam5[i] == Szam5 || PSzam5[i] == Szam6 || PSzam5[i] == Szam7) talalatok[i]++;
					if(PSzam6[i] == Szam1 || PSzam6[i] == Szam2 || PSzam6[i] == Szam3 || PSzam6[i] == Szam4 || PSzam6[i] == Szam5 || PSzam6[i] == Szam6 || PSzam6[i] == Szam7) talalatok[i]++;
					if(PSzam7[i] == Szam1 || PSzam7[i] == Szam2 || PSzam7[i] == Szam3 || PSzam7[i] == Szam4 || PSzam7[i] == Szam5 || PSzam7[i] == Szam6 || PSzam7[i] == Szam7) talalatok[i]++;
					if(PSzam8[i] == Szam8) talalatok[i] ++;
					if(talalatok[i] > 0)
					{
						GiveMoney(i, talalatok[i]*500);
						SendFormatMessage(i, COLOR_LIGHTBLUE, "* Találataid száma: %d, Nyertél %dFt-ot.", talalatok[i], talalatok[i]*500);
					}
					else
					{
						SendFormatMessage(i, COLOR_LIGHTBLUE, "* Találataid száma: %d, Sajnos nem nyertél semmit...", talalatok[i]);
					}
					SendClientMessage(i, COLOR_LIGHTBLUE, "* Következõ sorsolás 5 Perc múlva.");
					VanSzelvenye[i] = 0;
					talalatok[i] = 0;
			}
		}
		PSorsolas = 300;
	}
	return 1;
}

fpublic SecTimer()
{
	if(BejelentkezokSzama > 0) BejelentkezokSzama = 0;
	new string[64];
	
	foreach(Jatekosok, i)
	{
		if(PlayerInfo[i][pMostlepetbeTime] < UnixTime && !Paintballozik[i] && !Harcol[i])
		{
			new Float:elet;
			GetPlayerHealth(i, elet);
			/*if(elet <= 15.0 && !PInfo(i,Elajult))
			{
				Animban[i] = 0;
				
				PInfo(i,Elajult) = true;
				Feketeseg(i, true);
				Leutve[i] = true;
				Freeze(i);
				ApplyAnimation(i,"PED","KO_skid_front",4.1, 1, 0, 1, 1, 1, 0);
				WeaponArm(i);
				GameTextForPlayer(i, "~r~Elájultál!", 2500, 0);
				
				new felirat[40]; format(felirat, 40, "[ESZMÉLETLEN %d]",i);
				if(IsValidDynamic3DTextLabel(Elajult[i])) DestroyDynamic3DTextLabel(Elajult[i]), Elajult[i] = INVALID_3D_TEXT_ID;
				
				Elajult[i] = CreateDynamic3DTextLabel(felirat, COLOR_RED, 0.0, 0.0, 0.5, 40.0, i);
				
			}*/
			if(Animban[i] && PlayerInfo[i][pLoves] > UnixTime && PlayerInfo[i][pEllatva])
			{
				if(elet > 10.0)
					SetHealth(i, elet-VERZES);
				
				new felirat[20]; format(felirat, 20, "[VÉRZIK]");
				if(IsValidDynamic3DTextLabel(Elajult[i])) DestroyDynamic3DTextLabel(Elajult[i]), Elajult[i] = INVALID_3D_TEXT_ID;
				
				Elajult[i] = CreateDynamic3DTextLabel(felirat, 0xFF6347FF, 0.0, 0.0, 0.5, 40.0, i);
			}
		
		}
		if(!PlayerInfo[i][pEllatva] && !PInfo(i,Elajult))
		{
			if(IsValidDynamic3DTextLabel(Elajult[i])) DestroyDynamic3DTextLabel(Elajult[i]), Elajult[i] = INVALID_3D_TEXT_ID;
		
		}
	}
	if(BankRobIdo > 0)
	{
		BankRobIdo--;
		if(BankRobIdo < 1)
		{
			BankLezar();
		}
	}
	if(MikorRabolhato > 0)
		MikorRabolhato--;
	if(Boltrabolhato > 0)
		Boltrabolhato--;
	
	if(SzerverResiCounter > 0 || SzerverResiigCounter > 0)
			TextDrawHideForAll(resitd);
	
	if(ResiCounterFIX)
	{
		
	
	
		ResiCounter--;
	
		if(ResiCounter <= 0)
		{
			TextDrawSetString(resitd, "CarResi!");
		
			CarRespawnSzamlalo=0;
			AllCarRespawn();
			ResiCounterFIX = false;
		
		}
		else if(ResiCounter < 45)
		{
			Format(string, "CarResi: %dmp", ResiCounter);
			TextDrawSetString(resitd, string);
		}
		else if(ResiCounter > 45 && ResiCounter < 120)
		{
			TextDrawSetString(resitd, "Hamarosan CarResi!");
			TextDrawShowForAll(resitd);
		}
	}
	
	//szerver restarthoz
	if(SzerverResiCounter > 0 && SzerverResiigCounter <= 0)
	{
		SzerverResiCounter--;
	}
	
	if(SzerverResiigCounter > 0)
	{
		Format(string, "Szerver restart indul: %dmp", SzerverResiigCounter);
		TextDrawSetString(resiszerver, string);
		SzerverResiigCounter--;
	}
	else if(SzerverResiCounter == 59)
	{
		SendClientMessageToAll(COLOR_LIGHTRED, "<<< ======================================== >>>");
		SendClientMessageToAll(COLOR_LIGHTRED, "<<< A szerver restart elindult>>>");
		SendFormatMessageToAll(COLOR_LIGHTBLUE, "<<< A szerver újraindul kb. %d másodperc>>>", SzerverResiCounter);
		ResiVan[0] = true;
		SendClientMessageToAll(COLOR_LIGHTRED, "<<< ======================================== >>>");
		
		foreach(Jatekosok,i)
		{
			GameTextForPlayer(i, "~r~~h~================~n~Restart van!~n~~r~~h~================", 5000, 5);
		}
	}
	else if(SzerverResiCounter == 40)
	{
		foreach(Jatekosok,i)
		{
			GameTextForPlayer(i, "~r~~h~================~n~Restart van!~n~~r~~h~================",5000, 5);
		}
		
	}
	else if(SzerverResiCounter == 18)
	{
		
		SzerverRestartMentes();
	}
	else if(SzerverResiCounter == 1)
	{
		SendRconCommand("exit");
	}
	else if(SzerverResiCounter <= 5)
	{
		TextDrawSetString(resiszerver, "A szerver újraindul!!!");
	}
	else if(SzerverResiCounter > 5)
	{
		Format(string, "A szerver ªjraindul: %dmp", SzerverResiCounter);
		TextDrawSetString(resiszerver, string);

	}

	RabolasCheck();
	BVIdoCheck();
	if(PSorsolas > 0){ PSorsolas -= 1; }
	if(PSorsolas < 1)
	{
		PuttoSorsolas();
	}
	if(TilosOlni == 1)
	{
		TextDrawShowForAll(zerotd);
	}
	else if(TilosOlni == 0)
	{
		TextDrawHideForAll(zerotd);
	}
	return 1;
}

fpublic OtherTimer()
{
	//new tagok = OnlineTagok( FRAKCIO_TUZOLTO );
	new tagok = TuzoltoOnline(); //ha duty-ban van csak akkor van tûz
	if(TuzIdo < 1)
	{
		if(TuzVan)
		{
			new str[128];
			format(str, 128, "A tüzet nem sikerült idõben eloltanotok, elkéstetek, a biztosító levont %dFtot tõletek", TuzJutalom * 1200 * 2);
			foreach(Jatekosok, playerid)
			{
				if(LMT(playerid, FRAKCIO_TUZOLTO))
					SendClientMessage(playerid, COLOR_LIGHTRED, str);
			}

			FrakcioSzef(FRAKCIO_TUZOLTO,-TuzJutalom * 1200 * 2, 20);
			for(new t = 0; t < TUZ_MAX; t++)
			{
				if(Tuz[t][tuzAktiv])
				{
					DestroyDynamic3DTextLabel( Tuz[t][tFelirat] );
					Tuz[t][tFelirat]=INVALID_3D_TEXT_ID;
					DestroyDynamicMapIcon( Tuz[t][tMap] );

					for(new o = 0; o < TUZ_OBJECT; o++)
						if(IsValidDynamicObject( Tuz[t][tObject][o])) DestroyDynamicObject( Tuz[t][tObject][o]),  Tuz[t][tObject][o]=INVALID_OBJECT_ID;

					Tuz[t][tuzAktiv] = false;
				}
			}

			TuzIdo = Rand(TUZ_IDO_MIN, TUZ_IDO_MAX);
			TuzVan = false;
		}
		else if(tagok >= TUZ_MINTAG)
		{
			new volt[TUZ_MAX], str[128], helyek = Rand(1, TUZ_MAX), bool:van, poz = random(sizeof(TuzPoz)), db, meddig;
			for(new t = 0; t < helyek; t++)
			{
				volt[t] = NINCS;
				do
				{
					van = false, db = 0, meddig = random(TUZ_MAX_POZ) + 1;

					for(new k = 0; k < TUZ_MAX_POZ; k++)
					{
						if( TuzPoz[k][tPoz][0] != 0.0 )
						{
							db++;
							if(db == meddig)
							{
								poz = k;
								break;
							}
						}

						if(k == (TUZ_MAX_POZ - 1))
							k = 0;
					}

					if(t)
					{
						for(new p = 0; p < t; p++)
						{
							if(volt[p] == poz)
							{
								van = true;
								break;
							}
						}
					}
				}while(van);
				volt[t] = poz;

				Tuz[t][tuzAktiv] = true;

				Tuz[t][tPoz][0] = TuzPoz[poz][tPoz][0];
				Tuz[t][tPoz][1] = TuzPoz[poz][tPoz][1];
				Tuz[t][tPoz][2] = TuzPoz[poz][tPoz][2];

				Tuz[t][tMaxHP] = 50 + (tagok * 5);
				Tuz[t][tHP] = Tuz[t][tMaxHP];

				format(str, 128, "%d / %d", Tuz[t][tMaxHP], Tuz[t][tHP]);
				Tuz[t][tFelirat] = CreateDynamic3DTextLabel(str, 0x22AAFFFF, TuzPoz[ poz ][tPoz][0], TuzPoz[ poz ][tPoz][1],TuzPoz[ poz ][tPoz][2] + 1.0, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

				for(new o = 0; o < TUZ_OBJECT; o++)
					Tuz[t][tObject][o] = CreateDynamicObject(18691, TuzPoz[ poz ][tPoz][0] + floatrand(-TUZ_TAV, TUZ_TAV),TuzPoz[ poz ][tPoz][1] + floatrand(-TUZ_TAV, TUZ_TAV), TuzPoz[ poz ][tPoz][2] - 2.0, 0.0, 0.0, 0.0);

				Tuz[t][tMap] = CreateDynamicMapIcon(TuzPoz[ poz ][tPoz][0], TuzPoz[ poz ][tPoz][1],TuzPoz[ poz ][tPoz][2], 20, 0, NINCS, NINCS, NINCS, 6000.0);
				Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_STYLE, MAPICON_GLOBAL);
				if(Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, NINCS))
					Streamer_RemoveArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, NINCS);

				//printf("TUZ VAN");

			}
			if(helyek == 1) format(str, 128, "Figyelem! Tûz ütött ki valahol! Siessetek a helyszínre eloltani a tüzet!");
			else format(str, 128, "Figyelem! Tûz ütött ki TÖBB HELYEN! Siessetek a helyszínre eloltani a tüzet!");

			TuzJutalom = 200 + (helyek * 50);

			foreach(Jatekosok, playerid)
			{
				if(LMT(playerid, FRAKCIO_TUZOLTO))
				{
					//printf("OtherTimer - Tuz - AppendArrayData");
					SendClientMessage(playerid, COLOR_LIGHTRED, str);
					for(new t = 0; t < helyek; t++)
					{
						if(Tuz[t][tuzAktiv] && !Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, playerid))
							Streamer_AppendArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, playerid );
					}
					Streamer_Update(playerid);
					TextDrawShowForPlayer(playerid, TuzInfo[0]);
					TextDrawShowForPlayer(playerid, TuzInfo[1]);
				}
			}

			TuzIdo = 2400;
			TuzVan = true;
		}
	}
	else if(TuzVan)
	{
		TuzIdo--;
		new str[128], bool:van, perc, mp;

		if(TuzIdo >= 1200)
		{
			perc = (TuzIdo - 1200) / 60;
			mp = (TuzIdo - 1200) % 60;
		}
		else
		{
			perc = TuzIdo / 60;
			mp = TuzIdo % 60;
		}

		if(TuzIdo >= 2100) format(str, 128, "+%dFt~n~~g~%02d:%02d", (900 * TuzJutalom), perc, mp);
		else if(TuzIdo >= 1200) format(str, 128, "+%dFt~n~~y~%02d:%02d", ((TuzIdo - 1200) * TuzJutalom), perc, mp);
		else format(str, 128, "~r~-%dFt~n~~r~%02d:%02d", ((1200 - TuzIdo) * TuzJutalom), perc, mp);

		TextDrawSetString(TuzInfo[1], str);

		if(TuzIdo)
		{
			new skin, Float:x, Float:y, Float:z;
			foreach(Jatekosok, playerid)
			{
				if(PlayerState[playerid] != PLAYER_STATE_ONFOOT && PlayerState[playerid] != PLAYER_STATE_DRIVER)
					continue;
					
				skin = GetPlayerSkin(playerid);
				for(new t = 0; t < TUZ_MAX; t++)
				{
					if(!Tuz[t][tuzAktiv]) continue;
					
					if(PlayerToPoint(TUZ_SERULES_TAV, playerid, ArrExt( Tuz[t][tPoz] )) && skin != 277 && skin != 278 && skin != 279 && skin != 219)
					{
						GiveHealth(playerid, -TUZ_SERULES);
						Msg(playerid, "Tûz közelében vagy! Menj innen, mert megégsz!");
					}

					if(TuzetOlt[playerid] && LMT(playerid, FRAKCIO_TUZOLTO))
					{
						GetXYZInFrontOfPlayer(playerid, x, y, z, 1.0);
						if(GetDistanceBetweenPoints(x, y, z, ArrExt( Tuz[t][tPoz] )) < TUZ_OLTO_TAV)
						{
							Tuz[ t ][tHP]--;
							if(Tuz[ t ][tHP] > 0)
							{
								format(str, 128, "%d / %d", Tuz[ t ][tMaxHP], Tuz[ t ][tHP]);
								UpdateDynamic3DTextLabelText(Tuz[ t ][tFelirat], COLOR_DARKBLUE, str);
								Streamer_Update(playerid);
							}
							else
							{
								if(IsValidDynamic3DTextLabel( Tuz[ t ][tFelirat] ))
									DestroyDynamic3DTextLabel( Tuz[ t ][tFelirat] ),Tuz[t][tFelirat]=INVALID_3D_TEXT_ID;
								
								DestroyDynamicMapIcon( Tuz[ t ][tMap] );

								for(new o = 0; o < TUZ_OBJECT; o++)
									if(IsValidDynamicObject(  Tuz[ t ][tObject][o] )) DestroyDynamicObject( Tuz[ t ][tObject][o] ),Tuz[ t ][tObject][o]=INVALID_OBJECT_ID;

								Tuz[ t ][tuzAktiv] = false;

								for(new b = 0; b < TUZ_MAX; b++)
								{
									if(Tuz[b][tuzAktiv])
									{
										van = true;
										break;
									}
								}

								if(!van)
								{
									TuzVan = false;
									TextDrawHideForAll(TuzInfo[0]);
									TextDrawHideForAll(TuzInfo[1]);

									if(TuzIdo >= 2100)
									{
										format(str, 128, "Szép volt! Gyorsan kiértetek a helyszínre, és eloltottátok az összes tüzet! Jutalmatok: %dFt", (TuzJutalom * 1200));
										FrakcioSzef(FRAKCIO_TUZOLTO,TuzJutalom * 1200, 21);
										
									}
									else if(TuzIdo >= 1200)
									{
										new penz = (TuzIdo - 1200) * TuzJutalom;
										if(!penz) penz = 300;

										format(str, 128, "Szép volt! Kiértetek a helyszínre, és eloltottátok az összes tüzet! Jutalmatok: %dFt", penz);
										FrakcioSzef(FRAKCIO_TUZOLTO,penz, 22);
									}
									else
									{
										new penz = (1200 - TuzIdo) * TuzJutalom * 2;
										format(str, 128, "Sajnos túl késõn értetek ki és oltottátok el a tüzet, ezért a biztosító %dFt büntetést számol fel", penz);
										FrakcioSzef(FRAKCIO_TUZOLTO,-penz, 23);
									}

									foreach(Jatekosok, c)
									{
										if(LMT(c, FRAKCIO_TUZOLTO))
											SendClientMessage(c, COLOR_LIGHTRED, str);
									}

									TuzIdo = Rand(TUZ_IDO_MIN, TUZ_IDO_MAX);

									break;
								}
								else
								{
									format(str, 128, "Szép volt, eloltottatok egy tüzet. De még mindig ég valahol, siessetek a helyszínre!");
									foreach(Jatekosok, d)
									{
										if(LMT(d, FRAKCIO_TUZOLTO))
											SendClientMessage(d, COLOR_LIGHTRED, str);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	else if(!TuzVan && tagok >= TUZ_MINTAG)
		TuzIdo--;

	if(KincsIdo > 0)
	{
		KincsIdo--;
		if(KincsIdo == 0)
			KincsAkcio( KINCS_INDIT );
	}

	//otimer
	new string[128]; //Float:pos[3];
    foreach(Jatekosok, i)
	{
		/*//Anti-TeleportHack
		new Float:oldCPosX, Float:oldCPosY, Float:oldCPosZ;
		oldCPosX = PlayerInfo[i][pCPos_x];
		oldCPosY = PlayerInfo[i][pCPos_y];
		oldCPosZ = PlayerInfo[i][pCPos_z];
		GetPlayerPos(i, PlayerInfo[i][pCPos_x], PlayerInfo[i][pCPos_y], PlayerInfo[i][pCPos_z]);
		PlayerInfo[i][pCTav] = GetDistanceBetweenPoints(oldCPosX,oldCPosY,oldCPosZ, PlayerInfo[i][pCPos_x],PlayerInfo[i][pCPos_y],PlayerInfo[i][pCPos_z]);
		//if(IsScripter(i)) SendFormatMessage(i, COLOR_LIGHTRED, " Tavolsag: %f",PlayerInfo[i][pCTav]);
		
		if(Tevezik[i] > 0) PlayerInfo[i][pCFalsePositive] = 1;
		if(PlayerInfo[i][pCTav] > 250)
		{
			if(PlayerInfo[i][pTeleportAlatt] != 0 || FlyModeBa[i])
			{
				PlayerInfo[i][pTeleportAlatt] = 0;
				continue;
			}
			if(!IsPlayerConnected(i) || !Logged(i) || IsPlayerNPC(i) || oldCPosX < 1 && oldCPosY < 1 && oldCPosZ < 1) continue;
			if(Szunet[i] != false || PlayerInfo[i][pCFalsePositive] != 0 || AdminDuty[i] != 0)
			{
				PlayerInfo[i][pCTav] = 0;
				continue;
			}
			PlayerInfo[i][pCFigyelm]++;
			ABroadCastFormat(COLOR_LIGHTRED, 1, "[ClassGuard] %s valószínûleg airbrake / teleport hacket használ! (%d× / 5 figyelmeztetés) [Távolság: %f]", PlayerName(i), PlayerInfo[i][pCFigyelm], PlayerInfo[i][pCTav]);
			ABroadCastFormat(COLOR_LIGHTRED, 1, "[ClassGuard] [%f, %f, %f] -> [%f, %f, %f]", oldCPosX, oldCPosY, oldCPosZ, PlayerInfo[i][pCPos_x], PlayerInfo[i][pCPos_y], PlayerInfo[i][pCPos_z]);
			if(PlayerInfo[i][pCFigyelm] > 4)
			{
				SendFormatMessageToAll(COLOR_LIGHTRED, "ClassRPG: %s ki lett bannolva a ClassGuard által | Oka: Teleport hack", PlayerName(i));
				SeeBan(i, 0, NINCS, "CG - Teleport");
			}
		}*/
		
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			new kocsika = GetPlayerVehicleID(i);
		
			new panels, doors, lights, tires;
			GetVehicleDamageStatus(kocsika, panels, doors, lights, tires);
		
			
			if(KamionEgyeb[i] == 2)
			{
				if(SebessegKorlat[i] > 100 || SebessegKorlat[i] <= 0) SebessegKorlat[i] = 100;
			}
			
			if(tires == 15)
				SebessegKorlat[i] = 30;
			else if(tires == 14 || tires == 13 || tires == 11 || tires == 7)
				SebessegKorlat[i] = 50;
			else if(tires == 12 || tires == 10 || tires == 9 || tires == 6 || tires == 5 || tires == 3)
				SebessegKorlat[i] = 70;
			else if(tires != 0)
				SebessegKorlat[i] = 100;

			if(GetVehicleTrailer(kocsika) != 0 && tires == 0 && GetVehicleModel(kocsika) == 525)
				SebessegKorlat[i] = 60;
		}
	
		if(!gPlayerLogged[i])
		{
			LoginTime{i}++;
			if(LoginTime{i} >= 30)
			{
				WKick(i);
				continue;
			}
		}
		
		if(Loterben[i] != NINCS)
		{
			Streamer_Update(i);	
		}
		if(Paintballnevezve[i])
		{
			if(!PlayerToPoint(15, i, BizzInfo[BIZ_PB][bEntranceX], BizzInfo[BIZ_PB][bEntranceY], BizzInfo[BIZ_PB][bEntranceZ]))
			{
				Paintballnevezve[i] = false;
				Msg(i, "Elmentél a bejárattól, a nevezésed megszûnt!");
				PaintballInfo[PBTerem[i]][pbNevezesek]--;
				PBTerem[i] = 0;
				if(PaintballInfo[PBTerem[i]][pbNevezesek] == 0)
				{
					PBTerem[i] = 0;
					PaintballFrissites(PBTerem[i]);
					if(gPB[i] == 0) continue;
					SendClientMessage(i,COLOR_DYELLOW,"=====[ Paintball ]=====");
					SendClientMessage(i,COLOR_WHITE,"A Paintball mérkõzés elmarad emberhiány miatt!");
				}
			}
		}
		
		/* * * * * * * * * * * * *
		 *                       *
		 *  T É R F I G Y E L Õ  *
		 *                       *
		 * * * * * * * * * * * * */
		if(!PLAYER_MARKER_IS_HIDDEN(i) && !PlayerMarker[i][mHidden])
		{
			// térfigyelõ - fegyverviselés
			if(PlayerMarker[i][mType] == PLAYER_MARKER_NONE && PLAYER_MARKER_WEAPONS_WEAPONHOLD(i) && !IsACop(i))
			{
				MarkerAction(i, PLAYER_MARKER_SET, PLAYER_MARKER_WEAPONHOLD);
			}
			
			// térfigyelõ - fegyverviselés - fegyverelrakás után
			if(PlayerMarker[i][mType] == PLAYER_MARKER_WEAPONHOLD && WeaponArmed(i) == 0 && PlayerMarker[i][mTime] == 0)
			{
				MarkerAction(i, PLAYER_MARKER_SET, PLAYER_MARKER_NONE);
			}
			
			// térfigyelõ - célzás
			if(PlayerMarker[i][mType] <= PLAYER_MARKER_TARGET && !IsACop(i) && PLAYER_MARKER_WEAPONS_TARGET(i))
			{
				new target = GetPlayerTargetPlayer(i);
				if(target != INVALID_PLAYER_ID
					&& /*(Fegyvere[i] != WEAPON_RIFLE && Fegyvere[i] != WEAPON_SNIPER || */GetDistanceBetweenPlayers(i, target) <= PLAYER_MARKER_RIFLE_DISTANCE/*)*/
				)
				{
					if(PlayerMarker[i][mTargetTime] < PLAYER_MARKER_TIME_TARGETING)
					{
						PlayerMarker[i][mTargetTime]++;
						if(PlayerMarker[i][mTargetTime] == PLAYER_MARKER_TIME_TARGETING)
						{
							if(PlayerMarker[i][mType] < PLAYER_MARKER_TARGET)
								MarkerAction(i, PLAYER_MARKER_SET, PLAYER_MARKER_TARGET);
						}
					}
					else
					{
						PlayerMarker[i][mTime] = 0;
					}
				}
				else
				{
					PlayerMarker[i][mTargetTime] = 0;
					
					if(PlayerMarker[i][mTime] == 0)
						MarkerAction(i, PLAYER_MARKER_SET, PLAYER_MARKER_NONE);
				}
			}
		}
		
		// térfigyelõ - jelzés lejárat
		if(PlayerMarker[i][mTime] > 0 && WeaponArmed(i) == 0)
		{
			PlayerMarker[i][mTime]--;
			if(PlayerMarker[i][mTime] == 0)
				MarkerAction(i, PLAYER_MARKER_CLEAR);
		}
		
		if(seo_fakekillTime[i] > 0)
		{
			seo_fakekillTime[i]--;
			if(seo_fakekillTime[i] == 0)
				seo_fakekillCount[i] = 0;
		}
		
		if(RendorPajzsIdo[i] > 0)
		{
		    RendorPajzsIdo[i] --;
		    if(RendorPajzsIdo[i] == 1)
		    {
		        RendorPajzsIdo[i] = 0;
		        if(IsPlayerAttachedObjectSlotUsed(i, ATTACH_SLOT_ZSAK_PAJZS_BILINCS)) RemovePlayerAttachedObject(i, ATTACH_SLOT_ZSAK_PAJZS_BILINCS);
				Msg(i, "A pajzsod elhasználódott!");
		    }
		}
		
		if(PD_Fegyver_Felvett[i] > 0)
		    PD_Fegyver_Felvett[i]--;

		if(VehiclePosUpdated[i])
			VehiclePosUpdated[i] = false;

		if(seo_carEntering[i] > 0)
			seo_carEntering[i]--;

	    if(seo_carFloodTime[i] > 0)
		{
			seo_carFloodTime[i]--;
			if(seo_carFloodTime[i] == 0)
				seo_carFlood[i] = 0;
		}

		if(seo_carTeleportTime[i] > 0)
		{
			seo_carTeleportTime[i]--;
			if(seo_carTeleportTime[i] == 0)
				seo_carTeleportFlood[i] = 0;
		}

		if(Rabolt[i] > 0)
			Rabolt[i]--;

		if(RifleTalalat[i] > 0)
			RifleTalalat[i]--;

		if(BicikliFlood[i] > 0)
			BicikliFlood[i]--;

		if(IDK[i] > 0 && !Admin(i,1))
		{
			IDK[i]--;
			if(IDK[i] == 0)
			{
				Bejelento[i] = false;
				foreach(Jatekosok, p)
				{
					if(p == i || BText[p] == INVALID_3D_TEXT_ID) continue;
					Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, BText[p], E_STREAMER_PLAYER_ID, i);
				}
				Streamer_Update(i);
				Msg(i, "Felirat kikapcsolva");

				//printf("Felirat off - %d %s", i, Nev(i));
			}
		}
		if(LsBankban[i])
		{
			if(PlayerToPoint(30, i, 1916.6257,-2427.2441,13.9656))
			{
				if(GetPlayerVirtualWorld(i) !=1555 && GetPlayerVirtualWorld(i) !=104)
				{
					format(string, sizeof(string), "[DEBUG] LSBANK vw állítás Volt vw %d| ",GetPlayerVirtualWorld(i));
					EgyebLog(string);
					SetPlayerVirtualWorld(i,1555);
					Msg(i, "[DEBUG] VW állítás bankban");
					printf("[Bankdebug] id:%d",i);
					format(string, sizeof(string), "[DEBUG] LSBANK vw állítás  id: %d | ",i);
					SendMessage(SEND_MESSAGE_SCRIPTER, string, COLOR_LIGHTRED);
				}
			}
		}

		if(CallTuz[i])
		{
			CallTuz[i]--;
			if(CallTuz[i] < 1)
			{
				CallTuz[i] = 0;
				Msg(i, "A tûzoltói hívásod lejárt");
				foreach(Jatekosok, o)
				{
					if(LMT(o, FRAKCIO_TUZOLTO))
						SetPlayerMarkerForPlayer(o, i, COLOR_INVISIBLE);
				}
			}
		}
		/*if(Idojaras[i] == NINCS)
		{
			GetPlayerPos(i, ArrExt(pos));
			for(new o = 0; o < MAX_HO_OBJECT; o++)
				if(HoObject[i][o] != INVALID_OBJECT_ID)
					SetDynamicObjectPos(HoObject[i][o], pos[0], pos[1], pos[2] - 5);

			Streamer_Update(i);
		}*/

		if(BejelentIdo[i])
		{
			BejelentIdo[i]--;
			if(BejelentIdo[i] < 1)
			{
				BejelentIdo[i] = 0;
				Msg(i, "Újra tehetsz bejelentést");
			}
		}
		switch(GetPlayerAnimationIndex(i))
		{
			case 1196, 1224, 1141, 1247, 1278: Szukseglet(i, 0.1);
		}

		if(Pee[i])
		{
			Szukseglet(i, _, -5.0);
			if(Vizelet[i] <= 0.0)
			{
				Pee[i] = false;
				SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
			}
		}

		if(Ajtozott[i] > 0)
			Ajtozott[i]--;

		if(C4Ido[i] > 0)
		{
			C4Ido[i]--;

			if(C4Kocsiban[i] == NINCS)
			{
				format(string, 128, "C4 Robbanószer\nDetonáció: %d másodperc", C4Ido[i]);
				UpdateDynamic3DTextLabelText(C4Text[i], 0xAA0000FF, string);
			}

			if(C4Ido[i] == 0)
			{
				if(C4Kocsiban[i] != NINCS)
				{
					new kocsi = C4Kocsiban[i];
					new Float:x, Float:y, Float:z;
					GetVehiclePos(kocsi, x, y, z);
					CreateExplosion(x, y, z, 7, 50.0);
					C4X[i] = 0.0;
					C4Y[i] = 0.0;
					C4Z[i] = 0.0;
					C4Kocsiban[i] = NINCS;
					PlayerInfo[i][pC4] = 0;
					Msg(i, "C4 felrobbantva!");
				}
				else
				{
					CreateExplosion(C4X[i], C4Y[i], C4Z[i], 7, 50.0);
					C4Lerakva[i] = 0;
					C4X[i] = 0.0;
					C4Y[i] = 0.0;
					C4Z[i] = 0.0;
					C4Kocsiban[i] = NINCS;
					PlayerInfo[i][pC4] = 0;
					Msg(i, "C4 felrobbantva!");
					if(IsValidDynamicObject(C4Object[i])) DestroyDynamicObject(C4Object[i]),C4Object[i]=INVALID_OBJECT_ID;
					if(IsValidDynamic3DTextLabel(C4Text[i]))DestroyDynamic3DTextLabel(C4Text[i]),C4Text[i]=INVALID_3D_TEXT_ID;
				}
				format(string, 128, "[C4 Figyelmeztetés][%d]%s robbantott egy C4-et.", i, PlayerName(i));
				ABroadCast(COLOR_LIGHTRED, string, 1);
			}
		}

		if(PlayerInfo[i][pJailed] == 6)
		{
			if(AJSzovegIdo[i] > 0)
				AJSzovegIdo[i]--;

			if(AJSzovegIdo[i] == 0)
			{
				new
					szoveg[256],
					id, ido;
				id = random( sizeof(JailSzovegek) );
				ido = 20 + strlen( JailSzovegek[ id ] ) / 6;
				format(szoveg, 200, "Írd be a következõ szöveget, betûre pontosan!\n\n\"%s\"\n\nHa beírod, az idõd csökken %d másodperccel", JailSzovegek[ id ], ido);
				ShowPlayerDialog(i, DIALOG_AJSZOVEG, DIALOG_STYLE_INPUT, "Magánzárka", szoveg, "Mehet", "");

				AJSzovegIdo[i] = NINCS;
				AJSzoveg[i] = id;
				AJSzovegHiba[i] = 0;
			}
		}
		if(PlayerInfo[i][pJailed] == 8)
		{
			if(AJSzovegIdo[i] > 0)
				AJSzovegIdo[i]--;

			if(AJSzovegIdo[i] == 0)
			{
				new	szoveg[256], generalt[64], ido;
				
				RandomString(generalt, Rand(7, 15));
				ido = 30 + strlen( generalt );
				format(szoveg, 200, "Írd be a következõ karaktereket, betûre pontosan, kisbetûkre és nagybetûkre egyaránt figyelve!\n\n\%s\n\nHa beírod, az idõd csökken %d másodperccel", generalt, ido);
				ShowPlayerDialog(i, DIALOG_AJSZOVEG, DIALOG_STYLE_INPUT, "Extra Magánzárka", szoveg, "Mehet", "");

				AJSzovegIdo[i] = NINCS;
				AJSzovegString[i] = generalt;
				AJSzovegHiba[i] = 0;
			}
		}
		if(PlayerRaceInfo[i][xVersenyen] != NINCS && KocsibanVan[i])
		{
			if(PlayerRaceTuning[i][tNitro] > 0 && PlayerRaceTuning[i][tNitroIdo] > 0)
			{
				PlayerRaceTuning[i][tNitroIdo]--;
				if(PlayerRaceTuning[i][tNitro] == 1 && PlayerRaceTuning[i][tNitroIdo] == 18) Msg(i, "Nitro újratöltés 18 másodperc múlva");
				else if(PlayerRaceTuning[i][tNitroIdo] == 10) Msg(i, "Nitro újratöltés 10 másodperc múlva");
				else if(PlayerRaceTuning[i][tNitroIdo] == 3) Msg(i, "Nitro újratöltés 3 másodpercen belül");
				else if(PlayerRaceTuning[i][tNitroIdo] == 0)
				{
					Msg(i, "Nitro újratöltés...");
					AddVehicleComponent(GetPlayerVehicleID(i), 1010);
				}
			}

			switch(PlayerRaceTuning[i][tUjito])
			{
				case 1:
				{
					new Float:elet;
					GetVehicleHealth(GetPlayerVehicleID(i), elet);
					if(elet < 990.0)
					{
						elet += 4.875;
						SetVehicleHealth(GetPlayerVehicleID(i), elet);
					}
					else if(elet < 1000.0) RepairVehicle(GetPlayerVehicleID(i));
				}
				case 2:
				{
					new Float:elet;
					GetVehicleHealth(GetPlayerVehicleID(i), elet);
					if(elet < 975.0)
					{
						elet += 13.0;
						SetVehicleHealth(GetPlayerVehicleID(i), elet);
					}
					else if(elet < 1000.0) RepairVehicle(GetPlayerVehicleID(i));
				}
			}

			if(PlayerRaceTuning[i][tOrvos])
			{
				new Float:elet;
				GetPlayerHealth(i, elet);
				if(elet <= 149.0) SetHealth(i, elet+1.0);
			}
		}
		if(PlayerRaceTuning[i][tSegitIdo] > 0)
		{
			PlayerRaceTuning[i][tSegitIdo]--;
			if(PlayerRaceTuning[i][tSegitIdo] == 0)
			{
				Animban[i] = 0;
				ClearAnim(i);
				UnFreeze(i);
				SetPlayerDrunkLevel(i, 0);
				Msg(i, "Robot: Sikeresen ellátva", false);
			}
		}
		//ideiglenes ameddig mindenkitõl leveszzük a munkát akin fentmaradt
		if(PlayerInfo[i][pJob1] == MUNKA_SZERELO)
		{
			PlayerInfo[i][pJob1] = 0;
		}
		if(PlayerInfo[i][pJob2] == MUNKA_SZERELO)
		{
			PlayerInfo[i][pJob2] = 0;
		}
		if(AnimIdo[i] > 0)
		{
			AnimIdo[i]--;
			if(AnimIdo[i] == 0)
			{
				Animban[i] = 0;
				SetPlayerDrunkLevel(i, 0);
			}
		}

		if(KocsitSokkolt[i] > 0)
		{
			KocsitSokkolt[i]--;
			if(KocsitSokkolt[i] == 0)
				Msg(i, "Újra sokkolhatsz");
		}

		if(AJVarakozas[i] > 0)
			AJVarakozas[i]--;
		if(ReportolasIdo[i] > 0)
		{
			ReportolasIdo[i]--;
			if(ReportolasIdo[i] == 0)
			{
				if(PlayerInfo[i][pReportChannel] != NINCS)
					Msg(i, "Újra üzenhetsz");
			}
		}
		if(OvFlood[i] > 0)
			OvFlood[i]--;

		if(Ugrasok[i][0] == 1)
			Ugrasok[i][0] = 0;

		if(Ugrasok[i][1] > 0)
		{
			Ugrasok[i][1]--;
			if(Ugrasok[i][1] == 0)
				Ugrasok[i][2] = 0;
		}
		if(Szunet[i] && Admin(i, 1))
		{
			SzunetIdo[i]++;
			if(SzunetIdo[i] == 1)
				HidePMAsztal[i] = true;
		}
		if(Szunet[i] && PlayerInfo[i][pAdmin] == 0 && !IsScripter(i))
		{
			SzunetIdo[i]++;
			if(SzunetIdo[i] == 200 && (!PlayerToPoint(20, i, -372.81, 2128.20, 133.18) && !PlayerToPoint(20, i, -340.553, 1985.268, 131.489)
			&& !PlayerToPoint(20, i, -319.854, 1945.073, 132.412) && !PlayerToPoint(20, i, -483.645, 2114.076, 133.547)
			&& !PlayerToPoint(20, i, -427.619, 2503.875, 124.304) && !PlayerToPoint(20, i, -459.990, 2371.782, 117.802)))
			{
				Msg(i, "A házadban ESCelj ne itt!");
				WKick(i);
				continue;
			}
			else if(SzunetIdo[i] == 1 && Tevezik[i] == NINCS)
				Cselekves(i, "szünetelteti a játékot", 0, true);
		}
		if(Nyomozott[i] > 0)
		{
			Nyomozott[i]--;
			if(Nyomozott[i] == 0)
				DisablePlayerCheckpoint(i);
		}

		if(HatartAtlepte[i] > 0)
			HatartAtlepte[i]--;
		if(Sokkolt[i] > 0)
		{
			Sokkolt[i]--;
			if(Sokkolt[i] == 0)
				Msg(i, "Sokkoló újratöltve.");
		}
		if(PlayerInfo[i][pSzokesJelzes]>0)
		{
			PlayerInfo[i][pSzokesJelzes]--;
			if(PlayerInfo[i][pSzokesJelzes] == 0)
			{
				foreach(Jatekosok, x)
				{
					if(IsACop(x)) SetPlayerMarkerForPlayer(x, i, COLOR_INVISIBLE);
				}
			}
		}
		if(Leutott[i] > 0)
		{
			Leutott[i]--;
			if(Leutott[i] == 0)
				Msg(i, "Mostmár ujra rendbejött a kezed igy ujra letudsz ütni valakit.");
		}
		if(PlayerInfo[i][pHack] > 0)
		{
			PlayerInfo[i][pHack]--;
			if(PlayerInfo[i][pHack] == 0)
			{
				Msg(i, "Újra hackelhetsz!");
				PlayerInfo[i][pHackProba] = 0;
			}
		}
		
		if(LeutveIdo[i] > 0)
		{
			LeutveIdo[i]--;
			if(LeutveIdo[i] == 0)
			{
				if(KorhazIdo[i] > 0)
				{
					Leutve[i] = false;
				}
				else
				{
				
					Cselekves(i, "felébredt", 1);
					Msg(i, "Felébredtél");
					UnFreeze(i);
					Feketeseg(i, false);
					Leutve[i] = false;
					ClearAnim(i);
					foreach(Jatekosok, p)
					{
						if(!RendesJatekos(p)) continue;
						if(Visz[p] == i)
							Visz[p] = NINCS;
					}
				}
			}
		}

		if(TrafiPax[i][tBuntetheto] > 0)
		{
			TrafiPax[i][tBuntetheto]--;
			if(TrafiPax[i][tBuntetheto] == 0)
				Msg(i, "Vigyázz! Ha megint gyorsan hajtasz, ismét büntetést fogsz kapni!");
		}

	    if(CellTime[i] > 0)
		{
			if(CellTime[i] == cchargetime)//60 másodpercenként
			{
				CellTime[i] = 1;
				if(IsPlayerConnected(Mobile[i]) && Mobile[Mobile[i]] == i)
				{
					CallCost[i] = CallCost[i] + BizzInfo[BIZ_TELEFON][bEntranceCost];
					if(TelefonTipus[i] == 1)
					{
						if(GetMoney(i) <= CallCost[i])
						{
							new caller = Mobile[i];
							if(caller != 255)
							{
								if(caller < 255)
								{
									SendClientMessage(caller,  COLOR_GRAD2, "Megszakadt a vonal.");
									SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
									TeloElrak[caller]=TELOELRAK;
									CellTime[caller] = 0;
									CellTime[i] = 0;
									SendClientMessage(i,  COLOR_GRAD2, "Elfogyott a pénzed, ezért a vonal megszakadt!");
									Mobile[caller] = 255;
								}
								Mobile[i] = 255;
								CellTime[i] = 0;
								RingTone[i] = 0;
								continue;
							}
						}
					}
					else
					{
					 	if(PlayerInfo[i][pTeloEgyenleg] <= CallCost[i])
						{
							new caller = Mobile[i];
							if(caller != 255)
							{
								if(caller < 255)
								{
									SendClientMessage(caller,  COLOR_GRAD2, "Megszakadt a vonal.");
									SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
									TeloElrak[caller]=TELOELRAK;
									CellTime[caller] = 0;
									CellTime[i] = 0;
									SendClientMessage(i,  COLOR_GRAD2, "Az egyenleged túl alacsony. Töltsd fel ha telefonálni akarsz");
									Mobile[caller] = 255;
								}
								Mobile[i] = 255;
								CellTime[i] = 0;
								RingTone[i] = 0;
								continue;
							}
						}
					}
				}
			}
			CellTime[i] = CellTime[i] +1;
			///ha elmegy
			if(TelefonTipus[i] == 1 &&  !IsAt(i, IsAt_Telefonfulke))
			{
				new caller = Mobile[i];
				if(caller != 255)
					{
						if(caller < 255)
						{
							SendClientMessage(caller,  COLOR_GRAD2, "Lerakták.");
							SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
							TeloElrak[caller]=TELOELRAK;
							CellTime[caller] = 0;
							CellTime[i] = 0;
							SendClientMessage(i,  COLOR_GRAD2, "Leraktad a telefont.");
							Mobile[caller] = 255;
						}
						Mobile[i] = 255;
						CellTime[i] = 0;
						RingTone[i] = 0;
						continue;
					}
			}
			//vége
			if(IsPlayerConnected(Mobile[i]) && Mobile[Mobile[i]] == 255 && CellTime[i] == 5)
			{
				format(string, sizeof(string), "* Valakinek csörög a telefonja.");
				RingTone[Mobile[i]] = 10;
				ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		if(TeloElrak[i] > NINCS)
		{
			if(TeloElrak[i] == 0)
					if(IsPlayerAttachedObjectSlotUsed(i, ATTACH_SLOT_SISAK)) RemovePlayerAttachedObject(i,ATTACH_SLOT_SISAK), TeloElrak[i]=NINCS;
		
			TeloElrak[i]--;
		
		}
		if(PenzSzallitimer[i] > NINCS && PlayerVW[i] == 1555)
		{
			new result[128];
			if(PenzSzallitimer[i] == 10)
			{
				format(result, 128, "Pénztáros: Máris adom a pénzkazettákat.");
				ProxDetector(B_Tavol, BankSFNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(BankSFNPC, result, COLOR_WHITE, B_Normal, 5000);
				SetPlayerFacingAngle(BankSFNPC, 2.53);
				
				
			}
			if(PenzSzallitimer[i] == 8)
			{
				SetPlayerAttachedObject(BankSFNPC, ATTACH_SLOT_ZSAK_PAJZS_BILINCS, 1210, 5, 0.2949, 0.1309, 0.0409, 139.2000, -70.6999, 157.9999, 0.9739, 1.0000, 1.0000, 0, 0);
			}
			if(PenzSzallitimer[i] == 6)
			{
				Cselekves(BankSFNPC,"átadja a pénzkazettákat");
				Cselekves(i,"átveszi a pénzkazettákat");
				RemovePlayerAttachedObject(BankSFNPC,ATTACH_SLOT_ZSAK_PAJZS_BILINCS);
				OnePlayAnim(i, "GANGS", "shake_cara", 4.0, 0, 0, 0, 0, 0);
				OnePlayAnim(BankSFNPC, "GANGS", "shake_cara", 4.0, 0, 0, 0, 0, 0);
				SetPlayerAttachedObject(i, ATTACH_SLOT_ZSAK_PAJZS_BILINCS, 1210, 5, 0.2949, 0.1309, 0.0409, 139.2000, -70.6999, 157.9999, 0.9739, 1.0000, 1.0000, 0, 0);
				SzallitPenz[i]=MAXTASKAPENZ;
			}
			if(PenzSzallitimer[i] == 5)
			{
				format(result, 128, "Pénztáros: Jó munkát kívánok!");
				ProxDetector(B_Tavol, BankSFNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(BankSFNPC, result, COLOR_WHITE, B_Normal, 5000);
				MegyPenzTimer=false;
			}
			if(PenzSzallitimer[i] == 1)
			{
				SetPlayerFacingAngle(BankSFNPC, 80.0);
				PenzSzallitimer[i]=0;
			}
			PenzSzallitimer[i]--;
		}
		//NPC LS BANK
		new result[128];
		//if(PlayerToPoint(3, i, 1913.67269229, -2415.88067467, 13.9649142578) && PlayerVW[i] == 1555) Régi poz
		if(PlayerToPoint(3, i, -1265.607, -98.560, 14.458) && PlayerVW[i] == 1555)
		{
			if(BankSzovegSzamLs[i] == 9)
			{
				format(result, 128, "Pénztáros: Ha szeretne vehet fel nálunk hitelt is!");
				ProxDetector(B_Tavol, BankNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(BankNPC, result, COLOR_WHITE, B_Normal, 5000);
				Msg(i, "/hitel");
			}
			else if(BankSzovegSzamLs[i] == 6)
			{
				format(result, 128, "Pénztáros: Lehetõsége van új számlát nyitni, kivenni pénzt, berakni vagy jelszót váltani.");
				ProxDetector(B_Tavol, BankNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(BankNPC, result, COLOR_WHITE, B_Normal, 5000);
				Msg(i, "/bankszámla");
			}
			else if(BankSzovegSzamLs[i] < 1)
			{
				format(result, 128, "Pénztáros: Üdvözlöm a Los Santos bankban! Kérem mondja miben segíthetek.");
				ProxDetector(B_Tavol, BankNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(BankNPC, result, COLOR_WHITE, B_Normal, 5000);
			}
			BankSzovegSzamLs[i]++;
		}
		if(Animban[i])
		{
			if(PlayerState[i] == PLAYER_STATE_DRIVER)
			{
				if(PlayerRaceInfo[i][xVersenyen] != NINCS && KocsibanVan[i] && PlayerRaceTuning[i][tOrvos]) continue;
				new sebesseg = GetVehicleSpeed(GetPlayerVehicleID(i));
				if(sebesseg > 1)
				{
					RemovePlayerFromVehicle(i);
					Msg(i, "Ne vezess animban!");
					if(Sokkol[i])
					{
						Sokkol[i] = false;
						if(IsValidDynamicObject(SokkObject[i])) DestroyDynamicObject(SokkObject[i]);
						SokkObject[i] = INVALID_OBJECT_ID;
					}
					continue;
				}
			}
		}
		if(!PlayerToPoint(12, i, -1265.607, -98.560, 14.458) && BankSzovegSzamLs[i] > 9)
			BankSzovegSzamLs[i]=0;
		//SF bank
		if(PlayerToPoint(3, i, 2316.6184,-7.2561,26.7422) && PlayerVW[i] == 1555 && !AMT(i, MUNKA_PENZ))
		{
			if(BankSzovegSzamSf[i] == 9)
			{
				format(result, 128, "Pénztáros: Ha szeretne vehet fel nálunk hitelt is!");
				ProxDetector(B_Tavol, BankSFNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(BankSFNPC, result, COLOR_WHITE, B_Normal, 5000);
				Msg(i, "/hitel");
			}
			else if(BankSzovegSzamSf[i] == 6)
			{
				format(result, 128, "Pénztáros: Lehetõsége van új számlát nyitni, kivenni pénzt, berakni vagy jelszót váltani.");
				ProxDetector(B_Tavol, BankSFNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(BankSFNPC, result, COLOR_WHITE, B_Normal, 5000);
				Msg(i, "/bankszámla");
			}
			else if(BankSzovegSzamSf[i] < 1)
			{
				format(result, 128, "Pénztáros: Üdvözlöm a San Fierro-i bankban! Kérem mondja miben segíthetek.");
				ProxDetector(B_Tavol, BankSFNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(BankSFNPC, result, COLOR_WHITE, B_Normal, 5000);
			}
			BankSzovegSzamSf[i]++;
		}
		if(!PlayerToPoint(12, i, 2316.6184,-7.2561,26.7422) && BankSzovegSzamSf[i] > 9)
			BankSzovegSzamSf[i]=0;

		new kocsi = GetPlayerVehicleID(i), vs = IsAVsKocsi(kocsi);
		if(PlayerState[i] == PLAYER_STATE_DRIVER)
		{
			new Float:kmx, Float:kmy, Float:kmz, Float:tavell[MAX_PLAYERS];
			if(engineOn[kocsi] == 1)
			{
					GetPlayerPos(i, kmx, kmy, kmz);
					tavell[i]=GetDistanceBetweenPoints(Kmx[i], Kmy[i], Kmz[i], kmx, kmy, kmz);
					if(tavell[i] < 105)
					{
						//if(KocsiAllapot[kocsi]<0) KocsiAllapot[kocsi]=0.0;
						KmSzamol[kocsi]+=tavell[i];
						if(OnDuty[i] && PlayerInfo[i][pSpecialJogsiKm] > 0.0)
							PlayerInfo[i][pSpecialJogsiKm] -=tavell[i];
						//AkkumlatorAllapot[kocsi]+=1;
						
						new Float:oregseg;
						if(KmSzamol[kocsi] > 10000) oregseg = 0.35;
						else if(KmSzamol[kocsi] > 8000) oregseg = 0.25;	
						else if(KmSzamol[kocsi] > 6000) oregseg = 0.15;
						new Float:tavol;
						//KocsiAllapot[kocsi]+=tavol+tavol*oregseg;
						tavol=tavell[i]/3500;
						CarPart[kocsi][cMotorolaj]+=tavol+tavol*oregseg;
						
						CarPart[kocsi][cKerekek]+=tavell[i]/4000;
						CarPart[kocsi][cMotor] += 0.001;
						
						//SendFormatMessage(i, COLOR_LIGHTRED, " Állapot %.3f",KocsiAllapot[kocsi]);
					}
					//else 	SendFormatMessage(i, COLOR_LIGHTRED, " Túl nagy távot tettél meg, ezért nem lett hozzáadva: %.3f  m",tavell[i]);
					GetPlayerPos(i, Kmx[i], Kmy[i], Kmz[i]);
					if(vs != NINCS) CarUpdate(vs, CAR_KM);
			}
			else if(!IsABicikli(kocsi))
			{
				GetPlayerPos(i, kmx, kmy, kmz);
				tavell[i]=GetDistanceBetweenPoints(Kmx[i], Kmy[i], Kmz[i], kmx, kmy, kmz);
				if(tavell[i] < 105)
				{
					//cleo
					KmCleo[kocsi] +=tavell[i];
					if(KmCleo[kocsi] > 1000)
					{
						format(string, sizeof(string), "[CLEO GYANÚ] Motor indítás nélkül megtett út: %.3f Km, rendszám: %d, Név: %s",KmCleo[kocsi]/1000,kocsi,PlayerName(i));
						Log("Scripter",string);
						SendMessage(SEND_MESSAGE_ADMIN,string,COLOR_LIGHTRED,1);
						KmCleo[kocsi] = 0.0;
			
					}
				}
				GetPlayerPos(i, Kmx[i], Kmy[i], Kmz[i]);
			}
			if(CarPart[kocsi][cMotor] >= 500.0)
			{
				CarPart[kocsi][cMotor] = 500.0;
				engineOn[kocsi] = 0;
				SetJarmu(kocsi, KOCSI_MOTOR, 0);
			}
			if(IsABicikli(kocsi))
			{
				CarPart[kocsi][cMotorolaj] = 0.0;
				CarPart[kocsi][cMotor] = 0.0;
			}
			if(CarPart[kocsi][cMotorolaj] >= 100.0)
			{
				engineOn[kocsi] = 0;
				SetJarmu(kocsi, KOCSI_MOTOR, 0);
			}		
			if(IsABoat(kocsi) || IsABicikli(kocsi) || IsARepulo(kocsi))
			{
				CarPart[kocsi][cKerekek] = 0.0;
			}
			if(CarPart[kocsi][cKerekek] <= 0.0)
			{
				CarPart[kocsi][cKerekek] = 0.0;
			}
			else if(CarPart[kocsi][cKerekek] >= 100.0)
			{
				CarPart[kocsi][cKerekek] = 100.0;
				new panels, doors, lights, tires;
				GetVehicleDamageStatus(kocsi, panels, doors, lights, tires);
				UpdateVehicleDamageStatus(kocsi, panels, doors, lights, 15);
			}
		}

		//kamion pótkocsi nézése kamion fuvar közben
		if(Szallit[i] ==1)
		{
			new veh= 0;
			veh= GetPlayerVehicleID(i);
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetVehicleTrailer(veh) == 0)
			//if(GetPlayerState(i) != PLAYER_STATE_DRIVER || GetVehicleTrailer(veh) == 0)
			{
				PotkocsiSzamlalo[i]++;
				if(PotkocsiSzamlalo[i] ==1 ) PlayerInfo[i][pPayCheck] -=5000, Msg(i, "Elhagytad a pótkocsit, ezért 5.000 Ft-ot levont a cég károkozás miatt."); 
				if(PotkocsiSzamlalo[i]==1 || PotkocsiSzamlalo[i]==20 || PotkocsiSzamlalo[i]==40 || PotkocsiSzamlalo[i]==58)
					Msg(i,"Ha nem veszed fel 1 percen belül a pótkocsit, törlõdik a szállítás és ki kell fizetned az egész szállítást!");
				format(string, sizeof(string), "~w~Elhagyva~n~~r~%d sec",PotkocsiSzamlalo[i]);
				GameTextForPlayer(i, string, 5000, 1);
				if(PotkocsiSzamlalo[i]==60)
				{
					Szallit[i]=0;
					PlayerInfo[i][pPayCheck] -=KamionStartPoz[i][KamFizetes];
					format(string, sizeof(string), "1 percen át nem vetted fel a pótkocsit, ezért a szállításodat törölték és %d Ft büntetést kaptál.",KamionStartPoz[i][KamFizetes]);
					SendClientMessage(i, COLOR_YELLOW, string);
				}
			}
			else if(GetPlayerState(i) == PLAYER_STATE_DRIVER  && GetVehicleTrailer(veh) != 0)
			{
				PotkocsiSzamlalo[i]=0;
			}
		}
		if(CellTime[i] == 0 && CallCost[i] > 0)
		{
			BizPenz(BIZ_TELEFON, CallCost[i]);
			if (TelefonTipus[i] == 1)
			{
				GetMoney(i) =GetMoney(i) -CallCost[i];
			}
			else
			{
				PlayerInfo[i][pTeloEgyenleg] = PlayerInfo[i][pTeloEgyenleg] - CallCost[i];
				new ujegyenleg = PlayerInfo[i][pTeloEgyenleg];
				new regiegyenleg = PlayerInfo[i][pTeloEgyenleg] + CallCost[i];
				format(string, sizeof(string), "Hívás Díja: %dFt, Régi Egyenleged: %dFt Új Egyenleged: %dFt",CallCost[i], regiegyenleg, ujegyenleg);
				SendClientMessage(i, COLOR_YELLOW, string);
			}
			format(string, sizeof(string), "~w~Hivas dija~n~~r~%dFT",CallCost[i]);
			GameTextForPlayer(i, string, 5000, 1);
			CallCost[i] = 0;
		}
		//taxi
		if(Taxi[i][tUtas] != NINCS)
		{
			new utas = Taxi[i][tUtas];
			
			if(utas != NINCS)
			{
				new vehicleid = Taxi[i][tJarmu];
				if(vehicleid != NINCS)
				{
					new Float:megtetut =  KmSzamol[vehicleid]-Taxi[i][tKm];
					new fizet = floatround( (float(FrakcioInfo[FRAKCIO_TAXI][fDij]) * megtetut)/1000);
			
					if(!BankkartyaFizet(utas,fizet,false))		
						Msg(i, "Az utas nem fog tudni fizetni!");
				}
			}
			
		}
	}
	if(!Aukcio[aElinditva] && Aukcio[aVarakozas] > 0)
	{
		Aukcio[aVarakozas]--;
		if(Aukcio[aVarakozas] == 0)
		{
			new uzenet[128];
			Aukcio[aElinditva] = true;
			switch(Aukcio[aTipus])
			{
				case ARVERES_TIPUS_HAZ: format(uzenet, 128, "Aukciós ház: Árverés indult egy házra. Elhelyezkedés: %s Cím: %d, kikiáltási ár: %sFt", Haztipus(HouseInfo[Aukcio[aID]][hTipus]), Aukcio[aID], FormatNumber( Aukcio[aKezdoLicit], 0, ',' ));
				case ARVERES_TIPUS_KOCSI: format(uzenet, 128, "Aukciós ház: Árverés indult egy kocsira. Model: %s, kikiáltási ár: %sFt", GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true), FormatNumber( Aukcio[aKezdoLicit], 0, ',' ));
			}
			foreach(Jatekosok, x)
			{
				if(Szint(x) >= 1)
					SendClientMessage(x, COLOR_ORANGE, uzenet);
			}
			NPCArveresUpdate();
		}
		else if(Aukcio[aVarakozas] % 60 == 0)
		{
			new uzenet[128];
			switch(Aukcio[aTipus])
			{
				case ARVERES_TIPUS_HAZ: format(uzenet, 128, "Aukciós ház: Árverés indul %dperc mulva egy házra. Elhelyezkedés: %s, Cím: %d, kikiáltási ár: %sFt", (Aukcio[aVarakozas] / 60), Haztipus(HouseInfo[Aukcio[aID]][hTipus]), Aukcio[aID],FormatNumber( Aukcio[aKezdoLicit], 0, ',' ));
				case ARVERES_TIPUS_KOCSI: format(uzenet, 128, "Aukciós ház: Árverés indul %dperc mulva egy kocsira. Model: %s, kikiáltási ár: %sFt", (Aukcio[aVarakozas] / 60), GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true), FormatNumber( Aukcio[aKezdoLicit], 0, ',' ));
			}
			foreach(Jatekosok, x)
			{
				if(Szint(x) >= 1)
					SendClientMessage(x, COLOR_ORANGE, uzenet);
			}
			NPCArveresUpdate();
		}
		else if(Aukcio[aVarakozas] % 5 == 0)
			NPCArveresUpdate();
	}

	if(Aukcio[aElinditva])
	{
		Aukcio[aIdo]++;
		new result[128];
		if(Aukcio[aLicitalo] != NINCS && Aukcio[aLicitalo] != INVALID_PLAYER_ID)
		{
			if(Aukcio[aIdo] == 9)
			{
				format(result, 128, "Árverés vezetõ: Senki többet??");
				ProxDetector(B_Tavol, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);

				foreach(Jatekosok, x)
				{
					if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
						SendClientMessage(x, COLOR_LIGHTBLUE, result);
				}
			}
			else if(Aukcio[aIdo] == 12)
			{
				format(result, 128, "Árverés vezetõ: Senki többet másodszor?");
				ProxDetector(B_Tavol, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);

				foreach(Jatekosok, x)
				{
					if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
						SendClientMessage(x, COLOR_LIGHTBLUE, result);
				}
			}
			else if(Aukcio[aIdo] == 15)
			{
				format(result, 128, "Árverés vezetõ: Senki többet harmadszor?");
				ProxDetector(B_Tavol, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
				SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);

				foreach(Jatekosok, x)
				{
					if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
						SendClientMessage(x, COLOR_LIGHTBLUE, result);
				}
			}
			else if(Aukcio[aIdo] == 18)
			{
				new vevo, osszeg;
				vevo = Aukcio[aLicitalo];
				osszeg = Aukcio[aLicit];

				if(PlayerInfo[vevo][pAccount] < Aukcio[aLicit] && GetMoney(vevo) < Aukcio[aLicit])
				{
					vevo = NINCS;
					/*for(new x = 2; x > 0; x--)
					{
						if(Aukcio[aLicitalok][x] == NINCS) continue;
						vevo = x;
						osszeg = Aukcio[aLicitek][x];
						if(PlayerInfo[vevo][pAccount] < Aukcio[aLicitek][x] && GetMoney(vevo) < Aukcio[aLicitek][x])
							vevo = NINCS;
						else
							break;
					}*/
				}

				if(vevo != NINCS)
				{
					if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ)
					{
						HouseInfo[Aukcio[aID]][hOwned] = 1;
						HouseInfo[Aukcio[aID]][hCsak] = 0;
						strmid(HouseInfo[Aukcio[aID]][hOwner], PlayerName(vevo), 0, strlen(PlayerName(vevo)), MAX_PLAYER_NAME);
						HouseInfo[Aukcio[aID]][hTulaj] = PlayerInfo[vevo][pID];
						HouseInfo[Aukcio[aID]][hDate] = UnixTime;
						HazUpdate(Aukcio[aID], HAZ_Owned, HAZ_Csak, HAZ_Owner, HAZ_Date, HAZ_Tulaj);
						
						HazUrites(Aukcio[aID]);

						CorrectPlayerDatas(vevo);
						Msg(vevo, "Aukció: Gratulálunk. Most már tiéd a ház!", false, COLOR_LIGHTBLUE);
						format(result, 128, "Árverés vezetõ: Eladva! %s megvette a házat %sFtért", PlayerName(vevo), FormatNumber( Aukcio[aLicit], 0, ',' ));

						foreach(Jatekosok, x)
						{
							if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
								SendClientMessage(x, COLOR_LIGHTBLUE, result);
						}
					}
					else if(Aukcio[aTipus] == ARVERES_TIPUS_KOCSI)
					{
						if(KereskedoLicitalt[vevo])
						{
							CarInfo[Aukcio[aID]][cOwned] = 0;

							strmid(CarInfo[Aukcio[aID]][cOwner], PlayerName(vevo), 0, strlen(PlayerName(vevo)), MAX_PLAYER_NAME);
			
							CarInfo[Aukcio[aID]][cTulaj] = NINCS;
							CarInfo[Aukcio[aID]][cDate] = UnixTime;
							CarInfo[Aukcio[aID]][cKereskedo] = PlayerInfo[vevo][pID];
							CarUpdate(Aukcio[aID], CAR_Owned, CAR_Owner, CAR_Tulaj, CAR_Date, CAR_KERESKEDO);
							Msg(vevo, "Aukció: Vettél egy jármûvet a kereskedésbe!", false, COLOR_LIGHTBLUE);
							
							KereskedoLicitalt[vevo] = false;
						}
						else
						{
							CarInfo[Aukcio[aID]][cOwned] = 1;
							strmid(CarInfo[Aukcio[aID]][cOwner], PlayerName(vevo), 0, strlen(PlayerName(vevo)), MAX_PLAYER_NAME);
							CarInfo[Aukcio[aID]][cTulaj] = PlayerInfo[vevo][pID];
							CarInfo[Aukcio[aID]][cDate] = UnixTime;
							CarUpdate(Aukcio[aID], CAR_Owned, CAR_Owner, CAR_Tulaj, CAR_Date);
						
						}

						CorrectPlayerDatas(vevo);
						Msg(vevo, "Aukció: Gratulálunk. A jármûved kint áll a parkolóban!", false, COLOR_LIGHTBLUE);
						format(result, 128, "Árverés vezetõ: Eladva! %s megvette a jármûvet %sFtért", PlayerName(vevo), FormatNumber( Aukcio[aLicit], 0, ',' ));

						foreach(Jatekosok, x)
						{
							if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
								SendClientMessage(x, COLOR_LIGHTBLUE, result);
						}
					}
					if(GetMoney(vevo) > osszeg) GiveMoney(vevo, -osszeg);
					else PlayerInfo[vevo][pAccount] -= osszeg;
					Aukcio[aElinditva] = false;
					Aukcio[aVarakozas] = 0;
					Aukcio[aTipus] = 0;

					ProxDetector(B_Tavol, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
					SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);
				}
				else
				{
					format(result, 128, "Árverés vezetõ: Az árverésnek vége. Mivel a licitáló nem tudta kifizetni, ezért az árverés újraindul");

					Aukcio[aElinditva] = false;
					Aukcio[aVarakozas] = 60;
					Aukcio[aIdo] = 0;
					Aukcio[aLicitalo] = NINCS;
					Aukcio[aLicit] = Aukcio[aKezdoLicit];

					ProxDetector(B_Tavol, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
					SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);

					foreach(Jatekosok, x)
					{
						if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
							SendClientMessage(x, COLOR_LIGHTBLUE, result);
					}
				}
				foreach(Jatekosok, x)
				{
					Licitalt[x] = false;
					Aukciozik[x] = false;
					KereskedoLicitalt[x] = false;
				}
				NPCArveresUpdate();
			}
		}
		else if(Aukcio[aIdo] == 60 && Aukcio[aLicitalo] == NINCS)
		{
			if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ)
			{
				DestroyDynamicPickup(HazPickup[Aukcio[aID]]);

				HouseInfo[Aukcio[aID]][Van] = 0;
				format(result, 128, "DELETE FROM %s WHERE ID='%d'", SQL_DB_Hazak, Aukcio[aID]); doQuery( result );

				new garazs = sizeof(GarazsInfo);
				for(new h = 0; h < garazs; h++)
				{
					if(GarazsInfo[h][hHaz]==Aukcio[aID])
					{
						DestroyDynamicPickup(GarazsPickup[h]);
						format(result, 128, "DELETE FROM %s WHERE ID='%d'", SQL_DB_Garazs, Aukcio[aID]); doQuery( result );
					}
				}

				format(result, 128, "Árverés vezetõ: Az árverésnek vége. Nem licitált senki, ezért a ház törlõdött");
			}
			else if(Aukcio[aTipus] == ARVERES_TIPUS_KOCSI)
			{
				if(IsVehicleConnected(CarInfo[Aukcio[aID]][cId])) DestroyVehicle(CarInfo[Aukcio[aID]][cId]);

				CarInfo[Aukcio[aID]][Van] = 0;
				format(result, 128, "DELETE FROM %s WHERE ID='%d'", SQL_DB_Kocsik, Aukcio[aID]); doQuery( result );

				format(result, 128, "Árverés vezetõ: Az árverésnek vége. Nem licitált senki, ezért a jármû törlõdött");
			}
			ProxDetector(B_Normal, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
			SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);

			foreach(Jatekosok, x)
			{
				if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
					SendClientMessage(x, COLOR_LIGHTBLUE, result);
			}

			Aukcio[aElinditva] = false;
			Aukcio[aVarakozas] = 0;
			Aukcio[aTipus] = 0;

			foreach(Jatekosok, x)
			{
				Licitalt[x] = false;
				Aukciozik[x] = false;
			}

			NPCArveresUpdate();
		}
		else if(Aukcio[aIdo] == 60 && Aukcio[aLicitalo] == INVALID_PLAYER_ID)
		{
			format(result, 128, "Árverés vezetõ: Az árverésnek vége. Mivel a licitáló kilépett (neve: %s), ezért az árverés újraindul", Aukcio[aLicitaloVolt]);

			Aukcio[aElinditva] = false;
			Aukcio[aVarakozas] = 60;
			Aukcio[aIdo] = 0;
			Aukcio[aLicitalo] = NINCS;
			Aukcio[aLicit] = Aukcio[aKezdoLicit];

			ProxDetector(B_Tavol, ArveresNPC, result, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE, COLOR_LIGHTBLUE);
			SetPlayerChatBubble(ArveresNPC, result, COLOR_WHITE, B_Normal, 5000);

			foreach(Jatekosok, x)
			{
				if(Aukciozik[x] && !PlayerToPoint(10.0, x, 319.203, 130.035, 1007.965))
					SendClientMessage(x, COLOR_LIGHTBLUE, result);
			}
		}
	}

	SzerverNev();

	return 1;
}

fpublic SetPlayerUnjail()
{
	//new plname[MAX_PLAYER_NAME];
	new string[256];
	if(KartingPlayers >= 2 && KartingRound != 1 && StartingKartRound != 1)
	{
	    StartingKartRound = 1;
	    SetTimer("PrepareKarting", 15000, 0);
	}
	if(KartingRound != 0 && KartingPlayers < 2)
	{
	    StartingKartRound = 0;
	    KartingRound = 0;
	    EndingKartRound = 1;
	}
	foreach(Jatekosok, i)
	{
		if(PlayerInfo[i][pJailed] > 0 && PlayerInfo[i][pJailed] != 6 && PlayerInfo[i][pJailed] != 8)
		{
			if(PlayerInfo[i][pJailTime] > 0 && PlayerInfo[i][pJailed] != 3 && PlayerInfo[i][pKozmunka] == 0)
				if(!Szunet[i])
					if(szallit[i] == NINCS)
						PlayerInfo[i][pJailTime]--;

			if(PlayerInfo[i][pJailTime] <= 0)
			{
				PlayerInfo[i][pJailTime] = 0;
				
				if(PlayerInfo[i][pJailed] == 10)
				{
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0, "unjail10");
					SetPlayerPos(i, 1480.073, -1737.732, 13.546);
				}
				else if(PlayerInfo[i][pJailed] == 11)
				{
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0, "unjail11");
					SetPlayerPos(i, 1480.073, -1737.732, 13.546);
				}
				else if(PlayerInfo[i][pJailed] == 12)
				{
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0, "unjail12");
					SetPlayerPos(i, 1480.073, -1737.732, 13.546);
				}
				else if(PlayerInfo[i][pJailed] == 13)
				{
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0, "unjail13");
					SetPlayerPos(i, 1480.073, -1737.732, 13.546);
				}
				else if(PlayerInfo[i][pJailed] == 14)
				{
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0, "unjail14");
					RemovePlayerAttachedObject(i, ATTACH_SLOT_SISAK);
					SetPlayerPos(i, 135.335, 1955.365, 19.430);
				}
				else if(PlayerInfo[i][pJailed] == 1)
				{
					SetPlayerInterior(i, 0);
					//PlayerInfo[i][pTeleportAlatt] = 1;
					//PlayerInfo[i][pCFalsePositive] = 1;
					SetPlayerPos(i,1549.1030,-1675.6740,14.8176);
					SetPlayerFacingAngle(i, 90.6791);
				}
				else if(PlayerInfo[i][pJailed] == 2)
				{
					//PlayerInfo[i][pTeleportAlatt] = 1;
					//PlayerInfo[i][pCFalsePositive] = 1;
					SetPlayerPos(i, -2424.332, 497.108, 30.070);
					SetPlayerVirtualWorld(i, 0, "unjail2");
					SetPlayerInterior(i, 0);
					PlayerInfo[i][pJegy] = 1;
					Freeze(i, 2000);
				}
				else if(PlayerInfo[i][pJailed] == 3)
				{
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0, "unjail3");
					//PlayerInfo[i][pTeleportAlatt] = 1;
					//PlayerInfo[i][pCFalsePositive] = 1;
					SetPlayerPos(i, 1480.612548, -1743.773803, 13.546875);
				}
				else if(PlayerInfo[i][pJailed] == 4)
				{
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0, "unjail4");
					//PlayerInfo[i][pTeleportAlatt] = 1;
					//PlayerInfo[i][pCFalsePositive] = 1;
					SetPlayerPos(i, 645.771, -1357.328, 13.570);
				}
				else if(PlayerInfo[i][pJailed] == 5)
				{
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0, "unjail5");
					//PlayerInfo[i][pTeleportAlatt] = 1;
					//PlayerInfo[i][pCFalsePositive] = 1;
					SetPlayerPos(i, 1518.8503417969, -1452.8260498047, 13.865097999573 );
				}
				else if(PlayerInfo[i][pJailed] == 7)
				{
					SetPlayerInterior(i, 0);
					SetPlayerVirtualWorld(i, 0, "unjail7");
					SetPlayerWorldBounds(i,20000.0000,-20000.0000,20000.0000,-20000.0000);
					//PlayerInfo[i][pTeleportAlatt] = 1;
					//PlayerInfo[i][pCFalsePositive] = 1;
					SetPlayerPos(i, 2029.5023,-1404.1078,17.2503 );
					SendClientMessage(i, COLOR_YELLOW,"A rendõrség vissza szállított Los Santosba!");
				}
				//printf("%s leülte a jailt: %d", PlayerName(i), PlayerInfo[i][pJailed]);
				if(PlayerInfo[i][pJailed] == 14)
				{
					for(new x = 0; x < sizeof(CellaInfo); x++)
					{
						if(CellaInfo[x][cId] == i)
							CellaInfo[x][cVan] = false;
					}
				}
				PlayerInfo[i][pJailed] = 0;
				JailTime[i] = 0;
				SendClientMessage(i, COLOR_GRAD1,"Letöltötted a büntetésed!");
				format(string, sizeof(string), "~g~Szabad vagy~n~~w~Légy jó polgár!");
				//SetPlayerPos(i, -1605.507446, 711.250549, 13.365664);
				GameTextForPlayer(i, string, 5000, 1);
				ClearPlayerCrime(i);
				InvisibleColor(i);
			}
		}
		if(PlayerInfo[i][pKozmunka] != 0 && PlayerInfo[i][pJailTime] <= 0)
		{
			new car = GetPlayerVehicleID(i);
			PlayerInfo[i][pKozmunkaIdo] = 0;
			PlayerInfo[i][pKozmunka] = 0;
			PlayerInfo[i][pJailTime] = 0;
			JailTime[i] = 0;
			engineOn[car] = 0;
			Gyujtas[car] = false;
			SetJarmu(car, KOCSI_MOTOR, false);
			RemovePlayerFromVehicle(i);
			if(IsValidDynamic3DTextLabel(KozmunkasFelirat[i]))
				DestroyDynamic3DTextLabel(KozmunkasFelirat[i]), KozmunkasFelirat[i] = INVALID_3D_TEXT_ID;
			ClearPlayerCrime(i);
			SendClientMessage(i, COLOR_GRAD1, "Már nem kell folytatnod a közmunkát, szabad vagy!");			
		}
		if(UsedFind[i] >= 1)
		{
			UsedFind[i] += 1;
			if(UsedFind[i] >= 120)
			{
				UsedFind[i] = 0;
			}
		}
		if(KorhazIdo[i] > NINCS)
		{
			KorhazIdo[i]--;
			PlayerInfo[i][pOlesIdo] --;
			if(KorhazIdo[i] <= 0)
			{
				

				if(PlayerInfo[i][pJailed] == 0)
				{
					SetPlayerVirtualWorld(i, 104, "unjail5");
					SetPlayerInterior(i,0);
					//PlayerInfo[i][pTeleportAlatt] = 1;
					//PlayerInfo[i][pCFalsePositive] = 1;
					SetPlayerPos(i, 1944.6885,-2458.5464,13.5703);
					Streamer_UpdateEx(i, 1944.6885,-2458.5464,13.5703);
					Msg(i,"Felépültél, most már elmehetsz");
					Cselekves(i, "felébredt");
					UnFreeze(i);
					Feketeseg(i, false);
					PlayerInfo[i][pOlesIdo]=0;
					KorhazIdo[i] = NINCS;
				}
			}
		}
		if(PlayerStoned[i] >= 2)
		{
			PlayerStoned[i] += 1;
			if(PlayerStoned[i] == 10)
			{
				PlayerStoned[i] = 2;
				new Float:angle;
				GetPlayerFacingAngle(i, angle);
				if(IsPlayerInAnyVehicle(i))
				{
					if(GetPlayerState(i) == 2)
					{
						SetVehicleZAngle(GetPlayerVehicleID(i), angle + 25);
					}
				}
				else
				{
					SetPlayerFacingAngle(i, angle + 90);
				}
			}
		}
		if(PlayerInfo[i][pCarTime] > 0)
		{
		    if(PlayerInfo[i][pCarTime] <= 0)
		    {
		        PlayerInfo[i][pCarTime] = 0;
		    }
		    else
		    {
		        PlayerInfo[i][pCarTime] -= 1;
		    }
		}
		if(StartingKartRound == 1 && AnnouncedKartRound == 0)
		{
		    AnnouncedKartRound = 1;
		    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		    {
		        SendClientMessage(i, COLOR_YELLOW, "Karting Race will be announced in 15 seconds (For getting more Kart Racers).");
		    }
		}
		if(EndingKartRound == 1)
		{
		    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		    {
		        DisablePlayerCheckpoint(i);
		        CP[i] = 0;
		    }
		}
		if(FindTime[i] > 0)
		{
		    if(FindTime[i] == FindTimePoints[i]) { FindTime[i] = 0; FindTimePoints[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Jelzes vege", 2500, 1); }
		    else
			{
			    format(string, sizeof(string), "%d", FindTimePoints[i] - FindTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				FindTime[i] += 1;
			}
		}
		if(TaxiCallTime[i] > 0)
		{
		    if(TaxiAccepted[i] < 999)
		    {
			    if(IsPlayerConnected(TaxiAccepted[i]))
			    {
			        new Float:X,Float:Y,Float:Z;
					GetPlayerPos(TaxiAccepted[i], X, Y, Z);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
			    }
			}
		}
		if(BusCallTime[i] > 0)
		{
		    if(BusAccepted[i] < 999)
		    {
			    if(IsPlayerConnected(BusAccepted[i]))
			    {
			        new Float:X,Float:Y,Float:Z;
					GetPlayerPos(BusAccepted[i], X, Y, Z);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
			    }
			}
		}
		if(MedicCallTime[i] > 0)
		{
		    if(MedicCallTime[i] == 60) { MedicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Jelzes vege", 2500, 1); }
		    else
			{
			    format(string, sizeof(string), "%d", 60 - MedicCallTime[i]);
				GameTextForPlayer(i, string, 30000, 6);
				MedicCallTime[i] += 1;
			}
		}
		if(MechanicCallTime[i] > 0)
		{
		    if(MechanicCallTime[i] == 30) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Jelzes vege", 2500, 1); }
		    else
			{
			    format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				MechanicCallTime[i] += 1;
			}
		}
		if(Robbed[i] == 1)
		{
		    if(RobbedTime[i] <= 0)
		    {
		        RobbedTime[i] = 0;
				Robbed[i] = 0;
		    }
		    else
		    {
		        RobbedTime[i] -= 1;
		    }
		}
		if(PlayerCuffed[i] == 1)
		{
		    if(PlayerCuffedTime[i] <= 0)
				Bilincs(i, 0);
		    else
		        PlayerCuffedTime[i] -= 1;
		}
		else if(PlayerToPoint(20, i,1133.0699,-9.5731,1000.6797))
		{//West Casino place
		    GameTextForPlayer(i, "~r~Closed", 5000, 1);
		    SetPlayerInterior(i, 0);
		    //PlayerInfo[i][pTeleportAlatt] = 1;
			//PlayerInfo[i][pCFalsePositive] = 1;
			SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
		}
	}
}


fpublic CheckGas()
{
	//print("chechkgas 1");
	//print("CheckGas");
	new sofor;
	
	for(new v = 1; v < MAX_VEHICLES; v++)
	{
		if(!IsVehicleConnected(v) || IsABicikli(v)) continue;
	
		sofor = NINCS;
		for(new p = 0; p < MAX_VEHICLES; p++)
		{
			if(!IsPlayerConnected(p) || !Logged(p) || IsPlayerNPC(p) || GetPlayerState(p) != 2) continue;
			if(IsPlayerInVehicle(p, v))
			{
				sofor = p;
				break;
			}
		}
		if(KocsiLeadas[v] > 0)
		{
			KocsiLeadas[v]--;
		}
		
		if(engineOn[v])
		{
			if(CarPart[v][cAkkumulator] >= 0.1)
				CarPart[v][cAkkumulator] += 2.0;
			else
				AkkuKifogy(sofor, v);
			
			if(CarPart[v][cMotorolaj] >= 100.0)
			{
				engineOn[v] = 0;
				SetJarmu(v, KOCSI_LAMPA, 0);
				TrailerHatsoLampa(v, false);
				KocsiRadio[v] =0;
				Gyujtas[v] = false;
				SetJarmu(v, KOCSI_MOTOR, false);
				KocsiObjectTorol(v);

				if(VehicleInfo[v][JobbIndex] == 1 || VehicleInfo[v][BalIndex] == 1 || VehicleInfo[v][Kozos] == 1)
					SetVehicleIndex(sofor, v, false, false, false);

				if(Neon[v] == 1)
					Neon[v] = 0;
				if(Sokkol[sofor])
					Sokkol[sofor] = false;
				
				if(sofor != NINCS)
				{
					Msg(sofor, "A motorolaj teljesen elhasználódott, minden kikapcsolt!");
					StopAudioStreamForPlayer(sofor);
				}
			}
		}

		if(KocsiRadio[v] > 0 && !NPCKocsi[v])
		{
			if(CarPart[v][cAkkumulator] > 1.0)
				CarPart[v][cAkkumulator] -= 1.0;
			else
				AkkuKifogy(sofor, v);
		}
		if(Neon[v] == 1)
		{
			if(CarPart[v][cAkkumulator] > 2.0)
				CarPart[v][cAkkumulator] -= 2.0;
			else
				AkkuKifogy(sofor, v);
		}
	    if(VehicleInfo[v][JobbIndex] == 1 || VehicleInfo[v][BalIndex] == 1 || VehicleInfo[v][Kozos] == 1 && !NPCKocsi[v])
		{
			if(CarPart[v][cAkkumulator] > 1.5)
				CarPart[v][cAkkumulator] -= 1.5;
			else
				AkkuKifogy(sofor, v);	
		}
		if(GetJarmu(v, KOCSI_LAMPA) == 1 && !NPCKocsi[v])
		{
			if(CarPart[v][cAkkumulator] > 0.5)
				CarPart[v][cAkkumulator] -= 0.5;
			else
				AkkuKifogy(sofor, v);
		}
		if(engineOn[v])
		{
			if(RosszGas[v] > 0)
			{
				RosszGas[v] --;
				if(RosszGas[v] == 1)
				{
					if(sofor != NINCS)
					{
						Msg(sofor, "Rossz üzemanyagot tankoltál, a jármûvedbe, ezért a motor meghibásodott!");
						SetJarmu(v, KOCSI_MOTOR, 0);
						engineOn[v] = 0;
						RosszGas[v] = 0;
						CarPart[v][cMotor] = 500.0;
					}
				}
			}	
		}	
		if(engineOn[v])
		{
			if(Gas[v] > MaxBenzin(v))
				Gas[v] = MaxBenzin(v);
		
			else if(Gas[v] >= 1)
			{
				if(sofor != NINCS)
				{
					if(IsKocsi(v, "uttisztito") || IsKocsi(v, "Kamion") || IsKocsi(v, "Farmer")  || IsKocsi(v, "Funyiro") || IsKocsi(v,"Kukas") || IsKocsi(v, "Szerelo") || IsKocsi(v, "Favago") || IsKocsi(v, "Hulla") || IsKocsi(v, "prod") || IsKocsi(v, "Taxi"))
					{
						
						if(PlayerInfo[sofor][pElhasznaltUzemanyag][1] > PlayerInfo[sofor][pElhasznaltUzemanyag][0] && PlayerInfo[sofor][pElhasznaltUzemanyag][2] == v)
						{
							PlayerInfo[sofor][pElhasznaltUzemanyag][1] --;
						}
						else
							PlayerInfo[sofor][pElhasznaltUzemanyag][0] ++;
					}
				}	
				Gas[v]--;	
			}	
			else
			{
				engineOn[v] = 0;
				if(sofor != NINCS)
				{
					Msg(sofor, "A jármûbõl kifogyott az üzemanyag. A motor leállt");
					SetJarmu(v, KOCSI_MOTOR, 0);
				}
			}
		}
		if(sofor != NINCS)
		{
			if(Gas[v] >= 1)
			{
				if(Gas[v] <= 10)
				{
					PlayerPlaySound(sofor, 1085, 0.0, 0.0, 0.0);
					GameTextForPlayer(sofor, "~r~~n~~n~~n~~n~~n~~n~~n~~n~~n~Fogy az ¬zemanyag", 5000, 3);
				}
			}
		}
		if(CarPart[v][cAkkumulator] >= 100.0)
			CarPart[v][cAkkumulator] = 100.0;
		
		if(CarPart[v][cFek] >= 100.0)
			CarPart[v][cFek] = 100.0;
			
		if(CarPart[v][cElektronika] >= 100.0)
			CarPart[v][cElektronika] = 100.0;
		
		if(CarPart[v][cMotor] >= 500.0)
			CarPart[v][cMotor] = 500.0;
			
		if(CarPart[v][cKerekek] >= 100.0)
			CarPart[v][cKerekek] = 100.0;
		
		if(CarPart[v][cMotorolaj] >= 100.0)
			CarPart[v][cMotorolaj] = 100.0;
			
		if(RepulesEngedely[v] <= UnixTime)
			RepulesEngedely[v] = 0;
			
		if(IsAPancelozottKocsi(v))
		{
			new Float:hp;
			GetVehicleHealth(v, hp);
			if(hp < VEHICLE_ARMORED_HEALTH)
			{
				SetVehicleHealth(v, VEHICLE_ARMORED_HEALTH);
			}
		}
	}
	//print("chechkgas 2");
	return 1;
}

fpublic EletTimer()
{
	//new k;
	new Float:UjElet;
	//new Float:UjKocsiElet;
	new Float:Kulonbseg;
	//new Float:Elet;
	//Ez így nem okés animba esik ha beszáll sérült kocsiba
	/*foreach(Jatekosok, p)
	{
	
		for(k = 1; k < MAX_VEHICLES; k++)
		{
			if(IsVehicleConnected(k))
			{
				if(IsPlayerInVehicle(p, k))
				{
			
					GetVehicleHealth(k, UjKocsiElet);
					Kulonbseg = KocsiElete[k] - UjKocsiElet;
					KocsiElete[k] = UjKocsiElet;

					if(KocsiSokkolva[k] > 0)
						KocsiSokkolva[k]--;
					
					
					if(UjKocsiElet < 1000.0 && Kulonbseg > (UtkozesErzekenyseg * 2.8)) //0.8
					{
						
						new
							Float:vX,
							Float:vY,
							Float:vZ;
							
						GetPlayerVelocity(p ,vX, vY, vZ);
						if(vZ == 0)
						{
							GetPlayerHealth(p, UjElet);
							if(GetPlayerState(p) == 2)
								Elet = UjElet - (Kulonbseg / UtkozesErzekenyseg);
							else if(GetPlayerState(p) == 3)
								Elet = UjElet - (Kulonbseg / (UtkozesErzekenyseg + 3));
							if(Elet < 1.0)
							{
								Elet = 1.0;
								AnimbaRak(p);
							}
							SetHealth(p, Elet);
						}
					}
					
					
				}
			}
		}
	}*/
	for(new l = 0;l < MaxLoter;l++)
	{
		if(LoterInfo[l][lHasznalva] == true && LoterInfo[l][lIdo] < UnixTime)
		{
			if(LoterInfo[l][lHasznalo] != NINCS)
			{
				if(IsPlayerConnected(LoterInfo[l][lHasznalo]))
				{	
					if(LoterInfo[l][lHasznalo] != INVALID_PLAYER_ID)
					{
						LoterVege(LoterInfo[l][lHasznalo], l,LoterInfo[l][lFegyver]);
					}
				}
			}
		}	
	}
	foreach(Jatekosok, p)
	{

	
			
		if(NoDamage[p] > 0)
			NoDamage[p]--;
			
		if(SpawnVedelem[p] > 1)
			SpawnVedelem[p]--;
		if(SpawnVedelem[p] == 1)
		{
			SpawnVedelem[p] = 0;
			Msg(p, "Info: Spawn védelem vége", false, COLOR_GREY);
			gLohet[p] = true;
			/*if(Kikepzoben[p])
			{	
				FegyverRespawn(p);
			}*/	
			if(!UserDataBeallit[p])
			{
				if(AnimbanRelog[p] && PlayerInfo[p][pJailed] == 0)
					AnimbaRak(p),Msg(p, "Animba léptél ki ezért animba vagy.");
				Ini_Unixtime_Beallit(p);
				UserDataBeallit[p] = true;
			}
		}
	    if(GetPlayerState(p) == 7 || SpawnVedelem[p] > 0 || Paintballozik[p])
	    {
	        //Animbanemrakhato[p] = 1;
	        continue;
		}

	    //ÉLET CHECKER
	    GetPlayerHealth(p, UjElet);
    	Kulonbseg = JatekosElete[p] - UjElet;
		JatekosElete[p] = UjElet;

	    //if(Kulonbseg > 20.0)
	    if((Kulonbseg >= 35.0) && (SpawnVedelem[p] < 1))
	    {
			if(Animbanemrakhato[p] == 1)
			    Animbanemrakhato[p] = 0;
//			else
//				AnimbaRak(p);
		}
		
		if(PlayerInfo[p][pJarmubenUlt] > 0)
			PlayerInfo[p][pJarmubenUlt] --;
	}
	for(new v = 1; v < MAX_VEHICLES; v++) // Nem csökkent a kocsi sokkolási ideje
	{
		if(KocsiSokkolva[v] > 0)
			KocsiSokkolva[v] --;
	}
}
fpublic FszallitasTimer(playerid)
{
	UnFreeze(playerid);
	Msg(playerid, "Kipakoltad a fegyvereket!");
	
	
	
	WeaponGiveWeapon(playerid, WEAPON_DEAGLE, 200);
	WeaponGiveWeapon(playerid, WEAPON_MP5, 300);
	WeaponGiveWeapon(playerid, WEAPON_M4, 500);
	SetPlayerArmour(playerid, 100);
}
fpublic MunkaTimer()
{
	foreach(Jatekosok, playerid)
	{
		//if(!Munkaban[playerid] == NINCS) continue;

		if((AMT(playerid, MUNKA_UTTISZTITO) || PlayerInfo[playerid][pKozmunka] == MUNKA_UTTISZTITO) && Munkaban[playerid] == MUNKA_UTTISZTITO)
		{
			if(IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "Uttisztito"))
			{
				new Float:x, Float:y, Float:z, csekkpont;
				csekkpont = MunkaCheckpoint[playerid];

				x = UttisztitoCheckpointok[csekkpont][0];
				y = UttisztitoCheckpointok[csekkpont][1];
				z = UttisztitoCheckpointok[csekkpont][2];

				SetPlayerCheckpoint(playerid, x, y, z, 5);
			}
			else continue;
		}
		if(AMT(playerid, MUNKA_VADASZ) && Munkaban[playerid] == MUNKA_VADASZ)
		{
			new Float:playerpos[3];
			GetPlayerPos(playerid, ArrExt(playerpos));
			for(new a = 0; a < sizeof(DeerInfo); a++)
			{
				if(!DeerInfo[a][dCreated]) continue;
				if(DeerInfo[a][dKilled]) continue;
				
				if(GetDistanceBetweenPoints(ArrExt(playerpos), ArrExt(DeerInfo[a][dPos])) < 35.0)
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Túlságosan közel kerültél egy õzhöz, ezért az elszaladt!");
					RemoveDeer(a);
					continue;
				}
				
				if(GetDistanceBetweenPoints(ArrExt(playerpos), ArrExt(DeerInfo[a][dPos])) < 50.0 && SzoltNeki[playerid] == 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Vigyázz, közeledben egy õz található, ha meghallja a lépteidet, elszaladhat!");
					SzoltNeki[playerid] = 10;
					break;
				}
			}
		}
		if(SzoltNeki[playerid] > 0)
			SzoltNeki[playerid] -= 2;
	}
}

fpublic EgyebTimer()
{
	new string[128];
	
	
	for(new k = 0; k < sizeof(PaintballInfo); k++)
	{
		if(PaintballInfo[k][pbNevezesIdo] != NINCS) PaintballInfo[k][pbNevezesIdo]--;
		
		if(PaintballInfo[k][pbMerkozesIdo] < UnixTime && PaintballInfo[k][pbHasznalva])
			PaintballVege(k);
		if(PaintballInfo[k][pbNevezesIdo] > NINCS)
		{
			if(PaintballInfo[k][pbNevezesek] == 0)
			{
				PaintballFrissites(k);
				PaintballInfo[k][pbNevezesIdo] = NINCS;
				foreach(Jatekosok, p) 
				{
					if(PBTerem[p] == k) PBTerem[p] = 0;
					if(gPB[p] == 0) continue;
					SendClientMessage(p,COLOR_DYELLOW,"=====[ Paintball ]=====");
					SendClientMessage(p,COLOR_WHITE,"A paintball mérkõzés elmarad emberhiány miatt!");
				}
			}
			else if(PaintballInfo[k][pbNevezesek] > 0 && PaintballInfo[k][pbNevezesIdo] == 60 || PaintballInfo[k][pbNevezesIdo] == 120 || PaintballInfo[k][pbNevezesIdo] == 180 || PaintballInfo[k][pbNevezesIdo] == 240 || PaintballInfo[k][pbNevezesIdo] == 300)
			{	
				foreach(Jatekosok, p)
				{
					if(gPB[p] == 0) continue;
					SendClientMessage(p,COLOR_DYELLOW,"=====[ Paintball ]=====");
					SendClientMessage(p,COLOR_WHITE,"Hamarosan paintball mérkõzés indul, részletek a terem bejárata elõtt!");
					SendFormatMessage(p,COLOR_WHITE,"Terem ID: %d | Nevezési díj: %s Ft | Játékidõ: %d perc | Nevezettek száma: %d db | Nevezni lehet még: %d másodpercig", k, FormatInt(BizzInfo[BIZ_PB][bEntranceCost]*PaintballInfo[k][pbMerkozesIdo][1]), PaintballInfo[k][pbMerkozesIdo][1], PaintballInfo[k][pbNevezesek],PaintballInfo[k][pbNevezesIdo]);
				}
			}
			else if(PaintballInfo[k][pbNevezesek] > 0 && PaintballInfo[k][pbNevezesIdo] == 30 || PaintballInfo[k][pbNevezesIdo] == 10)
			{	
				foreach(Jatekosok, p)
				{
					if(gPB[p] == 0) continue;
					SendClientMessage(p,COLOR_DYELLOW,"=====[ Paintball ]=====");
					SendFormatMessage(p,COLOR_WHITE,"Hamarosan Paintball mérkõzés indul, jelenleg %d ember van benevezve! Nevezni lehet még %d másodpercig, terem id: %d", PaintballInfo[k][pbNevezesek],PaintballInfo[k][pbNevezesIdo], k);
				}
			}
		}
		if(PaintballInfo[k][pbNevezesIdo] == 0)
		{
			if(PaintballInfo[k][pbNevezesek] < 2)
			{
				PaintballFrissites(k);
				PaintballInfo[k][pbNevezesIdo]= NINCS;
				foreach(Jatekosok, p) 
				{ 
					if(PBTerem[p] == k) PBTerem[p] = 0;
					if(gPB[p] == 0) continue;
					SendClientMessage(p,COLOR_DYELLOW,"=====[ Paintball ]=====");
					SendClientMessage(p,COLOR_WHITE,"A Paintball mérkõzés elmarad emberhiány miatt!");
				}
			}
			else
			{
				foreach(Jatekosok, p)
				{
					if(Paintballnevezve[p] && PBTerem[p] == k)
					{
						if(BankkartyaFizet(p, BizzInfo[BIZ_PB][bEntranceCost]*PaintballInfo[k][pbMerkozesIdo][1]))
						{
							BizPenz(BIZ_PB, BizzInfo[BIZ_PB][bEntranceCost]*PaintballInfo[k][pbMerkozesIdo][1]);
							Paintballnevezve[p] = false;
						
							Paintballozik[p] = true;
							PaintballOlesek[p] = 0;
							SetPlayerSpawn(p);
							//ResetWeapon(p);
							WeaponResetAll(p);
							SetPlayerHealth(p, 150);
							SetPlayerArmour(p, 0);
							if(PlayerInfo[p][pPBFegyver][0] != 0)
								WeaponGiveWeapon(p, PlayerInfo[p][pPBFegyver][0], 500);
							if(PlayerInfo[p][pPBFegyver][1] != 0)
								WeaponGiveWeapon(p, PlayerInfo[p][pPBFegyver][1], 500);
							if(PlayerInfo[p][pPBFegyver][2] != 0)
								WeaponGiveWeapon(p, PlayerInfo[p][pPBFegyver][2], 500);
							if(PlayerInfo[p][pPBFegyver][3] != 0)
								WeaponGiveWeapon(p, PlayerInfo[p][pPBFegyver][3], 500);
							SendFormatMessage(p, COLOR_YELLOW, "A paintball mérkõzés 3 másodperc múlva elkezdõdik, a játék ideje: %d perc!", PaintballInfo[k][pbMerkozesIdo][1]);
							Freeze(p, 3000);
							SpawnVedelem[p] = 7;
							PlayerPlaySound(p, 1057, 0.0, 0.0, 0.0);
							PaintballInfo[k][pbMerkozesIdo][0] = UnixTime+PaintballInfo[k][pbMerkozesIdo][1]*60+6;
							PaintballInfo[k][pbSzamlalo] = PaintballInfo[k][pbMerkozesIdo][1]*60+6;
							PaintballInfo[k][pbHasznalva] = true;
							PaintballInfo[k][pbNyertes] = p;
							PaintballInfo[k][pbNyertesOles] = 0;

						}
						else
							Msg(p, "Nincs elég pénzed játszani!!!");
					}
					if(PaintballInfo[k][pbSzamlalo] == 3 && Paintballozik[p] && PBTerem[p] == k)
						Freeze(p, 3000);
				}		
			}
		}
		if(PaintballInfo[k][pbSzamlalo] != NINCS)
			PaintballInfo[k][pbSzamlalo]--;
			
		if(PaintballInfo[k][pbSzamlalo] < 1 && PaintballInfo[k][pbSzamlalo] != NINCS)
			PaintballInfo[k][pbSzamlalo] = NINCS;
	}
	
	foreach(Jatekosok, p)
	{
		if(ForceSleepAnimation[p] >= UnixTime)
		{
			Freeze(p);
			ApplyAnimation(p, "CRACK", "CRCKIDLE2", 4.0, 1, 1, 1, 1, 1);
		}
		
		PlayerBulletProof[p] = false;
		if(IsPlayerInAnyVehicle(p))
		{
			if(IsAPancelozottKocsi(GetPlayerVehicleID(p)))
				PlayerBulletProof[p] = true;
		}
		
		if(RadioAktivsag > UnixTime && gNews[p] != 2)
			NewsRadioHallgatas[p]++;
			
		if(NewsRadioHallgatas[p] >= 3600)
		{
			if(FrakcioInfo[FRAKCIO_ONKORMANYZAT][fPenz] >= 10000)
			{
				FrakcioSzef(FRAKCIO_ONKORMANYZAT,-10000, 24);
				new szeflog[128];
				format(szeflog,sizeof(szeflog), "[%d. frakció]Riporter: 10.000 Ft",FRAKCIO_ONKORMANYZAT);
				Log("Szef",szeflog);
				FrakcioSzef(FRAKCIO_RIPORTER,10000, 24);
			}
			NewsRadioHallgatas[p]=0;
		}	
		if(PlayerInfo[p][pElozoParancs] > 0)
			PlayerInfo[p][pElozoParancs]--;
		
		GetPlayerPos(p, ArrExt(PlayerPos[p]));
		if(!PlayerPlace[p][pCity] && VarosbanVan(p)) OnPlayerCityEnter(p);
		else if(PlayerPlace[p][pCity] && !VarosbanVan(p))OnPlayerCityEnter(p);
		
		/* * * * * * * * * * * * * *
		 *                         *
		 *	 T É R F I G Y E L Õ   *
		 *                         *
		 * * * * * * * * * * * * * */
		if(PlayerMarker[p][mType] > 0)
		{
			//PlayerPlace[p][pHiding] = NINCS;
			
			//if(PlayerPlace[p][pCity] == CITY_LOS_SANTOS)
			//{
			
			// rejtekhelyek
			if(PlayerPlace[p][pHiding] != NINCS)
			{
				new h = PlayerPlace[p][pHiding];
				if(h < 0 || h >= MAX_HIDDEN_AREA || !MarkerHiddenArea[h][mExists]
					|| MarkerHiddenArea[h][mMinX] > PlayerPos[p][0] || MarkerHiddenArea[h][mMaxX] < PlayerPos[p][0]
					|| MarkerHiddenArea[h][mMinY] > PlayerPos[p][1] || MarkerHiddenArea[h][mMaxY] < PlayerPos[p][1]
				)
					PlayerPlace[p][pHiding] = NINCS;
			}
			
			if(PlayerPlace[p][pHiding] == NINCS) for(new h = 0; h < MAX_HIDDEN_AREA; h++)
			{
				if(MarkerHiddenArea[h][mExists]
					&& MarkerHiddenArea[h][mMinX] <= PlayerPos[p][0] <= MarkerHiddenArea[h][mMaxX]
					&& MarkerHiddenArea[h][mMinY] <= PlayerPos[p][1] <= MarkerHiddenArea[h][mMaxY]
				)
				{
					PlayerPlace[p][pHiding] = h;
					break;
				}
			}
			
			// war területek
			if(PlayerPlace[p][pWarArea] != NINCS)
			{
				new w = PlayerPlace[p][pWarArea];
				if(w < 0 || w >= MAXTERULET || !TeruletInfo[w][Van]
					|| TeruletInfo[w][tMinX] > PlayerPos[p][0] || TeruletInfo[w][tMaxX] < PlayerPos[p][0]
					|| TeruletInfo[w][tMinY] > PlayerPos[p][1] || TeruletInfo[w][tMaxY] < PlayerPos[p][1]
					|| TeruletInfo[w][tVarakozasIdo] < 1
				)
					PlayerPlace[p][pWarArea] = NINCS;
			}
			
			if(PlayerPlace[p][pWarArea] == NINCS) for(new w = 0; w < MAXTERULET; w++)
			{
				if(TeruletInfo[w][Van]
					&& TeruletInfo[w][tMinX] <= PlayerPos[p][0] <= TeruletInfo[w][tMaxX]
					&& TeruletInfo[w][tMinY] <= PlayerPos[p][1] <= TeruletInfo[w][tMaxY]
					&& TeruletInfo[w][tVarakozasIdo] > 0
				)
				{
					PlayerPlace[p][pWarArea] = w;
					break;
				}
			}
			
			//}
			
			if(PlayerPlace[p][pCity] == CITY_LOS_SANTOS && (PlayerPlace[p][pHiding] == NINCS && PlayerPlace[p][pWarArea] == NINCS) )
			{
				if(PlayerMarker[p][mHidden])
					MarkerAction(p, PLAYER_MARKER_ON_MARKER, PLAYER_MARKER_ON_MARKER_SHOW);
				
				PlayerMarker[p][mLastPos][0] = PlayerPos[p][0];
				PlayerMarker[p][mLastPos][1] = PlayerPos[p][1];
				PlayerMarker[p][mLastPos][2] = PlayerPos[p][2];
			}
			
			if(!PlayerMarker[p][mHidden])
			{
				if(PlayerPlace[p][pCity] != CITY_LOS_SANTOS)
					MarkerAction(p, PLAYER_MARKER_ON_MARKER, PLAYER_MARKER_ON_MARKER_CITYEXIT);
				elseif(PlayerPlace[p][pHiding] != NINCS || PlayerPlace[p][pWarArea] != NINCS)
				{
					PlayerMarker[p][mLastPos] = Float:{ 0.0, 0.0, 0.0 };
					MarkerAction(p, PLAYER_MARKER_ON_MARKER, PLAYER_MARKER_ON_MARKER_HIDDEN);
				}
			}
		}
			
		if(GetPlayerState(p) == 7) continue; // ha épp meghal - WASTED
		if(FloodMegprobal[p] > 0) FloodMegprobal[p]--;
		if(FloodKuszas[p] > 0) FloodKuszas[p]--;
		if(FloodKalap[p] > 0) FloodKalap[p]--;
		if(PlayerInfo[p][pCrossido] > 0) PlayerInfo[p][pCrossido]--;
		if(PlayerToPoint(5, p, 1824.1296,-1303.2390,131.7344) && SSSinfo[p]==0 && GetPlayerVirtualWorld(p)==103)
		{
			SendClientMessage(p, COLOR_LIGHTBLUE, "|----------Üdvözöllek az SSS irodában----------|");
			SendClientMessage(p, COLOR_LIGHTBLUE, "A munkatársainkal az alábbi módokon veheted fel a kapcsolatot:");
			SendClientMessage(p, COLOR_LIGHTBLUE, "Az irodából rádión: /srs, vagy telefonon: /sss tagok");
			SendClientMessage(p, COLOR_LIGHTBLUE, "|A célunk: Segítsük a városba újonnan érkezõket mind anyagilag, mind beileszkedésben ((IC -OOC))");
			SendClientMessage(p, COLOR_LIGHTBLUE, "|Pénz támogatást 500.000FT össz vagyonig adunk. A felett nem támogatunk!!");
			SendClientMessage(p, COLOR_LIGHTBLUE, "|----------Segitõ Szeretet Szolgálat----------|");
			SSSinfo[p]=1;
			foreach(Jatekosok, x)
			{
				if(PlayerInfo[x][pSSS] > 0 && PlayerInfo[p][pSSS]==0)
				{
					SendFormatMessage(x, COLOR_LIGHTGREEN, "SSS iroda, ügyfél jött: %s. |LVL:%d| Mostantól hallja a rádió beszélgetéseket!!", PlayerName(p), PlayerInfo[p][pLevel]);
				}
			}

		}
		if(PlayerToPoint(5, p, 1422.7107,-1639.8097,13.5469) && SSSinfo[p]==1)
		{
			SSSinfo[p]=0;
			foreach(Jatekosok, x)
			{
				if(PlayerInfo[x][pSSS] > 0  && PlayerInfo[p][pSSS]==0)
				{
					SendFormatMessage(x, COLOR_LIGHTGREEN, "SSS iroda, ügyfél távozott: %s. Mostantól nem hallja a rádió beszélgetéseket!!", PlayerName(p));
				}
			}
		}
		//Animba állítása, ha animba van!
		if(Animban[p] == 1 && !IsPlayerInAnyVehicle(p))
		{
			ApplyAnimation(p, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
			//if(IsPlayerInAnyVehicle(p))
				//RemovePlayerFromVehicle(p);
		}
		
		new skin = GetPlayerSkin(p);//, id = PlayerInfo[p][pID];
		
		if(!Admin(p,1337))
		{	
			if(!PlayerCanUseSkinByProtection(p, skin))
				SetPlayerSkin(p, 29), SendClientMessage(p, COLOR_LIGHTBLUE, "Ezt a skint nem veheted fel");
		}
		if(TransportTime[p] > 0)
		{
			TransportTime[p]++;
			if(TransportTime[p] >= 16)
			{
				TransportTime[p] = 1;

				new driver = TransportDriver[p];
				if(RendesJatekos(driver, false) && driver != p)
				{
					TransportCost[p] += TransportValue[driver];
					TransportCost[driver] = TransportCost[p];
				}
			}
			format(string, sizeof(string), "~n~~n~~r~15 / %d ~n~~g~%dFT", TransportTime[p], TransportCost[p]);
			GameTextForPlayer(p, string, 15000, 4);
		}

		new fizetes[3];
		fizetes[0] = floatround(PlayerInfo[p][pConnectTime] / 300);
		fizetes[1] = floatround(PlayerInfo[p][pConnectTime] / 150);
		fizetes[2] = floatround(PlayerInfo[p][pConnectTime] / 120);

		if(fizetes[0] <= 0) fizetes[0] = 1;
		if(fizetes[1] <= 0) fizetes[1] = 1;
		if(fizetes[2] <= 0) fizetes[2] = 1;

		if(Visz[p] != NINCS)
		{
			new Float:X, Float:Y, Float:Z, Int, VW;
			GetPlayerPos(p, X, Y, Z);
			VW = GetPlayerVirtualWorld(p);
			Int = GetPlayerInterior(p);
			//PlayerInfo[p][pCFalsePositive] = 1;
			SetPlayerPos(Visz[p], (X+0.5), Y, Z);
			SetPlayerInterior(Visz[p], Int);
			SetPlayerVirtualWorld(Visz[p], VW, "visz");
		}
		if(HVisz[p] != NINCS)
		{
			if(!HullaInfo[HVisz[p]][Hvan]) HVisz[p] = NINCS;
			else
			{
				new Float:X, Float:Y, Float:Z, VW;
				GetPlayerPos(p, X, Y, Z);
				VW = GetPlayerVirtualWorld(p);
					
				HullaInfo[HVisz[p]][Hpos][0] = X+0.5;
				HullaInfo[HVisz[p]][Hpos][1] = Y;
				HullaInfo[HVisz[p]][Hpos][2] = Z;
				
				HullaInfo[HVisz[p]][Hvw] = VW;
				SetActorPos(HullaInfo[HVisz[p]][Hactor], X, Y, Z);
				SetActorVirtualWorld(HullaInfo[HVisz[p]][Hactor], VW);

				if(IsValidDynamic3DTextLabel(HullaInfo[HVisz[p]][Htext3d])) DestroyDynamic3DTextLabel(HullaInfo[HVisz[p]][Htext3d]);
				
				HullaInfo[HVisz[p]][Htext3d] = CreateDynamic3DTextLabel("HOLTTEST\n(( /hulla ))", COLOR_YELLOW, X, Y, Z-0.9, 20.0,.worldid = VW);
			}
		}
		new chn = PlayerInfo[p][pReportChannel];
		if(chn != NINCS && ReportChannel[chn][rTimeOut] != 555)
		{
			TudReportolni[p]++;
			if(TudReportolni[p] > ReportChannel[chn][rTimeOut])
			{
				Msg(p, "A rendszer kirúgott a channelrõl idõtullépés miatt");
				Channel(p, NINCS);
			}
		}
		if(AdminDuty[p])
		{
			if(SAdmin(p, 1337))
				SetPlayerColor(p, COLOR_FOADMINKEK);
			else
				SetPlayerColor(p, COLOR_ADMINKEK);
		}
		if(ScripterDuty[p])
			SetPlayerColor(p, COLOR_SCRIPTERNARANCS);


		if(PlayerInfo[p][pFekvoflood] > 0)
			PlayerInfo[p][pFekvoflood]--;
			
		new haz = IsAt(p, IsAt_Haz);
		if(haz != NINCS)
		{
			if(Hifirolhallgatzenet[p] && H_stream[haz]-UnixTime <= 0)
			{
				HifiZene[haz] = false;
				Hifirolhallgatzenet[p] = false;
				StopAudioStreamForPlayer(p);
			}
		}
		
		if(Zsebradio[p] == 2 && MP4YT[p][yMeddig]-UnixTime <= 0)
		{
			Zsebradio[p] = 0;
			StopAudioStreamForPlayer(p);
		}
	}
	
	PenzUpdate();
	EngineBreak();
	
	if(CarRespawnSzamlalo != NINCS)
		AllCarRespawn();
		
	return 1;
}

fpublic ClientTimer()
{
	for(new p = 0; p < MAX_PLAYERS; p++) // NE cseréld foreach-ra, mivel a nem bejelentkezetteket is kell ellenõrizni!
	{
		if(Connected[p] && JatekBetoltve[p] && PlayerInfo[p][pID] > 0 && ClassClient && (KliensMode == KLIENS_MOD_KOTELEZO || PlayerInfo[p][pKliens] == 1))
		{
			if(MarBelepett[p])
			{
				// legutolsó státusz több, mint 30 másodperce volt
				new lastStatus = (UnixTime - PlayerInfo[p][pKliensLastStatus]);
				if(lastStatus >= 30 && lastStatus < 300)
				{
					// ha a legutolsó státusz lekérés több, mint 30 másodperce volt
					new lastStatusRequest = (UnixTime - PlayerInfo[p][pKliensLastStatusRequest]);
					if(lastStatusRequest >= 30)
					{
						PlayerInfo[p][pKliensLastStatusRequest] = UnixTime;
						CLIENT_CheckPlayerStatus(PlayerName(p), PlayerIP(p));
						
						if(lastStatus >= 60)
							Msg(p, "Figyelem! A kliens nem aktív. A rendszer kirúg, ha nem lépsz be a klienssel.");
					}
				}
				else if(lastStatus >= 300 && !IsJim(p))
				{
					Log("Kick", TFormatInline("[%d]%s kirúgva kliens hiánya miatt (lastStatus = %d)", p, PlayerName(p), lastStatus));
					Msg(p, "Kirúgva kliens hiánya miatt");
					TKick(p);
					continue;
				}
				
				// figyelmeztetés
				if(!PlayerInfo[p][pKliensAktiv] && (UnixTime - PlayerInfo[p][pKliensDisconnectTime]) >= 30 && !PlayerInfo[p][pKliensDisconnectWarn])
				{
					Msg(p, "A kliens szétkapcsolt");
					PlayerInfo[p][pKliensDisconnectWarn] = 1;
				}
			}
			else
			{
				if(PlayerInfo[p][pKliensAktiv])
				{
					if(PlayerInfo[p][pCodeBanned] == 0 && !MarBelepett[p] && BejelentkezokSzama < MAXBEJELENTKEZES)
					{
						DoLogin(p);
						continue;
					}
				}
				else
				{
					new requestInterval = (MarBelepett[p] ? 60 : 5);
					new delta = (UnixTime - PlayerInfo[p][pKliensLastStatus]);
					if(delta >= requestInterval)
					{
						PlayerInfo[p][pKliensLastStatusRequest] = UnixTime;
						CLIENT_CheckPlayerStatus(PlayerName(p), PlayerIP(p));
					}
				}
			}
		}
	}
}

fpublic TeleTimer()
{	
	new Float:x, Float:y, Float:z, int, vw;
	foreach(Jatekosok, p)
	{
		if(!RendesJatekos(p)) continue;

		GetPlayerPos(p, x, y, z);
		vw = GetPlayerVirtualWorld(p);
		int = GetPlayerInterior(p);
		
		if(!RiobanVan{p} && PlayerInArea(p, 1647, 1696, -1351, -1317, .x = x, .y = y)) { //RIO
			Event(p, EVENT_TYPE_RIO, EVENT_ACTION_ENTER);
		} elseif(RiobanVan{p} && !PlayerInArea(p, 1647, 1696, -1351, -1317, .x = x, .y = y)) {
			Event(p, EVENT_TYPE_RIO, EVENT_ACTION_EXIT);
		}

		// AdminJail ellenörzõ
		if(PlayerInfo[p][pJailed] == 3 && (z < 1000.0 || z > 1010.0 || y > 9.0 || y < -19.0 || x > 976.0 || x < 930.0 || vw != 8888 || int != 3) && AJVarakozas[p] == 0)
		{
			AJSzokesek[p]++;
			if(AJSzokesek[p] >= 3)
			{
				Msg(p, "Szökési kísérlet!");
			//	Jail(p, "+", 1800, "off", "---");
				SeeKick(p, "AdminJailból szökési kísérlet!");
				continue;
			}
			//PlayerInfo[p][pTeleportAlatt] = 1;
			//PlayerInfo[p][pCFalsePositive] = 1;
			SetPlayerPos(p, 953.989, -8.406, 1001.148);
			SetPlayerInterior(p, 3);
			SetPlayerVirtualWorld(p, 8888, "teletimer");
			Msg(p, "Ne próbálkozz");
			continue;
		}

		// AdminJail 2 ellenörzõ
		if(PlayerInfo[p][pJailed] == 6 && (z < 1000.0 || z > 1005.0 || y > -9.0 || y < -14.0 || x > 416.0 || x < 413.0 || vw != (10000+p) || int != 2) && AJVarakozas[p] == 0)
		{
			AJSzokesek[p]++;
			if(AJSzokesek[p] >= 3)
			{

				Msg(p, "Szökési kísérlet!");
				SeeKick(p, "AdminJailból szökési kísérlet!");
				continue;
			}
			//PlayerInfo[p][pTeleportAlatt] = 1;
			//PlayerInfo[p][pCFalsePositive] = 1;
			SetPlayerPos(p, 414.628, -11.005, 1001.812);
			SetPlayerInterior(p, 2);
			SetPlayerVirtualWorld(p, 10000 + p, "teletimer2");
			Msg(p, "Ne próbálkozz");
			continue;
		}
		
		// AdminJail 3 ellenõrzõ
		if(PlayerInfo[p][pJailed] == 8 && (z < 1000.0 || z > 1005.0 || y > -9.0 || y < -14.0 || x > 416.0 || x < 413.0 || vw != (20000+p) || int != 2) && AJVarakozas[p] == 0)
		{
			AJSzokesek[p]++;
			if(AJSzokesek[p] >= 3)
			{
				Msg(p, "Szökési kísérlet!");
				SeeKick(p, "AdminJailból szökési kísérlet!");
				continue;
			}
			//PlayerInfo[p][pTeleportAlatt] = 1;
			//PlayerInfo[p][pCFalsePositive] = 1;
			SetPlayerPos(p, 414.628, -11.005, 1001.812);
			SetPlayerInterior(p, 2);
			SetPlayerVirtualWorld(p, 20000 + p, "teletimer3");
			Msg(p, "Ne próbálkozz");
			continue;
		}

		// FBI HQ be
		if(PlayerToPoint(1.5, p, 1359.9688,-1718.0879,8.5525))
	    {
			
	        if(LMT(p, FRAKCIO_FBI) || IsAdmin(p))
	        {
	            if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
	                SetVehiclePos(GetPlayerVehicleID(p), 1359.0596,-1728.1038,8.5949);
	            else if(!IsPlayerInAnyVehicle(p))
	                SetPlayerPos(p, 1359.0596,-1728.1038,8.5949);
	        }
	    }

		// FBI HQ ki
		if(PlayerToPoint(1.5, p, 1359.0596,-1728.1038,8.5949))
	    {
	        if(LMT(p, FRAKCIO_FBI) || IsAdmin(p))
	        {
	            if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
	                SetVehiclePos(GetPlayerVehicleID(p), 1359.9688,-1718.0879,8.5525);
	            else if(!IsPlayerInAnyVehicle(p))
	                SetPlayerPos(p, 1359.9688,-1718.0879,8.5525);
	        }
	    }

	    //Fort be tele
		if(PlayerToPoint(1.5, p, 135.465728, 1946.600585, 19.359313))
	    {	
	        if(IsACop(p))
	        {
	            if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
	                SetVehiclePos(GetPlayerVehicleID(p), 136.594497, 1928.995483, 19.206199);
	            else if(!IsPlayerInAnyVehicle(p))
	                SetPlayerPos(p, 136.594497, 1928.995483, 19.206199);
	        }
	    }

	    //Fort ki tele
	    else if(PlayerToPoint(1.5, p, 135.642883, 1934.607543, 19.258510))
	    {	
	        if(IsACop(p))
	        {
	            if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
	                SetVehiclePos(GetPlayerVehicleID(p), 135.055938, 1953.127685, 19.413507);
	            else if(!IsPlayerInAnyVehicle(p))
	                SetPlayerPos(p, 135.055938, 1953.127685, 19.413507);
	        }
	    }

	    //Fort be tele 2
	    else if(PlayerToPoint(1.5, p, 291.151, 1821.415, 17.640))
	    {
	        if(IsACop(p))
	        {
	            if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
	                SetVehiclePos(GetPlayerVehicleID(p), 271.076, 1821.190, 17.640);
	            else if(!IsPlayerInAnyVehicle(p))
	                SetPlayerPos(p, 271.076, 1821.190, 17.640);
	        }
	    }

	    //Fort ki tele 2
	    else if(PlayerToPoint(1.5, p, 279.645, 1821.550, 17.640))
	    {
	        if(IsACop(p))
	        {
	            if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
	                SetVehiclePos(GetPlayerVehicleID(p), 295.425, 1821.637, 17.640);
	            else if(!IsPlayerInAnyVehicle(p))
	                SetPlayerPos(p, 295.425, 1821.637, 17.640);
	        }
	    }

		//Autóparkoló be
	    else if(PlayerToPoint(2, p, 2491.210449, 2773.332519, 10.798006))
	    {
	        if(Admin(p, 1337) || Engedely[p] == 1)
	        {
	            if(IsPlayerInAnyVehicle(p) && GetPlayerState(p) == 2)
	            {
	                new veh = GetPlayerVehicleID(p);
	                SetVehiclePos(veh, 2509.121582, 2771.689941, 10.820312);
	            }
	            else
	                SetPlayerPos(p, 2509.121582, 2771.689941, 10.820312);
	        }
	    }

		//Autóparkoló ki
	    else if(PlayerToPoint(2, p, 2503.887207, 2773.661376, 10.820312))
	    {
			Engedely[p] = 0;
            if(IsPlayerInAnyVehicle(p) && GetPlayerState(p) == 2)
            {
                new veh = GetPlayerVehicleID(p);
                SetVehiclePos(veh, 2482.818847, 2773.210449, 10.759070);
            }
            else
                SetPlayerPos(p, 2482.818847, 2773.210449, 10.759070);
	    }
	}
}
fpublic Hatar()
{
	//new string[256];
	foreach(Jatekosok, p)
	{
	if(RendesJatekos(p) && !IsACop(p) && !IsHitman(p) && !AdminDuty[p] && Tevezik[p] == NINCS)
	//	if(RendesJatekos(p))
		{
			if(HatartAtlepte[p] > 0) continue;
			new kocsi;
			if(PlayerToPoint(10, p, -2681.7976,1275.5908,55.4297))
			{
			    if(hatar > 0)
				{
					if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
					{
						kocsi = GetPlayerVehicleID(p);
						CopMsgFormat(TEAM_BLUE_COLOR, "**  FIGYELEM: %s átlépte az EP-8(Golden Gate) határzónát Rendszám: %d**", ICPlayerName(p),kocsi);
					}
					else
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-8(Golden Gate) határt! **", ICPlayerName(p));
						
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}
			else if(PlayerToPoint(15, p, -89.3805,-920.9824,18.5809))
			{
				if(hatar > 0)
				{
					if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
					{
						kocsi = GetPlayerVehicleID(p);
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-2! Rendszám: %d**", ICPlayerName(p),kocsi);
					}
					else
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-2 határt! **", ICPlayerName(p));
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}
			
			else if(PlayerToPoint(10, p, -1365.1212,862.9720,47.4722))
			{
				if(hatar > 0)
				{
					if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
					{
						kocsi = GetPlayerVehicleID(p);
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-9(SF híd) ! Rendszám: %d**", ICPlayerName(p),kocsi);
					}
					else
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-9(SF híd) határt! **", ICPlayerName(p));
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}
			else if(PlayerToPoint(10, p, -1376.0016,677.6368,34.5781))
			{
				if(hatar > 0)
				{
					if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
					{
						kocsi = GetPlayerVehicleID(p);
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s a síneken át szökik át SF-ben! Rendszám: %d**", ICPlayerName(p),kocsi);
					}
					else
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s a síneken át szökik át SF-ben! **", ICPlayerName(p));
					SendClientMessage(p, COLOR_YELLOW, "Ez egy tiltott és figyelt határ! A zsaruk lecsukhatnak miatta!");
					HatartAtlepte[p] = 10;
				}
			}
			else if(PlayerToPoint(10, p, -164.3360,380.9377,12.0781))
			{
				if(hatar > 0)
				{
					if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
					{
						kocsi = GetPlayerVehicleID(p);
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-4 határzónát! Rendszám: %d**", ICPlayerName(p),kocsi);
					}
					else
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-4 határzónát! **", ICPlayerName(p));
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}
			else if(PlayerToPoint(10, p, 500.3794,501.2592,18.9220))
			{
				if(hatar > 0)
				{
					if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
					{
						kocsi = GetPlayerVehicleID(p);
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-5 határzónát! Rendszám: %d**", ICPlayerName(p),kocsi);
					}
					else
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-5 határzónát!**", ICPlayerName(p));
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}
			else if(PlayerToPoint(10, p, 1739.4407,524.6778,27.7830))
			{
				if(hatar > 0)
				{
					if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
					{
						kocsi = GetPlayerVehicleID(p);
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-6 határzónát! Rendszám: %d**", ICPlayerName(p),kocsi);
					}
					else
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-6 határzónát! **", ICPlayerName(p));
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}
			else if(PlayerToPoint(5, p, -19.0221,-1340.5486,10.9872) || PlayerToPoint(5, p, -8.1059,-1361.4962,10.7608))
			{
				if(hatar > 0)
				{
					if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
					{
						kocsi = GetPlayerVehicleID(p);
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-7 határzónát! Rendszám: %d**", ICPlayerName(p),kocsi);
					}
					else
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-7 határzónát! **", ICPlayerName(p));
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}
			else if(PlayerToPoint(10, p, 2767.2012,453.6431,8.2898))
			{
				if(hatar > 0)
				{
					if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
					{
						kocsi = GetPlayerVehicleID(p);
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s LS-LV közötti síneken szökik át! Rendszám: %d**", ICPlayerName(p),kocsi);
					}
					else
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s LS-LV közötti síneken szökik át! **", ICPlayerName(p));
					SendClientMessage(p, COLOR_YELLOW, "Ez egy tiltott és figyelt határ! A zsaruk lecsukhatnak miatta!");
					HatartAtlepte[p] = 10;
				}
			}
			else if(PlayerToPoint(10, p, 42.9162,-1529.9849,5.3716))
			{
				if(hatar > 0)
				{
					if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
					{
						kocsi = GetPlayerVehicleID(p);
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-1 határzónát! Rendszám: %d**", ICPlayerName(p),kocsi);
					}
					else
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-1 határzónát!**", ICPlayerName(p));
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}
			else if(PlayerToPoint(10, p, -971.9191,-364.6200,36.2927))
			{
				if(hatar > 0)
				{
					if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
					{
						kocsi = GetPlayerVehicleID(p);
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-3 határzónát! Rendszám: %d**", ICPlayerName(p),kocsi);
					}
					else
						CopMsgFormat(TEAM_BLUE_COLOR, "** FIGYELEM: %s átlépte az EP-3 határzónát! **", ICPlayerName(p));
					SendClientMessage(p, COLOR_YELLOW, "Átléptél egy határt! Ha nincs útleveled a zsaruk lecsukhatnak!");
					HatartAtlepte[p] = 10;
				}
			}
		}
	}
	return 1;
}

fpublic Munkavege(playerid, Munka, db, db2, db3)
{
   	if(IsPlayerConnected(playerid))
   	{
		new string2[128];
		MunkaTimerID[playerid]=NINCS;
		
		if(Munka == M_LAPTOP_KIBE)
		{
			if(PlayerInfo[playerid][pLaptopBe])
			{
				Msg(playerid, "A géped kikapcsolt! Már nem tudják lenyomozni!");
				PlayerInfo[playerid][pLaptopBe]=false;
				MunkaFolyamatban[playerid]=0;
				foreach(Jatekosok,x)
				{
					if(IsACop(x))
						SetPlayerMarkerForPlayer(x, playerid, COLOR_INVISIBLE);
				}
			
			}
			else
			{
				Msg(playerid, "A géped bekapcsolt!");
				PlayerInfo[playerid][pLaptopBe]=true;
				MunkaFolyamatban[playerid]=0;
			}
		}
		else if(Munka == M_BENZINTRAILER)
		{
			
			
			new trailer= Uzemanyag[playerid][ptanker];
			new liter=Uzemanyag[playerid][pliter];
			new fajta=Uzemanyag[playerid][ptipus];
			MunkaFolyamatban[playerid] = 0;
			if(fajta == 0)
			{
				new penz = liter*100;
				PlayerInfo[playerid][pPayCheck] -= penz;
				UnFreeze(playerid);
				Benzin[trailer] += liter;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* %d liter feltöltve %dFt-ért, most %d liter van benne.", liter, penz, Benzin[trailer]);
			}
			else if(fajta == 1)
			{
				new penz = liter*100;
				PlayerInfo[playerid][pPayCheck] -= penz;
				UnFreeze(playerid);
				Diesel[trailer] += liter;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* %d liter feltöltve %dFt-ért, most %d liter van benne.", liter, penz, Diesel[trailer]);
			}
			else if(fajta == 2)
			{
				new penz = liter*150;
				PlayerInfo[playerid][pPayCheck] -= penz;
				UnFreeze(playerid);
				Kerozin[trailer] += liter;
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "* %d liter feltöltve %dFt-ért, most %d liter van benne.", liter, penz, Kerozin[trailer]);
			}
				
		}
		else if(Munka == M_TVVEGE)
		{
			MostLepettBe[playerid] = 1;
			MunkaFolyamatban[playerid] = 0;
			OnPlayerSpawn(playerid);
			//SpawnPlayer(playerid);
		}

		else if(Munka == M_FELTOLT)
		{
			TogglePlayerControllable(playerid, true);
			MunkaFolyamatban[playerid] = 0;
			UnFreeze(playerid);
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_YELLOW, "A kocsid akkumlátorát feltöltötted");
			CarPart[db][cAkkumulator] = 100.0;
		}
		else if(Munka == M_OLAJCSERE)
		{
			TogglePlayerControllable(playerid, true);
			MunkaFolyamatban[playerid] = 0;
			UnFreeze(playerid);
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
			SendClientMessage(playerid, COLOR_YELLOW, "A kocsid motorolaját kicserélted");
			CarPart[db][cMotorolaj] = 0.0;
		}
		else if(Munka == M_FLY)
		{
			//PlayerInfo[playerid][pCFalsePositive] = 1;
			SetPlayerVirtualWorld(playerid,FlyVege[playerid][Fvw], "munkaFLY");
			SetPlayerInterior(playerid,FlyVege[playerid][Finti]);
			SetPlayerPos(playerid, FlyVege[playerid][Fposx],FlyVege[playerid][Fposy],FlyVege[playerid][Fposz]);
			Msg(playerid,"Teleportálva flymod -ból");
			MunkaFolyamatban[playerid] = 0;
		}
		else if(Munka == M_KISZALELL)
		{
			if(!IsPlayerInAnyVehicle(playerid) && ov[playerid] == 1)
			{
				ov[playerid]=0;
				Msg(playerid,"Debug öv");
				MunkaFolyamatban[playerid] = 0;
			}
		}
		else if(Munka == M_KISZAL)
		{
			MunkaFolyamatban[playerid] = 0;
			PutPlayerInVehicle(playerid, db, 0);
			Msg(playerid, "Be vagy kötve ezért vissza rakva");
		}
		else if(Munka == M_BICIKLI)
		{
			MunkaFolyamatban[playerid] = 0;
			new Float:xPos[3];
			GetXYZInFrontOfPlayer(playerid, ArrExt(xPos), 1.0);
			new Float:angle;
			GetPlayerFacingAngle(playerid, angle);
			switch(db)
			{
				case 1: Bicikli[playerid] = UjKocsi(481, ArrExt(xPos), angle, db2);
				case 2: Bicikli[playerid] = UjKocsi(509, ArrExt(xPos), angle, db2);
				case 3: Bicikli[playerid] = UjKocsi(510, ArrExt(xPos), angle, db2);
				default: return Msg(playerid, "Hiba!");
			}
			
			UnLockCar(Bicikli[playerid]);
			Almaszedeskozbe[Bicikli[playerid]] = 0;
			UnFreeze(playerid);
			
			
			//SetTimerEx("Munkavege", 5000, false, "dddd", Bicikli[playerid], M_Object_Torol);
		}
	
		else if(Munka == M_HARCVEGE)
		{
			MunkaFolyamatban[playerid] = 0;
			Harcol[playerid] = false;
			SetPlayerVirtualWorld(playerid, 0, "munkaHARC");
			SetPlayerWorldBounds(playerid,20000.0000, -20000.0000, 20000.0000, -20000.0000);
		}
	
		else if(Munka == M_NEON)
		{
			MunkaFolyamatban[playerid] = 0;
			UnFreeze(playerid);
			Cselekves(playerid,"felszerelt egy neont...",1);
			Msg(playerid,"Felszereltél egy neont!");
			ClearAnimations(playerid);
		}
		else if(Munka == M_RIASZTO)
		{
			MunkaFolyamatban[playerid] = 0;
			UnFreeze(playerid);
			Cselekves(playerid,"beszerelt egy riasztót",1);
			Msg(playerid,"Belszereltél egy riasztót!");
			ClearAnimations(playerid);
		}
		else if(Munka == M_KAMION)
		{
			MunkaFolyamatban[playerid] = 0;
			SendClientMessage(playerid, COLOR_YELLOW, "Lekapcsolták a pótkocsit!");
			UnFreeze(playerid);
			SendClientMessage(playerid, COLOR_YELLOW, "Most menj egy Kamion depóba, és kezdhetsz új szállítást!");
		}
		else if(Munka == M_PILOTAKEZD)
		{
			MunkaFolyamatban[playerid] = 0;
			Felleszallas[playerid] = 0;
			SendClientMessage(playerid, COLOR_GREEN, "Az utasok felszálltak, a repülõ indulásra kész!");
			UnFreeze(playerid);
		}
		else if(Munka == M_PILOTAVEGE)
		{
			MunkaFolyamatban[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			Felleszallas[playerid] = 0;
			Repul[playerid] = 0;
			SendClientMessage(playerid, COLOR_GREEN, "Az utasok leszálltak!");
			SendClientMessage(playerid, COLOR_GREEN, "Köszönjük, hogy a Class Légitársaság partnere volt. További jó utat kívánunk!");
			UnFreeze(playerid);
		}
		else if(Munka == M_BOLTRABLAS)
		{
			if(!Boltotrabol[playerid]) return 1;
			new eredmeny[128], tagok;
			foreach(Jatekosok, r)
			{
				if(WeaponArmed(r) == 0 || NemMozoghat(r) || GetPlayerVirtualWorld(r) != GetPlayerVirtualWorld(playerid) || GetPlayerInterior(r) != GetPlayerInterior(playerid) || Szint(r) < 5 || PlayerInfo[r][pMegad]) continue;
				tagok++;
			}
			
			tagok = min(tagok, db);
			
			format(eredmeny, 128, "[BOLTRABLÁS] %s befejezte a boltrablást, %d-n maradtak, %d-n kezdték",PlayerName(playerid), tagok, db);
			EgyebLog(eredmeny);
			new raboltpenz = floatround(15000000.0 - 15000000.0 * Math_MultiFactor(float(tagok * tagok) * 0.25));
			Cselekves(playerid, "végzett a pénzpakolással.", 1);
			SendFormatMessage(playerid, COLOR_DARKYELLOW, "** Kiraboltad a boltot. Rabolt összeg: %dFt", raboltpenz, tagok);
			format(_tmpString, 200, "%s rabolt %d emberrel, összeg: %dFt", PlayerName(playerid), tagok, raboltpenz), Log("Egyeb", _tmpString);
			GiveMoney(playerid, raboltpenz);
			UnFreeze(playerid);
			MunkaFolyamatban[playerid] = 0;
			Boltotrabol[playerid] = false;
		}
		else if(Munka == M_JARMUJAVITAS)
		{
			if(!MunkaFolyamatban[playerid]) return 1;
			MunkaFolyamatban[playerid] = 0;

			if(!PlayerInfo[playerid][pSzerszamoslada]) return 1;
			UnFreeze(playerid);
			ClearAnim(playerid);

			SetVehicleHealth(db, 750.0);

			Cselekves(playerid, "megjavított egy jármûvet");
			PlayerInfo[playerid][pSzerszamoslada] = 0;
		}
		else if(Munka == M_NYELVTANULAS)
		{
			if(!MunkaFolyamatban[playerid]) return 1;
			MunkaFolyamatban[playerid] = 0;

			if(PlayerInfo[playerid][pNyelv][db] >= 100) return 1;
			UnFreeze(playerid);

			Cselekves(playerid, "befejezte a nyelvtanulást");
			PlayerInfo[playerid][pNyelv][db] += Rand(1, 10);
			if(PlayerInfo[playerid][pNyelv][db] >= 100)
			{
				PlayerInfo[playerid][pNyelv][db] = 100;
				format(string2, 128, "ClassRPG: Sikeresen kitanultad a nyelvet: %s", Nyelvek[db - 1][0]);
			}
			else
				format(string2, 128, "ClassRPG: Sikeresen fejlesztetted a nyelvi készségeid %s nyelven, jelenlegi szint: %d%s", Nyelvek[db - 1][0], PlayerInfo[playerid][pNyelv][db], "%%");

			SendClientMessage(playerid, COLOR_LIGHTRED, string2);
			PlayerInfo[playerid][pNyelv][0] = UnixTime + NYELVTANULAS_IDO;

		}
		else if(Munka == M_HATASTALANIT)
		{
			if(MunkaFolyamatban[playerid] == 1)
		    {
				if(C4X[db] != 0.0 && PlayerToPoint(5.0, playerid, C4X[db], C4Y[db], C4Z[db]))
				{
					if(C4Kocsiban[db] == NINCS)
					{
						if(IsValidDynamicObject(C4Object[db])) DestroyDynamicObject(C4Object[db]), C4Object[db]=INVALID_OBJECT_ID;
						if(IsValidDynamic3DTextLabel(C4Text[db])) DestroyDynamic3DTextLabel(C4Text[db]), C4Text[db]=INVALID_3D_TEXT_ID;
					}
					Msg(playerid, "C4 hatástalanítva!");
					Msg(db, "Hatástalanították a C4edet");
					Cselekves(playerid, "hatástalanított egy C4-et...");
					C4Lerakva[db] = 0;
					C4X[db] = 0.0;
					C4Y[db] = 0.0;
					C4Z[db] = 0.0;
					C4Ido[db] = 0;
					C4Kocsiban[db] = NINCS;
					PlayerInfo[db][pC4] = 0;
					UnFreeze(playerid);
				}
				MunkaFolyamatban[playerid] = 0;
		 	}
		}
		else if(Munka == M_KATANA)
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Sikeresen elkészítettél 1 katana kardot!");
			MunkaFolyamatban[playerid] = 0;
			
			WeaponGiveWeapon(playerid, WEAPON_KATANA);
			TogglePlayerControllable(playerid, true);
			ClearAnimations(playerid);
		}
		else if(Munka == M_MELLENY)
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Sikeresen elkészítettél 1 db golyóálló mellényt!");
			MunkaFolyamatban[playerid] = 0;
			SetPlayerArmour(playerid, 100);
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
			TogglePlayerControllable(playerid, true);
			MunkaTimerID[playerid]=NINCS;
		}
   	    else if(Munka == M_CSERJE)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = Rand(0, MaxTalalas[0]);
				if(talalt == 0)
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Sajnos nem találtál egy jó Kokacserjét sem...");
				else
				{
				    if(PlayerInfo[playerid][pCserje] + talalt > MAXCSERJE)
				    {
				        new cserje = PlayerInfo[playerid][pCserje];
					    format(string2, sizeof(string2), "Találtál %ddb jó Kokacserjét, de csak %ddb-ot birsz el, ezért %ddb-ot itthagysz", talalt, MAXCSERJE, ((cserje + talalt) - MAXCSERJE));
					    PlayerInfo[playerid][pCserje] += (MAXCSERJE - cserje);
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Találtál %ddb jó Kokacserjét! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pCserje] + talalt));
					    PlayerInfo[playerid][pCserje] += talalt;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}
   	    else if(Munka == M_MAK)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = Rand(0, MaxTalalas[1]);
				if(talalt == 0)
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Sajnos nem találtál egy jó Máklevelet sem...");
				else
				{
				    if(PlayerInfo[playerid][pMak] + talalt > MAXMAK)
				    {
				        new mak = PlayerInfo[playerid][pMak];
					    format(string2, sizeof(string2), "Találtál %ddb jó Máklevelet, de csak %ddb-ot birsz el, ezért %ddb-ot itthagysz", talalt, MAXMAK, ((mak + talalt) - MAXMAK));
					    PlayerInfo[playerid][pMak] += (MAXMAK - mak);
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Találtál %ddb jó Máklevelet! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pMak] + talalt));
					    PlayerInfo[playerid][pMak] += talalt;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_CANNABIS)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = Rand(0, MaxTalalas[2]);
				if(talalt == 0)
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Sajnos nem találtál egy jó Cannabist sem...");
				else
				{
				    if(PlayerInfo[playerid][pCannabis] + talalt > MAXCANNABIS)
				    {
				        new cannabis = PlayerInfo[playerid][pCannabis];
					    format(string2, sizeof(string2), "Találtál %ddb jó Cannabist, de csak %ddb-ot birsz el, ezért %ddb-ot itthagysz", talalt, MAXCANNABIS, ((cannabis + talalt) - MAXCANNABIS));
					    PlayerInfo[playerid][pCannabis] += (MAXCANNABIS - cannabis);
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Találtál %ddb jó Cannabist! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pCannabis] + talalt));
					    PlayerInfo[playerid][pCannabis] += talalt;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_KOKAIN)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new leveldrog = SkillLevel(PInfo(playerid,DrugsSkill));

				
				
				new szorzo = leveldrog + (MaxTalalas[3] - 10);
				if(szorzo < 1) szorzo = 1;
				
				new talalt = Rand(db, db * szorzo);
				
				
			    if(PlayerInfo[playerid][pKokain] + talalt > MAXKOKAIN)
			    {
			        new drogja = PlayerInfo[playerid][pKokain];
				    format(string2, sizeof(string2), "Sikeresen készítettél %dg kokaint, de csak %dg-ot birsz el, ezért %dg-ot itthagysz", talalt, MAXKOKAIN, ((drogja + talalt) - MAXKOKAIN));
				    PlayerInfo[playerid][pKokain] += (MAXKOKAIN - drogja);
		    	}
		    	else
		    	{
					format(string2, sizeof(string2), "Sikeresen készítettél %dg kokaint! Összesen %dg-od van", talalt, (PlayerInfo[playerid][pKokain] + talalt));
				    PlayerInfo[playerid][pKokain] += talalt;
		    	}
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);

				PInfo(playerid,DrugsSkill) = PInfo(playerid,DrugsSkill) + db;
				
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_HEROIN)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new leveldrog = SkillLevel(PInfo(playerid,DrugsSkill));
				
				new szorzo = leveldrog + (MaxTalalas[4] - 10);
				if(szorzo < 1) szorzo = 1;
				
				new talalt = Rand(db, db * szorzo);

			    if(PlayerInfo[playerid][pHeroin] + talalt > MAXHEROIN)
			    {
			        new drogja = PlayerInfo[playerid][pHeroin];
				    format(string2, sizeof(string2), "Sikeresen készítettél %dg heroin, de csak %dg-ot birsz el, ezért %dg-ot itthagysz", talalt, MAXHEROIN, ((drogja + talalt) - MAXHEROIN));
				    PlayerInfo[playerid][pHeroin] += (MAXHEROIN - drogja);
		    	}
		    	else
		    	{
					format(string2, sizeof(string2), "Sikeresen készítettél %dg heroint! Összesen %dg-od van", talalt, (PlayerInfo[playerid][pHeroin] + talalt));
				    PlayerInfo[playerid][pHeroin] += talalt;
		    	}
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				
				PInfo(playerid,DrugsSkill) = PInfo(playerid,DrugsSkill) + db;
				
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_MARIHUANA)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new leveldrog = SkillLevel(PInfo(playerid,DrugsSkill));
				
				new szorzo = leveldrog + (MaxTalalas[5] - 10);
				if(szorzo < 1) szorzo = 1;
				
				new talalt = Rand(db, db * szorzo);

			    if(PlayerInfo[playerid][pMarihuana] + talalt > MAXMARIHUANA)
			    {
			        new drogja = PlayerInfo[playerid][pMarihuana];
				    format(string2, sizeof(string2), "Sikeresen készítettél %dg marihuánát, de csak %dg-ot birsz el, ezért %dg-ot itthagysz", talalt, MAXMARIHUANA, ((drogja + talalt) - MAXMARIHUANA));
				    PlayerInfo[playerid][pMarihuana] += (MAXMARIHUANA - drogja);
		    	}
		    	else
		    	{
					format(string2, sizeof(string2), "Sikeresen készítettél %dg marihuánát! Összesen %dg-od van", talalt, (PlayerInfo[playerid][pMarihuana] + talalt));
				    PlayerInfo[playerid][pMarihuana] += talalt;
		    	}
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);

				PInfo(playerid,DrugsSkill) = PInfo(playerid,DrugsSkill) + db;

				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_MATERIAL)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = Rand(db, db * MaxTalalas[6]);

			    if(PlayerInfo[playerid][pMats] + talalt > MAXMATI)
			    {
			        new matija = PlayerInfo[playerid][pMats];
				    format(string2, sizeof(string2), "Sikeresen készítettél %ddb materialt, de csak %d-t birsz el, ezért %d-t itthagysz", talalt, MAXMATI, ((matija + talalt) - MAXMATI));
				    PlayerInfo[playerid][pMats] += (MAXMATI - matija);
		    	}
		    	else
		    	{
					format(string2, sizeof(string2), "Sikeresen készítettél %ddb materialst! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pMats] + talalt));
				    PlayerInfo[playerid][pMats] += talalt;
		    	}
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);

				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_RUHACSERE)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				if(GetDistanceBetweenPlayers(playerid, db) <= 5.0)
				{
					UnFreeze(playerid);
					UnFreeze(db);
					ClearAnim(playerid);

					MunkaFolyamatban[playerid] = 0;
					SendClientMessage(playerid, COLOR_GREEN, "Elvetted a ruháit, és odaadtad neki a tied");
					SendClientMessage(db, COLOR_GREEN, "Ellopták a ruháidat");
					
					
					if((LMT(playerid, FRAKCIO_FBI) && !Munkarang(playerid, 1)) && Swatduty[db] == 1 && PlayerInfo[db][pHamisNev])
						PlayerInfo[db][pHamisNev] = 0;
						
					
					new sajat = GetPlayerSkin(playerid), ove = GetPlayerSkin(db);
					SetPlayerSkin(playerid, ove);
					SetPlayerSkin(db, sajat);
				}
				else
				    MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_RUHAELVESZ)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				if(GetDistanceBetweenPlayers(playerid, db) <= 5.0)
				{
					UnFreeze(playerid);
					UnFreeze(db);
					ClearAnim(playerid);
					
					if((LMT(playerid, FRAKCIO_FBI) && !Munkarang(playerid, 1)) && Swatduty[db] == 1 && PlayerInfo[db][pHamisNev])
						PlayerInfo[db][pHamisNev] = 0;

					new ove = GetPlayerSkin(db);
					SetPlayerSkin(playerid, ove);
					SetPlayerSkin(db, 252);

				}
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}
		else if(Munka == M_ELLAT)
		{
			if(MunkaFolyamatban[playerid] == 1)
		    {
				if(GetDistanceBetweenPlayers(playerid, db) <= 5.0)
				{
					TogglePlayerControllable(playerid, true);
					ClearAnimations(playerid);


					MunkaFolyamatban[playerid] = 0;
					SendClientMessage(playerid, COLOR_GREEN, "Sikeresen elláttad a vérzést, most már nem fog elvérezni!");
					SendClientMessage(db, COLOR_GREEN, "Ellátták a sebeidet, és most már nem vérzel!");
					PlayerInfo[db][pLoves] = NINCS;
					PlayerInfo[db][pEllatva] = false;
					if(IsValidDynamic3DTextLabel(Elajult[db])) DestroyDynamic3DTextLabel(Elajult[db]), Elajult[db] = INVALID_3D_TEXT_ID;
				}
				else
				    MunkaFolyamatban[playerid] = 0;
		 	}
		}
		else if(Munka == M_ELLAT2)
		{
			if(MunkaFolyamatban[playerid] == 1)
		    {
				if(GetDistanceBetweenPlayers(playerid, db) <= 5.0)
				{
					TogglePlayerControllable(playerid, true);
					ClearAnimations(playerid);


					MunkaFolyamatban[playerid] = 0;
					SendClientMessage(playerid, COLOR_GREEN, "Sikeresen elláttad hamarosan magához fog térni!");
					SendClientMessage(db, COLOR_GREEN, "Ellátták a sebeidet, hamarosan magadhoz fogsz térni!");
					PInfo(db,Elajult) = false;
					PlayerInfo[db][pEllatva] = false;
					Leutve[db] = false;
					Feketeseg(db, false);
					Animban[db] = 0;
					Leutve[db] = false;
					UnFreeze(db);
					
					if(IsValidDynamic3DTextLabel(Elajult[db])) DestroyDynamic3DTextLabel(Elajult[db]), Elajult[db] = INVALID_3D_TEXT_ID;
				}
				else
				    MunkaFolyamatban[playerid] = 0;
		 	}
		}
   	    else if(Munka == M_SEGIT)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				if(GetDistanceBetweenPlayers(playerid, db) <= 5.0)
				{
					TogglePlayerControllable(playerid, true);
					ClearAnimations(playerid);
					
					TogglePlayerControllable(db, true);
					ClearAnimations(db);

					Animban[db] = 0;
					SetPlayerDrunkLevel(db, 0);
					

					if(!NemMozoghat(db))
					{
						TogglePlayerControllable(db, true);
						ClearAnim(db);
					}

					MunkaFolyamatban[playerid] = 0;
					SendClientMessage(playerid, COLOR_GREEN, "Sikeresen elláttad a sebeit, és felsegítetted!");
					SendClientMessage(db, COLOR_GREEN, "Ellátták a sebeidet, és felsegítettek");
					if(IsValidDynamic3DTextLabel(Elajult[db])) DestroyDynamic3DTextLabel(Elajult[db]), Elajult[db] = INVALID_3D_TEXT_ID;
					Ehseg[playerid] -= 20.0;
					new Float:hp; GetPlayerHealth(db, hp);
					if(hp < 22.0)
						SetHealth(db, 22.0);
					else if(hp < 95.0)
						SetHealth(db, hp+5.0);
				}
				else
				    MunkaFolyamatban[playerid] = 0;
		 	}
	 	}
   	    else if(Munka == M_MSEGIT)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				if(Animban[playerid])
				{
					TogglePlayerControllable(playerid, true);
					ClearAnim(playerid);
					Animban[playerid] = 0;
					SetPlayerDrunkLevel(playerid, 0);
					MunkaFolyamatban[playerid] = 0;
					SendClientMessage(playerid, COLOR_GREEN, "Sikeresen elláttad a sebeidet!");
					Cselekves(playerid, "ellátta a sebeit...");
					Ehseg[playerid] -= 20.0;
					new Float:hp; GetPlayerHealth(db, hp);
					if(hp < 22.0)
						SetHealth(db, 22.0);
					else if(hp < 95.0)
						SetHealth(db, hp+5.0);
				}
				else
				    MunkaFolyamatban[playerid] = 0;
		 	}
	 	}
   	    else if(Munka == M_MOTOR)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
		        if(!IsPlayerInAnyVehicle(playerid))
		        {
		            MunkaFolyamatban[playerid] = 0;
		            return 1;
		        }
				new kocsim = GetPlayerVehicleID(playerid);
		        engineOn[GetPlayerVehicleID(playerid)] = 1;
				Gyujtas[kocsim] = true;
				//TogglePlayerControllable(playerid, true);
				SetJarmu(kocsim, KOCSI_MOTOR, true);
				MunkaFolyamatban[playerid] = 0;
				SendClientMessage(playerid, COLOR_GREEN, "Beindítottad a jármûvedet!");
				ProxDetector(30.0, playerid, "* Valaki beindította a jármû motorját", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				if(VanBombaBenne[kocsim] != NINCS)
				{
					new bombazo = NINCS;
					if(IsPlayerConnected(VanBombaBenne[kocsim]) && IsHitman(VanBombaBenne[kocsim]))
						bombazo = VanBombaBenne[kocsim];
					new Float:x, Float:y, Float:z;
					GetVehiclePos(kocsim, x, y, z);
					CreateExplosion(x, y, z, 2, 500.0);
					foreach(Jatekosok, jatekos)
					{
						if(!IsPlayerInVehicle(jatekos, kocsim)) continue;
						SetHealth(jatekos, 0);
						if(bombazo != NINCS && PlayerInfo[jatekos][pHeadValue] > 0)
						{
							new string[128];
							SendFormatMessageToAll(COLOR_YELLOW, " <<< A bérgyilkos teljesítette a megbízó kérését - %s kinyírva >>> ", PlayerName(jatekos));
							format(string,128,"<< %s teljesítette a megbízást >>", PlayerInfo[bombazo][pHitmanNev]);
							SendMessage(SEND_MESSAGE_HITMAN, string, COLOR_YELLOW);
							SendFormatMessage(jatekos, COLOR_LIGHTBLUE, "A megbízást teljesítetted. A cég átutalta a pénzt a számládra. (%dFt)", PlayerInfo[bombazo][pHeadValue]);

							PlayerInfo[bombazo][pAccount] += PlayerInfo[jatekos][pHeadValue];
							PlayerInfo[jatekos][pHeadValue] = 0;
							format(string, sizeof(string), "%s felrobbantotta %s-t", PlayerInfo[bombazo][pHitmanNev],  PlayerName(jatekos));
							ABroadCast(COLOR_GREY, string, 1);
						}
					}
					VanBombaBenne[kocsim] = NINCS;
				}
			}
		}
		else if(Munka == M_BELSO)
		{
			if(MunkaFolyamatban[playerid] == 1)
			{
				new haz = HaznalVan(playerid);
				if(PlayerInfo[playerid][pAccount] < BelsoArak[db] || haz == -1)
				{
					MunkaFolyamatban[playerid] = 0;
					return 1;
				}

				new kinek = HouseInfo[haz][hOwner];

				TogglePlayerControllable(playerid, true);
				ClearAnimations(playerid);

				HouseInfo[haz][hBelso] = db;
				//HazUpdate(haz, "Belso='%d'", db);
				HazUpdate(haz, HAZ_Belso);
				PlayerInfo[playerid][pAccount] -= BelsoArak[db];
				Cselekves(playerid, "felújított egy házat");
				FelujitasElfogadas[kinek] = NINCS;
				MunkaFolyamatban[playerid] = 0;
			}
		}
		else if(Munka == M_SZEMETLERAKAS)
		{
			if(!IsPlayerInAnyVehicle(playerid))
			{
				Msg(playerid, "Mivel nem vagy kocsiban, így a tartály nem tudott kiürülni! Ülj vissza a kocsiba, és kezdd újra a kiürítést!");
				MunkaFolyamatban[playerid] = 0;
				return 1;
			}
			if(MunkaFolyamatban[playerid] == 1)
			{
				new vehicleid = GetPlayerVehicleID(playerid), fizetes = SzemetAKocsiban[vehicleid]*7500;
				SendFormatMessage(playerid, COLOR_GREEN, "Sikeresen kiürítetted a tartályt, %d db szemét volt benne, a fizetésed: %s Ft", SzemetAKocsiban[vehicleid], FormatInt(fizetes));
				PlayerInfo[playerid][pPayCheck] += fizetes;
				SzemetAKocsiban[vehicleid] = 0;
				MunkaFolyamatban[playerid] = 0;
				UnFreeze(playerid);
			}
		}
		else if(Munka == M_WIFICONNECT)
		{
			if(PlayerInfo[playerid][pLaptop] == 0) { MunkaFolyamatban[playerid] = 0; return 1; }
			if(MunkaFolyamatban[playerid] == 0) return 1;
			new jelerosseg = GetWifiSignal(playerid, db);
			SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen csatlakozott a %s Wifi HotSpothoz! Jelerõsség: %d százalék", WifiPont[db][wNev], jelerosseg);
			LaptopIP[playerid] = WifiPont[db][wID];
			LaptopConnected[playerid] = true;
		}
		else if(Munka == M_OZELLATAS)
		{
			if(MunkaFolyamatban[playerid] == 0) return 1;
			DeerInfo[db][dSupplied] = true;
			SendClientMessage(playerid, COLOR_GREEN, "Elláttad az õz sérülését, most már felrakhatod õt a Yosemite platójára!");
			MunkaFolyamatban[playerid] = 0;
			UnFreeze(playerid);
			Cselekves(playerid, "ellátta egy õz sérülését", 1);
			tformat(128, "[Õz] Egészség: %d százalék\nMegölte: %s (ezzel: %s)\nEllátva", DeerInfo[db][dHealth], DeerInfo[db][dKiller], GunName(DeerInfo[db][dWeaponType]));
			UpdateDynamic3DTextLabelText(DeerInfo[db][dLabel], 0x8B4513EE, _tmpString);
		}
		else if(Munka == M_BANYASZ_KO) //bányász - HendRoox
		{
			if(MunkaFolyamatban[playerid] == 1)
			{
				new ko = Rand(0, MaxTalalas[11]) + 1;
			
				SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Bányásztál egy %dkg követ! Menj és tisztítsd meg!", ko);
				Cselekves(playerid, "lehajol és felszedi a talált kõdarabot.");
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				SetPlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS, 3930, 1, 0.207999, 0.479999, 0.000000, -28.600002, 0.799999, 0.000000);
				SetPlayerAttachedObject(playerid, ATTACH_SLOT_SISAK, 1636, 1, 0.125999, -0.119999, -0.129999, 0.000000, -67.199996, 0.000000);
				TogglePlayerControllable(playerid, true);
				MunkaFolyamatban[playerid] = 0;
			}
		}
		else if(Munka == M_BANYASZ_FELDOLGOZ)
		{
			// 1% - Gyémánt 2% - Arany
			// 57% - Vas 40% - semmi 
			new mitkeres = Rand(0,100) + 1;
			new talalt = 0;
			new szen = Rand(1, MaxTalalas[10]);
			
			if(szen > 4 && PlayerInfo[playerid][pSzen] < MAXSZEN)
			{
				if(!(PlayerInfo[playerid][pSzen] + szen > MAXSZEN))
				{
					SendFormatMessage(playerid, COLOR_GREEN, "Találtál egy %dg-os szenet! Most %dg szened van.", szen, (PlayerInfo[playerid][pSzen] + szen));
					PlayerInfo[playerid][pSzen] += szen;
				}
				else
				{
					SendFormatMessage(playerid, COLOR_GREEN, "Kicsúszott a kezedbõl egy szén! Elvesztetted!", szen, (PlayerInfo[playerid][pSzen] + szen));
					PlayerInfo[playerid][pSzen] = MAXSZEN;
				}
			}
			if(mitkeres == 1)
			{
				//gyémánt
				talalt = 1;
				if(!(PlayerInfo[playerid][pGyemant] + talalt > MAXGYEMANT))
				{
					format(string2, sizeof(string2), "Találtál egy %dg-os gyémántot! Most %dg gyémántod van.", talalt, (PlayerInfo[playerid][pGyemant] + talalt));
					PlayerInfo[playerid][pGyemant] += talalt;
				}
				else
				{
					format(string2, sizeof(string2), "Kicsúszott a kezedbõl egy gyémánt! Elvesztetted!");
					PlayerInfo[playerid][pGyemant] = MAXGYEMANT;
				}
			}
			else if(mitkeres == 2 || mitkeres == 3)
			{
				//arany
				talalt = Rand(1, MaxTalalas[8]);
				if(!(PlayerInfo[playerid][pArany] + talalt > MAXARANY))
				{
					format(string2, sizeof(string2), "Találtál egy %dg-os aranyat! Most %dg aranyad van.", talalt, (PlayerInfo[playerid][pAranym] + talalt));
					PlayerInfo[playerid][pAranym] += talalt;
				}
				else
				{
					format(string2, sizeof(string2), "Kicsúszott a kezedbõl egy arany! Elvesztetted!");
					PlayerInfo[playerid][pAranym] = MAXARANY;
				}
			}
			else if(mitkeres > 3 && mitkeres < 62)
			{
				//Vas
				talalt = Rand(1, MaxTalalas[9]);
				if(!(PlayerInfo[playerid][pVas] + talalt > MAXVAS))
				{
					format(string2, sizeof(string2), "Találtál egy %dg-os vasat! Most %dg vasad van.", talalt, (PlayerInfo[playerid][pVas] + talalt));
					PlayerInfo[playerid][pVas] += talalt;
				}
				else
				{
					format(string2, sizeof(string2), "Kicsúszott a kezedbõl egy vas! Elvesztetted!");
					PlayerInfo[playerid][pVas] = MAXVAS;
				}
			}
			else
			{
				format(string2, sizeof(string2), "A tisztító üres. Nem találtál semmit!");
			}
			SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
			vanNalaKo[playerid] = false;
			//Cselekves(playerid, "megnézi a feldolgozó tisztítóját.");
			TogglePlayerControllable(playerid, true);
			MunkaFolyamatban[playerid] = 0;
		}
		else if(Munka == M_BANYASZ_SZALLIT_KEZD)
		{
			SendClientMessage(playerid, COLOR_GREEN, "Felpakolták az árút! Menj szállítsd le a kereskedõnek.");
			SendClientMessage(playerid, COLOR_GREEN, "Megjelölve GPS-en.");
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, -2418.103, -2183.778, 33.328, 10);

			obj[0] = CreateDynamicObject(1271, -0.31780, -1.03120, 0.09020,   0.00000, 0.00000, 0.00000);
			obj[1] = CreateDynamicObject(2969, 0.43980, -0.89870, -0.14300,   0.00000, 0.00000, 0.00000);
			obj[2] = CreateDynamicObject(2926, -0.00770, -2.24900, -0.24860,   0.00000, 0.00000, 0.00000);
			obj[3] = CreateDynamicObject(2912, 0.42580, -1.46900, -0.47310,   0.00000, 0.00000, 0.00000);


			AttachDynamicObjectToVehicle(obj[0], GetPlayerVehicleID(playerid), -0.474999, -1.009999, 0.110000, 0.000000, 0.000000, 0.000000); //Object Model: 1271 | 
			AttachDynamicObjectToVehicle(obj[1], GetPlayerVehicleID(playerid), 0.289999, -0.844999, -0.119999, 0.000000, 0.000000, 0.000000); //Object Model: 2969 | 
			AttachDynamicObjectToVehicle(obj[2], GetPlayerVehicleID(playerid), 0.000000, -2.250004, -0.249999, 0.000000, 0.000000, 0.000000); //Object Model: 2926 | 
			AttachDynamicObjectToVehicle(obj[3], GetPlayerVehicleID(playerid), 0.279999, -1.449998, -0.244999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | 
			
			TogglePlayerControllable(playerid, true);
			MunkaFolyamatban[playerid] = 0;
		}
		else if(Munka == M_BANYASZ_SZALLIT_VEGE)
		{
			banyaszbsz[playerid] = false;
			DisablePlayerCheckpoint(playerid);
			
			new fizeteshez = BanyaFizu[0] * PlayerInfo[playerid][pSzenP] + BanyaFizu[1] * PlayerInfo[playerid][pVasP] + BanyaFizu[2] * PlayerInfo[playerid][pAranymP] + BanyaFizu[3] * PlayerInfo[playerid][pGyemantP];

			SendClientMessage(playerid, COLOR_GREEN, "Lepakolták az árút!");
			new string[128];
			
			format(string, sizeof(string), "Szén: %sFt, Vas: %sFt, Arany: %sFt, Gyémánt: %sFt.", FormatNumber( (BanyaFizu[0] * PlayerInfo[playerid][pSzenP]), 0, ',' ), FormatNumber( (BanyaFizu[1] * PlayerInfo[playerid][pVasP]), 0, ',' ), FormatNumber( (BanyaFizu[2] * PlayerInfo[playerid][pAranymP]), 0, ',' ), FormatNumber( (BanyaFizu[3] * PlayerInfo[playerid][pGyemantP]), 0, ',') );
			SendClientMessage(playerid, COLOR_GREEN, string);
			
			new kereskedo = floatround(float(fizeteshez) * 0.10);
			format(string, sizeof(string), "A kereskedõ lefogdta a saját részét: %sFt ( 10 százalék )", FormatNumber( kereskedo, 0, ',' ));
			SendClientMessage(playerid, COLOR_GREEN, string);
			
			fizeteshez -= kereskedo;
			format(string, sizeof(string), "Összesen: %sFt kaptál a fizetésedhez!", FormatNumber( fizeteshez, 0, ',' ));
			SendClientMessage(playerid, COLOR_GREEN, string);
			
			DestroyDynamicObject(obj[0]);
			DestroyDynamicObject(obj[1]);
			DestroyDynamicObject(obj[2]);
			DestroyDynamicObject(obj[3]);
			
			PlayerInfo[playerid][pPayCheck] += fizeteshez;
			PlayerInfo[playerid][pSzenP] = 0;
			PlayerInfo[playerid][pVasP] = 0;
			PlayerInfo[playerid][pAranymP] = 0;
			PlayerInfo[playerid][pGyemantP] = 0;

			TogglePlayerControllable(playerid, true);
			MunkaFolyamatban[playerid] = 0;
		}
		else if(Munka == M_VILLANYSZERELO_VIZSGAL)
		{
			new el = random(100);
			switch (el)
			{
				case 1..20: oszlopcsere[playerid] = true;
				default: oszlopcsere[playerid] = false;
			}
			
			if(oszlopcsere[playerid])
			{
				Msg(playerid, "Az oszlop megrongálódott. Menj vedd fel a megfelelõ jármûvet!", false, COLOR_GREEN);
				Msg(playerid, "Megvizsgáltál egy oszlopot! Fizetés: xy Ft", false, COLOR_LIGHTGREEN);
			}
			else
			{
				new Float:x, Float:y, Float:z;
				hova[playerid] = random(sizeof(VillanyszereloCheckpointok));
				
				x = VillanyszereloCheckpointok[hova[playerid]][0];
				y = VillanyszereloCheckpointok[hova[playerid]][1];
				z = VillanyszereloCheckpointok[hova[playerid]][2];
				
				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, x, y, z, 10.0);
				Msg(playerid, "Megvizsgáltál egy oszlopot és megjavítottad! Fizetés: xy Ft", false, COLOR_LIGHTGREEN);
				Msg(playerid, "Megkaptad a következõ megbízást!", false, COLOR_GREEN);
			}
				
			
			Cselekves(playerid, "megvizsgált egy oszlopot!");
			
			TogglePlayerControllable(playerid, true);
			MunkaFolyamatban[playerid] = 0;
		}
		else if(Munka == M_VILLANYSZERELO_OSZLOP)
		{
			Msg(playerid, "Sikeresen kicserélted az oszlopot! Fizetés: xy Ft", false, COLOR_LIGHTGREEN);
			Cselekves(playerid, "kicserélt egy oszlopot!");
			Msg(playerid, "Megkaptad a következõ megbízást! Menj és vedd fel a munkakocsit! (( Utility Van ))", false, COLOR_GREEN);
		
			new Float:x, Float:y, Float:z;
			hova[playerid] = random(sizeof(VillanyszereloCheckpointok));
			
			x = VillanyszereloCheckpointok[hova[playerid]][0];
			y = VillanyszereloCheckpointok[hova[playerid]][1];
			z = VillanyszereloCheckpointok[hova[playerid]][2];
			
			DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, x, y, z, 10.0);
			oszlopcsere[playerid] = false;
			TogglePlayerControllable(playerid, true);
			MunkaFolyamatban[playerid] = 0;
		}
		else if(Munka == M_SZOKTET)
		{
			Msg(playerid, "Sikeresen megszöktetted! (( Most már ki tud szállni a kocsiból! ))");
			TogglePlayerControllable(playerid, true);
			MunkaFolyamatban[playerid] = 0;
		
			CopMsg(TEAM_BLUE_COLOR, "** Figyelem! Egy rabot megszöktettek átszállítás közben! **");
		}
		else if(Munka == M_BTAKARITO)
		{
			Msg(playerid, "Feltakarítottad. Menj és szedegesd tovább a szemetet", false, COLOR_WHITE);
			Jail(playerid, "-", 15, "fegyenctelep", "Jó magaviselet!");
		
			TogglePlayerControllable(playerid, true);
			MunkaFolyamatban[playerid] = 0;
		}
		else if(Munka == M_BBANYASZ)
		{
			Msg(playerid, "Sikeresen összezúztad. Menj és zúzz tovább.", false, COLOR_WHITE);
			Jail(playerid, "-", 15, "fegyenctelep", "Jó magaviselet!");
		
			SetPlayerAttachedObject(playerid, ATTACH_SLOT_SISAK, 1636, 1, 0.125999, -0.119999, -0.129999, 0.000000, -67.199996, 0.000000);
		
			TogglePlayerControllable(playerid, true);
			MunkaFolyamatban[playerid] = 0;
		}
		else if(Munka == M_GRAFFITI)
		{
			KeyGraffiti[playerid] = Rand(0, 1);
			
			if(KeyCount[playerid] == 10)
			{
				new id = SzerkesztGraffiti[playerid];
				SzerkesztGraffiti[playerid] = NINCS;
				KellGomb[playerid] = NINCS;
				
				KeyCount[playerid] = 0;
				MunkaTimerID[playerid] = NINCS;
				TogglePlayerControllable(playerid, true);
				ClearAnimations(playerid);
			
				SendClientMessage(playerid, COLOR_BLUE, "Sikeresen felfestetted a Graffitid!");
				format(Graffiti[id][gNev], 128, ICPlayerName(playerid));
				Graffiti[id][gVId] = PlayerInfo[playerid][pID];

				INI_Save(INI_TYPE_GRAFFITI, id);
				new szoveg[128];
				format(szoveg, sizeof(szoveg), "<< Graffiti: %s létrehozott egy Graffitit! ID: %d Szöveg: %s >>", PlayerName(playerid), Graffiti[id][gId], Graffiti[id][gSzoveg]);
				ABroadCast(COLOR_LIGHTRED, szoveg, 1);
				
				return 1;
			}
			
			if(KeyCount[playerid] >= -1)
			{
				if(KeyGraffiti[playerid] == 0)
					SendFormatMessage(playerid, COLOR_BLUE, "Graffiti: Festéshez nyomd meg: Y (%d/10)", KeyCount[playerid]+1), KellGomb[playerid] = 1;
				else if(KeyGraffiti[playerid] == 1)
					SendFormatMessage(playerid, COLOR_BLUE, "Graffiti: Festéshez nyomd meg: N (%d/10)", KeyCount[playerid]+1), KellGomb[playerid] = 1;
				
				MunkaTimerID[playerid]=SetTimerEx("Munkavege", 3000, false, "dd", playerid, M_GRAFFITI);
			}
			else
			{
				new id = SzerkesztGraffiti[playerid];
				SzerkesztGraffiti[playerid] = NINCS;
				KellGomb[playerid] = NINCS;
				KeyCount[playerid] = 0;
				TogglePlayerControllable(playerid, true);
				ClearAnimations(playerid);
				
				Graffiti[id][gVan] = false;
				DestroyDynamicObject(Graffiti[id][gObject]);
				
				SendClientMessage(playerid, COLOR_BLUE, "Graffiti: Túl sok elrontás miatt menthetetlen firkát csináltál.");
			}
		}
	 	else
	 	    SendFormatMessage(playerid, COLOR_RED, "Error... [%d]", Munka);

		
		MunkaFolyamatban[playerid] = 0;
	}

	return 1;
}


fpublic TakeKalap(playerid, giveplayerid)
{
	if(IsPlayerInAnyVehicle(playerid)) return 1;
	if(Sisak[playerid] == 1) return Msg(playerid, "Sisakra kalapot?");
	if(KalapbanVan[playerid] == 1) return Msg(playerid, "Már van rajtad kalap..");
	if(GetPlayerSkin(giveplayerid) == 283) SetPlayerSkin(giveplayerid,310);
	if(GetPlayerSkin(giveplayerid) == 288) SetPlayerSkin(giveplayerid,311);
	if(KalapbanVan[giveplayerid] == 1)
	{
		KalapbanVan[giveplayerid] = 0;
	}
	
	if(IsPlayerAttachedObjectSlotUsed(giveplayerid, ATTACH_SLOT_SISAK)) RemovePlayerAttachedObject(giveplayerid, ATTACH_SLOT_SISAK);
	if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_SLOT_SISAK)) RemovePlayerAttachedObject(playerid, ATTACH_SLOT_SISAK);
	switch(GetPlayerSkin(playerid))
	{
		#define KSPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, ATTACH_SLOT_SISAK, 19095, 2, (%0), (%1), (%2), (%3), (%4), (%5));
		case 0, 65, 74, 149, 208, 273:  KSPAO{1.00000, 0.000000, 0.000000, 88.000000, 0.000000, 0.000000}
		case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: KSPAO{1.070000, 0.000000, 0.000000, 88.000000, 0.000000, 0.000000}
		case 7, 10: KSPAO{1.00000, 0.019999, 0.000000, 88.000000, 0.000000, 0.000000}
		case 9: KSPAO{1.009999, 0.019999, 0.000000, 88.000000, 0.000000, 0.000000}
		case 11..13: KSPAO{1.000000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
		case 15: KSPAO{1.059999, 0.000000, 0.000000, 88.000000, 0.000000, 0.000000}
		case 17..21: KSPAO{1.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: KSPAO{1.079999, 0.019999, 0.000000, 88.000000, 0.000000, 0.000000}
		case 40: KSPAO{1.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 50, 100..103, 148, 150..189, 222: KSPAO{10.070000, 0.009999, 0.000000, 88.000000, 0.000000, 0.000000}
		case 51..54: KSPAO{1.100000, 0.009999, 0.000000, 88.000000, 0.000000, 0.000000}
		case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: KSPAO{1.070000, 0.019999, 0.000000, 88.000000, 0.000000, 0.000000}
		case 59..62: KSPAO{1.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 77: KSPAO{1.059999, 0.019999, 0.000000, 87.000000, 0.000000, 0.000000}
		case 85, 88, 89: KSPAO{1.070000, 0.039999, 0.000000, 88.000000, 0.000000, 0.000000}
		case 90..97: KSPAO{1.050000, 0.019999, 0.000000, 88.000000, 0.000000, 0.000000}
		case 132: KSPAO{1.000000, 0.019999, 0.000000, 88.000000, 0.000000, 0.000000}
		case 144..146: KSPAO{1.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
		case 220: KSPAO{1.029999, 0.019999, 0.000000, 88.000000, 0.000000, 0.000000}
		case 223, 246: KSPAO{1.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
		case 224..245: KSPAO{1.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 294: KSPAO{1.070000, 0.019999, 0.000000, 91.000000, 0.000000, 0.000000}
		case 295: KSPAO{1.050000, 0.019998, 0.000000, 86.000000, 0.000000, 0.000000}
		case 296..298: KSPAO{10.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 299: KSPAO{1.064998, 0.019999, 0.000000, 88.000000, 0.000000, 0.000000}
		case 300..311: KSPAO{1.070000, 0.019999, 0.000000, 88.000000, 0.000000, 0.000000}
	}
	Msg(playerid, "Elloptad a kalapját.");
	Msg(giveplayerid, "Ellopták a kalapod!");
	Cselekves(playerid, "ellopott egy kalapot");
	KalapbanVan[playerid] = 1;
	return 1;
}

fpublic removeKalap(playerid)
{
	if(Sisak[playerid] == 1) return 1;
	if(KalapbanVan[playerid] == 1)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_SLOT_SISAK)) RemovePlayerAttachedObject(playerid, ATTACH_SLOT_SISAK);
		KalapbanVan[playerid] = 0;
	}
	return 1;
}

fpublic StoppedVehicle()
{
	new Float:x,Float:y,Float:z;
	new Float:distance,value;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInAnyVehicle(i))
			{
				//new VID;
				//VID = GetPlayerVehicleID(i);
				GetPlayerPos(i, x, y, z);
				distance = floatsqroot(floatpower(floatabs(floatsub(x,SavePlayerPos[i][LastX])),2)+floatpower(floatabs(floatsub(y,SavePlayerPos[i][LastY])),2)+floatpower(floatabs(floatsub(z,SavePlayerPos[i][LastZ])),2));
				value = floatround(distance * 3600);
				if(UpdateSeconds > 1)
				{
					value = floatround(value / UpdateSeconds);
				}
				if(SpeedMode)
				{
	            }
//				if(value == 0)
//				{
//					Gas[VID]++;
//				}
				SavePlayerPos[i][LastX] = x;
				SavePlayerPos[i][LastY] = y;
				SavePlayerPos[i][LastZ] = z;
			}
		}
	}
	return 1;
}

fpublic PrintBizInfo(playerid,targetid)
{
	new coordsstring[256];
	SendClientMessage(playerid, COLOR_GREEN,"_________________Tulaj______________");
	format(coordsstring, sizeof(coordsstring),"*** %s ***",BizzInfo[targetid][bMessage]);
	SendClientMessage(playerid, COLOR_WHITE,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Zárva: %d Belépõ: %dFT Széf: %sFT", BizzInfo[targetid][bLocked], BizzInfo[targetid][bEntranceCost], FormatNumber( BizzInfo[targetid][bTill], 0, ','));
	SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Százalék(részesedés): %d százalék", BizzInfo[targetid][bSzazalek]);    
	SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Prodok(Árú): %d/%d Másodtulaj: %s", BizzInfo[targetid][bProducts],BizzInfo[targetid][bMaxProducts],BizzInfo[targetid][bExtortion]);
	SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
}
fpublic PrintBizInfo2(playerid,targetid)
{
	new coordsstring[256];
	SendClientMessage(playerid, COLOR_GREEN,"____________MásodTulaj____________");
	format(coordsstring, sizeof(coordsstring),"*** %s ***",BizzInfo[targetid][bMessage]);
	SendClientMessage(playerid, COLOR_WHITE,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Zárva: %d Belépõ: %dFT Széf: %sFT", BizzInfo[targetid][bLocked], BizzInfo[targetid][bEntranceCost], FormatNumber( BizzInfo[targetid][bTill2], 0, ','));    
	SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Százalék(részesedés): %d százalék", BizzInfo[targetid][bSzazalek]);    
	SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Prodok(Árú): %d/%d Tulaj: %s", BizzInfo[targetid][bProducts],BizzInfo[targetid][bMaxProducts],BizzInfo[targetid][bOwner]);
	SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
}

fpublic ShowDetektivPlayerStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "Férfi"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "Nõ"; }
  		new otext[20];
		if(PlayerInfo[targetid][pOrigin] == 1) { otext = "USA"; }
		else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "Európa"; }
		else if(PlayerInfo[targetid][pOrigin] == 3) { otext = "Ázsia"; }
		new ttext[32];


		if(PlayerInfo[targetid][pMember] > 0)
		{
			new szam = PlayerInfo[targetid][pMember] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else if(PlayerInfo[targetid][pLeader] > 0)
		{
			new szam = PlayerInfo[targetid][pLeader] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else
			ttext = "Civil";

		new dtext[20];
		if(STDPlayer[targetid] == 1) { dtext = "Chlamydia"; }
		else if(STDPlayer[targetid] == 2) { dtext = "Gonorrhea"; }
		else if(STDPlayer[targetid] == 3) { dtext = "Syphilis"; }
		else { dtext = "Nincs"; }

		new rtext[32];
		if(PlayerInfo[targetid][pMember] > 0 || PlayerInfo[targetid][pLeader] > 0)//PD Ranks
		{
			new rang = PlayerInfo[targetid][pRank], munka;
			if(PlayerInfo[targetid][pLeader] != 0)
				munka = PlayerInfo[targetid][pLeader] - 1;
			else
				munka = PlayerInfo[targetid][pMember] - 1;

			if(rang <= 0) rtext = Rangok[munka][0];
			else if(rang >= 1 && rang <= 12) rtext = Rangok[munka][rang];
			else rtext = Rangok[munka][12];
		}
		else
		{
		    rtext = "-";
		}
        new jtext[20], jtext2[20];
		
		jtext = MunkaNevek(targetid, 1);
		jtext2  = MunkaNevek(targetid, 2);

		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		new age = PlayerInfo[targetid][pAge];
		new ptime = PlayerInfo[targetid][pConnectTime];
		new arrests = PlayerInfo[targetid][pArrested];
		new pnumber = PlayerInfo[targetid][pPnumber];
		new housekey = PlayerInfo[targetid][pPhousekey];
		new housekey2 = PlayerInfo[targetid][pPhousekey2];
		new housekey3 = PlayerInfo[targetid][pPhousekey3];

		new coordsstring[256];

		new droghatas = PlayerInfo[targetid][pDrogido];
		new BizniszSzam = PlayerInfo[targetid][pPbiskey];

		new vkocsi[40], vkocsi2[40], vkocsi3[40], bkocsi[40], id;

		if(PlayerInfo[targetid][pPcarkey] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey]][cId];
			format(vkocsi, sizeof(vkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi = "Nincs";

		if(PlayerInfo[targetid][pPcarkey2] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey2]][cId];
			format(vkocsi2, sizeof(vkocsi2), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi2 = "Nincs";

		if(PlayerInfo[targetid][pPcarkey3] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey3]][cId];
			format(vkocsi3, sizeof(vkocsi2), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi3 = "Nincs";

		if(HireCar[targetid] != NINCS)
		{
			id = HireCar[targetid];
			format(bkocsi, sizeof(bkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			bkocsi = "Nincs";

		new fizu = PlayerInfo[targetid][pPayCheck];
		new bcash = PlayerInfo[targetid][pAccount];

		new premiuminfo[45];
		if(PlayerInfo[targetid][pPremiumCsomag] != 0)
		{
			new ido, pido, kul;
			pido = PlayerInfo[targetid][pPremiumIdo];
			ido = UnixTime;
			kul = pido - ido;
			premiuminfo = "Idõ:";
			if(kul >= 604800)
				Format(premiuminfo, "%s %dhét", premiuminfo, floatround((kul / 604800), floatround_ceil));
			else if(kul >= 86400)
				Format(premiuminfo, "%s %dnap", premiuminfo, floatround((kul / 86400), floatround_ceil));
			else
				Format(premiuminfo, "%s %dóra", premiuminfo, floatround((kul / 3600), floatround_ceil));

			Format(premiuminfo, "%s - Csomag: %dFt - Pont: %d", premiuminfo, PlayerInfo[targetid][pPremiumCsomag], PlayerInfo[targetid][pPremiumPont]);
		}
		else if(PlayerInfo[playerid][pPremiumPont] > 0)
			Format(premiuminfo, "P. Pont: %d", PlayerInfo[targetid][pPremiumPont]);
		else
			premiuminfo = "Nincs prémiumod";

		if(PlayerInfo[playerid][pDetSkill] < 50 && !IsHitman(playerid)) return Msg(playerid, "A detektív skilled túl alacsony(Minimum 2).");
		SendClientMessage(playerid, COLOR_GREEN,"================================[ Adatok ]================================");
		if(PlayerInfo[playerid][pDetSkill] >= 50 || IsHitman(playerid))
		{
			if(PlayerInfo[playerid][pHamisNev] == 1)
				format(coordsstring, sizeof(coordsstring),"*** Név: %s ***", PlayerInfo[targetid][pHamisNev]);
			else
				format(coordsstring, sizeof(coordsstring),"*** Név: %s ***", ICPlayerName(targetid));
			SendClientMessage(playerid, COLOR_WHITE,coordsstring);

			format(coordsstring, sizeof(coordsstring), "Nem: %s | Életkor: %d | Származás: %s | Bank: %sFt | Telefonszám: %s", atext,age,otext, FormatNumber( bcash, 0, ',' ),FormatNumber( pnumber, 0, '-' ) );
			SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		}
		if(PlayerInfo[playerid][pDetSkill] >= 100 || IsHitman(playerid))
		{
			format(coordsstring, sizeof(coordsstring), "Ház: %d/%d/%d | Biznisz: %d | Házastárs: %s | Játszott órák: %d | FõMunka: %s | Másodmunka: %s", housekey, housekey2, housekey3, BizniszSzam ,married, ptime, jtext, jtext2);
			SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
		}
		if(PlayerInfo[playerid][pDetSkill] >= 200 || IsHitman(playerid))
		{
			format(coordsstring, sizeof(coordsstring), "Letartóztatások: %d | Szervezet: %s | Rang: %s | Betegség: %s | Droghatás: %dmp", arrests,ttext,rtext,dtext,droghatas);
			SendClientMessage(playerid, COLOR_GRAD3,coordsstring);
		}
		if(PlayerInfo[playerid][pDetSkill] >= 400 || IsHitman(playerid))
		{
			format(coordsstring, sizeof(coordsstring), "Saját autók: %s/%s/%s | Bérkocsi: %s | Fizetés: %sFt | BankSzámlaSzám: %s ", vkocsi, vkocsi2, vkocsi3, bkocsi, FormatNumber( fizu, 0, '-' ), FormatNumber( PlayerInfo[targetid][pBankSzamlaSzam], 0, '-' ));
			SendClientMessage(playerid, COLOR_GRAD4,coordsstring);
		}
	}
	return 1;
}

fpublic ShowStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "Férfi"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "Nõ"; }
  		new otext[20];
		if(PlayerInfo[targetid][pOrigin] == 1) { otext = "USA"; }
		else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "Európa"; }
		else if(PlayerInfo[targetid][pOrigin] == 3) { otext = "Ázsia"; }
		new ttext[32];


		if(PlayerInfo[targetid][pMember] > 0)
		{
			new szam = PlayerInfo[targetid][pMember] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else if(PlayerInfo[targetid][pLeader] > 0)
		{
			new szam = PlayerInfo[targetid][pLeader] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else
			ttext = "Civil";

		new dtext[20];
		if(STDPlayer[targetid] == 1) { dtext = "Chlamydia"; }
		else if(STDPlayer[targetid] == 2) { dtext = "Gonorrhea"; }
		else if(STDPlayer[targetid] == 3) { dtext = "Syphilis"; }
		else { dtext = "Nincs"; }



		new rtext[32];

		if(PlayerInfo[targetid][pMember] > 0 || PlayerInfo[targetid][pLeader] > 0)//PD Ranks
		{
			new rang = PlayerInfo[targetid][pRank], munka;
			if(PlayerInfo[targetid][pLeader] > 0 && PlayerInfo[targetid][pLeader] < MAX_FRAKCIO)
				munka = PlayerInfo[targetid][pLeader] - 1;
			else
				munka = PlayerInfo[targetid][pMember] - 1;

			if(rang <= 0) rtext = Rangok[munka][0];
			else if(rang >= 1 && rang <= 12) rtext = Rangok[munka][rang];
			else rtext = Rangok[munka][12];
		}
		else
		{
		    rtext = "-";
		}
        new jtext[20], jtext2[20];

 		jtext = MunkaNevek(targetid, 1);
		jtext2  = MunkaNevek(targetid, 2);
		
		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		new age = PlayerInfo[targetid][pAge];
		new ptime = PlayerInfo[targetid][pConnectTime];
		new arrests = PlayerInfo[targetid][pArrested];
		new pnumber = PlayerInfo[targetid][pPnumber];
		new housekey = PlayerInfo[targetid][pPhousekey];
		new housekey2 = PlayerInfo[targetid][pPhousekey2];
		new housekey3 = PlayerInfo[targetid][pPhousekey3];
		new ohousekey = PlayerInfo[targetid][pHazKulcsok][0];
		new ohousekey2 = PlayerInfo[targetid][pHazKulcsok][1];
		new ohousekey3 = PlayerInfo[targetid][pHazKulcsok][2];
		
		new coordsstring[256];

		new droghatas = PlayerInfo[targetid][pDrogido];
		new BizniszSzam = PlayerInfo[targetid][pPbiskey];
		new TarsBizniszSzam = PlayerInfo[targetid][pBizniszKulcs];
		new benzinkut = PlayerInfo[targetid][pBenzinkut];

		new vkocsi[40], vkocsi2[40], vkocsi3[40], bkocsi[40], id, garazs[20];
		new okocsi[40], okocsi2[40], okocsi3[40];
		
		

		if(PlayerInfo[targetid][pPcarkey] != NINCS && IsValidVehicleID(CarInfo[PlayerInfo[targetid][pPcarkey]][cId]))
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey]][cId];
			format(vkocsi, sizeof(vkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi = "Nincs";

		if(PlayerInfo[targetid][pPcarkey2] != NINCS && IsValidVehicleID(CarInfo[PlayerInfo[targetid][pPcarkey2]][cId]))
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey2]][cId];
			format(vkocsi2, sizeof(vkocsi2), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi2 = "Nincs";

		if(PlayerInfo[targetid][pPcarkey3] != NINCS && IsValidVehicleID(CarInfo[PlayerInfo[targetid][pPcarkey3]][cId]))
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey3]][cId];
			format(vkocsi3, sizeof(vkocsi3), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi3 = "Nincs";
			
		if(PlayerInfo[targetid][pKulcsok][0] != NINCS && IsValidVehicleID(CarInfo[PlayerInfo[targetid][pKulcsok][0]][cId]))
		{
			//id = PlayerInfo[targetid][pKulcsok][0];
			id = CarInfo[PlayerInfo[targetid][pKulcsok][0]][cId];
			format(okocsi, 40, "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			okocsi = "Nincs";

		if(PlayerInfo[targetid][pKulcsok][1] != NINCS && IsValidVehicleID(CarInfo[PlayerInfo[targetid][pKulcsok][1]][cId]))
		{
			//id = PlayerInfo[targetid][pKulcsok][1];
			id = CarInfo[PlayerInfo[targetid][pKulcsok][1]][cId];
			format(okocsi2, 40, "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			okocsi2 = "Nincs";

		if(PlayerInfo[targetid][pKulcsok][2] != NINCS && IsValidVehicleID(CarInfo[PlayerInfo[targetid][pKulcsok][2]][cId]))
		{
			//id = PlayerInfo[targetid][pKulcsok][2];
			id = CarInfo[PlayerInfo[targetid][pKulcsok][2]][cId];
			format(okocsi3, 40, "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			okocsi3 = "Nincs";

		if(HireCar[targetid] != NINCS)
		{
		
			id = HireCar[targetid];
			new munkakocsi = IsMunkaKocsi(id);
		
			new mid = MunkaKocsiID(id, munkakocsi);
			new ido = MunkaKocsi[munkakocsi][mid][kBerelido];
			format(bkocsi, sizeof(bkocsi), "%s(%d,%d perc)", GetVehicleModelName(GetVehicleModel(id)-400), id, ((ido-UnixTime)/3600*60));
		}
		else
			bkocsi = "Nincs";

        if(PlayerInfo[targetid][pGarazs] != NINCS)
		{
			format(garazs, sizeof(garazs), "%d", PlayerInfo[targetid][pGarazs]);
		}
		else
			garazs = "Nincs";

		new fizu = PlayerInfo[targetid][pPayCheck];
		new bcash = PlayerInfo[targetid][pAccount];
		new barany = PlayerInfo[targetid][pAranyBank];
		new Float:bkamat = PlayerInfo[targetid][pAranyBank] * ARANY_KAMAT;

		new premiuminfo[45];
		if(PlayerInfo[targetid][pPremiumCsomag] != 0)
		{
			new ido, pido, kul;
			pido = PlayerInfo[targetid][pPremiumIdo];
			ido = UnixTime;
			kul = pido - ido;
			premiuminfo = "Idõ:";
			if(kul >= 604800)
				Format(premiuminfo, "%s %dhét", premiuminfo, floatround((kul / 604800), floatround_ceil));
			else if(kul >= 86400)
				Format(premiuminfo, "%s %dnap", premiuminfo, floatround((kul / 86400), floatround_ceil));
			else
				Format(premiuminfo, "%s %dóra", premiuminfo, floatround((kul / 3600), floatround_ceil));

			Format(premiuminfo, "%s - Csomag: %dFt - Pont: %d", premiuminfo, PlayerInfo[targetid][pPremiumCsomag], PlayerInfo[targetid][pPremiumPont]);
		}
		else if(PlayerInfo[targetid][pPremiumPont] > 0)
			Format(premiuminfo, "P.Pont: %d", PlayerInfo[targetid][pPremiumPont]);
		else
			premiuminfo = "Nincs prémiumod";

		SendClientMessage(playerid, COLOR_GREEN,"================================[ Adataid ]================================");

		if(PlayerInfo[playerid][pHamisNev] == 0)
			format(coordsstring, sizeof(coordsstring),"*** Név: %s ***", ICPlayerName(targetid));
		else
			format(coordsstring, sizeof(coordsstring),"*** Név: %s ***", PlayerInfo[targetid][pHamisNev]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);

		format(coordsstring, sizeof(coordsstring), "Nem: %s | Életkor: %d | Származás: %s | Bank: %sFt | Telefonszám: %s", atext,age,otext,  FormatNumber( bcash, 0, ',' ), FormatNumber( pnumber, 0, '-' ));
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);

		format(coordsstring, sizeof(coordsstring), "Ház: %d/%d/%d | Biznisz: %d | Biznisz Társtulaj: %d | Házastárs: %s | FõMunka: %s | Másodmunka: %s", housekey, housekey2, housekey3, BizniszSzam, TarsBizniszSzam, married, jtext, jtext2);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);

		format(coordsstring, sizeof(coordsstring), "Letartóztatások: %d | Házkulcsok: %d/%d/%d | Szervezet: %s | Rang: %s | Betegség: %s", arrests, ohousekey, ohousekey2, ohousekey3, ttext,rtext,dtext);
		SendClientMessage(playerid, COLOR_GRAD3,coordsstring); // Arany (bank): %ddb (%.3f%%) barany,bkamat

		format(coordsstring, sizeof(coordsstring), "Jármûvek: %s/%s/%s | Pótkulcsok: %s/%s/%s | Számlaszám: %d | Jelszó: %d | Arany (bank): %ddb (%.3f%%)", vkocsi, vkocsi2, vkocsi3, okocsi, okocsi2, okocsi3, PlayerInfo[targetid][pBankSzamlaSzam], PlayerInfo[targetid][pBankSzamlaJelszo], barany, bkamat);
		SendClientMessage(playerid, COLOR_GRAD4,coordsstring);

		format(coordsstring, sizeof(coordsstring), "Szint: %d | Játszott órák: %d | Szintlépés: %dóra | Fizetés: %sFt | Droghatás: %dmp", PlayerInfo[targetid][pLevel], ptime, ((PlayerInfo[targetid][pLevel]+1)*levelexp) - PlayerInfo[targetid][pExp], FormatNumber( fizu, 0, ',' ), droghatas);
		SendClientMessage(playerid, COLOR_GRAD5,coordsstring);

		//format(coordsstring, sizeof(coordsstring), "Garázs: %s | %s | Bérjármû: %s | PrémiumInfo: %s ", garazs, JHGarazs(targetid), bkocsi, premiuminfo);
		//SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
		SendFormatMessage(playerid, COLOR_GRAD5, "Garázs: %s | %s | Bérjármû: %s | PrémiumInfo: %s | Benzinkút: %d", garazs, JHGarazs(targetid), bkocsi, premiuminfo, benzinkut);
		SendClientMessage(playerid, COLOR_GREEN,"========================================================================");
	}
}

fpublic ShowZseb(playerid, targetid)
{
    if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid))
	{
		new lotto = PlayerInfo[targetid][pLottoNr];

		new coordsstring[256];

		new cash = GetMoney(targetid);
		new mats = PlayerInfo[targetid][pMats];
		new kokain = PlayerInfo[targetid][pKokain];
		new heroin = PlayerInfo[targetid][pHeroin];
		new marihuana = PlayerInfo[targetid][pMarihuana];

		new muanyag = PlayerInfo[targetid][pMuanyag];
		new cserje = PlayerInfo[targetid][pCserje];
		new mak = PlayerInfo[targetid][pMak];
		new cannabis = PlayerInfo[targetid][pCannabis];
		new fem = PlayerInfo[playerid][pFem];
		new kotszer = PlayerInfo[targetid][pKotszer];
		new cigi = PlayerInfo[targetid][pCigi];
		new kaja = PlayerInfo[targetid][pKaja];
		new alma = PlayerInfo[targetid][pAlma];
		new tolto = PlayerInfo[targetid][pAkkuTolto];
		new olaj = PlayerInfo[targetid][pMotorolaj];
		new arany = PlayerInfo[targetid][pArany];
		
		#if defined SYSTEM_BONUS
		new lada = CountUnusedTokens(targetid);
		new ladakulcs = PlayerInfo[targetid][pLadaKulcs];
		#endif
		
		new bkabel[40]; 
		
		if(PlayerInfo[targetid][pBikazoKabel] > 0)
		{
			bkabel = "Van";
		}
		else
			bkabel = "Nincs";
			
		new szen = PlayerInfo[targetid][pSzen];
		new vas = PlayerInfo[targetid][pVas];
		new aranym = PlayerInfo[targetid][pAranym];
		new gyemant = PlayerInfo[targetid][pGyemant];

		SendClientMessage(playerid, COLOR_GREEN,"================================[ Zsebed tartalma ]================================");

		format(coordsstring, sizeof(coordsstring), "Készpénz: %s Ft | Lottószelvény: %d | Mûanyag: %d/%d | Kokacserje: %d/%d | Mák: %d/%d | Cannabis: %d/%d", FormatNumber( cash, 0, ',' ), lotto, MAXMUANYAG, muanyag, MAXCSERJE, cserje, MAXMAK, mak, MAXCANNABIS, cannabis);
		SendClientMessage(playerid, COLOR_GRAD1, coordsstring);

		format(coordsstring, sizeof(coordsstring), "Kokain: %d/%d | Heroin: %d/%d | Marihuana: %d/%d | Material: %d/%d | Fém: %d/%d", MAXKOKAIN, kokain, MAXHEROIN, heroin, MAXMARIHUANA, marihuana, MAXMATI, mats, MAXFEM, fem);
		SendClientMessage(playerid, COLOR_GRAD2, coordsstring);

		format(coordsstring, sizeof(coordsstring), "Kötszer: %ddb | Cigi: %ddb | Kaja: %d/%d | Alma: %d/%d | Akkutöltõ: %ddb | Bikázókábel: %s | Motorolaj: %ddb", kotszer, cigi, MAXKAJA, kaja, MAXALMA, alma, tolto, bkabel, olaj);
		SendClientMessage(playerid, COLOR_GRAD3, coordsstring);
		
		#if defined SYSTEM_BONUS
		format(coordsstring, sizeof(coordsstring), "Arany: %ddb | Láda: %ddb | Láda kulcs: %d/%d", arany, lada, ladakulcs, BONUS_MAX_PLAYER_KEYS);
		#else
		format(coordsstring, sizeof(coordsstring), "Arany: %ddb", arany);
		#endif
		
		SendClientMessage(playerid, COLOR_GRAD3, coordsstring);
		
		/*format(coordsstring, sizeof(coordsstring), "Mikulás sapka: %d | Virgács: %d | Mikulás csomag: %d",PlayerInfo[playerid][pMikulasSapka],PlayerInfo[playerid][pVirgacs],PlayerInfo[playerid][pMikulasCsomag]);
		SendClientMessage(playerid, COLOR_GRAD3, coordsstring);*/

		// fegyverek és lõszerek listázása
		new str[128], wep;
		
		// fegyverek
		for(new w = 0; w < MAX_PLAYER_WEAPONS; w++)
		{
			if((wep = PlayerWeapons[targetid][pWeapon][w]))
			{
				if(!strlen(str))
					format(str, 128, "Fegyver: [%d]%s", wep, aWeaponNames[wep]);
				else
					format(str, 128, "%s, [%d]%s", str, wep, aWeaponNames[wep]);
			}
		}
		
		if(strlen(str))
			SendClientMessage(playerid, COLOR_GRAD4, str), str = "";
		else
			SendClientMessage(playerid, COLOR_GRAD4, "Fegyver: nincs");
		
		// lõszerek
		for(new w = 1; w < MAX_WEAPONS; w++)
		{
			if(WeaponAmmo(targetid, w) > 0)
			{
				if(strlen(str) > 100)
					SendClientMessage(playerid, COLOR_GRAD4, str), str = "";
					
				if(!strlen(str))
					format(str, 128, "Lõszer: [%d]%s[%ddb]", w, GunName(w), WeaponAmmo(targetid, w));
				else
					format(str, 128, "%s, [%d]%s[%ddb]", str, w, GunName(w), WeaponAmmo(targetid, w));
			}
		}
		
		if(strlen(str))
			SendClientMessage(playerid, COLOR_GRAD4, str), str = "";
		else
			SendClientMessage(playerid, COLOR_GRAD4, "Lõszer: nincs");

		if(LMT(playerid, FRAKCIO_SCPD))
		{
			new strfx[128];
			strfx = "Gumilövedék: ";
			if(GetGumiLovedek(playerid, WEAPON_AK47) > 0)
				Format(strfx, "%s[30]AK47[%ddb], ", strfx, GetGumiLovedek(playerid, WEAPON_AK47));

			if(GetGumiLovedek(playerid, WEAPON_M4) > 0)
				Format(strfx, "%s[31]M4A1[%ddb], ", strfx, GetGumiLovedek(playerid, WEAPON_M4));

			if(GetGumiLovedek(playerid, WEAPON_MP5) > 0)
				Format(strfx, "%s[29]Mp5[%ddb], ", strfx, GetGumiLovedek(playerid, WEAPON_MP5));

			if(GetGumiLovedek(playerid, WEAPON_SHOTGSPA) > 0)
				Format(strfx, "%s[27]Combat[%ddb], ", strfx, GetGumiLovedek(playerid, WEAPON_SHOTGSPA));

			if(GetGumiLovedek(playerid, WEAPON_SHOTGUN) > 0)
				Format(strfx, "%s[25]Shotgun[%ddb], ", strfx, GetGumiLovedek(playerid, WEAPON_SHOTGUN));

			if(GetGumiLovedek(playerid, WEAPON_DEAGLE) > 0)
				Format(strfx, "%s[24]Deagle[%ddb], ", strfx, GetGumiLovedek(playerid, WEAPON_DEAGLE));

			if(GetGumiLovedek(playerid, WEAPON_COLT45) > 0)
				Format(strfx, "%s[22]Colt45[%ddb], ", strfx, GetGumiLovedek(playerid, WEAPON_COLT45));

			if(GetGumiLovedek(playerid, WEAPON_SILENCED) > 0)
				Format(strfx, "%s[23]SilencedColt45[%ddb], ", strfx, GetGumiLovedek(playerid, WEAPON_SILENCED));

			if(GetGumiLovedek(playerid, WEAPON_RIFLE) > 0)
				Format(strfx, "%s[33]Rifle[%ddb], ", strfx, GetGumiLovedek(playerid, WEAPON_RIFLE));

			if(GetGumiLovedek(playerid, WEAPON_SNIPER) > 0)
				Format(strfx, "%s[34]Sniper[%ddb], ", strfx, GetGumiLovedek(playerid, WEAPON_SNIPER));

			if(egyezik(strfx, "Gumilövedék: "))
				SendClientMessage(playerid, COLOR_GRAD4, "Gumilövedék: Nincs");
			else
			{
				strdel(strfx, strlen(strfx)-2, strlen(strfx));

				SendClientMessage(playerid, COLOR_GRAD4, strfx);
			}
		}
		
		//bányász
		if(AMT(playerid, MUNKA_BANYASZ))
		{
			format(coordsstring, sizeof(coordsstring), "Szén: %d/%dg | Vas: %d/%dg | Arany: %d/%dg | Gyémánt: %d/%dg", MAXSZEN, szen, MAXVAS, vas, MAXARANY, aranym, MAXGYEMANT, gyemant);
			SendClientMessage(playerid, COLOR_GRAD5, coordsstring);
		}
		//SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
}

//---------------------------------------------------------

fpublic LoadStuff()
{
	new fajl[32] = "Config/stuff.cfg";

	if(!fexist(fajl))
		dini_Create(fajl);

	if(dini_Isset(fajl, "Jackpot")) Jackpot = dini_Int(fajl, "Jackpot"); else dini_IntSet(fajl, "Jackpot", Jackpot);
	if(dini_Isset(fajl, "Nyeroszam")) Nyeroszam = dini_Int(fajl, "Nyeroszam"); else dini_IntSet(fajl, "Nyeroszam", Nyeroszam);
	if(dini_Isset(fajl, "Kassza")) Tax = dini_Int(fajl, "Kassza"); else dini_IntSet(fajl, "Kassza", Tax);
	if(dini_Isset(fajl, "Ado")) TaxValue = dini_Int(fajl, "Ado"); else dini_IntSet(fajl, "Ado", TaxValue);
	if(dini_Isset(fajl, "Igenyles")) IgenylesEngedelyezve = dini_Int(fajl, "Igenyles"); else dini_IntSet(fajl, "Igenyles", IgenylesEngedelyezve);

	if(dini_Isset(fajl, "Rendelve")) RendeltKocsik = dini_Int(fajl, "Rendelve"); else dini_IntSet(fajl, "Rendelve", RendeltKocsik);
	if(dini_Isset(fajl, "RendelesIdo")) RendelesDatum = dini_Int(fajl, "RendelesIdo"); else dini_IntSet(fajl, "RendelesIdo", RendelesDatum);
	if(dini_Isset(fajl, "RendelesAlatt")) RendelesAlatt = dini_Int(fajl, "RendelesAlatt"); else dini_IntSet(fajl, "RendelesAlatt", RendelesAlatt);
	if(dini_Isset(fajl, "RendelesPenz")) RendelesPenz = dini_Int(fajl, "RendelesPenz"); else dini_IntSet(fajl, "RendelesPenz", RendelesPenz);
	if(dini_Isset(fajl, "RendelesIdo")) RendelesIdo = dini_Int(fajl, "RendelesIdo"); else dini_IntSet(fajl, "RendelesIdo", RendelesIdo);
	if(dini_Isset(fajl, "RendelesModel")) RendelesModel = dini_Int(fajl, "RendelesModel"); else dini_IntSet(fajl, "RendelesModel", RendelesModel);
	if(dini_Isset(fajl, "FBIKassza")) FBISzef = dini_Int(fajl, "FBIKassza"); else dini_IntSet(fajl, "FBIKassza", FBISzef);
	if(dini_Isset(fajl, "BankSzef")) BankSzef = dini_Int(fajl, "BankSzef"); else dini_IntSet(fajl, "BankSzef", BankSzef);
	/*if(dini_Isset(fajl, "BankTulaj")) BankTulaj = dini_Int(fajl, "BankTulaj"); else dini_IntSet(fajl, "BankTulaj", BankTulaj);
	if(dini_Isset(fajl, "BankMasodTulaj")) BankMasodTulaj = dini_Int(fajl, "BankMasodTulaj"); else dini_IntSet(fajl, "BankMasodTulaj", BankMasodTulaj);*/
	//if(dini_Isset(fajl, "FrakcioSzam")) FrakcioSzam = dini_Int(fajl, "FrakcioSzam"); else dini_IntSet(fajl, "FrakcioSzam", FrakcioSzam);
	if(dini_Isset(fajl, "Autojogsi")) Autojogsi = dini_Int(fajl, "Autojogsi"); else dini_IntSet(fajl, "Autojogsi", Autojogsi);
	if(dini_Isset(fajl, "Motorjogsi")) Motorjogsi = dini_Int(fajl, "Motorjogsi"); else dini_IntSet(fajl, "Motorjogsi", Motorjogsi);
	if(dini_Isset(fajl, "Kamionjogsi")) Kamionjogsi = dini_Int(fajl, "Kamionjogsi"); else dini_IntSet(fajl, "Kamionjogsi", Kamionjogsi);
	if(dini_Isset(fajl, "Adrjogsi")) Adrjogsi = dini_Int(fajl, "Adrjogsi"); else dini_IntSet(fajl, "Adrjogsi",  Adrjogsi);
	if(dini_Isset(fajl, "Repulojogsi")) Repulojogsi = dini_Int(fajl, "Repulojogsi"); else dini_IntSet(fajl, "Repulojogsi", Repulojogsi);
	if(dini_Isset(fajl, "Hajojogsi")) Hajojogsi = dini_Int(fajl, "Hajojogsi"); else dini_IntSet(fajl, "Hajojogsi", Hajojogsi);
	if(dini_Isset(fajl, "Horgaszjogsi")) Horgaszjogsi = dini_Int(fajl, "Horgaszjogsi"); else dini_IntSet(fajl, "Horgaszjogsi", Horgaszjogsi);
	if(dini_Isset(fajl, "Fegyverjogsi")) Fegyverjogsi = dini_Int(fajl, "Fegyverjogsi"); else dini_IntSet(fajl, "Fegyverjogsi", Fegyverjogsi);
	if(dini_Isset(fajl, "Helijogsi")) Helijogsi = dini_Int(fajl, "Helijogsi"); else dini_IntSet(fajl, "Helijogsi", Helijogsi);
	if(dini_Isset(fajl, "SSSSzef")) SSSSzef = dini_Int(fajl, "SSSSzef"); else dini_IntSet(fajl, "SSSSzef", SSSSzef);
	if(dini_Isset(fajl, "KliensMode")) KliensMode = dini_Int(fajl, "KliensMode"); else dini_IntSet(fajl, "KliensMode", KliensMode);
	return 1;
}

fpublic SaveStuff()
{
	new fajl[32] = "Config/stuff.cfg";

	if(!fexist(fajl))
		dini_Create(fajl);

	dini_IntSet(fajl, "Jackpot", Jackpot);
	dini_IntSet(fajl, "Nyeroszam", Nyeroszam);
	dini_IntSet(fajl, "Kassza", Tax);
	dini_IntSet(fajl, "Ado", TaxValue);
	dini_IntSet(fajl, "Igenyles", IgenylesEngedelyezve);

	dini_IntSet(fajl, "Rendelve", RendeltKocsik);
	dini_IntSet(fajl, "RendelesIdo", RendelesDatum);
	dini_IntSet(fajl, "RendelesAlatt", RendelesAlatt);
	dini_IntSet(fajl, "RendelesPenz", RendelesPenz);
	dini_IntSet(fajl, "RendelesIdo", RendelesIdo);
	dini_IntSet(fajl, "RendelesModel", RendelesModel);
	dini_IntSet(fajl, "FBIKassza", FBISzef);
	dini_IntSet(fajl, "BankSzef", BankSzef);
	/*dini_IntSet(fajl, "BankTulaj", BankTulaj);
	dini_IntSet(fajl, "BankMasodTulaj", BankMasodTulaj);*/
	//dini_IntSet(fajl, "FrakcioSzam", FrakcioSzam);
	dini_IntSet(fajl, "Autojogsi", Autojogsi);
	dini_IntSet(fajl, "Motorjogsi", Motorjogsi);
	dini_IntSet(fajl, "Kamionjogsi", Kamionjogsi);
	dini_IntSet(fajl, "Adrjogsi", Adrjogsi);
	dini_IntSet(fajl, "Repulojogsi", Repulojogsi);
	dini_IntSet(fajl, "Hajojogsi", Hajojogsi);
	dini_IntSet(fajl, "Horgaszjogsi", Horgaszjogsi);
	dini_IntSet(fajl, "Fegyverjogsi", Fegyverjogsi);
	dini_IntSet(fajl, "Helijogsi", Helijogsi);
	dini_IntSet(fajl, "SSSSzef", SSSSzef);
	dini_IntSet(fajl, "KliensMode", KliensMode);
	return 1;
}

stock LoadIRC()
{
	print("IRC betöltése...");
	new arrCoords[7][64];
	new strFromFile2[256];
	new File: file = fopen("Config/channels.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < MAXIRC)
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			strmid(IRCInfo[idx][iAdmin], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			IRCInfo[idx][iAdminID] = strval(arrCoords[1]);
			strmid(IRCInfo[idx][iMOTD], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(IRCInfo[idx][iPassword], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			IRCInfo[idx][iNeedPass] = strval(arrCoords[4]);
			IRCInfo[idx][iLock] = strval(arrCoords[5]);
			IRCInfo[idx][iIdo] = strval(arrCoords[6]);
			idx++;
		}
		fclose(file);
	}
	print("IRC betöltve");
	return 1;
}

stock ToresFekvorendor(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid != 0 && !NPCKocsi[vehicleid])
	{
		new sebesseg = GetVehicleSpeed(vehicleid);

		if(PlayerInfo[playerid][pFekvoflood] > 0) return 1;

		PlayerInfo[playerid][pFekvoflood]  = 2;
		if(sebesseg > 150)
		{
			new Float:hp;
			GetVehicleHealth(vehicleid, hp);
			Freeze(playerid, 100);
			if(hp >= 700.0 && hp <= 1000.0) SetVehicleHealth(vehicleid, hp - 700.0);
			new panels, doors, lights, tires;
			GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
			UpdateVehicleDamageStatus(vehicleid, 1, 2, 3, 15);
			CarPart[vehicleid][cKerekek] = 100.0;
			GetPlayerHealth(playerid, hp);
			if(hp > 50)
				SetHealth(playerid, hp-50);
			else
				SetHealth(playerid, 10);
			SendFormatMessage(playerid,COLOR_YELLOW,"A kocsid teljesen tönkre ment, és te magad is megsérültél, mert te %d km/h-val mentél át a fekvõrendõrön!",sebesseg);
			return 1;
		}
		else if(sebesseg > 100)
		{
			new Float:hp;
			GetVehicleHealth(vehicleid, hp);
			Freeze(playerid, 100);
			if(hp >= 500.0 && hp <= 1000.0) SetVehicleHealth(vehicleid, hp - 500.0);
			new panels, doors, lights, tires;
			GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
			UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
			CarPart[vehicleid][cKerekek] = 100.0;
			GetPlayerHealth(playerid, hp);
			SetHealth(playerid, hp-10);
			SendFormatMessage(playerid,COLOR_YELLOW,"A kocsid teljesen tönkre ment, és te magad is megsérültél, mert te %d km/h-val mentél át a fekvõrendõrön!",sebesseg);
			return 1;
		}
		else if(sebesseg > 80)
		{
			new Float:hp;
			GetVehicleHealth(vehicleid, hp);
			Freeze(playerid, 100);
			if(hp >= 300.0 && hp <= 1000.0) SetVehicleHealth(vehicleid, hp - 300.0);
			GetPlayerHealth(playerid, hp);
			SetHealth(playerid, hp-5);
			SendFormatMessage(playerid,COLOR_YELLOW,"A kocsid teljesen tönkre ment, mert te %d km/h-val mentél át a fekvõrendõrön!",sebesseg);
			return 1;
		}

		else if(sebesseg > 40)
		{
			new Float:hp;
			GetVehicleHealth(vehicleid, hp);
			Freeze(playerid, 100);
			if(hp >= 150.0 && hp <= 1000.0) SetVehicleHealth(vehicleid, hp - 150.0);
			SendFormatMessage(playerid,COLOR_YELLOW,"A kocsid felfüggesztése sérült, mert te %d km/h-val mentél át a fekvõrendõrön!",sebesseg);
			return 1;
		}
		return 1;
	}
 	return 1;
 }

stock SaveIRC()
{
	new idx;
	new File: file2;
	while (idx < sizeof(IRCInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s|%d|%s|%s|%d|%d|%d\n",
		IRCInfo[idx][iAdmin],
		IRCInfo[idx][iAdminID],
		IRCInfo[idx][iMOTD],
		IRCInfo[idx][iPassword],
		IRCInfo[idx][iNeedPass],
		IRCInfo[idx][iLock],
		IRCInfo[idx][iIdo]);

		if(idx == 0)
			file2 = fopen("Config/channels.cfg", io_write);
		else
			file2 = fopen("Config/channels.cfg", io_append);

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

/*fpublic LoadTurfs()
{
	new arrCoords[6][64];
	new strFromFile2[256];
	new File: file = fopen("Config/turfs.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(TurfInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			strmid(TurfInfo[idx][zOwner], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			strmid(TurfInfo[idx][zColor], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			TurfInfo[idx][zMinX] = floatstr(arrCoords[2]);
			TurfInfo[idx][zMinY] = floatstr(arrCoords[3]);
			TurfInfo[idx][zMaxX] = floatstr(arrCoords[4]);
			TurfInfo[idx][zMaxY] = floatstr(arrCoords[5]);
			//printf("Turf:%d Name: %s Owner:%s MinX:%f MinY:%f MinZ:%f MaxX:%f MaxY:%f MaxZ:%f\n",
			//idx,TurfInfo[idx][zName],TurfInfo[idx][zOwner],TurfInfo[idx][zMinX],TurfInfo[idx][zMinY],TurfInfo[idx][zMinZ],TurfInfo[idx][zMaxX],TurfInfo[idx][zMaxY],TurfInfo[idx][zMaxZ]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

fpublic SaveTurfs()
{
	new idx;
	new File: file2;
	while (idx < sizeof(TurfInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s|%s|%f|%f|%f|%f|%f|%f\n",
		TurfInfo[idx][zOwner],
		TurfInfo[idx][zColor],
		TurfInfo[idx][zMinX],
		TurfInfo[idx][zMinY],
		TurfInfo[idx][zMaxX],
		TurfInfo[idx][zMaxY]);
		if(idx == 0)
		{
			file2 = fopen("Config/turfs.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/turfs.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}*/

fpublic LoadInts()
{
	new arrCoords[21][64];
	new strFromFile2[1024];
	new File: file = fopen("Config/interiors.cfg", io_read);
	new ennyi = IntekSzama();
	if (file)
	{
		new idx = ALAPINTERIORSZAM;
		printf("\n==============Interiorok betoltese folyamatban==============\n");
		while (idx <= ennyi)
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			//IntInfo[idx][iType] = strval(arrCoords[0]);
			strmid(IntInfo[idx][iType], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			IntInfo[idx][iNumber] = strval(arrCoords[1]);
			
			IntInfo[idx][iExitX] = floatstr(arrCoords[2]);
			IntInfo[idx][iExitY] = floatstr(arrCoords[3]);
			IntInfo[idx][iExitZ] = floatstr(arrCoords[4]);
			
			IntInfo[idx][iBedX] = floatstr(arrCoords[5]);
			IntInfo[idx][iBedY] = floatstr(arrCoords[6]);
			IntInfo[idx][iBedZ] = floatstr(arrCoords[7]);
			IntInfo[idx][iBedAngle] = floatstr(arrCoords[8]);
			
			IntInfo[idx][iCamStartPos][0] = floatstr(arrCoords[9]);
			IntInfo[idx][iCamStartPos][1] = floatstr(arrCoords[10]);
			IntInfo[idx][iCamStartPos][2] = floatstr(arrCoords[11]);
			
			IntInfo[idx][iCamStartLookAt][0] = floatstr(arrCoords[12]);
			IntInfo[idx][iCamStartLookAt][1] = floatstr(arrCoords[13]);
			IntInfo[idx][iCamStartLookAt][2] = floatstr(arrCoords[14]);
			
			IntInfo[idx][iCamEndPos][0] = floatstr(arrCoords[15]);
			IntInfo[idx][iCamEndPos][1] = floatstr(arrCoords[16]);
			IntInfo[idx][iCamEndPos][2] = floatstr(arrCoords[17]);
			
			IntInfo[idx][iCamEndLookAt][0] = floatstr(arrCoords[18]);
			IntInfo[idx][iCamEndLookAt][1] = floatstr(arrCoords[19]);
			IntInfo[idx][iCamEndLookAt][2] = floatstr(arrCoords[20]);
			
			idx++;
		}
		printf("\n==============Interiorok betoltve==============\n");
		fclose(file);
	}
	return 1;
}

stock UresHazKereses()
{
	new haz = -1;
	for(new t = 0; t < sizeof(HouseInfo); t++)
	{
	    if(HouseInfo[t][Van] == 0)
		{
			haz = t;
			break;
		}
	}
    return haz;
}
stock UresGarazsKereses()
{
	new garazs = -1;
	for(new t = 0; t < sizeof(GarazsInfo); t++)
	{
	    if(GarazsInfo[t][Van] == 0)
		{
			garazs = t;
			break;
		}
	}
    return garazs;
}

stock AkkuKifogy(p, v)
{
	CarPart[v][cAkkumulator] = 0.0;
	engineOn[v] = 0;
	SetJarmu(v, KOCSI_LAMPA, 0);
	TrailerHatsoLampa(v, false);
	KocsiRadio[v] =0;
	Gyujtas[v] = false;
	SetJarmu(v, KOCSI_MOTOR, false);

	new sofor = NINCS;
	if(IsPlayerInVehicle(p, v))
		sofor = p;

    if(VehicleInfo[v][JobbIndex] == 1 || VehicleInfo[v][BalIndex] == 1 || VehicleInfo[v][Kozos] == 1)
		SetVehicleIndex(p, v, false, false, false);

	if(Neon[v] == 1)
	{
		if(IsValidDynamicObject(NeonCar[v][0])) DestroyDynamicObject(NeonCar[v][0]), NeonCar[v][0]=INVALID_OBJECT_ID;
		if(IsValidDynamicObject(NeonCar[v][1])) DestroyDynamicObject(NeonCar[v][1]), NeonCar[v][1]=INVALID_OBJECT_ID;
		Neon[v] = 0;
	}
	if(sofor != NINCS)
	{
		Msg(sofor, "Az akkumulátor teljesen lemerült, minden kikapcsolt!");
		StopAudioStreamForPlayer(sofor);
	}
}

stock IsPlayerAiming(playerid, aimid)
{
	// Not my function, can't remember who made it though.
	new Float:X1, Float:Y1, Float:Z1, Float:X2, Float:Y2, Float:Z2;
	GetPlayerPos(playerid, X1, Y1, Z1);
	GetPlayerPos(aimid, X2, Y2, Z2);
	new Float:Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	if(Distance < 100)
	{
		new Float:A;
	 	GetPlayerFacingAngle(playerid, A);
	 	X1 += (Distance * floatsin(-A, degrees));
	 	Y1 += (Distance * floatcos(-A, degrees));
	 	Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
		if(Distance < 0.5)
		{
		    return true;
		}
	}
	return false;
}

fpublic IntekSzama()
{
	return NumLines("Config/interiors.cfg");
}

fpublic LoadIgenylesek()
{
	new arrCoords[5][128];
	new strFromFile2[256];
	new File: file = fopen("Config/hazigenylesek.cfg", io_read);
	new idx = 0;
	printf("\n================Igenylesek betoltese folyamatban================\n");
	if (file)
	{
		while (idx < MAXIGENYLES)
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');

			if(floatstr(arrCoords[2]) == 0.000000)
			    HazIgenylesek[idx][Van] = 0;
			else
			    HazIgenylesek[idx][Van] = 1;

			strmid(HazIgenylesek[idx][Nev], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			HazIgenylesek[idx][Belso] = strval(arrCoords[1]);
			HazIgenylesek[idx][iX] = floatstr(arrCoords[2]);
			HazIgenylesek[idx][iY] = floatstr(arrCoords[3]);
			HazIgenylesek[idx][iZ] = floatstr(arrCoords[4]);

			//printf("Igenyles %d betoltve! Igenylo:%s Belso:%d",idx,HazIgenylesek[idx][Nev],HazIgenylesek[idx][Belso]);
			idx++;
		}
		fclose(file);
		printf("\n================Minden igenyles betoltve================\n");
	}
	return 1;
}
stock FegyverSkillFrissites(playerid)
{
	/*
	0 - WEAPONSKILL_PISTOL
	1 - WEAPONSKILL_PISTOL_SILENCED
	2 - WEAPONSKILL_DESERT_EAGLE
	3 - WEAPONSKILL_SHOTGUN
	4 - WEAPONSKILL_SAWNOFF_SHOTGUN
	5 - WEAPONSKILL_SPAS12_SHOTGUN
	6 - WEAPONSKILL_MICRO_UZI
	7 - WEAPONSKILL_MP5
	8 - WEAPONSKILL_AK47
	9 - WEAPONSKILL_M4
	10 - WEAPONSKILL_SNIPERRIFLE
	*/
	for(new x = 0; x <= 10; x++)
	{
		if(PlayerInfo[playerid][pFegyverSkillek][x] > MAX_SKILLFEGYVER)
			PlayerInfo[playerid][pFegyverSkillek][x] = MAX_SKILLFEGYVER;
			
		if(PlayerInfo[playerid][pFegyverSkillek][x] < 1)
			PlayerInfo[playerid][pFegyverSkillek][x] = 1;
			
		new skill;
		if(PlayerInfo[playerid][pFegyverSkillek][x] > 1000)
			skill = 1000;
		else
			skill = PlayerInfo[playerid][pFegyverSkillek][x];
			
		if(x == WEAPONSKILL_PISTOL)
			skill = 0;
			
		SetPlayerSkillLevel(playerid,x,skill);
	}
}
stock LoadCar( bool: preQuery = true )
{
	if( preQuery )
	{
		format( _tmpString, 64, "SELECT * FROM %s", SQL_DB_Kocsik );
		doQuery( _tmpString, SQL_LOAD_CAR );
		return 1;
	}

	new rows, fields, row, uid;
	sql_data(rows, fields);
	
	while ( row < rows )
	{
		uid = sql_get_row_int(row, 0);
		if( 0 <= uid < MAXVSKOCSI)
		{
			CarInfo[uid][Van] = 1;
			CarInfo[uid][cOwned] = sql_get_row_int(row, 1);
			CarInfo[uid][cTulaj] = sql_get_row_int(row, 2);
			sql_get_row_str_len(row, 3, CarInfo[uid][cOwner], 32);
			CarInfo[uid][cModel] = sql_get_row_int(row, 4);
			CarInfo[uid][cValue] = sql_get_row_int(row, 5);
			CarInfo[uid][cLocationx] = sql_get_row_float(row, 6);
			CarInfo[uid][cLocationy] = sql_get_row_float(row, 7);
			CarInfo[uid][cLocationz] = sql_get_row_float(row, 8);
			CarInfo[uid][cInt] = sql_get_row_int(row, 9);
			CarInfo[uid][cVW] = sql_get_row_int(row, 10);
			CarInfo[uid][cAngle] = sql_get_row_float(row, 11);
			CarInfo[uid][cColorOne] = sql_get_row_int(row, 12);
			CarInfo[uid][cColorTwo] = sql_get_row_int(row, 13);
			CarInfo[uid][cLock] = sql_get_row_int(row, 14);
			CarInfo[uid][cDate] = sql_get_row_int(row, 15);
			CarInfo[uid][cTuning] = sql_get_row_int(row, 16);
			CarInfo[uid][cKerek] = sql_get_row_int(row, 17);
			CarInfo[uid][cMatrica] = sql_get_row_int(row, 18);


			if(CarInfo[uid][cDate] < 500)
			{
				CarInfo[uid][cDate] = UnixTime;
				CarUpdate(uid, CAR_Date);
			}
			
			if(CarInfo[uid][Van] == 1)
			{
				CarInfo[uid][cId] = UjKocsi(CarInfo[uid][cModel], CarInfo[uid][cLocationx], CarInfo[uid][cLocationy], CarInfo[uid][cLocationz], CarInfo[uid][cAngle], CarInfo[uid][cColorOne], CarInfo[uid][cColorTwo], .type = CAR_TYPE_VS, .uid = uid);

				SetVehicleInterior(CarInfo[uid][cId], CarInfo[uid][cInt]);
				SetVehicleVW(CarInfo[uid][cId], CarInfo[uid][cVW]);
				
				if(CarInfo[uid][cOwned] == 0 && CarInfo[uid][cKereskedo] > NINCS)
					KereskedoFelirat(uid),printf("felrak %d",CarInfo[uid][cId]);

				
				KmSzamol[CarInfo[uid][cId]] = sql_get_row_int(row, 20);
				CarInfo[uid][cDetektor] = sql_get_row_int(row, 21);
				/*KocsiAllapot[CarInfo[uid][cId]] = sql_get_row_int(row, 21);
				if(KocsiAllapot[CarInfo[uid][cId]] > KOCSIROMLAS_MAX)
					KocsiAllapot[CarInfo[uid][cId]] = KOCSIROMLAS_MAX;
				KocsiGumi[CarInfo[uid][cId]] = sql_get_row_int(row, 22); CarParts*/
				CarInfo[uid][cNeon]= sql_get_row_int(row, 23);
				CarInfo[uid][cHidraulika]= sql_get_row_int(row, 24);
				CarInfo[uid][cRiaszto]= sql_get_row_int(row, 25);
				//OlajCsere[CarInfo[uid][cId]] = sql_get_row_int(row, 26); CarParts
				sql_get_row_str(row, 27, _tmpString), sscanf(_tmpString, "p<,>A<i>(-1)[2]", CarInfo[uid][cKulcsok]);
				CarInfo[uid][cKereskedo] = sql_get_row_int(row, 28);
				sql_get_row_str(row, 29, _tmpString), sscanf(_tmpString, "p<,>iiiiiiiiiiiiiii", CarInfo[uid][cTuningok][0], CarInfo[uid][cTuningok][1], CarInfo[uid][cTuningok][2], CarInfo[uid][cTuningok][3], CarInfo[uid][cTuningok][4], CarInfo[uid][cTuningok][5], CarInfo[uid][cTuningok][6], CarInfo[uid][cTuningok][7], CarInfo[uid][cTuningok][8], CarInfo[uid][cTuningok][9], CarInfo[uid][cTuningok][10], CarInfo[uid][cTuningok][11], CarInfo[uid][cTuningok][12], CarInfo[uid][cTuningok][13], CarInfo[uid][cTuningok][14]);
				
				/*new kocsi = CarInfo[uid][cModel];
				
				for(new i = 0; i < 47; i++)
				{
					if(legalmods[i][0] == kocsi)
					{
						for(new x = 1; x < 22; x++)
						{
							if(legalmods[i][x] == 0000) continue;
							for(new z = 0; z < MAXTUNING; z++)
							{
								if(legalmods[i][x] != CarInfo[uid][cTuningok][z])
								{
									printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][z], uid);
									CarInfo[uid][cTuningok][z] = 0;
									continue;
								}
							}
						}
					}
				}*/
				
				/*for(new i=0; i<MAXTUNING; i++)
				{
					switch(CarInfo[uid][cTuningok][i])
					{
						case 1026..1033:
						{
							if(kocsi != 560)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1034..1041:
						{
							if(kocsi != 562)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1042..1044:
						{
							if(kocsi != 575)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1045..1054:
						{
							if(kocsi != 565)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1055..1064:
						{
							if(kocsi != 561)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1065..1072:
						{
							if(kocsi != 559)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1088..1095:
						{
							if(kocsi != 558)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1099:
						{
							if(kocsi != 575)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1100..1101:
						{
							if(kocsi != 534)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1102:
						{
							if(kocsi != 567)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1103..1105:
						{
							if(kocsi != 536)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1106:
						{
							if(kocsi != 534)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1107..1108:
						{
							if(kocsi != 536)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1109..1121:
						{
							if(kocsi != 535)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1122..1127:
						{
							if(kocsi != 534)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1128:
						{
							if(kocsi != 536)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1129..1133:
						{
							if(kocsi != 567)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1134..1137:
						{
							if(kocsi != 576)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1138..1141:
						{
							if(kocsi != 560)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1146..1149:
						{
							if(kocsi != 562)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1150..1153:
						{
							if(kocsi != 565)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1154..1157:
						{
							if(kocsi != 561)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1158..1162:
						{
							if(kocsi != 559)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1163..1168:
						{
							if(kocsi != 558)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1169..1170:
						{
							if(kocsi != 560)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1171..1172:
						{
							if(kocsi != 562)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1073:
						{
							if(kocsi != 559)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1174..1177:
						{
							if(kocsi != 575)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1178..1180:
						{
							if(kocsi != 534)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1181..1184:
						{
							if(kocsi != 536)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1085:
						{
							if(kocsi != 534)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1186..1189:
						{
							if(kocsi != 567)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
						case 1190..1193:
						{
							if(kocsi != 576)
							{
								printf("[TuningKomponens Debug] Egy jármûrõl törölve lett egy komponens. Komponens: %d VSID: %d", CarInfo[uid][cTuningok][i], uid);
								CarInfo[uid][cTuningok][i]=0;
							}
						}
					}
				}*/
				//printf("Jarmu: %d[%d] | Tulaj:%s", uid, CarInfo[uid][cId], CarInfo[uid][cOwner]);
				
				gCarLock[CarInfo[uid][cId]] = CarInfo[uid][cLock];
				JarmuTuning(CarInfo[uid][cId]);
				
				new file[64];
				format(file, 64, "data/car/%d.ini", uid);
				
				for( new i = 0; i < 6; i++ )
					CarInfo[uid][cCodeRiaszto][ i ] = random(2);
				
				CarInfo[uid][cCodeRiaszto][0] = NINCS;
				if(fexist(file))
					INI_ParseFile(file, "INI_Load_Cardata", .bExtra = true, .extra = CarInfo[uid][cId]);
			}
			else
				CarInfo[uid][cId] = NINCS;
		}
		
		row++;
	}

	return 1;
}

stock LoadBerSzef( bool: preQuery = true )
{
	if( preQuery )
	{
		format( _tmpString, 200, "SELECT * FROM %s", SQL_DB_Berszefek );
		doQuery( _tmpString, SQL_LOAD_BERSZEF );
		return 1;
	}

	new rows, fields, row, uid;
	sql_data(rows, fields);
	
	while(row < rows)
	{
		uid = sql_get_row_int(row, 0);
		if(0 <= uid < MAX_BSZEF)
		{
			BerSzef[uid][bTulajid] = sql_get_row_int(row, 1);
			BerSzef[uid][bMati] = sql_get_row_int(row, 2);
			BerSzef[uid][bMarihuana] = sql_get_row_int(row, 3);
			BerSzef[uid][bHeroin] = sql_get_row_int(row, 4);
			BerSzef[uid][bKokain] = sql_get_row_int(row, 5);
			BerSzef[uid][bPenz] = sql_get_row_int(row, 6);
			BerSzef[uid][bIdo] = sql_get_row_int(row, 7);
			BerSzef[uid][bKaja] = sql_get_row_int(row, 8);
			BerSzef[uid][bCigi] = sql_get_row_int(row, 9);
			BerSzef[uid][bRuha] = sql_get_row_int(row, 10);
			BerSzef[uid][bArany] = 0;
			BerSzef[uid][bHasznalva] = true;
		}
		
		row++;
	}
	return 1;
}

stock LoadButor( bool: preQuery = true )
{
    if( preQuery )
	{
		format(_tmpString, 200, "SELECT * FROM %s", SQL_DB_Butorok);
		doQuery(_tmpString, SQL_LOAD_BUTOROK);
		return 1;
	}

	printf("\n================Butorok betoltese folyamatban================\n");

    new x = NINCS;
	for( ;++x < MAXBUTORSZAM; )
	{
		ButorInfo[x][butorPosX] = 0.0;
		ButorInfo[x][butorPosY] = 0.0;
		ButorInfo[x][butorPosZ] = 0.0;
		ButorInfo[x][butorPosRX] = 0.0;
		ButorInfo[x][butorPosRY] = 0.0;
		ButorInfo[x][butorPosRZ] = 0.0;
		ButorInfo[x][butorModel] = 0;
		ButorInfo[x][butorVW] = 0;
		ButorInfo[x][butorInterior] = 0;
		ButorInfo[x][butorHasznalva] = false;
		ButorInfo[x][butorMegveve] = false;
		ButorInfo[x][butorObject] = 0;
		ButorInfo[x][butorTipus] = NINCS;
		ButorInfo[x][butorListitem] = NINCS;
	}

	new rows, fields, row, uid;
	sql_data(rows, fields);

	if(rows) while(row < rows)
	{
		uid = sql_get_row_int(row, 0);
		if(0 <= uid < (MAXHAZ*MAXBUTOR))
		{
			ButorInfo[uid][butorHasznalva] = true;
			ButorInfo[uid][butorMegveve] = true;
			ButorInfo[uid][butorPosX] = sql_get_row_float(row, 1);
			ButorInfo[uid][butorPosY] = sql_get_row_float(row, 2);
			ButorInfo[uid][butorPosZ] = sql_get_row_float(row, 3);
			ButorInfo[uid][butorPosRX] = sql_get_row_float(row, 4);
			ButorInfo[uid][butorPosRY] = sql_get_row_float(row, 5);
			ButorInfo[uid][butorPosRZ] = sql_get_row_float(row, 6);
			ButorInfo[uid][butorModel] = sql_get_row_int(row, 7);
			ButorInfo[uid][butorVW] = sql_get_row_int(row, 8);
			ButorInfo[uid][butorInterior] = sql_get_row_int(row, 9);
			ButorInfo[uid][butorTipus] = sql_get_row_int(row, 10);
			ButorInfo[uid][butorListitem] = sql_get_row_int(row, 11);
			ButorInfo[uid][butorObject] = CreateDynamicObject(ButorInfo[uid][butorModel], ButorInfo[uid][butorPosX], ButorInfo[uid][butorPosY], ButorInfo[uid][butorPosZ], ButorInfo[uid][butorPosRX], ButorInfo[uid][butorPosRY], ButorInfo[uid][butorPosRZ], ButorInfo[uid][butorVW], ButorInfo[uid][butorInterior]);
		}
		
		row++;
	}
	printf("\n================Minden butor betoltve================\n");
	return 1;
}

stock LoadAratas()
{
    new i = -1;
	for(;++i < sizeof(Aratas_Objectek);)
	{
		//1007
		AratasInfo[i][aratasObject] = CreateDynamicObject(Aratas_Objectek[i][aratasID], Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ], Aratas_Objectek[i][aratasRX], Aratas_Objectek[i][aratasRY], Aratas_Objectek[i][aratasRZ]);
		AratasInfo[i][aratasPickup] = CreateDynamicPickup(1007, 14, Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ] + 0.8, 0);
		//AratasInfo[i][aratasText] = CreateDynamic3DTextLabel((Aratas_Objectek[i][aratasLearatva] ? ("Veteményes\nLearatva") : ("Veteményes\nNincs aratva")), -1, Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ], 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
	}
	printf("%d aratás betöltve!", sizeof(Aratas_Objectek));
	return true;
}

stock FszMuvelet( Muvelet )
{
	if(Muvelet == 1)//Fegyverszállítás rendelések mentése
	{ 
		new File:rendeles = fopen("Config/fszrendeles.cfg", io_write), form[128], i = -1;
		if(rendeles)
		{
			for(;++i < MAX_FSZ_RENDELES;)
			{
				if(FszInfo[i][fszVan])
				{
					format(form, 128, "%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
					FszInfo[i][fszNev],
					FszInfo[i][fszCombat][0],FszInfo[i][fszCombat][1],
					FszInfo[i][fszM4][0],FszInfo[i][fszM4][1],
					FszInfo[i][fszSniper][0],FszInfo[i][fszSniper][1],
					FszInfo[i][fszDeagle][0],FszInfo[i][fszDeagle][1],
					FszInfo[i][fszMP5][0],FszInfo[i][fszMP5][1],
					FszInfo[i][fszColt][0],FszInfo[i][fszColt][1],
					FszInfo[i][fszShoutgun][0],FszInfo[i][fszShoutgun][1],
					FszInfo[i][fszRifle][0],FszInfo[i][fszRifle][1],
					FszInfo[i][fszAk47][0],FszInfo[i][fszAk47][1],
					FszInfo[i][fszSilenced][0],FszInfo[i][fszSilenced][1],FszInfo[i][fszParachute],
					FszInfo[i][fszFrakcio],FszInfo[i][fszTipus]);
					fwrite(rendeles, form);
				}
			}
			print("Fegyverszállítás rendelések mentve!");
		}
		fclose(rendeles);
	}
	if(Muvelet == 2)//betöltése
	{
		new File:rendeles = fopen("Config/fszrendeles.cfg", io_read),
		form[128],i=0;
		if(rendeles)
		{
			while(fread(rendeles, form))
			{
				sscanf(form, "p<,>s[24]ddddddddddddddddddddddd",
				FszInfo[i][fszNev],
				FszInfo[i][fszCombat][0],FszInfo[i][fszCombat][1],
				FszInfo[i][fszM4][0],FszInfo[i][fszM4][1],
				FszInfo[i][fszSniper][0],FszInfo[i][fszSniper][1],
				FszInfo[i][fszDeagle][0],FszInfo[i][fszDeagle][1],
				FszInfo[i][fszMP5][0],FszInfo[i][fszMP5][1],
				FszInfo[i][fszColt][0],FszInfo[i][fszColt][1],
				FszInfo[i][fszShoutgun][0],FszInfo[i][fszShoutgun][1],
				FszInfo[i][fszRifle][0],FszInfo[i][fszRifle][1],
				FszInfo[i][fszAk47][0],FszInfo[i][fszAk47][1],
				FszInfo[i][fszSilenced][0],FszInfo[i][fszSilenced][1],FszInfo[i][fszParachute],
				FszInfo[i][fszFrakcio],FszInfo[i][fszTipus]);
				FszInfo[i][fszVan] = true;
				i++;
			}
		}
		printf("%d fegyverszállítási rendelés betöltve!", i);
		fclose(rendeles);
	}
}

stock SaveRendeles()
{
	new
		File:rendeles = fopen("Config/rendeles.cfg", io_write),
		formatalunk[128];
		
	new i = -1;
	if(rendeles)
	{
		for(;++i < MAXRENDELES;)
		{
			if(Rendeles[i][Van])
			{
				format(formatalunk, 128, "%s,%s,%d,%d,%f,%f,%f,%f,%s\n", Rendeles[i][Neve], Rendeles[i][Mit], Rendeles[i][Belso], Rendeles[i][Cim], Rendeles[i][iX], Rendeles[i][iY], Rendeles[i][iZ],Rendeles[i][iAngle],Rendeles[i][Indok]);
				fwrite(rendeles, formatalunk);
			}
		}
	}
	fclose(rendeles);
	return true;
}

stock LoadRendeles()
{
	new szamlalas = 0, formatalasunk[128];

	new
		File:rendeles = fopen("Config/rendeles.cfg", io_read);
	
	if(rendeles)
	{
		while(fread(rendeles, formatalasunk))
		{
		    //print(formatalasunk);
			sscanf(formatalasunk, "p<,>s[24]s[24]ddffffs[128]", Rendeles[szamlalas][Neve], Rendeles[szamlalas][Mit], Rendeles[szamlalas][Belso], Rendeles[szamlalas][Cim] , Rendeles[szamlalas][iX],Rendeles[szamlalas][iY], Rendeles[szamlalas][iZ], Rendeles[szamlalas][iAngle],Rendeles[szamlalas][Indok]);

			Rendeles[szamlalas][Van] = 1;
			

			//printf("%s|%d|%d|%f|%f|%f", rendelesneve, rendelesbelso, rendelescim, rendelesposok[0], rendelesposok[1], rendelesposok[2]);

			szamlalas++;
		}
	}
	fclose(rendeles);
	return true;
}

stock LoadHouse( bool: preQuery = true )
{
	if( preQuery )
	{
		format(_tmpString, 200, "SELECT * FROM %s", SQL_DB_Hazak);
		doQuery(_tmpString, SQL_LOAD_HOUSE );
		return 1;
	}

	printf("\n================Hazak betoltese folyamatban================\n");

	//SQLResult( true );

	new rows, fields, row, uid;
	sql_data(rows, fields);
	
	while( row < rows )
	{
		uid = sql_get_row_int(row, 0);
		if( 0 <= uid < MAXHAZ )
		{
			HazakSzamaOsszesen++;

			HouseInfo[uid][Uj] = 0;
			HouseInfo[uid][Van] = 1;
			HouseInfo[uid][hOwned] = sql_get_row_int(row, 1);
			HouseInfo[uid][hTulaj] = sql_get_row_int(row, 2);
			sql_get_row_str_len(row, 3, HouseInfo[uid][hOwner], MAX_PLAYER_NAME);
			HouseInfo[uid][hCsak] = sql_get_row_int(row, 4);
			sql_get_row_str_len(row, 5, HouseInfo[uid][hCsakneki], MAX_PLAYER_NAME);
			HouseInfo[uid][hEntrancex] = sql_get_row_float(row, 6);
			HouseInfo[uid][hEntrancey] = sql_get_row_float(row, 7);
			HouseInfo[uid][hEntrancez] = sql_get_row_float(row, 8);
			HouseInfo[uid][hValue] = sql_get_row_int(row, 9);
			HouseInfo[uid][hRentabil] = sql_get_row_int(row, 10);
			HouseInfo[uid][hRent] = sql_get_row_int(row, 11);
			HouseInfo[uid][hBelso] = sql_get_row_int(row, 12);
			HouseInfo[uid][hHel] = sql_get_row_int(row, 13);
			HouseInfo[uid][hArmour] = sql_get_row_int(row, 14);
			HouseInfo[uid][hTakings] = sql_get_row_int(row, 15);
			HouseInfo[uid][hCigi] = sql_get_row_int(row, 16);
			HouseInfo[uid][hKaja] = sql_get_row_int(row, 17);
			HouseInfo[uid][hKokain] = sql_get_row_int(row, 18);
			HouseInfo[uid][hHeroin] = sql_get_row_int(row, 19);
			HouseInfo[uid][hMarihuana] = sql_get_row_int(row, 20);
			HouseInfo[uid][hMati] = sql_get_row_int(row, 21);
			HouseInfo[uid][hLock] = sql_get_row_int(row, 22);
			HouseInfo[uid][hDate] = sql_get_row_int(row, 23);
			HouseInfo[uid][hTipus] = sql_get_row_int(row, 24);
			
			// fegyver
			sql_get_row_str(row, 25, _tmpString);
			if(sscanf(_tmpString, "p<,>A<i>(0)[10]", HouseInfo[uid][hFegyver])) HouseInfo[uid][hFegyver] = {0,0,0,0,0,0,0,0,0,0};
			
			// lõszer
			new loszer[10][16];
			sql_get_row_str(row, 26, _tmpString);
			if(!sscanf(_tmpString, "p<,>A<s[32]>(0:0)[10]", loszer))
			{
				for(new i = 0; i < 10; i++)
				{
					if(sscanf(loszer[i], "p<:>I(0)I(0)", HouseInfo[uid][hLoszerTipus][i], HouseInfo[uid][hLoszerMennyiseg][i]))
						HouseInfo[uid][hLoszerTipus][i] = 0, HouseInfo[uid][hLoszerMennyiseg][i] = 0;
				}
			}
			else
				HouseInfo[uid][hLoszerTipus] = {0,0,0,0,0,0,0,0,0,0}, HouseInfo[uid][hLoszerMennyiseg] = {0,0,0,0,0,0,0,0,0,0};
			
			// mellény
			sql_get_row_str(row, 27, _tmpString);
			if(sscanf(_tmpString, "p<,>A<i>(0)[10]", HouseInfo[uid][hMellenyek])) HouseInfo[uid][hMellenyek] = {0,0,0,0,0,0,0,0,0,0};
			
			// ruhák
			sql_get_row_str(row, 28, _tmpString);
			if(sscanf(_tmpString, "p<,>A<i>(0)[10]", HouseInfo[uid][hRuhak])) HouseInfo[uid][hRuhak] = {0,0,0,0,0,0,0,0,0,0};
		
			HouseInfo[uid][Butorok] = sql_get_row_int(row, 29);
			HouseInfo[uid][hAlma] = sql_get_row_int(row, 30);
			HouseInfo[uid][hArany] = 0;
			sql_get_row_str(row, 32, _tmpString), sscanf(_tmpString, "p<,>A<i>(-1)[2]", HouseInfo[uid][hKulcsVan]);
			
			if(HouseInfo[uid][hKulcsVan][0] == 0) HouseInfo[uid][hKulcsVan][0] = NINCS;
			if(HouseInfo[uid][hKulcsVan][1] == 0) HouseInfo[uid][hKulcsVan][1] = NINCS;

			if(HouseInfo[uid][hCsak] == 1)
				printf("Haz %d betoltve! Tulaj:%s Hazpenz:%d Csakneki:%s",uid,HouseInfo[uid][hOwner],HouseInfo[uid][hTakings], HouseInfo[uid][hCsakneki]);
			else
				printf("Haz %d betoltve! Tulaj:%s Hazpenz:%d ",uid,HouseInfo[uid][hOwner],HouseInfo[uid][hTakings]);

			if(HouseInfo[uid][hOwned] == 0)
			{
				HazPickup[uid] = UjPickup(1273, 23, HouseInfo[uid][hEntrancex], HouseInfo[uid][hEntrancey], HouseInfo[uid][hEntrancez]);
				pickups++;
			}
			else if(HouseInfo[uid][hOwned] == 1)
			{
				HazPickup[uid] = UjPickup(1239, 23, HouseInfo[uid][hEntrancex], HouseInfo[uid][hEntrancey], HouseInfo[uid][hEntrancez]);
				pickups++;
			}			
		}

		row++;
	}
	printf("\n================Minden haz betoltve %d================\n",row);

	//SQLResult( false );

	return 1;
}

stock LoadGarazs( bool: preQuery = true )
{
	if( preQuery )
	{
		format( _tmpString, 200, "SELECT * FROM %s", SQL_DB_Garazs );
		doQuery( _tmpString, SQL_LOAD_GARAZS );
		return 1;
	}

	new rows, fields, row, uid;
	sql_data(rows, fields);
	
	printf("\n================Garazsok betoltese folyamatban================\n");
	while( row < rows )
	{
		uid = sql_get_row_int(row, 0);
		if( 0 <= uid < MAXGARAZS)
		{
			GarazsokSzamaOsszesen++;

			GarazsInfo[uid][Uj] = 0;
			GarazsInfo[uid][Van] = 1;
			GarazsInfo[uid][hEladva] = sql_get_row_int(row, 1);
			GarazsInfo[uid][hTulajid] = sql_get_row_int(row, 2);
			sql_get_row_str_len(row, 3, GarazsInfo[uid][hOwner], MAX_PLAYER_NAME);
			GarazsInfo[uid][hCsak] = sql_get_row_int(row, 4);
			sql_get_row_str_len(row, 5, GarazsInfo[uid][hCsakneki], MAX_PLAYER_NAME);
			GarazsInfo[uid][hEntrancex] = sql_get_row_float(row, 6);
			GarazsInfo[uid][hEntrancey] = sql_get_row_float(row, 7);
			GarazsInfo[uid][hEntrancez] = sql_get_row_float(row, 8);
			GarazsInfo[uid][hAra] = sql_get_row_int(row, 9);
			GarazsInfo[uid][hRentabil] = sql_get_row_int(row, 10);
			GarazsInfo[uid][hRent] = sql_get_row_int(row, 11);
			GarazsInfo[uid][hBelso] = sql_get_row_int(row, 12);
			GarazsInfo[uid][hLock] = sql_get_row_int(row, 13);
			GarazsInfo[uid][hDate] = sql_get_row_int(row, 14);
			GarazsInfo[uid][hAngle] = sql_get_row_float(row, 15);
			GarazsInfo[uid][hHaz] = sql_get_row_int(row, 16);

		/*	if(GarazsInfo[uid][hCsak] == 1)
				printf("Garazs %d betoltve! Tulaj:%s Csakneki:%s", uid, GarazsInfo[uid][hOwner], GarazsInfo[uid][hCsakneki]);
			else
				printf("Garazs %d betoltve! Tulaj:%s Angle: %f ", uid, GarazsInfo[uid][hOwner],GarazsInfo[uid][hAngle]);*/

			if(GarazsInfo[uid][hEladva] == 0)
			{
				GarazsPickup[uid] = UjPickup(1272, 23, GarazsInfo[uid][hEntrancex], GarazsInfo[uid][hEntrancey], GarazsInfo[uid][hEntrancez]);
				pickups++;
			}
			else if(GarazsInfo[uid][hEladva] == 1)
			{
				GarazsPickup[uid] = UjPickup(1318, 23, GarazsInfo[uid][hEntrancex], GarazsInfo[uid][hEntrancey], GarazsInfo[uid][hEntrancez]);
				pickups++;
			}
		}
		
		row++;
	}
	printf("\n================Minden Garazs betoltve================\n");
	return 1;
}

stock LoadBizz( bool: preQuery = true )
{
	if( preQuery )
	{
		format( _tmpString, 200, "SELECT * FROM %s", SQL_DB_Bizek );
		doQuery( _tmpString, SQL_LOAD_BIZ );
		return 1;
	}

	new rows, fields, row, uid;
	sql_data(rows, fields);

	//bizaktiv
	printf("\n================Bizniszek betoltese folyamatban================\n");
	while( row < rows )
	{
		uid = sql_get_row_int(row, 0);
		if( 0 <= uid < MAXBIZ)
		{
			BizzInfo[uid][bVan] = true;
			
			sql_get_row_str_len(row, 1, BizzInfo[uid][bBNev], 128);
			sql_get_row_str_len(row, 2, BizzInfo[uid][bMessage], 128);
			BizzInfo[uid][bOwned] = sql_get_row_int(row, 3);
			BizzInfo[uid][bTulaj] = sql_get_row_int(row, 4);
			sql_get_row_str_len(row, 5, BizzInfo[uid][bOwner], MAX_PLAYER_NAME);
			sql_get_row_str_len(row, 6, BizzInfo[uid][bExtortion], MAX_PLAYER_NAME);
			BizzInfo[uid][bMTulajID] = sql_get_row_int(row, 7);
			BizzInfo[uid][bEntranceX] = sql_get_row_float(row, 8);
			BizzInfo[uid][bEntranceY] = sql_get_row_float(row, 9);
			BizzInfo[uid][bEntranceZ] = sql_get_row_float(row, 10);
			BizzInfo[uid][bExitX] = sql_get_row_float(row, 11);
			BizzInfo[uid][bExitY] = sql_get_row_float(row, 12);
			BizzInfo[uid][bExitZ] = sql_get_row_float(row, 13);
			BizzInfo[uid][bLevelNeeded] = sql_get_row_int(row, 14);
			BizzInfo[uid][bBuyPrice] = sql_get_row_int(row, 15);
			BizzInfo[uid][bEntranceCost] = sql_get_row_int(row, 16);
			BizzInfo[uid][bTill] = sql_get_row_int(row, 17);
			BizzInfo[uid][bTill2] = sql_get_row_int(row, 18);
			BizzInfo[uid][bSzazalek] = sql_get_row_int(row, 19);
			BizzInfo[uid][bLocked] = sql_get_row_int(row, 20);
			BizzInfo[uid][bInterior] = sql_get_row_int(row, 21);
			BizzInfo[uid][bVanBelso] = sql_get_row_int(row, 22);
			BizzInfo[uid][bProducts] = sql_get_row_int(row, 23);
			BizzInfo[uid][bMaxProducts] = sql_get_row_int(row, 24);
			BizzInfo[uid][bPriceProd] = sql_get_row_int(row, 25);
			
			if(BizzInfo[uid][bProducts] < 0) BizzInfo[uid][bProducts] = 0;
	
			new szoveg[128];
			sql_get_row_str_len(row, 26, szoveg, 128);
			sscanf(szoveg, "p<,>iiii", BizzInfo[uid][bHeti1],BizzInfo[uid][bHeti2],BizzInfo[uid][bHavi1],BizzInfo[uid][bHavi2]);
			
			//printf("%d %d %d %d", BizzInfo[uid][bHeti1],BizzInfo[uid][bHeti2],BizzInfo[uid][bHavi1],BizzInfo[uid][bHavi2]);
			sql_get_row_str_len(row, 27,szoveg, 128);
			sscanf(szoveg, "p<,>ii", BizzInfo[uid][bIdo1],BizzInfo[uid][bIdo2]);
			//printf("%d %d",BizzInfo[uid][bIdo1],BizzInfo[uid][bIdo2]);
			
			
			
			if(BizzInfo[uid][bOwned] == 0)
			{
				BizPickup[uid] = UjPickup(1272, 23, BizzInfo[uid][bEntranceX], BizzInfo[uid][bEntranceY], BizzInfo[uid][bEntranceZ]);
				pickups++;
			}
			else if(BizzInfo[uid][bOwned] == 1)
			{
				BizPickup[uid] = UjPickup(1239, 23, BizzInfo[uid][bEntranceX], BizzInfo[uid][bEntranceY], BizzInfo[uid][bEntranceZ]);
				pickups++;
			}
		}

		row++;
	}
	printf("\n================Bizniszek betoltve================\n");

	return 1;
}

stock TeruletekBetoltese( bool: preQuery = true )
{
	if( preQuery )
	{
		format( _tmpString, 200, "SELECT * FROM %s", SQL_DB_Terulet );
		doQuery( _tmpString, SQL_LOAD_TERULET );
		return 1;
	}

	new rows, fields, row, uid;
	sql_data(rows, fields);
	printf("\n================Területek betöltése folyamatban================\n");
	while( row < rows )
	{
		uid = sql_get_row_int(row, 0);
		if( 0 <= uid < MAXTERULET )
		{
			TeruletInfo[uid][Van] = true;

			sql_get_row_str_len(row, 1, TeruletInfo[uid][tNev], 64);
			TeruletInfo[uid][tMinX] = sql_get_row_float(row, 2);
			TeruletInfo[uid][tMinY] = sql_get_row_float(row, 3);
			TeruletInfo[uid][tMaxX] = sql_get_row_float(row, 4);
			TeruletInfo[uid][tMaxY] = sql_get_row_float(row, 5);
			TeruletInfo[uid][tTulaj] = sql_get_row_int(row, 6);
			if(TeruletInfo[uid][tTulaj] == -1)
				TeruletInfo[uid][tTulaj] = 13;

			sql_get_row_str(row, 7, _tmpString), sscanf(_tmpString, "p<,>A<i>(-1)[5]", TeruletInfo[uid][tHaszon]);
			sql_get_row_str(row, 8, _tmpString), sscanf(_tmpString, "p<,>A<i>(-1)[5]", TeruletInfo[uid][tHaszonMennyi]);

			TeruletInfo[uid][tHaszonIdo] = sql_get_row_int(row, 9);
			TeruletInfo[uid][tFoglalva] = sql_get_row_int(row, 10);

			TeruletInfo[uid][tZone] = GangZoneCreate(TeruletInfo[uid][tMinX], TeruletInfo[uid][tMinY], TeruletInfo[uid][tMaxX], TeruletInfo[uid][tMaxY]);
			TeruletInfo[uid][tArea] = CreateDynamicRectangle(TeruletInfo[uid][tMinX], TeruletInfo[uid][tMinY], TeruletInfo[uid][tMaxX], TeruletInfo[uid][tMaxY]);

			//printf("Terület:%d | Név: %s | Frakció: %s", uid, TeruletInfo[uid][tNev], Szervezetneve[ TeruletInfo[uid][tTulaj]-1 ][0]);
		}
		
		row++;
	}
	printf("\n================Területek betöltve================\n");

	return 1;
}

stock LoadRadio()
{
	print("=====[ Rádiók betöltése ]=====");
	if(!fexist("Config/radio.cfg"))
	{
		//RadioVan = false;
		print("Nincs config fájl, kilépés...");
		return 1;
	}
	else
		//RadioVan = true;

	print("Van config fájl, betöltés...");

	new str[12], str2[256], str3[2][128], bool:vege, db;
	for(new r = 0; r < MAX_RADIO; r++)
	{
		if(vege)
		{
			Radio[r][rVan] = false;
			continue;
		}

		format(str, 12, "radio%d", r);
		if(dini_Isset("Config/radio.cfg", str))
		{
			str2 = dini_Get("Config/radio.cfg", str);
			split(str2, str3, '|');

			strmid(Radio[r][rNev], str3[0], 0, strlen(str3[0]), 32);
			strmid(Radio[r][rURL], str3[1], 0, strlen(str3[1]), 128);
			Radio[r][rVan] = true;
			//printf("Rádió: %s - URL: %s", Radio[r][rNev], Radio[r][rURL]);
			db++;
		}
		else
		{
			Radio[r][rVan] = false;
			vege = true;
		}
	}

	if(!db)
	{
		//RadioVan = false;
		print("Nincs rádió a config fájlban");
	}

	return 1;
}

fpublic LoadAjtok()
{
	new adatok[16][64];
	new strFromFile2[300];
	new File: file = fopen("Config/ajtok.cfg", io_read);
	new idx = 0;
	printf("\n================Ajtok betoltese folyamatban================\n");
	if (file)
	{
		while (idx < MAXAJTO)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');

			if(floatstr(adatok[2]) == 0.000000)
			    Ajtok[idx][Van] = false;
			else
			    Ajtok[idx][Van] = true;


			strmid(Ajtok[idx][Nev], adatok[0], 0, strlen(adatok[0]), 64);
			Ajtok[idx][BeX] = floatstr(adatok[1]);
			Ajtok[idx][BeY] = floatstr(adatok[2]);
			Ajtok[idx][BeZ] = floatstr(adatok[3]);
			Ajtok[idx][BeInt] = strval(adatok[4]);
			Ajtok[idx][BeVW] = strval(adatok[5]);
			Ajtok[idx][KiX] = floatstr(adatok[6]);
			Ajtok[idx][KiY] = floatstr(adatok[7]);
			Ajtok[idx][KiZ] = floatstr(adatok[8]);
			Ajtok[idx][KiInt] = strval(adatok[9]);
			Ajtok[idx][KiVW] = strval(adatok[10]);
			Ajtok[idx][Zarva] = strval(adatok[11]);
			Ajtok[idx][Freezel] = strval(adatok[12]);
			Ajtok[idx][Kocsi] = strval(adatok[13]);
			Ajtok[idx][BeAngle] = floatstr(adatok[14]);
			Ajtok[idx][KiAngle] = floatstr(adatok[15]);

			if(Ajtok[idx][Van] == 1)
			{
				#if defined KELLAJTOEXTRA
					Ajtok[idx][PickupBe] = UjPickup(1007, 1, Ajtok[idx][BeX], Ajtok[idx][BeY], Ajtok[idx][BeZ], Ajtok[idx][BeVW], Ajtok[idx][BeInt]);
					Ajtok[idx][PickupKi] = UjPickup(1007, 1, Ajtok[idx][KiX], Ajtok[idx][KiY], Ajtok[idx][KiZ], Ajtok[idx][KiVW], Ajtok[idx][KiInt]);

					if(Ajtok[idx][Kocsi])
					{
						Ajtok[idx][PickupKocsiBe] = UjPickup(1007, 14, Ajtok[idx][BeX], Ajtok[idx][BeY], Ajtok[idx][BeZ], Ajtok[idx][BeVW], Ajtok[idx][BeInt]);
						Ajtok[idx][PickupKocsiKi] = UjPickup(1007, 14, Ajtok[idx][KiX], Ajtok[idx][KiY], Ajtok[idx][KiZ], Ajtok[idx][KiVW], Ajtok[idx][KiInt]);
					}

					if(!egyezik(Ajtok[idx][Nev], "Titkos"))
					{
						new felirat[128];
						format(felirat, 128, "[Bejárat]\n{FFFF00}%s", Ajtok[idx][Nev]);
						Ajtok[idx][TextBe] = CreateDynamic3DTextLabel(felirat, 0x22AAFFFF, Ajtok[idx][BeX], Ajtok[idx][BeY], Ajtok[idx][BeZ]+0.5, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Ajtok[idx][BeVW], Ajtok[idx][BeInt], NINCS, 25.0);

						format(felirat, 128, "[Kijárat]\n{FFFF00}%s", Ajtok[idx][Nev]);
						Ajtok[idx][TextKi] = CreateDynamic3DTextLabel(felirat, 0x22AAFFFF, Ajtok[idx][KiX], Ajtok[idx][KiY], Ajtok[idx][KiZ]+0.5, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Ajtok[idx][KiVW], Ajtok[idx][KiInt], NINCS, 25.0);
					
					}
				#endif
				//printf("Ajto %d betoltve! Nev:%s Zarva:%d", idx, Ajtok[idx][Nev], Ajtok[idx][Zarva]);
			}

			idx++;
		}
		fclose(file);
		printf("\n================Minden ajto betoltve================\n");
	}
	return 1;
}

fpublic SaveBankAdatok()
{
	new File: file2;

	new coordsstring[50];
	format(coordsstring, sizeof(coordsstring), "%s,%s", BankTulaj, BankMasodTulaj);

	file2 = fopen("Config/bank.cfg", io_write);

	fwrite(file2, coordsstring);

	fclose(file2);
	return 1;
}

fpublic LoadBankAdatok()
{
	print("Bank betöltése...");
	new adatok[2][30];
	new strFromFile2[256];
	new File: file = fopen("Config/bank.cfg");
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, adatok, ',');
		strmid(BankTulaj, adatok[0], 0, strlen(adatok[0]), 255);
		strmid(BankMasodTulaj, adatok[1], 0, strlen(adatok[1]), 255);
		fclose(file);
		print("Bank betöltése...");
	}
	return 1;
}

stock UresHullaHely()
{
	new
		hullaid = -1,
		i = -1;
	for(;++i < MAX_HULLA;)
	{
		if(!HullaInfo[i][Hvan])
		{
			hullaid = i;
			break;
		}
	}
	return hullaid;
}

stock ApplyPlayerAnimation(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
    //ApplyAnimation(playerid, animlib, "null", fDelta, loop, lockx, locky, freeze, time, forcesync); // Pre-load animation library
	ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0);
    return ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

stock GetClosestHulla(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new kozelihulla=NINCS;
		new hulla = -1;
		new Float:closestdist = 9999.0, Float:dist;
		for(;++hulla < MAX_HULLA;)
		{
			dist = GetDistanceToHulla(playerid, hulla);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelihulla = hulla;
			}
		}
		return kozelihulla;
	}
	return NINCS;
}

stock PajzsTorles(playerid)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS)) RemovePlayerAttachedObject(playerid, ATTACH_SLOT_ZSAK_PAJZS_BILINCS);
	PajzsNala[playerid] = false;
	return 1;
}

stock NemVizsgalat(nemid)
{
	new
		nem[6];
	switch(nemid)
	{
		case 1: format(nem, 6, "Férfi");
		case 2: format(nem, 6, "Nõ");
	}
	return nem;
}

stock Szarmazas(szarmazasid)
{
	new
		szarmazas[7];
	switch(szarmazasid)
	{
		case 1: format(szarmazas, 7, "USA");
		case 2: format(szarmazas, 7, "Európa");
		case 3: format(szarmazas, 7, "Ázsia");
	}
	return szarmazas;
}

forward VizsgalasVege(playerid, hullaid);
fpublic VizsgalasVege(playerid, hullaid)
{
	if(50 <= HullaInfo[hullaid][Hallapot] <= 100)
	{
		SendFormatMessage(playerid, COLOR_WHITE, "Hulla életkora: %d és %d közötti", PlayerInfo[HullaInfo[hullaid][Hkieid]][pAge] - random(4), PlayerInfo[HullaInfo[hullaid][Hkieid]][pAge] + random(4));
		SendFormatMessage(playerid, COLOR_WHITE, "Hulla neme: %s", NemVizsgalat(PlayerInfo[HullaInfo[hullaid][Hkieid]][pSex]));
		SendFormatMessage(playerid, COLOR_WHITE, "Hulla származása: %s", Szarmazas(PlayerInfo[HullaInfo[hullaid][Hkieid]][pOrigin]));
		SendFormatMessage(playerid, COLOR_WHITE, "Feltételezhetõ gyilkosa: %s", HullaInfo[hullaid][Hmegolte]);
	}
	if(HullaInfo[hullaid][Hallapot] < 50)
		SendClientMessage(playerid, COLOR_WHITE, "Nem tudtad megállapítani a hulla adatait, mert túl sérült.");
	PlayerInfo[playerid][pVizsgal] = false;
	ClearAnimations(playerid);
	return true;
}

stock HullaTorol(hullaid)
{
	if(!HullaInfo[hullaid][Hvan])
		return false;
	KillTimer(HullaInfo[hullaid][Htimer]);
	HullaInfo[hullaid][Hvan] = false;
	HullaInfo[hullaid][Hpos][0] = 0.0;
	HullaInfo[hullaid][Hpos][1] = 0.0;
	HullaInfo[hullaid][Hpos][2] = 0.0;
	HullaInfo[hullaid][Hoka] = 0;
	HullaInfo[hullaid][Hkie][0] = EOS;
	HullaInfo[hullaid][Hkieid] = 0;
	HullaInfo[hullaid][Hmegolte][0] = EOS;
	HullaInfo[hullaid][Hmegolteid] = 0;
	HullaInfo[hullaid][Hvw] = 0;

	HullaInfo[hullaid][HHeroin] = 0;
	HullaInfo[hullaid][HKokain] = 0;
	HullaInfo[hullaid][HMati] = 0;
	HullaInfo[hullaid][HMariska] = 0;
	HullaInfo[hullaid][HPenz] = 0;

	DestroyDynamic3DTextLabel(HullaInfo[hullaid][Htext3d]);
	/*DestroyDynamicObject(HullaInfo[hullaid][Hobject][0]);
	DestroyDynamicObject(HullaInfo[hullaid][Hobject][1]);
	DestroyDynamicObject(HullaInfo[hullaid][Hobject][2]);
	DestroyDynamicObject(HullaInfo[hullaid][Hobject][3]);
	DestroyDynamicObject(HullaInfo[hullaid][Hobject][4]);*/
	DestroyActor(HullaInfo[hullaid][Hactor]);
	return true;
}
fpublic HullaTorles(hullaid)
{
	HullaInfo[hullaid][Hallapot] -= 5;
	if(HullaInfo[hullaid][Hallapot] <= 50)
	{
		if(!HullaInfo[hullaid][Hvan])
			return false;
		KillTimer(HullaInfo[hullaid][Htimer]);
		HullaInfo[hullaid][Hvan] = false;
		HullaInfo[hullaid][Hpos][0] = 0.0;
		HullaInfo[hullaid][Hpos][1] = 0.0;
		HullaInfo[hullaid][Hpos][2] = 0.0;
		DestroyActor(HullaInfo[hullaid][Hactor]);
		HullaInfo[hullaid][Hoka] = 0;
		HullaInfo[hullaid][Hkie][0] = EOS;
		HullaInfo[hullaid][Hkieid] = 0;
		HullaInfo[hullaid][Hmegolte][0] = EOS;
		HullaInfo[hullaid][Hmegolteid] = 0;
		HullaInfo[hullaid][Hvw] = 0;

		HullaInfo[hullaid][HHeroin] = 0;
		HullaInfo[hullaid][HKokain] = 0;
		HullaInfo[hullaid][HMati] = 0;
		HullaInfo[hullaid][HMariska] = 0;
		HullaInfo[hullaid][HPenz] = 0;

		DestroyDynamic3DTextLabel(HullaInfo[hullaid][Htext3d]);
		/*DestroyDynamicObject(HullaInfo[hullaid][Hobject][0]);
		DestroyDynamicObject(HullaInfo[hullaid][Hobject][1]);
		DestroyDynamicObject(HullaInfo[hullaid][Hobject][2]);
		DestroyDynamicObject(HullaInfo[hullaid][Hobject][3]);
		DestroyDynamicObject(HullaInfo[hullaid][Hobject][4]);*/
		DestroyActor(HullaInfo[hullaid][Hactor]);
	}
	return true;
}


stock HullaLerak(playerid, Float:Xa, Float:Ya, Float:Za, oka, VW = 0, Float:angle, megolte[] = "Nem gyilkosság")
{
	new ureshely = UresHullaHely();
	if(ureshely == -1) return false;
	HullaInfo[ureshely][Hvan] = true;
	HullaInfo[ureshely][Htimer] = SetTimerEx("HullaTorles", 600000, true, "d", ureshely);
	HullaInfo[ureshely][Hpos][0] = Xa;
	HullaInfo[ureshely][Hpos][1] = Ya;
	Za -= 0.9;
	HullaInfo[ureshely][Hvw] = VW;
	HullaInfo[ureshely][Hpos][2] = Za;
	HullaInfo[ureshely][Hoka] = oka;
	format(HullaInfo[ureshely][Hkie], MAX_PLAYER_NAME, PlayerName(playerid));
	HullaInfo[ureshely][Hkieid] = playerid;
	
	if(PlayerInfo[playerid][pKokain] > 0)
	{
	    HullaInfo[ureshely][HKokain] = PlayerInfo[playerid][pKokain];
	    PlayerInfo[playerid][pKokain] = 0;
	} else HullaInfo[ureshely][HKokain] = 0;
	
	if(PlayerInfo[playerid][pHeroin] > 0)
	{
	    HullaInfo[ureshely][HHeroin] = PlayerInfo[playerid][pHeroin];
	    PlayerInfo[playerid][pHeroin] = 0;
	} else HullaInfo[ureshely][HHeroin] = 0;
	
	if(PlayerInfo[playerid][pMarihuana] > 0)
	{
	    HullaInfo[ureshely][HMariska] = PlayerInfo[playerid][pMarihuana];
	    PlayerInfo[playerid][pMarihuana] = 0;
	} else HullaInfo[ureshely][HMariska] = 0;
	
	if(PlayerInfo[playerid][pMats] > 0)
	{
	    HullaInfo[ureshely][HMati] = PlayerInfo[playerid][pMats];
	    PlayerInfo[playerid][pMats] = 0;
	} else HullaInfo[ureshely][HMati] = 0;
	
	if(GetMoney(playerid) > 0)
	{
	    HullaInfo[ureshely][HPenz] = GetMoney(playerid);
	    SetMoney(playerid,0);
	} else HullaInfo[ureshely][HPenz] = 0;

	format(HullaInfo[ureshely][Hmegolte], MAX_PLAYER_NAME, megolte);
	HullaInfo[ureshely][Htext3d] = CreateDynamic3DTextLabel("HOLTTEST\n(( /hulla ))", COLOR_YELLOW, Xa, Ya, Za, 20.0,.worldid = VW);

	/*HullaInfo[ureshely][Hobject][0] = CreateObject(2907, Xa, Ya, Za, 0.0, 0.0, 0.0);
	HullaInfo[ureshely][Hobject][1] = CreateObject(2906, 0.22, -0.08, -0.04,   0.00, 0.00, -20.00);
	HullaInfo[ureshely][Hobject][2] = CreateObject(2906, -0.18, -0.08, -0.04,   0.00, 180.00, 15.00);
	HullaInfo[ureshely][Hobject][3] = CreateObject(2905, -0.14, 0.70, 0.04,   0.00, 60.00, 10.00);
	HullaInfo[ureshely][Hobject][4] = CreateObject(2905, 0.20, 0.66, 0.00,   0.00, 120.00, -10.00);

	AttachObjectToObject(HullaInfo[ureshely][Hobject][1], HullaInfo[ureshely][Hobject][0], 0.22, -0.08, -0.04, 0.00, 0.00, -20.00, 1);
	AttachObjectToObject(HullaInfo[ureshely][Hobject][2], HullaInfo[ureshely][Hobject][0], -0.18, -0.08, -0.04, 0.00, 180.00, 15.00, 1);
	AttachObjectToObject(HullaInfo[ureshely][Hobject][3], HullaInfo[ureshely][Hobject][0], -0.14, 0.70, 0.04, 0.00, 60.00, 10.00, 1);
	AttachObjectToObject(HullaInfo[ureshely][Hobject][4], HullaInfo[ureshely][Hobject][0], 0.20, 0.66, 0.00, 0.00, 120.00, -10.00, 1);*/

	//CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = ALAPOBJECTDISTANCE);
	/*HullaInfo[ureshely][Hobject][0] = CreateDynamicObject(2907, Xa, Ya, Za, 0, 0, 274, VW);
	HullaInfo[ureshely][Hobject][1] = CreateDynamicObject(2905, Xa+0.85376, Ya+0.161621, Za-0.01857662, 0, 26, 278, VW);
	HullaInfo[ureshely][Hobject][2] = CreateDynamicObject(2905, Xa+0.739746, Ya-0.158935, Za+0.006423, 356.68469238281, 145.93511962891, 263.75891113281, VW);
	HullaInfo[ureshely][Hobject][3] = CreateDynamicObject(2906, Xa-0.081787, Ya+0.239991, Za-0.03601265, 359.30590820313, 273.93939208984, 298.02392578125, VW);
	HullaInfo[ureshely][Hobject][4] = CreateDynamicObject(2906, Xa-0.024414, Ya-0.30957, Za-0.03601265, 359.01071166992, 339.99688720703, 242.68936157227, VW);
	*/
	HullaInfo[ureshely][Hactor]  =	CreateActor(GetPlayerSkin(playerid),Xa,Ya,Za+1,angle);
	SetActorVirtualWorld(HullaInfo[ureshely][Hactor],	GetPlayerVirtualWorld(playerid));
	SetActorInvulnerable(HullaInfo[ureshely][Hactor], false);
	SetActorHealth(HullaInfo[ureshely][Hactor],		  0.0);
	HullaInfo[ureshely][Hallapot] = 80;
	HullaInfo[ureshely][Hperc] = 0;
	return true;
}


stock GetVSJarmuTuning(vsid, slot)
{
	return CarInfo[vsid][cTuningok][slot];
}
stock SetVSJarmuTuning(vsid, slot, ertek)
{
	CarInfo[vsid][cTuningok][slot] = ertek;
	return 1;
}

stock BenzinKutFrissites(kut)
{
	INI_Save(INI_TYPE_KUTDATA, kut);
	return 1;
}
stock TelefonFrissites(telefon)
{
	INI_Save(INI_TYPE_TELEFONDATA, telefon);
	return 1;
}

fpublic LoadSwat()
{
	new adatok[7][12];
	new szoveg[128];
	new File:file = fopen("Config/swat.cfg", io_read);
	fread(file, szoveg);
	split(szoveg, adatok, ',');
	swatsilenced = strval(adatok[0]);
	swatdeagle = strval(adatok[1]);
	swatmp5 = strval(adatok[2]);
	swatm4 = strval(adatok[3]);
	swatshotgun = strval(adatok[4]);
	swatcombat = strval(adatok[5]);
	swatsniper = strval(adatok[6]);
	fclose(file);
	print("Swat betöltve");
	return 1;
}

fpublic LoadMelleny()
{
	new adatok[500][12], x, y;
	new szoveg[300];
	new File: file = fopen("Config/melleny.cfg", io_read);
	for(x = 1; x < 22; x++)
	{
		fread(file, szoveg);
		split(szoveg, adatok, ',');
		for(y = 1; y < 51; y++)
		{
			FrakcioInfo[x][fMelleny][y] = strval(adatok[y-1]);
		}
	}
	fclose(file);
	print("Páncélszekrény betöltve");
	return 1;
}

fpublic LoadPICKUP()
{
	new adatok[6][128];
	new strFromFile2[256];
	new File: file = fopen("Config/pickup.cfg", io_read);
	new idx = 0;
	if (file)
	{
		while (idx < MAX_PICKUP)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');

			PICKUP[idx][pTipus] = strval(adatok[0]);
			PICKUP[idx][pPosX] = floatstr(adatok[1]);
			PICKUP[idx][pPosY] = floatstr(adatok[2]);
			PICKUP[idx][pPosZ] = floatstr(adatok[3]);
			PICKUP[idx][pPosA] = floatstr(adatok[4]);
			PICKUP[idx][pObjectID] = strval(adatok[5]);

			idx++;
		}
		fclose(file);
	}
	return 1;
}
fpublic TelefonBetoltes()
{
	for(new t = 0; t < MAX_TELEFON; t++)
	{
		new file[64];
		format(file, 64, "data/telefonok/%d.ini", t);
					
		if(fexist(file))
			INI_ParseFile(file, "INI_Load_TelefonData", .bExtra = true, .extra = t);
	
		if(Telefonok[t][tEladva] == false)
		{
			for(new x = 0;x < 5;x++)
			{	
				Telefonok[t][tSms][x] = NINCS;
				strmid(Telefonok_UtolsoSMS[t][x], "¬res", 0, strlen("¬res"),30);
			}
			strmid(Telefonok[t][tTulaj], "Nincs_Tulaj", 0, strlen("Nincs_Tulaj"), 255);
			Telefonok[t][tTulajID] = NINCS;
			Telefonok[t][tSzam] = NINCS;
			Telefonok[t][tEgyenleg] = 0;
			TelefonFrissites(t);
		}		
	}
}

fpublic LoterBetoltes()
{
	for(new loter = 0; loter < MaxLoter; loter++)
	{
		new Float: loterobjectpos[3], Float:lotertelepos[2], Float:loterbabupos[2];
		loterobjectpos[0] = 1529.36;
		loterobjectpos[1] =	1466.00;
		loterobjectpos[2] = 1011.88;
		
		lotertelepos[0] = 1538;
		lotertelepos[1] = 1530;
		
		loterbabupos[0] = 1517.711;
		loterbabupos[1] = 1522.055;
	
		LoterInfo[loter][lLoterObjectek][0] = CreateDynamicObject(18036, loterobjectpos[0], loterobjectpos[0]+(20*loter), loterobjectpos[2],   0.00, 0.00, 0.00, 5995, NINCS, NINCS, 200.0);
		LoterInfo[loter][lLoterObjectek][1] = CreateDynamicObject(18553, loterobjectpos[0]+11.43, (loterobjectpos[0]+(20*loter))-7, loterobjectpos[2]-0.77,   0.00, 0.00, 0.00,5995, NINCS, NINCS, 200.0);	
		
		LoterInfo[loter][lPos][0] = loterbabupos[0];
		LoterInfo[loter][lPos][1] = loterbabupos[1]+(loter*20);
		LoterInfo[loter][lTelePos][0] = lotertelepos[0];
		LoterInfo[loter][lTelePos][1] = lotertelepos[1]+(loter*20);
		
		LoterFrissites(loter);
	}
	return 1;
}
fpublic LoterTorles()
{
	for(new loter = 0; loter < MaxLoter; loter++)
	{
		if(IsValidDynamicObject(LoterInfo[loter][lLoterObjectek][0]))
		{
			DestroyDynamicObject(LoterInfo[loter][lLoterObjectek][0]);
			LoterInfo[loter][lLoterObjectek][0]=INVALID_OBJECT_ID;
		}
		if(IsValidDynamicObject(LoterInfo[loter][lLoterObjectek][1]))
		{
			DestroyDynamicObject(LoterInfo[loter][lLoterObjectek][1]);
			LoterInfo[loter][lLoterObjectek][1]=INVALID_OBJECT_ID;
		}
		LoterInfo[loter][lPos][0] = 0;
		LoterInfo[loter][lPos][1] = 0;
		
		LoterInfo[loter][lTelePos][0] = 0;
		LoterInfo[loter][lTelePos][1] = 0;
		LoterFrissites(loter);
	}					
}

fpublic LoadKikepzo()
{
	new adatok[5][128];
	new strFromFile2[256];
	new File: file = fopen("Config/kikepzo.cfg", io_read);
	new id = 0;
	if (file)
	{
		while (id < MAX_KIKEPZO)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');
			new van = strval(adatok[0]);
			if(van == 1)
				Kikepzo[id][kVan]=true;
			else
				Kikepzo[id][kVan]=false;
			Kikepzo[id][kIdo] = strval(adatok[1]);
			Kikepzo[id][kVw] = strval(adatok[2]);
			Kikepzo[id][kKod] = strval(adatok[3]);
			Kikepzo[id][kBelso] = strval(adatok[4]);
			id++;
		}
		fclose(file);
	}

}
fpublic LoadAreaforgalom()
{
	new adatok[6][128];
	new strFromFile2[256];
	new File: file = fopen("Config/forgalom.cfg", io_read);
	new idx = 0;
	if (file)
	{
		while (idx < MAX_AREA_HELY)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');

			
			AreaForgalom[idx][Aangle] = floatstr(adatok[0]);
			AreaForgalom[idx][Ax]= floatstr(adatok[1]);
			AreaForgalom[idx][Ay] = floatstr(adatok[2]);
			AreaForgalom[idx][Az] = floatstr(adatok[3]);
			AreaForgalom[idx][As] = floatstr(adatok[4]);
			AreaForgalom[idx][AVan] = strval(adatok[5]);
			//printf("%f,%f,%f,%f,%f,",AreaForgalom[idx][Aangle],AreaForgalom[idx][Ax],AreaForgalom[idx][Ay],AreaForgalom[idx][Az],AreaForgalom[idx][As]);
			idx++;
		}
		fclose(file);
		for(new x = 0; x < MAX_AREA_HELY; x++)
		{
			if(AreaForgalom[x][AVan] == 1)
				AreaForgalom[x][Aid] = CreateDynamicCircle(AreaForgalom[x][Ax], AreaForgalom[x][Ay], AreaForgalom[x][As], 0);
		}
	}

	return 1;

}


fpublic LoadRobHelyek()
{
	new adatok[15][256];
	new strFromFile2[256];
	new File: file = fopen("Config/robhelyek.cfg", io_read);
	new idx = 0;
	if (file)
	{
		while (idx < MAX_BANKROBHELY)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');

			ROBHELY[idx][roLezarva] = strval(adatok[0]);
			ROBHELY[idx][roPosX] = floatstr(adatok[1]);
			ROBHELY[idx][roPosY] = floatstr(adatok[2]);
			ROBHELY[idx][roPosZ] = floatstr(adatok[3]);
			ROBHELY[idx][roPosZX] = floatstr(adatok[4]);
			ROBHELY[idx][roPosZY] = floatstr(adatok[5]);
			ROBHELY[idx][roPosA] = floatstr(adatok[6]);
			ROBHELY[idx][roRobId] = strval(adatok[7]);
			ROBHELY[idx][roVw] = strval(adatok[8]);
			ROBHELY[idx][roInt] = strval(adatok[9]);
			ROBHELY[idx][roLsVagySf] = strval(adatok[10]);
			ROBHELY[idx][roSzefPenz] = strval(adatok[11]);
			ROBHELY[idx][roTulaj] = strval(adatok[12]);
			ROBHELY[idx][roJelszo] = strval(adatok[13]);
			ROBHELY[idx][roBiztonsag] = strval(adatok[14]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

fpublic LoadATM()
{
	for(new atmid = 0; atmid < MAX_ATM; atmid++)
	{
		if(IsValidDynamicObject(ATM[atmid][aObjectID])) DestroyDynamicObject(ATM[atmid][aObjectID]), ATM[atmid][aObjectID]=INVALID_OBJECT_ID;
		
		ATM[atmid][aObjectID] = INVALID_OBJECT_ID;
		ATM[atmid][aPosX] = 0.0;
		ATM[atmid][aPosY] = 0.0;
		ATM[atmid][aPosZ] = 0.0;
		ATM[atmid][aPosA] = 0.0;
		ATM[atmid][aVw] = 0;
		ATM[atmid][aInt] = 0;
		ATM[atmid][aInt] = 0;
		ATM[atmid][aPenz] = 0;
		
	}
	new adatok[8][128];
	new strFromFile2[256];
	new File: file = fopen("Config/atm.cfg", io_read);
	new idx = 0;
	if (file)
	{
		while (idx < MAX_ATM)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');


			ATM[idx][aPosX] = floatstr(adatok[0]);
			ATM[idx][aPosY] = floatstr(adatok[1]);
			ATM[idx][aPosZ] = floatstr(adatok[2]);
			ATM[idx][aPosA] = floatstr(adatok[3]);
			ATM[idx][aObjectID] = strval(adatok[4]);
			ATM[idx][aVw] = strval(adatok[5]);
			ATM[idx][aInt] = strval(adatok[6]);
			ATM[idx][aPenz] = strval(adatok[7]);

			idx++;
		}
		fclose(file);
	}
	for(new x = 0; x < MAX_ATM; x++)
	{
		if(ATM[x][aObjectID] > 0)
		{
			ATM[x][aObjectID] = CreateDynamicObject(2942, ATM[x][aPosX], ATM[x][aPosY], ATM[x][aPosZ]-0.4, 0.0, 0.0, ATM[x][aPosA],ATM[x][aVw],ATM[x][aInt]);
			if(ATM[x][aPenz] < 1000000) ATM[x][aPenz]=1000000;
		}
		else
			ATM[x][aObjectID] = NINCS;
			
		
	}
	return 1;
}
fpublic LoadKereskedo()
{
	new adatok[3][128];
	new strFromFile2[256];
	new File: file = fopen("Config/kereskedo.cfg", io_read);
	new idx = 0;
	if (file)
	{
		while (idx < MAX_KERESKEDO)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');
			
			KeredkedoVetel[idx][kUID] = strval(adatok[0]);
			strmid(KeredkedoVetel[idx][kKOCSI], adatok[1], 0, strlen(adatok[1]), 64);
			KeredkedoVetel[idx][kAra] =strval(adatok[2]);

			idx++;
		}
		fclose(file);
	}
	return 1;
}
fpublic LoadPARKOLO()
{
	new adatok[6][128];
	new strFromFile2[256];
	new File: file = fopen("Config/parkolo.cfg", io_read);
	new idx = 0;
	if (file)
	{
		while (idx < MAX_PARKOLO)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');

			PARKOLO[idx][parkPosX]=floatstr(adatok[0]);
			PARKOLO[idx][parkPosY]=floatstr(adatok[1]);
			PARKOLO[idx][parkPosZ]=floatstr(adatok[2]);
			PARKOLO[idx][parkTAV]=strval(adatok[3]);
			idx++;
		}
		fclose(file);
	}
	return 1;
}
/*
fpublic LoadOBJECT()
{
	for(new id = 0; id < MAX_OBJECTSZ; id++)
	{
		if(IsValidDynamicObject(OBJECT[id][sObjectID]))DestroyDynamicObject(OBJECT[id][sObjectID]),OBJECT[id][sObjectID]=INVALID_OBJECT_ID;
		OBJECT[id][sObjectID] = INVALID_OBJECT_ID; 
		OBJECT[id][sTipus] = 0;
		OBJECT[id][sPosX] = 0.0;
		OBJECT[id][sPosY] = 0.0;
		OBJECT[id][sPosZ] = 0.0;
		OBJECT[id][sPosA] = 0.0;
		OBJECT[id][sVw] = 0;
		OBJECT[id][sInt] = 0;
		
	}
	new adatok[8][128];
	new strFromFile2[256];
	new File: file = fopen("Config/object.cfg", io_read);
	new idx = 0;
	if (file)
	{
		while (idx < MAX_OBJECTSZ)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');

			OBJECT[idx][sTipus] = strval(adatok[0]);
			OBJECT[idx][sPosX] = floatstr(adatok[1]);
			OBJECT[idx][sPosY] = floatstr(adatok[2]);
			OBJECT[idx][sPosZ] = floatstr(adatok[3]);
			OBJECT[idx][sPosA] = floatstr(adatok[4]);
			OBJECT[idx][sObjectID] = strval(adatok[5]);
			OBJECT[idx][sVw] = strval(adatok[6]);
			OBJECT[idx][sInt] = strval(adatok[7]);

			idx++;
		}
		fclose(file);
	}
	for(new x = 0; x < MAX_OBJECTSZ; x++)
	{
		OBJECT[x][sObjectID] = CreateDynamicObject(OBJECT[x][sTipus], OBJECT[x][sPosX], OBJECT[x][sPosY], OBJECT[x][sPosZ], 0.0, 0.0, OBJECT[x][sPosA],OBJECT[x][sVw],OBJECT[x][sInt]);
	}
	return 1;
}*/
fpublic SzefToltes()
{
	for(new x = 0; x < MAX_FRAKCIO; x++)
	{
		if(FrakcioInfo[x][fObject])
		{
			if(FrakcioInfo[x][fObjectID] != 0)
			{
				if(IsValidDynamicObject(FrakcioInfo[x][fObjectID])) DestroyDynamicObject(FrakcioInfo[x][fObjectID]), FrakcioInfo[x][fObjectID]=INVALID_OBJECT_ID;
				FrakcioInfo[x][fObjectID] = 0;
			}
			FrakcioInfo[x][fObjectID] = CreateDynamicObject(2332, FrakcioInfo[x][fPosX], FrakcioInfo[x][fPosY], FrakcioInfo[x][fPosZ]-0.6, 0.0, 0.0, FrakcioInfo[x][fPosA], FrakcioInfo[x][fVW]);
		}
	}
	return 1;
}
fpublic PICKUPToltes()
{
	for(new x = 0; x < MAX_PICKUP; x++)
	{
		PICKUP[x][pObjectID] = UjPickup(PICKUP[x][pTipus], 23, PICKUP[x][pPosX], PICKUP[x][pPosY], PICKUP[x][pPosZ]);
		//printf("PICKUP ID: %d betöltve",x);
	}
	return 1;
}
//------------------------------------------------------------------------------------------------------
fpublic OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

fpublic OnPlayerExitedMenu(playerid)
{
	return 1;
}

fpublic SyncUp()
{
	ParancsBetoltes();

	new time;
	getdate(DatumEv, DatumHonap, time);
	if(time != DatumNap)
		DatumNap = time, format(JelenlegiDatum, 12, "%d-%d-%d", DatumEv, DatumHonap, DatumNap);

	time = UnixTime;
	
	if(ResiKukaFrissites)
	{
		for(new h = 0; h < sizeof(TrashInfo); h++)
		{
			if(!TrashInfo[h][tSzemet]) continue;
			TrashInfo[h][tSzemet] = false;
			if(IsValidDynamicObject(TrashInfo[h][tSzemetObject])) DestroyDynamicObject(TrashInfo[h][tSzemetObject]);
			if(IsValidDynamic3DTextLabel(TrashInfo[h][tSzemetLabel])) DestroyDynamic3DTextLabel(TrashInfo[h][tSzemetLabel]), TrashInfo[h][tSzemetLabel] = INVALID_3D_TEXT_ID;
		}
		SzemetLerak();
		ResiKukaFrissites = false;
		BizzInfo[BIZ_PB][bLocked] = 0;
	}

	foreach(Jatekosok, playerid)
	{
		//FegyverCheatCheck(playerid);

		if(!IsPlayerConnected(playerid) || !Logged(playerid) || IsPlayerNPC(playerid)) continue;

		if(PlayerInfo[playerid][pHitman] != 0 && 0 < PlayerInfo[playerid][pHitmanIdo] < time)
		{
			PlayerInfo[playerid][pHitman] = 0;
			PlayerInfo[playerid][pHitmanIdo] = 0;
			Msg(playerid, "Lejárt a hitmantagságod");
		}
	//	if(!Animban[playerid]) GiveHealth(playerid, -1.25);
		if(PlayerInfo[playerid][pJegy] > 1 && PlayerInfo[playerid][pJegy] < time)
		{
			Msg(playerid, "Lejárt a bérleted");
			Cselekves(playerid, "bérlete lejárt");
			PlayerInfo[playerid][pJegy] = 0;
		}
		//repair törlés bugkihasználás miatt
		/*foreach(Jatekosok, x)
		{
			if(RepairIdo[x] != NINCS)
			{
				if(RepairIdo[x] > 0)
				{
					RepairIdo[x] --;
				}
				else if(RepairIdo[x] == 0)
				{
					RepairIdo[x] = NINCS;
					Msg(x,"A repair elfogadási idõd lejárt");
				}
			}
		}*/
		
		if(WantedLevel[playerid] <= UnixTime)
			WantedLevel[playerid] = 0;
		
		//cucc törlõdés
		for(new i = 0; i < MAX_DROP; i++)
        {
			if(DropInfo[i][dVan] && 0 < DropInfo[i][dTime] < UnixTime)
				DropRemove(i);
        }
		
		for(new i = 0; i < sizeof(PenzDropInfo); i++)
		{
			if(PenzDropInfo[i][PVan])
			{
	
				if(PenzDropInfo[i][PenzIdo] < UnixTime)	
				{
					if(IsValidDynamicObject(EldobottPenzObject[i]))
						DestroyDynamicObject(EldobottPenzObject[i]), EldobottPenzObject[i]=INVALID_OBJECT_ID;
					if(IsValidDynamic3DTextLabel(EldobottPenzText[i]))
						DestroyDynamic3DTextLabel(EldobottPenzText[i]), EldobottPenzText[i]=INVALID_3D_TEXT_ID;

					PenzDropInfo[i][PenzX] = 0.0;
					PenzDropInfo[i][PenzY] = 0.0;
					PenzDropInfo[i][PenzZ] = 0.0;
					PenzDropInfo[i][PenzOsszeg] = 0;
					PenzDropInfo[i][PenzIdo] = NINCS;
					PenzDropInfo[i][PVan] = false;
				}
			}
		}
		for(new idx=1; idx < MAX_ELDOBAS; idx++ )
		{
			if(Eldob[idx][eldobhasznalva])
			{
				
				if(Eldob[idx][eIdo] < UnixTime)
				{
					Eldob[idx][Tipus] = -1;
					Eldob[idx][Mennyiseg] = 0;
					if(IsValidDynamicObject(Eldob[idx][eldobobject]))
						DestroyDynamicObject(Eldob[idx][eldobobject]),Eldob[idx][eldobobject]=INVALID_OBJECT_ID;
					if(IsValidDynamic3DTextLabel(Eldob[idx][texteldob]))
						DestroyDynamic3DTextLabel(Eldob[idx][texteldob]),Eldob[idx][texteldob]=INVALID_3D_TEXT_ID;
					Eldob[idx][eldobposx] = 0;
					Eldob[idx][eldobposy] = 0;
					Eldob[idx][eldobposz] = 0;
					Eldob[idx][eldobhasznalva] = false;
					Eldob[idx][eInt] = 0;
					Eldob[idx][eVw] = 0;
					Eldob[idx][eIdo] = NINCS;
				}
				
			}	
		}

	}
	For(x, 1, MAX_VEHICLES)
	{
		if(CarWantedLevel[x] <= UnixTime)
			CarWantedLevel[x] = 0;
	}
	SyncTime();
	DollahScoreUpdate();
	//SaveStuff();
}

fpublic SyncTime()
{
	new string[64];
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		format(string, sizeof(string), "ClassRPG: Az idõ most: %d:00",tmphour);
		SendClientMessageToAll(COLOR_YELLOW, string);

		ghour = tmphour;
		gdate = getdate();
		if (realtime)
		{
			IdoAllitas(tmphour);
		}
		Lotto();
		CheckGraffiti();
		if(ghour == 4)
			IllegalStuffDelete();
	}
}

/*fpublic IsPlayerInTurf(playerid, turfid)
{
	if(IsPlayerConnected(playerid))
	{
		if(turfid == -1)
		{
			return 0;
		}
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		if(x >= TurfInfo[turfid][zMinX] && x < TurfInfo[turfid][zMaxX] && y >= TurfInfo[turfid][zMinY] && y < TurfInfo[turfid][zMaxY])
		{
	 		return 1;
		}
	}
	return 0;
}*/

fpublic GetClosestPlayer(p1)
{
	new Float:dis,Float:dis2,player;
	player = NINCS;
	dis = 99999.99;
	foreach(Jatekosok, x)
	{
		 if(PlayerVW[x] == PlayerVW[p1] && PlayerInterior[x] == PlayerInterior[p1] && Tevezik[x]==NINCS)
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}

fpublic Production()
{
	//new string[256];

	for(new i = 0; i < MAXIRC; i++)
	{
		if(IRCInfo[i][iIdo] < UnixTime && IRCInfo[i][iIdo] != NINCS)
		{
			strmid(IRCInfo[i][iAdmin], "Nincs", 0, 5, 24);
			IRCInfo[i][iAdminID] = 0;
			strmid(IRCInfo[i][iMOTD], "Üres channel", 0, 12, 128);

			IRCInfo[i][iPassword][0] = EOS;
			IRCInfo[i][iNeedPass] = 0;
			IRCInfo[i][iLock] = 1;
			IRCInfo[i][iIdo] = NINCS;
		}
	}
	SaveIRC();

	for(new a = 0; a < MAX_FIXTRAFI; a++)
	{
		if(FixTrafi[a][fxID] == NINCS) continue;

		if(FixTrafi[a][fxErvenyes] < UnixTime)
		{
			if(IsValidDynamicObject(FixTrafi[a][fxID])) DestroyDynamicObject(FixTrafi[a][fxID]);
			if(IsValidDynamic3DTextLabel(FixTrafi[a][fxLabel])) DestroyDynamic3DTextLabel(FixTrafi[a][fxLabel]);
			FixTrafi[a][fxID] = NINCS;
		}
		else
		{
			new labelinfo[128];
			Format(labelinfo, "FixTrafipax\n(( %s ))\nMég %d percig aktív", FixTrafi[a][fxLerakta], floatround(float(FixTrafi[a][fxErvenyes]-UnixTime)/60.0));

			if(floatround(float(FixTrafi[a][fxErvenyes]-UnixTime)/60.0) >= 25)
				UpdateDynamic3DTextLabelText(FixTrafi[a][fxLabel], COLOR_GREEN, labelinfo);
			else if(25 > floatround(float(FixTrafi[a][fxErvenyes]-UnixTime)/60.0) >= 15)
				UpdateDynamic3DTextLabelText(FixTrafi[a][fxLabel], COLOR_LIGHTGREEN, labelinfo);
			else if(15 > floatround(float(FixTrafi[a][fxErvenyes]-UnixTime)/60.0) >= 10)
				UpdateDynamic3DTextLabelText(FixTrafi[a][fxLabel], COLOR_YELLOW, labelinfo);
			else if(10 > floatround(float(FixTrafi[a][fxErvenyes]-UnixTime)/60.0) >= 5)
				UpdateDynamic3DTextLabelText(FixTrafi[a][fxLabel], COLOR_LIGHTRED, labelinfo);
			else
				UpdateDynamic3DTextLabelText(FixTrafi[a][fxLabel], COLOR_RED, labelinfo);
		}
	}

	foreach(Jatekosok, x)
	{
		PlayerDropInfo[x][pAmmoDropped] = 0;
		
		if(PingKick[x] >1)
			PingKick[x]--;

		if(PlayerInfo[x][pCigiFuggoseg] == 1)
		{
			if(CigiFuggo[x])
			{
				SendClientMessage(x, COLOR_RED,"Függõ vagy szükséged van a cigire!!!");
				GiveHealth(x, -20.0);
				CigiFuggo[x]=false;
			}
			else
			{
				Cselekves(x, "már nagyon vágyik egy cigire, majd belehal..");
				CigiFuggo[x]=true;
			}
		}
		if(PlayerInfo[x][pAS] <UnixTime && PlayerInfo[x][pAS]>1)
		{
		    PlayerInfo[x][pAS] = 0;
			Channel(x, NINCS, true);
			Msg(x,"Az as-ed lejárt");
		}
		if(PlayerInfo[x][pOnkentes] < UnixTime && PlayerInfo[x][pOnkentes] > 1)
		{
			Msg(x, "Az önkéntes mentõs szolgálatod lejárt!");
			PlayerInfo[x][pOnkentes] = 0;
			if(Onkentesszolgalatban[x])
			{
				if(IsValidDynamic3DTextLabel(Onkentestext[x])) DestroyDynamic3DTextLabel(Onkentestext[x]), Onkentestext[x] = INVALID_3D_TEXT_ID;
				Onkentesszolgalatban[x] = false;
				Medics--;
				Munkaruha(x, 0);
			}
		}
		if(RioZeneenged[x] < UnixTime && RioZeneenged[x] > 0)
		{
		    RioZeneenged[x] = 0;
			Msg(x,"A zenélési engedélyed lejárt");
		}
	    if(PlayerInfo[x][pFishes] >= 5) { if(FishCount[x] >= 3) { PlayerInfo[x][pFishes] = 0; } else { FishCount[x] += 1; } }
		if(TilosOlni == 1) Msg(x, "Ne feledd, a zéró tolerancia be van kapcsolva!");
		if(TilosOlni == 2) 
		{
			Msg(x, "Ne feledd, a zéró tolerancia be van kapcsolva!");
			if(WeaponArmed(x) && !IsPlayerNPC(x) && !Harcol[x] && !Paintballozik[x] && !Kikepzoben[x])
			{
				Msg(x, "ExtraZero alatt nem vehetsz elõ fegyvert. Elrakva!");
				WeaponArm(x);
			}
		}
	}
	for(new t = 0; t < MAXTERULET; t++)
	{
		if(!TeruletInfo[t][Van]) continue;
		if(OnlineTagok(TeruletInfo[t][tTulaj]) >= 6)
		{
			new tagok = OnlineTagok(TeruletInfo[t][tTulaj]);
			if(tagok >= 6)
				TeruletInfo[t][tHaszonIdo] += 300;
			elseif(tagok >= 10)
				TeruletInfo[t][tHaszonIdo] += 450;
			elseif(tagok >= 15)
				TeruletInfo[t][tHaszonIdo] += 600;
			TeruletUpdate(t, TERULET_HaszonIdo);

			if(TeruletInfo[t][tHaszonIdo] >= TERULET_HASZON_IDO)
			{
				new uzenet[128];
				for(new h = 0; h < 5; h++)
				{
					if(TeruletInfo[t][tHaszonMennyi][h] < 1 || TeruletInfo[t][tHaszonMennyi][h] > 1000000) continue;
					switch(TeruletInfo[t][tHaszon][h])
					{
						case 1:
						{
							FrakcioInfo[ TeruletInfo[t][tTulaj] ][fPenz] += TeruletInfo[t][tHaszonMennyi][h];
							
							if(!uzenet[0])
								format(uzenet, 128, "[Warterület] %s - Haszon: %dFt pénz", TeruletInfo[t][tNev], TeruletInfo[t][tHaszonMennyi][h]);
							else
								format(uzenet, 128, "%s, %dFt pénz", uzenet, TeruletInfo[t][tHaszonMennyi][h]);
						}
						case 2:
						{
							FrakcioInfo[ TeruletInfo[t][tTulaj] ][fKokain] += TeruletInfo[t][tHaszonMennyi][h];
							FrakcioInfo[ TeruletInfo[t][tTulaj] ][fHeroin] += TeruletInfo[t][tHaszonMennyi][h];
							FrakcioInfo[ TeruletInfo[t][tTulaj] ][fMarihuana] += TeruletInfo[t][tHaszonMennyi][h];
							
							if(!uzenet[0])
								format(uzenet, 128, "[Warterület] %s - Haszon: %dg drog", TeruletInfo[t][tNev], TeruletInfo[t][tHaszonMennyi][h]);
							else
								format(uzenet, 128, "%s, %dg drog", uzenet, TeruletInfo[t][tHaszonMennyi][h]);
						}
						case 3:
						{
							FrakcioInfo[ TeruletInfo[t][tTulaj] ][fMati] += TeruletInfo[t][tHaszonMennyi][h];
							
							if(!uzenet[0])
								format(uzenet, 128, "[Warterület] %s - Haszon: %ddb material", TeruletInfo[t][tNev], TeruletInfo[t][tHaszonMennyi][h]);
							else
								format(uzenet, 128, "%s, %ddb material", uzenet, TeruletInfo[t][tHaszonMennyi][h]);
						}
					}
				}
				
				TeruletInfo[t][tHaszonIdo] = 0;
				
				if(uzenet[0]) foreach(Jatekosok, p)
				{
					if(LMT(p, TeruletInfo[t][tTulaj]))
						SendClientMessage(p, COLOR_GREEN, uzenet);
				}
			}
		}
	}

	new player, frakcio;
	for(new gy = 0; gy < MAX_GYEMANT; gy++)
	{
		if(Gyemant[gy][gPos][0] == 0.0 || Gyemant[gy][gPlayer] < 1 && Gyemant[gy][gFrakcio] < 1) continue;

		player = Gyemant[gy][gPlayer];
		frakcio = Gyemant[gy][gFrakcio];

		if(Gyemant[gy][gPlayer] > 0 && (player = OnlineUID( player ), player) != NINCS && !AFK[player]) // frakció nélküli gyémánt extrái
		{
			Gyemant[gy][gIdo] += 300;
			if(Gyemant[gy][gIdo] >= GYEMANT_HASZON_IDO)
			{
				PlayerInfo[player][pAccount] += 250000;
				Msg(player, "[Gyémánt] Kaptál 250,000Ftot");
				Gyemant[gy][gIdo] = 0;
			}
		}
		else if(0 < frakcio < MAX_FRAKCIO && OnlineTagok(frakcio) >= 5) // frakció extrák
		{
			Gyemant[gy][gIdo] += 300;
			if(Gyemant[gy][gIdo] >= GYEMANT_HASZON_IDO)
			{
				Gyemant[gy][gIdo] = 0;

				new msg[128];
				if(LegalisFrakcio(frakcio)) // legális
				{
					FrakcioSzef(frakcio,5000000, 27);
					format(msg, 128, "[Gyémánt] Kaptatok 5,000,000Ftot a széfbe");
					foreach(Jatekosok, p)
					{
						if(PlayerInfo[p][pLeader] == frakcio)
							SendClientMessage(p, COLOR_WHITE, msg);
					}
				}
				else // illegális
				{
					FrakcioSzef(frakcio,3000000, 28);
					FrakcioInfo[frakcio][fKokain] += 1000;
					FrakcioInfo[frakcio][fHeroin] += 1000;
					FrakcioInfo[frakcio][fMarihuana] += 1000;
					FrakcioInfo[frakcio][fMati] += 10000;
					format(msg, 128, "[Gyémánt] Kaptatok 3,000,000Ftot, 1kg drogot, 10000db materialt a széfbe");
					foreach(Jatekosok, p)
					{
						if(PlayerInfo[p][pLeader] == frakcio)
							SendClientMessage(p, COLOR_WHITE, msg);
					}
				}
			}
		}

	}
	GyemantAkcio( GYEMANT_MENT );
	
	//benzinkút bérlés
	for(new b = 0; b < MAX_BENZINKUT; b++)
	{
		if(BenzinKutak[b][bBerlesIdo] < UnixTime)
		{
			if(BenzinKutak[b][bTulajID] != NINCS)
			{
				if(Online(BenzinKutak[b][bTulaj]))
				{
					new szoveg[128];
					if(BenzinKutak[b][bSzef] < 0) 
					{
						format(szoveg, 128,"A bérlési idõd lejárt, a benzinkutat elvettük, mivel minuszba volt a széfed ezért levontuk tõled");
						if(Online(BenzinKutak[b][bTulajID]))
							PenzLevesz(BenzinKutak[b][bTulajID], BenzinKutak[b][bSzef]);
						BenzinKutak[b][bSzef] = 0;
					}
					else
						format(szoveg, 128,"A bérlési idõd lejárt, a benzinkutat elvettük!");
						
					if(Online(BenzinKutak[b][bTulajID]))
						SendClientMessage(BenzinKutak[b][bTulajID],COLOR_LIGHTRED, szoveg);
				}	
				BenzinKutak[b][bTulajID] = NINCS;
				strmid(BenzinKutak[b][bTulaj], "Class_City", 0, strlen("Class_City"), 20);
				BenzinKutFrissites(b);
			}	
		}
	}
	if(RendelesAlatt == 1)
	{
		if(RendelesPenz <= 0)
		{
			RendelesAlatt = 2;
			return 1;
		}
		for(new c = 0; c < MAX_PLAYERS; c++)
		{
			if(!IsPlayerConnected(c) || !Logged(c) || IsPlayerNPC(c) || PlayerInfo[c][pAutoker]<1) continue;
			SendFormatMessage(c, COLOR_GREY, "Kereskedõi felhívás: Egy import kocsi rendelés alatt van! Kocsi: %s, hátralévõ befizetés: %dFt", GetVehicleModelName(RendelesModel), RendelesPenz);
		}
	}
	else if(RendelesAlatt == 2)
	{
		RendelesIdo -= 300;
		if(RendelesIdo <= 0)
		{
			for(new c = 0; c < MAX_PLAYERS; c++)
			{
				if(!IsPlayerConnected(c) || !Logged(c) || IsPlayerNPC(c) || PlayerInfo[c][pAutoker]<1) continue;
				SendClientMessage(c, COLOR_LIGHTBLUE, "Kereskedõi felhívás: Az import kocsi megérkezett a kikötõbe! Át kell hoznod az autkereskedõ HQra, hogy eladhasd!");
			}
			CreateKereskedoCar();
			RendelesAlatt = 0;
		}
		//SaveStuff();
	}
	
	format(_tmpString, 128, "DELETE FROM %s WHERE orok='n' and ido<='%d'", SQL_DB_Ban, UnixTime); doQuery( _tmpString );
	LetszamFrissites();
	LeaderFrissites();
	return 1;
}

fpublic DateProp(playerid, type)
{
	new ido = UnixTime;
	if(type == DP_Kocsi)
	{
		new kulcs = PlayerInfo[playerid][pPcarkey], kulcs2 = PlayerInfo[playerid][pPcarkey2], kulcs3 = PlayerInfo[playerid][pPcarkey3];
		if(kulcs != NINCS)
		{
			CarInfo[kulcs][cDate] = ido;
			CarUpdate(kulcs, CAR_Date);
		}
		if(kulcs2 != NINCS)
		{
			CarInfo[kulcs2][cDate] = ido;
			CarUpdate(kulcs2, CAR_Date);
		}
		if(kulcs3 != NINCS)
		{
			CarInfo[kulcs3][cDate] = ido;
			CarUpdate(kulcs3, CAR_Date);
		}
	}
	else if(type == DP_Haz)
	{
		new haz = PlayerInfo[playerid][pPhousekey], haz2 = PlayerInfo[playerid][pPhousekey2], haz3 = PlayerInfo[playerid][pPhousekey3];
		if(haz != NINCS)
		{
			HouseInfo[haz][hDate] = ido;
			HazUpdate(haz, HAZ_Date);
		}
		if(haz2 != NINCS)
		{
			HouseInfo[haz2][hDate] = ido;
			HazUpdate(haz2, HAZ_Date);
		}
		if(haz3 != NINCS)
		{
			HouseInfo[haz3][hDate] = ido;
			HazUpdate(haz3, HAZ_Date);
		}
	}
	else if(type == DP_Garazs)
	{
		if(PlayerInfo[playerid][pGarazs] != NINCS)
		{
			GarazsInfo[PlayerInfo[playerid][pGarazs]][hDate] = ido;
			GarazsUpdate(PlayerInfo[playerid][pGarazs], GARAZS_Date);
		
		}
	}
}

fpublic Checkprop(type)
{
	new ido = UnixTime, propido, eladasiido;
	if(checkprop < 1 || checkprop > 5) return 1;
	if(type == DP_Kocsi)
	{
		for(new c = 0; c < sizeof(CarInfo); c++)
		{
			if(checkprop < 1) return 1;
			if(CarInfo[c][Van] == 1 && CarInfo[c][cOwned] == 1)
			{
				propido = CarInfo[c][cDate];
				eladasiido = ido - (60*60*24*EladasIdo[0]);
				if(propido <= eladasiido)
				{
					KocsiElad(c);
					checkprop--;
				}
			}
		}
	}
	else if(type == DP_Haz)
	{
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(checkprop < 1) return 1;
			if(HouseInfo[h][Van] == 1 && HouseInfo[h][hOwned] == 1 && HouseInfo[h][hDate] != 0)
			{
				propido = HouseInfo[h][hDate];
				eladasiido = ido - (60*60*24*EladasIdo[1]);
				if(propido <= eladasiido)
				{
					HazElad(h);
					checkprop--;
				}
			}
		}
	}
	return 1;
}

stock JatszottOra(playerid)
{
	new jatekosszefje = GetPlayerBerSzefID(playerid);
	if(jatekosszefje != -1)
	{
	    BerSzef[jatekosszefje][bIdo]--;
	    if(BerSzef[jatekosszefje][bIdo] == 0)
	    {
	        new query[256];
	        BerSzef[jatekosszefje][bTulajid] = -1;
			BerSzef[jatekosszefje][bMati] = 0;
			BerSzef[jatekosszefje][bMarihuana] = 0;
			BerSzef[jatekosszefje][bHeroin] = 0;
			BerSzef[jatekosszefje][bKokain] = 0;
			BerSzef[jatekosszefje][bPenz] = 0;
			BerSzef[jatekosszefje][bIdo] = 0;
			BerSzef[jatekosszefje][bKaja] = 0;
			BerSzef[jatekosszefje][bCigi] = 0;
			BerSzef[jatekosszefje][bRuha] = 0;
			BerSzef[jatekosszefje][bArany] = 0;
			BerSzef[jatekosszefje][bHasznalva] = false;

			format(query, sizeof(query), "DELETE FROM %s WHERE ID='%d'",SQL_DB_Berszefek, jatekosszefje);
			doQuery(query);
	    }
	    if(BerSzef[jatekosszefje][bIdo] <= 5)
	    {
	        SendClientMessage(playerid, COLOR_ORANGE, "============ [ Információ ] ============");
			SendFormatMessage(playerid, COLOR_GREEN, "Az Ön széfe %d ((Játszott óra)) nap múlva lejár.", BerSzef[jatekosszefje][bIdo]);
			SendClientMessage(playerid, COLOR_GREEN, "Ha meg szeretné hosszabítani látogasson el széftermünkbe.");
	    }
	}

	if(PlayerInfo[playerid][pPremiumCsomag] != 0 && PlayerInfo[playerid][pPremiumIdo] <= UnixTime)
	{
		Msg(playerid, "A prémiumod lejárt.");
		PlayerInfo[playerid][pPremiumCsomag] = 0;
		PlayerInfo[playerid][pPremiumIdo] = 0;
	}
	
	PlayerInfo[playerid][pConnectTime] += 1;
	PlayerInfo[playerid][pExp] += 1;
	CheckSzint(playerid);
	if(PlayerInfo[playerid][pUtlevel] > 0)
	{
		if(PlayerInfo[playerid][pUtlevel] == 1) Msg(playerid, "Lejárt az útleveled!");
		PlayerInfo[playerid][pUtlevel]--;
	}
	if(PlayerInfo[playerid][pSzemelyi] > 0)
	{
		if(PlayerInfo[playerid][pSzemelyi] == 1) Msg(playerid, "Lejárt a személyi igazolványod!");
		PlayerInfo[playerid][pSzemelyi]--;
	}
	if(PlayerInfo[playerid][pTaxiEngedely] > 0)
	{
		if(PlayerInfo[playerid][pTaxiEngedely] == 1) Msg(playerid, "Lejárt a taxi engedélyed!");
		PlayerInfo[playerid][pTaxiEngedely]--;
	}
	
	if(PlayerInfo[playerid][pCarLic] > 0)
	{
		if(PlayerInfo[playerid][pCarLic] == 1) Msg(playerid, "Lejárt a személygépjármû jogosítványod!");
		PlayerInfo[playerid][pCarLic] -= 1;
	}
	if(PlayerInfo[playerid][pMotorJogsi] > 0)
	{
		if(PlayerInfo[playerid][pMotorJogsi] == 1) Msg(playerid, "Lejárt a motor jogosítványod!");
		PlayerInfo[playerid][pMotorJogsi] -= 1;
	}
	if(PlayerInfo[playerid][pKamionJogsi] > 0)
	{
		if(PlayerInfo[playerid][pKamionJogsi] == 1) Msg(playerid, "Lejárt a kamion jogosítványod!");
		PlayerInfo[playerid][pKamionJogsi] -= 1;
	}
	if(PlayerInfo[playerid][pKreszJogsi] > 0)
	{
		if(PlayerInfo[playerid][pKreszJogsi] == 1) Msg(playerid, "Lejárt a KRESZ bizonyítványod!");
		PlayerInfo[playerid][pKreszJogsi] -= 1;
	}
	if(PlayerInfo[playerid][pAdrJogsi] > 0)
	{
		if(PlayerInfo[playerid][pAdrJogsi] == 1) Msg(playerid, "Lejárt az ADR engedélyed!");
		PlayerInfo[playerid][pAdrJogsi] -= 1;
	}
	if(PlayerInfo[playerid][pJogsiTiltIdo] > 0)
	{
		if(PlayerInfo[playerid][pJogsiTiltIdo] == 1) Msg(playerid, "Lejárt a vizsgáztatástól való eltítlásod! Újra vizsgázhatsz.");
		PlayerInfo[playerid][pJogsiTiltIdo] -= 1, strmid(PlayerInfo[playerid][pJogsiTiltOk], "NINCS", 0, 5, 128);
	}
	if(PlayerInfo[playerid][pFrakcioTiltIdo]>0)
	{
		if(PlayerInfo[playerid][pFrakcioTiltIdo] == 1) Msg(playerid, "Lejárt a frakciótól való eltítlásod!");
		PlayerInfo[playerid][pFrakcioTiltIdo] -= 1;

	}
	if(PlayerInfo[playerid][pFegyverTiltIdo]>0)
	{
		if(PlayerInfo[playerid][pFegyverTiltIdo] == 1) Msg(playerid, "Lejárt a fegyverrõl való eltítlásod!");
		PlayerInfo[playerid][pFegyverTiltIdo] -= 1;
	
	}
	if(PlayerInfo[playerid][pBoatLic] > 0)
	{
		if(PlayerInfo[playerid][pBoatLic] == 1) Msg(playerid, "Lejárt a hajó jogosítványod!");
		PlayerInfo[playerid][pBoatLic] -= 1;
	}
	if(PlayerInfo[playerid][pGunLic] > 0)
	{
		if(PlayerInfo[playerid][pGunLic] == 1) Msg(playerid, "Lejárt a fegyverengedélyed!");
		PlayerInfo[playerid][pGunLic] -= 1;
	}
	if(PlayerInfo[playerid][pFlyLic] > 0)
	{
		if(PlayerInfo[playerid][pFlyLic] == 1) Msg(playerid, "Lejárt a repülõ jogosítványod!");
		PlayerInfo[playerid][pFlyLic] -= 1;
	}
	
	if(PlayerInfo[playerid][pHeliLic] > 0)
	{
		if(PlayerInfo[playerid][pHeliLic] == 1) Msg(playerid, "Lejárt a Helikopter engedélyed!");
		PlayerInfo[playerid][pHeliLic] -= 1;
	}
	if(PlayerInfo[playerid][pFishLic] > 0)
	{
		if(PlayerInfo[playerid][pFishLic] == 1) Msg(playerid, "Lejárt a horgászengedélyed!");
		PlayerInfo[playerid][pFishLic] -= 1;
	}
	if(PlayerInfo[playerid][pVadaszEngedely] > 0)
	{
		if(PlayerInfo[playerid][pVadaszEngedely] == 1) Msg(playerid, "Lejárt a vadászengedélyed!");
		PlayerInfo[playerid][pVadaszEngedely] -= 1;
	}
	//skill
	new maxskillje = SkillLevel(PlayerInfo[playerid][pHackingSkill]) + SkillLevel(PlayerInfo[playerid][pDrugsSkill])+ SkillLevel(PlayerInfo[playerid][pJackSkill]) + SkillLevel(PlayerInfo[playerid][pBetoroSkill]);
	new levonas = 0;
	
	if(0 <= maxskillje < 5)
		levonas = 0;
	else if(5 <= maxskillje < 9)
		levonas =1;
	else if(9 <= maxskillje < 15)
		levonas =2;	
	else if(15 <= maxskillje < 20)
		levonas =3;
	else if(20 <= maxskillje < 30)
		levonas =4;	
	else if(30 <= maxskillje < 35)
		levonas =10;	
	else if(30 <= maxskillje < 45)
		levonas =20;	
	else if(45 <= maxskillje)
		levonas =25;	
	else 
		levonas =30;	
		
	if(PlayerInfo[playerid][pHackingSkill] > levonas && !IsACop(playerid)) PlayerInfo[playerid][pHackingSkill] -=levonas; 
	
	if(PlayerInfo[playerid][pDrugsSkill] > levonas && !IsACop(playerid)) PlayerInfo[ playerid][pDrugsSkill] -=levonas; 
	
	if(PlayerInfo[playerid][pJackSkill] > levonas && !IsACop(playerid)) PlayerInfo[ playerid][pJackSkill] -=levonas; 
	
	if(PlayerInfo[playerid][pBetoroSkill] > levonas && !IsACop(playerid)) PlayerInfo[ playerid][pBetoroSkill] -=levonas; 
	
	if(PlayerInfo[playerid][pKozmunkaIdo] > 0)
	{
		if(PlayerInfo[playerid][pKozmunkaIdo] == 1) Msg(playerid, "Feljelentettek közmunka elhalasztásáért!"), SetPlayerCriminal(playerid, 255, "Közmunka elhalasztása");
		PlayerInfo[playerid][pKozmunkaIdo]--;
		if(PlayerInfo[playerid][pKozmunkaIdo] > 0)
			SendFormatMessage(playerid, COLOR_LIGHTRED, "[Figyelmeztetés] Még %d játszott óra lehetõséged van ledolgozni a közmunkát.", PlayerInfo[playerid][pKozmunkaIdo]);
		else
			PlayerInfo[playerid][pKozmunka] = 0;
	}
	
	GiveBonusKredit(playerid, 1, "játszott óra");
	return 1;
}

fpublic Vizsgaido(playerid)
{
	Msg(playerid, "Az idõ lejárt. Ha megfelelt ird be igen, ha nem ird be nem.");
	Autocp[playerid] = 22;
}

fpublic PayDay()
{
	UCP_Check();

	new string[128];
	new account;
	new rent = 0;
	//new time = UnixTime;
	new rsz=0;
	/*foreach(Jatekosok, p)
	{
		if(PlayerInfo[p][pCFalsePositive] != 0) PlayerInfo[p][pCFalsePositive] = 0;
	}*/
	
	
	for(new k = 0; k < MAX_MUNKAKOCSI; k++)
	{
		if(MunkaKocsi[MUNKA_BEREL1][k][kVan] && 0 < MunkaKocsi[MUNKA_BEREL1][k][kBerelido] < UnixTime)
		{
			foreach(Jatekosok, p)
				if(SQLID(p) == MunkaKocsi[MUNKA_BEREL1][k][kBerel])
					HireCar[p] = NINCS;
					
			MunkaKocsi[MUNKA_BEREL1][k][kBerel] = NINCS;
			MunkaKocsi[MUNKA_BEREL1][k][kBerelido] = NINCS;
			UnLockCar(MunkaKocsi[MUNKA_BEREL1][k][kID]);
		}
		
		if(MunkaKocsi[MUNKA_BEREL2][k][kVan] && 0 < MunkaKocsi[MUNKA_BEREL2][k][kBerelido] < UnixTime)
		{
			foreach(Jatekosok, p)
				if(SQLID(p) == MunkaKocsi[MUNKA_BEREL2][k][kBerel])
					HireCar[p] = NINCS;
					
			MunkaKocsi[MUNKA_BEREL2][k][kBerel] = NINCS;
			MunkaKocsi[MUNKA_BEREL2][k][kBerelido] = NINCS;
			UnLockCar(MunkaKocsi[MUNKA_BEREL2][k][kID]);
		}
		
		if(MunkaKocsi[MUNKA_BEREL3][k][kVan] && 0 < MunkaKocsi[MUNKA_BEREL3][k][kBerelido] < UnixTime)
		{
			foreach(Jatekosok, p)
				if(SQLID(p) == MunkaKocsi[MUNKA_BEREL3][k][kBerel])
					HireCar[p] = NINCS;
					
			MunkaKocsi[MUNKA_BEREL3][k][kBerel] = NINCS;
			MunkaKocsi[MUNKA_BEREL3][k][kBerelido] = NINCS;
			UnLockCar(MunkaKocsi[MUNKA_BEREL3][k][kID]);
		}
	}
	
	for(new o = 0; o < MAXRENDELES; o++)
	{
		if(Rendeles[o][Van] == 1)
			rsz++;
	}
	if(rsz > 0)
	{
		format(string,128,"[RENDELÉS] %d DB",rsz);
		SendMessage(SEND_MESSAGE_SCRIPTER, string, COLOR_LIGHTRED);
	}
	
	new szereloHivasok, mentoHivasok, taxiHivasok;
	foreach(Jatekosok, i)
	{
		if(SzereloHiv[i] != 0)
			szereloHivasok++;
		if(MentoHivas[i] == 1)
			mentoHivasok++;
		if(TaxiHivas[i] == 1)
			taxiHivasok++;
	
		if(AFK[i] || PlayerInfo[i][pJailed] == 3 || PlayerInfo[i][pJailed] == 6 || PlayerInfo[i][pJailed] == 8) continue;

		PlayerInfo[i][pPayDay] += 30;
				
		//if((4 * (Szint(i)+1) - 1) <= PlayerInfo[i][pExp] && PlayerInfo[i][pTut] < time)
		//	Msg(i, "Figyelmeztetés: Nem töltötted ki a tesztet, így nem fogsz tudni szintet lépni", false);
		
		if(LabTalalat[i] > 0) LabTalalat[i]--; else LabTalalat[i] = 0;
		if(TaxiHivas[i] > 0) Msg(i, "Ha már nem kell a taxi, /cancel taxi!");
		if(MentoHivas[i] > 0) Msg(i, "Ha már nem kell a mentõ, /cancel medic!");
		if(CallTuz[i] > 0) Msg(i, "Ha már nem kell a tûzoltó, /cancel fire!");
		if(PlayerInfo[i][pSzerelo] > 0 && szereloHivasok != 0)
			SendFormatMessage(i, COLOR_GREEN, "Szerelõk figyelem! Jelenleg %d hívás vár fogadásra! (( /lista szerelõ ))", szereloHivasok);
				
		if(mentoHivasok != 0 && (LMT(i, FRAKCIO_MENTO) || IsOnkentes(i)))
		{
			if(OnDuty[i] == 1 || Onkentesszolgalatban[i])
				SendFormatMessage(i, COLOR_GREEN, "Mentõsök és önkéntesek figyelem! Jelenleg %d hívás vár fogadásra! (( /lista mentõ ))", mentoHivasok);	
		}
		if(taxiHivasok != 0 && (LMT(i, FRAKCIO_TAXI)))
		{
			if(OnDuty[i] == 1)
				SendFormatMessage(i, COLOR_GREEN, "Taxisok figyelem! Jelenleg %d hívás vár fogadásra! (( /taxi lista ))", taxiHivasok);
		}
		if(IRCBanTime[i] < UnixTime && IRCBanTime[i] != NINCS)
		{
			IRCBanTime[i] = NINCS;
			IRCBanRoom[i] = NINCS;
			Msg(i, "Lejárt az IRC tiltásod.");
		}
			
		if(PlayerInfo[i][pPayDay] % 3600 == 0)
			JatszottOra(i);
				
		if(PlayerInfo[i][pPayDay] % 1200 == 0 && ForaglomFigyelmezteto[i] > 1)
			ForaglomFigyelmezteto[i]--;

		if(PlayerInfo[i][pPayDay] % 1200 == 0 && PlayerInfo[i][pHitel] > 0)
		{
			if(PlayerInfo[i][pHitelElteltOra] == 555)
			{
				new ujkamat = floatround(float(PlayerInfo[i][pHitel]) * ((BANK_KAMAT + 100.0) / 100.0));
				PlayerInfo[i][pHitel] = ujkamat;
				SendFormatMessage(i, COLOR_LIGHTBLUE, "Bank: Mivel még mindig nem fizetted be a felvett kölcsönödet, így az adósságod %dFtról %dFtra nõtt", PlayerInfo[i][pHitel], ujkamat);
			}
		}

		if(PlayerInfo[i][pPayDay] >= MinimumFizuhoz)
		{
			/*for(new x = 0; x <= 10; x++)
			{
				if(PlayerInfo[i][pFegyverSkillek][x] > 209) { PlayerInfo[i][pFegyverSkillek][x] -= 5; }
			}*/
			new playername2[MAX_PLAYER_NAME];
			GetPlayerName(i, playername2, sizeof(playername2));
			account = PlayerInfo[i][pAccount];
			new key = PlayerInfo[i][pBerlo];
			if(key != NINCS)
			{
				rent = HouseInfo[key][hRent];
				if(PlayerInfo[i][pBankSzamla] > 0)
				{
					if(PlayerInfo[i][pAccount] < rent)
					{
						PlayerInfo[i][pBerlo] = NINCS;
						SendClientMessage(i, COLOR_WHITE, "Nem tudod fizetni a lakbért, mert nincs pénz a számládon, ezért a tulaj kirugott");
						rent = 0;
					}
					else
						PlayerInfo[i][pAccount] -= rent;
				}
				else
				{
					if(GetMoney(i) < rent)
					{
						PlayerInfo[i][pBerlo] = NINCS;
						SendClientMessage(i, COLOR_WHITE, "Nem tudod fizetni a lakbért, mert nincs pénz a számládon, ezért a tulaj kirugott");
						rent = 0;
					}
					else
						GiveMoney(i, -rent);
				}
				HouseInfo[key][hTakings] = HouseInfo[key][hTakings]+rent;
			}
			//Mobilnet
			new ar = PlayerInfo[i][pMobilnet]*AdatforgalomAr;
			if(PlayerInfo[i][pMobilnet] != NINCS)
			{	
				PlayerInfo[i][pMobilnet] = 0;
				BizPenz(BIZ_TELEFON, ar/2);
				if(PlayerInfo[i][pBankSzamla] > 0)
					PlayerInfo[i][pAccount] -= ar;
				else
					GiveMoney(i, -ar);
			}
			new checks = PlayerInfo[i][pPayCheck];
			if(checks < 0 || checks > 10000000)
			{
			printf("[Fizetés] %s = %dFt", Nev(i), checks);
			checks = 0;
			}

			new ebill = 0;
			if(PlayerInfo[i][pPhousekey] != NINCS)
			{
				if(HouseInfo[PlayerInfo[i][pPhousekey]][hBelso] < 37)
					ebill += HouseInfo[PlayerInfo[i][pPhousekey]][hBelso] * 1000;
				else
					ebill += 50000;
			}
			new TB;
			if(PlayerInfo[i][pBankSzamla] > 0 && PlayerInfo[i][pAccount] > 40000)
			{
				if(PlayerInfo[i][pAccount] > ebill)
				{
					PlayerInfo[i][pAccount] -= ebill;
					BizPenz(BIZ_REZSI, ebill);
				}
				else
					ebill = 0;
				TB = floatround(float(PlayerInfo[i][pAccount]) * 0.005);
				if(TB < 500) TB = 500;
				if(TB > 10000) TB = 10000;
				PlayerInfo[i][pAccount] -= TB;
				FrakcioSzef(FRAKCIO_MENTO,TB, 29);
			}
			
			///////////
			// KAMAT //
			///////////
			new Float:kamatSzazalek, kamat;
			kamatSzazalek += GetInterestFromPremiumPack(i);

			if(PremiumInfo[i][pKamatIdo] > 0)
			{
				kamatSzazalek += PremiumInfo[i][pKamat];
				PremiumInfo[i][pKamatIdo]--;
			}

			new gyemantok = Gyemantok(i);
			kamatSzazalek += 0.01 * gyemantok; // + Gyémánt * 0,01% kamat
			
		//	new arany = PlayerInfo[i][pAranyBank];
		//	kamatSzazalek += 0.007 * arany; // Befektetett arany a bankban * 0,007%
			
			// bonus kamat
			#if defined SYSTEM_BONUS
			if(BonusInfo[i][B:Kamat] > 0 && BonusInfo[i][B:KamatIdo] > 0)
			{
				kamatSzazalek += BonusInfo[i][B:Kamat];
				BonusInfo[i][B:KamatIdo]--;
			}
			#endif
			
			if(kamatSzazalek > 0)
				kamat = floatround(float(PlayerInfo[i][pAccount]) * (kamatSzazalek / 100.0));
				
			if(kamat > 50000000)
			{
				ABroadCastFormat(COLOR_WHITE, 1, "[%d]%s hibás kamat: %dFt - Jelezd egy scripternek!", i, PlayerName(i), kamat);
				kamat = 0;
			}
			
			///////////
			// KAMAT //
			///////////
			PlayerPlayMusic(i);
			if(PlayerInfo[i][pBankSzamla] > 0)
			{
				PlayerInfo[i][pAccount] += checks;
				PlayerInfo[i][pAccount] += kamat;
			}
			//else
			//{
			//	GiveMoney(i, checks);
			//	GiveMoney(i, kamat);
			//}
			HazKukaFrissites(i);
			new bevetel;
			SendClientMessage(i, COLOR_WHITE, "===== [ {FA9600}Bank Információ{FFFFFF} ] =====");
			if(PlayerInfo[i][pBankSzamla] > 0)
			{
				SendFormatMessage(i, COLOR_WHITE, "Bankszámla: {00C0FF}%s{FFFFFF}Ft", FormatNumber( account, 0, ',' ));
				if(kamat != 0)
					SendFormatMessage(i, COLOR_WHITE, "Bankszámla Kamat: {00C0FF}%s{FFFFFF}Ft (%.4f százalék)", FormatNumber( kamat, 0, ',' ), kamatSzazalek), bevetel+=kamat;
				
				//Hitel
		//Hitel
				if(PlayerInfo[i][pHitel] <= 0)
				{
					PlayerInfo[i][pTorleszto]=0;
					PlayerInfo[i][pHitel]=0;
					PlayerInfo[i][pHitelOra]=0;
				}
				if(PlayerInfo[i][pHitel] > 0)
				{
					if(PlayerInfo[i][pHitelOra] < 0)
					{
						PlayerInfo[i][pTorleszto]=0;
						PlayerInfo[i][pHitel]=0;
						PlayerInfo[i][pHitelOra]=0;
					}
					
					SendClientMessage(i, COLOR_WHITE, "=======HITEL=======");
					if(PlayerInfo[i][pAccount] > PlayerInfo[i][pTorleszto])
					{
						bevetel -= PlayerInfo[i][pTorleszto];
						PlayerInfo[i][pAccount] -=PlayerInfo[i][pTorleszto];
						PlayerInfo[i][pHitel] -=PlayerInfo[i][pTorleszto];
						if(PlayerInfo[i][pHitelOra] > 0)
							PlayerInfo[i][pHitelOra]--;
						
						SendFormatMessage(i, COLOR_WHITE, "Törlesztõ részlet levonva: {00C0FF}%s{FFFFFF}Ft", FormatNumber( PlayerInfo[i][pTorleszto], 0, ',' ));
						SendFormatMessage(i, COLOR_WHITE, "Hátra van még: %s Ft %d hónap alatt!", FormatNumber( PlayerInfo[i][pHitel], 0, ',' ), PlayerInfo[i][pHitelOra]);	
					}
					else
					{
						SendClientMessage(i, COLOR_WHITE, "A törleszto részletet nem tudtunk levonni ezért 5 %%-os büntetést adunk.");
						PlayerInfo[i][pHitel] = floatround(PlayerInfo[i][pHitel] * 0.05) + PlayerInfo[i][pHitel];
						PlayerInfo[i][pHitelHatralek]++;
						SendFormatMessage(i, COLOR_WHITE, "Hátralékod még: %s Ft, Eddig a 10 bol %d -szer nem törlesztettél!",FormatInt(PlayerInfo[i][pHitel]),PlayerInfo[i][pHitelHatralek]);
						
					}
					if(PlayerInfo[i][pHitelHatralek] == 10)
					{
						SendClientMessage(i, COLOR_WHITE, "10 Alkalommal nem tettél eleget törlesztésre ezért bankunk számládra terheli a hitelt.");
						SendFormatMessage(i, COLOR_WHITE, "Hátralékod 2 szerese levonva a számládról. %s Ft",FormatNumber( PlayerInfo[i][pHitel]*2, 0, ',' ));
						PlayerInfo[i][pAccount] = PlayerInfo[i][pAccount]-PlayerInfo[i][pHitel]*2;
						PlayerInfo[i][pHitel] = 0;
					
					}
				
				}
				if(PlayerInfo[i][pMember] != 0)
				{
					new osszeg = FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]];
					new pluszpenz = PlayerInfo[i][pPluszBer];
					if(pluszpenz > 0)
					{
						if(FrakcioInfo[PlayerInfo[i][pMember]][fPenz ] >= osszeg+pluszpenz)
						{
							
							SendFormatMessage(i, COLOR_WHITE, "Frakció fizetés: {00C0FF}%s{FFFFFF}Ft", FormatNumber( osszeg, 0, ',' ));
							SendFormatMessage(i, COLOR_WHITE, "Frakció fizetés pluszbér: {00C0FF}%s{FFFFFF}Ft", FormatNumber( pluszpenz, 0, ',' ));
							PlayerInfo[i][pAccount] += (osszeg+pluszpenz);
							bevetel += (osszeg+pluszpenz);
							FrakcioSzef(PlayerInfo[i][pMember],-(osszeg+pluszpenz), 30);
							if(egyezik(PlayerInfo[i][pPluszBerMeddig], "egyszer"))
							{
								SendClientMessage(i, COLOR_WHITE, "Mivel egyszer pluszbért kaptál, a következõ fizetésnél nem fogsz kapni!");
								PlayerInfo[i][pPluszBer] = 0;
							}
						}
						else SendClientMessage(i, COLOR_WHITE, "Frakció fizetés: {00C0FF}Nincs elegendõ összeg a széfben{FFFFFF}");
					}
					else
					{
						if(FrakcioInfo[PlayerInfo[i][pMember]][fPenz ] >= osszeg)
						{
							
							SendFormatMessage(i, COLOR_WHITE, "Frakció fizetés: {00C0FF}%s{FFFFFF}Ft", FormatNumber( osszeg, 0, ',' ));
							PlayerInfo[i][pAccount] += osszeg;
							bevetel += osszeg;
							FrakcioSzef(PlayerInfo[i][pMember],-osszeg, 30);
						}
						else SendClientMessage(i, COLOR_WHITE, "Frakció fizetés: {00C0FF}Nincs elegendõ összeg a széfben{FFFFFF}");
					}
				}
			}
			else if(PlayerInfo[i][pMember] != 0)
			{
				new osszeg = FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]];
				SendClientMessage(i, COLOR_WHITE, "Mivel nincs bankszámlád, ezért a fizetésed csekken kapod. Bankba felveheted!(/felvesz fizetés)");
				if(FrakcioInfo[PlayerInfo[i][pMember]][fPenz ] >= osszeg)
				{
					SendFormatMessage(i, COLOR_WHITE, "Frakció fizetés: {00C0FF}%s{FFFFFF}Ft", FormatNumber( osszeg, 0, ',' ));
					GiveMoney(i, osszeg);
					bevetel += osszeg;
					FrakcioSzef(PlayerInfo[i][pMember], -osszeg, 31);
				}
				else SendClientMessage(i, COLOR_WHITE, "Frakció fizetés: {00C0FF}Nincs elegendõ összeg a széfben{FFFFFF}");
			}
			
			if(checks > 0)
				SendFormatMessage(i, COLOR_WHITE, "Fizetési Csekk: {00C0FF}%s{FFFFFF}Ft", FormatNumber( checks, 0, ',' )), bevetel+=checks;
				
			SendFormatMessage(i, COLOR_WHITE, "Társadalom Biztosítás: {00C0FF}%s{FFFFFF}Ft", FormatNumber( TB, 0, ',' )), bevetel-=TB;
			
			new adosz = Ado(i);
			if(PlayerInfo[i][pPhousekey] != NINCS)
				SendFormatMessage(i, COLOR_WHITE, "Számlák: {00C0FF}%s{FFFFFF}Ft", FormatNumber( ebill, 0, ',' )), bevetel-=ebill;
				
			new osszeg = PlayerInfo[i][pAdokOsszeg];
			new Float:adokedvezmeny = 0;
			
			if(PremiumInfo[i][pAdoIdo] > 0 && PremiumInfo[i][pAdo] > 0)
			{
				adokedvezmeny += PremiumInfo[i][pAdo];
				PremiumInfo[i][pAdoIdo]--;
			}
			
			#if defined SYSTEM_BONUS
			if(BonusInfo[i][B:Ado] > 0 && BonusInfo[i][B:AdoIdo] > 0)
			{
				adokedvezmeny += BonusInfo[i][B:Ado];
				BonusInfo[i][B:AdoIdo]--;
			}
			#endif
			
			// max: 100%
			adokedvezmeny = floatmin(100.0, adokedvezmeny);
			if(adokedvezmeny > 0)
			{
				new adoked = floatround(   float(adosz) * (adokedvezmeny / 100.0)   );
				adosz -= adoked;
				osszeg += floatround(adosz);
				SendFormatMessage(i, COLOR_WHITE, "Adó: {00C0FF}%s{FFFFFF}Ft (-%f százalék) Levont: {00C0FF}%s{FFFFFF}Ft", FormatNumber( adosz, 0, ',' ), adokedvezmeny, FormatNumber( adoked, 0, ',' ));
				SendFormatMessage(i, COLOR_WHITE, "Adó: Idõ: {00C0FF}%d{FFFFFF} óra Összesen: {00C0FF}%s{FFFFFF}FT", PlayerInfo[i][pAdokIdo]*2, FormatNumber(osszeg, 0, ',' ));
			}
			else
			{
				osszeg += floatround(adosz);
				SendFormatMessage(i, COLOR_WHITE, "Adó: {00C0FF}%s{FFFFFF}Ft Idõ: {00C0FF}%d{FFFFFF} óra Összesen: {00C0FF}%s{FFFFFF}Ft", FormatNumber( adosz, 0, ',' ), PlayerInfo[i][pAdokIdo]*2, FormatNumber(osszeg, 0, ',' ));
			}
				
			bevetel -= adosz;
			PlayerInfo[i][pAdokIdo]--;
			PlayerInfo[i][pAdokOsszeg] += adosz;
			
			//PenzLevesz(i, adosz, true);
			new szefid=GetPlayerBerSzefID(i);
			
			if(szefid != NINCS)
				SendFormatMessage(i, COLOR_WHITE, "Bérelt széf: {00C0FF}%s{FFFFFF}Ft", FormatNumber( BerSzef[szefid][bPenz], 0, ',' ));
			
			if(PlayerInfo[i][pPbiskey] != NINCS && BizzInfo[ PlayerInfo[i][pPbiskey] ][bTill] > 0)	
				SendFormatMessage(i, COLOR_WHITE, "Biznisz széf: {00C0FF}%s{FFFFFF}Ft", FormatNumber( BizzInfo[ PlayerInfo[i][pPbiskey] ][bTill], 0, ',' ));
				
			if(PlayerInfo[i][pBizniszKulcs] != NINCS && BizzInfo[ PlayerInfo[i][pBizniszKulcs] ][bTill2] > 0)	
				SendFormatMessage(i, COLOR_WHITE, "Biznisz(Társtulaj) széf: {00C0FF}%s{FFFFFF}Ft", FormatNumber( BizzInfo[ PlayerInfo[i][pBizniszKulcs] ][bTill2], 0, ',' ));
			
			if(PlayerInfo[i][pBenzinkut] != NINCS)	
				SendFormatMessage(i, COLOR_WHITE, "Benzinkút széf: {00C0FF}%s{FFFFFF}Ft",FormatNumber( BenzinKutak[ PlayerInfo[i][pBenzinkut] ][bSzef], 0, ',' ));
			
			osszeg= floatround(adosz * ADO_ONKORMANYZAT_RESZE_FLOAT);
			FrakcioSzef(FRAKCIO_ONKORMANYZAT,osszeg, 32);
			if(rent > 0)
				SendFormatMessage(i, COLOR_WHITE, "Bérlés: {00C0FF}%s{FFFFFF}Ft", FormatNumber( rent, 0, ',' )), bevetel-=rent;
			if(PlayerInfo[i][pMobilnet] != NINCS)
				SendFormatMessage(i, COLOR_WHITE, "Mobilnet: {00C0FF}%s{FFFFFF}Ft", FormatInt(ar)), bevetel-=ar;
				
			if(bevetel > 0)
				SendFormatMessage(i, COLOR_WHITE, "[Összesítés] Bevétel: {00C0FF}%s{FFFFFF}Ft", FormatInt(bevetel)), bevetel=0;
			elseif(bevetel < 0)
				SendFormatMessage(i, COLOR_WHITE, "[Összesítés] Kiadás: {00C0FF}%s{FFFFFF}Ft", FormatInt(bevetel)), bevetel=0;
			else
				SendClientMessage(i, COLOR_WHITE, "[Összesítés] Jelenleg nem volt sem bevétel, sem kiadás.");
				
			if(PlayerInfo[i][pAdokIdo] <= 0)
			{
				if(PlayerInfo[i][pAdoAuto] || IsACop(i))
				{

					if(BankkartyaFizet(i, PlayerInfo[i][pAdokOsszeg]))
					{
						PlayerInfo[i][pAdokIdo] = 10;
						FrakcioSzef(FRAKCIO_ONKORMANYZAT, PlayerInfo[i][pAdokOsszeg], 57);
						SendClientMessage(i, COLOR_LIGHTGREEN, "[AUTO ADÓ FIZETÉS]Sikeresen befizetted az adót! A következot 10 fizetésen belül kell!");
						
						new navstring[128];
						format(navstring, sizeof(navstring), "<< [ADÓBEVALLÁS] %s bevallotta az adóját %sFt-t >>", PlayerName(i), FormatNumber(PlayerInfo[i][pAdokOsszeg], 0, ',' ));
						SendMessage(SEND_MESSAGE_FRACTION, navstring, COLOR_RED, FRAKCIO_SCPD);
						
						PlayerInfo[i][pAdokOsszeg] = 0;
					}
					else
						SendFormatMessage(i, COLOR_RED, "[AUTO ADÓ FIZETÉS]Nincs ennyi pénzed, %sFt kell! Kérlek gyüjtsd össze mihamarabb a pénzt!", FormatNumber(PlayerInfo[i][pAdokOsszeg], 0, ',' ));

				
				}
				else
					SendClientMessage(i, COLOR_RED, "Fizesd be az adódat különben a NAV lecsuk!");
			}
			

			format(string, sizeof(string), "~b~~h~Fizets");
			GameTextForPlayer(i, string, 5000, 1);
			rent = 0;
			PlayerInfo[i][pPayDay] = 0;
			if(PlayerInfo[i][pBankSzamla] > 0)
			{
				PlayerInfo[i][pPayCheck] = 0;
			}
		}
	}
	return 1;
}

stock SetMapName(const mapname[])
{
	new map[256];
	format(map, sizeof(map), "mapname %s", mapname);
	SendRconCommand(map);
}

fpublic split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

fpublic AdatMentesSQL(playerid)
{
	
	
	if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid) && Registered(playerid) && Logged(playerid) && PlayerInfo[playerid][pOrigin] > 0 ||
	IsPlayerConnected(playerid) && !IsPlayerNPC(playerid) && PlayerInfo[playerid][pID] == NINCS)
	{
		if(IsAllTerno(playerid) || IsAllDenaro(playerid) && PlayerInfo[playerid][pAdmin] > 0)
			PlayerInfo[playerid][pAdmin] = 0;
		new query[MAX_MYSQL_STRING];
		if(PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0)
		{
				PlayerInfo[playerid][pPos_x] = 1684.9;
				PlayerInfo[playerid][pPos_y] = -2244.5;
				PlayerInfo[playerid][pPos_z] = 13.5;
		}
		
		format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Player);

		//Fõbb adatok
		//MysqlUpdateStr(query, "Pass", PlayerInfo[playerid][pKey]); //Jelszóváltásnál ugyis menti azt
		MysqlUpdateInt(query, "Szint",PlayerInfo[playerid][pLevel]);
		MysqlUpdateInt(query, "Admin",PlayerInfo[playerid][pAdmin]);
		//MysqlUpdateInt(query, "DonateRank", PlayerInfo[playerid][pDonateRank]);
		//MysqlUpdateInt(query, "UpgradePoints", PlayerInfo[playerid][gPupgrade]);
		MysqlUpdateInt(query, "ConnectedTime", PlayerInfo[playerid][pConnectTime]);
		MysqlUpdateInt(query, "Sex", PlayerInfo[playerid][pSex]);
		MysqlUpdateInt(query, "Age", PlayerInfo[playerid][pAge]);
		MysqlUpdateInt(query, "Origin", PlayerInfo[playerid][pOrigin]);
		MysqlUpdateInt(query, "Married", PlayerInfo[playerid][pMarried]);
		MysqlUpdateStr(query, "MarriedTo", PlayerInfo[playerid][pMarriedTo]);

		//Egyéb adatok
		MysqlUpdateInt(query, "Crimes", PlayerInfo[playerid][pCrimes]);
		//MysqlUpdateInt(query, "Kills", PlayerInfo[playerid][pKills]);
		MysqlUpdateInt(query, "BSA", PlayerInfo[playerid][pBSA]);//Kills helyére
		MysqlUpdateInt(query, "Valaszok", PlayerInfo[playerid][pValaszok]);
		MysqlUpdateInt(query, "Arrested", PlayerInfo[playerid][pArrested]);
		MysqlUpdateInt(query, "Fem", PlayerInfo[playerid][pFem]);
		MysqlUpdateInt(query, "Fishes", PlayerInfo[playerid][pFishes]);
		MysqlUpdateInt(query, "BiggestFish", PlayerInfo[playerid][pBiggestFish]);
		MysqlUpdateInt(query, "HeadValue", PlayerInfo[playerid][pHeadValue]);
		MysqlUpdateInt(query, "Jailed", PlayerInfo[playerid][pJailed]);
		MysqlUpdateInt(query, "JailTime", PlayerInfo[playerid][pJailTime]);
		MysqlUpdateInt(query, "Wins", PlayerInfo[playerid][pWins]);
		MysqlUpdateInt(query, "Loses", PlayerInfo[playerid][pLoses]);
		MysqlUpdateInt(query, "Tutorial", PlayerInfo[playerid][pTut]);
		MysqlUpdateInt(query, "Mission", PlayerInfo[playerid][pMegbizas]);
		MysqlUpdateInt(query, "Warnings", PlayerInfo[playerid][pWarns]);
		MysqlUpdateInt(query, "KWarnings", PlayerInfo[playerid][pKWarns]);
		MysqlUpdateInt(query, "Drogido", PlayerInfo[playerid][pDrogido]);
		MysqlUpdateInt(query, "ASJog", PlayerInfo[playerid][pAS]);
		MysqlUpdateInt(query, "Onkentes", PlayerInfo[playerid][pOnkentes]);

		//Cuccai
		MysqlUpdateInt(query, "Respect", PlayerInfo[playerid][pExp]);
		MysqlUpdateInt(query, "Money", PlayerInfo[playerid][pCash]);
		MysqlUpdateInt(query, "Bank", PlayerInfo[playerid][pAccount]);
		MysqlUpdateInt(query, "Kaja", PlayerInfo[playerid][pKaja]);
		MysqlUpdateInt(query, "Phone", PlayerInfo[playerid][pPnumber]);
		MysqlUpdateInt(query, "House", PlayerInfo[playerid][pPhousekey]);
		MysqlUpdateInt(query, "Bizz", PlayerInfo[playerid][pPbiskey]);
		MysqlUpdateInt(query, "Kocsikulcs", PlayerInfo[playerid][pPcarkey]);

		new cuccok[128];

		//Müanyag, Cseje, Mák, Cannabis
		Format(cuccok, "%d,%d,%d,%d", PlayerInfo[playerid][pMuanyag], PlayerInfo[playerid][pCserje], PlayerInfo[playerid][pMak], PlayerInfo[playerid][pCannabis]);

		//Mati, Kokain, Heroin, Marihuana
		Format(cuccok, "%s,%d,%d,%d,%d", cuccok, PlayerInfo[playerid][pMats], PlayerInfo[playerid][pKokain], PlayerInfo[playerid][pHeroin], PlayerInfo[playerid][pMarihuana]);

		MysqlUpdateStr(query, "Cuccok", cuccok);

		//24/7 cuccok v. megvehetõ cuccok
		MysqlUpdateInt(query, "Phonebook", PlayerInfo[playerid][pPhoneBook]);
		MysqlUpdateInt(query, "CDPlayer", PlayerInfo[playerid][pCDPlayer]);
		MysqlUpdateInt(query, "Lotto", PlayerInfo[playerid][pLottoNr]);
		MysqlUpdateInt(query, "Fuel", PlayerInfo[playerid][pFuel]);
		MysqlUpdateInt(query, "Cigihasznalat", PlayerInfo[playerid][pCigiUsed]);
		MysqlUpdateInt(query, "Cigi", PlayerInfo[playerid][pCigi]);
		MysqlUpdateInt(query, "Nikotin", PlayerInfo[playerid][pNikotin]);
		MysqlUpdateInt(query, "Gyujto", PlayerInfo[playerid][pGyujto]);
		MysqlUpdateInt(query, "Pia", PlayerInfo[playerid][pPia]);
		//MysqlUpdateInt(query, "Szajkendo", PlayerInfo[playerid][pSzajkendo]);//

		//Munka / család adatok
		MysqlUpdateInt(query, "Job1", PlayerInfo[playerid][pJob1]);
		MysqlUpdateInt(query, "Job2", PlayerInfo[playerid][pJob2]);
		MysqlUpdateInt(query, "Paycheck", PlayerInfo[playerid][pPayCheck]);
		MysqlUpdateInt(query, "PayDay", PlayerInfo[playerid][pPayDay]);
		MysqlUpdateInt(query, "PayDayHad", PlayerInfo[playerid][pPayDayHad]);
		MysqlUpdateInt(query, "Leader", PlayerInfo[playerid][pLeader]);
		MysqlUpdateInt(query, "Member", PlayerInfo[playerid][pMember]);
		//SZABAD HELY - jelzés volt itt

		MysqlUpdateInt(query, "Rank", PlayerInfo[playerid][pRank]);
		

		//Skillek
		new skillek[128];

		Format(skillek, "%d, %d, %d, %d, %d, %d", PlayerInfo[playerid][pDetSkill], PlayerInfo[playerid][pSexSkill], PlayerInfo[playerid][pBetoroSkill], PlayerInfo[playerid][pLawSkill], PlayerInfo[playerid][pMechSkill], PlayerInfo[playerid][pJackSkill]);
		Format(skillek, "%s, %d, %d, %d, %d, %d", skillek, PlayerInfo[playerid][pCarSkill], PlayerInfo[playerid][pNewsSkill], PlayerInfo[playerid][pDrugsSkill], PlayerInfo[playerid][pCookSkill], PlayerInfo[playerid][pFishSkill]);
		Format(skillek, "%s, %d, %d, %d, %d, %d, %d, %d, %d", skillek, PlayerInfo[playerid][pRiasztoSkill], PlayerInfo[playerid][pHackingSkill], PlayerInfo[playerid][pRepSkill], PlayerInfo[playerid][pAutmotSkill], PlayerInfo[playerid][pHajoSkill], PlayerInfo[playerid][pKamiSkill], PlayerInfo[playerid][pAdrSkill],PlayerInfo[playerid][pFegySkill]);

		MysqlUpdateStr(query, "Skillek", skillek);

		//Jogsik 
		new jogsik[64];
		Format(jogsik, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pCarLic], PlayerInfo[playerid][pFlyLic], PlayerInfo[playerid][pBoatLic], PlayerInfo[playerid][pFishLic], PlayerInfo[playerid][pGunLic], PlayerInfo[playerid][pMotorJogsi], PlayerInfo[playerid][pKamionJogsi], PlayerInfo[playerid][pAdrJogsi],PlayerInfo[playerid][pKreszJogsi],PlayerInfo[playerid][pHeliLic]);

		MysqlUpdateStr(query, "Jogsik", jogsik);
		// jogsi tíltása
		new Jogsitiltas[64];
		Format(Jogsitiltas, "%d@%s", PlayerInfo[playerid][pJogsiTiltIdo], PlayerInfo[playerid][pJogsiTiltOk]);
		MysqlUpdateStr(query, "Jogsitiltas", Jogsitiltas);
		//frakcio tíltás
		new Frakciotiltas[64];
		Format(Frakciotiltas, "%d@%s", PlayerInfo[playerid][pFrakcioTiltIdo], PlayerInfo[playerid][pFrakcioTiltOk]);
		MysqlUpdateStr(query, "Frakciotiltas", Frakciotiltas);
		new Astiltas[64];
		Format(Astiltas, "%d@%s", PlayerInfo[playerid][pAsTilt], PlayerInfo[playerid][pAsTiltOk]);
		MysqlUpdateStr(query, "Astiltas", Astiltas);
		
		new LeaderTiltas[64];
		Format(LeaderTiltas, "%d@%s", PlayerInfo[playerid][pLeaderTilt], PlayerInfo[playerid][pLeaderoka]);
		MysqlUpdateStr(query, "LeaderTiltas", LeaderTiltas);
		
		new FegyverTiltas[64];
		Format(FegyverTiltas, "%d@%s", PlayerInfo[playerid][pFegyverTiltIdo], PlayerInfo[playerid][pFegyverTiltOk]);
		MysqlUpdateStr(query, "FegyverTiltas", FegyverTiltas);
		
		new Reporttiltas[64];
		Format(Reporttiltas, "%d@%s", PlayerInfo[playerid][pReportTilt], PlayerInfo[playerid][pReportTiltOk]);
		MysqlUpdateStr(query, "ReportTiltas", Reporttiltas);
		
		new AdminUzenet[300];
		Format(AdminUzenet, "%d@%s", PlayerInfo[playerid][pAdminUzenet], PlayerInfo[playerid][pAdminUzenetOk]);
		MysqlUpdateStr(query, "AdminUzenet", AdminUzenet);
		
		MysqlUpdateInt(query, "Felvetel", PlayerInfo[playerid][pFelvetel]);
		
		
		//Skin
		MysqlUpdateInt(query, "Skin", PlayerInfo[playerid][pChar]);
		MysqlUpdateInt(query, "Model", PlayerInfo[playerid][pModel]);


		//Upgrades
		new upgrades[128];
		Format(upgrades, "%d,%d,%d,%d", PlayerInfo[playerid][pAlcoholPerk], PlayerInfo[playerid][pDrugPerk], PlayerInfo[playerid][pMiserPerk], PlayerInfo[playerid][pPainPerk], PlayerInfo[playerid][pTraderPerk]);

		MysqlUpdateStr(query, "Upgrades", upgrades);

		//Crash
		new kilepespos[80], Float:pos[3], Int, VW;
		if(Kamera[playerid] != NINCS)
			{ pos[0] = -1943.552; pos[1] = 550.390; pos[2] = 37.267; } //SFPD szoba
		else
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		Int = GetPlayerInterior(playerid);
		VW = GetPlayerVirtualWorld(playerid);
		Format(kilepespos, "%.3f,%.3f,%.3f,%d,%d", pos[0], pos[1], pos[2], Int, VW);

		new kilepeselet[30], Float:eletpajzs[2];
		GetPlayerHealth(playerid, eletpajzs[0]);
		GetPlayerArmour(playerid, eletpajzs[1]);

		if(eletpajzs[0] > 150) eletpajzs[0] = 150;
		if(eletpajzs[1] > 150) eletpajzs[1] = 150;
		if(eletpajzs[0] < 5) eletpajzs[0] = 5;
		if(eletpajzs[1] < 5) eletpajzs[1] = 5;

		Format(kilepeselet, "%.3f,%.3f", eletpajzs[0], eletpajzs[1]);

        MysqlUpdateStr(query, "KilepesPos", kilepespos);
		MysqlUpdateStr(query, "KilepesElet", kilepeselet);

		if(!Paintballozik[playerid])
		{
		    new weps[128], amms[512];

			valstr(weps, PlayerWeapons[playerid][pWeapon][0]);
			for(new w = 1; w < MAX_PLAYER_WEAPONS; w++)
				format(weps, 128, "%s,%d", weps, WeaponWeapon(playerid, w));
			
			format(amms, 512, "%d:%d", 0, WeaponAmmo(playerid, 0));
			for(new a = 1; a < MAX_WEAPONS; a++)
				if(WeaponAmmo(playerid, a) > 0)
					format(amms, 512, "%s,%d:%d", amms, a, WeaponAmmo(playerid, a));

			MysqlUpdateStr(query, "KilepesFegyver", weps);
			MysqlUpdateStr(query, "KilepesLoszer", amms);

		}
		//Egyéb
		//MysqlUpdateInt(query, "Muted", PlayerInfo[playerid][pMuted]);
		if(!PlayerOnline[playerid]) MysqlUpdateInt(query, "UtoljaraAktiv", UnixTime);
		MysqlUpdateInt(query, "Inter", PlayerInfo[playerid][pInt]);
		MysqlUpdateInt(query, "Local", PlayerInfo[playerid][pLocal]);
		MysqlUpdateFlo(query, "Pos_x",PlayerInfo[playerid][pPos_x]);
		MysqlUpdateFlo(query, "Pos_y",PlayerInfo[playerid][pPos_y]);
		MysqlUpdateFlo(query, "Pos_z",PlayerInfo[playerid][pPos_z]);
		MysqlUpdateInt(query, "CarTime", PlayerInfo[playerid][pCarTime]);
		MysqlUpdateInt(query, "Lokator", PlayerInfo[playerid][pLokator]);
		//MysqlUpdateInt(query, "Nyomkovetes", PlayerInfo[playerid][pNyomkovetes]);
		//MysqlUpdateInt(query, "Nyomkoveto", PlayerInfo[playerid][pNyomkoveto]);
		MysqlUpdateInt(query, "Cigifuggoseg", PlayerInfo[playerid][pCigiFuggoseg]);
		MysqlUpdateInt(query, "Swat", PlayerInfo[playerid][pSwattag]);
		MysqlUpdateInt(query, "SwatRang", PlayerInfo[playerid][pSwatRang]);
		MysqlUpdateInt(query, "Kituntetes", PlayerInfo[playerid][pKituntetes]);
		MysqlUpdateInt(query, "Szallitott", PlayerInfo[playerid][pSzallitott]);
		MysqlUpdateInt(query, "Spawnchange", PlayerInfo[playerid][pSpawnchange]);
		MysqlUpdateStr(query, "AdminAlnev", PlayerInfo[playerid][pAdminAlnev]);
		MysqlUpdateInt(query, "TeloEgyenleg", PlayerInfo[playerid][pTeloEgyenleg]);
		MysqlUpdateInt(query, "Kotszer", PlayerInfo[playerid][pKotszer]);
		//new szoveg[50];
		//Format(szoveg, 50, "%i,%i,%i", PlayerInfo[playerid][pUtlevel], PlayerInfo[playerid][pSzemelyi], PlayerInfo[playerid][pLakcimkartya]);
		MysqlUpdateInt(query, "Utlevel", PlayerInfo[playerid][pUtlevel]);
		MysqlUpdateInt(query, "Stilus", PlayerInfo[playerid][pStilus]);

		new bankszamla[25];
		Format(bankszamla, "%d,%d,%d", PlayerInfo[playerid][pBankSzamla], PlayerInfo[playerid][pBankSzamlaSzam], PlayerInfo[playerid][pBankSzamlaJelszo]);
		MysqlUpdateStr(query, "BankSzamla", bankszamla);

		MysqlUpdateInt(query, "C4", PlayerInfo[playerid][pC4]);

		new hitman[25];
		Format(hitman, "%d,%d", PlayerInfo[playerid][pHitman], PlayerInfo[playerid][pHitmanIdo]);
		MysqlUpdateStr(query, "Hitman", hitman);
		//MysqlUpdateInt(query, "Hitman", PlayerInfo[playerid][pHitman]);
		MysqlUpdateStr(query, "HitmanNev", PlayerInfo[playerid][pHitmanNev]);

		new premium[25];
		Format(premium, "%d,%d", PlayerInfo[playerid][pPremiumCsomag], PlayerInfo[playerid][pPremiumPont]);
		MysqlUpdateStr(query, "Premium", premium);

		MysqlUpdateInt(query, "PremiumIdo", PlayerInfo[playerid][pPremiumIdo]);
		MysqlUpdateInt(query, "Berlo", PlayerInfo[playerid][pBerlo]);

		if(PlayerOnline[playerid]) MysqlUpdateInt(query, "Online", 1);
		else MysqlUpdateInt(query, "Online", 0);

		new ado[128];
		//Format(ado, "%d,%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pAdoHaz], PlayerInfo[playerid][pAdoHazHol], PlayerInfo[playerid][pAdoSzint], PlayerInfo[playerid][pAdoJarmu], PlayerInfo[playerid][pAdoKitoltve], PlayerInfo[playerid][pAdo], PlayerInfo[playerid][pAdoFizetve], PlayerInfo[playerid][pAdoEllenorizve]);
		Format(ado, "%d,%d,%d", PlayerInfo[playerid][pSzemelyi], PlayerInfo[playerid][pLakcimkartya]);
		MysqlUpdateStr(query, "Igazolvanyok", ado);
		/*
		//user databa rakva
		new hitel[30];
		Format(hitel, "%d,%d,%d,%d,%d", PlayerInfo[playerid][pHitel], PlayerInfo[playerid][pFelvettHitel], PlayerInfo[playerid][pHitelOra], PlayerInfo[playerid][pHitelElteltOra], PlayerInfo[playerid][pZarolva]);
		MysqlUpdateStr(query, "Hitel", hitel);*/
		MysqlUpdateStr(query, "Jegy", PlayerInfo[playerid][pJegy]);

		new egyeb[200];
		format(egyeb, 160, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", UresHely, PlayerInfo[playerid][pSzemuveg],PlayerInfo[playerid][pBicikli], PlayerInfo[playerid][pSzerszamoslada], PlayerInfo[playerid][pBankkartya],PlayerInfo[playerid][pCrossido],PlayerInfo[playerid][pSzajkendo],PlayerInfo[playerid][pGarazs],PlayerInfo[playerid][pAkkuTolto],PlayerInfo[playerid][pMaszk], PlayerInfo[playerid][pAlma], PlayerInfo[playerid][pVeszHivo],
		PlayerInfo[playerid][pBikazoKabel],PlayerInfo[playerid][pKormanyKituntetes],PlayerInfo[playerid][pFuelTipus], PlayerInfo[playerid][pMotorolaj]);
		MysqlUpdateStr(query, "Egyeb", egyeb);

		MysqlUpdateInt(query, "SSS", PlayerInfo[playerid][pSSS]);
		MysqlUpdateStr(query, "JailOK", PlayerInfo[playerid][pJailOK]);


		format(ado, 50, "%d,%d", PlayerInfo[playerid][pLkocsi], PlayerInfo[playerid][pLkocsiar]);
		MysqlUpdateStr(query, "Autotolvaj", ado);
		MysqlUpdateInt(query, "Kredit", PlayerInfo[playerid][pKredit]);
		MysqlUpdateInt(query, "Laptop", PlayerInfo[playerid][pLaptop]);
		MysqlUpdateInt(query, "Hack", PlayerInfo[playerid][pHack]);
		MysqlUpdateInt(query, "Ovadek", PlayerInfo[playerid][pOvadek]);
		MysqlUpdateInt(query, "Csali", PlayerInfo[playerid][pCsali]);
		MysqlUpdateInt(query, "HorgaszBot", PlayerInfo[playerid][pHorgaszBot]);
		MysqlUpdateInt(query, "Radio", PlayerInfo[playerid][pRadio]);
		MysqlUpdateInt(query, "Csipogo", PlayerInfo[playerid][pCsipogo]);
		MysqlUpdateInt(query, "Autoker", PlayerInfo[playerid][pAutoker]);
		MysqlUpdateInt(query, "SwatKituntetes", PlayerInfo[playerid][pSwatKituntetes]);
		MysqlUpdateInt(query, "Szerelo", PlayerInfo[playerid][pSzerelo]);
		//SendFormatMessageToAll(COLOR_LIGHTRED, "Mentés lefutott, szerelõ | ID: %d | Érték: %d", playerid, PlayerInfo[playerid][pSzerelt]);
		MysqlUpdateInt(query, "TaxiEngedely", PlayerInfo[playerid][pTaxiEngedely]);
		MysqlUpdateInt(query, "Szerelesek", PlayerInfo[playerid][pSzerelt]);
		MysqlUpdateInt(query, "Vontatokotel", PlayerInfo[playerid][pVontatokotel]);
		MysqlUpdateInt(query, "Vamkommando", PlayerInfo[playerid][pVK]);

		//new mdc[128];
		//format(mdc, 128, "%s@%s@%s", PlayerCrime[playerid][pAccusedof], PlayerCrime[playerid][pVictim], PlayerCrime[playerid][pBplayer]);
		//MysqlUpdateStr(query, "MDC", mdc);

		new nyelv[256];
		for(new n = 0; n <= MAX_NYELV; n++)
		{
			if(!n) format(nyelv, 256, "%d", PlayerInfo[playerid][pNyelv][0]);
			else format(nyelv, 256, "%s,%d", nyelv, PlayerInfo[playerid][pNyelv][n]);
		}
		MysqlUpdateStr(query, "Nyelvek", nyelv);
		
		new fegyverskillek[60];
		format(fegyverskillek, 60, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pFegyverSkillek][0], PlayerInfo[playerid][pFegyverSkillek][1], PlayerInfo[playerid][pFegyverSkillek][2], PlayerInfo[playerid][pFegyverSkillek][3], PlayerInfo[playerid][pFegyverSkillek][4],
		PlayerInfo[playerid][pFegyverSkillek][5], PlayerInfo[playerid][pFegyverSkillek][6], PlayerInfo[playerid][pFegyverSkillek][7], PlayerInfo[playerid][pFegyverSkillek][8], PlayerInfo[playerid][pFegyverSkillek][9], PlayerInfo[playerid][pFegyverSkillek][10]);
		MysqlUpdateStr(query, "FegyverSkillek", fegyverskillek);
		MysqlUpdateInt(query, "SSSValaszok", PlayerInfo[playerid][pSSSValaszok]);
		MysqlUpdateInt(query, "Kozmunka", PlayerInfo[playerid][pKozmunka]);
		MysqlUpdateInt(query, "KozmunkaIdo", PlayerInfo[playerid][pKozmunkaIdo]);
		MysqlUpdateInt(query, "Mobilnet", PlayerInfo[playerid][pMobilnet]);
		MysqlUpdateInt(query, "Arany", PlayerInfo[playerid][pArany]);
		MysqlUpdateInt(query, "AranyBank", PlayerInfo[playerid][pAranyBank]);
		
		
		new taxicucc[128];
		Format(taxicucc, "%d,%.3f,%d,%.3f,",Taxi[playerid][tHivasok],Taxi[playerid][tOKm],Taxi[playerid][tHivasokValt],Taxi[playerid][tOKmValt]);

		MysqlUpdateStr(query, "TaxiKm", taxicucc);
		
		new pluszber[128];
		format(pluszber, sizeof(pluszber), "%d,%s", PlayerInfo[playerid][pPluszBer], PlayerInfo[playerid][pPluszBerMeddig]);
		MysqlUpdateStr(query, "PluszBer", pluszber);
		
		new megfigyelve[128];
		format(megfigyelve, sizeof(megfigyelve), "%d,%s", PlayerInfo[playerid][pMegfigyelve], PlayerInfo[playerid][pMegfigyelveOK]);
		MysqlUpdateStr(query, "Megfigyelve", megfigyelve);
	
		MysqlUpdateInt(query, "Buntetopont", PlayerInfo[playerid][pBuntetopont]);
		
		new trafik[128];
		format(trafik, sizeof(trafik), "%d,%d", PlayerInfo[playerid][pTrafik], PlayerInfo[playerid][pTrafiOsszeg]);
		MysqlUpdateStr(query, "Trafik", trafik);
		
		new adostring[128];
		format(adostring, sizeof(adostring), "%d,%d", PlayerInfo[playerid][pAdokIdo], PlayerInfo[playerid][pAdokOsszeg]);
		MysqlUpdateStr(query, "Ado", adostring);
		
		new FrissitesUzenet[512];
		Format(FrissitesUzenet, "%d,%s", PlayerInfo[playerid][pFrissitesUzenetVan], PlayerInfo[playerid][pFrissitesUzenet]);
		MysqlUpdateStr(query, "FrissitesUzenet", FrissitesUzenet);
		
		new rkastring[128];
		format(rkastring, sizeof(rkastring), "%d,%d", PlayerInfo[playerid][pRKA], PlayerInfo[playerid][pRKARang]);
		MysqlUpdateStr(query, "RKA", rkastring);
		
		new policestring[128];
		format(policestring, sizeof(policestring), "%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pPoliceAlosztaly][0], PlayerInfo[playerid][pPoliceAlosztaly][1]
		, PlayerInfo[playerid][pPoliceAlosztaly][2], PlayerInfo[playerid][pPoliceRuha][0],  PlayerInfo[playerid][pPoliceRuha][1], PlayerInfo[playerid][pPoliceRuha][2]
		, PlayerInfo[playerid][pPoliceAlosztalyFo]);
		MysqlUpdateStr(query, "PoliceAlosztaly", policestring);
		
		new csaladstring[128];
		format(csaladstring, sizeof(csaladstring), "%d,%d,%d", PlayerInfo[playerid][pCsaladTagja], PlayerInfo[playerid][pCsaladLeader],PlayerInfo[playerid][pCsaladRang]);
		MysqlUpdateStr(query, "Csalad", csaladstring);

		new moriartystring[128];
		format(moriartystring, sizeof(moriartystring), "%d,%d", PlayerInfo[playerid][pMoriartySzalag], PlayerInfo[playerid][pMoriartySzalagIdo]);
		MysqlUpdateStr(query, "MoriartySzalag", moriartystring);
		
		MysqlUpdateInt(query, "LadaKulcs", PlayerInfo[playerid][pLadaKulcs]);
		
		MysqlUpdateInt(query, "HTojas", PlayerInfo[playerid][phTojas]);

		new gumilovedekstring[128];
		format(gumilovedekstring, sizeof(gumilovedekstring), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", Gumilovedek[playerid][fxMP5], Gumilovedek[playerid][fxAK47], Gumilovedek[playerid][fxM4A1],
		Gumilovedek[playerid][fxShotgun], Gumilovedek[playerid][fxDeagle], Gumilovedek[playerid][fxSniper], Gumilovedek[playerid][fxCombat],
		Gumilovedek[playerid][fxColt45], Gumilovedek[playerid][fxSilencedColt45], Gumilovedek[playerid][fxRifle]);
		MysqlUpdateStr(query, "GumiLovedek", gumilovedekstring);
		
		new mark[256];
		Format(mark, "%d|%d|%d|%d|%s", PlayerInfo[playerid][pMarkLevel], PlayerInfo[playerid][pMarkTriggerTime], PlayerInfo[playerid][pMarkMinPlayers], PlayerInfo[playerid][pMarkMinMarkedPlayers], PlayerInfo[playerid][pMarkReason]);
		MysqlUpdateStr(query, "Mark", mark);
		
		new fegyverigazit[64];
		format(fegyverigazit, sizeof(fegyverigazit), "%d,%d,%d,%d,%d", WeaponAdjust[playerid][waID][0], WeaponAdjust[playerid][waID][1],
		WeaponAdjust[playerid][waID][2], WeaponAdjust[playerid][waID][3], WeaponAdjust[playerid][waID][4]);
		MysqlUpdateStr(query, "FegyverIgazit", fegyverigazit);

		MysqlFinalUpdate(query, PlayerInfo[playerid][pID]);
	}

	
	return 1;
}

stock PoliceAlosztalyban(playerid)
{
	if(PlayerInfo[playerid][pPoliceAlosztaly][0] > 0) return 1; 
	if(PlayerInfo[playerid][pPoliceAlosztaly][1] > 0) return 1;
	if(PlayerInfo[playerid][pPoliceAlosztaly][2] > 0) return 1;
	
	return 0;
}

stock NincsCsaladban(playerid)
{
	if(PlayerInfo[playerid][pCsaladTagja] <= 0 && PlayerInfo[playerid][pCsaladLeader] <= 0 && PlayerInfo[playerid][pCsaladRang] <= 0)
		return 1;
	return 0;
}

stock VincenzoLeader(playerid)
{
	if(PlayerInfo[playerid][pCsaladTagja] == 2 && PlayerInfo[playerid][pCsaladLeader] == 2)
		return 1;
	return 0;
}

stock BrascoLeader(playerid)
{
	if(PlayerInfo[playerid][pCsaladTagja] == 1 && PlayerInfo[playerid][pCsaladLeader] == 1)
		return 1;
	return 0;
}

stock BrascoTag(playerid)
{
	if(PlayerInfo[playerid][pCsaladTagja] == 1)
		return 1;
	return 0;
}

stock VincenzoTag(playerid)
{
	if(PlayerInfo[playerid][pCsaladTagja] == 2)
		return 1;
	return 0;
}
/*stock GetVehicleSpeed( vehicleid ) {
    new Float:vSpeed[3];
    GetVehicleVelocity( vehicleid, vSpeed[0], vSpeed[1], vSpeed[2] );

    new Float:vSpeed_Float;
    vSpeed_Float = floatsqroot( ((vSpeed[0] * vSpeed[0]) + (vSpeed[1] * vSpeed[1])) + (vSpeed[2] * vSpeed[2])) * 161.0;

    new vSpeed_Int;
    vSpeed_Int = floatround( vSpeed_Float, floatround_round );

    return vSpeed_Int;
}*/

fpublic OnPlayerUpdate(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		onPause_Update(playerid);

		
		if(GetPlayerWeapon(playerid) == 38)//Minigun
 		{
			SendClientMessage(playerid, 0xFF0000AA, "ClassRPG: Szia.");
			SendFormatMessageToAll(COLOR_LIGHTRED, "ClassRPG: %s ki lett bannolva a rendszer által | Oka: Minigun", PlayerName(playerid));
			SeeBan(playerid, 0, NINCS, "Minigun");
		}
		
		if(Harcol[playerid])
		{
			new drunk2 = GetPlayerDrunkLevel(playerid);
			if(drunk2 < 100)
			{
				SetPlayerDrunkLevel(playerid,2000);
			}
			else
			{
				if(DLlast[playerid] != drunk2)
				{
					new fps = DLlast[playerid] - drunk2;
					
					if((fps > 0) && (fps < 200))
					FPS2[playerid] = fps;
					DLlast[playerid] = drunk2;
				}
			}
		}
		if(KocsibanVan[playerid] && !VehiclePosUpdated[playerid])
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			GetVehiclePos(vehicleid, VehiclePos[vehicleid][0], VehiclePos[vehicleid][1], VehiclePos[vehicleid][2]);
			VehiclePosUpdated[playerid] = true;
		}

		if(noclipdata[playerid][cameramode] == CAMERA_MODE_FLY)
		{
			new keys,ud,lr;
			GetPlayerKeys(playerid,keys,ud,lr);

			if(noclipdata[playerid][mode] && (GetTickCount() - noclipdata[playerid][lastmove] > 100))
			{
				// If the last move was > 100ms ago, process moving the object the players camera is attached to
				MoveCamera(playerid);
			}

			// Is the players current key state different than their last keystate?
			if(noclipdata[playerid][udold] != ud || noclipdata[playerid][lrold] != lr)
			{
				if((noclipdata[playerid][udold] != 0 || noclipdata[playerid][lrold] != 0) && ud == 0 && lr == 0)
				{   // All keys have been released, stop the object the camera is attached to and reset the acceleration multiplier
					StopPlayerObject(playerid, noclipdata[playerid][flyobject]);
					noclipdata[playerid][mode]      = 0;
					noclipdata[playerid][accelmul]  = 0.0;
				}
				else
				{   // Indicates a new key has been pressed

					// Get the direction the player wants to move as indicated by the keys
					noclipdata[playerid][mode] = GetMoveDirectionFromKeys(ud, lr);

					// Process moving the object the players camera is attached to
					MoveCamera(playerid);
				}
			}
			noclipdata[playerid][udold] = ud; noclipdata[playerid][lrold] = lr; // Store current keys pressed for comparison next update
			return 0;
		}
		if(FlyModeBa[playerid])
		    return false;

		if(Desync[playerid]) //itt nincs olyan dolog ami átrakja, de lehet de az csak függvény amit meghív
			return 0;

		GetPlayerHealth(playerid, iNewPlayerHealth[playerid]);
		if(iNewPlayerHealth[playerid] != iPlayerHealth[playerid])
		{
		    OnPlayerHealthChange(playerid, iNewPlayerHealth[playerid], iPlayerHealth[playerid]);
		    iPlayerHealth[playerid] = iNewPlayerHealth[playerid];
		}

		GetPlayerArmour(playerid, iNewPlayerArmour[playerid]);
		if(iNewPlayerArmour[playerid] != iPlayerArmour[playerid])
		{
		    OnPlayerArmourChange(playerid, iNewPlayerArmour[playerid], iPlayerArmour[playerid]);
		    iPlayerArmour[playerid] = iNewPlayerArmour[playerid];
		}

		iNewPlayerMoney[playerid] = GetPlayerMoney(playerid);
		if(iNewPlayerMoney[playerid] != iPlayerMoney[playerid])
		{
		    OnPlayerMoneyChange(playerid, iNewPlayerMoney[playerid], iPlayerMoney[playerid]);
		    iPlayerMoney[playerid] = iNewPlayerMoney[playerid];
		}

		iNewPlayerAmmo[playerid] = GetPlayerAmmo(playerid);
		if(iNewPlayerAmmo[playerid] != iPlayerAmmo[playerid])
		{
		    OnPlayerAmmoChange(playerid, iNewPlayerAmmo[playerid], iPlayerAmmo[playerid]);
		    iPlayerAmmo[playerid] = iNewPlayerAmmo[playerid];
		}

		iNewPlayerVirtualWorld[playerid] = GetPlayerVirtualWorldEx(playerid);
		if(iNewPlayerVirtualWorld[playerid] != iPlayerVirtualWorld[playerid])
		{
		    OnPlayerVirtualWorldChange(playerid, iNewPlayerVirtualWorld[playerid], iPlayerVirtualWorld[playerid]);
		    iPlayerVirtualWorld[playerid] = iNewPlayerVirtualWorld[playerid];
		}
		iNewPlayerInterior[playerid] = GetPlayerInteriorEx(playerid);
		if(iNewPlayerInterior[playerid] != iPlayerInterior[playerid])
		{
			OnPlayerInteriorChange(playerid, iNewPlayerInterior[playerid], iPlayerInterior[playerid]);
			iPlayerInterior[playerid] = iNewPlayerInterior[playerid];
		}
		iNewPlayerScore[playerid] = GetPlayerScore(playerid);
		if(iNewPlayerScore[playerid] != iPlayerScore[playerid])
		{
		    OnPlayerScoreChange(playerid, iNewPlayerScore[playerid], iPlayerScore[playerid]);
		    iPlayerScore[playerid] = iNewPlayerScore[playerid];
		}

		iNewPlayerTeam[playerid] = GetPlayerTeam(playerid);
		if(iNewPlayerTeam[playerid] != iPlayerTeam[playerid])
		{
		    OnPlayerTeamChange(playerid, iNewPlayerTeam[playerid], iPlayerTeam[playerid]);
		    iPlayerTeam[playerid] = iNewPlayerTeam[playerid];
		}

		iNewPlayerSkin[playerid] = GetPlayerSkin(playerid);
		if(iNewPlayerSkin[playerid] != iPlayerSkin[playerid])
		{
		    OnPlayerSkinChange(playerid, iNewPlayerSkin[playerid], iPlayerSkin[playerid]);
		    iPlayerSkin[playerid] = iNewPlayerSkin[playerid];
		}

		iNewPlayerWantedLevel[playerid] = GetPlayerWantedLevel(playerid);
		if(iNewPlayerWantedLevel[playerid] != iPlayerWantedLevel[playerid])
		{
		    OnPlayerWantedLevelChange(playerid, iNewPlayerWantedLevel[playerid], iPlayerWantedLevel[playerid]);
		    iPlayerWantedLevel[playerid] = iNewPlayerWantedLevel[playerid];
		}

		iNewPlayerWeapon[playerid] = GetPlayerWeapon(playerid);
		if(iNewPlayerWeapon[playerid] != iPlayerWeapon[playerid])
		{
		    OnPlayerWeaponChange(playerid, iNewPlayerWeapon[playerid], iPlayerWeapon[playerid]);
		    iPlayerWeapon[playerid] = iNewPlayerWeapon[playerid];
		}
		if(Joypad[playerid] != NINCS && !IsPlayerNPC(playerid)) // Joypad detektálás
		{
			Joypad[playerid]++;
			if(Joypad[playerid] >= 5 || true)
			{
				new gombok, fel_le, bal_jobb;
				GetPlayerKeys(playerid, gombok, fel_le, bal_jobb);
				if((fel_le != 128 && fel_le != 0 && fel_le != -128) || (bal_jobb != 128 && bal_jobb != 0 && bal_jobb != -128))
				{
					new str[128]; format(str, 128, "<< Joypad: [%d]%s >>", playerid, Nev(playerid));
					ABroadCast(COLOR_LIGHTRED, str, 1);
					Log("Cheat", str);

					Joypad[playerid] = NINCS;
				}
			}
		}
		if(SebessegKorlat[playerid] != 0 && KocsibanVan[playerid] && RendesJatekos(playerid))
			SebessegKorlatozoPlayer(playerid);
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    if(IsPlayerNPC(playerid))
	        return true;
	        
        if(PlayerRaceInfo[playerid][xVersenyen] != NINCS)
			return true;

		new Float:vehh;
		GetVehicleHealth(GetPlayerVehicleID(playerid), vehh);
		if(vehh != vehicleh[GetPlayerVehicleID(playerid)])
		{
			CallLocalFunction("OnVehicleHealthChange", "iiffd", playerid, GetPlayerVehicleID(playerid), vehicleh[GetPlayerVehicleID(playerid)], vehh, vehSpeed[GetPlayerVehicleID(playerid)]);
			vehicleh[GetPlayerVehicleID(playerid)] = vehh;
		}
		GetVehicleVelocity(GetPlayerVehicleID(playerid), velX[playerid], velY[playerid], velZ[playerid]);
		vehSpeed[GetPlayerVehicleID(playerid)] = GetVehicleSpeed(GetPlayerVehicleID(playerid));
	}

	new Float:hp;
	
	if(PlayerInfo[playerid][pKiesetKocsi] < UnixTime)
	{
		if(GetPVarInt(playerid, "FallFromVeh") == 1)
		{

			new
					Float:vX,
					Float:vY,
					Float:vZ;
			GetPlayerVelocity(playerid ,vX, vY, vZ);
			if(vZ == 0)
			{
				ClearAnimations(playerid);
				GetPlayerHealth(playerid, hp);
				hp -= 30.0;
				SetPlayerHealth(playerid, hp);
				if(hp <= 0.0)
				{
					SetPlayerDrunkLevel(playerid, 0);
				} else {
					SetPlayerDrunkLevel(playerid, 10000);
					SetTimerEx("Refix", 5000, 0, "i", playerid);
					TogglePlayerControllable(playerid, 0);
					ApplyAnimation(playerid, "PARACHUTE", "FALL_skyDive_DIE",4,0,0,0,1,0);
					Msg(playerid,"Kiestél a kocsiból! Legközelebb kösd be az övedet!");
					PlayerInfo[playerid][pKiesetKocsi] = UnixTime+10;
					AnimbaRak(playerid);
				}
				SetPVarInt(playerid, "FallFromVeh", 0);
			}
		}
	}
	return 1;
}

fpublic OnVehicleHealthChange(playerid, vehicleid, Float:regielet, Float:ujelet, sebesseg)
{
	if(IsPlayerNPC(playerid))
	    return true;

    if(sebesseg < 20)
		return true;
	
    if(PlayerRaceInfo[playerid][xVersenyen] != NINCS)
		return true;
		
	if(AdminDuty[playerid] == 1)
		return true;
		
	if(KamionEgyeb[playerid] == 3)
	{
		new veh = GetVehicleTrailer(vehicleid);
		SetVehicleHealth(veh, ujelet-650.0);
		new Float:health;
		GetVehicleHealth(veh, health);
		if(health < 250.0) SetTimerEx("RespawnTrailer",1000*10,0,"i", veh);
	}

	// Meghalnak a játékosok derbin
	/*if(ujelet < 700.0 && RoncsDerby[playerid][rdVersenyez])
	{
		new Float:elete;
		GetPlayerHealth(playerid, elete);
		SetPlayerHealth(playerid, elete-5);
	}
	if(û[playerid][rdVersenyez]) return true;*/
	
	if((regielet - ujelet) >= 150 && ujelet < 1000.0)
	{
		if(ov[playerid] == 0)
		{
			new
					Float:x,
					Float:y,
					Float:z,
					Float:a;
			GetVehiclePos(vehicleid, x, y, z);
			GetVehicleZAngle(vehicleid, a);
			SetPlayerPos(playerid, x, y, z+2);
			GetVehicleVelocity(vehicleid, x, y, z);
			SetPlayerVelocity(playerid, velX[playerid], velY[playerid], z+1);
			SetPlayerDrunkLevel(playerid, 10000);
			SetTimerEx("FallSet", 500, 0, "i", playerid);
		}
	}
	else if((regielet - ujelet) > (UtkozesErzekenyseg * 2.8))
	    if(ov[playerid] == 1)
			SetPlayerDrunkLevel(playerid, 2200);

	return true;
}

fpublic RespawnTrailer(veh)
{
	SetVehicleToRespawn(veh);
	return 1;
}

fpublic FallSet(playerid) return SetPVarInt(playerid, "FallFromVeh", 1);
fpublic Refix(playerid)
{
	SetTimerEx("Controllable",1800,0,"i",playerid);
	SetTimerEx("DrunkClean",3000,0,"i",playerid);
	return 1;
}
fpublic Controllable(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ApplyPlayerAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
	ApplyPlayerAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
	ApplyPlayerAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
	return 1;
}
fpublic DrunkClean(playerid) return SetPlayerDrunkLevel(playerid,0);


stock AdatLekeres(playerid, type, bool: preQuery = true)
{
	if(type == ADAT_TYPE_AKTIVITAS)
	{
		PlayerInfo[playerid][pHetiAktivitas] = 0;
		PlayerInfo[playerid][pHaviAktivitas] = 0;
		
		if( preQuery )
		{
			new query[256];
			format(query, 256, "SELECT * FROM ig_activity_index WHERE UID = '%d'", PlayerInfo[playerid][pID]);
			doQuery( query, SQL_ADATLEKERES, playerid );
			//printf(query);
			return 1;
		}
		
		new rows, fields;
		sql_data(rows, fields);
		
		if(rows)
		{
			PlayerInfo[playerid][pHetiAktivitas] = floatround(float(sql_get_int(2)) / 3600.0, floatround_round);
			PlayerInfo[playerid][pHaviAktivitas] = floatround(float(sql_get_int(1)) / 3600.0, floatround_round);
			
			if(UnixTime < 1391731200)
			{
				if(PlayerInfo[playerid][pHetiAktivitas] < 15)
					PlayerInfo[playerid][pHetiAktivitas] = 15;
				
				if(PlayerInfo[playerid][pHaviAktivitas] < 60)
					PlayerInfo[playerid][pHaviAktivitas] = 60;
			}
			
			/*new string[256];
			format(string,sizeof(string),"[AKTIVITAS BETOLT] Név: %s Heti: %d Havi: %d",PlayerName(playerid),PlayerInfo[playerid][pHetiAktivitas],PlayerInfo[playerid][pHaviAktivitas]);
			Log("Scripter",string);*/
			
			if(PlayerInfo[playerid][pPbiskey] > NINCS)
			{
				new biz=PlayerInfo[playerid][pPbiskey];
				if(IsScripter(playerid) && PlayerInfo[playerid][pHetiAktivitas] < 14)
				{
					BizzInfo[biz][bHeti1]=14;
					BizzInfo[biz][bHavi1]=PlayerInfo[playerid][pHaviAktivitas];
					BizzInfo[biz][bIdo1]=UnixTime;
				}
				else
				{
					BizzInfo[biz][bHeti1]=PlayerInfo[playerid][pHetiAktivitas];
					BizzInfo[biz][bHavi1]=PlayerInfo[playerid][pHaviAktivitas];
					BizzInfo[biz][bIdo1]=UnixTime;
				}
				
				
				BizUpdate(biz, BIZ_Aktivsag);
			}	
			if(PlayerInfo[playerid][pBizniszKulcs] > NINCS)
			{
				new biz=PlayerInfo[playerid][pBizniszKulcs];
				if(IsScripter(playerid) && PlayerInfo[playerid][pHetiAktivitas] < 14)
				{
					BizzInfo[biz][bHeti2]=14;
					BizzInfo[biz][bHavi2]=PlayerInfo[playerid][pHaviAktivitas];
					BizzInfo[biz][bIdo2]=UnixTime;
				}
				else
				{
					BizzInfo[biz][bHeti2]=PlayerInfo[playerid][pHetiAktivitas];
					BizzInfo[biz][bHavi2]=PlayerInfo[playerid][pHaviAktivitas];
					BizzInfo[biz][bIdo2]=UnixTime;
				}
				BizUpdate(biz, BIZ_Aktivsag);
			}		
		}
		/*else
		{
			new string[128];
			format(string,sizeof(string),"[AKTIVITAS BETOLT] HIBA rows false Név: %s Heti: %d Havi: %d",PlayerName(playerid),PlayerInfo[playerid][pHetiAktivitas],PlayerInfo[playerid][pHaviAktivitas]);
			Log("Scripter",string);
			Msg(playerid,"[HIBA] Az aktivitás betöltése nem sikerült! NYOMJ egy f8-at és rakd fel bugok topiba!");
		}*/
		
		return 1;
	}
	
	return 1;
}
stock AdatBetoltesSQL(playerid, bool: preQuery = true)
{
	if( preQuery )
	{
		format(_tmpString, 256, "SELECT * FROM %s WHERE id = '%d'", SQL_DB_Player, PlayerInfo[playerid][pID]);
		doQuery( _tmpString, SQL_PLAYER_LOGIN, playerid );
		return 1;
	}
	
	new splits[32];

	//strmid(PlayerInfo[playerid][pNev], data[1], 0, strlen(data[1]), 25);
	//strmid(PlayerInfo[playerid][pKey], data[2], 0, strlen(data[2]));
	PlayerInfo[playerid][pLevel] = sql_get_int(3);
	PlayerInfo[playerid][pAdmin] = sql_get_int(4);
	//PlayerInfo[playerid][pDonateRank] = sql_get_int(5);
	//PlayerInfo[playerid][gPupgrade] = sql_get_int(6);
	PlayerInfo[playerid][pConnectTime] = sql_get_int(7);
	PlayerInfo[playerid][pSex] = sql_get_int(8);
	PlayerInfo[playerid][pAge] = sql_get_int(9);
	PlayerInfo[playerid][pOrigin] = sql_get_int(10);
	PlayerInfo[playerid][pMarried] = sql_get_int(11);
	sql_get_str_len(12, PlayerInfo[playerid][pMarriedTo], MAX_PLAYER_NAME);
	PlayerInfo[playerid][pCrimes] = sql_get_int(13);
	PlayerInfo[playerid][pBSA] = sql_get_int(14);//Kills helyére
	//PlayerInfo[playerid][pKills] = sql_get_int(14);
	PlayerInfo[playerid][pValaszok] = sql_get_int(15);
	PlayerInfo[playerid][pArrested] = sql_get_int(16);
	PlayerInfo[playerid][pFem] = sql_get_int(17);
	PlayerInfo[playerid][pFishes] = sql_get_int(18);
	PlayerInfo[playerid][pBiggestFish] = sql_get_int(19);
	PlayerInfo[playerid][pHeadValue] = sql_get_int(20);
	PlayerInfo[playerid][pJailed] = sql_get_int(21);
	PlayerInfo[playerid][pJailTime] = sql_get_int(22);
	PlayerInfo[playerid][pWins] = sql_get_int(23);
	PlayerInfo[playerid][pLoses] = sql_get_int(24);
	PlayerInfo[playerid][pTut] = sql_get_int(25);
	PlayerInfo[playerid][pMegbizas] = sql_get_int(26);
	PlayerInfo[playerid][pWarns] = sql_get_int(27);
	PlayerInfo[playerid][pKWarns] = sql_get_int(28);
	PlayerInfo[playerid][pDrogido] = sql_get_int(29);
	PlayerInfo[playerid][pAS] = sql_get_int(30);
	PlayerInfo[playerid][pExp] = sql_get_int(31);
	PlayerInfo[playerid][pCash] = sql_get_int(32);
	PlayerInfo[playerid][pAccount] = sql_get_int(33);
	PlayerInfo[playerid][pKaja] = sql_get_int(34);
	PlayerInfo[playerid][pPnumber] = sql_get_int(35);
	PlayerInfo[playerid][pPhousekey] = sql_get_int(36);
	PlayerInfo[playerid][pPbiskey] = sql_get_int(37);
	PlayerInfo[playerid][pPcarkey] = sql_get_int(38);

	// Cuccok
	sql_get_str(39, _tmpString);
	sscanf(_tmpString, "p<,>I(0)I(0)I(0)I(0)I(0)I(0)I(0)I(0)", PlayerInfo[playerid][pMuanyag], PlayerInfo[playerid][pCserje], PlayerInfo[playerid][pMak], PlayerInfo[playerid][pCannabis], PlayerInfo[playerid][pMats], PlayerInfo[playerid][pKokain], PlayerInfo[playerid][pHeroin], PlayerInfo[playerid][pMarihuana]);

	PlayerInfo[playerid][pPhoneBook] = sql_get_int(40);
	PlayerInfo[playerid][pCDPlayer] = sql_get_int(41);
	PlayerInfo[playerid][pLottoNr] = sql_get_int(42);
	PlayerInfo[playerid][pFuel] = sql_get_int(43);
	PlayerInfo[playerid][pCigiUsed] = sql_get_int(44);
	PlayerInfo[playerid][pCigi] = sql_get_int(45);
	PlayerInfo[playerid][pNikotin] = sql_get_int(46);
	PlayerInfo[playerid][pGyujto] = sql_get_int(47);
	PlayerInfo[playerid][pPia] = sql_get_int(48);
	PlayerInfo[playerid][pJob1] = sql_get_int(49);
	PlayerInfo[playerid][pJob2] = sql_get_int(50);
	PlayerInfo[playerid][pPayCheck] = sql_get_int(53);
	PlayerInfo[playerid][pPayDay] = sql_get_int(54);
	PlayerInfo[playerid][pPayDayHad] = sql_get_int(55);
	PlayerInfo[playerid][pLeader] = sql_get_int(56);
	PlayerInfo[playerid][pMember] = sql_get_int(57);
	//SZABAD HELY - jelzés volt itt - PlayerInfo[playerid][pJelzes] = sql_get_int(58);
	PlayerInfo[playerid][pRank] = sql_get_int(59);

	// Skillek
	new skills[512];
	sql_get_str(60, skills);
	sscanf(skills, "p<,>A<i>(0)[19]", splits);
	PlayerInfo[playerid][pDetSkill] = splits[0];
	PlayerInfo[playerid][pSexSkill] = splits[1];
	PlayerInfo[playerid][pBetoroSkill] = splits[2];
	PlayerInfo[playerid][pLawSkill] = splits[3];
	PlayerInfo[playerid][pMechSkill] = splits[4];
	PlayerInfo[playerid][pJackSkill] = splits[5];
	PlayerInfo[playerid][pCarSkill] = splits[6];
	PlayerInfo[playerid][pNewsSkill] = splits[7];
	PlayerInfo[playerid][pDrugsSkill] = splits[8];
	PlayerInfo[playerid][pCookSkill] = splits[9];
	PlayerInfo[playerid][pFishSkill] = splits[10];
	PlayerInfo[playerid][pRiasztoSkill] = splits[11];
	PlayerInfo[playerid][pHackingSkill] = splits[12];
	PlayerInfo[playerid][pRepSkill] = splits[13];
	PlayerInfo[playerid][pAutmotSkill] = splits[14];
	PlayerInfo[playerid][pHajoSkill] = splits[15];
	PlayerInfo[playerid][pKamiSkill] = splits[16];
	PlayerInfo[playerid][pAdrSkill] = splits[17];
	PlayerInfo[playerid][pFegySkill] = splits[18];

	// Jogosítványok
	sql_get_str(61, _tmpString);
	sscanf(_tmpString, "p<,>A<i>(0)[10]", splits);
	PlayerInfo[playerid][pCarLic] = splits[0];
	PlayerInfo[playerid][pFlyLic] = splits[1];
	PlayerInfo[playerid][pBoatLic] = splits[2];
	PlayerInfo[playerid][pFishLic] = splits[3];
	PlayerInfo[playerid][pGunLic] = splits[4];
	PlayerInfo[playerid][pMotorJogsi] = splits[5];
	PlayerInfo[playerid][pKamionJogsi] = splits[6];
	PlayerInfo[playerid][pAdrJogsi] = splits[7];
	PlayerInfo[playerid][pKreszJogsi] = splits[8];
	PlayerInfo[playerid][pHeliLic] = splits[9];
	
	PlayerInfo[playerid][pChar] = sql_get_int(62);
	PlayerInfo[playerid][pModel] = sql_get_int(63);

	// Upgrades
	sql_get_str(64, _tmpString);
	sscanf(_tmpString, "p<,>A<i>(0)[5]", splits);
	PlayerInfo[playerid][pAlcoholPerk] = splits[0];
	PlayerInfo[playerid][pDrugPerk] = splits[1];
	PlayerInfo[playerid][pMiserPerk] = splits[2];
	PlayerInfo[playerid][pPainPerk] = splits[3];
	PlayerInfo[playerid][pTraderPerk] = splits[4];

	// Kilépés pos
	sql_get_str(65, _tmpString);
	sscanf(_tmpString, "p<,>F(0)F(0)F(0)I(0)I(0)", PlayerInfo[playerid][pCPosX], PlayerInfo[playerid][pCPosY], PlayerInfo[playerid][pCPosZ], PlayerInfo[playerid][pCInt], PlayerInfo[playerid][pCVW]);

	// Kilépés élet
	sql_get_str(66, _tmpString);
	sscanf(_tmpString, "p<,>F(0)F(0)", PlayerInfo[playerid][pCelet], PlayerInfo[playerid][pCpajzs]);

	// Fegyverek
	sql_get_str(67, _tmpString);
	sscanf(_tmpString, "p<,>A<i>(0)["#MAX_PLAYER_WEAPONS"]", PlayerWeapons[playerid][pWeapon]);
	
	// Töltények
	new ammo[512], ammos[MAX_WEAPONS][32], wep, amm;
	sql_get_str(68, ammo);
	sscanf(ammo, "p<,>A<s[32]>(0:0)["#MAX_WEAPONS"]", ammos);
	for(new i = 0; i < MAX_WEAPONS; i++)
	{
		if(!sscanf(ammos[i], "p<:>I(0)I(0)", wep, amm) && 0 < wep < MAX_WEAPONS && 0 < amm)
			PlayerWeapons[playerid][pAmmo][wep] = min(amm, WeaponMaxAmmo(wep));
	}

	// 69 = Muted
	PlayerInfo[playerid][pUtolsoBelepes] = sql_get_int(70);
	PlayerInfo[playerid][pInt] = sql_get_int(71);
	PlayerInfo[playerid][pLocal] = sql_get_int(72);
	PlayerInfo[playerid][pPos_x] = sql_get_float(73);
	PlayerInfo[playerid][pPos_y] = sql_get_float(74);
	PlayerInfo[playerid][pPos_z] = sql_get_float(75);
	PlayerInfo[playerid][pCarTime] = sql_get_int(76);
	PlayerInfo[playerid][pLokator] = sql_get_int(77);
	PlayerInfo[playerid][pCigiFuggoseg] = sql_get_int(78);
	PlayerInfo[playerid][pSwattag] = sql_get_int(79);
	PlayerInfo[playerid][pSwatRang] = sql_get_int(80);
	PlayerInfo[playerid][pKituntetes] = sql_get_int(81);
	PlayerInfo[playerid][pSzallitott] = sql_get_int(82);
	PlayerInfo[playerid][pSpawnchange] = sql_get_int(83);
	sql_get_str_len(84, PlayerInfo[playerid][pAdminAlnev], MAX_PLAYER_NAME);
	PlayerInfo[playerid][pClint] = sql_get_int(85);
	PlayerInfo[playerid][pTeloEgyenleg] = sql_get_int(86);
	PlayerInfo[playerid][pKotszer] = sql_get_int(87);
	PlayerInfo[playerid][pUtlevel] = sql_get_int(88);
	PlayerInfo[playerid][pStilus] = sql_get_int(89);

	// Bankszámla
	sql_get_str(90, _tmpString);
	sscanf(_tmpString, "p<,>I(0)I(0)I(0)", PlayerInfo[playerid][pBankSzamla], PlayerInfo[playerid][pBankSzamlaSzam], PlayerInfo[playerid][pBankSzamlaJelszo]);

	PlayerInfo[playerid][pC4] = sql_get_int(91);

	// Hitman
	sql_get_str(92, _tmpString);
	sscanf(_tmpString, "p<,>I(0)I(0)", PlayerInfo[playerid][pHitman], PlayerInfo[playerid][pHitmanIdo]);

	sql_get_str_len(93, PlayerInfo[playerid][pHitmanNev], MAX_PLAYER_NAME);
	
	// Prémium
	sql_get_str(94, _tmpString);
	sscanf(_tmpString, "p<,>I(0)I(0)", PlayerInfo[playerid][pPremiumCsomag], PlayerInfo[playerid][pPremiumPont]);

	PlayerInfo[playerid][pPremiumIdo] = sql_get_int(95);
	PlayerInfo[playerid][pBerlo] = sql_get_int(96);
	// 97 - FOGLALT! - Online

	// Igazolványok
	sql_get_str(98, _tmpString);
	sscanf(_tmpString, "p<,>I(0)I(0)", PlayerInfo[playerid][pSzemelyi], PlayerInfo[playerid][pLakcimkartya]);
	
	PlayerInfo[playerid][pJegy] = sql_get_int(100);
	
	// Egyéb
	sql_get_str(101, _tmpString);
	sscanf(_tmpString, "p<,>A<i>(0)[16]", splits);
	UresHely = splits[0];
	PlayerInfo[playerid][pSzemuveg] = splits[1];
	PlayerInfo[playerid][pBicikli] = splits[2];
	PlayerInfo[playerid][pSzerszamoslada] = splits[3];
	PlayerInfo[playerid][pBankkartya] = splits[4];
	PlayerInfo[playerid][pCrossido] = splits[5];
	PlayerInfo[playerid][pSzajkendo] = splits[6];
	PlayerInfo[playerid][pGarazs] = splits[7];
	PlayerInfo[playerid][pAkkuTolto] = splits[8];
	PlayerInfo[playerid][pMaszk] = splits[9];
	PlayerInfo[playerid][pAlma] = splits[10];
	PlayerInfo[playerid][pVeszHivo] = splits[11];
	PlayerInfo[playerid][pBikazoKabel] = splits[12];
	PlayerInfo[playerid][pKormanyKituntetes] = splits[13];
	PlayerInfo[playerid][pFuelTipus] = splits[14];
	PlayerInfo[playerid][pMotorolaj] = splits[15];

	PlayerInfo[playerid][pSSS] = sql_get_int(102);
	sql_get_str_len(103, PlayerInfo[playerid][pJailOK], 128);
	
	//sql_get_str(104) - SZABAD

	// Autótolvaj
	sql_get_str(105, _tmpString);
	sscanf(_tmpString, "p<,>I(0)I(0)", PlayerInfo[playerid][pLkocsi], PlayerInfo[playerid][pLkocsiar]);

	PlayerInfo[playerid][pLaptop] = sql_get_int(106);
	PlayerInfo[playerid][pHack] = sql_get_int(107);
	PlayerInfo[playerid][pOvadek] = sql_get_int(108);
	PlayerInfo[playerid][pCsali] = sql_get_int(109);
	PlayerInfo[playerid][pHorgaszBot] = sql_get_int(110);
	PlayerInfo[playerid][pRadio] = sql_get_int(111);
	PlayerInfo[playerid][pCsipogo] = sql_get_int(112);

	// 113 - MDC volt - SZABAD
	/*split(data[113], splits, '@');
	strmid(PlayerCrime[playerid][pAccusedof], splits[0], 0, strlen(splits[0]));
	strmid(PlayerCrime[playerid][pVictim], splits[1], 0, strlen(splits[1]));
	strmid(PlayerCrime[playerid][pBplayer], splits[2], 0, strlen(splits[2]));*/
	
	sql_get_str(114, _tmpString);
	sscanf(_tmpString, "p<,>A<i>(0)["#MAX_NYELV"]", PlayerInfo[playerid][pNyelv]);

	if(strfind(PlayerInfo[playerid][pAdminAlnev], "_", true) != -1)
	{
		if(Admin(playerid, 1) && IsHitman(playerid))
			PlayerInfo[playerid][pAdminAlnevBe] = 1;
		else
			PlayerInfo[playerid][pAdminAlnevBe] = 0;
	}

	// Jogsi tiltás
	sql_get_str(115, _tmpString);
	sscanf(_tmpString, "p<@>I(0)S()[128] ", PlayerInfo[playerid][pJogsiTiltIdo], PlayerInfo[playerid][pJogsiTiltOk]);
	
	// Frakció tiltás
	sql_get_str(116, _tmpString);
	sscanf(_tmpString, "p<@>I(0)S()[128] ", PlayerInfo[playerid][pFrakcioTiltIdo], PlayerInfo[playerid][pFrakcioTiltOk]);

	PlayerInfo[playerid][pAutoker] = sql_get_int(117);

	// AS tiltás
	sql_get_str(118, _tmpString);
	sscanf(_tmpString, "p<@>I(0)S()[128] ", PlayerInfo[playerid][pAsTilt], PlayerInfo[playerid][pAsTiltOk]);

	PlayerInfo[playerid][pSwatKituntetes] = sql_get_int(119);
	PlayerInfo[playerid][pSzerelo] = sql_get_int(120);
	PlayerInfo[playerid][pTaxiEngedely] = sql_get_int(121);
	PlayerInfo[playerid][pSzerelt] = sql_get_int(122);
	PlayerInfo[playerid][pVontatokotel] = sql_get_int(123);
	PlayerInfo[playerid][pVK] = sql_get_int(124);
	PlayerInfo[playerid][pKredit] = sql_get_int(125);
	
	// Fegyver skillek
	sql_get_str(126, _tmpString);
	sscanf(_tmpString, "p<,>A<i>(0)[11]", PlayerInfo[playerid][pFegyverSkillek]);
	
	PlayerInfo[playerid][pSSSValaszok] = sql_get_int(127);

	// Leader tiltás
	sql_get_str(128, _tmpString);
	sscanf(_tmpString, "p<@>I(0)S()[128] ", PlayerInfo[playerid][pLeaderTilt], PlayerInfo[playerid][pLeaderoka]);
	
	// Fegyver tiltás
	sql_get_str(129, _tmpString);
	sscanf(_tmpString, "p<@>I(0)S()[128] ", PlayerInfo[playerid][pFegyverTiltIdo], PlayerInfo[playerid][pFegyverTiltOk]);
	
	PlayerInfo[playerid][pFelvetel] = sql_get_int(130);

	// Admin üzenet
	new stringes[310];
	sql_get_str(131, stringes);
	sscanf(stringes, "p<@>I(0)S()[300] ", PlayerInfo[playerid][pAdminUzenet], PlayerInfo[playerid][pAdminUzenetOk]);
	
	// Report tiltás
	sql_get_str(132, _tmpString);
	sscanf(_tmpString, "p<@>I(0)S()[128] ", PlayerInfo[playerid][pReportTilt], PlayerInfo[playerid][pReportTiltOk]);
	
	PlayerInfo[playerid][pOnkentes] = sql_get_int(133);
	PlayerInfo[playerid][pKozmunka] = sql_get_int(134);
	PlayerInfo[playerid][pKozmunkaIdo] = sql_get_int(135);
	PlayerInfo[playerid][pMobilnet] = sql_get_int(136);
	PlayerInfo[playerid][pArany] = sql_get_int(137);
	PlayerInfo[playerid][pAranyBank] = sql_get_int(138);

	if(PlayerInfo[playerid][pPcarkey] > (MAXVSKOCSI+1))
		PlayerInfo[playerid][pPcarkey] = NINCS;
	if(PlayerInfo[playerid][pPhousekey] > (MAXHAZ+1))
	{
		PlayerInfo[playerid][pPhousekey] = NINCS;
		PlayerInfo[playerid][pLakcimkartya] = 0;
	}
	
	sql_get_str(139, _tmpString);
	sscanf(_tmpString, "p<,>dfdf ", Taxi[playerid][tHivasok], Taxi[playerid][tOKm], Taxi[playerid][tHivasokValt], Taxi[playerid][tOKmValt]);
	
	sql_get_str(140, _tmpString);
	sscanf(_tmpString, "p<,>ds[32] ", PlayerInfo[playerid][pPluszBer], PlayerInfo[playerid][pPluszBerMeddig]);
	
	sql_get_str(141, _tmpString);
	sscanf(_tmpString, "p<,>ds[128] ", PlayerInfo[playerid][pMegfigyelve], PlayerInfo[playerid][pMegfigyelveOK]);
	
	PlayerInfo[playerid][pBuntetopont] = sql_get_int(142);
	
	sql_get_str(143, _tmpString);
	sscanf(_tmpString, "p<,>dd ", PlayerInfo[playerid][pTrafik], PlayerInfo[playerid][pTrafiOsszeg]);
	
	sql_get_str(144, _tmpString);
	sscanf(_tmpString, "p<,>dd ", PlayerInfo[playerid][pAdokIdo], PlayerInfo[playerid][pAdokOsszeg]);
	
	new stringen[512];
	sql_get_str(145, stringen);
	sscanf(stringen, "p<,>ds[500] ", PlayerInfo[playerid][pFrissitesUzenetVan], PlayerInfo[playerid][pFrissitesUzenet]);
	
	sql_get_str(146, _tmpString);
	sscanf(_tmpString, "p<,>dd ", PlayerInfo[playerid][pRKA], PlayerInfo[playerid][pRKARang]);
	
	sql_get_str(147, _tmpString);
	sscanf(_tmpString, "p<,>ddddddd ", PlayerInfo[playerid][pPoliceAlosztaly][0], PlayerInfo[playerid][pPoliceAlosztaly][1], PlayerInfo[playerid][pPoliceAlosztaly][2]
	, PlayerInfo[playerid][pPoliceRuha][0], PlayerInfo[playerid][pPoliceRuha][1], PlayerInfo[playerid][pPoliceRuha][2], PlayerInfo[playerid][pPoliceAlosztalyFo]);
	
	sql_get_str(148, _tmpString);
	sscanf(_tmpString, "p<,>ddd", PlayerInfo[playerid][pCsaladTagja], PlayerInfo[playerid][pCsaladLeader], PlayerInfo[playerid][pCsaladRang]);
	
	sql_get_str(149, _tmpString);
	sscanf(_tmpString, "p<,>dd", PlayerInfo[playerid][pMoriartySzalag], PlayerInfo[playerid][pMoriartySzalagIdo]);
	
	PlayerInfo[playerid][pLadaKulcs] = sql_get_int(150);
	
	PlayerInfo[playerid][phTojas] = sql_get_int(152);

	sql_get_str(153, _tmpString);
	sscanf(_tmpString, "p<,>dddddddddd", Gumilovedek[playerid][fxMP5], Gumilovedek[playerid][fxAK47], Gumilovedek[playerid][fxM4A1],
	Gumilovedek[playerid][fxShotgun], Gumilovedek[playerid][fxDeagle], Gumilovedek[playerid][fxSniper], Gumilovedek[playerid][fxCombat],
	Gumilovedek[playerid][fxColt45], Gumilovedek[playerid][fxSilencedColt45], Gumilovedek[playerid][fxRifle]);
	
	sql_get_str(154, _tmpString);
	sscanf(_tmpString, "p<|>dddds[128]", PlayerInfo[playerid][pMarkLevel], PlayerInfo[playerid][pMarkTriggerTime], PlayerInfo[playerid][pMarkMinPlayers], PlayerInfo[playerid][pMarkMinMarkedPlayers], PlayerInfo[playerid][pMarkReason]);
	
	sql_get_str(155, _tmpString);
	sscanf(_tmpString, "p<,>ddddd", WeaponAdjust[playerid][waID][0], WeaponAdjust[playerid][waID][1],
	WeaponAdjust[playerid][waID][2], WeaponAdjust[playerid][waID][3], WeaponAdjust[playerid][waID][4]);
	
	return 1;
}

fpublic S:OnPlayerLogin(playerid)
{
	// sync off (desync)
	
	Desync[playerid] = 0;

	if(LoginTextDrawCreated[playerid])
		LoginTextDrawCreated[playerid] = false, PlayerTextDrawDestroy(playerid, LoginTextDraw[playerid]);
	if(LoginTextDrawCreated2[playerid])
		LoginTextDrawCreated2[playerid] = false, PlayerTextDrawDestroy(playerid, LoginTextDraw2[playerid]);
	
	if(!IsPlayerNPC(playerid))
	{
		Iter_Add(Jatekosok, playerid);
		OnlineJatekosok++;
		//EhsegBar[playerid] = CreateProgressBar(548, 27.0, _, _, 0xFF0000FF, 100.0);
		//VizeletBar[playerid] = CreateProgressBar(548, 37.0, _, _, 0xFFFF00FF, 100.0);
	}
	else SendFormatMessage(playerid,COLOR_YELLOW,"[HIBA]A rendszer téged NPC-nek jelölt meg. F8-al készíts képet errõl és jelezd bugok topicba! [hiba: %d]",IsPlayerNPC(playerid));
	
	new tmp2[256];
		
	if(PlayerInfo[playerid][pJailed] == 7) Freeze(playerid, 10000);
	
	if(PlayerInfo[playerid][pMember] == NINCS)
		PlayerInfo[playerid][pMember] = 0;
	if(PlayerInfo[playerid][pLeader] == NINCS)
		PlayerInfo[playerid][pLeader] = 0;
		
	if(PlayerInfo[playerid][pCigiFuggoseg] == 1)
	{
	    Msg(playerid, "Cigi függõ vagy! Nagyon vársz már egy cigire!");
	}

	if(PlayerInfo[playerid][pKotszer] > MAXKOTSZER)
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Nálad %d kötszer volt, a megengedett %d, kötszereid száma átírva.", PlayerInfo[playerid][pKotszer], MAXKOTSZER);
		PlayerInfo[playerid][pKotszer] = MAXKOTSZER;
	}
	
	// Skill bugvédelem
	if(PlayerInfo[playerid][pDetSkill] < 0)
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Detektív skilled %d volt, a minimális 0, így a skilled átírva a minimális értékre!", PlayerInfo[playerid][pDetSkill]);
		PlayerInfo[playerid][pDetSkill] = 0;
	}
	
	if(PlayerInfo[playerid][pLawSkill] < 0)
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Ügyvéd skilled %d volt, a minimális 0, így a skilled átírva a minimális értékre!", PlayerInfo[playerid][pLawSkill]);
		PlayerInfo[playerid][pLawSkill] = 0;
	}
	
	if(PlayerInfo[playerid][pSexSkill] < 0)
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Prosti skilled %d volt, a minimális 0, így a skilled átírva a minimális értékre!", PlayerInfo[playerid][pSexSkill]);
		PlayerInfo[playerid][pSexSkill] = 0;
	}
	
	if(PlayerInfo[playerid][pDrugsSkill] < 0)
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Drogdíler skilled %d volt, a minimális 0, így a skilled átírva a minimális értékre!", PlayerInfo[playerid][pDrugsSkill]);
		PlayerInfo[playerid][pDrugsSkill] = 0;
	}
	
	if(PlayerInfo[playerid][pJackSkill] < 0)
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Autótolvaj skilled %d volt, a minimális 0, így a skilled átírva a minimális értékre!", PlayerInfo[playerid][pJackSkill]);
		PlayerInfo[playerid][pJackSkill] = 0;
	}
	
	if(PlayerInfo[playerid][pNewsSkill] < 0)
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Riporter skilled %d volt, a minimális 0, így a skilled átírva a minimális értékre!", PlayerInfo[playerid][pNewsSkill]);
		PlayerInfo[playerid][pNewsSkill] = 0;
	}
	
	if(PlayerInfo[playerid][pMechSkill] < 0)
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Szerelõ skilled %d volt, a minimális 0, így a skilled átírva a minimális értékre!", PlayerInfo[playerid][pMechSkill]);
		PlayerInfo[playerid][pMechSkill] = 0;
	}
	
	if(PlayerInfo[playerid][pCarSkill] < 0)
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Autókereskedõ skilled %d volt, a minimális 0, így a skilled átírva a minimális értékre!", PlayerInfo[playerid][pCarSkill]);
		PlayerInfo[playerid][pCarSkill] = 0;
	}
	
	if(PlayerInfo[playerid][pBetoroSkill] < 0)
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Betörõ skilled %d volt, a minimális 0, így a skilled átírva a minimális értékre!", PlayerInfo[playerid][pBetoroSkill]);
		PlayerInfo[playerid][pBetoroSkill] = 0;
	}
	
	if(PlayerInfo[playerid][pFishSkill] < 0)
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Horgász skilled %d volt, a minimális 0, így a skilled átírva a minimális értékre!", PlayerInfo[playerid][pFishSkill]);
		PlayerInfo[playerid][pFishSkill] = 0;
	}
	
	if(PlayerInfo[playerid][pHackingSkill] < 0)
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "* Hacker skilled %d volt, a minimális 0, így a skilled átírva a minimális értékre!", PlayerInfo[playerid][pMechSkill]);
		PlayerInfo[playerid][pHackingSkill] = 0;
	}
	
	if(PlayerInfo[playerid][pSex] < 1 || PlayerInfo[playerid][pSex] > 2)
		SendClientMessage(playerid, COLOR_LIGHTRED, "* Ismeretlen értékû nemet kaptál, kérlek jelezd ezt egy fõadminnak, hogy beállíthassa azt a nemet, amit szeretnél!");
	
	if(UnixTime >= 1393631999 && PlayerInfo[playerid][pAjandek] > 0)
		PlayerInfo[playerid][pAjandek] = NINCS, Msg(playerid, "* Mivel az ajándékodat nem váltottad be 2014.02.28 23:59-ig, ezért az ajándékodat töröltük", false);
		
	if(UnixTime < 1492646399 && PlayerInfo[playerid][phTojas] == NINCS && HusvetiEvent)
	{
		Msg(playerid, "* Kellemes húsvéti ünnepeket kívánunk minden játékosnak!", false);
		Msg(playerid, "* A mai napon egy különleges ajándék vár rád, keresd meg a tojásodat!", false);
		Msg(playerid, "* Ha megtaláltad melyik a te tojásod, a kinyitást követõen megkapod a jutalmad", false);
		Msg(playerid, "* Sok sikert kívánok! (( /húsvét ))", false);
		
		new id;
		
		for(new a = 0; a < MAX_TOJAS; a++)
		{
			if(Tojas[a][tjVan] && !Tojas[a][tjKiosztva])
			{
				id = a;
				break;
			}
		}
		
		Tojas[id][tjKiosztva] = true;
		
		PlayerInfo[playerid][phTojas] = id;
		
	}
	
	if(PlayerInfo[playerid][pPoliceAlosztalyFo] != 0 && PlayerInfo[playerid][pPoliceAlosztalyFo] != NINCS && !LMT(playerid, FRAKCIO_SFPD))
	{
		PlayerInfo[playerid][pPoliceAlosztalyFo] = 0;
		Msg(playerid, "A Police alosztályod nem volt egyenlõ 0-val pedig nem vagy SFPDs, átírva!");
	}
		
	if(PlayerInfo[playerid][pMotorolaj] > 1)
		PlayerInfo[playerid][pMotorolaj] = 0;

	if(PlayerInfo[playerid][pSzerelo] > 0)
		Mechanics++, Mechanikus[playerid] = true;

	if(PlayerInfo[playerid][pLevel] == -999) //autoban
	{
		Ban(playerid);
	}

	if(!MoneyTxtCreated[playerid])
	{
		MoneyTxtCreated[playerid] = 1;
		//MoneyTxt[playerid] = TextDrawCreate(495.000000,80.000000,"00000000Ft"); régi poz
		/*MoneyTxt[playerid] = TextDrawCreate(495.000000,140.000000,"00000000Ft");
		TextDrawAlignment(MoneyTxt[playerid], 0);
		TextDrawBackgroundColor(MoneyTxt[playerid], COLOR_LIGHTBLUE);
		TextDrawFont(MoneyTxt[playerid], 3);
		TextDrawLetterSize(MoneyTxt[playerid], 0.65, 2.9);
		TextDrawColor(MoneyTxt[playerid], COLOR_GreenMoney);
		TextDrawSetOutline(MoneyTxt[playerid], 1);
		TextDrawSetProportional(MoneyTxt[playerid], 1);
		TextDrawUseBox(MoneyTxt[playerid], 1);
		TextDrawBoxColor(MoneyTxt[playerid], 0x000000FF); // 0x000000FF*/
		
		MoneyTxt[playerid] = TextDrawCreate(554.000000, 83.000000,"00000000Ft");
		TextDrawAlignment(MoneyTxt[playerid], 2);
		TextDrawBackgroundColor(MoneyTxt[playerid], 255);
		TextDrawFont(MoneyTxt[playerid], 3);
		TextDrawLetterSize(MoneyTxt[playerid], 0.529998, 2.599993);
		TextDrawColor(MoneyTxt[playerid], COLOR_GreenMoney);
		TextDrawSetOutline(MoneyTxt[playerid], 1);
		TextDrawSetProportional(MoneyTxt[playerid], 1);
		TextDrawUseBox(MoneyTxt[playerid], 0);

	}
	TextDrawShowForPlayer(playerid, MoneyTxt[playerid]);
	CurCol[playerid] = 1;
	Conn[playerid] = 1;

	gPlayerLogged[playerid] = 1;

	// TEMPORARYFIX03d
	SetSpawnInfo(playerid, SPAWNID, PlayerInfo[playerid][pChar],0.0,0.0,0.0,0,0,0,0,0,0,0);
	SpawnPlayer(playerid);

	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);

	if(PlayerInfo[playerid][pSzokesJelzes] > 0)
	{
		foreach(Jatekosok, x)
		{
			if(IsACop(x)) SetPlayerMarkerForPlayer(x, playerid, COLOR_PINK);
		}
	}
	format(tmp2, sizeof(tmp2), "~w~dv~n~~y~%s", ICPlayerName(playerid));

	GameTextForPlayer(playerid, tmp2, 5000, 1);
	//SendClientMessage(playerid, COLOR_YELLOW, motd);
	if(PlayerInfo[playerid][pCrash] == 1)
		SendClientMessage(playerid, COLOR_LIGHTRED, "Az utolsó kilépésedkor kresseltél. Ha szeretnél Crashtelézni: /crashtele (alias /ct)");

	if(!strlen(PlayerInfo[playerid][pKey]))
		SendClientMessage(playerid, COLOR_WHITE, "Figyelmeztetés: Nincs jelszód beállítva. Válts jelszót, vagy bárki beléphet hozzád >> /jelszovaltas");

	new bool:van;

	do
	{
		van = false;
		PlayerInfo[playerid][pBID] = Rand(1000, 9999);
		foreach(Jatekosok, x)
		{
			if(IsPlayerNPC(x) || x == playerid) continue;

			if(PlayerInfo[x][pBID] == PlayerInfo[playerid][pBID])
			{
				van = true;
				break;
			}
		}
	}while(van);

	printf("[%d]%s belepett - UID: %d - CID: %s", playerid, PlayerName(playerid), PlayerInfo[playerid][pBID], PlayerInfo[playerid][pCode]);
	OnPlayerConnectKick(playerid);

	new bekistring[128], ip[20];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(bekistring, sizeof(bekistring), "[IP:%s, ID: %d]%s Belépett - UID: %d - CID: %s", ip, playerid, PlayerName(playerid), PlayerInfo[playerid][pBID], PlayerInfo[playerid][pCode]);
	BeKilepes(bekistring);

	BejelentoFelirat(playerid);
	
	if(IsAS(playerid))
	{
		Channel(playerid, 0, true);
		Msg(playerid, "Mivel Adminsegéd vagy, ezért automatikusan csatlakoztál a 0ás channelre");
	}
	if(Admin(playerid, 1337) || IsTerno(playerid))
	{
		Nevek[playerid] = 1;
		ShowNames(playerid, 1);
		Msg(playerid, "Nevek bekapcsolva!");
	}
	if(PlayerInfo[playerid][pKozmunka] != 0)
	{
		new felirat[80], munka = PlayerInfo[playerid][pKozmunka], text[32];
		text = (munka == MUNKA_UTTISZTITO) ? ("Úttisztító") : ("Fûnyíró");
		format(felirat, 80, "Közmunkás\n%s", text);
		if(!IsValidDynamic3DTextLabel(KozmunkasFelirat[playerid]))
			KozmunkasFelirat[playerid] = CreateDynamic3DTextLabel(felirat, 0x640000FF, 0.0, 0.0, 0.35, 25.0, playerid, INVALID_VEHICLE_ID);
	}
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		new felirat[80]; format(felirat, 80, "[KEZDÕ]\nLVL: %d",PlayerInfo[playerid][pLevel]);
		if(!IsValidDynamic3DTextLabel(KisLVL[playerid]))
			KisLVL[playerid] = CreateDynamic3DTextLabel(felirat, 0x63FF60FF, 0.0, 0.0, 0.5, 40.0, playerid, INVALID_VEHICLE_ID);
		KisLVLFelirat[playerid] = true;
		
		if(!IsValidDynamic3DTextLabel(FekvorendorText[playerid][0]))
			FekvorendorText[playerid][0] = CreateDynamic3DTextLabel("VIGYÁZZ! FEKVÕRENDÕR!", COLOR_LIGHTRED, 1517.7975,-1732.3041,13.4519, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, -1, playerid);
		
		if(!IsValidDynamic3DTextLabel(FekvorendorText[playerid][1]))
			FekvorendorText[playerid][1] = CreateDynamic3DTextLabel("VIGYÁZZ! FEKVÕRENDÕR!", COLOR_LIGHTRED, 1441.7838,-1732.2639,13.4699, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, -1, playerid);
		
		if(!IsValidDynamic3DTextLabel(FekvorendorText[playerid][2]))
			FekvorendorText[playerid][2] = CreateDynamic3DTextLabel("VIGYÁZZ! FEKVÕRENDÕR!", COLOR_LIGHTRED, 1201.0139,-1304.3842,13.4637, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, -1, playerid);
		
		if(!IsValidDynamic3DTextLabel(FekvorendorText[playerid][3]))
			FekvorendorText[playerid][3] = CreateDynamic3DTextLabel("VIGYÁZZ! FEKVÕRENDÕR!", COLOR_LIGHTRED, 1200.9448,-1357.6608,13.4555, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, -1, playerid);
	}
	
	AdjustPlayerWeapons(playerid, WEAPON_AK47, WeaponAdjust[playerid][waID][0]);
	AdjustPlayerWeapons(playerid, WEAPON_DEAGLE, WeaponAdjust[playerid][waID][1]);
	AdjustPlayerWeapons(playerid, WEAPON_MP5, WeaponAdjust[playerid][waID][2]);
	AdjustPlayerWeapons(playerid, WEAPON_SNIPER, WeaponAdjust[playerid][waID][3]);
	AdjustPlayerWeapons(playerid, WEAPON_SHOTGUN, WeaponAdjust[playerid][waID][4]);
	
	//M4/Ak47
	if(WeaponAdjust[playerid][waOffSetX][0] == 0.0 && WeaponAdjust[playerid][waOffSetY][0] == 0.0 && WeaponAdjust[playerid][waOffSetZ][0] == 0.0)
	{
	
		WeaponAdjust[playerid][waBone][0] = BONE_SPINE;
		
		WeaponAdjust[playerid][waOffSetX][0] = 0.264999;
		WeaponAdjust[playerid][waOffSetY][0] = -0.151998;
		WeaponAdjust[playerid][waOffSetZ][0] = 0.059999;
		
		WeaponAdjust[playerid][waRotSetX][0] = -3.700001;
		WeaponAdjust[playerid][waRotSetY][0] = 169.999908;
		WeaponAdjust[playerid][waRotSetZ][0] = 4.299993;
		
		WeaponAdjust[playerid][waScaleSetX][0] = 1.0;
		WeaponAdjust[playerid][waScaleSetY][0] = 1.0;
		WeaponAdjust[playerid][waScaleSetZ][0] = 1.0;
		
		WeaponAdjust[playerid][waBone][0] = 0;
	}
	
	//Pisztoly
	if(WeaponAdjust[playerid][waOffSetX][1] == 0.0 && WeaponAdjust[playerid][waOffSetY][1] == 0.0 && WeaponAdjust[playerid][waOffSetZ][1] == 0.0)
	{
	
		WeaponAdjust[playerid][waBone][1] = BONE_LEFT_THIGHT;
		
		WeaponAdjust[playerid][waOffSetX][1] = -0.133000;
		WeaponAdjust[playerid][waOffSetY][1] = -0.046999;
		WeaponAdjust[playerid][waOffSetZ][1] = -0.171998;
		
		WeaponAdjust[playerid][waRotSetX][1] = -67.500053;
		WeaponAdjust[playerid][waRotSetY][1] = 2.100000;
		WeaponAdjust[playerid][waRotSetZ][1] = 2.099999;
		
		WeaponAdjust[playerid][waScaleSetX][1] = 1.0;
		WeaponAdjust[playerid][waScaleSetY][1] = 1.0;
		WeaponAdjust[playerid][waScaleSetZ][1] = 1.0;
		
		WeaponAdjust[playerid][waBone][1] = 0;
	}
	
	//MP5
	if(WeaponAdjust[playerid][waOffSetX][2] == 0.0 && WeaponAdjust[playerid][waOffSetY][2] == 0.0 && WeaponAdjust[playerid][waOffSetZ][2] == 0.0)
	{
	
		WeaponAdjust[playerid][waBone][2] = BONE_RIGHT_THIGHT;
		
		WeaponAdjust[playerid][waOffSetX][2] = 0.000000;
		WeaponAdjust[playerid][waOffSetY][2] = -0.119000;
		WeaponAdjust[playerid][waOffSetZ][2] = 0.174998;
		
		WeaponAdjust[playerid][waRotSetX][2] = -93.099990;
		WeaponAdjust[playerid][waRotSetY][2] = 0.000000;
		WeaponAdjust[playerid][waRotSetZ][2] = 6.799998;
		
		WeaponAdjust[playerid][waScaleSetX][2] = 1.0;
		WeaponAdjust[playerid][waScaleSetY][2] = 1.0;
		WeaponAdjust[playerid][waScaleSetZ][2] = 1.0;
		
		WeaponAdjust[playerid][waBone][2] = 0;
	}
	
	//Sniper
	if(WeaponAdjust[playerid][waOffSetX][3] == 0.0 && WeaponAdjust[playerid][waOffSetY][3] == 0.0 && WeaponAdjust[playerid][waOffSetZ][3] == 0.0)
	{
	
		WeaponAdjust[playerid][waBone][3] = BONE_SPINE;
		
		WeaponAdjust[playerid][waOffSetX][3] = 0.232999;
		WeaponAdjust[playerid][waOffSetY][3] = -0.162999;
		WeaponAdjust[playerid][waOffSetZ][3] = -0.076999;
		
		WeaponAdjust[playerid][waRotSetX][3] = -7.199835;
		WeaponAdjust[playerid][waRotSetY][3] = 14.199996;
		WeaponAdjust[playerid][waRotSetZ][3] = -169.800003;
		
		WeaponAdjust[playerid][waScaleSetX][3] = 1.0;
		WeaponAdjust[playerid][waScaleSetY][3] = 1.0;
		WeaponAdjust[playerid][waScaleSetZ][3] = 1.0;
		
		WeaponAdjust[playerid][waBone][3] = 0;
	}
	
	//Shotgun
	if(WeaponAdjust[playerid][waOffSetX][4] == 0.0 && WeaponAdjust[playerid][waOffSetY][4] == 0.0 && WeaponAdjust[playerid][waOffSetZ][4] == 0.0)
	{
	
		WeaponAdjust[playerid][waBone][4] = BONE_SPINE;
		
		WeaponAdjust[playerid][waOffSetX][4] = -0.089997;
		WeaponAdjust[playerid][waOffSetY][4] = -0.228999;
		WeaponAdjust[playerid][waOffSetZ][4] = 0.069999;
		
		WeaponAdjust[playerid][waRotSetX][4] = 0.000000;
		WeaponAdjust[playerid][waRotSetY][4] = 161.199935;
		WeaponAdjust[playerid][waRotSetZ][4] = 16.000001;
		
		WeaponAdjust[playerid][waScaleSetX][4] = 1.0;
		WeaponAdjust[playerid][waScaleSetY][4] = 1.0;
		WeaponAdjust[playerid][waScaleSetZ][4] = 1.0;
		
		WeaponAdjust[playerid][waBone][4] = 0;
	}
	
	
	if((Admin(playerid, 5555) || IsScripter(playerid)) && !IsTerno(playerid))
	{
		Channel(playerid, 3, true);
		Msg(playerid, "Automatikusan be lettél rakva a Scripter csennelre");
	}
	if(Admin(playerid, 1337) && !Admin(playerid, 5555))
	{
		Channel(playerid, 2, true);
		Msg(playerid, "Automatikusan be lettél rakva a FõAdmin csennelre");
	}
	else if(Admin(playerid, 1) && !Admin(playerid, 5555) && !IsScripter(playerid))
	{
		Channel(playerid, 1, true);
		Msg(playerid, "Automatikusan be lettél rakva az Admin csennelre");
	}
	if(Animban[playerid] == 1)
	{
	    //printf("OnPlayerLogin | Animban | Meghivodott | Nev: %s", PlayerName(playerid));
		TogglePlayerControllable(playerid, true);
		ClearAnimations(playerid);
		SetHealth(playerid, 150.0);
		Animban[playerid] = 0;
	}


	//new codeEncrypted[64];
	//mysql_escape_string(PlayerInfo[playerid][pCode], codeEncrypted, _, 64);
    new query[300];//string megnövelve
	format(query, 300, "UPDATE %s SET Online='1' WHERE id='%d'", SQL_DB_Player, PlayerSQLID(playerid)); doQuery( query );
	format(query, 300, "INSERT INTO %s (UID, BID, Nev, IP, Code, Ido) VALUES('%d', '%d', '%s', '%s', '%s', '%d')", SQL_DB_Connect, SQLID(playerid), PlayerInfo[playerid][pBID], Nev(playerid), IP(playerid), PlayerInfo[playerid][pCode], UnixTime); doQuery( query );

	if(LMT(playerid, FRAKCIO_TUZOLTO))
	{
		Tuzoltok++;
		Tuzolto[playerid] = true;
	}

	CorrectPlayerDatas(playerid);
	DateProp(playerid, DP_Haz);
	DateProp(playerid, DP_Kocsi);
	DateProp(playerid, DP_Garazs);

	StatInfo[playerid][pRIdo] = UnixTime, StatMentes(playerid, true);

	for(new c = 0; c < sizeof(IRCInfo); c++)
	{
		if(IRCInfo[c][iAdminID] == SQLID(playerid))
			strmid(IRCInfo[c][iAdmin], PlayerName(playerid), 0, strlen(PlayerName(playerid)), MAX_PLAYER_NAME);
	}

	if(PlayerInfo[playerid][pAdmin] > 6 && PlayerInfo[playerid][pAdmin] < 1337)
		PlayerInfo[playerid][pAdmin] = 5;
	else if(PlayerInfo[playerid][pAdmin] < 0)
		PlayerInfo[playerid][pAdmin] = 0;

	PlayerInfo[playerid][pMostlepetbeTime] = UnixTime+120;
	Gyemantjai[playerid] = Gyemantok(playerid);

	//Item(playerid, T_LOAD);
	PiacAkcio(P_LOAD, P_ALL);
	
	
	//ide
	if(SzerverResiCounter > 0 || SzerverResiigCounter > 0)
		TextDrawShowForPlayer(playerid,resiszerver);
	
	TextDrawShowForPlayer(playerid,resitd);
	
	if(ResiCounter != NINCS || CarRespawnSzamlalo != NINCS)
		TextDrawHideForPlayer(playerid,resitd);	
	


	if(PlayerInfo[playerid][pAdminUzenet] == 1)	
		ShowPlayerDialog(playerid,DIALOG_ADMIN_UZENET, DIALOG_STYLE_MSGBOX, "Admin üzenet", PlayerInfo[playerid][pAdminUzenetOk], "Rendben", "Kilép");

	if(PlayerInfo[playerid][pFrissitesUzenetVan] == 1)
	{
			format(PlayerInfo[playerid][pFrissitesUzenet], 500, "%s", str_replace("\\n", "\n", PlayerInfo[playerid][pFrissitesUzenet]));
			ShowPlayerDialog(playerid,DIALOG_FRISSITES_UZENET, DIALOG_STYLE_MSGBOX, "Frissítés üzenet", PlayerInfo[playerid][pFrissitesUzenet], "Rendben", "");	
	}
	if(IsAllTerno(playerid) || IsAllDenaro(playerid))
		Tvenged[playerid] = true;
		
	AdminNevek(playerid);	
	
	BelepveFake[playerid] = true;
	
	//piac kifizetése
	for(new id=0; id < 5; id++)
	{
		for(new p = 0; p < MAX_PIAC_CUCC; p++)
		{
			if(Piac[id][p][pFeladta] == PlayerInfo[playerid][pID] && Piac[id][p][pEladva]>0)
			{
				new eladara;
				eladara = Piac[id][p][pEladva] * (floatround(Piac[id][p][pAra]/1.2));
				new string[32];
				if(P_KI_KOKAIN == id) format(string,32,"db KOKAIN-dat");
				if(P_KI_HEROIN == id) format(string,32,"db HEROIN-dat");
				if(P_KI_MARIHUANA == id) format(string,32,"db MARIHUANA-dat");
				if(P_KI_MATERIAL == id) format(string,32,"db MATERIAL-odat");
				
				SendFormatMessage(playerid,COLOR_YELLOW,"A piacon megvették %d db %s, Ezért postán át kaptál %s Ft-ot!",Piac[id][p][pEladva],string,FormatNumber( eladara, 0, ',' ));
				GiveMoney(playerid,eladara);
				Piac[id][p][pEladva]=0;
				PiacAkcio(P_SAVE, id);
			}
		}
	}
	for(new slot;slot < MAX_KERESKEDO; slot++)
	{
		if(KeredkedoVetel[slot][kUID] != NINCS)
		{
			if(KeredkedoVetel[slot][kUID]== PlayerInfo[playerid][pID])
			{
				SendFormatMessage(playerid, COLOR_YELLOW,"Megvették a %s-edet %s Ft-ért!",KeredkedoVetel[slot][kKOCSI],FormatInt(KeredkedoVetel[slot][kAra]));
				PlayerInfo[playerid][pAccount] +=KeredkedoVetel[slot][kAra];
				
				new vetellog[256];
				format(vetellog, 256, "[/v vásárol] - %s megkapta az utalást utolag nem volt online %s Ft. Kocsi: %s",PlayerName(playerid),FormatInt(KeredkedoVetel[slot][kAra]),KeredkedoVetel[slot][kKOCSI]);
				EgyebLog(vetellog);
				
				KeredkedoVetel[slot][kUID] = NINCS;
				KeredkedoVetel[slot][kAra] = NINCS;
				
				
				SaveKereskedo();
			}
		}

	}
	
	if(PlayerInfo[playerid][pMegfigyelve])
	{
		new megfigyelve[128];
		format(megfigyelve, sizeof(megfigyelve), "<< MEGFIGYELÉS: %s fellépett a szerverre, meg lett figyelve a következõ indok miatt: >>", PlayerName(playerid));
		SendMessage(SEND_MESSAGE_ADMIN, megfigyelve, COLOR_RED, 1);
		format(megfigyelve, sizeof(megfigyelve), "<< MEGFIGYELÉS: %s >>", PlayerInfo[playerid][pMegfigyelveOK]);
		SendMessage(SEND_MESSAGE_ADMIN, megfigyelve, COLOR_RED, 1);
		format(megfigyelve, sizeof(megfigyelve), "<< MEGFIGYELÉS: A fent említett okra erre a játékosra fokozottan figyeljetek! ID: %d >>", playerid);
		SendMessage(SEND_MESSAGE_ADMIN, megfigyelve, COLOR_RED, 1);
	}
	
	if(BankSFNPC == playerid)
		BankSFNPC = NINCS;
	else if(BankNPC == playerid)
		BankNPC = NINCS;
	

	if(ForaglomFigyelmezteto[playerid] > 25 && Bortonben(playerid) == 0)
	{
		new szoveg[64];
		format(szoveg, sizeof(szoveg),"Forgalommal szembeni közlekedés %d alkalommal! %d perc büntetés!",ForaglomFigyelmezteto[playerid],ForaglomFigyelmezteto[playerid]*2);
		SendClientMessage(playerid,COLOR_LIGHTRED,szoveg);
		Jail(playerid, "+", ForaglomFigyelmezteto[playerid]*2*60, "ajail", szoveg);
		ForaglomFigyelmezteto[playerid] = 0;
	}
	
	for(new k = 0; k < MAX_MUNKAKOCSI; k++)
	{
		if(MunkaKocsi[MUNKA_BEREL1][k][kBerelido] > UnixTime && MunkaKocsi[MUNKA_BEREL1][k][kBerel] == PlayerInfo[playerid][pID])
			HireCar[playerid] = MunkaKocsi[MUNKA_BEREL1][k][kID];
		
		if(MunkaKocsi[MUNKA_BEREL2][k][kBerelido] > UnixTime && MunkaKocsi[MUNKA_BEREL2][k][kBerel] == PlayerInfo[playerid][pID])
			HireCar[playerid] = MunkaKocsi[MUNKA_BEREL2][k][kID];
			
		if(MunkaKocsi[MUNKA_BEREL3][k][kBerelido] > UnixTime && MunkaKocsi[MUNKA_BEREL3][k][kBerel] == PlayerInfo[playerid][pID])
			HireCar[playerid] = MunkaKocsi[MUNKA_BEREL3][k][kID];
	}

	if(IsValidDynamic3DTextLabel(Elajult[playerid])) DestroyDynamic3DTextLabel(Elajult[playerid]), Elajult[playerid] = INVALID_3D_TEXT_ID;
	
	if(IsOnkentes(playerid) && !LegalisSzervezetTagja(playerid) && !Civil(playerid))
	{
		Msg(playerid, "Mivel illegális frakcióba tartozol, így az önkéntes mentõs jogodat töröltük");
		PlayerInfo[playerid][pOnkentes] = 0;
		if(Onkentesszolgalatban[playerid])
		{
			if(IsValidDynamic3DTextLabel(Onkentestext[playerid])) DestroyDynamic3DTextLabel(Onkentestext[playerid]), Onkentestext[playerid] = INVALID_3D_TEXT_ID;
			Onkentesszolgalatban[playerid] = false;
			Medics--;
			Munkaruha(playerid, 0);
		}
	}
	
	PlayerInfo[playerid][pTextDrawKeseltet]=10;
	
	
	if(GetPlayerVirtualWorld(playerid) == 55555)
		Tele(playerid,-2110.9934,-444.3106,38.7344,false,0,0);
		
	AfterLoginTime[playerid] = UnixTime+30;
		
	//ajándék
	//vette-e már átt ajándékot
	/*
	if(PlayerInfo[playerid][pAjandekUnixtime] < 1)
	{
		for(new a=0; a < MAX_GIFTS; a++)
		{
			if(Gift[a][gVan] && Gift[a][gTulajUid] == NINCS)
			{
				Gift[a][gTulajUid] = PlayerInfo[playerid][pBID];
				Msg(playerid, "Vár rád egy ajándék Los Santos reptéren a karácsonyfa körül! Keresd meg melyik a tied! (/ajándék)");
				if(IsScripter(playerid))
					SendFormatMessage(playerid,COLOR_YELLOW,"id: %d",a);
					
				break;
			}

		}
	}*/
	
	FrakcioFelhivas(playerid);
	UnFreeze(playerid);
	CallOnPlayerLoginComplete(playerid);
	return 1;
}

fpublic OnPlayerLoginComplete(playerid)
{
	return 1;
}

stock ini_GetKey( line[] )
{
	new keyRes[256];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}

fpublic OnIntsUpdate()
{
	new idx = ALAPINTERIORSZAM;
	new File: file2;
	new ennyi = IntekSzama();
	while (idx <= ennyi)
	{
		new coordsstring[1024];
		format(
			coordsstring, sizeof(coordsstring), "%s,%d,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",
			IntInfo[idx][iType],
			IntInfo[idx][iNumber],
			IntInfo[idx][iExitX],
			IntInfo[idx][iExitY],
			IntInfo[idx][iExitZ],
			IntInfo[idx][iBedX],
			IntInfo[idx][iBedY],
			IntInfo[idx][iBedZ],
			IntInfo[idx][iBedAngle],
			ArrExt(IntInfo[idx][iCamStartPos]),
			ArrExt(IntInfo[idx][iCamStartLookAt]),
			ArrExt(IntInfo[idx][iCamEndPos]),
			ArrExt(IntInfo[idx][iCamEndLookAt])
		);
		
		if(idx == ALAPINTERIORSZAM)
		{
			file2 = fopen("Config/interiors.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/interiors.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

fpublic OnIgenyUpdate()
{
	new idx;
	new File: file2;
	//new hazak = 0, szamlalo;

/*	for(szamlalo = idx; szamlalo < MAXHAZ; szamlalo++)
	{
	    if(HouseInfo[szamlalo][Van] == 1)
	        hazak++;
	}*/

	while (idx < MAXIGENYLES)
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s,%d,%f,%f,%f\n",
		HazIgenylesek[idx][Nev],
		HazIgenylesek[idx][Belso],
		HazIgenylesek[idx][iX],
		HazIgenylesek[idx][iY],
		HazIgenylesek[idx][iZ]);
		if(idx == 0)
		{
			file2 = fopen("Config/hazigenylesek.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/hazigenylesek.cfg", io_append);
		}

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

fpublic OnAjtoUpdate()
{
	new idx;
	new File: file2;

	while (idx < MAXAJTO)
	{
		new coordsstring[300];
		format(coordsstring, sizeof(coordsstring), "%s,%f,%f,%f,%d,%d,%f,%f,%f,%d,%d,%d,%d,%d,%f,%f\n",
		Ajtok[idx][Nev],
		Ajtok[idx][BeX],
		Ajtok[idx][BeY],
		Ajtok[idx][BeZ],
		Ajtok[idx][BeInt],
		Ajtok[idx][BeVW],
		Ajtok[idx][KiX],
		Ajtok[idx][KiY],
		Ajtok[idx][KiZ],
		Ajtok[idx][KiInt],
		Ajtok[idx][KiVW],
		Ajtok[idx][Zarva],
		Ajtok[idx][Freezel],
		Ajtok[idx][Kocsi],
		Ajtok[idx][BeAngle],
		Ajtok[idx][KiAngle]);
		if(idx == 0)
		{
			file2 = fopen("Config/ajtok.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/ajtok.cfg", io_append);
		}

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

stock IsFrakcioKocsi(kocsi)
{
	for(new f = 1; f < MAX_FRAKCIO; f++)
	{
		for(new k = 0; k < MAX_FRAKCIOKOCSI; k++)
		{
			if(FrakcioKocsi[f][k][fVan] && FrakcioKocsi[f][k][fID] == kocsi)
				return f;
		}
	}
	
	return NINCS;
}

stock IsMunkaKocsi(kocsi)
{
	for(new f = 0; f < MAX_MUNKA; f++)
	{
		for(new k = 0; k < MAX_MUNKAKOCSI; k++)
		{
			if(MunkaKocsi[f][k][kVan] && MunkaKocsi[f][k][kID] == kocsi)
			{
				return f;
			}
		}
	}
	return NINCS;
}
stock MunkaKocsiID(kocsi, munka)
{
	for(new k = 0; k < MAX_MUNKAKOCSI; k++)
	{
		if(MunkaKocsi[munka][k][kVan] && MunkaKocsi[munka][k][kID] == kocsi)
		{
			return k;
		}
	}
	return NINCS;
}

stock FrakcioKocsiID(kocsi, frakcio)
{
	for(new k = 0; k < MAX_FRAKCIOKOCSI; k++)
	{
		if(FrakcioKocsi[frakcio][k][fVan] && FrakcioKocsi[frakcio][k][fID] == kocsi)
			return k;
	}
	
	return NINCS;
}

stock MunkaKocsiMentes(m = NINCS, k = NINCS)
{
	if(0 <= m < MAX_MUNKA)
	{
		if(0 <= k < MAX_MUNKAKOCSI)
		{
			format(_tmpString, 128, "Config/MunkaKocsi/%d_%d.car", m, k);
			
			if(MunkaKocsi[m][k][kVan])
			{
				new INI:ini = INI_Open(_tmpString);
				
				INI_WriteInt(ini, "Model", MunkaKocsi[m][k][kModel]);
				
				format(_tmpString, 128, "%f,%f,%f,%f,%d,%d", ArrExt4(MunkaKocsi[m][k][kPos]), MunkaKocsi[m][k][kVW], MunkaKocsi[m][k][kInt]);
				INI_WriteString(ini, "Pos", _tmpString);
				
				format(_tmpString, 32, "%d,%d", ArrExt2(MunkaKocsi[m][k][kSzin]));
				INI_WriteString(ini, "Szin", _tmpString);
				
				INI_WriteInt(ini, "Berel", MunkaKocsi[m][k][kBerel]);
				INI_WriteInt(ini, "Berelido", MunkaKocsi[m][k][kBerelido]);
				
				INI_Close(ini);
			}
			else if(fexist(_tmpString))
				fremove(_tmpString);
		}
		else for(k = 0; k < MAX_MUNKAKOCSI; k++)
			MunkaKocsiMentes(m, k);
	}
	else for(m = 0; m < MAX_MUNKA; m++)
		MunkaKocsiMentes(m, k);
	
	return 1;
}

fpublic INI_Load_MunkaKocsi(m, k, name[], value[])
{
	INI_Int("Model", MunkaKocsi[m][k][kModel]);

	if(egyezik(name, "Pos"))
		return sscanf(value, "p<,>ffffdd", ArrExt4(MunkaKocsi[m][k][kPos]), MunkaKocsi[m][k][kVW], MunkaKocsi[m][k][kInt]), 1;
	
	if(egyezik(name, "Szin"))
		return sscanf(value, "p<,>dd", ArrExt2(MunkaKocsi[m][k][kSzin]));
		
	INI_Int("Berel", MunkaKocsi[m][k][kBerel]);
	INI_Int("Berelido", MunkaKocsi[m][k][kBerelido]);
	return 1;
}

stock MunkaKocsiBetoltes()
{
	for(new m = 0; m < MAX_MUNKA; m++)
	{
		new id = 0;
		for(new k = 0; k < MAX_MUNKAKOCSI; k++)
		{
			format(_tmpString, 128, "Config/MunkaKocsi/%d_%d.car", m, k);
			
			if(fexist(_tmpString))
			{
				//printf("Munkakocsi betoltese... munka: %d, kocsi: %d", m, id);
				INI_ParseFile(_tmpString, "INI_Load_MunkaKocsi", 2, m, id);
				
				if(MunkaKocsi[m][id][kModel])
				{
					//printf("Munkakocsi betoltve... munka: %d, kocsi: %d", m, id);
					MunkaKocsi[m][id][kVan] = true;
					
					MunkaKocsi[m][id][kID] =
						UjKocsi(MunkaKocsi[m][id][kModel], ArrExt4(MunkaKocsi[m][id][kPos]), ArrExt2(MunkaKocsi[m][id][kSzin]), MunkaKocsi[m][id][kInt], MunkaKocsi[m][id][kVW], CAR_TYPE_MK, m, id);
					//printf("munka %d",m);
					id++;
				}
			}
		}
	}
}

stock FrakcioKocsiMentes(f = NINCS, k = NINCS)
{
	if(1 <= f < MAX_FRAKCIO)
	{
		if(0 <= k < MAX_FRAKCIOKOCSI)
		{
			format(_tmpString, 128, "Config/FrakcioKocsi/%d_%d.car", f, k);
			
			if(FrakcioKocsi[f][k][fVan])
			{
				new INI:ini = INI_Open(_tmpString);
				
				INI_WriteInt(ini, "Model", FrakcioKocsi[f][k][fModel]);
				
				format(_tmpString, 128, "%f,%f,%f,%f,%d,%d", ArrExt4(FrakcioKocsi[f][k][fPos]), FrakcioKocsi[f][k][fVW], FrakcioKocsi[f][k][fInt]);
				INI_WriteString(ini, "Pos", _tmpString);
				
				format(_tmpString, 32, "%d,%d", ArrExt2(FrakcioKocsi[f][k][fSzin]));
				INI_WriteString(ini, "Szin", _tmpString);
				
				INI_WriteInt(ini, "Rang", FrakcioKocsi[f][k][fRang]);
				INI_WriteInt(ini, "Matrica", FrakcioKocsi[f][k][fMatrica]);
				INI_WriteInt(ini, "Kasztni", FrakcioKocsi[f][k][fKasztni]);
				INI_WriteInt(ini, "Kerek", FrakcioKocsi[f][k][fKerek]);
				INI_WriteInt(ini, "Hidraulika", FrakcioKocsi[f][k][fHidraulika]);
				INI_WriteFloat(ini, "KM", KmSzamol[ FrakcioKocsi[f][k][fID] ]);
				INI_WriteFloat(ini, "Olaj", CarPart[ FrakcioKocsi[f][k][fID] ][cMotorolaj]);
				INI_WriteFloat(ini, "Gumi", CarPart[ FrakcioKocsi[f][k][fID] ][cKerekek]);
				//INI_WriteFloat(ini, "Allapot", KocsiAllapot[ FrakcioKocsi[f][k][fID] ]); CarPart
				
				INI_Close(ini);
			}
			else if(fexist(_tmpString))
				fremove(_tmpString);
		}
		else for(k = 0; k < MAX_FRAKCIOKOCSI; k++)
			FrakcioKocsiMentes(f, k);
	}
	else for(f = 1; f < MAX_FRAKCIO; f++)
		FrakcioKocsiMentes(f, k);
}

fpublic INI_Load_FrakcioKocsi(f, k, name[], value[])
{
	INI_Int("Model", FrakcioKocsi[f][k][fModel]);
	INI_Custom("Pos", "p<,>ffffdd", ArrExt4(FrakcioKocsi[f][k][fPos]), FrakcioKocsi[f][k][fVW], FrakcioKocsi[f][k][fInt]);
	INI_Custom("Szin", "p<,>dd", ArrExt2(FrakcioKocsi[f][k][fSzin]));
	INI_Int("Rang", FrakcioKocsi[f][k][fRang]);
	INI_Int("Matrica", FrakcioKocsi[f][k][fMatrica]);
	INI_Int("Kasztni", FrakcioKocsi[f][k][fKasztni]);
	INI_Int("Kerek", FrakcioKocsi[f][k][fKerek]);
	INI_Int("Hidraulika", FrakcioKocsi[f][k][fHidraulika]);

	
	INI_Float("KM", FrakcioKocsi[f][k][fKm]);
	INI_Float("Olaj", FrakcioKocsi[f][k][fOlaj]);
	INI_Float("Gumi", FrakcioKocsi[f][k][fGumi]);
	

	return 1;
}

stock FrakcioKocsiBetoltes()
{
	for(new f = 1; f < MAX_FRAKCIO; f++)
	{
		new id = 0;
		for(new k = 0; k < MAX_FRAKCIOKOCSI; k++)
		{
			format(_tmpString, 128, "Config/FrakcioKocsi/%d_%d.car", f, k);
			
			if(fexist(_tmpString))
			{
				//printf("Frakciokocsi betoltese... frakcio: %d, kocsi: %d", f, id);
				INI_ParseFile(_tmpString, "INI_Load_FrakcioKocsi", 2, f, id);
				
				if(FrakcioKocsi[f][id][fModel])
				{
				
					FrakcioKocsi[f][id][fVan] = true;
					
					FrakcioKocsi[f][id][fID] = 
						UjKocsi(FrakcioKocsi[f][id][fModel], ArrExt4(FrakcioKocsi[f][id][fPos]), ArrExt2(FrakcioKocsi[f][id][fSzin]), FrakcioKocsi[f][id][fInt],FrakcioKocsi[f][id][fVW], CAR_TYPE_FK, f, id);
					
					if(FrakcioKocsi[f][id][fID])
						FrakcioJarmuTuning(FrakcioKocsi[f][id][fID], f, k);
			
						
					KmSzamol[ FrakcioKocsi[f][id][fID] ] = FrakcioKocsi[f][id][fKm];
					CarPart[FrakcioKocsi[f][id][fID] ][cMotorolaj] = FrakcioKocsi[f][id][fOlaj];
					CarPart[ FrakcioKocsi[f][id][fID] ][cKerekek]= FrakcioKocsi[f][id][fGumi];
					
					id++;
				}
			}
		}
	}
}

stock LoadArak( bool: preQuery = true )
{
	if( preQuery )
	{
		format( _tmpString, 128, "SELECT Model, Ara, Hasznalo FROM %s", SQL_DB_Arak);
		doQuery( _tmpString, SQL_LOAD_CARPRICE );
		return 1;
	}

	new rows, fields, row, model;
	sql_data(rows, fields);
	
	while( row < rows )
	{
		model = sql_get_row_int(row, 0);
		if( 400 <= model <= 611 )
		{
			model -= 400;

			JarmuAra[model][jAra] = sql_get_row_int(row, 1);

			sql_get_row_str(row, 2, _tmpString);
			sscanf(_tmpString, "p<,>A<i>(-1)["#MAX_FRAKCIO"]", JarmuAra[model][jFrakciok]);
			
			//JarmuAra[model][jAdmin] = lefejlesztése... JarmuAra átnevezése pl. JarmuModelInfo-ra ?
			
			JarmuAra[model][jVeheto] = (JarmuAra[model][jFrakciok][0] != -1 && JarmuAra[model][jAra] > 0);
		}
		
		row++;
	}
	print("=====ÁRAK BETÖLTVE======");
	KocsiLopasListaGenerator();
	return 1;
}

stock GetRKARang(playerid)
{
	new rang[32];
	
	switch(PlayerInfo[playerid][pRKARang])
	{
		case 0: rang = "RKA Kommandós";
		case 1: rang = "RKA Altiszt";
		case 2: rang = "RKA Tiszt";
		case 3: rang = "RKA Kiképzõ Tiszt";
		case 4: rang = "RKA AlParancsnok";
		case 5: rang = "RKA Parancsnok";
		default: rang = "RKA Újonc";
	}
	return rang;
}

fpublic SaveSwat()
{
	new szoveg[256];
	new File: file = fopen("Config/swat.cfg", io_write);
	format(szoveg, 256, "%d,%d,%d,%d,%d,%d,%d", swatsilenced, swatdeagle, swatmp5, swatm4, swatshotgun, swatcombat, swatsniper);
	fwrite(file, szoveg);
	fclose(file);
	return 1;
}

fpublic SaveMelleny()
{
	new x, y, szoveg[300];
	new File:file2 = fopen("Config/melleny.cfg", io_write);
	for(x = 1; x < 22; x++)
	{
		format(szoveg, 300, "%d", FrakcioInfo[x][fMelleny][1]);
		for(y = 2; y < 51; y++)
			format(szoveg, 300, "%s,%d", szoveg, FrakcioInfo[x][fMelleny][y]);
		format(szoveg, 300, "%s\n", szoveg);
		fwrite(file2, szoveg);
	}
	fclose(file2);
	return 1;
}

fpublic SavePICKUP()
{
	new idx;
	new File: file2;
	new coordsstring[256];

	while (idx < MAX_PICKUP)
	{
		format(coordsstring, sizeof(coordsstring), "%d,%.2f,%.2f,%.2f,%.2f,%d\n",
			PICKUP[idx][pTipus],
			PICKUP[idx][pPosX],
			PICKUP[idx][pPosY],
			PICKUP[idx][pPosZ],
			PICKUP[idx][pPosA],
			PICKUP[idx][pObjectID]);
		if(idx == 0)
		{
			file2 = fopen("Config/pickup.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/pickup.cfg", io_append);
		}

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}
fpublic SavePARKOLO()
{
	new idx;
	new File: file2;
	new coordsstring[256];

	while (idx < MAX_PARKOLO)
	{
		format(coordsstring, sizeof(coordsstring), "%.2f,%.2f,%.2f,%d\n",
		PARKOLO[idx][parkPosX],
		PARKOLO[idx][parkPosY],
		PARKOLO[idx][parkPosZ],
		PARKOLO[idx][parkTAV]);
		if(idx == 0)
		{
			file2 = fopen("Config/parkolo.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/parkolo.cfg", io_append);
		}

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}
/*public SaveOBJECT()
{
	new idx;
	new File: file2;
	new coordsstring[256];

	while (idx < MAX_OBJECTSZ)
	{
		format(coordsstring, sizeof(coordsstring), "%d,%.2f,%.2f,%.2f,%.2f,%d,%d,%d\n",
		OBJECT[idx][sTipus],
		OBJECT[idx][sPosX],
		OBJECT[idx][sPosY],
		OBJECT[idx][sPosZ],
		OBJECT[idx][sPosA],
		OBJECT[idx][sObjectID],
		OBJECT[idx][sVw],
		OBJECT[idx][sInt]);
		if(idx == 0)
		{
			file2 = fopen("Config/object.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/object.cfg", io_append);
		}

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}*/
fpublic LoadWar()
{
	new adatok[5][128];
	new strFromFile2[256];
	new File: file = fopen("Config/war.cfg", io_read);
	if (file)
	{
	
		fread(file, strFromFile2);
		split(strFromFile2, adatok, ',');
		new i=strval(adatok[4]);
		if(i != 0)
		{
			TeruletInfo[i][tVarakozasIdo] = strval(adatok[0]);
			TeruletInfo[i][tHarcolok][0] = strval(adatok[1]);
			TeruletInfo[i][tHarcolok][1] = strval(adatok[2]);
			TeruletInfo[i][tLofegyver] = strval(adatok[3]);
		
			if(TeruletInfo[i][tVarakozasIdo] < 300)
				TeruletInfo[i][tVarakozasIdo] = 300;
			
			HarcVan = true;
			fclose(file);
			
			new File: file2;
			new coordsstring[3];
			file2 = fopen("Config/war.cfg", io_write);

			fwrite(file2, coordsstring);
			format(coordsstring, sizeof(coordsstring), "0,0,0,0\n");
			fclose(file2);
		}
	}

}
fpublic SaveWar()
{
	new coordsstring[256];
	for(new i = 0; i < MAXTERULET; i++)
	{
		if(TeruletInfo[i][tVarakozasIdo] > 0)
		{
			format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d\n",
			TeruletInfo[i][tVarakozasIdo],
			TeruletInfo[i][tHarcolok][0],
			TeruletInfo[i][tHarcolok][1],
			TeruletInfo[i][tLofegyver],
			i);
		}
	}
	new File: file2;


	file2 = fopen("Config/war.cfg", io_write);
		

	fwrite(file2, coordsstring);
		
	fclose(file2);

	return 1;


}
fpublic SaveKikepzo()
{

	new id;
	new File: file2;
	new coordsstring[256];

	while (id < MAX_KIKEPZO)
	{
		format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d\n",
		Kikepzo[id][kVan],
		Kikepzo[id][kIdo],
		Kikepzo[id][kVw],
		Kikepzo[id][kKod],
		Kikepzo[id][kBelso]
		);
		
						
		if(id == 0)
		{
			file2 = fopen("Config/kikepzo.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/kikepzo.cfg", io_append);
		}

		fwrite(file2, coordsstring);
		id++;
		fclose(file2);
	}
	return 1;


	
}
fpublic SaveAreaforgalom()
{
	new idx;
	new File: file2;
	new coordsstring[256];

	while (idx < MAX_AREA_HELY)
	{
		
		format(coordsstring, sizeof(coordsstring), "%.4f,%.4f,%.4f,%.4f,%.4f,%d\n",
			AreaForgalom[idx][Aangle],
			AreaForgalom[idx][Ax],
			AreaForgalom[idx][Ay],
			AreaForgalom[idx][Az],
			AreaForgalom[idx][As],
			AreaForgalom[idx][AVan]
		);
		if(idx == 0)
		{
			file2 = fopen("Config/forgalom.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/forgalom.cfg", io_append);
		}

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
		
	}
	return 1;
}

stock CodeGen(hanyjegyu = 6)
{
    if(hanyjegyu <= 0) return NINCS;
 
    new returnertek = NINCS;
    new szamok;
    new bool:elso = true;
 
	new returnstring[64];
 
    for(new i = 0; i<sizeof(hanyjegyu); i++)
    {
        szamok = random(9);
 
        if(elso)
        {
            format(returnstring, sizeof(returnstring), "%d", szamok);
            elso = false;
        }
        else format(returnstring, sizeof(returnstring), "%s%d", returnstring, szamok);
 
        returnertek = strval(returnstring);
    }
 
    return returnertek;
}

fpublic SaveRobHelyek()
{
	new idx;
	new File: file2;
	new coordsstring[256];

	while (idx < MAX_BANKROBHELY)
	{											//	1	 2	 3	  4		6	7	 8	 9	10 11 12 13	14 15
		format(coordsstring, sizeof(coordsstring), "%d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%d,%d,%d,%d,%s,%d,%d\n",
		ROBHELY[idx][roLezarva],//1
		ROBHELY[idx][roPosX],//2
		ROBHELY[idx][roPosY],//3
		ROBHELY[idx][roPosZ],//4
		ROBHELY[idx][roPosZX],//5
		ROBHELY[idx][roPosZY],//6
		ROBHELY[idx][roPosA],//7
		ROBHELY[idx][roRobId],//8
		ROBHELY[idx][roVw],//9
		ROBHELY[idx][roInt],//10
		ROBHELY[idx][roLsVagySf],//11
		ROBHELY[idx][roSzefPenz],//12
		ROBHELY[idx][roTulaj],//13
		ROBHELY[idx][roJelszo],//14
		ROBHELY[idx][roBiztonsag]);//15
		if(idx == 0)
		{
			file2 = fopen("Config/robhelyek.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/robhelyek.cfg", io_append);
		}

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

fpublic SaveATM()
{
	new idx;
	new File: file2;
	new coordsstring[256];

	while (idx < MAX_ATM)
	{
		format(coordsstring, sizeof(coordsstring), "%.2f,%.2f,%.2f,%.2f,%d,%d,%d,%d\n",
		ATM[idx][aPosX],
		ATM[idx][aPosY],
		ATM[idx][aPosZ],
		ATM[idx][aPosA],
		ATM[idx][aObjectID],
		ATM[idx][aVw],
		ATM[idx][aInt],
		ATM[idx][aPenz]
		);
		if(idx == 0)
		{
			file2 = fopen("Config/atm.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/atm.cfg", io_append);
		}

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}
fpublic SaveKereskedo()
{
	new idx;
	new File: file2;
	new coordsstring[256];

	while (idx < MAX_KERESKEDO)
	{
		format(coordsstring, sizeof(coordsstring), "%d,%s,%d\n",
			KeredkedoVetel[idx][kUID], 
			KeredkedoVetel[idx][kKOCSI],
			KeredkedoVetel[idx][kAra] 
		);
		if(idx == 0)
		{
			file2 = fopen("Config/kereskedo.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/kereskedo.cfg", io_append);
		}

		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

stock SendMessage(type, msg[], color, p1 = 0)
{
	if(type == SEND_MESSAGE_ADMIN) 
	{
		foreach(Jatekosok, i)
		{
			if(p1 == 0)
			{
				if(PlayerInfo[i][pAdmin] >= 1 || IsAS(i) || IsTerno(i) && !IsAllTerno(i) || IsScripter(i))
				{
					SendClientMessage(i, color, msg);
				}
			}
			else
			{
				if(PlayerInfo[i][pAdmin] >= p1 || IsScripter(i))
				{
				    //if(gInfo[i] == 0)
					//{
						SendClientMessage(i, color, msg);
					//}
				}
			}
		}
	}
	else if(type == SEND_MESSAGE_FRACTION) 
	{
		foreach(Jatekosok, i) 
		{
			if(((PlayerInfo[i][pMember] == p1 || PlayerInfo[i][pLeader] == p1 || RadioHallgatas[i] == p1) && !gFam[i] && PlayerInfo[i][pRadio]) || (ElvettRadio[i] == p1 && !gFam2[i])) 
				SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_FAMILY) 
	{
		foreach(Jatekosok, i) 
		{
			if( (PlayerInfo[i][pCsaladTagja] == p1 || PlayerInfo[i][pCsaladLeader] == p1/* || RadioHallgatas[i] == p1*/) && !gFam[i] && PlayerInfo[i][pRadio]) 
				SendClientMessage(i, color, msg);
		}
	} 
	else if(type == SEND_MESSAGE_JOB)
	{
		foreach(Jatekosok, i)
		{
			if(PlayerInfo[i][pJob1] == p1 || PlayerInfo[i][pJob2] == p1)
				SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_PLAYER)
	{
		foreach(Jatekosok, i)
		{
			if(PlayerInfo[i][pID] == p1 || i == p1)
				SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_SCRIPTER)
	{
		foreach(Jatekosok, i)
		{
			if(IsScripter(i))
				SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_SSS)
	{
		foreach(Jatekosok, i)
		{
			if(PlayerInfo[i][pSSS] > 0 && SSSDuty[i] == 1)
				SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_COP)
	{
		foreach(Jatekosok, i)
		{
			if(IsACop(i))
			{
				SendClientMessage(i, color, msg);
				RingTone[i] = 20;
			}
		}
	}
	else if(type == SEND_MESSAGE_IRC)
	{
		foreach(Jatekosok, i)
		{
			if(PlayersChannel[i] == p1)
				SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_HITMAN)
	{
		foreach(Jatekosok, i)
		{
			if(IsHitman(i))
				SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_TRUCK)
	{
		foreach(Jatekosok, i)
		{
			if(AMT(i, MUNKA_KAMIONOS) && IsATruck(GetPlayerVehicleID(i)))
				SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_TAXI)
	{	
		foreach(Jatekosok, i)
		{
			if(PlayerInfo[i][pTaxiEngedely] > 0)
			{
				if(IsATaxi(GetPlayerVehicleID(i)))
					SendClientMessage(i, color, msg);
			}
		}

	}
	else if(type == SEND_MESSAGE_OOCOFF)
	{
		foreach(Jatekosok, i)
		{
			if(!gOoc[i])
				SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_OOCNEWS)
	{
		foreach(Jatekosok, i)
		{
			if(gNews[i] != 2)
				SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_RADIO_D)
	{
		foreach(Jatekosok, i)
		{
		    if(PlayerInfo[i][pMember] == p1 || PlayerInfo[i][pLeader] == p1 || RadioHallgatas[i] == p1)
		    {
				if(gFam[i] == 0 && PlayerInfo[i][pRadio] == 1)
				{
  					if(p1 != FRAKCIO_ONKORMANYZAT || GetVehicleModel(GetPlayerVehicleID(i)) == 490)
						SendClientMessage(i, color, msg);
				}
			}
		}
	}
	else if(type == SEND_MESSAGE_RADIO)
	{
		foreach(Jatekosok, i)
		{
			if(((PlayerInfo[i][pMember] == p1 || PlayerInfo[i][pLeader] == p1 || RadioHallgatas[i] == p1) && !gFam[i] && PlayerInfo[i][pRadio]) || (ElvettRadio[i] == p1 && !gFam2[i])) 
				SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_RADIO_SWAT)
	{
		foreach(Jatekosok, i)
		{
		    if(PlayerInfo[i][pSwattag] == 1 && gFam[i] == 0 && PlayerInfo[i][pRadio] == 1)
				SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_RADIO_RKA)
	{
		foreach(Jatekosok, i)
		{
		    if(gFam[i] == 0 && PlayerInfo[i][pRKA] == 1 && PlayerInfo[i][pRadio] == 1)
				SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_POLICE)
    {
        foreach(Jatekosok, i)
        {
            if(LMT(i, FRAKCIO_SCPD) || LMT(i, FRAKCIO_SFPD) || LMT(i, FRAKCIO_FBI))
            {
                if(gFam[i] == 0 && PlayerInfo[i][pRadio] == 1 && gTogLR[i] == 0)
                    SendClientMessage(i, color, msg);
            }
        }
    }
	else if(type == SEND_MESSAGE_RADIO_REPULO)
	{
		foreach(Jatekosok, i)
		{
			if(LMT(i, FRAKCIO_KATONASAG) && PlayerToPoint(10, i, 213.6858,1822.7659,6.4141) && FrakcioKocsiID(GetPlayerVehicleID(i), PlayerInfo[i][pMember])) SendClientMessage(i, color, msg);
			elseif(!LMT(i, FRAKCIO_KATONASAG) && IsARepulo(GetPlayerVehicleID(i))) SendClientMessage(i, color, msg);
		}
	}
	else if(type == SEND_MESSAGE_ONKENTES)
	{
		foreach(Jatekosok, i)
		{
			if(IsOnkentes(i) || LMT(i, FRAKCIO_MENTO))
			{
				if(gFam[i] == 0 && PlayerInfo[i][pRadio] == 1)
					SendClientMessage(i, color, msg);
			}
		}
	}
	else if(type == SEND_MESSAGE_DEPARTMENTS)
	{

		foreach(Jatekosok, i)
		{
			new rang = PlayerInfo[i][pRank];
			if(IsACop(i) || LMT(i, FRAKCIO_MENTO) || LMT(i, FRAKCIO_TUZOLTO) || LMT(i, FRAKCIO_ONKORMANYZAT) || Admin(i))
			{
				if(gFam[i] == 0 && PlayerInfo[i][pRadio] == 1 && (IsACop(i)
				|| (LMT(i, FRAKCIO_TUZOLTO) && rang >= 3)
				|| (LMT(i, FRAKCIO_MENTO) && rang >= 1)
				|| (LMT(i, FRAKCIO_ONKORMANYZAT) && MunkaLeader(i, FRAKCIO_ONKORMANYZAT))
				|| Admin(i, 1337)))
				{
					SendClientMessage(i, color, msg);				
				}
			}
		}
	}
	return 1;
}
stock HitmanLaptop(playerid)
{
	SendClientMessage(playerid, COLOR_WHITE, "====[ Laptop ]====");
	SendClientMessage(playerid, COLOR_YELLOW2, "| - Tagok - Hírdetés");
	SendClientMessage(playerid, COLOR_YELLOW2, "| - Vérdíjak - Ruha");
	SendClientMessage(playerid, COLOR_YELLOW2, "| - Célpontok - Lenyomoz - Álnév");
	SendClientMessage(playerid, COLOR_YELLOW2, "| - Rendelés - Bilincs - Munka");
	SendClientMessage(playerid, COLOR_YELLOW2, "| - Bomba - Bombatavol");
	SendClientMessage(playerid, COLOR_YELLOW2, "Egyéb parancsok: /méreg");
	return 1;
}

stock SwatRangNev(playerid)
{
	new rangnev[128];
    if(Swatduty[playerid] ==1)
    {
		switch(PlayerInfo[playerid][pSwatRang])
		{
			case 0: format(rangnev, sizeof(rangnev), "SWAT Újonc");
			case 1: format(rangnev, sizeof(rangnev), "SWAT Közlegény");
			case 2: format(rangnev, sizeof(rangnev), "SWAT Tiszt");
			case 3: format(rangnev, sizeof(rangnev), "SWAT Kommandós");
			case 4: format(rangnev, sizeof(rangnev), "SWAT Hadnagy");
			case 5: format(rangnev, sizeof(rangnev), "SWAT Fõhadnagy");
			case 6: format(rangnev, sizeof(rangnev), "SWAT Százados");
			case 7: format(rangnev, sizeof(rangnev), "SWAT Õrnagy");
			case 8: format(rangnev, sizeof(rangnev), "SWAT Ezredes");
			case 9: format(rangnev, sizeof(rangnev), "SWAT Kapitány");
			case 10: format(rangnev, sizeof(rangnev), "SWAT VezérÕrnagy");
			case 11: format(rangnev, sizeof(rangnev), "SWAT MásodParancsnok");
			case 12: format(rangnev, sizeof(rangnev), "SWAT Parancsnok");
		}
		if(PlayerInfo[playerid][pMember] == FRAKCIO_MENTO) format(rangnev, sizeof(rangnev), "SWAT Szanitéc");
    }
	return rangnev;
}

fpublic PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

fpublic StopMusic()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
		}
	}
}

fpublic PlayerFixRadio(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    SetTimer("PlayerFixRadio2", 1000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
		Fixr[playerid] = 1;
	}
}

fpublic PlayerFixRadio2()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(Fixr[i])
			{
				PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
				Fixr[i] = 0;
			}
		}
	}
}

GetVehicleModelIDFromName(vname[])
{
	for(new i = 0; i < 211; i++)
	{
		if(strcmp(vehName[i], vname, true) == 0)
			return i + MIN_VEHI_ID;
	}
	return -1;
}

fpublic OnPlayerAnim(playerid, cmdtext[], preCall)
{
	if(preCall) // animációs parancs beírásakor elõhívja ezt a függvényt, ha return 0 kerül visszaadásra, akkor érvényteleníti a parancsot
	{

	}
	else // ha már sikeresen lejátszódott egy (létezõ) parancs
	{
		format(_tmpString, 256, "[%d] %s - %s", playerid, Nev(playerid), cmdtext);
		Log("Parancsok", _tmpString);
	}

	return 1;
}

fpublic OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(KeyPadActive[playerid] && !Valtozott[playerid] && clickedid == Text:INVALID_TEXT_DRAW)
		return DeleteKeyPad(playerid);
	
	if(KodToroActive[playerid] && !Valtozott[playerid] && clickedid == Text:INVALID_TEXT_DRAW)
		return DeleteKeyPad(playerid);
		
	/*if(clickedid == InfoTextDrawWeapons[playerid])
	{
		Msg(playerid, "something");
	}*/
	return 0;
}


fpublic OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(KodToroActive[playerid])
	{
		new kulcs = -1;

		if(playertextid == Gombok[0])
			kulcs = 0;
		if(playertextid == Gombok[1])
			kulcs = 1;
	
		if(kulcs != -1)
			CallLocalFunction("OnPlayerPressKodToro", "ii", playerid, kulcs);
			
		return true;
	
	
	}
	else if(KeyPadActive[playerid] && MelyikKapu[playerid] > -1)
	{
		new kulcs = -1;

		if(playertextid == Gombok[0])
			kulcs = 1;
		if(playertextid == Gombok[1])
			kulcs = 2;
		if(playertextid == Gombok[2])
			kulcs = 3;
		if(playertextid == Gombok[3])
			kulcs = 4;
		if(playertextid == Gombok[4])
			kulcs = 5;
		if(playertextid == Gombok[5])
			kulcs = 6;
		if(playertextid == Gombok[6])
			kulcs = 7;
		if(playertextid == Gombok[7])
			kulcs = 8;
		if(playertextid == Gombok[8])
			kulcs = 9;
		if(playertextid == Gombok[9])
			kulcs = 0;

		if(kulcs != -1)
			CallLocalFunction("OnPlayerPressKeyPad", "iii", playerid, Kapu[MelyikKapu[playerid]][kKod], kulcs);
		return true;
	}

	return 0;
}
fpublic OnPlayerPressKodToro(playerid, keynum)
{
	new formatocska[128];

	new hossz = KINCS_KOD_HOSSZ;

	if(strlen(Szamok[playerid]) != hossz)
	{
		format(formatocska, sizeof(formatocska), "%d", keynum);

		strins(Szamok[playerid], formatocska, strlen(Szamok[playerid]));

		new i = -1, text[7];
		for(;++i < strlen(Szamok[playerid]);)
		{
			if(i < 8)
				format(text,7, "%s",Szamok[playerid]);
		}
		PlayerTextDrawSetString(playerid, Kellek[0], text);
	}

	if(strlen(Szamok[playerid]) == hossz)
	{		
		if(strval(Szamok[playerid]) == strval(KincsKod))
		{
			if(KincsAktiv == NINCS) return 1;
			PlayerPlaySound(playerid, 21002, 0.0, 0.0, 0.0);
			Valtozott[playerid] = true;
			PlayerTextDrawBoxColor(playerid, Jelzes[1], 16711935); //16711935
			PlayerTextDrawHide(playerid, Jelzes[1]);
			PlayerTextDrawShow(playerid, Jelzes[1]);
			
			KincsNyit(playerid);
			
			SetTimerEx("VisszaAllitas", 2000, false, "ii", playerid, 1);

		}
		else
		{
			PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
			Valtozott[playerid] = true;
			PlayerTextDrawBoxColor(playerid, Jelzes[0], -16776961); //-16776961
			PlayerTextDrawHide(playerid, Jelzes[0]);
			PlayerTextDrawShow(playerid, Jelzes[0]);
			SetTimerEx("VisszaAllitas", 2000, false, "ii", playerid, 0);
		}
		CancelSelectTextDraw(playerid);
		Szamok[playerid][0] = EOS;
	}

	return true;
}
fpublic OnPlayerPressKeyPad(playerid, kapu, keynum)
{
	new formatocska[128];

	format(formatocska, sizeof(formatocska), "%d", kapu);

	new hossz = strlen(formatocska);

	if(strlen(Szamok[playerid]) != hossz)
	{
		format(formatocska, sizeof(formatocska), "%d", keynum);

		strins(Szamok[playerid], formatocska, strlen(Szamok[playerid]));

		new i = -1, text[7];
		for(;++i < strlen(Szamok[playerid]);)
			strins(text, "]", strlen(text));

		PlayerTextDrawSetString(playerid, Kellek[0], text);
	}

	if(strlen(Szamok[playerid]) == hossz)
	{
		if(strval(Szamok[playerid]) == kapu)
		{
			PlayerPlaySound(playerid, 21002, 0.0, 0.0, 0.0);
			Valtozott[playerid] = true;
			PlayerTextDrawBoxColor(playerid, Jelzes[1], 16711935); //16711935
			PlayerTextDrawHide(playerid, Jelzes[1]);
			PlayerTextDrawShow(playerid, Jelzes[1]);
			
			if(Kapu[MelyikKapu[playerid]][kMozgo])
				MoveDynamicObject(Kapu[MelyikKapu[playerid]][kOID], ArrExt(Kapu[MelyikKapu[playerid]][kNPos]), Kapu[MelyikKapu[playerid]][kSpeed]);
			else
			{
				SetDynamicObjectPos(Kapu[MelyikKapu[playerid]][kOID], ArrExt(Kapu[MelyikKapu[playerid]][kNPos]));
				SetDynamicObjectRot(Kapu[MelyikKapu[playerid]][kOID], ArrExt(Kapu[MelyikKapu[playerid]][kNRPos]));
			}
			MelyikKapu[playerid] = -1;
			SetTimerEx("VisszaAllitas", 2000, false, "ii", playerid, 1);

		} else {
			PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
			Valtozott[playerid] = true;
			PlayerTextDrawBoxColor(playerid, Jelzes[0], -16776961); //-16776961
			PlayerTextDrawHide(playerid, Jelzes[0]);
			PlayerTextDrawShow(playerid, Jelzes[0]);
			SetTimerEx("VisszaAllitas", 2000, false, "ii", playerid, 0);
		}
		CancelSelectTextDraw(playerid);
		Szamok[playerid][0] = EOS;
	}

	return true;
}

stock KincsNyit(playerid)
{
	new szoveg[256], jutalom[128], rnd;
			
	KincsGeneralas:
	rnd = random(1000)+1;

	if(1 <= rnd < 400) // Készpénz - 40%
	{
		new penz;
		switch(OnlineJatekosok)
		{
			case 0..29: penz = 			Rand(  50000,   500000);		 	//    50,000	-	  500,000
			case 30..59: penz = 		Rand( 300000,  2500000);			//   300,000	-	2,500,000
			case 60..89: penz = 		Rand( 500000,  5000000);			//   500,000	-	5,000,000
			case 90..119: penz = 		Rand(1000000, 10000000);			// 1,000,000	-	10,000,000
			case 120..149: penz = 		Rand(2000000, 15000000);			// 2,000,000	-	15,000,000
			default: penz =			 	Rand(3000000, 20000000);			// 3,000,000	-	20,000,000
		}
		format(jutalom, 128, "Készpénz (%dFt)", penz);
		GiveMoney(playerid, penz);
		Cselekves(playerid, "szerzett egy kis pénzt és egy ládát", 1);
	}
	else if(400 <= rnd < 600) // Mati || Drog - 20%
	{
		if(Civil(playerid) || LegalisSzervezetTagja(playerid))
			goto KincsGeneralas;
		
		new cucc;
		switch(random(2))
		{
			case 0: // Drog
			{
				switch(OnlineJatekosok)
				{
					case 0..29: cucc = 100 + random(200); 			// 100	-	300
					case 30..59: cucc = 300 + random(300);			// 300	-	600
					case 60..89: cucc = 400 + random(500);			// 400	-	900
					case 90..119: cucc = 500 + random(700);			// 500	-	1200
					case 120..149: cucc = 600 + random(900);		// 600	-	1500
					default: cucc = 700 + random(1200);					// 700	-	1900
				}
				format(jutalom, 128, "Drog (%dg)", cucc);
				PlayerInfo[playerid][pKokain] += cucc;
				PlayerInfo[playerid][pHeroin] += cucc;
				PlayerInfo[playerid][pMarihuana] += cucc;
				Cselekves(playerid, "szerzett egy kis drogot és egy ládát", 1);
			}
			case 1: // Mati
			{
				switch(OnlineJatekosok)
				{
					case 0..29: cucc = 5000 + random(7000); 				// 5000	-	7000
					case 30..59: cucc = 6000 + random(15000);			// 6000	-	15000
					case 60..89: cucc = 7000 + random(30000);			// 7000	-	30000
					case 90..119: cucc = 8000 + random(50000);			// 8000	-	50000
					case 120..149: cucc = 9000 + random(65000);		// 9000	-	65000
					default: cucc = 10000 + random(90000);					// 10000	-	90000
				}
				format(jutalom, 128, "Mati (%ddb)", cucc);
				PlayerInfo[playerid][pMats] += cucc;
				Cselekves(playerid, "szerzett egy kis materialt és egy ládát", 1);
			}
		}
	}
	else if(600 <= rnd < 800) // Fegyver - 20%
	{
		if(Civil(playerid) || LegalisSzervezetTagja(playerid))
			goto KincsGeneralas;
		
		switch(OnlineJatekosok)
		{
			case 0..29: if(random(3) == 0) goto KincsGeneralas;
			case 30..49: if(random(4) == 0) goto KincsGeneralas;
		}
		
		switch(random(2))
		{
			case 0:
			{
				format(jutalom, 128, "M4 (3000 lõszerrel)");
				
				WeaponGiveWeapon(playerid, WEAPON_M4, 3000);
			}
			case 1:
			{
				format(jutalom, 128, "Sniper (600 lõszerrel)");
				
				WeaponGiveWeapon(playerid, WEAPON_SNIPER, 600);
			}
		}
		
		Cselekves(playerid, "szerzett egy fegyvert és egy ládát", 1);
	}
	else if(800 <= rnd < 920) // Ház - 12%
	{
		if(PlayerInfo[playerid][pPhousekey] != NINCS && PlayerInfo[playerid][pPhousekey2] != NINCS && PlayerInfo[playerid][pPhousekey3] != NINCS)
			goto KincsGeneralas;
			
		new haz = NINCS;
		for(new h = 0; h < MAXHAZ; h++)
		{
			if(HouseInfo[h][Van] && InaktivCucc(h, INAKTIV_HAZ))
			{
				haz = h;
				break;
			}
		}
		if(haz == NINCS) goto KincsGeneralas;
		
		HouseInfo[haz][hOwned] = 1;
		HouseInfo[haz][hCsak] = 0;
		strmid(HouseInfo[haz][hOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 25);
		HouseInfo[haz][hTulaj] = PlayerInfo[playerid][pID];
		HazUpdate(haz, HAZ_Owned, HAZ_Owner, HAZ_Csak, HAZ_Tulaj);
		CorrectPlayerDatas(playerid);
		DateProp(playerid, DP_Haz);
		
		format(jutalom, 128, "Egy ház kulcsa");
		Cselekves(playerid, "szerzett egy házat és egy ládát", 1);
	}
	else if(920 <= rnd < 990) // Jármû - 7%
	{
		if(PlayerInfo[playerid][pPcarkey] != NINCS && PlayerInfo[playerid][pPcarkey2] != NINCS && PlayerInfo[playerid][pPcarkey3] != NINCS)
			goto KincsGeneralas;
			
		new kocsi = NINCS;
		for(new k = 0; k < MAXVSKOCSI; k++)
		{
			if(CarInfo[k][Van] && InaktivCucc(k, INAKTIV_KOCSI))
			{
				kocsi = k;
				break;
			}
		}
		if(kocsi == NINCS) goto KincsGeneralas;
		
		CarInfo[kocsi][cOwned] = 1;
		strmid(CarInfo[kocsi][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 25);
		CarInfo[kocsi][cTulaj] = PlayerInfo[playerid][pID];
		CarUpdate(kocsi, CAR_Owned, CAR_Owner, CAR_Tulaj);
		CorrectPlayerDatas(playerid);
		DateProp(playerid, DP_Kocsi);
		
		format(jutalom, 128, "Egy jármû kulcsa");
		Cselekves(playerid, "szerzett egy jármûvet és egy ládát", 1);
	}
	else if(970 <= rnd < 990) // Arany - 2%
	{				
		new darab;
		switch(OnlineJatekosok)
		{
			case 0..49: darab = 1;
			case 50..79: darab = 2;
			case 80..129: darab = 3;
			default: darab = 4;
		}
		PlayerInfo[playerid][pArany] += darab;
		
		format(jutalom, 128, "%s darab aranyrúd", darab);
		Cselekves(playerid, "szerzett néhány darab aranyrudat és egy ládát", 1);
	}
	else if(990 <= rnd <= 1000) // Gyémánt - 1%
	{
		goto KincsGeneralas;
		
		new gy = NINCS;
		for(new g = 0; g < MAX_GYEMANT; g++)
		{
			if(Gyemant[g][gPos][0] == 0.0)
			{
				gy = g;
				break;
			}
		}
		
		if(gy == NINCS) goto KincsGeneralas;
		
		Gyemant[gy][gPlayer] = NINCS;
		Gyemant[gy][gFrakcio] = NINCS;
		
		GyemantAkcio( GYEMANT_FELVESZ, playerid, gy);
		format(jutalom, 128, "Egy különleges gyémánt");
		Cselekves(playerid, "szerzett egy különleges gyémántot és egy ládát", 1);
	}
	
	if(!strlen(jutalom)) goto KincsGeneralas;
	
	// + 1 láda
	#if defined SYSTEM_BONUS
	strcat(jutalom, " és egy láda");
	GiveRandomToken(playerid, BONUS_REASON_TREASURE);
	#endif
	
	SendFormatMessageToAll(COLOR_WHITE, "%s kinyitott egy kincset", PlayerName(playerid));
	format(szoveg, 256, "Gratulálok, %s! Kinyitottad a széfet!\nJutalmad: %s", PlayerName(playerid), jutalom);
	ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kincs", szoveg, "Rendben", "");
	GiveBonusKredit(playerid, 3, "kincs", true, true);
	
	UpdateDynamic3DTextLabelText(KincsObject, COLOR_LIGHTRED, "KINCS\nKinyitották...");

	KincsIdo = 300;
	KincsAktiv = NINCS;
	KincsUtolsoNyitas = UnixTime;
	KincsUtolsoNyitasNev = PlayerName(playerid);
	
	format(szoveg, 256, "<< [%d]%s kinyitotta a kincset - jutalma: %s >>", playerid, Nev(playerid), jutalom);
	Log("Szef", szoveg);
	print(szoveg);
	ABroadCast(COLOR_YELLOW, szoveg, 1337);


}

stock TojasNyit(playerid)
{
	new szoveg[256], jutalom[128], rnd;
			
	TojasGeneralas:
	rnd = random(1000)+1;

	if(1 <= rnd < 400) // Készpénz - 40%
	{
		new penz = Rand(500000, 2500000);
		format(jutalom, 128, "Készpénz (%dFt)", penz);
		GiveMoney(playerid, penz);
		Cselekves(playerid, "szerzett egy kis pénzt és egy ládát", 1);
	}
	else if(400 <= rnd < 600) // Mati || Drog - 20%
	{
		if(Civil(playerid) || LegalisSzervezetTagja(playerid))
			goto TojasGeneralas;
		
		new cucc;
		switch(random(2))
		{
			case 0: // Drog
			{
				cucc = 2700 + random(1200);
				format(jutalom, 128, "Drog (%dg)", cucc);
				PlayerInfo[playerid][pKokain] += cucc;
				PlayerInfo[playerid][pHeroin] += cucc;
				PlayerInfo[playerid][pMarihuana] += cucc;
				Cselekves(playerid, "szerzett egy kis drogot és egy ládát", 1);
			}
			case 1: // Mati
			{
				cucc = 10000 + random(30000);
				format(jutalom, 128, "Mati (%ddb)", cucc);
				PlayerInfo[playerid][pMats] += cucc;
				Cselekves(playerid, "szerzett egy kis materialt és egy ládát", 1);
			}
		}
	}
	else if(600 <= rnd < 800) // Fegyver - 20%
	{
		if(Civil(playerid) || LegalisSzervezetTagja(playerid))
			goto TojasGeneralas;
			
		switch(random(2))
		{
			case 0:
			{
				format(jutalom, 128, "M4 (300 lõszerrel)");
				
				WeaponGiveWeapon(playerid, WEAPON_M4, 300);
			}
			case 1:
			{
				format(jutalom, 128, "Sniper (100 lõszerrel)");
				
				WeaponGiveWeapon(playerid, WEAPON_SNIPER, 100);
			}
		}
		
		Cselekves(playerid, "szerzett egy fegyvert és egy ládát", 1);
	}
	else if(800 <= rnd < 920) // Ház - 12%
	{
		if(PlayerInfo[playerid][pPhousekey] != NINCS && PlayerInfo[playerid][pPhousekey2] != NINCS && PlayerInfo[playerid][pPhousekey3] != NINCS)
			goto TojasGeneralas;
			
		new haz = NINCS;
		for(new h = 0; h < MAXHAZ; h++)
		{
			if(HouseInfo[h][Van] && InaktivCucc(h, INAKTIV_HAZ))
			{
				haz = h;
				break;
			}
		}
		if(haz == NINCS) goto TojasGeneralas;
		
		HouseInfo[haz][hOwned] = 1;
		HouseInfo[haz][hCsak] = 0;
		strmid(HouseInfo[haz][hOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 25);
		HouseInfo[haz][hTulaj] = PlayerInfo[playerid][pID];
		HazUpdate(haz, HAZ_Owned, HAZ_Owner, HAZ_Csak, HAZ_Tulaj);
		CorrectPlayerDatas(playerid);
		DateProp(playerid, DP_Haz);
		
		format(jutalom, 128, "Egy ház kulcsa");
		Cselekves(playerid, "szerzett egy házat és egy ládát", 1);
	}
	else if(920 <= rnd < 990) // Jármû - 7%
	{
		if(PlayerInfo[playerid][pPcarkey] != NINCS && PlayerInfo[playerid][pPcarkey2] != NINCS && PlayerInfo[playerid][pPcarkey3] != NINCS)
			goto TojasGeneralas;
			
		new kocsi = NINCS;
		for(new k = 0; k < MAXVSKOCSI; k++)
		{
			if(CarInfo[k][Van] && InaktivCucc(k, INAKTIV_KOCSI))
			{
				kocsi = k;
				break;
			}
		}
		if(kocsi == NINCS) goto TojasGeneralas;
		
		CarInfo[kocsi][cOwned] = 1;
		strmid(CarInfo[kocsi][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 25);
		CarInfo[kocsi][cTulaj] = PlayerInfo[playerid][pID];
		CarUpdate(kocsi, CAR_Owned, CAR_Owner, CAR_Tulaj);
		CorrectPlayerDatas(playerid);
		DateProp(playerid, DP_Kocsi);
		
		format(jutalom, 128, "Egy jármû kulcsa");
		Cselekves(playerid, "szerzett egy jármûvet és egy ládát", 1);
	}
	else if(970 <= rnd < 1000) // Kulcs - 3%
	{				
		new darab = 2 + random(3);
		PlayerInfo[playerid][pLadaKulcs] += darab;
		
		format(jutalom, 128, "%s darab kulcs", darab);
		Cselekves(playerid, "szerzett néhány darab kulcsot és egy ládát", 1);
	}
	
	if(!strlen(jutalom)) goto TojasGeneralas;
	
	// + 1 láda
	#if defined SYSTEM_BONUS
	strcat(jutalom, " és egy láda");
	GiveRandomToken(playerid, BONUS_REASON_TREASURE);
	#endif
	
	SendFormatMessageToAll(COLOR_WHITE, "%s megtalálta és feltörte a húsvéti tojását!", PlayerName(playerid));
	format(szoveg, 256, "Gratulálok, %s! Megtaláltad a tojásod!\nJutalmad: %s", PlayerName(playerid), jutalom);
	ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Tojás", szoveg, "Rendben", "");
	
	PlayerInfo[playerid][phTojas] = -2;
	
}
stock CreateKeyPad(playerid)
{
	Kellek[0] = CreatePlayerTextDraw(playerid, 547.199951, 197.866531, "_");
	PlayerTextDrawLetterSize(playerid, Kellek[0], 0.394800, 1.861332);
	PlayerTextDrawTextSize(playerid, Kellek[0], 544.799072, -107.519882);
	PlayerTextDrawAlignment(playerid, Kellek[0], 2);
	PlayerTextDrawColor(playerid, Kellek[0], -1);
	PlayerTextDrawUseBox(playerid, Kellek[0], true);
	PlayerTextDrawBoxColor(playerid, Kellek[0], 60);
	PlayerTextDrawSetShadow(playerid, Kellek[0], 0);
	PlayerTextDrawSetOutline(playerid, Kellek[0], 1);
	PlayerTextDrawBackgroundColor(playerid, Kellek[0], 51);
	PlayerTextDrawFont(playerid, Kellek[0], 2);
	PlayerTextDrawSetProportional(playerid, Kellek[0], 1);

	Kellek[1] = CreatePlayerTextDraw(playerid, 606.400085, 193.386672, "~n~~n~~n~");
	PlayerTextDrawLetterSize(playerid, Kellek[1], 0.454800, 6.572803);
	PlayerTextDrawTextSize(playerid, Kellek[1], 488.799896, -0.746670);
	PlayerTextDrawAlignment(playerid, Kellek[1], 1);
	PlayerTextDrawColor(playerid, Kellek[1], -1);
	PlayerTextDrawUseBox(playerid, Kellek[1], true);
	PlayerTextDrawBoxColor(playerid, Kellek[1], 60);
	PlayerTextDrawSetShadow(playerid, Kellek[1], 0);
	PlayerTextDrawSetOutline(playerid, Kellek[1], 1);
	PlayerTextDrawBackgroundColor(playerid, Kellek[1], 51);
	PlayerTextDrawFont(playerid, Kellek[1], 1);
	PlayerTextDrawSetProportional(playerid, Kellek[1], 1);

	Gombok[0] = CreatePlayerTextDraw(playerid, 512.000000, 225.493255, "1");
	PlayerTextDrawLetterSize(playerid, Gombok[0], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[0], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[0], 2);
	PlayerTextDrawColor(playerid, Gombok[0], -1);
	PlayerTextDrawUseBox(playerid, Gombok[0], true);
	PlayerTextDrawBoxColor(playerid, Gombok[0], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[0], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[0], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[0], 51);
	PlayerTextDrawFont(playerid, Gombok[0], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[0], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[0], true);

	Gombok[1] = CreatePlayerTextDraw(playerid, 546.599792, 225.000000, "2");
	PlayerTextDrawLetterSize(playerid, Gombok[1], 0.483599, 2.286931);
	PlayerTextDrawTextSize(playerid, Gombok[1], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[1], 2);
	PlayerTextDrawColor(playerid, Gombok[1], -1);
	PlayerTextDrawUseBox(playerid, Gombok[1], true);
	PlayerTextDrawBoxColor(playerid, Gombok[1], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[1], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[1], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[1], 51);
	PlayerTextDrawFont(playerid, Gombok[1], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[1], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[1], true);

	Gombok[2] = CreatePlayerTextDraw(playerid, 581.199707, 225.253295, "3");
	PlayerTextDrawLetterSize(playerid, Gombok[2], 0.485199, 2.197331);
	PlayerTextDrawTextSize(playerid, Gombok[2], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[2], 2);
	PlayerTextDrawColor(playerid, Gombok[2], -1);
	PlayerTextDrawUseBox(playerid, Gombok[2], true);
	PlayerTextDrawBoxColor(playerid, Gombok[2], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[2], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[2], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[2], 51);
	PlayerTextDrawFont(playerid, Gombok[2], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[2], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[2], true);

	Gombok[3] = CreatePlayerTextDraw(playerid, 511.400024, 257.853332, "4");
	PlayerTextDrawLetterSize(playerid, Gombok[3], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[3], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[3], 2);
	PlayerTextDrawColor(playerid, Gombok[3], -1);
	PlayerTextDrawUseBox(playerid, Gombok[3], true);
	PlayerTextDrawBoxColor(playerid, Gombok[3], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[3], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[3], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[3], 51);
	PlayerTextDrawFont(playerid, Gombok[3], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[3], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[3], true);

	Gombok[4] = CreatePlayerTextDraw(playerid, 547.599853, 258.106658, "5");
	PlayerTextDrawLetterSize(playerid, Gombok[4], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[4], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[4], 2);
	PlayerTextDrawColor(playerid, Gombok[4], -1);
	PlayerTextDrawUseBox(playerid, Gombok[4], true);
	PlayerTextDrawBoxColor(playerid, Gombok[4], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[4], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[4], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[4], 51);
	PlayerTextDrawFont(playerid, Gombok[4], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[4], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[4], true);

	Gombok[5] = CreatePlayerTextDraw(playerid, 582.199829, 257.613311, "6");
	PlayerTextDrawLetterSize(playerid, Gombok[5], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[5], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[5], 2);
	PlayerTextDrawColor(playerid, Gombok[5], -1);
	PlayerTextDrawUseBox(playerid, Gombok[5], true);
	PlayerTextDrawBoxColor(playerid, Gombok[5], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[5], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[5], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[5], 51);
	PlayerTextDrawFont(playerid, Gombok[5], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[5], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[5], true);

	Gombok[6] = CreatePlayerTextDraw(playerid, 511.599945, 289.466766, "7");
	PlayerTextDrawLetterSize(playerid, Gombok[6], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[6], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[6], 2);
	PlayerTextDrawColor(playerid, Gombok[6], -1);
	PlayerTextDrawUseBox(playerid, Gombok[6], true);
	PlayerTextDrawBoxColor(playerid, Gombok[6], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[6], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[6], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[6], 51);
	PlayerTextDrawFont(playerid, Gombok[6], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[6], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[6], true);

	Gombok[7] = CreatePlayerTextDraw(playerid, 547.799865, 289.720092, "8");
	PlayerTextDrawLetterSize(playerid, Gombok[7], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[7], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[7], 2);
	PlayerTextDrawColor(playerid, Gombok[7], -1);
	PlayerTextDrawUseBox(playerid, Gombok[7], true);
	PlayerTextDrawBoxColor(playerid, Gombok[7], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[7], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[7], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[7], 51);
	PlayerTextDrawFont(playerid, Gombok[7], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[7], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[7], true);

	Gombok[8] = CreatePlayerTextDraw(playerid, 582.399902, 289.226745, "9");
	PlayerTextDrawLetterSize(playerid, Gombok[8], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[8], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[8], 2);
	PlayerTextDrawColor(playerid, Gombok[8], -1);
	PlayerTextDrawUseBox(playerid, Gombok[8], true);
	PlayerTextDrawBoxColor(playerid, Gombok[8], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[8], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[8], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[8], 51);
	PlayerTextDrawFont(playerid, Gombok[8], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[8], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[8], true);

	Gombok[9] = CreatePlayerTextDraw(playerid, 547.399963, 321.586791, "0");
	PlayerTextDrawLetterSize(playerid, Gombok[9], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[9], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[9], 2);
	PlayerTextDrawColor(playerid, Gombok[9], -1);
	PlayerTextDrawUseBox(playerid, Gombok[9], true);
	PlayerTextDrawBoxColor(playerid, Gombok[9], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[9], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[9], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[9], 51);
	PlayerTextDrawFont(playerid, Gombok[9], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[9], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[9], true);

	Jelzes[0] = CreatePlayerTextDraw(playerid, 511.600067, 321.093444, "_");
	PlayerTextDrawLetterSize(playerid, Jelzes[0], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Jelzes[0], 536.799682, 22.399993);
	PlayerTextDrawAlignment(playerid, Jelzes[0], 2);
	PlayerTextDrawColor(playerid, Jelzes[0], -1);
	PlayerTextDrawUseBox(playerid, Jelzes[0], true);
	PlayerTextDrawBoxColor(playerid, Jelzes[0], -2147483393); //-16776961
	PlayerTextDrawSetShadow(playerid, Jelzes[0], 0);
	PlayerTextDrawSetOutline(playerid, Jelzes[0], 1);
	PlayerTextDrawBackgroundColor(playerid, Jelzes[0], 51);
	PlayerTextDrawFont(playerid, Jelzes[0], 1);
	PlayerTextDrawSetProportional(playerid, Jelzes[0], 1);

	Jelzes[1] = CreatePlayerTextDraw(playerid, 582.199829, 321.346771, "_");
	PlayerTextDrawLetterSize(playerid, Jelzes[1], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Jelzes[1], 536.799682, 22.399993);
	PlayerTextDrawAlignment(playerid, Jelzes[1], 2);
	PlayerTextDrawColor(playerid, Jelzes[1], -1);
	PlayerTextDrawUseBox(playerid, Jelzes[1], true);
	PlayerTextDrawBoxColor(playerid, Jelzes[1], 8388863); //16711935
	PlayerTextDrawSetShadow(playerid, Jelzes[1], 0);
	PlayerTextDrawSetOutline(playerid, Jelzes[1], 1);
	PlayerTextDrawBackgroundColor(playerid, Jelzes[1], 51);
	PlayerTextDrawFont(playerid, Jelzes[1], 1);
	PlayerTextDrawSetProportional(playerid, Jelzes[1], 1);


	return true;
}

stock DeleteKeyPad(playerid)
{
	for(new i = 0; i < 2; i++) PlayerTextDrawHide(playerid, Kellek[i]);
	for(new i = 0; i < 10; i++) PlayerTextDrawHide(playerid, Gombok[i]);
	for(new i = 0; i < 2; i++) PlayerTextDrawHide(playerid, Jelzes[i]);
	PlayerTextDrawHide(playerid, KapuNev);
	KeyPadActive[playerid] = false;
	KodToroActive[playerid] = false;
	Szamok[playerid][0] = EOS;
	return true;
}

stock CreateDeer()
{
	new rnd = random(sizeof(DeerSpawns));
	if(HuntInfo[dAmount] >= 25) return 0;
	
	for(new a = 0; a < sizeof(DeerInfo); a++)
	{
		if(DeerInfo[a][dCreated]) continue;
		DeerInfo[a][dCreated] = true;
		DeerInfo[a][dObject] = CreateDynamicObject(19315, ArrExt6(DeerSpawns[rnd]));
		DeerInfo[a][dPos][0] = DeerSpawns[rnd][0];
		DeerInfo[a][dPos][1] = DeerSpawns[rnd][1];
		DeerInfo[a][dPos][2] = DeerSpawns[rnd][2];
		DeerInfo[a][dPos][3] = DeerSpawns[rnd][3];
		DeerInfo[a][dPos][4] = DeerSpawns[rnd][4];
		DeerInfo[a][dPos][5] = DeerSpawns[rnd][5];
		DeerInfo[a][dDistance] = 0.0;
		DeerInfo[a][dKilled] = false;
		DeerInfo[a][dSupplied] = true;
		DeerInfo[a][dHealth] = 100;
		DeerInfo[a][dWeaponType] = NINCS;
		DeerInfo[a][dKiller] = NINCS;
		if(IsValidDynamic3DTextLabel(DeerInfo[a][dLabel])) DestroyDynamic3DTextLabel(DeerInfo[a][dLabel]), DeerInfo[a][dLabel] = INVALID_3D_TEXT_ID;
		tformat(128, "[Õz] Egészség: %d százalék", DeerInfo[a][dHealth]);
		DeerInfo[a][dLabel] = CreateDynamic3DTextLabel(_tmpString, 0x8B4513EE, ArrExt(DeerInfo[a][dPos]), 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		HuntInfo[dSpawnTime] = 60;
		HuntInfo[dAmount]++;
		//SendFormatMessageToAll(-1, "ÕZIKE DEBUG HEHEHE %d", a);
		break;
	}
	return 1;
}

stock RemoveDeer(id)
{
	DeerInfo[id][dPos][0] = 0.0;
	DeerInfo[id][dPos][1] = 0.0;
	DeerInfo[id][dPos][2] = -10.0;
	if(IsValidDynamicObject(DeerInfo[id][dObject])) DestroyDynamicObject(DeerInfo[id][dObject]);
	if(IsValidDynamic3DTextLabel(DeerInfo[id][dLabel])) DestroyDynamic3DTextLabel(DeerInfo[id][dLabel]), DeerInfo[id][dLabel]=INVALID_3D_TEXT_ID;
	DeerInfo[id][dObject] = NINCS;
	DeerInfo[id][dCreated] = false;
	DeerInfo[id][dKilled] = false;
	DeerInfo[id][dSupplied] = true;
	DeerInfo[id][dHealth] = 100;
	DeerInfo[id][dWeaponType] = NINCS;
	DeerInfo[id][dKiller] = NINCS;
	DeerInfo[id][dDistance] = 0.0;
	HuntInfo[dAmount]--;
	return true;
}

stock UpdateWeaponHud(playerid)
{
	if(PlayerInfo[playerid][pCustomHudWeapon] != 1)
	{
		new fegyverhud[128];		
		Format(fegyverhud, "class_weapons:%d", GetPlayerWeapon(playerid));
		TextDrawSetString(InfoTextDrawWeapons[playerid], fegyverhud);
		TextDrawShowForPlayer(playerid, InfoTextDrawWeapons[playerid]);
	}
	else
	{
		new fegyverhud[128];		
		Format(fegyverhud, "class_custom_weapons:%dc", GetPlayerWeapon(playerid));
		TextDrawSetString(InfoTextDrawWeapons[playerid], fegyverhud);
		TextDrawShowForPlayer(playerid, InfoTextDrawWeapons[playerid]);
	}
}

stock DeleteWeaponHud(playerid)
{
	if(!InfoTextDrawCreatedWeapons[playerid]) return Msg(playerid, "DEBUG: DeleteWeaponHud() return 1;");
	
	InfoTextDrawCreatedWeapons[playerid] = 0;
	
	TextDrawDestroy(InfoTextDrawWeapons[playerid]);
	
	ShowTextDraw(playerid, TD_Info_Weapons);
	
	UpdateWeaponHud(playerid);
	
	return 1;
}

stock UpdateAmmoHud(playerid)
{
	new fegyverhud[128];		
	Format(fegyverhud, "%d", GetPlayerAmmo(playerid));
	TextDrawSetString(InfoTextDrawAmmo[playerid], fegyverhud);
	TextDrawShowForPlayer(playerid, InfoTextDrawAmmo[playerid]);
}

stock UpdateArmorHud(playerid)
{
	new Float:newarmour;
	GetPlayerArmour(playerid, newarmour);
	if(newarmour < 0) return 1;
	new ertek = GetArmorBarErtek(newarmour);
	new fegyverhud[128];		
	Format(fegyverhud, "class_hud:bar_szurke%d", ertek);
	TextDrawSetString(InfoTextDrawBARARMOR[playerid], fegyverhud);
	TextDrawShowForPlayer(playerid, InfoTextDrawBARARMOR[playerid]);
	
	return 1;
}

stock UpdateHealthHud(playerid)
{
	new Float:newhealth;
	GetPlayerHealth(playerid, newhealth);
	new ertek = GetHealthBarErtek(newhealth);
	new fegyverhud[128];		
	Format(fegyverhud, "class_hud:healthbar%d", ertek);
	TextDrawSetString(InfoTextDrawHUD[playerid], fegyverhud);
	TextDrawShowForPlayer(playerid, InfoTextDrawHUD[playerid]);
}

stock GetAdmins()
{
	new count = 0;
	foreach(Jatekosok, i)
	{
		if(PlayerInfo[i][pAdmin] >= 1) count++;
	}
	
	return count;
}

stock Kendo(playerid, mit = 0) //egyértelmû, a többi stock-hoz.. :D
{
	switch(mit)
	{
		case 1..8: SetPlayerAttachedObject(playerid, KENDOSLOT, 18911+mit, 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754);
		default: RemovePlayerAttachedObject(playerid, KENDOSLOT);
	}
}
