new mapnev[32] = "Los Santos"; // map

new SzerverTipus = 0;

new AutomataSzerverNevTiltas = KI;

new 
	bool:debugmode = false,
	bool:karbantartas = false,
	bool:GameModeBetoltve = false
;

#define DebugMessage(%1,%2)  do{ if(debugmode) { new debugstring[128]; format(debugstring, 128, (%1), %2); printf("[DEBUG] %s", debugstring); } }  while(FALSE)

new AdminEllenorzes[MAX_PLAYERS][2], bool:AdminJelszoCheckelve[MAX_PLAYERS], adminjelszo[128];

new Tulaj[2] = 
{
	2, // Tompa
	0 // -
};

new SegedScripter[2] =
{
	0, // Ricci
	1427 // Brian
};

new bool:VehicleELM[MAX_VEHICLES], TLI[MAX_VEHICLES][2], SzirenaObject[MAX_VEHICLES], Float:SavedSzirenaPos[MAX_PLAYERS][MAX_OBJECT_TENGELY];
new Tankolas3D[MAX_VEHICLES];

new bool:CarFloodTimer = false;

new UtolsoCMD[MAX_PLAYERS][32];
new LoginTimeLimit[MAX_PLAYERS];
new bool:BanParancsKikuledve[MAX_PLAYERS] = false;
new bool:ReportElkuldve[MAX_PLAYERS] = false;
new bool:PayNSprayHasznalva = false;

//new InComingConnect[MAX_PLAYERS];

new KorhazType[MAX_PLAYERS];

new bool:ButorSzerkesztoMod = false, ButorSzerkesztotAktivalta = NINCS;
new bool:SokkoloAktivalva[MAX_PLAYERS] = false;
new bool:TrafiBuntetve[MAX_PLAYERS] = false;

new AdPoints[MAX_PLAYERS] = 0, bool:Hirdethet[MAX_PLAYERS] = false;

new bool:KocsiZeneSzol[MAX_PLAYERS] = false, KocsiZeneURL[MAX_VEHICLES][256], StreameltKocsiID[MAX_PLAYERS];

#define MAX_WEAPON_DAMAGE (5)
new PlayerWeaponDamageType[MAX_PLAYERS][MAX_WEAPON_DAMAGE];

new BackTime = 15; //15 secenként checkel - Mert ha egyszerre mentene elég durva lag lenne
new BackTimeSave = 900; //15perc - Player mentés - SQL

//new hirdetesidokoz = 900; // 15 percenként lesz egy randomhirdetés

new KreszKerdesek[10][3][128] = {
	// Kérdés - Válaszok - Helyes válasz száma
	{"Mennyi a városban a megengedett sebesség?", "50MPH\n90MPH\n130MPH", 0}, // 0
	{"Mennyi városon kívül a megengedett sebesség?", "75MPH\n60MPH\n90MPH", 2}, // 1
	{"Mennyi az autópályán megengedett sebesség?", "100MPH\n130MPH\n150MPH", 1}, // 2
	{"Az út melyik oldalán kell haladni?", "Bal\nJobb\nKözépen", 1}, // 3
	{"Köteles -e zebránál átengedni a gyalogost?", "Igen\nNem\nAhogy a kedvem tartja", 0}, // 4
	{"Mi a teendõ, ha egy szirénázó jármû jön maga mögött?", "Nem kell FIGYELEMbe venni\nLehúzodok, és elengedem", 1}, // 5
	{"Köteles -e bekötni a biztonsági övet?", "Igen\nNem", 0}, // 6
	{"Mit tesz, ha egy sérültet lát az út szélén?", "Megállok, és segítek neki, szükség esetén mentõt hívok\nNem segítek rajta", 0}, // 7
	{"Köteles -e bekapcsolni este a fényszórókat?", "Nem\nIgen", 1}, // 8
	{"Köteles -e betartani a féktávot?", "Igen\nNem", 0} // 9
};

new JailSzovegek[30][2][128] = {
	{"Mindig kultúráltan fogok viselkedni, mind játékos, mind pedig adminnal szemben.", "I'll always be polite to players, and to administrators too."},
	{"Tudok veszíteni és ha veszítek, nem balhézok miatta.", "I know how to lose, I won't say anything if I lose a fight."},
	{"Mindig segítem az újonc, kezdõ játékosokat.", "I'll always help new players."},
	{"Mindig úgy játszok, ahogy a való életben is tenném!", "I'll always act the same as I'd react in SeeRPG."},
	{"Nem szidok semmilyen más játékost, nem mondom senkire, hogy õ nonos!", "I'll never say bad things to other players, I'll never call someone a noob."},
	{"Ha panaszom van, akkor felrakom a panaszkönyvbe képpel együtt!", "If I have a problem with someone, I'll report him on the forums."},
	{"Sosem foglalom el a rendõrséget a frakciómmal.", "I'll never take over the police station with my friends."},
	{"Sosem lépek ki igazoltatás, rablás elõl!", "I'll never evade police arrest."},
	{"Nem lövök animba senkit szó nélkül!", "I'll never shoot at people randomly, without saying anything."},
	{"Nem rabolok központokban, fõleg a városházán!", "I'll never rob people at bigger buildings like the City Hall."},
	{"Sosem rabolok, lövöldözök a gyárakban!", "I'll never rob or shoot people in the Factories."},
	{"Nem ölöm meg az oktatót, csak azért, mert megbuktatott!", "I'll never kill my driving teacher just because I failed."},
	{"Sosem lövök rá a benzinszállító kamionra!", "'I'll never shoot on trucks that deliver fuel."},
	{"Hackerkedni csak egy órában egyszer lehet!", "I'll only hack once an hour."},
	{"Tudomásul veszem, hogy a rendõrök bemehetnek a gettóba!", "Yes, police can go into gang turfs."},
	{"Megértettem, hogy a rendõrök lecsukhatnak a kamera alapján!", "Yes, police can arrest me if I am seen on CCTV cameras."},
	{"Sosem rabolok utalásos rablással!", "When kidnapping people, I'll never ask the police to transfer the money on my bank account."},
	{"A rendõrök tudhatják, hol vannak az illegális frakciók bázisai!", "Police forces know where the gang turfs are."},
	{"Megértettem, hogy a rendõr megbilincselhet animban is!", "The police can cuff me when I'm injured."},
	{"Sosem igérek OOC semmit, mivel ez tilos!", "I'll never make promises OOCly!"},
	{"A szolgálatban lévõ mentõsöket, és taxisokat nem rabolom ki, és nem ölöm meg!", "I'll never hurt on-duty paramedics and taxi drivers."},
	{"Mindig normálisan viselkedek az adminok, és a játékostársaimmal szemben is!", "I'll always be polite to players, and to administrators too."},
	{"Mindig tisztelettel beszélek az adminokkal, hisz õk segítenek nekem nap mint nap!", "I'll always respect the administrators because they help us everyday."},
	{"Nem használok cleo modot, és bármilyen egyébb más nem megengedett programokat!", "I'll never use CLEO or Cheat programs."},
	{"Mindig használom a /me parancsot.", "I'll always use the /me command."},
	{"Nem hírdetek más szervert.", "I'll never hirdetés other servers."},
	{"Sosem verek át kezdõ játékosokat, hogy a javamra fordítsam a helyzetet.", "I'll never scam new players."},
	{"Nem leszek soha öngyilkos, mivel tudom, hogy ez örök bannal jár!", "I'll never commit suicide because I know I'll get a permanent ban for that."},
	{"Nem használok auto shortot, mivel tudom, hogy ez örök bannal jár!", "I'll never use macros to avoid the system because I know I'll get banned permanently."},
	{"Sosem floodolok, mivel tudom, hogy ez tilos.", "I'll never flood / spam anything in the game."}
};

new NBArlt[MAX_PLAYERS][8],NBIdlt[MAX_PLAYERS][8];
new BusinessInfos[33][8][] = {
	//Név, Szint, Típus, Ár, exx,exy,exz,exint
	{"Lepukkant, egyszerû konditerem","1",KONDI,"7970","772.5286","-5.4988","1000.7290","5"},
	{"Átlagos, normál felszereltségû konditerem","2",KONDI,"11820","773.9794","-78.3508","1000.6620","7"},
	{"Fejlett, igényes konditerem.","3",KONDI,"12210","774.0883","-49.8681","1000.5859","6"},
	{"Megkopott, egyszerû lottózó","1",LOTTOZO,"6970","-2158.6298","642.8589","1052.3750","1"},
	{"Normál, átlagos lottózó","2",LOTTOZO,"9730","834.4104","7.4448","1004.1870","3"},
	{"Ütött-kopott sztriptíz klub","1",SZTRIPTIZ,"16720","1212.0543","-26.2452","1000.9531","3"},
	{"Igényes berendezésû sztriptízklub","2",SZTRIPTIZ,"21702","1204.6689","-13.5429","1000.9218","2"},
	{"Lepukkant, igénytelen fodrászat","1",FODRASZ,"4280","411.7344","-22.7473","1001.8046","2"},
	{"Átlagos, normális fodrászat","2",FODRASZ,"5980","418.5597","-84.0683","1001.8046","3"},
	{"Kimagasló berendezésû fodrászat","3",FODRASZ,"8720","411.9633","-54.2848","1001.8984","12"},
	{"Átlagos tetováló szalon","1",TETOVALO,"5920","-204.3519","-44.1137","1002.2734","3"},
	{"Igényes megjelenésû tetováló szalon","2",TETOVALO,"8120","-204.3626","-8.8117","1002.2734","17"},
	{"Egyszerû kinézetû, átlagos szórakozóhely","1",DISCO,"14590","493.4414","-24.5971","1000.6796","17"},
	{"Lepukkadt megjelenésû ruhabolt","1",RUHA,"9970","207.7050","-110.8426","1005.1328","15"},
	{"Átlagos kinézetû ruhabolt","2",RUHA,"11420","207.0937","-140.0555","1003.5078","3"},
	{"Átlagos, nagyobb felszereltségû ruhabolt","3",RUHA,"13870","203.7832","-50.2415","1001.8046","1"},
	{"Kimagasló megjelenésû, és választékú ruhabolt","4",RUHA,"15420","204.2851","-168.4965","1000.5234","14"},
	{"A környékbeli legmodernebb, és legjobb ruhabolt.","5",RUHA,"19935","161.4182","-96.8964","1001.8046","18"},
	{"Lepukkant, egyszerû gyorsbüfé","1",GYETTEREM,"7880","459.5636","-88.4804","999.5546","4"},
	{"Normál kinézetû, és felszereltségû gyorsbüfé","2",GYETTEREM,"13205","377.1642","-192.9599","1000.6401","17"},
	{"Lepukkant, kocsma tipusú bar","1",BAR,"5420","-228.6891","1401.0782","27.7656","18"},
	{"Átlagos, hétköznapi bar","2",BAR,"6980","681.5111","-451.5546","-25.6171","1"},
	{"Egy szimpatikus, igényes kinézetû bar","3",BAR,"8930","501.9431","-68.1220","998.7578","11"},
	{"Egy átlagos, nagy választékú szexbolt","1",SEXBOLT,"7750","-100.3507","-24.3751","1000.7187","3"},
	{"Kis választékú, lepukkadt 24/7","1",ENBOLT,"8760","-27.3356","-57.8278","1003.5468","6"},
	{"Normális kinézetû, de kis választékú 24/7","2",ENBOLT,"8420","-27.3517","-31.0433","1003.5572","4"},
	{"Átlagos, hétköznapi 24/7","3",ENBOLT,"10090","-30.9169","-91.5658","1003.5468","18"},
	{"Nagyobb választékú, igényesebb 24/7","4",ENBOLT,"11940","-26.1856","-140.9163","1003.5468","16"},
	{"Nagy területü, nagy választékú 24/7","5",ENBOLT,"14110","6.1081","-30.9167","1003.5494","10"},
	{"Teljes felszereltségû 24/7","6",ENBOLT,"17910","-25.7220","-187.8215","1003.5468","17"},
	{"Kimagasló stilusú étterem","1",ETTEREM,"31720","-794.9678","489.7527","1376.1953","1"},
	{"GETTÓ STÚDIÓ","1",STUDIO,"999","1204.6119","-793.2681","1084.0181","1"},
	{"GAZDAG STÚDIÓ","2",STUDIO,"999","1230.2854","-862.9935","1083.9882","1"}
};

enum ButorAdat 
{
	butID,
	butHaz,
	butButor,
	Float:butPos[6], butVW, butInt,
	butLeraktaIdo, butLeraktaKi[MAX_PLAYER_NAME],
	butTipus[50],
	butInv[10],butInvM[10],butInvE[10],butPIN,
	//Nem mentett
	butObj
};
new ButorInfo[MAX_BUTOR][ButorAdat], ButorEditLID[MAX_PLAYERS][30], ButorEditSEL[MAX_PLAYERS];

stock randomEx(min, max)
{
    new rand = random(max - min) + min;    
    return rand;
}

stock SetValosIdo()
{
	new tmphour = 0;
	gettime(tmphour);
	SetWorldTime(tmphour + 1);
	return 1;
}

fuggveny CarFloodReset()
{
	PlayerForeach(p)
	{
		if(GetPlayerVirtualWorld(p) == HACKER_VW)
		{
			SetPlayerVirtualWorld(p, 0);
		}
	}
	VehicleForeach(v)
	{
		if(GetVehicleVirtualWorld(v) == HACKER_VW)
		{
			KocsiRespawn(v);
			SetVehicleVirtualWorld(v, 0);
		}
	}
	ABroadCast(COLOR_LIGHTRED, "CarFloodReset() függvény lefutott!", 1);
	CarFloodTimer = false;
}

fuggveny MyHttpResponse(index, response_code, data[])
{
    new
        buffer[ 128 ];
    if(response_code == 200) //Did the request succeed?
    {
        //Yes!
        format(buffer, sizeof(buffer), "The URL replied: %s", data);
        SendClientMessage(index, 0xFFFFFFFF, buffer);
    }
    else
    {
        //No!
        format(buffer, sizeof(buffer), "The request failed! The response code was: %d", response_code);
        SendClientMessage(index, 0xFFFFFFFF, buffer);
    }
}

stock EmailKuldes(playerid, kinek[], targy[], uzenet[])
{
	new post[512], salt[26] = "9~R)SzEq7d5qWzD[LRfGD^2D";
	
	Format(post, "?kinek=%s&targy=%s&uzenet=%s&salt=%s", kinek, targy, uzenet, salt);
	DebugMessage("%s", post);
	
	HTTP(playerid, HTTP_POST, "ricardo.ls-rp.hu/szerveremail.php", post, "MyHttpResponse");
	return 1;
}

stock DeleteAllPlayerAttachObject(playerid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
	}
	return 1;
}

new PlayerMapIcons[MAX_PLAYERS] = 0;

stock CreatePlayerMapIcon(Float:X, Float:Y, Float:Z, IconID, IconStyle)
{
	if(PlayerMapIcons[playerid] == 100) continue;
	PlayerMapIcons[playerid] ++;
	SetPlayerMapIcon(playerid, PlayerMapIcons[playerid], X, Y, Z, IconID, 0, IconStyle);
	return 1;
}

//Bútorok
new Asztalok[62] = {2617, 2572, 2571, 2357, 2119, 2118, 2117, 2116, 2115, 2112, 2111, 2110, 2109, 2086, 2085, 2080, 2077, 2032, 2031, 2030, 2029, 1770, 1737, 15037, 941, 1813, 1815, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 2081, 2082, 2083, 2084, 2126, 2234, 2235, 2236, 1433, 1516, 15494, 1827, 2311, 2313, 2314, 2315, 2319, 2321, 2346, 2370, 2635, 2637, 2644, 2747, 2762, 2763};
new Szekek[35] = {1432, 643, 1663, 1671, 1714, 1715, 1716, 1720, 1721, 1722, 1739, 1805, 1806, 1810, 1811, 1825, 2079, 2096, 2120, 2121, 2123, 2124, 2125, 2309, 2310, 2350, 2356, 2636,  2723, 2724, 2776, 2777, 2788, 2802, 2807};
new FotelKanape[40] = {2290, 1768, 1766, 1764, 1763, 1761, 1760, 1757, 1756, 1753, 1717, 1712, 1710, 1709, 1707, 1706, 1703, 1702, 1754, 1755, 1758, 1759, 1762, 1765, 1767, 1769, 2291, 2292, 2295, 1704, 1705, 1708, 1711, 1723, 1724, 1726, 1727, 1728, 1729, 1735};
new Szekreny[35] = {2091, 2093, 2296, 2297, 1416, 1417, 1730, 1740, 1741, 1752, 1743, 2025, 2046, 2063, 2087, 2088, 2089, 2094, 2095, 2161, 2162, 2163, 2164, 2167, 2200, 2204, 2210, 2211, 2306, 2307, 2323, 2328, 2329, 2330, 14455};
new Agyak[30] = {1700, 1701, 1725, 1745, 1771, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 2090, 2298, 2299, 2300, 2301, 2302,  2563, 2566, 2575, 2603, 14446, 14861, 1647};
new Televizio[22] = {1518, 1747, 1748, 1749, 1750, 1751, 1752, 1781, 1791, 1792, 2312, 2316, 2317, 2318, 2320, 2322, 2595, 2596, 2648, 2700, 14806, 24866};
new Iroasztalok[6] = {2205, 2206, 2185, 2184, 2605, 2607};
new ButorAjtok[5] = {1499, 977, 1491, 1492, 1497};
new DekTargy[5] = {1736, 14705,  1962, 1961, 1960};
new Festmenyek[38] = {3964, 3963, 3962, 2289, 2288, 2287, 2286, 2285, 2284, 2283, 2282, 2281, 2280, 2279, 2278, 2277, 2276, 2275, 2274, 2273, 2272, 2271, 2270, 2269, 2268, 2267, 2266, 2265, 2264, 2263, 2262, 2261, 2260, 2259, 2258, 2257, 2256, 2255};
new PadSzonyeg[11] = {1828, 2815, 2817, 2818, 2833, 2834, 2835, 2836, 2841, 2842, 2847};
new Lampak[20] = {2239, 2238, 2196, 2108, 2107, 2106, 2105, 2076, 2075, 2074, 2073, 2072, 2071, 2070, 2069, 2026, 2023, 1893, 1734, 1731};
new HangTechRadio[18] = {1809, 1839, 1840, 1841, 2099, 2100, 2101, 2102, 2103, 2104, 2226, 2230, 2231, 2229, 2232, 2227, 2233, 14820};
new Hangszerek[4] = {19609, 19317, 19318, 19319};
new EgyElEszk[11] = {1718, 1719, 1785, 1786,  1782, 1783, 1787, 1788, 1790, 2028, 2190};
new FurdoSzoba[22] = {1208, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2738, 2839, 2741, 2741, 2742, 11707};
new Konyha[27] = {2013, 2017, 2135, 2136, 2236, 2337, 2339, 2014, 2015, 2016, 2018, 2019, 2020, 2022, 2152, 2143, 2145, 2148, 2151, 2152, 2153, 2154, 2155, 19915, 19916, 19933, 11743};
new Novenyek[32] = {626, 627, 628, 630, 631, 632, 633, 646, 644, 948, 949, 950, 2001, 2010, 2011, 2194, 2195, 2241, 2240, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2811, 3439};
new Edzogepek[6] = {2627, 2628, 2629, 2630, 2631, 2632};
new Futes[4] = {1661, 1738, 16780, 1657};
new Kandallo[2] = {11724, 11725};

new RicardoVilla;
new LSPDKAPU;

new
	REPULO_LS, REPULO_SF, REPULO_LV,
	VONAT_LS, VONAT_SF, VONAT_LV
;

new bool:TextDrawLoaded[MAX_PLAYERS] = false;

//#define CAR_AMOUNT 700 //Change to Your Vehicle Amount
#define UZEMANYAGTIPUS_BENZIN 0
#define UZEMANYAGTIPUS_DIESEL 1
new Gas[MAX_VEHICLES][2];
new Benzin[MAX_VEHICLES];
new KocsiNeonBe[MAX_VEHICLES];
new MunkaFolyamatban[MAX_PLAYERS];
new Text3D:TAXI3D[MAX_VEHICLES];

forward JarmuPozicio(vehicleid, Float:x, Float:y, Float:z);
forward VehicleHasDriver(vehicleid);
forward NPCSpawn(npc);
forward LopasVege(carid);
forward CCTVKeyTimer(playerid);

forward Dropoff_ECSY( playerid, type );
forward EcstasyMinus( playerid );
new EcstasyTimer[MAX_PLAYERS][ 2 ];
new EcstasyMennyiseg[MAX_PLAYERS];

forward GyemantBetoltes();
forward GyemantMentes();
forward GyemantPlusz();

new Text3D:ArveresNPCText;
new Teleztek[MAX_PLAYERS];

new bool:HouseOnGPS[MAX_PLAYERS] = false;
new bool:AttacheInfoSave = false;

new Text3D:CarSign[MAX_VEHICLES];

new bool:ArmourFelveve[MAX_PLAYERS] = false;

new HifiObjectLerakas[MAX_PLAYERS], HifiLerakva[MAX_PLAYERS];
new HifiZene[MAX_PLAYERS][256];

new jatekosJogsitCsinal[MAX_PLAYERS] = 0, jatekosJogsiCPStatusz[MAX_PLAYERS] = 0, jatekosMilyenJogsitCsinal[MAX_PLAYERS];

new PlayerChannel[MAX_PLAYERS] = 0;

new EladasIdo[3] = {
	14, // Ház eladási ideje		|	Alapértelmezett: 14nap (2hét)
	14, // Kocsi eladási ideje	|	Alapértelmezett: 14nap (2hét)
	14, // Biz eladási ideje		|	Alapértelmezett: 14nap (2hét)
};

#define MAX_BIZ (50 + 1) // +1 a 0 miatt
enum bAdat
{
	bID,
	bNev[MAX_BIZNAME],
	bAr,
	bTulaj[MAX_PLAYER_NAME],
	bType,
	bLvl,
	bSzef,
	Float:bEnPos[3],
	bEnPosInt,
	bEnPosVW,
	Float:bExPos[3],
	bExPosInt,
	bExPosVW,
	//Nem mentõdõ
	bPick
};
new bInfo[MAX_BIZ][bAdat];

#define MAX_BUYS (MAX_BIZ * 2)
enum BuyData
{
	buID,
	buType,
	buBiz,
	Float:buPos[3],
	buVW,
	buInt,
	//Nem mentõdõ
	buPick
};
new buInfo[MAX_BUYS][BuyData];

enum kBankrobInfo
{
	TagokSzama,
	HackerekSzama,
	TolvajokSzama,
	kTagok[10],
}

enum noclipenum
{
	cameramode,
	flyobject,
	mode,
	lrold,
	udold,
	lastmove,
	Float:accelmul
}
new noclipdata[MAX_PLAYERS][noclipenum];

enum hifiInfo
{
	hID,
	hVan,
	Float:hX,
	Float:hY,
	Float:hZ,
	Float:hRx,
	Float:hRy,
	Float:hRz,
	hLerako[256],
	hObject,
	hURL[256]
}
new HifiInfo[MAXHIFI][hifiInfo];

enum SAZONE_MAIN 
{
	SAZONE_NAME[28],
	Float:SAZONE_AREA[6]
};

static const gSAZones[][SAZONE_MAIN] = {  // Majority of names and area coordinates adopted from Mabako's 'Zones Script' v0.2
	//	NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

new kBankrob[MAX_PLAYERS][kBankrobInfo];
new kBankrober[MAX_PLAYERS];
new bool:KaszinoSzef = true;
//new VoltKaszinoRob = false;
//new kBankrobSzefTimer = -1;
new VisszaKRobbol = 0;

new PlayerText[MAX_PLAYERS][MAX_PLAYERTEXT];

new PlayerNumber[MAX_PLAYERS];

new LoginPassword[MAX_PLAYERS][MAX_PASSWORD_HOSSZ];
new LoginPWKitoltve[MAX_PLAYERS] = 0;

new ErikIP[16];

new bool:GodMode[MAX_PLAYERS];

new GazAlarc[MAX_PLAYERS];

new SetPlayerNewFrakcioRang[MAX_PLAYERS];
new MelyikRangotSzerkeszti[MAX_PLAYERS];

new MennyiszerLop[MAX_VEHICLES];

new Text3D:HalalAnim3D[MAX_PLAYERS];
new bool:HalalAnim[MAX_PLAYERS] = false;
new JatekosHalal[MAX_PLAYERS] = 0;
new AnimTimer[MAX_PLAYERS];

//new RendszamKrealva[MAX_VEHICLES] = 0;

enum uInfo
{
	uPlayer,
	uHaz,
	uKocsi,
	uBiz,
	uTerulet,
	uFrakcio,
	uRaktar,
	uGazdasag,
	uButor,
	uHotel
};
new UpdatePerSec[uInfo];
new UpdateFolytatodik[uInfo];
new checkprop;
new bool:Csendvan;

enum idoInfo
{
	iVolt,
	iMost,
	iLesz,
	bool:iValtas
};
new IdoJaras[idoInfo];

new Varosok[VAROSTERULESWAT];

enum
{
	ELLENORZES_HIRDETES,
	ELLENORZES_SZIDAS,
	ELLENORZES_MINDKETTO,
	ARVERES_TIPUS_HAZ,
	ARVERES_TIPUS_KOCSI,
	INAKTIV_HAZ,
	INAKTIV_KOCSI,
	JELZES_COLOR_YELLOW,
	JELZES_NARANCS,
	JELZES_PIROS,
	KOCSI_MOTOR,
	KOCSI_LAMPA,
	KOCSI_RIASZTO,
	KOCSI_AJTO,
	KOCSI_MOTORHAZTETO,
	KOCSI_CSOMAGTARTO,
	KOCSI_OBJEKTIV,
	HP_SET,
	HP_GIVE,
	HP_GET,
	VERSENY_BEERT,
	VERSENY_SHOCK,
	VERSENY_KILEPES,
	UTZAR_KICSI,
	UTZAR_NAGY,
	UTZAR_TOROL,
	UTZAR_TOROL_MOST
};

enum aInfo
{
	bool:aElinditva,
	aVarakozas,
	aIdo,
	aTipus,
	aID,
	aLicitalok[3],
	aLicitek[3],
	aLicit,
	aLicitalo,
	aLicitaloVolt[MAX_PLAYER_NAME],
	aKezdoLicit
}
enum avInfo
{
	bool:vVan,
	vTipus,
	vID,
	vKezdoLicit
}
new Aukcio[aInfo];
new bool:Licitalt[MAX_PLAYERS];

enum htInfo
{
	bool:hVan,
	hIdo,
	hObject[5],
	Float:hPos[3],
	Text3D:hSzoveg,
	hOka,
	hKie[MAX_PLAYER_NAME],
	hMegolte[MAX_PLAYER_NAME]
}
new HullaInfo[MAX_HULLA][htInfo];

enum piInfo
{
	bool:pVan,
	pPickup,
	pTartalom[256]
}
new PickupInfo[MAX_INFOPICKUP][piInfo];
enum utzarInfo
{
	bool:uVan,
	uTipus,
	Float:uHely[4],
	uObject,
	Text3D:u3D,
	uPickup[4],
	hOka,
	hKie[MAX_PLAYER_NAME]
}
new Utzarak[MAX_PLAYERS][utzarInfo];

new AdminJarmu[MAX_VEHICLES];

new bool:Erosites[MAX_PLAYERS];
new ErositesIdo[MAX_PLAYERS];
new CsomagszallitoIdo[MAX_PLAYERS];
new Gokartozas[MAX_PLAYERS];
/*new swatsilenced;
new swatdeagle;
new swatmp5;
new swatm4;
new swatshotgun;
new swatcombat;
new swatsniper;*/
// HEROIN
new HeroinBelott[MAX_PLAYERS];
new Kanal[MAX_PLAYERS];
new Fecskendo[MAX_PLAYERS];
new HeroinTimer[MAX_PLAYERS];
new HeroinTimer2[MAX_PLAYERS];
new HeroinRossz[MAX_PLAYERS];
// KOKAIN
new KokainKartya[MAX_PLAYERS];
new KokainSzort[MAX_PLAYERS];
new KokainFelszivott[MAX_PLAYERS];
new KokainTimer[MAX_PLAYERS];
new KokainTimer2[MAX_PLAYERS];
new KokainRossz[MAX_PLAYERS];

new HotelElottiInti[MAX_PLAYERS];
//

new 
	PlayerText:LoginDraw[MAX_PLAYERS][MAX_LOGINDRAW],
	Text:iMsgTD[MAX_PLAYERS] = {Text:INVALID_TEXT_DRAW, ...},
	Text:pHUD[MAX_PLAYERS][MAXTD_PHUD],	
	Text:AdminSzoliTextDraw[MAX_PLAYERS] = {Text:INVALID_TEXT_DRAW, ...},
	Text:JobbalsoTD[MAX_PLAYERS] = {Text:INVALID_TEXT_DRAW, ...}
;

new UtkozesErzekenyseg = 6;

enum btav
{
	Kozel,
	Normal,
	Tavol
}


new BandaTiltottFegyver[4] =
{
	4,
	17,
	27,
	34
};

new BetiltottJarmu[11 + 6] =
{
	441, 464, 465, 501, 564, 594, // Játékszarok (6db)
	411, // Infernus
	425, // Hunter
	447, // Seasparrow
	432, // Rhino
	444, // Monster
	494, // Hotring Racer
	502, // Hotring Racer A
	503, // Hotring Racer B
	539, // Vortex
	571, // Gokart
	476 // Hustler
};

new TiltottFegyverek[7] =
{
	35,
	36,
	37,
	38,
	39,
	40,
	26
};

//Ezekkel a kocsikkal lehet vontatni
new Vontatokocsik[7] = {
	427,
	508,
	525,
	596,
	597,
	598,
	599
};

new MaxTalalas[10] = {
//Maximum cuccok
14, //Kokacserje MAG kereséskor max ennyit kap - 0
12, //Máklevél MAG kereséskor max ennyit kap - 1
10, //Cannabis MAG kereséskor max ennyit kap - 2
1,	//Kokain készítéskor (Kokacserje * ennyi) + 1-et kaphat max - 3
1,	//Heroin készítéskor (Máklevél * ennyi) + 1-et kaphat max - 4
1,	//Marihuana készítéskor (Cannabis * ennyi) + 1-et kaphat max - 5
100,	//Mati készítéskor (Mûanyag * ennyi) + 1-et kaphat max - 6

7,	//Kokacserje kereséskor max ennyit kap - 7
7,	//Máklevél kereséskor max ennyit kap - 8
7 //Cannabis kereséskor max ennyit kap - 9
};

new MunkaIdo[12] = {
	20*1000,	//Kokacserje
	20*1000,	//Máklevél
	20*1000,	//Cannabis
	10*1000,	//Kokain
	15*1000,	//Heroin
	20*1000,   //Marihuana
	12*1000,   //Material
	120*1000, //Belsõcsere
	150*1000, // Katana készítés

	15*1000,	//Kokacserje
	20*1000,	//Máklevél
	25*1000	//Cannabis
};

 ///////////////////// kirepülés a kocsiból ///////////////////// 
new Float:vhealth[MAX_PLAYERS];
new Float:velX[MAX_PLAYERS], Float:velY[MAX_PLAYERS], Float:velZ[MAX_PLAYERS];
 ///////////////////// kirepülés a kocsiból ///////////////////// 
new Float:KorhazSpawn[5][3] = {
	{2212.3806, -2238.5750, 1007.1136},
	{2214.1477, -2231.4910, 1007.1136},
	{2218.5364, -2225.5571, 1007.1136},
	{2209.1030, -2225.7451, 1007.1136},
	{2209.7871, -2223.4075, 1007.1136}
};

new Float:RaktarosMelo[7][3] = {
	{2576.0850, -1300.1222, 1044.1250},
	{2566.8811, -1293.0093, 1044.1250},
	{2572.7654, -1282.7318, 1031.4219},
	{2554.3584, -1296.4650, 1031.4219},
	{2547.1001, -1291.5789, 1031.4219},
	{2540.5391, -1295.4301, 1031.4219},
	{2534.7146, -1290.2662, 1031.4219}
};

/*new Float:VCkorhazSpawn[6][3] = {
	{1600.2177,1800.4941,18.9379},
	{1595.0233,1800.7738,18.9379},
	{1600.6663,1785.3251,18.9379},
	{1594.9910,1785.4026,18.9379},
	{1594.6591,1754.2743,20.3379},
	{1597.6715,1754.2090,20.3379}
};*/

new Float:jogsiPoziciokX[ 25 ] = {
    1106.3140,
    1172.9501,
    1230.8259,
    1314.1235,
    1366.8669,
    1431.2982,
    1478.0079,
    1655.0778,
    1686.6658,
    1706.5366,
    1819.4709,
    1901.8481,
    1963.9324,
    1905.2007,
    1823.7883,
    1743.2977,
    1505.6885,
    1359.6508,
    1246.9739,
    1194.0377,
    1155.0405,
    1147.2850,
    1167.3346,
    1110.8718
};
 
new Float:jogsiPoziciokY[ 25 ] = {
    -1743.1893,
    -1796.7332,
    -1855.2842,
    -1785.1779,
    -1734.2163,
    -1693.8678,
    -1594.0364,
    -1595.0688,
    -1660.5455,
    -1734.8544,
    -1794.8444,
    -1934.1899,
    -1870.8151,
    -1749.7268,
    -1681.5184,
    -1596.5863,
    -1589.8639,
    -1425.2789,
    -1398.2874,
    -1485.0640,
    -1570.5587,
    -1655.2695,
    -1714.3243,
    -1738.8702
};
 
new Float:jogsiPoziciokZ[ 25 ] = {
    12.9870,
    12.9761,
    12.9604,
    12.9604,
    12.9695,
    12.9591,
    12.9597,
    12.9708,
    12.9588,
    12.9600,
    12.9590,
    12.9610,
    12.9593,
    12.9589,
    12.9603,
    12.9670,
    12.9604,
    12.9653,
    12.5932,
    12.9588,
    12.8526,
    13.3588,
    13.2848,
    13.0516
};

new SzallitasNeve[SZALLITASOKSZAMA][32] = 
{
	{"Veszélyes Kémiai Reaktánsok"},
	{"Elektromos gépek"},
	{"Élelmiszeripari termékek"},
	{"Robbanékony elemek"},
	{"Fémáru"},
	{"Mûanyagáru"}
};

new Float:CsomagszallitoHely[11][3] = 
{
	{1731.1907, -2373.2253, 13.5469},
	{2414.4404, -2469.6829, 13.6250},
	{2281.1072, -51.0921, 27.0205},
	{2586.7930, 2296.4236, 10.8203},
	{319.6509, 869.0477, 20.3990},
	{-1667.7014, 2562.1594, 84.8987},
	{-2457.4443, 2292.4795, 4.7115},
	{-2418.0100, 969.1714, 45.0257},
	{-2521.7166, -620.6714, 132.3741},
	{-1426.1255, -1524.7098, 101.4751},
	{-1057.8390, -1195.6877, 128.9576}
};

new Float:CsomagszallitoSpawn[7][3] = 
{
	{-576.1262, -544.4818, 25.6987},
	{-557.4941, -545.1809, 25.6973},
	{-529.6496, -544.8171, 25.6973},
	{-520.3162, -544.5534, 25.6973},
	{-520.3192, -500.7959, 25.1614},
	{-529.7398, -500.3044, 25.2015},
	{-557.4404, -500.9411, 25.1486}
};

new Float:BerelhetoKocsiSpawn[8][4] = 
{
	{1778.3529, -1922.1187, 13.1988, 270.0325},
	{1778.3545, -1917.3217, 13.2012, 269.9802},
	{1778.4160, -1912.0582, 13.4722, 269.9999},
	{1778.4161, -1906.9952, 13.4670, 270.0000},
	{1778.4177, -1902.1514, 13.4666, 270.0210},
	{1778.6941, -1897.2372, 13.2779, 270.0001},
	{1778.6942, -1892.0562, 13.2826, 270.0001},
	{1778.6942, -1886.8552, 13.2838, 270.0000}
};

new Float:VizsgaJarmuSpawn[5][4] = 
{
	{1099.0015, -1760.8203, 13.1822, 89.7476},
	{1117.7212, -1746.4417, 13.3119, 269.1891},
	{1147.1444, -1745.8845, 13.0903, 270.2890},
	{1062.5896, -1751.8682, 13.3195, 270.0246},
	{1137.0681, -1735.3036, 13.5499, 270.5117}
};

new Float:KukasCheckpointok[15][3] = {
	{-2655.4604,710.2477,27.6434},
	{-2707.9526,440.6491,4.0553},
	{-2659.2981,285.1187,4.0554},
	{-2708.2583,109.0710,4.0554},
	{-2708.3250,-136.7189,4.0554},
	{-2732.9348,-312.8957,6.9148},
	{-2807.1274,63.9517,6.9145},
	{-2807.0474,234.6068,6.9069},
	{-2845.3701,713.0850,27.1492},
	{-2876.7920,1036.0713,34.7068},
	{-2701.3704,1284.2957,6.9116},
	{-2408.3320,1371.7112,6.9148},
	{-1950.8984,1284.5364,6.9148},
	{-1640.4492,1217.5002,6.9148},
	{-1563.8027,878.6342,6.9148}
};

#define KereskedoSpawnok (7)
new Float:KereskedoSpawn[KereskedoSpawnok][4] = {
	{2135.7471, -1126.9733, 25.3780, 90.0000},
	{ 2135.8528, -1131.3463, 25.3780, 90.0000},
	{2135.4819, -1136.1222, 25.3780, 90.0000},
	{2117.9958, -1123.2235, 25.3780, 178.0000},
	{2117.6726, -1130.3007, 25.3780, 178.0000},
	{2117.4382, -1136.8430, 25.3780, 178.0000},
	{2117.2593, -1143.3555, 25.3780, 178.0000}
};


new BelsoArak[1+36] = {
	0,
	50000, 50000, 60000, 70000, 100000,
	130000, 130000, 150000, 200000, 700000,
	160000, 220000, 150000, 100000, 100000,
	250000, 210000, 300000, 220000, 500000,
	510000, 600000, 220000, 400000, 1500000,
	1200000, 1700000, 1600000, 900000, 1400000,
	1600000, 2600000, 3000000, 3300000, 3500000,
	3200000
};

new VersenySzorzo[8] = { //Százalékban
	30,		//1.
	20,		//2.
	10,		//3.
	5,		//4.
	2,		//5.
	0,		//6.
	0,		//7.
	0		//8.
};

new Float:GPSPos[GPS_SZAMA][3] = {
	{1481.2554, -1769.1783, 18.7958}, // City hall (Városháza)
	{1552.5500, -1675.7769, 16.1953}, // Petrol Gas Station
	{2025.4102, -1405.5372, 17.2114}, // White Memorial Medical Center (nappali kórház)
	{1177.7301, -1325.5811, 14.0851}, // St. Vincent Medical Center (éjszakai kórház)
	{1932.3483, -1762.8586, 13.5469}, //
	{998.6038, -921.2417, 42.1797}, // 
	{1800.0686, -1892.4001, 13.4040}, // 
	{2226.4402, -1155.1466, 25.8040}, // 
	{2130.7942, -1146.4637, 24.5698}, //
	{1458.7164, -1022.8481, 23.8281}, //
	{1154.9506, -1769.7971, 16.5938}
};
new GPSNev[GPS_SZAMA][] = {
	"City hall (Városháza)",
	"LSPD (rendõrség)",
	"White Memorial Medical Center (nappali kórház)",
	"St. Vincent Medical Center (éjszakai kórház)",
	"South Station (déli benzinkút)",
	"East Station (északi benzinkút)",
	"Car Rentals (autóbérlõ)",
	"Jefferson motel",
	"Car Dealer (autókereskedõ)",
	"Los Santos Bank",
	"Driving School (jogosítvány)"
};

new Float:MunkahelyPos[MUNKAHELY_SZAMA][3] = {
	{2102.6555, -1806.5951, 13.5547}, // Pizzafutár
	{-496.9600, -551.2730, 25.4012}, // Csomagszallito depó
	{2795.2322, -1619.1111, 10.9219} // Úttisztító HQ
};
new MunkahelyNev[MUNKAHELY_SZAMA][] = {
	"Ételszállító",
	"Csomagszállító állomás",
	"Gyártelep"
};

//Hirdetesek
enum hirInfo
{
	hirVan,
	hirFelado[MAX_PLAYER_NAME],
	hirTeloszam,
	hirSzoveg[96],
	hirIdo
}
new HirInfo[60][hirInfo];

//Versenyhez

enum uzInfo
{
    sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};
new UtzarInfo[MAX_UTZAR][uzInfo];

enum rinfo
{
	rStatusz,
	rEpitesAlatt,
	rCP,
	rInditotta,
	rIndul,
	rElindult,
	rNev[60],
	rSaveNev[32],
	rDij,
	Float:rSzorzo,
	rNyeremeny,
	rEngedelyezettKocsik[25],
	rBeert,
	rHelyezes[6]
}
new RaceInfo[RACESLOTOK][rinfo];
new Float:RaceStart[RACESLOTOK][3];
new Float:RaceCel[RACESLOTOK][3];
new Float:RaceCP[RACESLOTOK][RACEMAXCP][3];

enum xinfo
{
	xVersenyen,
	xCP,
	xKoviCP,
	xIdo,
	xEpites,
	xEpitesLoad,
	xEpitesCP,
	xHelyezes,
	xKocsi
}
new PlayerRaceInfo[MAX_PLAYERS][xinfo];

enum xtinfo
{
	bool:tNitroVolt,
	bool:tHidrVolt,
	tNitro,
	tNitroIdo,
	tKasztni,
 	tEMP
}
new PlayerRaceTuning[MAX_PLAYERS][xtinfo];

//static gTeam[MAX_PLAYERS];
new CurCol[MAX_PLAYERS] = 0;

new KocsiNeon[MAX_VEHICLES][2];
new BViadal[MAX_PLAYERS] = 10;
new BVStart = 0;
new BVIdo = 1800;
new BVJatekosok = 0;
new BVPenz = 0;
new TudReportolni[MAX_PLAYERS] = 0;
new TilosOlni = 0; 

new ExportFegyverID[MAX_PLAYERS] = 0;
new ExportDrogTipus[MAX_PLAYERS] = 0;

//new bool:TelefonElol[MAX_PLAYERS] = false;
//new TelefonMenu[MAX_PLAYERS] = 1;

new HazKulcs[MAX_PLAYERS] = NINCS;
new JarmuKulcs[MAX_PLAYERS] = NINCS;
new PSzam1[MAX_PLAYERS] = 0;
new PSzam2[MAX_PLAYERS] = 0;
new PSzam3[MAX_PLAYERS] = 0;
new PSzam4[MAX_PLAYERS] = 0;
new PSzam5[MAX_PLAYERS] = 0;
new PSzam6[MAX_PLAYERS] = 0;
new PSzam7[MAX_PLAYERS] = 0;
new PSzam8[MAX_PLAYERS] = 0;
new VanSzelvenye[MAX_PLAYERS] = 0;
new PSorsolas = 300; // másodperc
new talalatok[MAX_PLAYERS] = 0;
new RadioHallgatas[MAX_PLAYERS] = NINCS;

new Munkanevek[OSSZMUNKA][2][] =
{
	{"Nincs", "None"},//0
	{"Detektív", "Detective"},//1
	{"Ügyvéd", "Lawyer"},//2
	{"Prostituált", "Whore"},//3
	{"Drogdíler", "Drug Dealer"},//4
	{"Autótolvaj", "Car thief"},//5-
	{"Tolmács", "Interpreter"},//6
	{"Testõr", "Body Guard"},//7
	{"Fegyverkereskedõ", "Arms Dealer"},//8
	//{"!!! NEM HASZNÁLT MUNKA !!!", "!!! UNUSED JOB !!!"}, //9
	{"Kéményseprõ", "Chimney Sweepoer"},//9
	{"Úttisztító", "Street Sweepoer"},//10
	{"Boxoló", "Boxer"},//11
	{"Buszsofõr", "Bus Driver"},//12
	{"Újságos", "PaperBoy"},//13
	{"Hacker", "Hacker"},//14
	{"Csomagszállító", "Trucker"},//15
	{"Farmer", "Farmer"},//16
	{"Fûnyíró", "Lawnmower"},//17
	{"Építész", "Builder"},//18
	{"Páncélkészítõ", "Armor Maker"},//19
	{"Kukás", "Garbage"},//20
	{"Betörõ", "Housebreaker"},//21
	{"Pizzafutár", "PizzaBoy"},//22
	{"Favágó", "Lumberjack"},//23
	{"Targoncás", "Carman"},//24
	{"Útkarbantartó", "Road Maintenance"}//25
};
new LegalisMunkak[4][4][64] = {
	{MUNKA_UTTISZTITO, "Úttisztító", 0, "Street Sweeper"},
	{MUNKA_CSOMAGSZALLITO, "Csomagszállító", 0, "Trucker"},
	{MUNKA_KUKAS, "Kukás", 0, "Garbage"},
	{MUNKA_PIZZA, "Ételszállító", 0, "Pizza Delivery"}
};
new IllegalisMunkak[7][4][64] = {
	{MUNKA_FEGYVER, "Fegyverkereskedõ", 0, "Arms dealer"},
	{MUNKA_PROSTI, "Prostituált", 0, "Whore"},
	{MUNKA_DROG, "Drogdíler", 0, "Drug Dealer"},
	{MUNKA_AUTOTOLVAJ, "Autótolvaj", 0, "Car thief"},
	{MUNKA_HACKER, "Hacker", 0, "Hacker"},
	{MUNKA_PANCEL, "Páncélkészítõ", 0, "Armor Maker"},
	{MUNKA_BETORO, "Betörõ", 0, "Housebreaker"}
};

/*new LegalisMunkak[18][4][64] = {
	{MUNKA_DESWATTIV, "Detektív", 0, "Detective"},
	{MUNKA_UGYVED, "Ügyvéd", 0, "Lawyer"},
	{MUNKA_TESTOR, "Testõr", 0, "Body Guard"},
	//{MUNKA_autokereskedes, "!!! NEM HASZNÁLT MUNKA !!!", 999, "!!! UNUSED JOB !!!"},
	{MUNKA_KEMENYSEPRO, "Kéményseprõ", 0, "Chimney Sweeper"},
	{MUNKA_UTTISZTITO, "Úttisztító", 0, "Street Sweeper"},
	{MUNKA_BOXOLO, "Boxoló", 0, "Boxer"},
	{MUNKA_BUS, "Buszsofõr", 0, "Bus Driver"},
	{MUNKA_UJSAGOS, "Újságkihordó", 0, "PaperBoy"},
	{MUNKA_CSOMAGSZALLITO, "Csomagszállító", 0, "Trucker"},
	{MUNKA_FARMER, "Farmer", 0, "Farmer"},
	{MUNKA_FUNYIRO, "Fûnyíró", 0, "Lawnmower"},
	{MUNKA_EPITESZ, "Építész", 0, "Builder"},
	{MUNKA_KUKAS, "Kukás", 0, "Garbage"},
	{MUNKA_PIZZA, "Pizzafutár", 0, "Pizza Delivery"},
	{MUNKA_FAVAGO, "Favágó", 0, "Lumberjack"},
	{MUNKA_TARGONCA, "Targoncás", 0, "Carman"},
	{MUNKA_TOLMACS, "Tolmács", 0, "Interpreter"},
	{MUNKA_UTKARBANTARTO, "Útkarbantartó", 0, "Road Maintenance"}
};
new IllegalisMunkak[7][4][64] = {
	{MUNKA_FEGYVER, "Fegyverkereskedõ", 0, "Arms dealer"},
	{MUNKA_PROSTI, "Prostituált", 0, "Whore"},
	{MUNKA_DROG, "Drogdíler", 0, "Drug Dealer"},
	{MUNKA_AUTOTOLVAJ, "Autótolvaj", 0, "Car thief"},
	{MUNKA_HACKER, "Hacker", 0, "Hacker"},
	{MUNKA_PANCEL, "Páncélkészítõ", 0, "Armor Maker"},
	{MUNKA_BETORO, "Betörõ", 0, "Housebreaker"}
};*/

#if defined War_System
	new SzervezetSzinek[MAX_FRAKCIO-1] =
	{
		NINCS, // 1
		NINCS, // 2
		0xC003FF99, // 3
		NINCS, // 4
		COLOR_BLACK, // 5
		NINCS, // 6
		NINCS, // 7
		NINCS, // 8
		0xFFEE0399, // 9
		0x00DDFF99, // 10
		NINCS, // 11
		NINCS, // 12
		0x16BF0099, // 13
		NINCS, // 14
		NINCS, // 25
		0xFF000099, // 16
		NINCS, // 17
		NINCS// 20
	};
#endif

new Szervezetneve[MAX_FRAKCIO-1][3][32] = {
	/* Név | Rövidítés | Ékezet nélküli rövidítés */
	{"Los Santos Police Department", "LSPD", "LSPD"}, // 1
	{"N/A", "FBI", "FBI"}, // 2
	{"N/A", "ICG", "ICG"}, // 3 - BALLAS
	{"Los Santos Fire Department", "LAFD", "LAFD"}, // 4
	{"N/A", "SCF", "SCF"}, // 5 - MAFFIA
	{"Los Santos Government", "LSG", "LSG"}, // 6
	{"N/A", "NINCS", "NINCS"}, // 7 - rádió
	{"N/A", "NINCS", "NINCS"}, // 8
	{"N/A", "Bezrukov", "Bezrukov"}, // 9 - VAGOS
	{"N/A", "NINCS", "NINCS"}, // 10 - AZTEC
	{"N/A", "NINCS", "NINCS"}, // 11
	{"N/A", "NINCS", "NINCS"}, // 12
	{"N/A", "NINCS", "NINCS"}, // 13 - GSF
	{"N/A", "Bushido", "Bushido"}, // 14
	{"N/A", "NINCS", "NINCS"}, // 17
	{"N/A", "TCF", "TCF"}, // 16
	{"N/A", "NINCS", "NINCS"}, // 17
	{"N/A", "NINCS", "NINCS"} // 18
};

new bool:NAV_lefoglalasi_engedely[MAX_PLAYERS];

new SWATRangok[15][32] = {"SWAT Õrmester", "SWAT Törzsõrmester", "SWAT Fõtörzsõrmester", "SWAT Zászlós", "SWAT Törzszászlós", "SWAT FõTörzszászlós",
"SWAT Hadnagy", "SWAT Fõhadnagy", "SWAT Százados", "SWAT Õrnagy", "SWAT Alezredes", "SWAT Ezredes", "SWAT Dandártábornok", "SWAT Vezérõrnagy", "SWAT Altábornagy"};

new LeaderSkinek[MAX_FRAKCIO][2] = { 0,
	{283, 288}, // LSPD
	{165, 166}, // NNI
	{293, 293}, // Ballas
	{70, 70}, // Mentõ
	{124, 125}, // L.C.N.
	{187, 187}, // Önkormányzat
	{295, 295}, // Riporter
	{61, 61}, // Taxi
	{292, 292}, // LK
	{173, 173}, // Surenos
	{295, 295}, // Katonaság
	{295, 295}, // Oktató
	{270, 270}, // The Green Gang
	{147, 147}, // szerelõk
	{288, 288}, // VPOP
	{272, 126}, // UM
	{279, 279},
	{285, 285}// SWAT
};

new SkinekSzama[MAX_FRAKCIO-1] = { // frakció skinek
	10,//LSPD
	7,//NNI
	8,//BALLAS
	9,//MwENTÕK
	9,// LCN
	10, // ÖNKORI
	9,//Riporter
	11,//Taxi
	6,//LK
	10,//Surenos
	6,//Katonaság
	8,//Oktató
	12,//GSF
	7,// szerelõk
	9,//VPOP
	9,//UM
	3,//Tûzoltó
	1//swat
};
new Skinek[MAX_FRAKCIO-1][] = { // frakció skinek
	{280, 281, 267, 266, 265, 282, 283, 211, 217, 71}, // LSPD
	{163, 164, 165, 166, 233, 93, 286}, // NNI
	{142, 103, 102, 292, 296, 104, 293, 195}, // Ballas
	{274, 275, 276, 70}, // Mentõk
	{171, 98, 46, 223, 272, 124, 125, 126, 127}, // LCN
	{255, 240, 147, 258, 295, 71, 228}, // Önkormányzat
	{36, 37, 59, 60, 150, 170, 185, 187, 295}, //Riporter
	{61, 17,147, 187, 255, 171, 189, 253, 150, 172, 11}, // Taxi
	{30, 108, 109, 110, 292, 298}, // LK
	{114, 115, 116, 173, 174, 175, 193}, // Surenos
	{71, 73, 287, 295, 284, 191}, // Katonaság
	{228, 185, 223, 189, 172, 233, 57, 295}, // Oktató
	{105, 106, 107, 86, 149, 269, 270, 271, 237, 195, 65, 195}, // GSF
	{8, 42, 144, 153, 193, 147}, // szerelõ
	{280, 266, 281, 267, 282, 283, 69, 265, 288}, // VPOP
	{258, 291, 179, 127, 111, 72, 126, 113, 125}, // UM
	{277, 278, 279},//Tûzoltó
	{285}//swat
};

new Float:iTrailer[MAX_VEHICLES];

new Float:iKocsiHP[MAX_VEHICLES];
new Float:iNewKocsiHP[MAX_VEHICLES];

new Float:iPlayerHealth[MAX_PLAYERS];
new Float:iNewPlayerHealth[MAX_PLAYERS];
new Float:iPlayerArmour[MAX_PLAYERS];
new Float:iNewPlayerArmour[MAX_PLAYERS];
new iPlayerMoney[MAX_PLAYERS];
new iNewPlayerMoney[MAX_PLAYERS];
new iPlayerVirtualWorld[MAX_PLAYERS];
new iNewPlayerVirtualWorld[MAX_PLAYERS];
new iPlayerScore[MAX_PLAYERS];
new iNewPlayerScore[MAX_PLAYERS];
new iPlayerTeam[MAX_PLAYERS];
new iNewPlayerTeam[MAX_PLAYERS];
new iPlayerSkin[MAX_PLAYERS];
new iNewPlayerSkin[MAX_PLAYERS];
new iPlayerWeapon[MAX_PLAYERS];
new iNewPlayerWeapon[MAX_PLAYERS];
new Leutott[MAX_PLAYERS];

new nnicelpont[MAX_PLAYERS];
new Hazbanvan[MAX_PLAYERS];
new nnios[MAX_PLAYERS];
new bool:Leutve[MAX_PLAYERS];
new LeutveIdo[MAX_PLAYERS];
new AblakLent[MAX_VEHICLES];
new Ugrasok[MAX_PLAYERS][3];
new ReportolasIdo[MAX_PLAYERS];
new skine[MAX_PLAYERS];
new fegyvere[MAX_PLAYERS];
new bool:NPCKocsi[MAX_VEHICLES];
//new Text3D:KocsiRendszamID[MAX_VEHICLES];
new HatartAtlepte[MAX_PLAYERS];
new Nyomozott[MAX_PLAYERS];
new UMDuty[MAX_PLAYERS];
new DutyIdo[MAX_PLAYERS];
new AszoliIdo[MAX_PLAYERS];
new UttisztitoObject[MAX_PLAYERS][1];

//Globális Változók
enum diInfo
{
	dVan,
	Float:dPosX,
	Float:dPosY,
	Float:dPosZ,
	Float:dRotX,
	Float:dRotY,
	Float:dRotZ,
	Float:dScaleX,
	Float:dScaleY,
	Float:dScaleZ,
	dmodelid
};
new DivatInfo[3][MAX_PLAYERS][diInfo];
new MitModosit[MAX_PLAYERS];
new Kresz[MAX_PLAYERS];
new Text3D:Tanulo3D[MAX_VEHICLES];

new DivatBolt_SZEMUVEG[19][5][64] = {
	{"Piros szemüveg", "Szemüveg piros lencsével", 5000/DOLLAR_ARFOLYAM, 19006, SLOT_SZEMUVEG},
	{"Narancssárga szemüveg", "Szemüveg narancs lencsével", 5000/DOLLAR_ARFOLYAM, 19007, SLOT_SZEMUVEG},
	{"Zöld szemüveg", "Szemüveg zöld lencsével", 5000/DOLLAR_ARFOLYAM, 19008, SLOT_SZEMUVEG},
	{"Kék szemüveg", "Szemüveg kék lencsével", 5000/DOLLAR_ARFOLYAM, 19009, SLOT_SZEMUVEG},
	{"Rózsaszín szemüveg", "Szemüveg rózsaszín lencsével", 5000/DOLLAR_ARFOLYAM, 19010, SLOT_SZEMUVEG},
	{"Fekete szemüveg", "Szemüveg fekete lencsével", 5000/DOLLAR_ARFOLYAM, 19012, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Fekete retró szemüveg", 10000/DOLLAR_ARFOLYAM, 19022, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Kék retró szemüveg", 10000/DOLLAR_ARFOLYAM, 19023, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Lila retró szemüveg", 10000/DOLLAR_ARFOLYAM, 19024, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Rózsaszín retró szemüveg", 10000/DOLLAR_ARFOLYAM, 19025, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Sötét rózsaszín retró szemüveg", 10000/DOLLAR_ARFOLYAM, 19026, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Narancssárga retró szemüveg", 10000/DOLLAR_ARFOLYAM, 19027, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Citromsárga retró szemüveg", 10000/DOLLAR_ARFOLYAM, 19028, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Zöld retró szemüveg", 10000/DOLLAR_ARFOLYAM, 19029, SLOT_SZEMUVEG},
	{"Napszemüveg", "Szûrkés napszemüveg", 4000/DOLLAR_ARFOLYAM, 19030, SLOT_SZEMUVEG},
	{"Napszemüveg szemüveg", "Sárga napszemüveg", 10000/DOLLAR_ARFOLYAM, 19031, SLOT_SZEMUVEG},
	{"Napszemüveg szemüveg", "Teljesen fekete napszemüveg", 10000/DOLLAR_ARFOLYAM, 19033, SLOT_SZEMUVEG},
	{"Rendõr szemüveg", "Piros rendõrszemüveg", 20000/DOLLAR_ARFOLYAM, 19139, SLOT_SZEMUVEG},
	{"Rendõr szemüveg", "Kék rendõrszemüveg", 20000/DOLLAR_ARFOLYAM, 19140, SLOT_SZEMUVEG}
};
new DivatBolt_FEJKENDO[10][5][64] = {
	{"Fejkendõ", "Sötétkék mintás fejkendõ", 5000/DOLLAR_ARFOLYAM, 18891, SLOT_SAPKA},
	{"Fejkendõ", "Piros mintás fejkendõ", 5000/DOLLAR_ARFOLYAM, 18892, SLOT_SAPKA},
	{"Fejkendõ", "Piros fehér mintás fejkendõ", 5000/DOLLAR_ARFOLYAM, 18893, SLOT_SAPKA},
	{"Fejkendõ", "Cannabis-os fejkendõ", 5000/DOLLAR_ARFOLYAM, 18894, SLOT_SAPKA},
	{"Fejkendõ", "Halálfejes fejkendõ", 5000/DOLLAR_ARFOLYAM, 18895, SLOT_SAPKA},
	{"Fejkendõ", "Fekete fehér mintás fejkendõ", 5000/DOLLAR_ARFOLYAM, 18896, SLOT_SAPKA},
	{"Fejkendõ", "Fehér kék mintás fejkendõ", 5000/DOLLAR_ARFOLYAM, 18897, SLOT_SAPKA},
	{"Fejkendõ", "Zöld fehér mintás fejkendõ", 5000/DOLLAR_ARFOLYAM, 18898, SLOT_SAPKA},
	{"Fejkendõ", "Lila fehér mintás fejkendõ", 5000/DOLLAR_ARFOLYAM, 18899, SLOT_SAPKA},
	{"Fejkendõ", "Piros fehér mintás fejkendõ", 5000/DOLLAR_ARFOLYAM, 18893, SLOT_SAPKA}
};
new DivatBolt_SVAJCISAPKA[5][5][64] = {
	{"Svájci sapka", "Fekete svájci sapka", 5000/DOLLAR_ARFOLYAM, 18921, SLOT_SAPKA},
	{"Svájci sapka", "Piros svájci sapka", 5000/DOLLAR_ARFOLYAM, 18922, SLOT_SAPKA},
	{"Svájci sapka", "Kék svájci sapka", 5000/DOLLAR_ARFOLYAM, 18923, SLOT_SAPKA},
	{"Svájci sapka", "Terep svájci sapka", 5000/DOLLAR_ARFOLYAM, 18924, SLOT_SAPKA},
	{"Svájci sapka", "Piros fekete svájci sapka", 5000/DOLLAR_ARFOLYAM, 18925, SLOT_SAPKA}
};
new DivatBolt_BASEBALLSAPKA[12][5][64] = {
	{"Baseball sapka", "Terepszínû baseball sapka", 5000/DOLLAR_ARFOLYAM, 18926, SLOT_SAPKA},
	{"Baseball sapka", "Sötét-világoskékszínû baseball sapka", 5000/DOLLAR_ARFOLYAM, 18927, SLOT_SAPKA},
	{"Baseball sapka", "Sokszínû  baseball sapka", 5000/DOLLAR_ARFOLYAM, 18928, SLOT_SAPKA},
	{"Baseball sapka", "Szûrke fehér színû baseball sapka", 5000/DOLLAR_ARFOLYAM, 18929, SLOT_SAPKA},
	{"Baseball sapka", "Narancssárga-sárga színû baseball sapka", 5000/DOLLAR_ARFOLYAM, 18932, SLOT_SAPKA},
	{"Baseball sapka", "Fehér fekete színû mintás baseball sapka", 5000/DOLLAR_ARFOLYAM, 18933, SLOT_SAPKA},
	{"Baseball sapka", "Világospiros színû baseball sapka", 5000/DOLLAR_ARFOLYAM, 18934, SLOT_SAPKA},
	{"Baseball sapka", "Fekete szûrke baseball sapka", 5000/DOLLAR_ARFOLYAM, 18941, SLOT_SAPKA},
	{"Baseball sapka", "Szûrke baseball sapka", 5000/DOLLAR_ARFOLYAM, 18942, SLOT_SAPKA},
	{"Baseball sapka", "Zöld baseball sapka", 5000/DOLLAR_ARFOLYAM, 18943, SLOT_SAPKA},
	{"Baseball sapka", "Sárga fekete mintás baseball sapka", 5000/DOLLAR_ARFOLYAM, 18958, SLOT_SAPKA},
	{"Baseball sapka", "baseball sapka", 5000/DOLLAR_ARFOLYAM, 18961, SLOT_SAPKA}
};
new DivatBolt_KALAP[17][5][64] = {
	{"Kalap", "Szûrke fehér mintás kalap", 5000/DOLLAR_ARFOLYAM, 18945, SLOT_SAPKA},
	{"Kalap", "Szûrke divatos kalap", 5000/DOLLAR_ARFOLYAM, 18946, SLOT_SAPKA},
	{"Kalap", "Fekete elegáns mintás kalap", 5000/DOLLAR_ARFOLYAM, 18947, SLOT_SAPKA},
	{"Kalap", "Kék elengáns kalap mintás kalap", 5000/DOLLAR_ARFOLYAM, 18948, SLOT_SAPKA},
	{"Kalap", "Zöld elegáns kalap", 5000/DOLLAR_ARFOLYAM, 18949, SLOT_SAPKA},
	{"Kalap", "Piros elegáns kalap", 5000/DOLLAR_ARFOLYAM, 18950, SLOT_SAPKA},
	{"Kalap", "Sárga elegáns kalap", 5000/DOLLAR_ARFOLYAM, 18951, SLOT_SAPKA},
	{"Kalap", "Fekete vestern kalap", 5000/DOLLAR_ARFOLYAM, 18962, SLOT_SAPKA},
	{"Kalap", "Párduc kalap", 5000/DOLLAR_ARFOLYAM, 18970, SLOT_SAPKA},
	{"Kalap", "Fekete fehér mintás kalap", 5000, 18971, SLOT_SAPKA},
	{"Kalap", "Barna covboy kalap", 5000/DOLLAR_ARFOLYAM, 19095, SLOT_SAPKA},
	{"Kalap", "Fekete covboy kalap", 5000/DOLLAR_ARFOLYAM, 19096, SLOT_SAPKA},
	{"Kalap", "Fekete rendõr kalap", 5000/DOLLAR_ARFOLYAM, 19099, SLOT_SAPKA},
	{"Kalap", "Barna rendõr kalap", 5000/DOLLAR_ARFOLYAM, 19100, SLOT_SAPKA},
	{"Kalap", "Fehér elegáns kalap", 5000/DOLLAR_ARFOLYAM, 19488, SLOT_SAPKA},
	{"Kalap", "Gázmaszk", 5000/DOLLAR_ARFOLYAM, 19472, SLOT_SAPKA},
	{"Kalap", "asd2", 5000/DOLLAR_ARFOLYAM, 1915, SLOT_SAPKA}
};
new DivatBolt_SAPKA[5][5][64] = {
	{"Sapka", "Fekete télisapka", 3000/DOLLAR_ARFOLYAM, 18953, SLOT_SAPKA},
	{"Sapka", "Szûrke télisapka", 3000/DOLLAR_ARFOLYAM, 18954, SLOT_SAPKA},
	{"Sapka", "Fekete színû(repper) télisapka", 3000/DOLLAR_ARFOLYAM, 18964, SLOT_SAPKA},
	{"Sapka", "Piros fekete divatos sapka", 5000/DOLLAR_ARFOLYAM, 19067, SLOT_SAPKA},
	{"sapka", "Fekete szûrke divatos sapka", 5000/DOLLAR_ARFOLYAM, 19069, SLOT_SAPKA}
};
new DivatBolt_KARORA[13][5][64] = {
	{"Aranyóra", "Egy luxus arany óra", 150000/DOLLAR_ARFOLYAM, 19039, SLOT_KARORA},
	{"Bronz karóra", "Egy luxus bronz óra", 130000/DOLLAR_ARFOLYAM, 19041, SLOT_KARORA},
	{"Aranyóra 2", "Egy másik luxus arany óra", 150000/DOLLAR_ARFOLYAM, 19042, SLOT_KARORA},
	{"Ezüst karóra", "Egy luxus ezüst óra", 140000/DOLLAR_ARFOLYAM, 19040, SLOT_KARORA},
	{"Ezüst karóra 2", "Egy másik luxus ezüst óra", 140000/DOLLAR_ARFOLYAM, 19043, SLOT_KARORA},
	{"Egyszerû digitális óra (Lila)", "Lila színû egyszerû óra", 5000/DOLLAR_ARFOLYAM, 19044, SLOT_KARORA},
	{"Egyszerû digitális óra (Pink)", "Pink színû egyszerû óra", 5000/DOLLAR_ARFOLYAM, 19045, SLOT_KARORA},
	{"Egyszerû digitális óra (Zöld)", "Zöld színû egyszerû óra", 5000/DOLLAR_ARFOLYAM, 19046, SLOT_KARORA},
	{"Egyszerû digitális óra (Sötét Lila)", "Sötét lila színû egyszerû óra", 5000/DOLLAR_ARFOLYAM, 19047, SLOT_KARORA},
	{"Egyszerû digitális óra (Kék-Fekete)", "Kék-fekete csíkos egyszerû óra", 5000/DOLLAR_ARFOLYAM, 19048, SLOT_KARORA},
	{"Egyszerû digitális óra (Narancs-Fekete)", "Narancs-fekete mintás egyszerû óra", 5000/DOLLAR_ARFOLYAM, 19051, SLOT_KARORA},
	{"Egyszerû digitális óra (Rózsaszín-piros)", "Rózsaszín-piros mintás egyszerû óra", 5000/DOLLAR_ARFOLYAM, 19052, SLOT_KARORA},
	{"Kalap", "Golyóálló mellény", 5000/DOLLAR_ARFOLYAM, 19515, SLOT_KARORA}
};

new Text3D:Stand3D[MAX_PLAYERS];
new Float:PiacPos[MAX_PLAYERS][3];
new TankolasAra[MAX_PLAYERS];
new SegitBillentyu[MAX_PLAYERS], SegitStep[MAX_PLAYERS], KitSegit[MAX_PLAYERS], SegitTimer[MAX_PLAYERS], bool:Megnyomta[MAX_PLAYERS];
new GyartBillentyu[MAX_PLAYERS], GyartStep[MAX_PLAYERS], GyartTimer[MAX_PLAYERS], GyartMit[MAX_PLAYERS][4];
new UtJavitBillentyu[MAX_PLAYERS], UtJavitStep[MAX_PLAYERS], UtJavitTimer[MAX_PLAYERS];
new BillentyuInfo[6][2][20] =
{
	{32, "Ugrás"},
	{8, "Sprint"},
	{1024, "Sétálás"},
	{65536, "Y"},
	{131072, "N"},
	{262144, "H"}
};

new MP3Megy[MAX_PLAYERS];
new MpZene[MAX_PLAYERS];

enum SeeRPG_vehiclestream
{
    gStreamEnabled,
    gStreamURL[128],
    Float:gStreamRange
}

new SeeRPGVehicleStream[MAX_VEHICLES][SeeRPG_vehiclestream];

new LSBank_Lift_Kabin;

new LSBank_Lift_Ajtok_Fent[2];
new LSBank_Lift_Ajtok_Lent[2];
new LSBank_Lift_Statusz = NINCS;
new LSBank_FoAjto;
new LSBank_MasodAjto[2];
new LSBank_SzefAjto;
new LSBank_Jelszo[2][12];
new bool:AutoAjto[MAX_PLAYERS];
new bool:LoginFolyamatban[MAX_PLAYERS];
new Skinsel[MAX_PLAYERS];
new BementIdo[MAX_PLAYERS];

new BaratkozoSzemely[MAX_PLAYERS];
new BicajLampa[MAX_VEHICLES][2];
new Villogo[MAX_VEHICLES][4];

new RandomPlayerID[MAX_PLAYERS][32];
new MentoSzinek[21] =
{
	0xADFF2FFF, 0x90EE90FF, 0xFF4500FF, 0x4169FFFF, 0x9ACD32FF,
 	0xFFFF00FF, 0xDA70D6FF, 0x87CEFAFF, 0xFAFAD2FF, 0xFAEBD7FF,
	0x6495EDFF, 0x4EEE94FF, 0xC0FF3EFF, 0xFFFF00FF, 0xFFB90FFF,
 	0x7171C6FF, 0x9B30FFFF, 0xA2B5CDFF, 0xC0FF3EFF, 0xFFD700FF
};
//new bool:BarokMutatva[MAX_PLAYERS];
new PickupAntiFlood[MAX_PLAYERS];
new bool:Gyujtas[MAX_PLAYERS];
new Poloska[MAX_PLAYERS];
new bool:PoloskaHallgat[MAX_PLAYERS];

new TuningSzamolo[MAX_PLAYERS];
new KomponensID[MAX_PLAYERS][MAX_KOMPONENS];

new bool:Helyszinel[MAX_PLAYERS];
new Bankszamla_Belep[MAX_PLAYERS][2];
new UtalasSzamla[MAX_PLAYERS];
new bool:SzefInfok[MAX_PLAYERS];
new bool:KocsibanVan[MAX_PLAYERS];
#define LOGMERET 4096
new ParancsLogStr[LOGMERET];
new ChatLogStr[LOGMERET];
new ConnectLogStr[LOGMERET];

#define MAXNPCPARANCS 2
#define NPCPARANCS_SZUNET 0
#define NPCPARANCS_FOLYTAT 1

new INV[MAX_PLAYERS][2];

#define MAX_KINCS 20

enum TargyEnum
{
	Float:tPos[3],
	Text3D:tSzoveg,
	tTargyID,
	tVanLerakva,
	tObjectID
};
new KincsInfo[MAX_KINCS][TargyEnum];

new Targyak[8][2][64] = {
	{"Szobor",1276},
	{"Ereklye",3534},
	{"Gyémánt",2976},
	{"Tervrajz",3017},
	{"Egy zsák ékszer",1210},
	{"Egy palack szenteltvíz",2902},
	{"Ezer éves jegyzetek",2894},
	{"Több száz éves kép",2272}
};
new SASEngedely[MAX_PLAYERS];
new SASDuty[MAX_PLAYERS];
new KocsiIndexStat[MAX_VEHICLES];
new KocsiIndex[MAX_VEHICLES][4];
new TuzVan[2];
new Float:JelenlegiTuzPoz[3];
new AnimLekeres[MAX_PLAYERS];
new ViewStats[MAX_PLAYERS][2];
new Float:MAXHP = 100.0;
new Float:MAXARMOUR = 100.0;
// ============ Térkép Rendszer ============
#define MAX_ICONS 100

//new Text:resitd;
//new Text:zerotd;
//new Text:FeketesegTD;
//new Text:PirossagTD;

/*new Bar:EhsegBar[MAX_PLAYERS] = {INVALID_BAR_ID, ...};
new Bar:SzomjusagBar[MAX_PLAYERS] = {INVALID_BAR_ID, ...};*/

#define COLOR_LOGINDRAW (0xF7C25EAA)

new bool:JarmuInfoDrawMegjelenitve[MAX_PLAYERS] = false;

//==========================================
new Felhatalmazva[MAX_PLAYERS];
new Raktarengedely[MAX_PLAYERS];
new DMOff[MAX_PLAYERS];
new LoginTD[MAX_PLAYERS];
new Float:TuzSpawn[13][3] =
{
    {1410.5916, -1422.4386, 14.2031},
    {1080.4133, -1749.5842, 13.3712},
    {1434.7787, -1747.7072, 13.6093},
    {1525.5380, -1748.3971, 13.6125},
    {1538.9973, -1705.0225, 13.4415},
    {1546.6453, -1691.7317, 13.4947},
    {1871.0990, -1236.2474, 14.8721},
    {2114.3157, -1095.0354, 24.3758},
    {2362.1995, -1134.6399, 27.9902},
    {2529.5698, -1702.5322, 12.9503},
    {2309.0205, -1672.4303, 13.7403},
    {1652.7034, -1746.0179, 13.7083},
    {1710.3180, -1708.9414, 13.7170}
};
new Alszik[MAX_PLAYERS] = 0;
//new Bar:Bar_Almossag[MAX_PLAYERS];
new TargoncaDobozID[MAX_VEHICLES],TargoncaDobozCsatolva[MAX_VEHICLES];
//new KocsiGPS[MAX_VEHICLES] = 0;
new bool:LVBeDolgozik[MAX_PLAYERS];
new Nyelv_Tanul[MAX_PLAYERS];
new RPTeszt[MAX_PLAYERS], JoRPTesztValasz[MAX_PLAYERS],RPTesztHiba[MAX_PLAYERS];//RPTESZTKERDES
new TaskaKezbe[MAX_PLAYERS];
new TaskaVan[MAX_PLAYERS];
new Jarmu_VW[MAX_VEHICLES], Jarmu_Int[MAX_VEHICLES];
new Sokk[MAX_PLAYERS];
//SWATPAJZS
new Text3D: Swat3D[MAX_PLAYERS];
new pajzs1 = 0;
new pajzs2 = 0;
new pajzs3 = 0;
new swatpajzs = 0;
new pajzsnala[MAX_PLAYERS];
new spajzs1;
new spajzs2;
new spajzs3;
//SWATPAJS

new IndulasIdo;

new IDk[MAX_PLAYERS];
new Text3D:IDText[MAX_PLAYERS][MAX_PLAYERS];

new Segitik[MAX_PLAYERS];

static armedbody_pTick[MAX_PLAYERS];


new ElveszIdo[MAX_PLAYERS];
new PotKerek[MAX_PLAYERS];
new BolyaKezbe[MAX_PLAYERS];
new RuhatElvett[MAX_PLAYERS];
new bool:VanLVBankLezer;
new BankPass[24];
new lezer[21];
//Fegyver Anticheat
new bool:PlayerWeapons[MAX_PLAYERS][MAX_PLAYER_WEAPON], bool:OnplayerSpawnLefutott[MAX_PLAYERS];

new Korhaz[MAX_PLAYERS];
new Doboz[MAX_PLAYERS];
//new Laszlowkapu;
new PizzaSzallitasHaz[MAX_PLAYERS];
new Csengo[MAX_PLAYERS];


new Kuldetesben[MAX_PLAYERS];
new Float:BetorPos[MAX_PLAYERS][3];
new BetoroCucc[MAX_PLAYERS];
new Felni[MAX_PLAYERS];
new BuyedMatrica[MAX_PLAYERS];
new NeOn[MAX_PLAYERS];

new Fishing[MAX_PLAYERS];
new HuzzadVaze[MAX_PLAYERS];
new BotAKezbe[MAX_PLAYERS];

new BKUse[MAX_PLAYERS];
new Logining[MAX_PLAYERS];
static EmeletekNevei[21][] =
{
	"Földszint",
	"1.  - Ügyintézés",
	"2.  - Könyvtár",
	"3.  - 24/7 - Pizzeria",
	"4. ",
	"5. ",
	"6. ",
	"7. ",
	"8. ",
	"9. ",
	"10. ",
	"11. ",
	"12. ",
	"13. ",
	"14. ",
	"15. ",
	"16. ",
	"17. ",
	"18. ",
	"19.  - Önkormányzati Iroda",
	"20. "
};
static Float:Emeletpozicio[21] =
{
    0.0,		// 0.0,
    8.5479,		// 8.5479,
    13.99945,   // 8.5479 + (5.45155 * 1.0),
    19.45100,   // 8.5479 + (5.45155 * 2.0),
    24.90255,   // 8.5479 + (5.45155 * 3.0),
    30.35410,   // 8.5479 + (5.45155 * 4.0),
    35.80565,   // 8.5479 + (5.45155 * 5.0),
    41.25720,   // 8.5479 + (5.45155 * 6.0),
    46.70875,   // 8.5479 + (5.45155 * 7.0),
    52.16030,   // 8.5479 + (5.45155 * 8.0),
    57.61185,   // 8.5479 + (5.45155 * 9.0),
    63.06340,   // 8.5479 + (5.45155 * 10.0),
    68.51495,   // 8.5479 + (5.45155 * 11.0),
    73.96650,   // 8.5479 + (5.45155 * 12.0),
    79.41805,   // 8.5479 + (5.45155 * 13.0),
    84.86960,   // 8.5479 + (5.45155 * 14.0),
    90.32115,   // 8.5479 + (5.45155 * 15.0),
    95.77270,   // 8.5479 + (5.45155 * 16.0),
    101.22425,  // 8.5479 + (5.45155 * 17.0),
    106.67580,	// 8.5479 + (5.45155 * 18.0),
    112.12735	// 8.5479 + (5.45155 * 19.0)
};
new Lift_Objekt, LiftAjto_Objekt[2],
	Lift_Emeletajtok[21][2];

new Text3D:LiftLabel;

#define LIFT_STATUSZ_TETLEN     (0)
#define LIFT_STATUSZ_VARAKOZAS  (1)
#define LIFT_STATUSZ_MOZOG   (2)

new ElevatorState,
	ElevatorFloor;

#define SZINT_NINCS           (-1)

new ElevatorQueue[21], FloorRequestedBy[21];

forward OnVehicleLoseHealth(playerid, vehid, health); 
forward DrunkClean(playerid); 
forward Refix(playerid); 
forward Controllable(playerid);

forward LiftHivasa(playerid, floorid);
forward ShowLiftDialog(playerid);

forward Floor_OpenDoors(floorid);
forward Floor_CloseDoors(floorid);

forward Elevator_MoveToFloor(floorid);
forward Elevator_Boost(floorid);
forward Elevator_TurnToIdle();

forward ReadNextFloorInQueue();
forward RemoveFirstQueueFloor();
forward AddFloorToQueue(floorid);
forward IsFloorInQueue(floorid);
forward ResetElevatorQueue();

//forward IsAdmin(playerid);

forward DidPlayerRequestElevator(playerid);

forward Float:GetElevatorZCoordForFloor(floorid);
forward Float:GetDoorsZCoordForFloor(floorid);

new Tej[MAX_PLAYERS];
new PajzsFelrakva[MAX_PLAYERS];
new PajzsEloveve[MAX_PLAYERS];
new Balahordas[MAX_PLAYERS];
new Bala[3][MAX_VEHICLES];
new BalaAKocsin[MAX_VEHICLES];
new EmeloKeyTimer[MAX_PLAYERS];
new KeyTimer[MAX_PLAYERS];
new Emelo[MAX_PLAYERS];
new szlift[8];

new ChatAnim[MAX_PLAYERS];
new KaszinoCsekk[MAX_PLAYERS];

//================== Fegyver ================//
new EldobottFegyverObject[MAX_DROP_ITEMS];
new FegyverObjektek[200] =
{
   1575,  331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324, 325, 326, 342, 343, 344, -1,  -1 , -1 ,
   346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
   368, 369, 1575
};

#define MAX_BOJA 1000
enum bData
{
	Float:bPos[3],
	bObject
}
new BolyaInfo[MAX_BOJA][bData];

enum TaInfo
{
    Van,
    Float:tPos[3],
	tInt,
	tVW,
    tPenz,
	tKokain,
	tHeroin,
	tMarihuana,
	tFegyver[2],
	tObject,
	tMetamfetaminSzarmazek,
	tC4
};
new TaskaInfo[1000][TaInfo];

enum dData
{
    FegyverEldobAmmount[2],//ModelID & Bullets
    Float:FegyverEldobPosX,
    Float:FegyverEldobPosY,
    Float:FegyverEldobPosZ,
    FegyverEldobVWorld,
    FegyverEldobInterior
};
new DropInfo[MAX_DROP_ITEMS][dData];
new EldobottPenzObject[MAX_DROP_ITEMS];
enum pdData
{
    PenzOsszeg,
    Float:PenzX,
    Float:PenzY,
    Float:PenzZ,
    PenzVW,
    PenzInt
};
new PenzDropInfo[MAX_DROP_ITEMS][pdData];

enum AtmdData
{
	Szetszedve,
    Float:aPoz[3],
    aVW,
    aInt,
	aObject
};
new ATMDrop[MAX_ATMDOBOZ][AtmdData];

enum Drogenum
{
    DrogEldobObject,
    DrogEldobDarab,
    Float:DrogEldobPosX,
    Float:DrogEldobPosY,
    Float:DrogEldobPosZ,
    DrogEldobVWorld,
    DrogEldobInterior
};
new DrogInfo[MAX_DROP_ITEMS][Drogenum];
new DrogObject[MAX_DROP_ITEMS];
//===================== Fegyó, Pénz, stb eldobásához=========================
new Megprobal[MAX_PLAYERS];
new StopperIdo[MAX_PLAYERS], StopperFut[MAX_PLAYERS];
//============ Szemüveg ==========================
//new Bar:KajaBar[MAX_PLAYERS];
new DamageStat_VS[MAXVSKOCSI][4];
new Float:DamageHP_VS[MAXVSKOCSI];
new DamageStat[MAX_VEHICLES][4];
new Float:DamageHP[MAX_VEHICLES];
new SzemuvegFennt[MAX_PLAYERS];
new SapkaFennt[MAX_PLAYERS];

new JarmuUzemanyag[MAX_VEHICLES];

new PDKapu[2], PDIntiKapu[2], HatarSorompo[10];

enum {
	CommonRed = 19006,
	CommonOrange,
	CommonGreen,
	CommonBlue,
	CommonPurple,
	CommonEspiral,
	CommonBlack,
	CommonEyes,
	CommonXadrex,
	CommonTransparent,
	CommonXRayVision,
	SquareFormatYellow,
	SquareFormatOrange,
	SquareFormatRed,
	SquareFormatBlue,
	SquareFormatGreen,
	RayBanGray,
	RayBanBlue,
	RayBanPurple,
	RayBanPink,
	RayBanRed,
	RayBanOrange,
	RayBanYellow,
	RayBanGreen,
	CircularNormal,
	CircularYellow,
	CircularRed,
	CircularBlack,
	CircularXadrex,
	CircularTSeeRPGders,
	CopGlassesBlack = 19138,
	CopGlassesRed = 19139,
	CopGlassesBlue = 19140,
};
//========== Mozgatható Biztonsági Kamerák ============
new Maszk[MAX_PLAYERS];
new TotalCCTVS;
new CameraName[MAX_CCTVS][32];
new Float:CCTVLA[MAX_PLAYERS][3]; 
new Float:CCTVLAO[MAX_CCTVS][3];
new Float:CCTVRadius[MAX_PLAYERS];
new Float:CCTVDegree[MAX_PLAYERS] = 0.0;
new Float:CCTVCP[MAX_CCTVS][4]; 
new CCTVEgyeb[MAX_CCTVS][2];
new CurrentCCTV[MAX_PLAYERS] = -1;
new Menu:CCTVMenu[MAX_CCTVMENUS];
new MenuType[MAX_CCTVMENUS];
new TotalMenus;
new PlayerMenu[MAX_PLAYERS];
enum LP
{
	Float:LX,
	Float:LY,
	Float:LZ,
	Float:LA,
	LInterior
}
new LastPos[MAX_PLAYERS][LP];
//========== Mozgatható Biztonsági Kamerák ============
//----------
new TogRadio[MAX_PLAYERS];
new TogVa[MAX_PLAYERS];
new AnimKonyvtarak[129][14] =
{
	"AIRPORT", "Attractors", "BAR", "BASEBALL", "BD_FIRE", "BEACH", "benchpress", "BF_injection", "BIKED", "BIKEH",
	"BIKELEAP", "BIKES", "BIKEV", "BIKE_DBZ", "BLOWJOBZ", "BMX", "BOMBER", "BOX", "BSKTBALL", "BUDDY", "BUS", "CAMERA",
	"CAR", "CARRY", "CAR_CHAT", "CASINO", "CHAINSAW", "CHOPPA", "CLOTHES", "COACH", "COLT45", "COP_AMBIENT", "COP_DVBYZ",
	"CRACK", "CRIB", "DAM_JUMP", "DANCING", "DEALER", "DILDO", "DODGE", "DOZER", "DRIVEBYS", "FAT", "FIGHT_B", "FIGHT_C",
	"FIGHT_D", "FIGHT_E", "FINALE", "FINALE2", "FLAME", "Flowers", "FOOD", "Freeweights", "GANGS", "GHANDS", "GHETTO_DB",
	"goggles", "GRAFFITI", "GRAVEYARD", "GRENADE", "GYMNASIUM", "HAIRCUTS", "HEIST9", "INT_HOUSE", "INT_OFFICE",
	"INT_SHOP", "JST_BUISNESS", "KART", "KISSING", "KNIFE", "LAPDAN1", "LAPDAN2", "LAPDAN3", "LOWRIDER", "MD_CHASE",
	"MD_END", "MEDIC", "MISC", "MTB", "MUSCULAR", "NEVADA", "ON_LOOKERS", "OTB", "PARACHUTE", "PARK", "PAULNMAC", "ped",
	"PLAYER_DVBYS", "PLAYIDLES", "POLICE", "POOL", "POOR", "PYTHON", "QUAD", "QUAD_DBZ", "RAPPING", "RIFLE", "RIOT",
	"ROB_BANK", "ROCKET", "RUSTLER", "RYDER", "SCRATCHING", "SHAMAL", "SHOP", "SHOTGUN", "SILENCED", "SKATE", "SMOKING",
	"SNIPER", "SPRAYCAN", "STRIP", "SUNBATHE", "SWAT", "SWEET", "SWIM", "SWORD", "TANK", "TATTOOS", "TEC", "TRAIN", "TRUCK",
	"UZI", "VAN", "VENDING", "VORTEX", "WAYFARER", "WEAPONS", "WUZI"
};

#define OSSZRADIO (3)
new ZeneURL[OSSZRADIO][] =
{
	NINCSKOCSIZENE_URL, // Kikapcsolás
	"http://discoshit.hu/ds-radio.m3u",
	"http://valami.mp3"
};
new VehicleRadioName[OSSZRADIO][] =
{
	"Kikapcsolás",
	"DISCO*S HIT",
	"HOT 108 JAMZ"
};

new VehicleRadio[MAX_VEHICLES];
new OnkentesMentos[MAX_PLAYERS];
#define ARAM_VAN 1
#define ARAM_NINCS 0
//new AramElment = 0;
//new Aram = ARAM_VAN;
//new AramSzunet = 0;
//new RaboltakATMet = 0;
//new VanGeneratoron = 0;

forward BanEllenorzes(playerid)
forward AtmRablas();
forward riasztoki(playerid)
forward PirosPenz(playerid);
//forward Timer();
forward nnitimer();

forward orvossaghp(playerid);

forward SebessegKorlatozo();

forward BenzinTankolas(playerid,tipus, bool:bankszamla);
forward UnFreeze(playerid);
forward MySQLUpdater();
forward Updater(type);
forward Vizsgaido(playerid);
forward nnikapcsolodas(playerid);

forward OnTrailerAttach(vehicle, trailer);
forward OnTrailerDetach(vehicle, trailer);

forward OnVehicleHealthChange(vehicle, Float:newhealth, Float:oldhealth);
forward OnPlayerHealthChange(playerid, Float:newhealth, Float:oldhealth);
forward OnPlayerArmourChange(playerid, Float:newarmour, Float:oldarmour);
forward OnPlayerMoneyChange(playerid, newmoney, oldmoney);
forward OnPlayerVirtualWorldChange(playerid, newvirtualworld, oldvirtualworld);
forward OnPlayerScoreChange(playerid, newscore, oldscore);
forward OnPlayerTeamChange(playerid, newteam, oldteam);
forward OnPlayerSkinChange(playerid, newskin, oldskin);
forward OnPlayerWantedLevelChange(playerid, newwantedlevel, oldwantedlevel);
forward OnPlayerWeaponChange(playerid, newweapon, oldweapon);

forward SecTimer();
forward RaceTimer();
forward AutomataSzerverNev();
forward SzerverJelszo();
forward PuttoSorsolas();
forward CsomagTartoMentes();
forward CsomagTartoBetoltes();
forward KmMentes();
forward KmBetoltes();

forward HaznalVan(playerid);
forward RandomHirdetes();

forward AfkChecker();
forward Jail(playerid, muvelet[], ido, tipus[], oka[]);
forward DateProp(playerid, type);
forward MysqlEllenorzes();
forward AdatMentes(playerid);
forward AdatMentesSQL(playerid);
forward Restart();
forward KocsiRespawn(kocsi);
forward KocsiRespawnWR(kocsi);
forward AlapKocsiRespawn(kocsi);
forward VsTuningok();
//forward VsTuning(kocsi);

forward PenzCheck(playerid, uj, regi, penzmozgas, minusz);

forward MunkaCheckpointCheck(playerid);
forward DutyFegyverekBeallitasa(playerid);
forward Munkaruha(playerid, ruha);

forward Startup(playerid, vehicleid);
forward IntekSzama();
//forward LoadBan();
forward LoadCar();
forward LoadHouse();
forward LoadHotel();
forward LoadBankAdatok();
forward SaveBankAdatok();
forward LoadBenzinKutak();
forward SzefToltes();
forward LoadATM();
forward LoadFulke();
forward LoadAjtok();
forward LoadInts();
forward LoadStuff();
forward LoadPapers();
forward SavePapers();
forward LoadBoxer();
forward SaveBoxer();
forward PenzUpdate();
forward LoadLSPDmoney();
forward OnAjtoUpdate();
forward SaveBenzinKutak();
forward OnIgenyUpdate();
forward OnIntsUpdate();
forward JoinChannel(playerid, number, line[]);
forward JoinChannelNr(playerid, number);

forward IsAVsKocsi(kocsi);
forward IsAtDealership(playerid);
forward ATMnelVan(playerid);
forward FulkenelVan(playerid);
forward IsAt(playerid, hol);

forward IsKocsi(carid, tipus[]);
forward JatekosBeszallas(playerid, vehicleid);

forward IsAtClothShop(playerid);
forward IsAtGasStation(playerid);
forward IsAtBar(playerid);
forward IsSwat(playerid);
forward IsSwatLeader(playerid);
forward IsAS(playerid);
forward UjMunka(playerid, munkaszama, munka);

forward MunkaLeader(playerid, munka);
forward AMT(playerid, munka);
forward LMT(playerid, munka);

forward SajatKocsi(id, kocsi);
forward RosszValasz(playerid);
//szállítás
forward FszallitasTimer(playerid);
//szállítás
forward SearchingHit(playerid);
forward SetPlayerSpawn(playerid);
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
forward CrimInRange(Float:radi, playerid,copid);
forward SendCopMessage(color, string[]);
forward ABroadCast(color,const string[],level);
forward GetClosestPlayer(p1);
forward IsPlayerInTurf(playerid, turfid);
forward PrintBizInfo(playerid,targetid);
forward SetPlayerUnjail();
forward Drog();
//forward SonaFigyelo();
forward OtherTimer();
forward EgyebTimer();
forward MunkaTimer();
forward TeleTimer();
forward RingTonerRev();
forward RingToner();
forward HireCost(carid);
forward BanLog(string[]);
forward KickLog(string[]);
//forward ClintLog(string[]);
forward ChatLog(string[]);
forward EgyebLog(string[]);
forward NevLog(string[]);
forward PosLog(string[]);
forward CommandLog(string[]);
forward BeKilepes(string[]);
forward PayLog(string[]);
forward KillLog(string[], cheat);
forward CKLog(string[]);
forward IsATruck(carid);
forward IsAPlato(carid);
forward IsAnAmbulance(kocsi);
forward IsACopCar(carid);
forward IsAPlane(carid);
forward IsABoat(carid);
forward IsABicikli(carid);
forward Bikes(carid);
forward LakoKocsik(carid);
forward IsAMotor(carid);
forward IsACop(playerid);
forward IsHitman(playerid);
forward IsAEnzoCar(playerid)
forward IsDirector(playerid);
forward IsAMember(playerid);
forward IsAnInstructor(playerid);
forward Spectator();
forward ConvertTicks(ticks);
forward Encrypt(string[]);
forward KartingEnded();
forward StartKarting();
forward PrepareKarting();

forward c4szereles(playerid);
forward c2szereles(playerid);
forward c4generatorra(playerid);
forward BankC4Robban(playerid);
forward Edzes(playerid);
forward maszas2(playerid);
forward EgyenlegLekeres(playerid);
forward JarmuRiasztoBe(carid);
forward JarmuRiaszto(playerid);
forward BoltRablas(playerid);
forward rabaleng(playerid)
forward Mergezes(playerid);
forward EgyenlegFeltoltes(playeid, cashdeposit);
forward LSPDmoneyLog(string[]);
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward SetPlayerCriminal(playerid,declare,reason[]);
forward SetPlayerFree(playerid,declare,reason[]);
//forward SetPlayerWeapons(playerid);
forward ShowStats(playerid,targetid);
forward ShowDetektivPlayerStats(playerid,targetid);
forward ShowZseb(playerid,targetid);
forward SetPlayerToTeamColor(playerid);
forward split(const strsrc[], strdest[][], delimiter);

forward AdatBetoltes(playerid);
forward AdatBetoltesSQL(playerid);

forward OnPlayerUpdate(playerid);
forward BroadCast(color,const string[]);
forward OOCOff(color,const string[]);
forward OOCNews(color,const string[]);
forward SendJobMessage(job, color, string[]);
forward SendFamilyMessage(family, color, string[]);
forward SendIRCMessage(channel, color, string[]);
forward SendTeamMessage(team, color, string[]);
forward SendSWATRadioMessage(color, string[]);
forward SendPowerRadioMessage(color, string[]);
forward SendCsomagszallitoRadioMessage(color, string[]);
forward SendHitmanRadioMessage(color, string[]);
forward SendAdminMessage(color, string[]);
//forward AddCar(carcoords);
forward IsVehicleOccupied(vehicleid);
forward AllCarSpawn();
forward AllCarRespawn();
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward ProxDetector2(Float:radi, string[], Float:oldposx, Float:oldposy, Float:oldposz, col1, col2, col3, col4, col5);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward ClearCK(ck);
forward ClearFamily(family);
forward ClearMarriage(playerid);
forward ClearPaper(paper);
forward ClearCrime(playerid);
forward ClearGroceries(playerid);
forward Lotto();
forward CarCheck();
forward CarInit();
forward CarTow(carid);
forward CarRespawn(carid);
forward LockCar(carid);
forward UnLockCar(carid);
forward CheckGas();
forward Fagyasztas(playerid);
forward Kiolvasztas(playerid);
forward FegyverElvesz(playerid, weaponid);
forward Munkavege(playerid, Munka, db);
forward SyncTime();
forward SyncUp();
forward SaveAccounts();
forward BackupTimer();
forward Production();
forward Checkprop(type);
forward PayDay();
forward ini_GetKey( line[] );
forward ini_GetValue( line[] );
forward CustomPickups();
forward FixHour(hour);
forward AddsOn();
forward LAddsOn();
forward EngineBreak();
//forward kfreeze(playerid);
//forward Reporttimer(playerid);

//------------------------------------------------------------------------------------------------------
new Dieseles_Kocsik[63] = {
	403,
	406,
	407,
	408,
	413,
	414,
	416,
	418,
	424,
	427,
	428,
	431,
	432,
	433,
	434,
	437,
	440,
	444,
	455,
	456,
	458,
	459,
	460,
	470,
	474,
	478,
	479,
	482,
	483,
	486,
	489,
	490,
	498,
	499,
	505,
	508,
	514,
	515,
	524,
	528,
	530,
	531,
	532,
	535,
	537,
	538,
	544,
	556,
	557,
	561,
	573,
	578,
	579,
	582,
	588,
	599,
	601,
	609,
	
	612,
	613,
	615,
	616,
	617
};
new Benzines_Kocsik[133] = {
    400,
	401,
	402,
	404,
	405,
	409,
	410,
	411,
	412,
	415,
	417,
	419,
	420,
	421,
	422,
	423,
	425,
	426,
	429,
	430,
	436,
	438,
	439,
	442,
	445,
	446,
	447,
	448,
	451,
	452,
	453,
	454,
	457,
	460,
	461,
	462,
	463,
	467,
	468,
	469,
	471,
	472,
	473,
	475,
	476,
	477,
	480,
	484,
	485,
	487,
	488,
	491,
	492,
	493,
	494,
	495,
	496,
	497,
	500,
	502,
	504,
	506,
	507,
	511,
	512,
	513,
	516,
	517,
	518,
	519,
	520,
	521,
	522,
	525,
	526,
	527,
	529,
	533,
	534,
	536,
	539,
	540,
	541,
	542,
	543,
	545,
	546,
	547,
	548,
	549,
	550,
	551,
	552,
	553,
	554,
	555,
	558,
	559,
	560,
	562,
	563,
	565,
	566,
	567,
	568,
	571,
	572,
	574,
	575,
	576,
	577,
	580,
	581,
	583,
	585,
	586,
	587,
	589,
	592,
	593,
	595,
	596,
	597,
	598,
	600,
	602,
	603,
	604,
	605,
	
	611,
	614,
	616,
	617
};
new Max_Benzin[219] = {
	60, //Landstalker (400)
	60, //Bravura (401)
	60, //Buffalo (402)
	300, //Linerunner (403)
	60, //Perenail (404)
	60, //Sentinel (405)
	60, //Dumper (406)
	120, //Firetruck (407)
	60, //Trashmaster (408)
	60, //Stretch (409)
	60, //Manana (410)
	60, //Infernus (411)
	60, //Voodoo (412)
	60, //Pony (413)
	100, //Mule (414)
	60, //Cheetah (415)
	120, //Ambulance (416)
	60, //Leviathan (417)
	60, //Moonbeam (418)
	60, //Esperanto (419)
	60, //Taxi (420)
	60, //Washington (421)
	60, //Bobcat (422)
	60, //Mr Whoopee (423)
	60, //BF Injection (424)
	60, //Hunterter (425)
	60, //Premier (426)
	100, //Enforcer (427)
	100, //Securicar (428)
	60, //Banshee (429)
	60, //Predator (430)
	120, //Bus (431)
	120, //Rhino (432)
	150, //Barracks (433)
	60, //Hotknife (434)
	60, //Artic trailer 1 (435)
	60, //Previon (436)
	300, //Coach (437)
	60, //Cabbie (438)
	60, //Stallion (439)
	60, //Rumpo (440)
	60, //RC Bandit (441)
	60, //Romero (442)
	80, //Packer (443)
	60, //Monster (444)
	60, //Admiral (445)
	60, //Squalo (446)
	60, //Seasparrow (447)
	30, //Pizza boy (448)
	60, //Tram (449)
	60, //Artic trailer 2 (450)
	60, //Turismo (451)
	60, //Speeder (452)
	60, //Reefer (453)
	60, //Tropic (454)
	100, //Flatbed (455)
	100, //Yankee (456)
	30, //Caddy (457)
	60, //Solair (458)
	60, //Top fun (459)
	60, //Skimmer (460)
	60, //PCJ 600 (461)
	30, //Faggio (462)
	60, //Freeway (463)
	60, //RC Baron (464)
	60, //RC Raider (465)
	60, //Glendale (466)
	60, //Oceanic (467)
	40, //Sanchez (468)
	60, //Sparrow (469)
	80, //Patriot (470)
	30, //Quad (471)
	60, //Coastguard (472)
	60, //Dinghy (473)
	60, //Hermes (474)
	60, //Sabre (475)
	60, //Rustler (476)
	60, //ZR 350 (477)
	60, //Walton (478)
	60, //Regina (479)
	60, //Comet (480)
	60, //BMX (481)
	60, //Burrito (482)
	60, //Camper (483)
	60, //Marquis (484)
	60, //Baggage (485)
	60, //Dozer (486)
	60, //Maverick (487)
	60, //VCN Maverick (488)
	80, //Rancher (489)
	80, //nni Rancher (490)
	60, //Virgo (491)
	60, //Greenwood (492)
	60, //Jetmax (493)
	60, //Hotring (494)
	60, //Sandking (495)
	60, //Blista Compact (496)
	60, //Police Maverick (497)
	60, //Boxville (498)
	60, //Benson (499)
	60, //Mesa (500)
	60, //RC Goblin (501)
	60, //Hotring A (502)
	60, //Hotring B (503)
	60, //Blood ring banger (504)
	60, //Rancher(lure) (505)
	60, //Super GT (506)
	60, //Elegant (507)
	100, //Journey (508)
	60, //Bike (509)
	60, //Mountain Bike (510)
	60, //Beagle (511)
	60, //Cropduster (512)
	60, //Stuntplane (513)
	300, //Petrol (514)
	300, //Roadtrain (515)
	60, //Nebula (516)
	60, //Majestic (517)
	60, //Buccaneer (518)
	60, //Shamal (519)
	60, //Hydra (520)
	40, //FCR 900 (521)
	40, //NRG 500 (522)
	40, //HPV 1000 (523)
	300, //Cement Truck (524)
	60, //Towtruck (525)
	60, //Fortune (526)
	60, //Cadrona (527)
	80, //nni Truck (528)
	60, //Williard (529)
	60, //Fork lift (530)
	40, //Tractor (531)
	60, //Combine (532)
	60, //Feltzer (533)
	60, //Remington (534)
	60, //Slamvan (535)
	60, //Blade (536)
	60, //Freight (537)
	60, //Streak (538)
	60, //Dodgem (539)
	60, //Vincent (540)
	60, //Bullet (541)
	60, //Clover (542)
	60, //Sadler (543)
	60, //Firetruck LA (544)
	60, //Hustler (545)
	60, //Intruder (546)
	60, //Primo (547)
	60, //Cargobob (548)
	60, //Tampa (549)
	60, //Sunrise (550)
	60, //Merit (551)
	60, //Utility van (552)
	60, //Nevada (553)
	60, //Yosemite (554)
	60, //Windsor (555)
	60, //Monster A (556)
	60, //Monster B (557)
	60, //Uranus (558)
	60, //Jester (559)
	60, //Sultan (560)
	60, //Stratum (561)
	60, //Elegy (562)
	60, //Raindance (563)
	60, //RC Tiger (564)
	60, //Flash (565)
	60, //Tahoma (566)
	60, //Savanna (567)
	60, //Bandito (568)
	60, //Freight flat (569)
	60, //Streak (570)
	60, //Kart (571)
	15, //Mower (572)
	100, //Duneride (573)
	40, //Sweeper (574)
	60, //Broadway (575)
	60, //Tornado (576)
	60, //AT 400 (577)
	100, //DFT 30 (578)
	60, //SeeRPGtley (579)
	60, //Stafford (580)
	60, //BF 400 (581)
	80, //News Van (582)
	60, //Tug (583)
	60, //Petrol tanker (584)
	60, //Emperor (585)
	60, //Wayfarer (586)
	60, //Euros (587)
	80, //Hotdog (588)
	60, //Club (589)
	60, //Freight box (590)
	60, //Artic trailer 3 (591)
	60, //Andromada (592)
	60, //Dodo (593)
	60, //RC Cam (594)
	60, //Launch (595)
	60, //Cop car LS (596)
	60, //Cop car SF (597)
	60, //Cop car LV (598)
	80, //Ranger (599)
	60, //Picador (600)
	150, //SWAT Tank (601)
	60, //Alpha (602)
	60, //Phoenix (603)
	60, //Glendale(damaged) (604)
	60, //Sadler(damaged) (605)
	60, //Bag box A (606)
	60, //Bag box B (607)
	60, //Stairs (608)
	100, //Boxville (609)
	60, //Farm trailer (610)
	
	60, //teszt0 611)
	80, //Diablo Stallion (612)
	80, //Herculos (613)
	80, //Maffia Stallion (614)
	100, //Rando 4x4 (615)
	80, //Klaz (616)
	80 //Preso (617)
};
//VEHICLE MODEL NAMES
new vehName[][] =
{
    "Jeep Cheorokee", "Mercury Cougar", "Camaro Iroc", "Linerunner", "Chevy Nova Wagon", "BMW 525i", "Dumper", "Firetruck", "Trashmaster",
	"Lincoln Town Car limo", "Dodge Aires Coupe", "Acura NSX", "Chevy Impala", "Pony", "Mule", "Ferrari Tessarosta", "Ambulance", "Leviathan", "Chevy Astrovan",
	"Cadillac Eldorado", "Chevy Caprice", "Lincoln Mark V", "Ford Ranger", "Whoopee", "BFInjection", "Hunter", "Chevy Caprice Classic", "Enforcer",
	"Securicar", "Dodge Viper RT", "Predator", "Bus", "Rhino", "AM General M-923", "Ford Model T", "Trailer", "Honda Prelude", "Coach",
	"Checker Cab", "Honda Accord", "Mercedes Van", "RCBandit", "Cadillac Victorian Hearse", "Packer", "Chevrolet S-10", "Mercedes Benz 300D", "Squalo", "Seasparrow",
	"Pizzaboy", "Tram", "Trailer", "Ferrari F40", "Speeder", "Reefer", "Tropic", "Flatbed", "Ford F-650", "Club Car DS", "Ford Taurus Wagon",
	"Berkley'sRCVan", "Skimmer", "PCJ600", "Vespa", "Harley Davidson", "RCBaron", "RCRaider", "Chevy Del Ray", "Chevy Bel Air",
	"Honda CR125", "Sparrow", "HUMMER H1", "Quad", "Coastguard", "Dinghy", "Mercury", "Sabre", "Spitfire", "ZR350", "Chevy Pickup",
	"Ford LTD Wagon", "Porsche 911", "BMX", "Dodge Ram Van", "Camper", "Mercury Grand Marquise", "Baggage", "Dozer", "Maverick", "JetRanger", "Chevy K5 Blazer",
	"FBI Ford Branco", "Ford Thunderbird", "Chrysler 5th Avenue", "Thunderbird", "Hotring0", "Sandking", "Honda CRX", "PoliceMaverick",
	"GMC Bread Van", "Ford Box truck", "Jeep Wrangler", "RCGoblin", "HotringA", "HotringB", "Bloodring", "Ford Branco",
	"Lotus Espirit", "Buick Roadmaster", "Chevy Camper", "Bike", "Mountain", "Britten Norman", "Cropduster", "Stunt", "Tanker", "Roadtrain",
	"Buick Century", "Buick Regal", "Chevy Monte Carlo", "Bombardier Learjet", "Hydra", "FCR900", "NRG500", "HPV1000", "Cement", "Ford F-350",
	"Ford Thunderbird", "Chevy Cavalier", "FBITruck", "Dodge Dynasty", "Clark C500-45", "Ford 5000", "Case IH 1660", "Mercedes Benz w124 300CE", "Remington", "GMC PU",
	"Chevy Caprice", "Freight", "Streak", "Dodgem", "BMW 325i", "Ford GT40", "Buick Skylark", "Ford 150", "Firetruck", "Hustler", "Chevy Lumina",
	"Oldsmobile Cutlass Cierra", "Cargobob", "Chevy Corvair", "Honda Accord sedan", "Mercury Grand Marquise", "Chevy C-30", "DC-3", "GMC Sierra", "Jaguar E", "MonsterA", "MonsterB",
	"Mitsubishi Eclipse", "Toyota Supra", "Subaru Impreza", "Honda Accord", "Nissan Skyline", "Black Hawk", "RCTiger", "Honda Civic", "Chevrolet Monte Carlo", "Chevy Impala sedan", "Bandito",
	"FreightFlat", "StreakCarriage", "Gokart", "Mower", "Volkswagen Dune", "Tennant 6400", "Cadillac Coupe", "Impala", "AT400", "DFT30",
	"Range Rover", "Rolls-Royce", "BF400", "Dodge Ram Van", "Tug", "PetrolTrailer", "Infinity J30", "Honda Gold Wing", "Nissan 300ZX", "Hotdog", "Volkswagen Golf GTI",
	"FreightBox", "Trailer", "Andromada", "Dodo", "RCCam", "Launch", "LSPD", "SFPD", "LVPD",
	"Ford Ranger", "Chevy El Camino", "SWAT", "Dodge Stealth", "Phoenix", "Chevy Del Ray", "Ford 150", "Luggage", "Luggage", "Stairs",
	"GMC Bread", "Tiller", "teszt0", "Diablo Stallion", "Herculos", "Maffia Stallion", "Rando 4x4", "Klaz", "Preso"
};


new aWeaponSlotok[48] = {
	0, // 0
	0, // 1
	1, // 2
	1, // 3
	1, // 4
	1, // 5
	1, // 6
	1, // 7
	1, // 8
	1, // 9
	10, // 10
	10, // 11
	10, // 12
	10, // 13
	10, // 14
	10, // 15
	8, // 16
	8, // 17
	8, // 18
	0, // 19
	0, // 20
	0, // 21
	2, // 22
	2, // 23
	2, // 24
	3, // 25
	3, // 26
	3, // 27
	4, // 28
	4, // 29
	5, // 30
	5, // 31
	4, // 32
	6, // 33
	6, // 34
	7, // 35
	7, // 36
	7, // 37
	7, // 38
	8, // 39
	12, // 40
	9, // 41
	9, // 42
	9, // 43
	11, // 44
	11, // 45
	11, // 46
	0 // 47 ???
}

new aWeaponNames[][32] = {
	{"Ököl"}, // 0
	{"Boxer"}, // 1
	{"Golf"}, // 2
	{"Stick"}, // 3
	{"Kés"}, // 4
	{"Baseball"}, // 5
	{"Ásó"}, // 6
	{"Dákó"}, // 7
	{"Katana"}, // 8
	{"Láncfûrész"}, // 9
	{"PurpleDildo"}, // 10
	{"BigWhiteVibrator"}, // 11
	{"MediumWhiteVibrator"}, // 12
	{"SmallWhiteVibrator"}, // 13
	{"Virág"}, // 14
	{"Cane"}, // 15
	{"Gránát"}, // 16
	{"Teargas"}, // 17
	{"Molotov"}, // 18
	{""}, // 19
	{""}, // 20
	{""}, // 21
	{"Colt45"}, // 22
	{"SilencedColt45"}, // 23
	{"Deagle"}, // 24
	{"Shotgun"}, // 25
	{"Sawnoff"}, // 26
	{"Combat"}, // 27
	{"Uzi"}, // 28
	{"MP5"}, // 29
	{"AK47"}, // 30
	{"M4"}, // 31
	{"Tec9"}, // 32
	{"Rifle"}, // 33
	{"Sniper"}, // 34
	{"Rocket"}, // 35
	{"HRocket"}, // 36
	{"Lángszóró"}, // 37
	{"Minigun"}, // 38
	{"Satchel"}, // 39
	{"Detonator"}, // 40
	{"Spray"}, // 41
	{"Fire"}, // 42
	{"Camera"}, // 43
	{"NightVision"}, // 44
	{"InfraredVision"}, // 45
	{"Ejtõernyõ"}, // 46
	{"FakePistol"} // 47
};

const Float:INF_FLOAT=Float:0x7F800000;

new bool:Mysql = false;
new MysqlHiba = 0;

new BenzintSzallit[MAX_PLAYERS];

new AdasVeteliNeki[MAX_PLAYERS];
new AdasVeteliTipus[MAX_PLAYERS];
new AdasVeteliAra[MAX_PLAYERS];
new AdasVeteliCucc[MAX_PLAYERS];

new MostLepettBe[MAX_PLAYERS];
new Fegyvere[MAX_PLAYERS];

new LKocsik[MAX_FRAKCIO+1][MAX_FRAKCIO+1];
new BerelhetoKocsik[2];
new KocsiRiaszto[MAX_VEHICLES];
new BackupTime[MAX_PLAYERS];
new HazPickup[MAXHAZ];
new GarazsPickup[MAXHAZ];
new Text3D:Garazs3D[MAXHAZ];
new HotelPickup[MAXHOTEL];
new FelujitasElfogadas[MAX_PLAYERS];
new RegEngedely[MAX_PLAYERS];
new RegAdatok[MAX_PLAYERS];

#if defined KELLAJTO3D
	#define AJTO_KI 0
	#define AJTO_BE 1
	new Text3D:Ajto3D[MAXAJTO][2];
#endif

new BizPickup[MAXBIZ];
new Float:JatekosElete[MAX_PLAYERS];
new MunkaFelvetel[MAX_PLAYERS];

new bool:AdminDuty[MAX_PLAYERS];
new ASDuty[MAX_PLAYERS] = 0;

new ScripterDuty[MAX_PLAYERS];

new Text3D:AdminDuty3D[MAX_PLAYERS];
new Text3D:ASDuty3D[MAX_PLAYERS];

new Text3D:Kezdo3D[MAX_PLAYERS];
new Text3D:Szunet3D[MAX_PLAYERS];
new bool:Szunet[MAX_PLAYERS], SzunetIdo[MAX_PLAYERS];
new AFKIdo[MAX_PLAYERS];
new AFKTimer[MAX_PLAYERS];
new AFKDialogShowing[MAX_PLAYERS];
new Float:AFKPos[MAX_PLAYERS][3];
new LopasProbalkozas[MAX_PLAYERS];
new CuccokAKocsiban[MAX_VEHICLES][21];
new bool:Lopott[MAX_VEHICLES];
new NevvaltasiEngedely[MAX_PLAYERS];
new Munkaban[MAX_PLAYERS];
new MunkaCheckpoint[MAX_PLAYERS];
new MunkaCheckpoint2[MAX_PLAYERS];
new Float:MunkaStarthely[MAX_PLAYERS][3];
new Matrica[MAXVSKOCSI];

new Rabol[MAX_PLAYERS];
new Mergezve[MAX_PLAYERS] = 0;
new KiMergezte[MAX_PLAYERS] = NINCS;
new Tkerek[MAX_PLAYERS];
new Tszin[MAX_PLAYERS];
new Visz[MAX_PLAYERS];
new IdeiglenesAS[MAX_PLAYERS];
//
new Drogozott[MAX_PLAYERS];
new Csiga[MAX_PLAYERS];
new Cp[MAX_PLAYERS];
new Morzsolas[MAX_PLAYERS];
new Tekerve[MAX_PLAYERS];
new Joint[MAX_PLAYERS];
new JointIdo[MAX_PLAYERS];
//
new Elverzes[MAX_PLAYERS];
new Animban[MAX_PLAYERS];
new bool:Aukciozik[MAX_PLAYERS];
new AJSzokesek[MAX_PLAYERS], AJVarakozas[MAX_PLAYERS];
new AJSzovegIdo[MAX_PLAYERS], AJSzovegHiba[MAX_PLAYERS], AJSzoveg[MAX_PLAYERS];

new KocsiUtolsoHasznalat[MAX_VEHICLES];

new MentoHivasSzin[MAX_PLAYERS];
new MentoHivas[MAX_PLAYERS],TaxiHivas[MAX_PLAYERS];
new bool:NoName[MAX_PLAYERS];
//new bool:Penztkapott[MAX_PLAYERS];
new KiertMegy[MAX_PLAYERS];
//new Fegyenctelep2;

new bool:Harcol[MAX_PLAYERS], HarcolTerulet[MAX_PLAYERS];

new Float:TVPos[MAX_PLAYERS][3], TVVW[MAX_PLAYERS], TVInt[MAX_PLAYERS];
new bool:JatekBetoltve[MAX_PLAYERS];
new SebessegKorlat[MAX_PLAYERS];
new bool:MostHalt[MAX_PLAYERS];
new bool:Kilepesek[MAX_PLAYERS];
new Tankol[MAX_PLAYERS][2];
new SpawnVedelem[MAX_PLAYERS];
//new SpawnHely[MAX_PLAYERS];
new BelepesIdo[MAX_PLAYERS];
new bool:Kamera[MAX_PLAYERS];
new bool:PlayerOnline[MAX_PLAYERS];
new Nevek[MAX_PLAYERS];
new Biztos[MAX_PLAYERS];

new ElrontottAjelszo[MAX_PLAYERS];
new ParancsMegerosites[MAX_PLAYERS];

new Animbanemrakhato[MAX_PLAYERS];
new AFK[MAX_PLAYERS];
new Kamerazik[MAX_PLAYERS], LoterenGyakorol[MAX_PLAYERS], TilosVezetesProbalkozas[MAX_PLAYERS] = 0;

new AdminKocsiID[MAX_PLAYERS] = NINCS;
new CsomagszallitoKocsiID[MAX_PLAYERS] = 0;
new JogsiJarmuID[MAX_PLAYERS] = 0;

new Lefoglalt[MAX_PLAYERS];
new HitmanRendeles[MAX_PLAYERS];
new Engedely[MAX_PLAYERS];
new ElsoSpawn[MAX_PLAYERS];
new Buszok[2];
new szallit[MAX_PLAYERS];
new CsomagszallitoMerve[MAX_PLAYERS];
new SzallitasPozicio[MAX_PLAYERS];
new SpawnPozicio[MAX_PLAYERS];
new SzallitasAru[MAX_PLAYERS];
//new rtelo = 1;
new TanultStilus[MAX_PLAYERS];
new Edzik[MAX_PLAYERS];
new Szondaztat[MAX_PLAYERS];
new CsatlakozottSzamla[MAX_PLAYERS];
new BejelentkezokSzama;

new engineOn[MAX_VEHICLES];
new JatekosZsak[MAX_PLAYERS][3];

new BankSzef = 500000;
new BankTulaj[MAX_PLAYER_NAME];
new BankMasodTulaj[MAX_PLAYER_NAME];
new Tax = 0;
new TaxValue = 5000;
new Rejtett[MAX_PLAYERS];
new Tanulofelpenz[MAX_PLAYERS] = 0;
new ModBetoltve = 0;
new Csere[MAX_PLAYERS] = NINCS;
new MitCsere[MAX_PLAYERS] = NINCS;

new StartingKartRound = 0;
new EndingKartRound = 0;
new AnnouncedKartRound = 0;
new KartingPlayers = 0;
new KartingRound = 0;
new RoundStarted = 0;
new BoxDelay = 0;
new Boxer1 = 255;
new Boxer2 = 255;
new TBoxer = 255;
new PlayerBoxing[MAX_PLAYERS];
new Medics = 0;
new MedicCallTime[MAX_PLAYERS];
new Mechanics = 0;
new MechanicCallTime[MAX_PLAYERS];
new TaxiDrivers = 0;
new TaxiCallTime[MAX_PLAYERS];
new TaxiAccepted[MAX_PLAYERS];
new BusDrivers = 0;
new BusCallTime[MAX_PLAYERS];
new BusAccepted[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new JobDuty[MAX_PLAYERS];
new RegistrationStep[MAX_PLAYERS];
new MapIconsShown[MAX_PLAYERS];

new PlayerKarting[MAX_PLAYERS];
new PlayerInKart[MAX_PLAYERS];
new SchoolSpawn[MAX_PLAYERS];
new TakingLesson[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new PlayersChannel[MAX_PLAYERS];
new PlayerOnMission[MAX_PLAYERS];
new MissionCheckpoint[MAX_PLAYERS];
new Tevezik[MAX_PLAYERS], Tevezve[MAX_PLAYERS];
new DivorceOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new FelmondoUgyved[MAX_PLAYERS];
new FelmondasAra[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
new ConsumingMoney[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new FindTimePoints[MAX_PLAYERS];
new FindTime[MAX_PLAYERS];
new BoxWaitTime[MAX_PLAYERS];
new PaperOffer[MAX_PLAYERS];
new BoxOffer[MAX_PLAYERS];
new CarOffer[MAX_PLAYERS];
new CarPrice[MAX_PLAYERS];
new CarID[MAX_PLAYERS];
new OrderReady[MAX_PLAYERS];
new ConnectedToPC[MAX_PLAYERS];
new MedicTime[MAX_PLAYERS];
new NeedMedicTime[MAX_PLAYERS];
new MedicBill[MAX_PLAYERS];
new PlayerTied[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new Kezenlove[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new SelectChar[MAX_PLAYERS];
new SelectCharID[MAX_PLAYERS];
new SelectCharPlace[MAX_PLAYERS];
new ChosenSkin[MAX_PLAYERS];
new GuardOffer[MAX_PLAYERS];
new GuardPrice[MAX_PLAYERS];
new ApprovedLawyer[MAX_PLAYERS];
new CallLawyer[MAX_PLAYERS];
new WantLawyer[MAX_PLAYERS];
new Robbed[MAX_PLAYERS];
new RobbedTime[MAX_PLAYERS];
new CP[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new STDPlayer[MAX_PLAYERS];
new SexOffer[MAX_PLAYERS];
new SexPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new WantedPoints[MAX_PLAYERS];
new WantedLevel[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new HitmanDuty[MAX_PLAYERS];
new Felberelve[MAX_PLAYERS], FelberelveOsszeg[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS];
new gPlayerSpawned[MAX_PLAYERS];
new gLastCar[MAX_PLAYERS];
new gReport[MAX_PLAYERS];
new gLogin[MAX_PLAYERS];
new gInfo[MAX_PLAYERS];
new gOoc[MAX_PLAYERS];
new gBooc[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new gFam[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new BereltKocsi[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new gDice[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new RingTone[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new gLastDriver[MAX_VEHICLES];
new gCarLock[MAX_VEHICLES];
new KocsiSzinek[MAX_VEHICLES][2];
new LVHatar = 1;

new resivan = 0;
//new AntiCheatBekapcsolva = 1;

new noachat = 0;
//new laddtimer = 20000;
//new Float:rx, Float:ry, Float:rz;
new cbjstore[128];
new ghour = 1;
new gminute = 0;
new gsecond = 0;

new numplayers = 0;

new dollah = 0; // Amount player recieves on spawn.
new wtime = 15;
new Unitedchat = 1;
new shifthour;
new maszas[MAX_PLAYERS];
new UresUveg[MAX_PLAYERS];
new UvegEloveve[MAX_PLAYERS];
new LezartUtat[MAX_PLAYERS];
new Text3D:LezartUt3D[MAX_PLAYERS];
new Float:LezartUtX[MAX_PLAYERS], Float:LezartUtY[MAX_PLAYERS], Float:LezartUtZ[MAX_PLAYERS];

//ERIK!
#define DIALOG_BG_COLOR 0x4A5A6BBB
#define PREV_BG_COLOR 0x88888899
#define PREV_BG_COLOR2 0xFFFF00AA

//new fegyolista = mS_INVALID_LISTID;
new pickuplista = mS_INVALID_LISTID;
new osszesjarmulista = mS_INVALID_LISTID;
new ruhaboltskinlista = mS_INVALID_LISTID;
new autokereskedes_motorkerekpar = mS_INVALID_LISTID;
new autokereskedes_ipari = mS_INVALID_LISTID;
new autokereskedes_lowrider = mS_INVALID_LISTID;
new autokereskedes_terepjaro = mS_INVALID_LISTID;
new autokereskedes_furgon = mS_INVALID_LISTID;
new autokereskedes_sedan = mS_INVALID_LISTID;
new autokereskedes_kombi = mS_INVALID_LISTID;
new autokereskedes_sport = mS_INVALID_LISTID;
new jarmuberleslista = mS_INVALID_LISTID;

new Sokkolt[MAX_PLAYERS];
new Sokkolva[MAX_PLAYERS];
new KaR[MAX_PLAYERS];
new kdebug[MAX_PLAYERS];
new SisakotVesz[MAX_PLAYERS];
new Sisak[MAX_PLAYERS];
new KinekKuldUzit[MAX_PLAYERS];

new Timerek[16] = NINCS;

new cchargetime = 60;
new pickups;

new Float:ChangePos[MAX_PLAYERS][3];
new ChangePos2[MAX_PLAYERS][2];
new Float:TeleportDest[MAX_PLAYERS][4];
new Float:TelePos[MAX_PLAYERS][6];
new SzefEngedely[MAX_PLAYERS] = 0;

new BRendszer[MAX_PLAYERS] = 0;
new BRendszer2[MAX_PLAYERS] = 0;
new BRendszer3[MAX_PLAYERS] = 0;
new BRKod[MAX_PLAYERS] = 0;
new BRendszerAktiv[MAX_VEHICLES] = 0;
new BRendszerRossz[MAX_VEHICLES] = 0;

new HolTart[MAX_PLAYERS];
new ov[MAX_PLAYERS];
new SzajBekotve[MAX_PLAYERS];
new SzemBekotve[MAX_PLAYERS];
new C4Object[MAX_PLAYERS];
new C4Lerakva[MAX_PLAYERS] = 0;
new C4Kocsiban[MAX_PLAYERS] = NINCS;
new C4Taska[MAX_PLAYERS] = NINCS;
new C4Generatoron[MAX_PLAYERS] = NINCS;
new Float:C4X[MAX_PLAYERS], Float:C4Y[MAX_PLAYERS], Float:C4Z[MAX_PLAYERS];
new VizsgaAjanlat[MAX_PLAYERS] = NINCS;
new FegyverEngedelyAjanlat[MAX_PLAYERS] = NINCS;
new Vizsgafajta[MAX_PLAYERS];
new VizsgaAr[MAX_PLAYERS] = 0;
new Autocp[MAX_PLAYERS];
new Repulocp[MAX_PLAYERS];
new Hajocp[MAX_PLAYERS];
new Csomagszallitocp[MAX_PLAYERS];
new Motorcp[MAX_PLAYERS];
new Jogsineki[MAX_PLAYERS] = NINCS;
new PrivatAjanlat[MAX_PLAYERS] = NINCS;
new PrivatAr[MAX_PLAYERS] = NINCS;
new PrivatEngedely[MAX_PLAYERS] = NINCS;
new LSPDmoney;
new reporttiltva[MAX_PLAYERS];
//new TvEngedely[MAX_PLAYERS];
new tuningolo[MAX_PLAYERS];
new VanBombaBenne[MAX_VEHICLES];
new Belepve[MAX_PLAYERS];

new VanKB[MAX_PLAYERS];
new KerekBilincs[MAX_VEHICLES];
new Text3D:KB3D[MAX_VEHICLES];
new KBWait[MAX_PLAYERS];
new KBWait2[MAX_PLAYERS];

//Globális bankrob változók:
new MikorRabolhato[4] = 0;
new BankRobIdo[4] = 0;
new BankRobVan[4] = 0;

//SF Bankrob:
new BankAjto = NINCS;
new BankC4 = NINCS;
//LS Bankrob:
new BankC2 = NINCS;
new Text3D:BankC23D;

new HibasBelepes[MAX_PLAYERS];

Freeze(playerid, ido = 0)
{
	TogglePlayerControllable(playerid, 0);
	
	if(ido > 0)
	{
		SetTimerEx("UnFreeze", ido, false, "i", playerid);
	}
	return 1;
}

/* ################################# MATEMATIKAI FÜGGVÉNYEK ################################# */
stock bool:NemNegativSzam(szam)
{
	if(szam >= 0) return true;
	else return false;
}

stock bool:PozitivSzam(szam)
{
	if(szam > 0) return true;
	else return false;
}

stock bool:NegativSzam(szam)
{
	if(szam < 0) return true;
	else return false;
}

stock bool:ParosSzam(szam)
{
	if((szam % 2) == 0) return true;
	else return false;
}
/* ############################################################################################# */
stock bool:IsValidPlayerID(playerid)
{
	if((0 <= playerid < MAX_PLAYERS) && IsPlayerConnected(playerid)) return true;
	else return false;
}

stock bool:IsValidVehicleID(vehicleid)
{
	if((1 <= vehicleid < MAX_VEHICLES) && IsValidVehicle(vehicleid) && (vehicleid != INVALID_VEHICLE_ID)) return true;
	else return false;
}

stock bool:IsValidPickupObject(obj)
{
	new allpickups[20] =
	{
		1240, 1242, 1239, 1272,	1273,
		1212, 1241,	1247, 1248,	1252,
		/*1253,*/ 1254,	1274, 1275,	1277,
		1313, 1314,	1276, 1310,	1318,
		1279
	};
	
	new i = NINCS, bool:talalt = false;
	for(;++i < sizeof(allpickups);)
	{
		if(obj == allpickups[i])
		{
			talalt = true;
			break;
		}
	}
	
	if(talalt) return true;
	else return false;
}

stock PlayerIP(playerid)
{
	new getip[16];
	GetPlayerIp(playerid, getip, sizeof(getip));
	return getip;
}

stock bool:Sofor(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return true;
	else return false;
}

stock bool:real_escape_string(szoveg[])
{
	new tilos[12][8] =
	{
		{"|"},{"*"},{"'"},{"/"},{";"},
		{"="}, {"#"},
		{"INSERT"},{"DELETE"},{"DROP"},{"SELECT"},{"UPDATE"}
	};
	
	new i = NINCS;
	for(;++i < sizeof(tilos);)
	{
		if(strfind(szoveg, tilos[i], true) != NINCS) return false;
	}
	return true;
}

stock HibasParancs(playerid, bool:adminparancs = false)
{
	new szoveg[48];
	if(adminparancs && Admin(playerid))
		szoveg = "~r~Hiba: ~w~Nincs elég jogosultságod!";
	else
		szoveg = "~r~Hiba: ~w~Nem létezik ilyen parancs!";
	iMsg(playerid, szoveg);
	PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
	return 1;
}

stock RGBAToHex(r, g, b, a)
{
	return (r << 24 | g << 16 | b << 8 | a);
}

stock HexToRGBA(colour, &r, &g, &b, &a)
{
	r = (colour >> 24) & 0xFF;
	g = (colour >> 16) & 0xFF;
	b = (colour >> 8) & 0xFF;
	a = colour & 0xFF;
}

stock RandomVehicleColor()
{
	return Rand(0, 127);
}
/* ############################################################################################# */
stock SpecKarakterek(szoveg[], karakterek[] = ", ")
{
	new bool:talalt;
	for(new x = 0; x < strlen(karakterek); x++)
	{
		if(strfind(szoveg, karakterek[x]) != NINCS)
		{
			talalt = true;
			break;
		}
	}
	return talalt;
}

stock ResetPlayerWeaponDamageType(playerid)
{
	for(new i = 0; i < MAX_WEAPON_DAMAGE; i++)
	{
		PlayerWeaponDamageType[playerid][i] = 0;
	}
	return 1;
}

/*public OnIncomingConnection(playerid, ip_address[], port)
{
	new time = 2; // perc
	PlayerForeach(x)
	{
		if(egyezik(PlayerIP(x), ip_address)) InComingConnect[x] ++;
		if(InComingConnect[x] > 3)
		{
			BlockIpAddress(ip_address, time*6000);
			printf("[IPBLOCK] PlayerID: %d | IP: %s | Connects: %d | Port: %d | BlockTime: %d", playerid, ip_address, InComingConnect[x], port, time);
		}
	}
	return 1;
}*/

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z) // CarFlood
{
	DebugMessage("OnUnoccupiedVehicleUpdate(%d, %d, %d, %f, %f, %f, %f, %f, %f) -> START", vehicleid, playerid, passenger_seat, new_x, new_y, new_z, vel_x, vel_y, vel_z);
    if(GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z) > 30)
    {
		SetVehicleVirtualWorld(vehicleid, HACKER_VW);
		SetPlayerVirtualWorld(playerid, HACKER_VW);
		if(!CarFloodTimer)
		{
			ABroadCastFormat(COLOR_LIGHTRED, 1, "<< CARFLOOD HACK WARN: [%d]%s >>", playerid, PlayerName(playerid));
			SetTimer("CarFloodReset", 30 * 1000, false);
			CarFloodTimer = true;
		}
        return 0;
    }
	DebugMessage("OnUnoccupiedVehicleUpdate(%d, %d, %d, %f, %f, %f, %f, %f, %f) -> END", vehicleid, playerid, passenger_seat, new_x, new_y, new_z, vel_x, vel_y, vel_z);
    return 1;
}

fuggveny PlayTarhelySound(playerid, const sound[])
{
	new url[128];
	Format(url, "http://www.ls-rp.hu/tarhely/sounds/%s", sound);
	return PlayAudioStreamForPlayer(playerid, url);
}

fuggveny RadioChecker()
{
	PlayerForeach(playerid)
	{
		if(!IsPlayerInAnyVehicle(playerid) && IsValidPlayerID(playerid))
		{
			VehicleForeach(v)
			{
				new
					Float:vehx, 
					Float:vehy, 
					Float:vehz,
					Float:MaxTavolsag = 15.0
				;
				
				GetVehiclePos(v, vehx, vehy, vehz);
				
				if(IsPlayerInRangeOfPoint(playerid, MaxTavolsag, vehx, vehy, vehz)) // ha hatótávon belül van
				{
					if(!KocsiZeneSzol[playerid]) // ha nem szól zene a játékosnál
					{
						if(!egyezik(KocsiZeneURL[v], NINCSKOCSIZENE_URL)) // nem üres az URL
						{
							if(AblakLent[v]) // ha lent van az ablak
							{
								StopAudioStreamForPlayer(playerid);
								PlayAudioStreamForPlayer(playerid, KocsiZeneURL[v]);
								
								KocsiZeneSzol[playerid] = true;
								StreameltKocsiID[playerid] = v;
								
								/*new szoveg[48];
								Format(szoveg, "Kocsirádió stream: %d", v);
								iMsg(playerid, szoveg);*/
							}
						}
					}
				}
				else if(KocsiZeneSzol[playerid] && !AblakLent[StreameltKocsiID[playerid]] || (v == StreameltKocsiID[playerid] && !IsPlayerInRangeOfPoint(playerid, MaxTavolsag, vehx, vehy, vehz)))
				{
					StopAudioStreamForPlayer(playerid);
					KocsiZeneSzol[playerid] = false;
					StreameltKocsiID[playerid] = 0;
				}
			}
		}
	}
	return 1;
}

fuggveny VehicleVWReset(vehicleid)
{
	SetVehicleVirtualWorld(vehicleid, 0);
	SetVehicleInterior(vehicleid, 0);
	return 1;
}

fuggveny TrafiUjraBuntetes(playerid)
{
	TrafiBuntetve[playerid] = false;
	Msg(playerid, "DEBUG x5500C2227");
	return 1;
}

stock MuszerFalUpdate(playerid)
{
	if(!Logged(playerid)) return 0;
	if(IsPlayerInAnyVehicle(playerid) && IsValidPlayerID(playerid) && !IsPlayerNPC(playerid))
	{
		new info[124];
		Format(info, "~b~km/h: ~h~~g~%d", JatekosSebessege(playerid));
		TextDrawSetString(pHUD[playerid][0], info);
		
		new 
			uzemanyag = NINCS,
			uzemanyagtipus[8],
			ideiglenes = GetPlayerVehicleID(playerid)
		;
		
		if(BenzinesKocsi(ideiglenes))
		{
			uzemanyag = Gas[ideiglenes][UZEMANYAGTIPUS_BENZIN];
			uzemanyagtipus = "Benzin";
		}
		else 
		{
			uzemanyag = Gas[ideiglenes][UZEMANYAGTIPUS_DIESEL];
			uzemanyagtipus = "Diesel";
		}
		
		Format(info, "~b~%s: ~h~~g~%dL/%dL", uzemanyagtipus, MaxBenzin(ideiglenes), uzemanyag);
		TextDrawSetString(pHUD[playerid][1], info);
	}
	return true;
}

public UnFreeze(playerid)
{
	TogglePlayerControllable(playerid, true);
	if(PlayerToPoint(10.0, playerid, 1659.5399, 221.7910, -82.2500)) {
		ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0);
	}
	return 1;
}

public EcstasyMinus(playerid)
{
	EcstasyMennyiseg[playerid] --;

	if(EcstasyMennyiseg[playerid] == 0)
	{
	    SetPlayerWeather(playerid, IdoJaras[iMost]);
	    
	    Msg(playerid, "Ki ment a drog hatása belõled...");
	    
	    KillTimer(EcstasyTimer[playerid][1]);
	}

	return 1;
}
public Dropoff_ECSY(playerid, type)
{
	if(type == 0)
	{
		SetPlayerPos(playerid, 7461.8140, -111.5905, 65.0940);
		SetPlayerInterior( playerid, 0);
		SetPlayerVirtualWorld( playerid, 0);

		Msg(playerid, "Megérkeztél a szigetre.");
	}
	else
	{
	    new Esely = random(4);
	    
	    if(Esely == 2)
	    {
	        SendRadioMessage(LMUNKA_LSPD, COLOR_DBLUE, "** FIGYELEM: Egy fickónál gyanús elemeket(drogszármazék) találtak, hamarosan le száll a reptéren.");
	        SendRadioMessage(LMUNKA_FBI, COLOR_DBLUE, "** FIGYELEM: Egy fickónál gyanús elemeket(drogszármazék) találtak, hamarosan le száll a reptéren.");
	    }
	    
     	SetPlayerPos(playerid, 1685.8081, -2333.9009, 13.5469);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		Msg(playerid, "Sikeresen hazaérkeztél.");
	}
	
	return 1;
} 
 
public OnVehicleRespray(playerid, vehicleid, color1, color2) 
{ 
	GetVehicleHealth(vehicleid, vhealth[playerid]); 
	return 1; 
}
 
public OnVehicleLoseHealth(playerid, vehid, health) 
{
	new berkocsi = BereltKocsi[playerid];
	if(berkocsi != NINCS)
	{
		if(vehid == berkocsi && health > 5.0 && !IsAdminSzolis(playerid))
		{
			new karterites = health * 2;
			GiveMoney(playerid, -karterites);
			
			PlayerTextFormat(playerid, "Megsérült a bérelhetõ jármû, ezért kártérítést ($%d) kell fizetned!", karterites);
			iMsg(playerid, PlayerText[playerid]);
		}
	}
	return 1; 
}

fuggveny HalalAnimPlay(playerid, bool:play)
{
	if(play && !IsAdminSzolis(playerid, NINCS))
	{
		ClearAnimations(playerid);
		switch(JatekosHalal[playerid])
		{
			case 1: LoopingAnim(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 0, 0, 1, 0);
			case 2: { Freeze(playerid); ApplyAnimation(playerid, "PED", "FLOOR_hit_f", 4.1, 0, 1, 1, 1, 1, 1); }
		}
		HalalAnim[playerid] = true;
	}
	else
	{
		KillTimer(AnimTimer[playerid]);
		DestroyDynamic3DTextLabel(HalalAnim3D[playerid]);
		JatekosHalal[playerid] = 0;
		HalalAnim[playerid] = false;
		ResetPlayerWeaponDamageType(playerid);
		
		UnFreeze(playerid);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		ClearAnimations(playerid);
	}
	return true;
}

fuggveny ButorSzerkesztoKi(playerid)
{
	Msg(playerid, "Lejárt az idõd ezért a bútorszerkesztõ üzemmód kikapcsolt!");
	ButorSzerkesztoMod = false;
	return 1;
}
 
public Refix(playerid) 
{
	ApplyAnimation(playerid, "ped", "getup_front",4,0,0,0,0,0); 
	SetTimerEx("Controllable",1800,0, "i",playerid); 
	SetTimerEx("DrunkClean",3000,0, "i",playerid); 
	return 1; 
} 
 
public Controllable(playerid) return TogglePlayerControllable(playerid, 1); 
 
public DrunkClean(playerid) 
{
	SetPlayerDrunkLevel(playerid,0);
	return 1; 
}
 

Float:GetDistance( Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2 )
{
    new Float:d;
    d += floatpower(x1-x2, 2.0);
    d += floatpower(y1-y2, 2.0);
    d += floatpower(z1-z2, 2.0);
    d = floatsqroot(d);
	return d;
}
#define GasMax 100
#define RunOutTime 40000
#define RefuelWait 7500

enum KocsiEnum
{
	kTargonca,
	kUttisztito,
	kTaxi,
	kUttisztitoLV,
	kProd,
	kFavago,
	kPizza,
	kRepulo,
	kCsomagszallito,
	kFarmer,
	kFunyiro,
	kKukas,
	kKukasLV,
	kSzabad,
	kGokart
}
new Kocsik[KocsiEnum][2];

enum pBoxingStats
{
    TitelName[128],
    TitelWins,
    TitelLoses,
};
new Titel[pBoxingStats];
enum pGroceries
{
	pChickens,
	pChicken,
	pHamburgers,
	pHamburger,
	pPizzas,
	pPizza,
};
new Groceries[MAX_PLAYERS][pGroceries];

enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

enum eCars
{
	model_id,
	Float:pos_x,
	Float:pos_y,
	Float:pos_z,
	Float:z_angle,
};
enum tInfo
{
	bool:tAktiv,
	tSebesseg,
	tBuntetes,
	tBuntetheto,
	tBfigyelmeztetes,
	Float:tPosX,
	Float:tPosY,
	Float:tPosZ,
	Text3D:t3D
}
new TrafiPax[MAX_PLAYERS][tInfo];

enum DAInfo
{
	aLunaPark,
	San_Fierro,
	LVBank,
	aRepter[2],
	AJSzokes
};
new Areak[DAInfo];

enum gyeInfo
{
	Float:gPosX,
	Float:gPosY,
	Float:gPosZ,
	gPosVW,
	gPosInt,
	gObID
};
new Gyemant[5][gyeInfo];

#define MAX_SeeRPG_OBJECT 50
enum SeeRPG_object_data
{
    object_modelid,
	object_objectid,

 	Float:object_distance,

	Float:object_x,
	Float:object_y,
	Float:object_z,

	Float:object_rx,
	Float:object_ry,
	Float:object_rz,
	object_text[256],
}

new Float:SeeRPGStreamer[MAX_SeeRPG_OBJECT][SeeRPG_object_data];

enum object_data
{
    object_modelid,
	object_objectid,
	object_vehicleid,

 	Float:object_distance,

	Float:object_x,
	Float:object_y,
	Float:object_z,

	Float:object_rx,
	Float:object_ry,
	Float:object_rz
}

new Float:Jarmu_Streamer[MAX_VEHICLE_OBJECTS][object_data];

enum TuzAdatok
{
	Van,
	tID,
	Float:TuzPos[3],
	TuzHP,
	MaxTuzHP,
	tObjekt
};
new Tuz[MAXTUZ][TuzAdatok];

enum lInfo
{
	lEllenseg[26],
	lTusz[9],
	lGyakorlatvan,
	lGyakorlo,
	ObjectAktiv,
	bool:AktivObjectTusz,
	lGyakorlatIdo,
	lHibapont,
	lTalalat,
	lFegyver,
	lTalalt,
}
new LoterInfo[lInfo];
enum jlInfo
{
	bool:jLaptopBe,
	jFolyamat,
	jWifi
}
new JatekosLaptopInfo[MAX_PLAYERS][jlInfo];

enum pInfo
{
	pID,
	pRegistered,
	pNev[MAX_PLAYER_NAME],
	pKey[145], pSecurityKey[145],
	pLevel, pSzintetLephet,
	pAdmin,
	pDonateRank,
	gPupgrade,
	pConnectTime,
	pSex,
	pAge,
	pOrigin,
	pMuted,
	pExp,
	pCash,
	pAccount,
	pKills,
	pArrested,
	pWantedDeaths,
	pPhoneBook,
	pLottoNr,
	pJob1,
	pJob2,
	pPayCheck,
	pHeadValue,
	pJailed,
	pJailTime,
	pMats,
	pKokain,
	pHeroin,
	pMarihuana,
	pLeader,
	pMember,
	pOperator,
	pRank,
	pChar,
	pContractTime,
    pContractTime2,
	pDetSkill,
	pSexSkill,
	pBoxSkill,
	pLawSkill,
	pMechSkill,
	pJackSkill,
	pCarSkill,
	pFegyokerSkill,
	pNewsSkill,
	pDrugsSkill,
	pHackingSkill,
	pRiasztoSkill,
	Float:pHealth,
	Float:pSHealth,
	pInt,
	pLocal,
	pModel,
	pPnumber,
	pPhousekey,
	pPhousekey2,
	pBerlo,
	pPbiskey,
	pCarLic,
	pFlyLic,
	pBoatLic,
	pFishLic,
	pGunLic,
	pMotorJogsi,
	pCsomagszallitoJogsi,
	pCarTime,
	pPayDay,
	pPayDayHad,
	pCDPlayer,
	pWins,
	pLoses,
	pAlcoholPerk,
	pDrugPerk,
	pMiserPerk,
	pPainPerk,
	pTraderPerk,
	pTutorial,
	pWarns,
	pKWarns,
	pFuel[2],
	pMarried,
	pMarriedTo[MAX_PLAYER_NAME],
	pLokator,
	pHamisNev[256],
	pSpawned,
	pMuanyag,
	
	pCserje,
	pMak,
	pCannabis,
	
	pCserjeMag,
	pMakMag,
	pCannabisMag,
	
	pKaja,
	pDrogido,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	pCrash,
	pFegyver[12],
	pTolteny[12],
	Float:pCelet,
	Float:pCpajzs,
	pPcarkey,
	pPcarkey2,
	pCigiUsed,
	pCigiFuggoseg,
	pCigi,
	pNikotin,
	pGyujto,
	pPia,
	pNIDTag,
	pNIDRang,
	pKituntetes,
	pSzallitott,
	pSpawnchange,
	pTeloEgyenleg,
	pAdminAlnev[MAX_PLAYER_NAME],
	pKotszer,
	pUtlevel,
	pStilus,
	//pIP[16],
	pBankSzamla,
	pBankSzamlaSzam,
	pBankSzamlaJelszo,
	pC4,
	pHitman,
	pHitmanNev[MAX_PLAYER_NAME],
	pPremiumCsomag,
	pPremiumIdo,
	pPremiumPont,
	pPower,
	pReportChannel,
	pViewReportChannel,
	pReportTiltva,
	pAdoHaz,
	pAdoHazHol,
	pAdoSzint,
	pAdoJarmu,
	pAdoKitoltve,
	pAdoFizetve,
	pAdo,
	pAdoEllenorizve,
	//======= AntiFlood ======
	pElozoParancs,
	pFlood,
	//========
	pHitel,
	pFelvettHitel,
	pHitelOra,
	pHitelElteltOra,
	pZarolva,
	pJegy,
	pSSS,
	pJailOK[80],
	pJailtAdta[32],
	pAdovan[5],
	pLkocsi,
	pLkocsiar,
	pFem,
	pSzemelyi,
	pLakcimkartya,
	pMunkaVallalasi,
	pOvadek,
	pHack,
	pLaptop,
	pSzokesJelzes,
	pHackProba,
	pEmail[128],
	pSzemuveg,
	pMaszk,
	pVokitoki,
	pHelyszinelo,
	pVontatoKotel,
	pSWATTag,
	pSWATRang,
	pBankKartya,
	pFishes,
	pBot,
	pCsali,
	pDamil,
	pKitanulva[OSSZMUNKA],
	pTerkep,
	pJelzes[3],
	pCsavarhuzo,
	pC2,
	pC2Taska,
	pAS,
	pASIdo,
	pNyelvTanulva[MAX_NYELV],
	pNyelv,
	pNyelvTanulas[2],
	Float:pAlmossag,
	Float:pEhseg,
	pSzerszamoslada,
	pOrvossag,
	pFegyverSkill[11],
	pRaktarengedely,
	pInventory[INV_SLOT],
	pVA,
	pRPPont,
	pCp,
	pCsipogo,
	pSapka,
	pMobiltrafi,
	pIsmeros[MAX_ISMEROS],
	pUtolsoLoginIdo,
	pUtolsoLoginIP[16],
	pStand,
	pStandEngedely,
	pOnlineIdo,
	pDutyIdo,
	pOktatasok[7],
	pKresz,
	pHotelSzoba,
	pSzerelo,
	pSzereloRang,
	pHazMasodtulaj,
	pAdminAlnevBe,
	Float:pSzomjusag,
	pCsoport,
	pEcstasy,
	pAmfetamin,
	pShowInfoBar,
	pCamera,
	pCameraE,
	pHifi,
	pPayDayMegkapva,
	pCsomagszallitoSkill,
	pAAuto,pVeszAuto[3],//0 autó, 1 modell, 2 típus
	pValamiSkill,
	bool:pBUj, pBHaz, pBObjID, pBTipus[50], pBPIN
};
new PlayerInfo[MAX_PLAYERS][pInfo];

enum rInfo
{
	rNev[MAX_PLAYER_NAME],
	rFrakcio,
	rRang
}
new ElvettRadio[MAX_PLAYERS][rInfo];
new RadioElveve[MAX_PLAYERS] = false;

#define moving_speed 50

#define MAX_TAG 500
#define TAG_FELFESTESIDO 15
enum taInfo
{
	tVan,
	tFestveVan,
 	Float:tPoz[3],
 	Float:tRot[3],
 	tKesz,
 	tTulaj,
 	tObject,
	Text3D:tText
}
new TagInfo[MAX_TAG][taInfo];

#define HAZ_X 1
#define HAZ_Y 2
#define HAZ_Z 3
#define HAZ_Belso 4
#define HAZ_Health 5
#define HAZ_Armour 6
#define HAZ_Owner 7
#define HAZ_Value 8
#define HAZ_Hel 9
#define HAZ_Arm 10
#define HAZ_Lock 11
#define HAZ_Owned 12
#define HAZ_Rooms 13
#define HAZ_Rent 14
#define HAZ_Rentabil 15
#define HAZ_Takings 16
#define HAZ_Date 17
#define HAZ_Csak 18
#define HAZ_Csakneki 19
#define HAZ_Kaja 20
#define HAZ_Cigi 21
#define HAZ_Kokain 22
#define HAZ_Heroin 23
#define HAZ_Marihuana 24
#define HAZ_Mati 25
#define HAZ_Tipus 26
#define HAZ_Fegyverek 27
#define HAZ_Mellenyek 28
#define HAZ_Villany 29
#define HAZ_Drog 30
#define HAZ_Garazs 31
#define HAZ_Gyogyszer 32
#define HAZ_Ruha 33
#define HAZ_DrogRendszer 34
#define HAZ_Szef 35
#define HAZ_Owner2 36
enum hInfo
{
	Van,
	Uj,
	Float:hEntrancex,
	Float:hEntrancey,
	Float:hEntrancez,
	hBelso,
	hHealth,
	hArmour,
	hOwner[MAX_PLAYER_NAME],
	hValue,
	hHel,
	hArm,
	hLock,
	hOwned,
	hRooms,
	hRent,
	hRentabil,
	hTakings,
	hDate,
	hCsak,
	hCsakneki[MAX_PLAYER_NAME],
	hKaja,
	hCigi,
	hKokain,
	hHeroin,
	hMarihuana,
	hMati,
	hTipus,
	hFegyverek[10],
	hToltenyek[10],
	hMellenyek[10],
	hVillanyFizetve,
	hVillanySzamla,
	hLekapcsolva,
	hDrog,
	hGarazs,
	hGyogyszer,
	Float:hGarazsPoz[4],
	hRuha[10],
	
	hDrogUltetve,
	hDrogIdo,
	hDrogTipus,
	hDrogObject,
	
	hSzef,
	hOwner2[MAX_PLAYER_NAME],
	bool:hNeedUpdate,
	Text3D:Haz3D
};

enum hUpdateInfo
{
	bool:hUtca,
	bool:hEntrancex,
	bool:hEntrancey,
	bool:hEntrancez,
	bool:hBelso,
	bool:hHealth,
	bool:hArmour,
	bool:hOwner,
	bool:hValue,
	bool:hHel,
	bool:hArm,
	bool:hLock,
	bool:hOwned,
	bool:hRooms,
	bool:hRent,
	bool:hRentabil,
	bool:hTakings,
	bool:hDate,
	bool:hCsak,
	bool:hCsakneki,
	bool:hKaja,
	bool:hCigi,
	bool:hKokain,
	bool:hHeroin,
	bool:hMarihuana,
	bool:hMati,
	bool:hTipus,
	bool:hFegyverek,
	bool:hMellenyek,
	bool:hVillanyFizetve,
	bool:hDrog,
	bool:hGarazs,
	bool:hGyogyszer,
	bool:hRuha,
	bool:hDrogRendszer,
	bool:hSzef,
	bool:hOwner2
};
new HouseInfo[MAXHAZ][hInfo], HouseUpdates[MAXHAZ][hUpdateInfo], HazakSzamaOsszesen;


#define HOTEL_X 1
#define HOTEL_Y 2
#define HOTEL_Z 3
#define HOTEL_Belso 4
#define HOTEL_Tulaj 5
#define HOTEL_Hel 6
#define HOTEL_Arm 7
#define HOTEL_Zarva 8
#define HOTEL_Eladva 9
#define HOTEL_Ara 10
#define HOTEL_Penz 11
#define HOTEL_Date 12
#define HOTEL_Kaja 13
#define HOTEL_Cigi 14
#define HOTEL_Kokain 15
#define HOTEL_Heroin 16
#define HOTEL_Marihuana 17
#define HOTEL_Mati 18
#define HOTEL_Fegyverek 19
#define HOTEL_Mellenyek 20
#define HOTEL_Gyogyszer 21
#define HOTEL_Ruha 22

enum hotelUpdateInfo
{
	bool:hEntranceX,
	bool:hEntranceY,
	bool:hEntranceZ,
	bool:hBelso,
	bool:hHealth,
	bool:hArmour,
	bool:hTulaj,
	bool:hHel,
	bool:hArm,
	bool:hZarva,
	bool:hEladva,
	bool:hAra,
	bool:hPenz,
	bool:hDate,
	bool:hKaja,
	bool:hCigi,
	bool:hKokain,
	bool:hHeroin,
	bool:hMarihuana,
	bool:hMati,
	bool:hFegyverek,
	bool:hMellenyek,
	bool:hGyogyszer,
	bool:hRuha
};

#define ALAPHOTELVW 2000

enum hotelInfo
{
	Van,
	Float:hEntranceX,
	Float:hEntranceY,
	Float:hEntranceZ,
	hBelso,
	hTulaj[MAX_PLAYER_NAME],
	hHel,
	hArm,
	hZarva,
	hEladva,
	hAra,
	hPenz,
	hDate,
	hKaja,
	hCigi,
	hKokain,
	hHeroin,
	hMarihuana,
	hMati,
	hFegyverek[10],
	hToltenyek[10],
	hMellenyek[10],
	hGyogyszer,
	hRuha[10],
	hSzef,
	bool:hNeedUpdate
};
new HotelInfo[MAXHOTEL][hotelInfo], HotelUpdates[MAXHOTEL][hotelUpdateInfo], HotelekSzamaOsszesen;

//Gazdaság:
#define MAX_FARM 1
#define GAZDASAG_Buza 1
#define GAZDASAG_Liszt 2
#define GAZDASAG_Tej 3
#define GAZDASAG_Szalma 4
#define GAZDASAG_Alma 5
enum GazdasagInfo
{
    fNeedUpdate,
	fBuza,
	fLiszt,
	fTej,
	fSzalma,
	fAlma
};

enum GazdasagUpdateInfo
{
    bool:fBuza,
    bool:fLiszt,
    bool:fTej,
    bool:fSzalma,
    bool:fAlma
}
new Gazdasag[MAX_FARM][GazdasagInfo],GazdasagUpdate[MAX_FARM][GazdasagUpdateInfo];

#define CAR_Owned 1
#define CAR_Owner 2
#define CAR_Id 3
#define CAR_Model 4
#define CAR_X 5
#define CAR_Y 6
#define CAR_Z 7
#define CAR_Angle 8
#define CAR_ColorOne 9
#define CAR_ColorTwo 10
#define CAR_Value 11
#define CAR_Lock 12
#define CAR_Date 13
#define CAR_Painted 14
#define CAR_Tuning 15
#define CAR_Kerek 16
#define CAR_Matrica 17
#define CAR_Neon 18
#define CAR_Frakcio 19
#define CAR_BRendszer 20
#define CAR_BRendszerKod 21
#define CAR_BRendszerAktiv 22
#define CAR_Dimenzio 23
#define CAR_PotKerek 24
#define CAR_MegtettKM 25
#define CAR_Hidraulika 26
#define CAR_MinRang 27
#define CAR_Muszaki 28
#define CAR_Meghibasodas 29
#define CAR_EMP 30
#define CAR_Regisztracio 31
enum cInfo
{
	Van,
	cId,
	cModel,
	Float:cLocationx,
	Float:cLocationy,
	Float:cLocationz,
	Float:cAngle,
	cColorOne,
	cColorTwo,
	cOwned,
	cOwner[MAX_PLAYER_NAME],
	cValue,
	cLock,
	cDate,
	cPainted,
	cKerek,
	cMegtettKM,
	cNeedUpdate,
	cMatrica,
	cNeon,
	#if defined FRAKCIOKOCSIK
	cFrakcio,
	#endif
	cBRendszer,
	cBRendszerKod,
	cBRendszerAktiv,
	cDimenzio[2],
	cPotKerek,
	cHidraulika,
	cMinRang,
	cMuszakiIdo,
	cAllapot[ALLAPOTOK],
	cEMP,
	cMod[14],
//----Rendszám----
	cRendszam[12],
	cRegisztralva
};

enum cUpdateInfo
{
	bool:cOwned,
	bool:cOwner,
	bool:cId,
	bool:cModel,
	bool:cLocationx,
	bool:cLocationy,
	bool:cLocationz,
	bool:cAngle,
	bool:cColorOne,
	bool:cColorTwo,
	bool:cValue,
	bool:cLock,
	bool:cDate,
	bool:cPainted,
	bool:cKerek,
	bool:cMatrica,
	bool:cNeon,
	#if defined FRAKCIOKOCSIK
	bool:cFrakcio,
	#endif
	bool:cBRendszer,
	bool:cBRendszerKod,
	bool:cBRendszerAktiv,
	bool:cDimenzio,
	bool:cPotKerek,
	bool:cMegtettKM,
	bool:cHidraulika,
	bool:cMinRang,
	bool:cMuszaki,
	bool:cAllapot,
	bool:cEMP,
	bool:cMod,
	bool:cRegisztracio
}

new CarInfo[MAXVSKOCSI][cInfo], CarUpdates[MAXVSKOCSI][cUpdateInfo];

#define MAX_KAPU (100)

enum kInfo
{
	Van,
	Float:kPos[3],
	Float:kAngle[3],
	Float:kNyitottPos[3],
	Float:kNyitottAngle[3],
	kTulaj[MAX_PLAYER_NAME],
	kObject,
	kObjectID,
	kFrakcio,
	kJelszo[32],	
	kAutomata
}
new KapuInfo[MAX_KAPU][kInfo];//, KapuUpdates[MAX_KAPU][kUpdateInfo];


#define TERULET_Nev 1
#define TERULET_MinX 2
#define TERULET_MaxX 3
#define TERULET_MinY 4
#define TERULET_MaxY 5
#define TERULET_Tulaj 6
#define TERULET_HaszonMit 7
#define TERULET_HaszonMennyit 8
#define TERULET_Foglalva 9

#if defined War_System
enum terInfo
{
	Van,
	tZone,
	tZoneVan,
	tArea,
	tNev[40],
	Float:tMinX,
	Float:tMaxX,
	Float:tMinY,
	Float:tMaxY,
	tTulaj,
	tHaszon,
	tHaszonMennyi,
	bool:tHarc,
	tLofegyver,
	tHarcolok[2],
	tVarakozasIdo,
	
	tFoglalva,
	bool:tNeedUpdate
};

enum tUpdateInfo
{
	bool:tNev,
	bool:tMinX,
	bool:tMaxX,
	bool:tMinY,
	bool:tMaxY,
	bool:tTulaj,
	bool:tHaszon,
	bool:tHaszonMennyi,
	bool:tFoglalva
}

new TeruletInfo[MAXTERULET][terInfo], TeruletUpdates[MAXTERULET][tUpdateInfo], bool:HarcVan;
#endif

enum igenyInfo
{
	Van,
	Nev[MAX_PLAYER_NAME],
	Belso,
	Float:iX,
	Float:iY,
	Float:iZ,
}

new HazIgenylesek[MAXIGENYLES][igenyInfo];

enum ajtoInfo
{
	Van,
	Nev[32],
	Csak[16],
	Float:BeX,
	Float:BeY,
	Float:BeZ,
	BeInt,
	BeVW,
	Float:KiX,
	Float:KiY,
	Float:KiZ,
	KiInt,
	KiVW,
	Zarva,
	Freezel,
	
	PickupBent,
	PickupKint,
	
	PickupID,
	
	TeruletKint,
	TeruletBent,
	
	Vedelem
}

new Ajtok[MAXAJTO][ajtoInfo];

#define BIZ_Owned 1
#define BIZ_Owner 2
#define BIZ_Message 3
#define BIZ_Extortion 4
#define BIZ_X 5
#define BIZ_Y 6
#define BIZ_Z 7
#define BIZ_ExitX 8
#define BIZ_ExitY 9
#define BIZ_ExitZ 10
#define BIZ_LevelNeeded 11
#define BIZ_BuyPrice 12
#define BIZ_EntranceCost 13
#define BIZ_Till 14
#define BIZ_Locked 15
#define BIZ_Interior 16
#define BIZ_Products 17
#define BIZ_MaxProducts 18
#define BIZ_PriceProd 19
#define BIZ_VanBelso 20

enum BenzinKutInfo
{
	Float:bPosX,
	Float:bPosY,
	Float:bPosZ,
	bMaxBenzin,
	bBenzin,
	Float:bTav,
	bBerlo[25],
	bBenzinAra,
	bSzef,
	bNev[25],
};
new BenzinKutak[MAX_BENZINKUT][BenzinKutInfo];

#define MAX_RAKTAR 200
#define MAX_RAKTAR_FEGYVER 30

#define RAKTAR_Pos 1
#define RAKTAR_Tulaj 2
#define RAKTAR_Jelszo 3
#define RAKTAR_Ar 4
#define RAKTAR_Drog 5
#define RAKTAR_Mati 6
#define RAKTAR_Penz 7
#define RAKTAR_Fegyver 8
#define RAKTAR_Loszer 9

enum rUpdateInfo
{
	bool:rPos,
	bool:rTulaj,
	bool:rJelszo,
	bool:rAr,
	bool:rDrog,
	bool:rMati,
	bool:rPenz,
	bool:rFegyver,
	bool:rLoszer
}

enum rAdatok
{
	Van,
	aID,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	rTulaj[MAX_PLAYER_NAME],
	rJelszo[128],
	rAr,
	
	rKokain,
	rHeroin,
	rMarihuana,
	rMati,
	rPenz,
	rFegyver[MAX_RAKTAR_FEGYVER],
	rLoszer[MAX_RAKTAR_FEGYVER],
	rPickup,
	rNeedUpdate,
};
new Raktar[MAX_RAKTAR][rAdatok], RaktarBetoltve = 0, RaktarUpdates[MAX_RAKTAR][rUpdateInfo];

enum aAdatok
{
	Van,
	aID,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aRotX,
	Float:aRotY,
	Float:aRotZ,
	aObjectID,
	aKirabolva,
	aRiaszto,
	aMapIcon
};
new ATM[MAX_ATM][aAdatok], ATMBetoltve = 0;

enum FulkeAdatok
{
	Van,
	fID,
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	Text3D:Fulke3D
};
new Fulke[MAX_FULKE][FulkeAdatok], FulkeBetoltve = 0;

enum iAdatok
{
	Van,
	iID,
	Float:iPosX,
	Float:iPosY,
	Float:iPosZ,
	iPickupID,
	iPickupObject
};
new Pickup[MAX_PICKUP][iAdatok];

#define FRAKCIO_Cuccok 1
#define FRAKCIO_PosX 2
#define FRAKCIO_PosY 3
#define FRAKCIO_PosZ 4
#define FRAKCIO_PosA 5
#define FRAKCIO_Object 6
#define FRAKCIO_Nev 7
#define FRAKCIO_Fegyverek 8
#define FRAKCIO_UtolsoTamadas 9
#define FRAKCIO_Fizetes 10
#define FRAKCIO_Szovetseg 11
#define FRAKCIO_MinRang 12
#define FRAKCIO_Raktar_Fegyver 13
#define FRAKCIO_Raktar_Loszer 14
#define FRAKCIO_Raktar_Melleny 15
#define FRAKCIO_Jelado 16
#define FRAKCIO_Gyemant 17
#define FRAKCIO_Jelszo 18
#define FRAKCIO_Limit 19
#define FRAKCIO_Rangok 20
enum fUpdateInfo
{
    bool:fCuccok,
	bool:fPosX,
	bool:fPosY,
	bool:fPosZ,
	bool:fPosA,
	bool:fObject,
	bool:fNev,
	bool:fFegyver,
	bool:fUtolsoTamadas,
	bool:fFizetes,
	bool:fSzovetseg,
	bool:fMinRang,
	bool:fRaktarFegyver,
	bool:fRaktarLoszer,
	bool:fRaktarMelleny,
	bool:fJelado,
	bool:fGyemant,
	bool:fGyemantPW,
	bool:fJelszoUpDate,
	bool:fLimit,
	bool:fRangok
}

#define MAX_FRAKCIO_RANG (15) // a +1 a rang 0 miatt kell
#define MAX_FRAKCIO_RANG_HOSSZ (24)
enum e_fRangok
{
	rNev[MAX_FRAKCIO_RANG_HOSSZ],
	rFizetes
};
new FrakcioRangInfo[MAX_FRAKCIO][MAX_FRAKCIO_RANG+1][e_fRangok];

enum fAdatok
{
	fPenz,
	fMati,
	fKokain,
	fHeroin,
	fMinrang,
	fKaja,
	fMarihuana,
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	fObject,
	Float:fPosA,
	fNev,
	fDeagle,
	fSilenced,
	fMp5,
	fM4,
	fShotgun,
	fCombat,
	fSniper,
	fJelszo[32],
	fFegyver[FEGYVERRAKTAR_SLOT],
	fTolteny[FEGYVERRAKTAR_SLOT],
	fUtolsoTamadas,
	fTagokSzama,
	fFizetes[MAX_FRAKCIO_RANG+1],
	fMelleny[FEGYVERRAKTAR_SLOT],
	fSzovetseges[MAX_FRAKCIO],
	fNeedUpdate,
	fJelado,
	Float:fJeladoPos[4],
	fJelErosito,
	fJeladoObject,
	fGyemant,
	fGyemantPW[32],
	fJarmuvekSzama,
	fLimit,
	bool:fOOCRadio
};
new FrakcioInfo[MAX_FRAKCIO][fAdatok], FrakcioUpdates[MAX_FRAKCIO][fUpdateInfo];

enum CsoportAdatok
{
	CsID,
	CsNev[MAX_CSOPORTNEV_HOSSZ],
	CsLeader,
	CsMembers
};
new CsoportInfo[MAX_CSOPORT][CsoportAdatok];

enum fDuty
{
	Float:dX,
	Float:dY,
	Float:dZ
};
new FrakcioDuty[MAX_FRAKCIO][fDuty];

enum teInfo
{
	tSilenced,
	tDeagle,
	tMp5,
	tM4,
	tShotgun,
	tCombat,
	tSniper,
};
new TekInfo[teInfo];

enum interiorsInfo
{
	iType[32],
	iNumber,
	Float:iExitX,
	Float:iExitY,
	Float:iExitZ,
};
new IntInfo[MAXINT][interiorsInfo];

enum pHaul
{
	pLoad,
};

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];


new Peds[166][1] = {
{1}, //1
{10},{12},{14},{15},{16},{18},{19}, //8
{21},{22},{23},{24},{26},{27},{28}, //7
{31},{32},{34},{35},{36},{37},{38},{39}, //8
{40},{41},{43},{44},{45},{48},{49}, //8
{51},{52},{53},{54},{55},{56},{58}, //7
{62},{63},{64},{66},{67},{68}, //6
{72},{75},{76},{77},{78},{79}, //6
{80},{81},{82},{83},{84},{85},{87},{88},{89}, //8
{90},{92},{94},{95},{96},{97},{99}, //7
{100},{101}, //2
{128},{129}, //2
{130},{131},{132},{133},{134},{135},{136},{137},{138},{139}, //10
{140},{143},{144},{145},{146}, //5
{151},{152},{153},{154},{155},{156},{157},{158},{159}, //9
{160},{161},{162},{167},{168},{169}, //6
{170},{176},{178}, //3
{180},{181},{182},{183},{186}, //5
{190},{192},{194},{196},{197},{199}, //6
{200},{201},{203},{204},{205},{206},{207},{209}, //8
{211},{212},{213},{214},{215},{218},{219}, //7
{220},{221},{225},{227}, //3
{230},{231},{232},{234},{235},{236},{237},{238},{239}, //9
{243},{244},{245},{246},{247},{248},{249}, //7
{250},{251},{252},{254},{256},{257},{258},{259}, //8
{260},{261},{262},{263},{264},{268}, //5
{290},{291},{297},{298} //4
};

new Float: TaxiLicenseCP[][3] = {
	{0.0, 0.0, 0.0},
	{1295.4463,-1556.9071,13.3904}, // TAXI-CP-FIRST
	{1295.0824,-1622.3271,13.1099},
	{1482.0944,-1735.0981,13.1099}, // 2.cp-rendõrségre-hívás
	{1818.6230,-1873.3459,13.1400}, // 2.cp-trainstation-beért
	{2087.0823,-1783.1863,13.1099}, // pizzahut-hívás
	{1208.5212,-1325.3561,13.1255}, // mentõs-beért
	{945.4177,-1244.4877,15.8362}, // filmstúdió-hívás
	{1339.8525,-1253.8073,13.1099}, // fegyverbolt-beért
	{1532.7021,-1702.7524,13.1099}, // rendõrség-hívás
	{2247.8923,-1660.1055,15.0120}, // binco-beért
	{2214.4727,-1711.6864,13.1143}, // gym-hívás
	{1128.3435,-1392.3893,13.2095}, // pláza-beért
	{1276.2219,-1574.9436,13.1099} // taxiexam-end
};

stock KarakterTorles(nev[])
{
	if(!RegisztraltJatekos(nev)) return false;
	
	PlayerForeach(p)
	{
		if(egyezik(PlayerName(p, true), nev)) return false;
	}
	
	new sqlcommand[128];
	/* =============================== KARAKTER TÖRLÉSE =============================== */
	Format(sqlcommand, "DELETE FROM `playerek` WHERE `Nev` = '%s'", nev);
	mysql_query(sqlcommand);
	/* =============================== JÁRMÛVEK TÖRLÉSE =============================== */
	VehicleForeach(v)
	{
		new vs = IsAVsKocsi(v);
		if(vs != NINCS)
		{
			if(egyezik(CarInfo[vs][cOwner], nev))
			{
				DestroyVehicle(CarInfo[vs][cId]);
				CarInfo[vs][Van] = 0;
			}
		}
	}
	Format(sqlcommand, "DELETE FROM `kocsik` WHERE `Tulaj` = '%s'", nev);
	mysql_query(sqlcommand);
	/* =============================== HÁZAK TÖRLÉSE =============================== */
	return true;
}

stock taxi_fare_end(playerid)
{
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 420 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 438)
    {
		PlayerForeach(i)
		{
		    if(IsPlayerConnected(i))
		    {
		        if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
		        {
		            if(GetPlayerVehicleSeat(i) == 0 && GetPVarInt(i, "taxi_job_fare_state"))
		            {
          				new s[100];
						format(s, 100, "A fuvar ára: $%d", GetPVarInt(i, "taxi_job_fare_amount"));
	            		SendClientMessage(playerid, YELLOW, s);
	            		
	            		/*if(playerid != i)
				 			LostPlayerMoney(playerid, GetPVarInt(i, "taxi_job_fare_amount"));
				 			GivePlayerMoney(i, GetPVarInt(i, "taxi_job_fare_amount"));*/
		            
		                break;
		            }
		        }
		    }
		}
	}
    			
	return 1;
}

fuggveny fail_taxi_exam(playerid, reason[])
{
	if(0 < GetPVarInt(playerid, "TaxiLicense") < 100)
	{
		ClearAnimations(playerid);
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));

		DeletePVar(playerid, "TaxiLicense");
	    DeletePVar(playerid, "CheckpointTime");
	    KillTimer(GetPVarInt(playerid, "CheckpointTimer"));

		DisablePlayerCheckpoint(playerid);

		GameTextForPlayer(playerid, "~r~FAILED EXAM", 1500, 3);

	    SendClientMessage(playerid, COLOR_LIGHTRED, reason);
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Megbuktál a vizsgán!");
    }

	return 1;
}


stock success_taxi_exam(playerid)
{
	SetPVarInt(playerid, "TaxiLicense", 100);
    DeletePVar(playerid, "CheckpointTime");
    KillTimer(GetPVarInt(playerid, "CheckpointTimer"));

	DisablePlayerCheckpoint(playerid);

	GameTextForPlayer(playerid, "~g~SUCCESS EXAM", 1500, 3);

    SendClientMessage(playerid, COLOR_GREEN, "Sikeres vizsga!");

	return 1;
}

stock taxi_exam_newcp(playerid)
{
    if(JatekosSebessege(playerid) > 100)
    {
        DeletePVar(playerid, "TaxiLicense");
        return fail_taxi_exam(playerid, "Túl gyorsan hajtottál!");
	}

	if(GetPVarInt(playerid, "TaxiLicense") == sizeof(TaxiLicenseCP)-1 )
	    return success_taxi_exam(playerid);

    SetPVarInt(playerid, "TaxiLicense", GetPVarInt(playerid, "TaxiLicense")+1);

    switch(GetPVarInt(playerid, "TaxiLicense"))
    {
        case 1:
        {
            SendClientMessage(playerid, COLOR_GREEN, "Üdvözlünk a Taxi Vizsgán! Kérlek fordíts nagy figyelmet az elkövetkezendõ üzenetekre!");
            SendClientMessage(playerid, COLOR_GREEN, "Menj végig a piros jelzéseken. Ne felejts el az út jobb oldalán közlekedni!");
        }
        case 2:
        {
        	SendClientMessage(playerid, COLOR_GREEN, "Egy csomó pálya van ebben a gyakorlatban, amit végig kell járnod, hogy megszerezd a taxis munkát!");

		}
        case 3:
        {
   	    	KillTimer(GetPVarInt(playerid, "CheckpointTimer"));

			SetPVarInt(playerid, "CheckpointTimer", SetTimerEx("timer_CheckpointTime", 1000, true, "d", playerid));

	        SetPVarInt(playerid, "CheckpointTime", 300);
        	SendClientMessage(playerid, COLOR_YELLOW, "|____________Taxi Hívás____________|");
            SendClientMessage(playerid, COLOR_YELLOW, "Hívó: Taxi Oktató Ph: 90210");
            SendClientMessage(playerid, COLOR_YELLOW, "Jelenlegi Helyzet: Városháza");
		}
        case 4:
        {
        	SendClientMessage(playerid, COLOR_GREY, "Utas: Kérem siessen a vasútállomásra, mert lekésem a vonatom!");
		}
        case 5:
        {
        	SendClientMessage(playerid, COLOR_GREY, "Utas: Köszönöm a gyors fuvart! További szép napot!");
        	SendClientMessage(playerid, COLOR_YELLOW, "|____________Taxi Hívás____________|");
            SendClientMessage(playerid, COLOR_YELLOW, "Hívó: Taxi Oktató Ph: 90210");
            SendClientMessage(playerid, COLOR_YELLOW, "Jelenlegi Helyzet: Pizzéria");
		}
        case 6:
        {
        	SendClientMessage(playerid, COLOR_GREY, "Utas: Jónapot! Rosszul érzem magam... a kórházhoz szeretném!");
		}
        case 7:
        {
        	SendClientMessage(playerid, COLOR_GREY, "Utas: Köszönöm a fuvart! Viszlát!");
        	SendClientMessage(playerid, COLOR_YELLOW, "|____________Taxi Hívás____________|");
            SendClientMessage(playerid, COLOR_YELLOW, "Hívó: Taxi Oktató Ph: 90210");
            SendClientMessage(playerid, COLOR_YELLOW, "Jelenlegi Helyzet: Filmstúdió");
		}
        case 8:
        {
        	SendClientMessage(playerid, COLOR_GREY, "Utas: Vigyen el a fegyverbolthoz!");
		}
        case 9:
        {
        	SendClientMessage(playerid, COLOR_GREY, "Utas: Viszlát!");
        	SendClientMessage(playerid, COLOR_YELLOW, "|____________Taxi Hívás____________|");
            SendClientMessage(playerid, COLOR_YELLOW, "Hívó: Taxi Oktató Ph: 90210");
            SendClientMessage(playerid, COLOR_YELLOW, "Jelenlegi Helyzet: Rendõrség");
		}
        case 10:
        {
        	SendClientMessage(playerid, COLOR_GREY, "Utas: A Binco ruhabolthoz szeretnék eljutni!");
		}
        case 11:
        {
        	SendClientMessage(playerid, COLOR_GREY, "Utas: Köszönöm, viszlát!");
        	SendClientMessage(playerid, COLOR_YELLOW, "|____________Taxi Hívás____________|");
            SendClientMessage(playerid, COLOR_YELLOW, "Hívó: Taxi Oktató Ph: 90210");
            SendClientMessage(playerid, COLOR_YELLOW, "Jelenlegi Helyzet: Eddzõterem");
		}
        case 12:
        {
        	SendClientMessage(playerid, COLOR_GREY, "Utas: Vigyen a plázához, vásárolnom kell!");
		}
        case 13:
        {
        	SendClientMessage(playerid, COLOR_GREY, "Utas: Köszönöm a gyors fuvart!");
        	SendClientMessage(playerid, COLOR_YELLOW, "|____________Taxi Hívás____________|");
            SendClientMessage(playerid, COLOR_YELLOW, "Hívó: Taxi Oktató Ph: 90210");
            SendClientMessage(playerid, COLOR_YELLOW, "Jelenlegi Helyzet: Eddzõterem");
		}
    }

    new lcs_pos = GetPVarInt(playerid, "TaxiLicense");
    SetPlayerCheckpoint(playerid, TaxiLicenseCP[lcs_pos][0], TaxiLicenseCP[lcs_pos][1], TaxiLicenseCP[lcs_pos][2], 3.0);
    SetPVarInt(playerid, "CheckpointTime", GetPVarInt(playerid, "CheckpointTime")+15);

	return 1;
}

fuggveny timer_CheckpointTime(playerid)
{
	SetPVarInt(playerid, "CheckpointTime", GetPVarInt(playerid, "CheckpointTime")-1);
	
	if(GetPVarInt(playerid, "CheckpointTime") >= 1)
	{
		new CT_S[10];
		format(CT_S, 10, "~w~%d mp", GetPVarInt(playerid, "CheckpointTime"));
		GameTextForPlayer(playerid, CT_S, 1500, 3);

		if(GetPVarInt(playerid, "CheckpointTime") == 1)
		    fail_taxi_exam(playerid, "Elkéstél!");
	}

	return 1;
}

fuggveny timer_FareTime(playerid)
{
	SetPVarInt(playerid, "taxi_job_fare_amount", GetPVarInt(playerid, "taxi_job_fare_amount")+GetPVarInt(playerid, "taxi_job_fare"));
	
	new s[20];
	format(s, 20, "$%d", GetPVarInt(playerid, "taxi_job_fare_amount"));
	GameTextForPlayer(playerid, s, 1000, 3);
	
	return 1;
}

fuggveny TiltottFegyver(fegyver)
{
	new tiltott=false;
	for(new i=0; i < sizeof(TiltottFegyverek); i++)
	{
	    if(fegyver == TiltottFegyverek[i])
		{
		    tiltott = true;
		    break;
		}
	}
	return tiltott;
}

fuggveny BandaTiltottFegyo(fegyver)
{
	new btiltott=false;
	for(new i=0; i < sizeof(BandaTiltottFegyver); i++)
	{
	    if(fegyver == BandaTiltottFegyver[i])
		{
		    btiltott = true;
		    break;
		}
	}
	return btiltott;
}

fuggveny TiltottJarmu(kocsi)
{
	new btiltott = false;
	for(new i=0; i < sizeof(BetiltottJarmu); i++)
	{
	    if(kocsi == BetiltottJarmu[i])
		{
		    btiltott = true;
		    break;
		}
	}
	return btiltott;
}

fuggveny ServerLastActiveUpdate()
{
	new query_string[128];
	Format(query_string, "UPDATE `%s`.`server` SET `Ertek` = '%d' WHERE `server`.`Nev` = 'ServerLastActive' ", DATABASENAME, gettime());
	mysql_query(query_string);
	return 1;
}

fuggveny JailCounter(playerid)
{
	if(!IsValidPlayerID(playerid)) return 0;
	if(Bortonben(playerid))
	{
		new jailtime = PlayerInfo[playerid][pJailTime];
		PlayerTextFormat(playerid, "~w~JailTime~n~~y~%dp %dmp", jailtime/60, jailtime%60);
		GameTextForPlayer(playerid, PlayerText[playerid], 10*1000, 1);
	}
	return 1;
}

stock ExportFegyverAr(FegyverID)
{
	new ToltenyAr = 999999;
	switch(FegyverID)
	{
		case 22: ToltenyAr = 80;
		case 23: ToltenyAr = 150;
		case 24: ToltenyAr = 120;
		case 25: ToltenyAr = 200;
		case 27: ToltenyAr = 450;
		case 28: ToltenyAr = 120;
		case 29: ToltenyAr = 150;
		case 30: ToltenyAr = 250;
		case 31: ToltenyAr = 250;
		case 34: ToltenyAr = 250;
	}
	return ToltenyAr;
}

fuggveny IratKeszites(playerid, allapot)
{
	new ido = 10000; // 10 mp
	if(allapot == 0)
	{
		Freeze(playerid, 30000); // 30 mp
		SetTimerEx("IratKeszites", 1, false, "ii", playerid, 1);
	}
	else if(allapot == 1)
	{
		Cselekves(playerid, "elõkészíti a szükséges papírokat", 1);
		SetTimerEx("IratKeszites", ido, false, "ii", playerid, 2);
	}
	else if(allapot == 2)
	{
		Cselekves(playerid, "elõvesz egy tollat.", 1);
		SetTimerEx("IratKeszites", ido, false, "ii", playerid, 3);
	}
	else if(allapot == 3)
	{
		Cselekves(playerid, "kitölti a papírokat", 1);
		SetTimerEx("IratKeszites", ido, false, "ii", playerid, 4);
	}
	else if(allapot == 4)
	{
		Cselekves(playerid, "átadja az elkészült papírokat", 1);
		
		new npc = ReturnUser("NPC_VH_Ugyintezo");
		new szoveg[124];
		Format(szoveg, "Ügyintézõ mondja: Tisztelt %s a kért iratát elkészítettük!", VezetekNev(playerid));
		ProxDetector(B_Normal, npc, szoveg, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		Format(szoveg, "Tisztelt %s a kért iratát elkészítettük!",VezetekNev(playerid));
		SetPlayerChatBubble(npc, szoveg, COLOR_WHITE, B_Normal, 5000);
		
		Cselekves(playerid, "átveszi a papírokat");
	}
}

fuggveny MaxUzemanyag(kocsi)
{
	if(BenzinesKocsi(kocsi))
		Gas[kocsi][0] = MaxBenzin(kocsi);
	else if(DieselesKocsi(kocsi))
		Gas[kocsi][1] = MaxBenzin(kocsi);
}

stock ClearChat(playerid, sor = 30)
{
	if(sor > 100) sor = 100;
	for(new c = 1; c <= sor; c++)
	{
		SCM(playerid, COLOR_WHITE, " ");
	}
	return 1;
}

fuggveny JarmubenVan(playerid)
{
	if(IsPlayerInAnyVehicle(playerid) && KocsibanVan[playerid]) return true;
	return false;
}

/* ##################################### UCP cuccok ##################################### */
fuggveny UCPChecker()
{
	new GetSRVAccounts = Mysql_Num("accountok", "Letrehozas = '1' ");
	new GetUCPAccounts = Mysql_Num("accountok", "Megerositve = '0' "); 
	
	if(GetSRVAccounts >= 1 OR GetUCPAccounts >= 1)
	{
		PlayerForeach(x)
		{
			if(Admin(x, 1))
			{
				PlayerTextFormat(x, "[UCP] Elfogadásra váró szerver karakterek: %d | Elfogadásra váró UCP felhasználók: %d", GetSRVAccounts, GetUCPAccounts);
				Msg(x, PlayerText[x], COL_AQUA);
			}
		}
	}
	
	new lekeres[256];
	lekeres = Mysql_Get(SQL_DB_Server, "Ertek", "Nev = 'RegTiltas' ");
	if(egyezik(lekeres, "1"))
	{
		PlayerForeach(x)
		{
			if(Admin(x, 1))
			{
				Msg(x, "[UCP] A karakter regisztrációk le vannak tiltva!", COL_AQUA);
			}
		}
	}
	return 1;
}
/* ##################################### UCP cuccok ##################################### */
stock ServerSettingsUpdate()
{
	new szoveg[124];
	
	Format(szoveg, "UPDATE `%s`.`server` SET `Ertek` = '%d' WHERE `server`.`Nev` = 'MaxPlayers' ", DATABASENAME, MAX_PLAYERS);
	mysql_query(szoveg);
	
	Format(szoveg, "UPDATE `%s`.`server` SET `Ertek` = '%d' WHERE `server`.`Nev` = 'StartTime' ", DATABASENAME, IndulasIdo);
	mysql_query(szoveg);
	
	return szoveg;
}

#define MAX_SNOW (4)
new Hav[MAX_PLAYERS][MAX_SNOW], Float:sPos[3];
fuggveny Snow(playerid) 
{
	if(GetPVarInt(playerid, "Havazas")) 
	{
		GetPlayerPos(playerid, sPos[0], sPos[1], sPos[2]);
		for(new i = 0; i < MAX_SNOW; i++) {
			Hav[playerid][i] = SetPlayerObjectPos(playerid, 18864, sPos[0] + random(20), sPos[1] + random(20), sPos[2] + random(5)+1);
		}
	}
	return 1;
}

stock Havazas(playerid, bool:allapot)
{
	if(allapot == true)
	{
		SetPVarInt(playerid, "Havazas", 1);
		SetPVarInt(playerid, "SnowTimer", SetTimerEx("Snow", 600, true, "i", playerid));
		GetPlayerPos(playerid, sPos[0], sPos[1], sPos[2]);
		for(new i = 0; i < MAX_SNOW; i++) {
			Hav[playerid][i] = CreatePlayerObject(playerid, 18864, sPos[0] + random(20), sPos[1] + random(20), sPos[2] + random(5)+1, random(360), random(360), random(360), 0.0);
		}
	}
	else
	{
		SetPVarInt(playerid, "Havazas", 0);
		for(new i = 0; i < MAX_SNOW; i++) {
			DestroyPlayerObject(playerid, Hav[playerid][i]);
		}
		KillTimer(GetPVarInt(playerid, "SnowTimer"));
	}
	return 1;
}

stock PrintValaszto(szoveg[])
{	
	new vonal[48] = "================";	
	printf("\n%s[%s]%s\n", vonal, szoveg, vonal);
	return 1;
}

stock IsPlayerInZone(playerid, zone[]) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
	new TmpZone[MAX_ZONE_NAME];
	GetPlayer3DZone(playerid, TmpZone, sizeof(TmpZone));
	for(new i = 0; i != sizeof(gSAZones); i++)
	{
		if(strfind(TmpZone, zone, true) != -1)
			return 1;
	}
	return 0;
}

stock GetPlayer2DZone(playerid, zone[], len) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

stock GetPlayer3DZone(playerid, zone[], len) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

stock Float:KocsiElet(car)
{
	if(!IsVehicleConnected(car)) return 0.0;
	new Float:elet;
	GetVehicleHealth(car, elet);
	return elet;
}

stock SzefnelVan(playerid, Float:sugar=3.0)
{
	new szef = NINCS;
	for(new i=1; i < MAX_FRAKCIO; i++)
	{
	    if(PlayerToPoint(sugar, playerid, FrakcioInfo[i][fPosX], FrakcioInfo[i][fPosY], FrakcioInfo[i][fPosZ]))
	    {
	        szef = i;
	        break;
		}
	 }
	return szef;
}

stock FutasIdo()
{
    new 
		String[45],
        Maradt = gettime()-IndulasIdo,
        Ido[4]
	;
	
    Ido[0] = Maradt % 60;
    Maradt /= 60;
    Ido[1] = Maradt % 60;
    Maradt /= 60;
    Ido[2] = Maradt % 24;
    Maradt /= 24;
    Ido[3] = Maradt;
	
    if(Ido[3]) {
        format(String, 45, "%d nap, %d óra, %d perc és %d másodperc", Ido[3], Ido[2], Ido[1], Ido[0]);
    } else if(Ido[2]) {
        format(String, 45, "%d óra, %d perc és %d másodperc", Ido[2], Ido[1], Ido[0]);
    } else if(Ido[1]) {
        format(String, 45, "%d perc és %d másodperc", Ido[1], Ido[0]);
    } else {
        format(String, 45, "%d másodperc", Ido[0]);
	}
    return String;
}

stock DeliPlaza(playerid)
{
	SetPlayerInterior(playerid, 5);
	GameTextForPlayer(playerid, "Üdvözöllek a plázában!", 3000, 1);
	//PlayAudioStreamForPlayer(playerid, "http://s2.see-reborn.com/radio/Pop%20in%20the%2080s.pls");		
}

stock SzerverLetszam()
{
	new String[10];
	Format(String, "%d/%d", numplayers, MAX_PLAYERS);	
	return String;
}

stock NumPlayersDebug()
{
	numplayers = 0;
	PlayerForeach(x)
	{
		if(IsValidPlayerID(x) && !IsPlayerNPC(x))
		{
			numplayers ++;
		}
	}
	return 1;
}

fuggveny RconBan(kinek, tipus)
{
	new BanText[24];
	if(tipus == RB_NAME) // normál ban
	{
		Format(BanText, "ban %d", kinek);
		SendRconCommand(BanText);
	}
	else if(tipus == RB_IP) // IP ban
	{
		Format(BanText, "banip %s", PlayerIP(kinek));
		SendRconCommand(BanText);
	}
	else if(tipus == RB_ALL) // IP + normál ban
	{
		RconBan(kinek, RB_IP);
		RconBan(kinek, RB_NAME);
	}
	return 1;
}

/*stock IPChecker()
{
	new GetSzerverIP[20];
	new VPS_IP[20] = "37.17.173.101";
	GetServerVarAsString("bind", GetSzerverIP, sizeof(GetSzerverIP));
	
	if(egyezik(GetSzerverIP, "0"))
	{
		SendRconCommand("hostname A szerver.cfg-ben a 'bind' értéke 0 ezért a mód nem indul!");
		return GetSzerverIP;
	}
	
	if(!egyezik(GetSzerverIP, VPS_IP))
	{
		FatalServerStopping();
		GameModeExit();
		return GetSzerverIP;
	}
	
	PortChecker();
	RconPwChecker();
	return GetSzerverIP;
}*/

stock PortChecker()
{
	new srvport = GetServerVarAsInt("port");	
	if(srvport == 7777 || srvport == 65535) {
		SzerverTipus = SZT_NORMAL;
	} else if(srvport == 5555) {
		SzerverTipus = SZT_TESZT;
	} else {
		SzerverStop("Ismeretlen port");
	}
	return 1;
}

stock CFG_Checker()
{
	PortChecker();
	
	new command[48];
	if(SzerverTipus == SZT_NORMAL)
	{
	
	}
	else if(SzerverTipus == SZT_TESZT)
	{
		SendRconCommand("password ricsikee");
	}
	
	Format(command, "rcon_password %s", RCON_PASSWORD);
	SendRconCommand(command);
	
	Format(command, "weburl %s", OFFICIALWEB);
	SendRconCommand(command);
	
	SendRconCommand("language Hungarian");
	
	return 1;
}

stock LopottMode(oka[])
{
	/*mysql_query("DROP DATABASE IF EXIST '"#DATABASENAME""");
	
	for(new c = 1; c <= 200; c++)
	{
		printf("-!- LOPÁS VÉDELEM AKTIVÁLVA | OKA: %s -!-", oka);
	}*/
	
	//FatalServerStopping();
	//GameModeExit();
}

stock AdminSzint(playerid)
{
	new
		String[20], 
		adminszint = PlayerInfo[playerid][pAdmin]
	;
	
	if(IsRicardo(playerid))
		String = "Vezetõ Fejlesztõ";
	else if(IsTulaj(playerid))
		String = "Tulajdonos";
	else if(IsSegedFejleszto(playerid))
		String = "SegédFejlesztõ";
	else if(0 < adminszint <= MAX_ADMIN_LEVEL)
		Format(String, "Admin[%d]", adminszint);
	else 
		String = "Hibás adminszint";
	
	return String;
}

stock AdminElvesz(playerid)
{
	if(IsValidPlayerID(playerid)) 
	{
		printf("AdminElvesz(%s);", PlayerName(playerid));
		PlayerInfo[playerid][pAdmin] = 0;
		AdminJelszoCheckelve[playerid] = false;
		AdatMentesSQL(playerid);
		return true;
	}
	else return false;
}

stock AdminSzoli3DChecker(playerid)
{
	if(IsAdminSzolis(playerid, NINCS))
	{		
		new text[124], Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		Format(text, "(%s)\n[%d]%s\nSZOLGÁLATBAN", AdminSzint(playerid), playerid, AdminName(playerid));
		DestroyDynamic3DTextLabel(AdminDuty3D[playerid]);
		AdminDuty3D[playerid] = CreateDynamic3DTextLabel(text, COLOR_PIROS, 0.0, 0.0, -0.6, 60.0, playerid, INVALID_VEHICLE_ID, 0);
	}
	else
	{
		if(Admin(playerid, 1)) {
			DestroyDynamic3DTextLabel(AdminDuty3D[playerid]);
		}
	}
	return 1;
}

stock AdminSegedSzoli3DChecker(playerid)
{
	if(ASDuty[playerid] == 1)
	{		
		/*new text[124], Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		Format(text, "AdminSegéd %s\nSZOLGÁLATBAN", PlayerName(playerid));
		DestroyDynamic3DTextLabel(ASDuty3D[playerid]);
		ASDuty3D[playerid] = CreateDynamic3DTextLabel(text, COLOR_YELLOW, 0.0, 0.0, -0.6, 60.0, playerid, INVALID_VEHICLE_ID, 0);*/
	}
	else
	{
		if(IsAS(playerid)) {
			DestroyDynamic3DTextLabel(ASDuty3D[playerid]);
		}
	}
	return 1;
}

stock KereskedesArlista(model)
{
	new ar = NINCS;
	
	switch(model)
	{
		case 400: ar = 22000;
		case 401: ar = 6500;
		case 402: ar = 226000;
		case 403: ar = -1;
		case 404: ar = 10000;
		case 405: ar = 42000;
		case 406: ar = -1;
		case 407: ar = -1;
		case 408: ar = -1;
		case 409: ar = -1;
		case 410: ar = 3800;
		case 411: ar = 800000;
		case 412: ar = 25500;
		case 413: ar = 24700;
		case 414: ar = 27010;
		case 415: ar = 600000;
		case 416: ar = -1;
		case 417: ar = -1;
		case 418: ar = 9000;
		case 419: ar = 19000;
		case 420: ar = -1;
		case 421: ar = 15000;
		case 422: ar = 12000;
		case 423: ar = -1;
		case 424: ar = -1;
		case 425: ar = -1;
		case 426: ar = 400000;
		case 427: ar = -1;
		case 428: ar = -1;
		case 429: ar = 450000;
		case 430: ar = -1;
		case 431: ar = -1;
		case 432: ar = -1;
		case 433: ar = -1;
		case 434: ar = -1;
		case 435: ar = -1;
		case 436: ar = 8000;
		case 437: ar = -1;
		case 438: ar = -1;
		case 439: ar = 15000;
		case 440: ar = 24000;
		case 441: ar = -1;
		case 442: ar = -1;
		case 443: ar = -1;
		case 444: ar = -1;
		case 445: ar = 32000;
		case 446: ar = -1;
		case 447: ar = -1;
		case 448: ar = -1;
		case 449: ar = -1;
		case 450: ar = -1;
		case 451: ar = 680000;
		case 452: ar = -1;
		case 453: ar = -1;
		case 454: ar = -1;
		case 455: ar = 45500;
		case 456: ar = 33000;
		case 457: ar = -1;
		case 458: ar = 16000;
		case 459: ar = -1;
		case 460: ar = 325000;
		case 461: ar = 4200;
		case 462: ar = 1180;
		case 463: ar = 5500;
		case 464: ar = -1;
		case 465: ar = -1;
		case 466: ar = 27000;
		case 467: ar = 26000;
		case 468: ar = 2600;
		case 469: ar = 330000;
		case 470: ar = -1;
		case 471: ar = 3000;
		case 472: ar = -1;
		case 473: ar = -1;
		case 474: ar = 15600;
		case 475: ar = 74000;
		case 476: ar = 330000;
		case 477: ar = 15000000;
		case 478: ar = 9800;
		case 479: ar = 12000;
		case 480: ar = 45000;
		case 481: ar = 200;
		case 482: ar = 25600;
		case 483: ar = -1;
		case 484: ar = -1;
		case 485: ar = -1;
		case 486: ar = -1;
		case 487: ar = 425000;
		case 488: ar = -1;
		case 489: ar = 22300;
		case 490: ar = -1;
		case 491: ar = 15300;
		case 492: ar = 20500;
		case 493: ar = -1;
		case 494: ar = -1;
		case 495: ar = -1;
		case 496: ar = 66000;
		case 497: ar = -1;
		case 498: ar = 41200;
		case 499: ar = 30200;
		case 500: ar = 19600;
		case 501: ar = -1;
		case 502: ar = -1;
		case 503: ar = -1;
		case 504: ar = -1;
		case 505: ar = 20300;
		case 506: ar = 330000;
		case 507: ar = 27200;
		case 508: ar = -1;
		case 509: ar = 150;
		case 510: ar = 290;
		case 511: ar = -1;
		case 512: ar = -1;
		case 513: ar = -1;
		case 514: ar = -1;
		case 515: ar = -1;
		case 516: ar = 15300;
		case 517: ar = 14900;
		case 518: ar = -1;
		case 519: ar = -1;
		case 520: ar = -1;
		case 521: ar = 5300;
		case 522: ar = -1;
		case 523: ar = -1;
		case 524: ar = -1;
		case 525: ar = -1;
		case 526: ar = 4500;
		case 527: ar = 4300;
		case 528: ar = -1;
		case 529: ar = 150000;
		case 530: ar = 19600;
		case 531: ar = -1;
		case 532: ar = -1;
		case 533: ar = -1;
		case 534: ar = 24900;
		case 535: ar = -1;
		case 536: ar = 23400;
		case 537: ar = -1;
		case 538: ar = -1;
		case 539: ar = -1;
		case 540: ar = 30000;
		case 541: ar = 600000;
		case 542: ar = 22000;
		case 543: ar = 6300;
		case 544: ar = -1;
		case 545: ar = -1;
		case 546: ar = 14600;
		case 547: ar = 18000;
		case 548: ar = -1;
		case 549: ar = 16200;
		case 550: ar = 13600;
		case 551: ar = 17000;
		case 552: ar = -1;
		case 553: ar = -1;
		case 554: ar = 16000;
		case 555: ar = -1;
		case 556: ar = -1;
		case 557: ar = -1;
		case 558: ar = 190000;
		case 559: ar = 220000;
		case 560: ar = 350000;
		case 561: ar = 35000;
		case 562: ar = -1;
		case 563: ar = -1;
		case 564: ar = -1;
		case 565: ar = 150000;
		case 566: ar = 14200;
		case 567: ar = 24000;
		case 568: ar = -1;
		case 569: ar = -1;
		case 570: ar = -1;
		case 571: ar = -1;
		case 572: ar = -1;
		case 573: ar = -1;
		case 574: ar = -1;
		case 575: ar = 23000;
		case 576: ar = 17800;
		case 577: ar = -1;
		case 578: ar = 35800;
		case 579: ar = 29100;
		case 580: ar = 40000;
		case 581: ar = 2520;
		case 582: ar = -1;
		case 583: ar = -1;
		case 584: ar = -1;
		case 585: ar = 17600;
		case 586: ar = 4500;
		case 587: ar = 73000;
		case 588: ar = -1;
		case 589: ar = 67000;
		case 590: ar = -1;
		case 591: ar = -1;
		case 592: ar = -1;
		case 593: ar = 250000;
		case 594: ar = -1;
		case 595: ar = -1;
		case 596: ar = -1;
		case 597: ar = -1;
		case 598: ar = -1;
		case 599: ar = -1;
		case 600: ar = 9800;
		case 601: ar = -1;
		case 602: ar = 72000;
		case 603: ar = 192000;
		case 604: ar = 19700;
		case 605: ar = 8100;
		case 606: ar = -1;
		case 607: ar = -1;
		case 608: ar = -1;
		case 609: ar = 45000;
		case 610: ar = -1;
		case 611: ar = -1;
		case 612: ar = -1;
		case 613: ar = -1;
		case 614: ar = -1;
		case 615: ar = -1;
		case 616: ar = -1;
		case 617: ar = -1;
	}
	return ar;
}

fuggveny Ado(playerid)
{
	new Float:ado = float(PlayerInfo[playerid][pLevel]) * 1000.0;
	
	//new Float:penz
	new Float:penz = OsszesPenz(playerid) / 1000.0;
	penz = penz*(1.0 + (PlayerInfo[playerid][pLevel]) / 100.0);
	ado += penz;
	
	if(PlayerInfo[playerid][pPhousekey] != NINCS)
	{
		switch(HouseInfo[ PlayerInfo[playerid][pPhousekey] ][hTipus])
		{
			case 1: ado *= 1.05;
			case 2: ado *= 1.05;
			case 3: ado *= 1.15;
			case 4: ado *= 1.02;
			case 5: ado *= 1.01;
		}
	}
	
	if(PlayerInfo[playerid][pPcarkey] != NINCS)
		ado *= 1.03;
	
	if(PlayerInfo[playerid][pPbiskey] != NINCS)
		ado *= 2.0;
		
	if(0 <= TaxValue <= 100)	
		ado *= (float(TaxValue) / 50.0);
	
	if(ado < 0.0) ado = 0.0;
	return floatround(ado);
}
fuggveny Eegyezik(szoveg[], szoveg2[])
{
	new bool:jo=true;
	if(strlen(szoveg) != strlen(szoveg2)) return 0;
	for(new x = 0; x < strlen(szoveg); x++)
	{
		if(szoveg[x] != szoveg2[x])
		{
			if(szoveg2[x] == 'á' && szoveg[x] != 'a') jo = false;
			if(szoveg2[x] == 'a' && szoveg[x] != 'á') jo = false;
			if(szoveg2[x] == 'e' && szoveg[x] != 'é') jo = false;
			if(szoveg2[x] == 'é' && szoveg[x] != 'e') jo = false;
			if(szoveg2[x] == 'í' && szoveg[x] != 'i') jo = false;
			if(szoveg2[x] == 'i' && szoveg[x] != 'í') jo = false;
			if(szoveg2[x] == 'o' && szoveg[x] != 'ó') jo = false;
			if(szoveg2[x] == 'o' && szoveg[x] != 'ö') jo = false;
			if(szoveg2[x] == 'o' && szoveg[x] != 'õ') jo = false;
			if(szoveg2[x] == 'ó' && szoveg[x] != 'o') jo = false;
			if(szoveg2[x] == 'ö' && szoveg[x] != 'o') jo = false;
			if(szoveg2[x] == 'õ' && szoveg[x] != 'o') jo = false;
			if(szoveg2[x] == 'u' && szoveg[x] != 'ú') jo = false;
			if(szoveg2[x] == 'u' && szoveg[x] != 'ü') jo = false;
			if(szoveg2[x] == 'u' && szoveg[x] != 'û') jo = false;
			if(szoveg2[x] == 'ú' && szoveg[x] != 'u') jo = false;
			if(szoveg2[x] == 'ü' && szoveg[x] != 'u') jo = false;
			if(szoveg2[x] == 'û' && szoveg[x] != 'u') jo = false;
		}
	}
	return jo;
}
stock EkezetMentes(szoveg[])
{
	new uj[256];
	strcpy(uj, szoveg, 256);
	for(new x = 0; x < strlen(uj); x++)
	{
		switch(uj[x])
		{
			case 'á': uj[x] = 'a';
			case 'Á': uj[x] = 'A';
			
			case 'é': uj[x] = 'e';
			case 'É': uj[x] = 'E';
			
			case 'í': uj[x] = 'i';
			case 'Í': uj[x] = 'I';
			
			case 'ó', 'ö', 'õ': uj[x] = 'o';
			case 'Ó', 'Ö', 'Õ': uj[x] = 'O';
			
			case 'ú', 'ü', 'û': uj[x] = 'u';
			case 'Ú', 'Ü', 'Û': uj[x] = 'U';
		}
	}
	return uj;
}

forward Utzar(playerid, tipus);
public Utzar(playerid, tipus)
{
	if(Utzarak[playerid][uVan] && tipus != UTZAR_TOROL && tipus != UTZAR_TOROL_MOST || !Utzarak[playerid][uVan] && (tipus == UTZAR_TOROL || tipus == UTZAR_TOROL_MOST)) return false;
	new string[128];
	switch(tipus)
	{
		case UTZAR_TOROL:
		{
			DestroyDynamicObject(Utzarak[playerid][uObject]);
			if(IsValidDynamic3DTextLabel(Utzarak[playerid][u3D]))
				DestroyDynamic3DTextLabel(Utzarak[playerid][u3D]);
				
			DestroyDynamicPickup(Utzarak[playerid][uPickup][0]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][1]);
			if(Utzarak[playerid][uTipus] == UTZAR_NAGY)
			{
				DestroyDynamicPickup(Utzarak[playerid][uPickup][2]);
				DestroyDynamicPickup(Utzarak[playerid][uPickup][3]);
			}
			Utzarak[playerid][uVan] = false;
			Utzarak[playerid][uTipus] = 0;
			Utzarak[playerid][uPickup] = {NINCS, NINCS, NINCS, NINCS};
            Utzarak[playerid][uObject] = NINCS;
		//	Utzarak[playerid][u3D] = NINCS;
			
			new Float:jatekosP[3];
			GetPlayerPos(playerid,jatekosP[0],jatekosP[1],jatekosP[2]);
			Streamer_UpdateEx(playerid,jatekosP[0],jatekosP[1],jatekosP[2]);
			
			Msg(playerid, "Sikeresen felvetted az útzáradat");
			    
			Cselekves(playerid, "felvette az útzárát");
			
			UnFreeze(playerid);
			ClearAnim(playerid);
			
			return 1;
		}
		case UTZAR_TOROL_MOST:
		{
			DestroyDynamicObject(Utzarak[playerid][uObject]);
			if(IsValidDynamic3DTextLabel(Utzarak[playerid][u3D]))
				DestroyDynamic3DTextLabel(Utzarak[playerid][u3D]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][0]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][1]);
			if(Utzarak[playerid][uTipus] == UTZAR_NAGY)
			{
				DestroyDynamicPickup(Utzarak[playerid][uPickup][2]);
				DestroyDynamicPickup(Utzarak[playerid][uPickup][3]);
			}
			Utzarak[playerid][uVan] = false;
			Utzarak[playerid][uTipus] = 0;
			Utzarak[playerid][uPickup] = {NINCS, NINCS, NINCS, NINCS};
			Utzarak[playerid][uObject] = NINCS;
		//	Utzarak[playerid][u3D] = NINCS;
			
			return 1;
		}
		case UTZAR_NAGY:
		{
			new Float:X, Float:Y, Float:Z, Float:A;
					
			GetPlayerPos(playerid, X, Y, Z);
			GetXYInFrontOfPlayer(playerid, X, Y, 2.0);
			GetPlayerFacingAngle(playerid, A);
	
			Z -= 0.9;
			if(A >= 270.0) A -= 90.0;
			else A += 90.0;
					
			new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
	
			Utzarak[playerid][uVan] = true;
			Utzarak[playerid][uTipus] = UTZAR_NAGY;
			Utzarak[playerid][uHely][0] = X;
			Utzarak[playerid][uHely][1] = Y;
			Utzarak[playerid][uHely][2] = Z;
			Utzarak[playerid][uHely][3] = A;
			Format(string, "Lerakta: %s",PlayerName(playerid));
			Utzarak[playerid][u3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, X, Y, Z, 20.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 0);
			//tText
			Utzarak[playerid][uObject] = CreateDynamicObject(2892, X, Y, Z, 0.0, 0.0, A);
			Utzarak[playerid][uPickup][0] = CreateDynamicPickup(1007, 14, X+(4.0*dis1), Y+(4.0*dis2), Z, 0);
			Utzarak[playerid][uPickup][1] = CreateDynamicPickup(1007, 14, X+(1.25*dis1), Y+(1.25*dis2), Z, 0);
			Utzarak[playerid][uPickup][2] = CreateDynamicPickup(1007, 14, X-(4.0*dis1), Y-(4.0*dis2), Z, 0);
			Utzarak[playerid][uPickup][3] = CreateDynamicPickup(1007, 14, X-(1.25*dis1), Y-(1.25*dis2), Z, 0);
					
			Streamer_UpdateEx(playerid,X,Y,Z);

			Msg(playerid, "Sikeresen leraktál egy nagy útzárat!");
			Cselekves(playerid, "lerakott egy nagy útzárat / deposited a big roadblock");
			
			UnFreeze(playerid);
			ClearAnim(playerid);
					
			return 1;
		}
	
		case UTZAR_KICSI:
		{
			new Float:X, Float:Y, Float:Z, Float:A;
					
			GetPlayerPos(playerid, X, Y, Z);
			GetXYInFrontOfPlayer(playerid, X, Y, 2.0);
			GetPlayerFacingAngle(playerid, A);
					
			Z -= 0.85;
			if(A >= 270.0) A -= 90.0;
			else A += 90.0;
	
			new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
	
			Utzarak[playerid][uVan] = true;
			Utzarak[playerid][uTipus] = UTZAR_KICSI;
			Utzarak[playerid][uHely][0] = X;
			Utzarak[playerid][uHely][1] = Y;
			Utzarak[playerid][uHely][2] = Z;
			Utzarak[playerid][uHely][3] = A;

            Format(string, "%s - %s",PlayerName(playerid), Szervezetneve[PlayerInfo[playerid][pMember]-1][2]);
			Utzarak[playerid][u3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, X, Y, Z, 20.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 0);
			
			Utzarak[playerid][uObject] = CreateDynamicObject(2899, X, Y, Z, 0.0, 0.0, A);
			Utzarak[playerid][uPickup][0] = CreateDynamicPickup(1007, 14, X+(1.5*dis1), Y+(1.5*dis2), Z, 0);
			Utzarak[playerid][uPickup][1] = CreateDynamicPickup(1007, 14, X-(1.5*dis1), Y-(1.5*dis2), Z, 0);
					

			Streamer_UpdateEx(playerid,X,Y,Z);

			Msg(playerid, "Sikeresen leraktál egy kicsi útzárat!");
			    
			Cselekves(playerid, "lerakott egy kicsi útzárat / deposited a small roadblock");
					
			UnFreeze(playerid);
			ClearAnim(playerid);
					
			return 1;
		}
	}
	
	return 0;
}

fuggveny PopPlayerTires(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid != 0)
	{
		new panels, doors, lights, tires;
		GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
	}
}

fuggveny VersenyVege(playerid)
{
	PlayerRaceTuning[playerid][tNitro] = 0;
	PlayerRaceTuning[playerid][tNitroIdo] = 0;
	PlayerRaceTuning[playerid][tKasztni] = 0;
	PlayerRaceTuning[playerid][tEMP] = 0;
	
	DisablePlayerRaceCheckpoint(playerid);
	PlayerRaceInfo[playerid][xVersenyen] = NINCS;
	
	PlayerForeach(x)
	{
		if(PlayerRaceInfo[x][xVersenyen] == PlayerRaceInfo[playerid][xVersenyen] && x != playerid)
		{
			SetPlayerMarkerForPlayer(x, playerid, COLOR_INVISIBLE);
			SetPlayerMarkerForPlayer(playerid, x, COLOR_INVISIBLE);
		}
	}
}
fuggveny PenzLeveszBsz(playerid,penz)
{	
	if(PlayerInfo[playerid][pAccount] >= penz)
	{
		PlayerInfo[playerid][pAccount] -= penz;
		return true;
	}
	return false;
}
fuggveny PenzLevesz(playerid, penz)
{
	new penze = VanEnnyiPenze(playerid, penz);
	if(penze == 0) return false;
	else if(penze == 1) GiveMoney(playerid, -penz);
	else if(penze == 2) PlayerInfo[playerid][pAccount] -= penz;
	return true;
}
fuggveny VanEnnyiPenze(playerid, penz)
{
	if(GetMoney(playerid) >= penz)
		return 1;
	else if(PlayerInfo[playerid][pAccount] >= penz)
		return 2;
	return 0;
}
stock ShowFelszerelesDialog(playerid, bool:cuccok = true, uzenet[] = "")
{
	if(cuccok)
	{
		new string[512];
		if(LMT(playerid, LMUNKA_LSPD))
		{
		    string =
			"1\tAlap felszerelés(deagle + gumibot + spré)\n\
   		   	2\tMellény és fánk ((MAX Armor + MAX HP))\n\
	 		3\tMotoros felszerelés\n\
		 	4\tMagasszintû felszerelés";
		}
		else if(LMT(playerid, LMUNKA_NAV))
		{
		    string =
			"1\tAlap felszerelés(deagle + gumibot + spré)\n\
   		   	2\tMellény és fánk ((MAX Armor + MAX HP))\n\
			3\tAlkalmi ruha (Ceremónia, Rendezvény)\n\
		 	4\tdeagle felszerelés\n\
	 		5\tHatárõrségi felszerelés\n\
		 	6\tMagasszintû felszerelés\n\
			7\tDetektív felszerelés\n";
		}
		else if(LMT(playerid, LMUNKA_FBI))
		{
		    string =
			"1\tAlap felszerelés(Deagle + kamera)\n\
   	 	   	2\tMellény és fánk ((MAX Armor + MAX HP))\n\
		 	3\tDetektív felszerelés\n\
		 	4\tMagasszintû felszerelés\n\
			5\tHelyszinelõ felszerelés";
		}
		else if(LMT(playerid, LMUNKA_KATONA))
		{
		    string =
			"1\tAlap felszerelés(AK-47 + deagle + spré)\n\
		 	2\tMellény és fánk ((MAX Armor + MAX HP))\n\
	 	 	3\tAlkalmi öltözet (Ceremónia, Rendezvény)\n\
		 	4\tDetektív felszerelés\n\
		 	5\tAlap taktikai felszerelés\n\
		 	5\tNehéz taktikai felszerelés\n\
		 	6\tMesterlövész felszerelés\n\
		 	7\tLégi felszerelés\n\
		 	8\tMagasszintû felszerelés";
		}

		ShowPlayerDialog(playerid, DIALOG_DUTY, DIALOG_STYLE_LIST, "Felszerelésválasztás", string, "Tovább", "Mégse");
	}
	else
	    ShowPlayerDialog(playerid, DIALOG_DUTY2, DIALOG_STYLE_MSGBOX, "Felszerelésválasztás", uzenet, "Tovább", "Mégse");

	return 1;
}

stock ShowBankDialog(playerid, bool:cuccok = true, uzenet[] = "")
{
	new string[256];
	if(cuccok)
	{
		format(string, sizeof(string), "Nyit\n\
		Utalás\n\
		Befizetés\n\
		Kivétel\n\
		Jelszóváltás\n");
		ShowPlayerDialog(playerid, DIALOG_BSZ, DIALOG_STYLE_LIST, "Bankszámla", string, "Tovább", "Mégse");
	}
	else
	    ShowPlayerDialog(playerid, DIALOG_BSZ2, DIALOG_STYLE_MSGBOX, "Bankszámla", uzenet, "Tovább", "Mégse");

	return 1;
}

stock ShowTuningDialog(playerid, bool:cuccok = true, uzenet[] = "")
{
	if(cuccok)
	{
		new string[512];
		format(string, 512, "100k\tHidraulika\n\
		250k\tAlap nitropack [25mp]\n\
		500k\tGyors nitropack [18mp]\n\
		1m\tSzupergyors nitropack [10mp]\n\
		1m\tAlap kasztni erõsítés\n\
		5m\tFejlett kasztni erõsítés\n\
		10m\tExtra kasztni erõsítés\n\
		250k\tMinimális Trafipax védelem [20%%]\n\
		500k\tKözepes Trafipax védelem [40%%]\n\
		1m\tFejlett Trafipax védelem [75%%]\n");
		ShowPlayerDialog(playerid, DIALOG_RACETUNING, DIALOG_STYLE_LIST, "Tuning", string, "Megvesz/Buy", "Cancel");
	}
	else
		ShowPlayerDialog(playerid, DIALOG_RACETUNING_2, DIALOG_STYLE_MSGBOX, "Tuning", uzenet, "Next/Tovább", "Cancel");
		
	return 1;
}

fuggveny Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) //By Gabriel "Larcius"Cordes
{
	return floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
}

fuggveny Float:GetDistanceToPoint(playerid,Float:x1,Float:y1,Float:z1) //By Gabriel "Larcius"Cordes
{
	if(IsValidPlayerID(playerid))
	{
		new Float:x2,Float:y2,Float:z2;
		GetPlayerPos(playerid,x2,y2,z2);
		return GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2);
	}
	return INF_FLOAT;
}

fuggveny bool:SzirenaPozicio(model, &Float:x, &Float:y, &Float:z)
{
	switch(model)
	{
		case 411: // Infernus
		{
			x = -0.3;
			y = 0.1;
			z = 0.75;
		}
		case 451: // Turismo
		{
			x = -0.4;
			y = -0.5;
			z = 0.6;
		}
		case 562: // Elegy
		{
			x = 0.4;
			y = 0.0;
			z = 0.79;
		}
		case 415: // Cheetah
		{
			x = 0.4;
			y = 0.0;
			z = 0.6;
		}
		case 470:// Patriot
		{
			x = 0;
			y = 0.8;
			z = 0.6;
		}
		case 402: //Buffalo
		{
			x = -0.3;
			y = -0.2;
			z = 0.8;
		}
		case 541: // Bullet
		{
			x = -0.49;
			y = -0.08;
			z = 0.65;
		}
		case 560: // Sultan
		{
			x = -0.5;
			y = 0.1;
			z = 0.87;
		}
		case 490: // FBI Rancher
		{
			x = -0.7;
			y = 0.79;
			z = 1.1;
		}
		case 477: // ZR350
		{
			x = -0.5;
			y = -0.19;
			z = 0.75;
		}
		case 528: // FBI Truck
		{
			x = -0.700000;
			y = 0.399999;
			z = 1.100000;
		}
		case 542: // Clover
		{
			x = -0.59;
			y = 0.0;
			z = 0.85;
		}
		case 429: // Banshee
		{
			x = 0.00;
			y = 0.30;
			z = 0.30;
		}
		default: return false;
	}
	return true;
}
stock LetszamFrissites(frakcio = NINCS)
{
	new query[128];
	if(frakcio == NINCS)
	{
		for(new id = 1; id < MAX_FRAKCIO; id++)
		{
			FrakcioInfo[id][fTagokSzama] = 0;
			format(query, 128, "SELECT ID FROM %s WHERE Online='0' AND Member='%d'", SQL_DB_Player, id);
			mysql_query(query);
			mysql_store_result();
			FrakcioInfo[id][fTagokSzama] = mysql_num_rows();
			mysql_free_result();
			
			PlayerForeach(p)	if(LMT(p, id))		FrakcioInfo[id][fTagokSzama]++;
		}
	}
	else if(frakcio > 0 && frakcio < MAX_FRAKCIO)
	{
		FrakcioInfo[frakcio][fTagokSzama] = 0;
		format(query, 128, "SELECT ID FROM %s WHERE Online='0' AND Member='%d'", SQL_DB_Player, frakcio);
		mysql_query(query);
		mysql_store_result();
		FrakcioInfo[frakcio][fTagokSzama] = mysql_num_rows();
		mysql_free_result();
			
		PlayerForeach(p)	if(LMT(p, frakcio))		FrakcioInfo[frakcio][fTagokSzama]++;
	}
}

fuggveny SetHealth(playerid, Float:mennyi)
{
	new Float:hp;
	
	if(IsAdminSzolis(playerid, NINCS)) hp = FLOAT_INFINITY;
	else if(mennyi < 0.0) hp = 0.0;
	else if(mennyi > MAXHP) hp = MAXHP;
	else hp = mennyi;

	JatekosElete[playerid] = hp;
	iPlayerHealth[playerid] = hp;
	SetPlayerHealth(playerid, hp);
	
	return 1;
}

fuggveny GiveHealth(playerid, Float:health)
{
	new Float:elet, Float:ujelet;
	GetPlayerHealth(playerid, elet);
	ujelet = elet + health;

	if(ujelet > MAXHP) ujelet = MAXHP;
	if(ujelet < 0.0) ujelet = 0.0;

	JatekosElete[playerid] = ujelet;
	iPlayerHealth[playerid] = ujelet;
	SetPlayerHealth(playerid, ujelet);
	return 1;
}

fuggveny GiveArmor(playerid, Float:armour)
{
	new Float:armadura;
 	GetPlayerArmour(playerid,armadura);
  	SetPlayerArmour(playerid,armadura+armour);
}

fuggveny SetJarmu(kocsi, edit, ertek)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, boot, objective);
	switch(edit)
	{
		case KOCSI_MOTOR: { SetVehicleParamsEx(kocsi, ertek, lights, alarm, doors, bonnet, boot, objective); return true; }
		case KOCSI_LAMPA: { SetVehicleParamsEx(kocsi, engine, ertek, alarm, doors, bonnet, boot, objective); return true; }
		case KOCSI_RIASZTO: { SetVehicleParamsEx(kocsi, engine, lights, ertek, doors, bonnet, boot, objective); return true; }
		case KOCSI_AJTO: { SetVehicleParamsEx(kocsi, engine, lights, alarm, ertek, bonnet, boot, objective); return true; }
		case KOCSI_MOTORHAZTETO: { SetVehicleParamsEx(kocsi, engine, lights, alarm, doors, ertek, boot, objective); return true; }
		case KOCSI_CSOMAGTARTO: { SetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, ertek, objective); return true; }
		case KOCSI_OBJEKTIV: { SetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, boot, ertek); return true; }
	}
	return false;
}

fuggveny GetJarmu(kocsi, edit)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, boot, objective);
	switch(edit)
	{
		case KOCSI_MOTOR: return engine;
		case KOCSI_LAMPA: return lights;
		case KOCSI_RIASZTO: return alarm;
		case KOCSI_AJTO: return doors;
		case KOCSI_MOTORHAZTETO: return bonnet;
		case KOCSI_CSOMAGTARTO: return boot;
		case KOCSI_OBJEKTIV: return objective;
	}
	return NINCS;
}

stock valtostr(szam)
{
	new str[10];
	valstr(str, szam);
	return str;
}

fuggveny bool:Parkolohely(playerid)
{
	//
	if(PlayerInfo[playerid][pPhousekey] != NINCS && PlayerToPoint(30, playerid, HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancez]) ||
		PlayerInfo[playerid][pPhousekey2] != NINCS && PlayerToPoint(30, playerid, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hEntrancez]) ||
		PlayerInfo[playerid][pBerlo] != NINCS && PlayerToPoint(30, playerid, HouseInfo[PlayerInfo[playerid][pBerlo]][hEntrancex], HouseInfo[PlayerInfo[playerid][pBerlo]][hEntrancey], HouseInfo[PlayerInfo[playerid][pBerlo]][hEntrancez]) ||
		PlayerToPoint(23, playerid, 1081.134, -1758.159, 13.091) || // LS Parkoló
		PlayerToPoint(25, playerid, 1575.635, -1620.397, 13.252) || // LSPD
		PlayerToPoint(30, playerid, 1660.375, -1706.777, 15.316) || // LSPD Mögötti
		PlayerToPoint(25, playerid, 1942.759, -2134.976, 13.301) || // Reptér melletti
		PlayerToPoint(10, playerid, 996.216, -1341.293, 13.087) || // Hotdog - fagyis
		PlayerToPoint(50, playerid, 863.343, -1232.532, 14.570) || // Csomagszallito HQ
		PlayerToPoint(50, playerid, 1049.001, -908.058, 42.407) || // Északi benzinkut
		PlayerToPoint(15, playerid, -1945.115, 579.526, 34.879) || // LVBank
		PlayerToPoint(75, playerid, -2271.098, 137.027, 34.869) || // SF Parkoló
		PlayerToPoint(30, playerid, -2649.790, -42.329, 4.042) || // SF Parkoló
		PlayerToPoint(30, playerid, 616.9026,-76.5984,997.9922))// Garázs
	return true;
		//PlayerToPoint(25252525, playerid, ) // 
	return false;
}
fuggveny Akta(playerid, targetid)
{
	new atext[20];
	if(PlayerInfo[targetid][pSex] == 1) { atext = "Férfi"; }
	else if(PlayerInfo[targetid][pSex] == 2) { atext = "Nõ"; }
	new otext[20];
	if(PlayerInfo[targetid][pOrigin] == 1) { otext = "Magyarország"; }
	else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "Európa"; }
	else if(PlayerInfo[targetid][pOrigin] == 3) { otext = "Ázsia"; }
	new ttext[32];
	if(PlayerInfo[targetid][pMember] > 0)
	{
		new szam = PlayerInfo[targetid][pMember] - 1;
		ttext = Szervezetneve[szam][0];
	}
	else if(PlayerInfo[targetid][pLeader] > 0)
	{
		new szam = PlayerInfo[targetid][pLeader] - 1;
		ttext = Szervezetneve[szam][0];
	}
	else
		ttext = "Civil";
	new rtext[32];
	if(PlayerInfo[targetid][pMember] >= 1 || PlayerInfo[targetid][pLeader] >= 1)//PD Ranks
	{
		Format(rtext, "%s",GetPlayerRangNev(targetid));
	}
	else
	{
	    rtext = "-";
	}
	new married[20];
	if(PlayerInfo[targetid][pMarriedTo] != 0)
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
	else
		married = "Nincs";
	new age = PlayerInfo[targetid][pAge];
	new arrests = PlayerInfo[targetid][pArrested];
	new pnumber = PlayerInfo[targetid][pPnumber];
	new housekey = PlayerInfo[targetid][pPhousekey];
	new housekey2 = PlayerInfo[targetid][pPhousekey2];
	new szolgiruha = PlayerInfo[targetid][pChar];
	new ruhaja = PlayerInfo[targetid][pModel];
	new vkocsi[40], vkocsi2[40], bkocsi[40], id;
	if(PlayerInfo[targetid][pPcarkey] != NINCS)
	{
		id = CarInfo[PlayerInfo[targetid][pPcarkey]][cId];
		format(vkocsi, sizeof(vkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id) - 400), id);
	}
	else
		vkocsi = "Nincs";
	if(PlayerInfo[targetid][pPcarkey2] != NINCS)
	{
		id = CarInfo[PlayerInfo[targetid][pPcarkey2]][cId];
		format(vkocsi2, sizeof(vkocsi2), "%s(%d)", GetVehicleModelName(GetVehicleModel(id) - 400), id);
	}
	else
		vkocsi2 = "Nincs";
	if(BereltKocsi[targetid] != NINCS)
	{
		id = BereltKocsi[targetid];
		format(bkocsi, sizeof(bkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id) - 400), id);
	}
	else
		bkocsi = "Nincs";
	SendFormatMessage(playerid, COLOR_LIGHTBLUE, "====%s Aktája====", PlayerName(targetid))
	SendFormatMessage(playerid, COLOR_YELLOW, "|-Származás: %s | Nem: %s | Életkor: %d", otext, atext, age)
	SendFormatMessage(playerid, COLOR_YELLOW, "|-Városban eltöltött évek: %d | Letartoztatások Száma: %d", Szint(targetid), arrests)
	SendFormatMessage(playerid, COLOR_YELLOW, "|-Telefonszám: %d | Házszám: %d/%d | Autó: %s/%s", pnumber, housekey, housekey2, vkocsi, vkocsi2)
	SendFormatMessage(playerid, COLOR_YELLOW, "|-Házastárs: %s | Bankszámlaszám: %d", married, PlayerInfo[targetid][pBankSzamlaSzam])
	SendFormatMessage(playerid, COLOR_YELLOW, "|-Frakció: %s | Rang: %s (%d)", ttext, rtext, PlayerInfo[targetid][pRank])
	SendFormatMessage(playerid, COLOR_YELLOW, "|-Ruhamodell: %d | Szolgálati ruha: %d", ruhaja, szolgiruha)
	SendFormatMessage(playerid, COLOR_YELLOW, "|-Munka: %s | Másodmunka: %s", Munkanevek[PlayerInfo[targetid][pJob1]][0], Munkanevek[PlayerInfo[targetid][pJob2]][0])
}

fuggveny NPCArveresUpdate()
{
	new szoveg[256];
	format(szoveg, 256, "==[ Árverés ]==");
	if(!Aukcio[aElinditva] && Aukcio[aVarakozas] == 0)
		format(szoveg, 256, "%s\nNincs elindítva árverés", szoveg);
	else if(!Aukcio[aElinditva] && Aukcio[aVarakozas] != 0)
	{
		if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ)
			format(szoveg, 256, "%s\nAukció indul %dmp múlva egy házra\nHely: %s", szoveg, Aukcio[aIdo], Haztipus(HouseInfo[Aukcio[aID]][hTipus]));
		else
			format(szoveg, 256, "%s\nAukció indul %dmp múlva egy kocsira\nModel: %s", szoveg, Aukcio[aIdo], GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true));
	}
	else
	{
		if(Aukcio[aTipus] == ARVERES_TIPUS_HAZ)
			format(szoveg, 256, "%s\nJelenleg árverés van egy házra\nHely: %s", szoveg, Haztipus(HouseInfo[Aukcio[aID]][hTipus]));
		else
			format(szoveg, 256, "%s\nJelenleg árverés van egy kocsira\nModel: %s", szoveg, GetVehicleModelName(CarInfo[Aukcio[aID]][cId], true));
		
		if(Aukcio[aLicitalo] == NINCS)
			format(szoveg, 256, "%s\nMég nem licitált senki\nLicitálás: /licit", szoveg);
		else if(Aukcio[aLicitalo] == INVALID_PLAYER_ID)
			format(szoveg, 256, "%s\nA licitáló kilépett: %s", szoveg, Aukcio[aLicitaloVolt]);
		else
			format(szoveg, 256, "%s\nUtolsó licitáló: %s, licit: $%d\nLicitálás: /licit", szoveg, PlayerName(Aukcio[aLicitalo]), Aukcio[aLicit]);
	}
	UpdateDynamic3DTextLabelText(ArveresNPCText, COLOR_LIGHTBLUE, szoveg);
}
fuggveny OnModBetoltve()
{
	SetWeather(11);
	
	Varosok[VAROS_LS] = CreateDynamicRectangle(13.328735, -3086.089355, 3653.328613, 593.910766);
	Varosok[VAROS_SF] = CreateDynamicRectangle(-3646.105468, -3923.156250, 53.894531, 3116.843750);
	Varosok[VAROS_LV] = CreateDynamicRectangle(39.176635, 575.530517, 3019.176757, 3355.530517);
	Areak[San_Fierro] = CreateDynamicRectangle(-2977.858, 46.7115, 2989.536, 2989.536);
	Areak[LVBank] = CreateDynamicRectangle(2129.9541,1611.9703, 2158.4189,1622.2084);
	Areak[AJSzokes] = CreateDynamicCircle(1417.1980,6.7590, 5.0);
	Areak[aRepter][0] = CreateDynamicRectangle(1368.174,-2668.797,2143.953, -2400.351);
	Areak[aRepter][1] = CreateDynamicRectangle(1851.135, -2416.142, 2143.953, -2195.068);

	// map iconok | map ikonok | mapp iconok | mapp ikonok |
	new Float:tavolsag = 5000.0;
	CreateDynamicMapIcon(2065.3147, -1831.5507, 13.5545, 27, 0, NINCS, NINCS, NINCS, tavolsag); // autómûhely
	CreateDynamicMapIcon(1139.3468, -1772.6783, 16.5992, 36, 0, NINCS, NINCS, NINCS, tavolsag); // autóiskola
	CreateDynamicMapIcon(1936.5483,-1780.0764,13.3828, 55, 0, NINCS, NINCS, NINCS, tavolsag); // déli benya
	
	// Munkahelyek
	CreateDynamicMapIcon(-538.2973, -527.1304, 25.5234, 51, 0, NINCS, NINCS, NINCS, tavolsag); // Csomagszállító telephely
	
	// Repterek
	CreateDynamicMapIcon(1642.6097, -2334.5818, 13.5469, 5, 0, NINCS, NINCS, NINCS, tavolsag); // LS reptér
	
	
	/* ############################################################################################################ */
	//Text Labelek | textlabellek
	//CreateDynamic3DTextLabel("Térfigyelõ kamera rendszer\n(( /kamerák ))", COLOR_WHITE, 2400.7480, -1440.2505, 996.0143, 10.0);

	
	/*CreateDynamic3DTextLabel("Mák", COLOR_LIMEGREEN, 2575.6831, -647.4008, 136.3643, 30.0);
	CreateDynamic3DTextLabel("Kokain", COLOR_LIMEGREEN, 2587.7622, -642.1243, 135.4153, 30.0);
	CreateDynamic3DTextLabel("Cannabis", COLOR_LIMEGREEN, 2575.4333, -634.7428, 135.6616, 30.0);
	
	CreateDynamic3DTextLabel("California State Prison\n(( /prisongate ))", COLOR_WHITE, 1823.4629, -1537.8738, 14.1550, 20.0);*/
	
	//Vonat figyelmeztetés:
	/*CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS,2205.67211914,-1652.58447266,14.29533195+2.5,30.0); //object(ce_roadsign1) (1)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2194.81103516,-1739.46118164,12.54687500+2.5,30.0); //object(ce_roadsign1) (2)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2220.52734375,-1641.80859375,14.29533195+2.5,30.0); //object(ce_roadsign1) (3)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2206.56054688,-1725.01367188,12.40704346+2.5,30.0); //object(ce_roadsign1) (5)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2193.19165039,-1900.55249023,12.67410469+2.5,30.0); //object(ce_roadsign1) (6)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2208.57812500,-1888.24060059,12.55061913+2.5,30.0); //object(ce_roadsign1) (7)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 1955.49108887,-1949.95129395,12.68271637+2.5,30.0); //object(ce_roadsign1) (8)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 1967.74353027,-1961.57739258,12.67511368+2.5,30.0); //object(ce_roadsign1) (9)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, -1989.56518555,-587.15649414,24.88768959+2.5,30.0); //object(ce_roadsign1) (10)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, -1973.68017578,-572.42700195,24.68156433+2.5,30.0); //object(ce_roadsign1) (11)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, -1944.44946289,-233.27220154,24.64271164+2.5,30.0); //object(ce_roadsign1) (12)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, -1963.71423340,-245.78460693,25.04874039+2.5,30.0); //object(ce_roadsign1) (13)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, -1962.46765137,-70.63782501,24.78027725+2.5,30.0); //object(ce_roadsign1) (14)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, -1937.01416016,-58.15593338,24.65348053+2.5,30.0); //object(ce_roadsign1) (15)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 750.44702148,1854.41674805,4.63747215+2.5,30.0); //object(ce_roadsign1) (16)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 728.79510498,1844.52172852,4.75362968+2.5,30.0); //object(ce_roadsign1) (17)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 730.62274170,1908.24328613,4.54376030+2.5,30.0); //object(ce_roadsign1) (18)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 751.18475342,1921.76135254,4.49454021+2.5,30.0); //object(ce_roadsign1) (19)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 1240.37036133,2641.90429688,9.82031155+2.5,30.0); //object(ce_roadsign1) (20)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 1254.51428223,2625.56201172,9.82031250+2.5,30.0); //object(ce_roadsign1) (21)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 1593.97436523,2624.08251953,9.81251717+2.5,30.0); //object(ce_roadsign1) (22)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 1580.65209961,2642.81787109,9.82031250+2.5,30.0); //object(ce_roadsign1) (23)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 1900.10876465,2702.21606445,9.81251621+2.5,30.0); //object(ce_roadsign1) (24)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 1914.14453125,2689.51928711,9.73959732+2.5,30.0); //object(ce_roadsign1) (25)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2094.72412109,2689.55493164,9.76978970+2.5,30.0); //object(ce_roadsign1) (26)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2080.46484375,2704.21728516,9.82031250+2.5,30.0); //object(ce_roadsign1) (27)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2380.29028320,2700.78295898,9.81479740+2.5,30.0); //object(ce_roadsign1) (28)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2394.32739258,2683.08544922,9.99784851+2.5,30.0); //object(ce_roadsign1) (29)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2755.89453125,906.72436523,9.94443798+2.5,30.0); //object(ce_roadsign1) (30)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2777.55712891,920.60461426,9.89843750+2.5,30.0); //object(ce_roadsign1) (31)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2294.12670898,-1143.27478027,25.79214478+2.5,30.0); //object(ce_roadsign1) (32)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2279.43090820,-1157.22680664,25.68989182+2.5,30.0); //object(ce_roadsign1) (33)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2280.72705078,-1391.31005859,23.09847069+2.5,30.0); //object(ce_roadsign1) (34)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2294.62133789,-1377.74584961,23.06707191+2.5,30.0); //object(ce_roadsign1) (35)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2286.21118164,-1477.40466309,21.90439415+2.5,30.0); //object(ce_roadsign1) (36)
	CreateDynamic3DTextLabel("FIGYELEM!\nVonat közlekedik!", COLOR_PIROS, 2267.44848633,-1490.68762207,21.50704384+2.5,30.0); //object(ce_roadsign1) (37)*/
	
	ServerLastActiveUpdate();
	
	SetTimer("ConnectLimiter", 20 * 1000, false);
	
	return 1;
}

fuggveny ConnectLimiter()
{
	SendRconCommand("minconnectiontime 500");
	print("\n<< ConnectLimiter aktiválva! >>\n");
	
	if(!karbantartas) SendRconCommand("password 0");
	GameModeBetoltve = true;
	return 1;
}

fuggveny ResetWeapon(playerid)	
{
	ResetPlayerWeapons(playerid);
	for(new f = 0; f < 12; f++) 
	{ 
		PlayerInfo[playerid][pFegyver][f] = 0;
		PlayerInfo[playerid][pTolteny][f] = 0;
	}
	SetPlayerArmedWeapon(playerid, 0);
	return 1;
}

stock JarmuFenyhid(veh, bool:allapot)
{
	new model = GetVehicleModel(veh);
	if(allapot)
	{
		if(Villogo[veh][2] == 1) return true;
		if(model == 525) //Towtruck
		{
			Villogo[veh][0] = CreateVehicleObject(18646, veh, 0.55, -0.48, 1.44,   0.00, 0.00, 0.00,50);
			Villogo[veh][1] = CreateVehicleObject(18646, veh, -0.52, -0.48, 1.44,   0.00, 0.00, 0.00,50);
			Villogo[veh][2] = 1;
			BlinkingLights(veh, true);
		}
		else if(model == 599) //Police Ranger
		{
			Villogo[veh][0] = CreateVehicleObject(18646, veh, 0.59, 0.00, 1.10,   0.00, 0.00, 0.00,50);
			Villogo[veh][1] = CreateVehicleObject(18646, veh, -0.59, 0.00, 1.10,   0.00, 0.00, 0.00,50);
			Villogo[veh][2] = 1;
		}
		else if(model == 596) //LSPD
		{
			Villogo[veh][0] = CreateVehicleObject(18646, veh, 0.55, -0.40, 0.90,   0.00, 0.00, 0.00,50);
			Villogo[veh][1] = CreateVehicleObject(18646, veh, -0.52, -0.40, 0.90,   0.00, 0.00, 0.00,50);
			Villogo[veh][2] = 1;
		}
		else if(model == 597) //LSPD
		{
			Villogo[veh][0] = CreateVehicleObject(18646, veh, 0.55, -0.40, 0.90,   0.00, 0.00, 0.00,50);
			Villogo[veh][1] = CreateVehicleObject(18646, veh, -0.52, -0.40, 0.90,   0.00, 0.00, 0.00,50);
			Villogo[veh][2] = 1;
		}
		else if(model == 427) //Enforcer
		{
			Villogo[veh][0] = CreateVehicleObject(18646, veh, -0.89, -3.49, 1.70,   0.00, 0.00, 0.00,50); // hátsó villogó
			Villogo[veh][1] = CreateVehicleObject(18646, veh, 0.00, 1.10, 1.40,   0.00, 0.00, 0.00,50); // elsõ villogó
			Villogo[veh][2] = 1;
		}
		else if(model == 598) //LVPD
		{
			Villogo[veh][0] = CreateVehicleObject(18646, veh, 0.55, -0.40, 0.90,   0.00, 0.00, 0.00, 50);
			Villogo[veh][1] = CreateVehicleObject(18646, veh, -0.52, -0.40, 0.90,   0.00, 0.00, 0.00, 50);
			Villogo[veh][2] = 1;
		}
		else if(model == 416) //Ambulance
		{
			Villogo[veh][0] = CreateVehicleObject(18646, veh, 1.000000, -3.499998, 1.800000, 0.000000, 0.000000, 0.000000, 50);
			Villogo[veh][1] = CreateVehicleObject(18646, veh, 0.000000, 0.899999, 1.200000, 0.000000, 0.000000, 0.000000, 50);
			Villogo[veh][2] = 1;
		}
		else if(model == 407) //Firetruck
		{
			Villogo[veh][0] = CreateVehicleObject(18646, veh, -0.599999, 3.199999, 1.300000, 0.000000, 0.000000, 0.000000, 50);
			Villogo[veh][1] = CreateVehicleObject(18646, veh, 0.599999, 3.199999, 1.300000, 0.000000, 0.000000, 0.000000, 50);
			Villogo[veh][3] = CreateVehicleObject(18646, veh, 0.000000, -2.899999, 1.400000, 0.000000, 0.000000, 0.000000, 50);
			Villogo[veh][2] = 1;
		}
		else return false;
	}
	else
	{
		if(Villogo[veh][2] == 1)
		{
			BlinkingLights(veh, false);
			DestroyVehicleObject(Villogo[veh][0]);
			DestroyVehicleObject(Villogo[veh][1]);
			DestroyVehicleObject(Villogo[veh][3]);
			Villogo[veh][2] = 0;
		}
	}
	return true;
}

fuggveny BlinkingLights(KocsiID, bool:allapot)
{
	new Panels, Doors1, Lights, Tires;
	if(allapot)
	{
		//if(GetVehicleParamsSirenState(KocsiID) == NINCS) return 0;
		if(VehicleELM[KocsiID]) return 1;
		SetJarmu(KocsiID, KOCSI_LAMPA, false);
		SetJarmu(KocsiID, KOCSI_LAMPA, true);
		GetVehicleDamageStatus(KocsiID, Panels, Doors1, Lights, Tires);
		UpdateVehicleDamageStatus(KocsiID, Panels, Doors1, encode_lights(0, 0, 1, 1), Tires);
		TLI[KocsiID][0] = SetTimerEx("TimerBlinkingLights", 100, false, "dd", KocsiID, 0);
		VehicleELM[KocsiID] = true;
	}
	else
	{
		KillTimer(TLI[KocsiID][0]);
		KillTimer(TLI[KocsiID][1]);
		GetVehicleDamageStatus(KocsiID, Panels, Doors1, Lights, Tires);
		UpdateVehicleDamageStatus(KocsiID, Panels, Doors1, encode_lights(0, 0, 0, 0), Tires);
		VehicleELM[KocsiID] = false;
	}
	return 1;
}

fuggveny encode_lights(light1, light2, light3, light4)
{
	return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}

fuggveny TimerBlinkingLights(vehicleid, timer)
{
	new Panels, Doors1, Lights, Tires, newtimer;
	GetVehicleDamageStatus(vehicleid, Panels, Doors1, Lights, Tires);	
	switch(timer)
	{
		case 0: { UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(1, 1, 0, 0), Tires); newtimer = 1; }
		case 1: { UpdateVehicleDamageStatus(vehicleid, Panels, Doors1, encode_lights(0, 0, 1, 1), Tires); newtimer = 0; }
	}
	TLI[vehicleid][timer] = SetTimerEx("TimerBlinkingLights", 100, false, "dd", vehicleid, newtimer);
	return 1;
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
	if(newstate)
	{
		BlinkingLights(vehicleid, true);
		JarmuFenyhid(vehicleid, true);
	}
	return 1;
}

stock GetWeaponSlot(weaponid)
{
	new weaponslot;
	switch(weaponid)
	{
		case 0: weaponslot = 0;
		case 1: weaponslot = 0;
		case 2: weaponslot = 1;
		case 3: weaponslot = 1;
		case 4: weaponslot = 1;
		case 5: weaponslot = 1;
		case 6: weaponslot = 1;
		case 7: weaponslot = 1;
		case 8: weaponslot = 1;
		case 9: weaponslot = 1;
		case 10: weaponslot = 10;
		case 11: weaponslot = 10;
		case 12: weaponslot = 10;
		case 13: weaponslot = 10;
		case 14: weaponslot = 10;
		case 15: weaponslot = 10;
		case 16: weaponslot = 8;
		case 17: weaponslot = 8;
		case 18: weaponslot = 8;
		case 22: weaponslot = 2;
		case 23: weaponslot = 2;
		case 24: weaponslot = 2;
		case 25: weaponslot = 3;
		case 26: weaponslot = 3;
		case 27: weaponslot = 3;
		case 28: weaponslot = 4;
		case 29: weaponslot = 4;
		case 30: weaponslot = 5;
		case 31: weaponslot = 5;
		case 32: weaponslot = 4;
		case 33: weaponslot = 6;
		case 34: weaponslot = 6;
		case 35: weaponslot = 7;
		case 36: weaponslot = 7;
		case 37: weaponslot = 7;
		case 38: weaponslot = 7;
		case 39: weaponslot = 8;
		case 40: weaponslot = 8;
		case 41: weaponslot = 9;
		case 42: weaponslot = 9;
		case 43: weaponslot = 9;
		case 44: weaponslot = 11;
		case 45: weaponslot = 11;
		case 46: weaponslot = 11;
	}
	return weaponslot;
}

fuggveny FegyverCheatCheck(playerid)
{
	if(!IsValidPlayerID(playerid)) return 1;
	for(new x = 0; x < 12; x++)
	{
		new fegyo = 0, ammo = 0;
		GetPlayerWeaponData(playerid, x, fegyo, ammo);
		
		if(fegyo != 0 && ammo > 0)
		{
			if(fegyo == 38)
			{
				SetPlayerVirtualWorld(playerid, HACKER_VW);
				ResetWeapon(playerid);
				CallRemoteFunction("OnJunkBusterKick", "is", playerid, "Fegyver csalás! [minigun]");
				return 1;
			}
			else if(PlayerInfo[playerid][pFegyver][x] != fegyo)
			{
				printf("FegyverCheat | pFegyver: %d / vFegyver: %d | pLõszer: %d / vLõszer: %d", fegyo, PlayerInfo[playerid][pFegyver][x], ammo, PlayerInfo[playerid][pTolteny][x]); 
				SetPlayerVirtualWorld(playerid, HACKER_VW);
				ResetWeapon(playerid);
				
				PlayerTextFormat(playerid, "Fegyver csalás! [fegyver: %s]", aWeaponNames[fegyo]);
				CallRemoteFunction("OnJunkBusterBan", "is", playerid, PlayerText[playerid]);
				return 1;
			}
			else if((ammo - 3) > PlayerInfo[playerid][pTolteny][x]) // a kivonás azért, hogy ne 1db lõszer eltérése esetén bassza ki
			{
				SetPlayerVirtualWorld(playerid, HACKER_VW);
				ResetWeapon(playerid);
				
				PlayerTextFormat(playerid, "Fegyver csalás! [lõszer: %s]", aWeaponNames[fegyo]);
				CallRemoteFunction ("OnJunkBusterBan", "is", playerid, PlayerText[playerid]);
				return 1;
			}
			else FegyverKaliberhezMinSzint(playerid, fegyo);
		}
		/*else
		{
			PlayerInfo[playerid][pFegyver][x] = 0;
			PlayerInfo[playerid][pTolteny][x] = 0;
		}*/
	}
	return 1;
}

fuggveny GiveWeapon(playerid, weaponid, ammo)
{
	new slot = GetWeaponSlot(weaponid);
	PlayerInfo[playerid][pTolteny][slot] += ammo;
	PlayerInfo[playerid][pFegyver][slot] = weaponid;
	
	GivePlayerWeapon(playerid, weaponid, ammo);
	FegyverElrak(playerid);
	
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	#if defined War_System
		if(Harcol[playerid] && areaid == TeruletInfo[HarcolTerulet[playerid]][tArea])
			HarcKieses(playerid, "Elhagyta a zónát");
	#endif
	return 1;
}

/*public OnPlayerVehicleDamage(playerid, vehicleid, Float:Damage)
{
	if(vehicleid == 497)
	{
		if(Damage > 0.0) {
			SetVehicleHealth(vehicleid, 1000.0);
		}
	}
	return 1;
}*/

stock Haztipus(tipus)
{
	new szoveg[32];
	switch(tipus)
	{
		case 1: szoveg = "Los Santos";
		case 2: szoveg = "Las Venturas";
		case 3: szoveg = "Gazdagnegyed";
		case 4: szoveg = "Falu";
		case 5: szoveg = "Tanya";
		default: szoveg = "Ismeretlen";
	}
	return szoveg;
}
fuggveny bool:InaktivCucc(id, tipus)
{
	if(tipus == INAKTIV_HAZ)
		return (HouseInfo[id][hDate] <= (gettime() - EladasIdo[0] * 60*60*24));
	else if(tipus == INAKTIV_KOCSI)
		return (CarInfo[id][cDate] <= (gettime() - EladasIdo[1] * 60*60*24) && CarInfo[id][cFrakcio] == 0);
	return false;
}

fuggveny bool:RegenHasznaltKocsi(kocsi)
{
	return (KocsiUtolsoHasznalat[kocsi] <= (gettime() - KOCSIHASZNALATIDO * 60));
}

stock AFKWeaponHack(hackerid)
{
	if(Szunet[hackerid])
	{
		SetPlayerVirtualWorld(hackerid, HACKER_VW);
		Freeze(hackerid);
		ResetWeapon(hackerid);
		CallRemoteFunction("OnJunkBusterBan", "is", hackerid, "Fegyver csalás! [AFK]");
		Kick(hackerid);
		return true;
	}
	return false;
}

public OnPlayerPause(playerid)
{
	if(RendesJatekos(playerid) && !AFK[playerid] && !Szunet[playerid] /*&& PlayerInfo[playerid][pAdmin] == 0*/)
	{
		Szunet[playerid] = true;
		SzunetIdo[playerid] = 0;
	}
	return 1;
}

public OnPlayerUnPause(playerid)
{
	if(RendesJatekos(playerid) && Szunet[playerid] /*&& PlayerInfo[playerid][pAdmin] == 0*/)
	{
		Szunet[playerid] = false;
		
		DestroyDynamic3DTextLabel(Szunet3D[playerid]);
		
		new ido = SzunetIdo[playerid]; // a szünetidõ másodpercben van
		if(PlayerInfo[playerid][pJailTime] > 0)
		{
			if(ido > 30)
			{
				MsgFormat(playerid, "Mivel te %d percet és %d másodpercet AFK-ztál ezért nem telt az idõd!", ido/60, ido%60);
				PlayerInfo[playerid][pJailTime] += ido;
			}
		}
		
		if(PlayerInfo[playerid][pVeszAuto][2] != 0)
		{
			SelectTextDraw(playerid, COLOR_LOGINDRAW);
		}
	    //Cselekves(playerid, "már nem szünetelteti a játékot", 0, true);
	}
	return 1;
}

fuggveny IsVehicleInRangeOfPoint(vehicleid, Float:range, Float:x, Float:y, Float:z)
{
	new Float:px,Float:py,Float:pz;
	GetVehiclePos(vehicleid,px,py,pz);
	px -= x;
	py -= y;
	pz -= z;
	return ((px * px) + (py * py) + (pz * pz)) < (range * range);
}

public SebessegKorlatozo()
{
	/*new Float:seb, Float:sk, carid,
	Float:x, Float:y, Float:z,
	Float:Vx, Float:Vy, Float:Vz;

	PlayerForeach(playerid)
	{
		if(RendesJatekos(playerid) && SebessegKorlat[playerid] != 0 && KocsibanVan[playerid])
		{
			carid = GetPlayerVehicleID(playerid);
			GetVehiclePos(carid, x, y, z);
			GetVehicleVelocity(carid, Vx, Vy, Vz);

			sk = float(SebessegKorlat[playerid]) / 100.0 / 1.5;

			if(!IsPlayerInRangeOfPoint(playerid, sk + 0.05, x + Vx, y + Vy, z + Vz))
			{
				seb = floatsqroot(Vx*Vx+Vy*Vy+Vz*Vz);

				Vx = (Vx / seb) * sk;
				Vy = (Vy / seb) * sk;
				Vz = (Vz / seb) * sk;

				SetVehicleVelocity(carid, Vx, Vy, Vz);
			}
		}
	}
	return 1;*/
}

public GyemantPlusz()
{
	for(new f = 0; f < sizeof(FrakcioInfo); f++)
	{
		new Gyemantok = FrakcioInfo[f][fGyemant];
		if(Gyemantok > 0)
		{
			if(f == LMUNKA_LSPD || f == LMUNKA_FBI || f == LMUNKA_MENTO || f == LMUNKA_ALLAM || f == LMUNKA_RIPORTER || f == LMUNKA_TAXI || f == LMUNKA_KATONA  || 
			f == LMUNKA_OKTATO || f == LMUNKA_NAV)
			{
				FrakcioInfo[f][fPenz] += 1000000*Gyemantok;
				FrakcioInfo[f][fDeagle] += 10*Gyemantok;
				FrakcioInfo[f][fSilenced] += 10*Gyemantok;
				FrakcioInfo[f][fMp5] += 10*Gyemantok;
				FrakcioInfo[f][fM4] += 10*Gyemantok;
				FrakcioInfo[f][fShotgun] += 10*Gyemantok;
				FrakcioInfo[f][fCombat] += 10*Gyemantok;
				FrakcioInfo[f][fSniper] += 10*Gyemantok;
				return 1;
			}
			else if(f == LMUNKA_BALLAS || f == LMUNKA_UM || f == LMUNKA_CAMORRA || f == LMUNKA_LK || f == LMUNKA_SURENOS || f == LMUNKA_GSF)
			{
				FrakcioInfo[f][fPenz] += 1000000*Gyemantok;
				FrakcioInfo[f][fMati] += 15000*Gyemantok;
				FrakcioInfo[f][fHeroin] += 4000*Gyemantok;
				FrakcioInfo[f][fKokain] += 4000*Gyemantok;
				FrakcioInfo[f][fMarihuana] += 4000*Gyemantok;
				return 1;
			}
			return 1;
		}
	}
	return 1;
}

public GyemantBetoltes()
{
	new arrCoords[6][64];
	new strFromFile2[256];
	new File: file = fopen("Config/gyemant.cfg", io_read);
	if(!file) return false;
	if(file)
	{
		new idx;
		while (idx < sizeof(Gyemant))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			Gyemant[idx][gPosX] = floatstr(arrCoords[0]);
			Gyemant[idx][gPosY] = floatstr(arrCoords[1]);
			Gyemant[idx][gPosZ] = floatstr(arrCoords[2]);
			Gyemant[idx][gPosVW] = strval(arrCoords[3]);
			Gyemant[idx][gPosInt] = strval(arrCoords[4]);
			if(Gyemant[idx][gPosX] != 0.0 && Gyemant[idx][gPosY] != 0.0 && Gyemant[idx][gPosZ] != 0.0)
				Gyemant[idx][gObID] = CreateDynamicObject(2976, Gyemant[idx][gPosX], Gyemant[idx][gPosY], Gyemant[idx][gPosZ]-0.7, 0.0,0.0,0.0, Gyemant[idx][gPosVW], Gyemant[idx][gPosInt], NINCS, 200.0);

			idx++;
		}
		fclose(file);
	}
	return 1;
}

public GyemantMentes()
{
	new idx;
	new File: file2;
	while (idx < sizeof(Gyemant))
	{
		new coordsstring[512];
		format(coordsstring, sizeof(coordsstring), "%f|%f|%f|%d|%d\n",
		Gyemant[idx][gPosX],
		Gyemant[idx][gPosY],
		Gyemant[idx][gPosZ],
		Gyemant[idx][gPosVW],
		Gyemant[idx][gPosInt]);
		if(idx == 0)
		{
			file2 = fopen("Config/gyemant.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/gyemant.cfg", io_append);
		}
		if(file2)
		{
			fwrite(file2, coordsstring);
			idx++;
			fclose(file2);
		}
		else
		{
			break;
		}
	}
	return 1;
}

fuggveny SebessegKorlatozoPlayer(playerid)
{
	new Float:seb, Float:sk, carid,
	Float:x, Float:y, Float:z,
	Float:Vx, Float:Vy, Float:Vz
	;
	
	carid = GetPlayerVehicleID(playerid);
	GetVehiclePos(carid, x, y, z);
	GetVehicleVelocity(carid, Vx, Vy, Vz);
	
	sk = float(SebessegKorlat[playerid]) / 100.0 / 1.6;
	
	if(!IsPlayerInRangeOfPoint(playerid, sk + 0.05, x + Vx, y + Vy, z + Vz))
	{
		seb = floatsqroot(Vx*Vx+Vy*Vy+Vz*Vz);
				
		Vx = (Vx / seb) * sk;
		Vy = (Vy / seb) * sk;
		Vz = (Vz / seb) * sk;
			
		SetVehicleVelocity(carid, Vx, Vy, Vz);
	}
	return 1;
}

stock NemMozoghat(playerid)
{
	if(Animban[playerid] != 0 || PlayerCuffed[playerid] || Leutve[playerid] || PlayerTied[playerid] || HalalAnim[playerid]) return 1;
	return 0;
}

stock NemHasznalhatAnimot(playerid)
{
	if(NemMozoghat(playerid) || Mobile[playerid] != -1 || Rabol[playerid] != 0 || PlayerCuffed[playerid] || PlayerTied[playerid] || Leutve[playerid] || Animban[playerid] != 0) return 1;
	return 0;
}

stock FegyverElrak(playerid)
{
	Fegyvere[playerid] = 0;
	//SetPlayerArmedWeapon(playerid, GetPVarInt(playerid, "WeaponInHand"));
	SetPlayerArmedWeapon(playerid, 0);
	return 1;
}

stock AnimbaRak(playerid, tipus = TIPUS_UTKOZES, bool:uzenet = true)
{
	if(Animban[playerid] != 0 || IsPlayerInDynamicArea(playerid,Areak[aLunaPark]) || !Logged(playerid) || !AdminDuty[playerid] || ScripterDuty[playerid] != 0 || SpawnVedelem[playerid] > 0) return 1;
	
	if(tipus == TIPUS_LOTTSEB)
	    Elverzes[playerid] = ELVERZESIDO*60;
	    
	if(uzenet)
	{
	    Msg(playerid, "Súlyosan megsérültél!");

		if(tipus == TIPUS_LOTTSEB)
		    SendFormatMessage(playerid,COLOR_LIGHTRED, "Ha %d percen belül nem jön ellátni valaki a sebeidet, el fogsz vérezni!",ELVERZESIDO);
	}

	//Freeze(playerid, 5000);
	
	HalalAnimPlay(playerid, true);
	
	SetPlayerDrunkLevel(playerid, 50000);
	FegyverElrak(playerid);
	
	return 1;
}
fuggveny Feketeseg(playerid, bool:sotet, ido)
{
	/*if(sotet) TextDrawShowForPlayer(playerid, FeketesegTD);
	else TextDrawHideForPlayer(playerid, FeketesegTD);
	if(ido != 0)
	    SetTimerEx("Feketeseg",ido,0, "dd",playerid, false);*/
	    
	return 1;
}
/*fuggveny Pirossag(playerid, bool:sotet, ido)
{
	if(sotet) TextDrawShowForPlayer(playerid, PirossagTD);
	else TextDrawHideForPlayer(playerid, PirossagTD);
	if(ido != 0)
	    SetTimerEx("Pirossag",ido,0, "dd",playerid, false);
	    
	return 1;
}*/
fuggveny bool:JegyEllenor(playerid)
{
	if(!LMT(playerid, LMUNKA_ALLAM) || PlayerInfo[playerid][pRank] != 0)
		return false;
	return true;
}

fuggveny UtolsoSzabadSlot()
{
	new s = NINCS;
	for(new x = (GetMaxPlayers() - 1); x > 0; x--)
	{
		if(!IsValidPlayerID(x))
		{
			s = x;
			break;
		}
	}
	return s;
}

fuggveny SpawnExportNPC()
{
	new tmphour; 
	gettime(tmphour); FixHour(tmphour);	tmphour = shifthour;
	
	new vw = tmphour;
	
	if(tmphour >= 20 || tmphour <= 5)
		vw = 0;
	else
		vw = Rand(1999, 99999);
	
	SetActorVirtualWorld(IllegalDrogActor, vw);
	SetActorVirtualWorld(IllegalFegyverActor, vw);
	
	printf("ExportNPC új vw: %d", vw);
	return 1;
}

fuggveny NPCkCsatlakoztatasa()
{
	print("NPC-k Csatlakoztatasa folyamatban...");
	
	ConnectNPC("NPC_AT400_LS", "at400_ls");
	ConnectNPC("NPC_AT400_SF", "at400_sf");
	ConnectNPC("NPC_AT400_LV", "at400_lv");
	
	ConnectNPC("NPC_TRAIN_LS", "train_ls");
	ConnectNPC("NPC_TRAIN_SF", "train_sf");
	ConnectNPC("NPC_TRAIN_LV", "train_lv");

	print("NPC-k Csatlakoztatasa Sikeres...");
}

stock IsAtBankosNPC(playerid,Float:sugar=3.0)
{
	new Player[5];
	Player[0] = ReturnUser("NPC_LSBank_1");
	Player[1] = ReturnUser("NPC_LSBank_2");
	Player[2] = ReturnUser("NPC_LSBank_3");
	Player[3] = ReturnUser("NPC_LSBank_4");
	Player[4] = ReturnUser("NPC_LSBank_5");
	for(new i=0; i < sizeof(Player); i++)
	{
		if(Player[i] != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(sugar,playerid,Player[i]))
				return true;
		}
	}
	return false;
}

fuggveny GorenalVan(playerid)
{
	new Player[1];
	Player[0] = ReturnUser("NPC_Betoro_LS");
	for(new i=0; i < sizeof(Player); i++)
	{
		if(Player[i] != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(4.0,playerid,Player[i]))
				return true;
		}
	}
	return false;
}
public NPCSpawn(npc)
{
	new nev[MAX_PLAYER_NAME], TrainColor = COLOR_INVISIBLE;
	nev = PlayerName(npc, true);
	if(egyezik(nev, "NPC_AT400_LS"))
	{
		ResetVW(npc);
		SetPlayerSkin(npc, 61);
		PutPlayerInVehicle(npc, REPULO_LS, 0);
		LockCar(REPULO_LS);
		SetPlayerColor(npc, COLOR_INVISIBLE);
	}
	else if(egyezik(nev, "NPC_AT400_SF"))
	{
		ResetVW(npc);
		SetPlayerSkin(npc, 61);
		PutPlayerInVehicle(npc, REPULO_SF, 0);
		LockCar(REPULO_SF);
		SetPlayerColor(npc, COLOR_INVISIBLE);
	}
	else if(egyezik(nev, "NPC_AT400_LV"))
	{
		ResetVW(npc);
		SetPlayerSkin(npc, 61);
		PutPlayerInVehicle(npc, REPULO_LV, 0);
		LockCar(REPULO_LV);
		SetPlayerColor(npc, COLOR_INVISIBLE);
	}
	else if(egyezik(nev, "NPC_TRAIN_LS"))
	{
		ResetVW(npc);
		SetPlayerSkin(npc, 202);
		PutPlayerInVehicle(npc, VONAT_LS, 0);
		LockCar(VONAT_LS);
		SetJarmu(VONAT_LS, KOCSI_LAMPA, 1);
		SetPlayerColor(npc, TrainColor);
	}
	else if(egyezik(nev, "NPC_TRAIN_SF"))
	{
		ResetVW(npc);
		SetPlayerSkin(npc, 202);
		PutPlayerInVehicle(npc, VONAT_SF, 0);
		LockCar(VONAT_SF);
		SetJarmu(VONAT_SF, KOCSI_LAMPA, 1);
		SetPlayerColor(npc, TrainColor);
	}
	else if(egyezik(nev, "NPC_TRAIN_LV"))
	{
		ResetVW(npc);
		SetPlayerSkin(npc, 202);
		PutPlayerInVehicle(npc, VONAT_LV, 0);
		LockCar(VONAT_LV);
		SetJarmu(VONAT_LV, KOCSI_LAMPA, 1);
		SetPlayerColor(npc, TrainColor);
	}
	return 1;
}

stock RendesJatekos(playerid, bool:npccsekk = true, bool:csaknpc = false)
{
	if(!csaknpc && npccsekk && IsValidPlayerID(playerid) && Logged(playerid) && !IsPlayerNPC(playerid) ||
		!csaknpc && !npccsekk && IsValidPlayerID(playerid) && Logged(playerid) ||
		csaknpc && IsValidPlayerID(playerid) && IsPlayerNPC(playerid))
		return 1;
	return 0;
}

fuggveny NehezFegyer(fegyver)
{
	if(fegyver == 33 || fegyver == 27 ||  fegyver == 26 ||  fegyver == 25)
		return true;
	return false;
}
fuggveny Lofegyver(fegyver)
{
	new slot = GetGunSlot(fegyver);
	if(slot == 2 || slot == 3 || slot == 4 || slot == 5 || slot == 6 || slot == 7 || slot == 8 || slot == 9) return 1;
	return 0;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	new slot = GetWeaponSlot(weaponid);
	if(PlayerInfo[playerid][pTolteny][slot] > 0) 
	{
		-- PlayerInfo[playerid][pTolteny][slot];
	}
	
	if(!IsRicardo(playerid))
	{
		if(hittype == BULLET_HIT_TYPE_PLAYER && ((fX == 0) || (fY == 0) || (fZ == 0)))
		{
			ResetWeapon(playerid);
			CallRemoteFunction("OnJunkBusterKick", "is", playerid, "Bulletflood (player)");
			return 1;
		}
		else if(hittype == BULLET_HIT_TYPE_VEHICLE && ((fX == 0) || (fY == 0) || (fZ == 0)))
		{
			ResetWeapon(playerid);
			CallRemoteFunction("OnJunkBusterKick", "is", playerid, "Bulletflood (vehicle)");
			return 1;
		}
		else if(hittype == BULLET_HIT_TYPE_PLAYER && weaponid == 0)
		{
			ResetWeapon(playerid);
			CallRemoteFunction("OnJunkBusterKick", "is", playerid, "Ököllel hogy lõsz?");
			return 1;
		}
		/*else if(GetPlayerAmmo(playerid) < 1)
		{
			ResetWeapon(playerid);
			CallRemoteFunction("OnJunkBusterKick", "is", playerid, "Fegyver csalás! [2]");
			return 1;
		}*/
	}

	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{
	DebugMessage("OnPlayerTakeDamage(%d, %d, %f, %d) - START", playerid, issuerid, amount, weaponid);
	if(IsValidPlayerID(playerid) && IsValidPlayerID(issuerid))
	{
		new 
			tamado = issuerid, 
			kitsebez = playerid, 
			Float:sebzes = amount
		;
		
		if(AFKWeaponHack(tamado))
		{
			GiveHealth(kitsebez, amount);
			return false;
		}
		
		if(Sofor(tamado) && !IsPlayerInAnyVehicle(kitsebez))
		{
			Freeze(tamado, 3000);
			GiveHealth(kitsebez, amount);
			Msg(tamado, "Kocsival ne ölj embert!", COL_PIROS);
			return false;
		}
		
		if(IsAdminSzolis(kitsebez, NINCS))
		{
			SetHealth(playerid, MAXHP);
			if(PlayerInfo[tamado][pAdmin] <  PlayerInfo[kitsebez][pAdmin])
			{
				AszolistBant(tamado, kitsebez);
			}
			return false;
		}
		
		/*if(PlayerWeapons[tamado][weaponid] == false && weaponid != 0)
		{
			Freeze(tamado);
			ResetWeapon(tamado);
			CallRemoteFunction("OnJunkBusterBan", "is", tamado, "Fegyver csalás! [1]");
			return false;
		}*/
		
		if(!IsPlayerStreamedIn(tamado, kitsebez))
		{
			Freeze(tamado);
			ResetWeapon(tamado);
			CallRemoteFunction("OnJunkBusterKick", "is", tamado, "Csalás! [Fake Kill]");
			return false;
		}
		
		if(JatekosHalal[kitsebez] == 2)
		{
			SetHealth(kitsebez, MAXHP);
			return false;
		}
		
		if(weaponid == 23 AND SokkoloAktivalva[tamado])
		{
			new sokktime = 30, soundid = 6003;
			if(Rabol[kitsebez] == 1) Rabol[kitsebez] = 0;
			GiveHealth(kitsebez, sebzes);
			
			MsgFormat(kitsebez, "Lesokkolt egy rendõr, és %d másodpercig megbénultál", sokktime);
			MsgFormat(tamado, "Lesokkoltad %d másodpercre", sokktime);
			Cselekves(tamado, "lõ a sokkolóval, és lesokkolja a célszemélyt", 1);
			GameTextForPlayer(kitsebez, "~r~Sokkoltak", 2500, 3);
			
			PlayerPlaySound(tamado, soundid, 0.0, 0.0, 0.0);
			PlayerPlaySound(kitsebez, soundid, 0.0, 0.0, 0.0);
			
			Bilincs(kitsebez, 1);
			ApplyAnimation(kitsebez, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0);
			FegyverElrak(kitsebez);
			Sokkolva[kitsebez] = sokktime;
			return true;
		}

		switch(weaponid)
		{
			case 22, 23, 24, 29, 28, 32: PlayerWeaponDamageType[kitsebez][0] ++; // 9mm
			case 33, 30, 31: PlayerWeaponDamageType[kitsebez][1] ++; // 5.56mm
			case 34: PlayerWeaponDamageType[kitsebez][2] ++; // 12.7x106mm
			case 25, 27, 26: PlayerWeaponDamageType[kitsebez][3] ++; // Shotgun
			default: PlayerWeaponDamageType[kitsebez][4] ++; // Egyéb
		}
		
		new 
			Float:fegyversebzes = 0.0,
			Float:armour = 0.0
		;
		
		switch(weaponid)
		{
			case 0: fegyversebzes = 3;
			case 1: fegyversebzes = 12;
			case 2: fegyversebzes = 12;
			case 3: fegyversebzes = 12;
			case 4: fegyversebzes = 35;
			case 5: fegyversebzes = 20;
			case 6: fegyversebzes = 20;
			case 7: fegyversebzes = 20;
			case 8: fegyversebzes = 40;
			case 15: fegyversebzes = 12;
			case 16: fegyversebzes = 100;
			case 18: fegyversebzes = 75;
			case 22: fegyversebzes = 30;
			case 23: fegyversebzes = 20;
			case 24: fegyversebzes = 40;
			case 25: fegyversebzes = 50;
			case 26: fegyversebzes = 50;
			case 27: fegyversebzes = 90;
			case 28: fegyversebzes = 30;
			case 29: fegyversebzes = 35;
			case 30: fegyversebzes = 80;
			case 31: fegyversebzes = 75;
			case 32: fegyversebzes = 30;
			case 33: fegyversebzes = 65;
			case 34: fegyversebzes = 90;
			case 39: fegyversebzes = 300;
			case 51: fegyversebzes = 50;
			case 54: fegyversebzes = 12;
			default: fegyversebzes = 5;
		}
		
		GetPlayerArmour(kitsebez, armour);
		
		if(armour > 0)
		{
			if(fegyversebzes > armour)
			{
				SetPlayerArmour(kitsebez, 0.0);
				new Float:maradek = fegyversebzes - armour;
				GiveHealth(kitsebez, -maradek);
			}
			else
			{
				SetPlayerArmour(kitsebez, armour - fegyversebzes);
			}
		}
		else
		{
			GiveHealth(kitsebez, sebzes); // alap sebzés eltüntetése
			GiveHealth(kitsebez, -fegyversebzes); // saját fegyver sebzés
		}
	}
	DebugMessage("OnPlayerTakeDamage(%d, %d, %f, %d) - END", playerid, issuerid, amount, weaponid);
	return 1;
}

public BenzinTankolas(playerid, tipus)
{
	if(Tankol[playerid][0] == 0) return 1;
	new 
		kocsi = GetPVarInt(playerid, "Tankolas_CarID"),
		koltseg = GetPVarInt(playerid, "Tankolas_UzemanyagAr"),
		maxuzmanyag = MaxBenzin(kocsi)
	;
	
	if(GetMoney(playerid) < koltseg)
	{
		DestroyDynamic3DTextLabel(Tankolas3D[kocsi]);
		Cselekves(playerid, "befejezte a tankolást");
		Tankol[playerid][0] = 0;
		UnFreeze(playerid);
		return 1;
	}
	
	GiveMoney(playerid, -koltseg);
	Gas[kocsi][tipus] ++;
	
	if(Gas[kocsi][tipus] >= MaxBenzin(kocsi))
	{
		DestroyDynamic3DTextLabel(Tankolas3D[kocsi]);
		Cselekves(playerid, "feltankolta a jármûvét");
		GameTextForPlayer(playerid, "~n~~n~~n~~g~~h~Feltankolva", 1000, 5);
		//MsgFormat(playerid, "A tankolás ára $%d volt!", TankolasAra[playerid]);
		TankolasAra[playerid] = 0;
		UnFreeze(playerid);
	}
	else
	{
		new Float:x, Float:y, Float:z; GetVehiclePos(kocsi, x, y, z);
		if(!PlayerToPoint(5.0, playerid, x, y, z))
		{
			DestroyDynamic3DTextLabel(Tankolas3D[kocsi]);
			Msg(playerid, "A tankolás megszakadt mert elmentél a kocsid mellõl!");
			return 1;
		}
		
		new 
			szoveg[32], 
			vonalakszama = 0
		;
		
		for(new i = 1; i <= MAX_TANKOLAS_VONAL; i++)
		{
			if(Gas[kocsi][tipus] == floatround(maxuzmanyag * floatdiv(i, 10)))
			{
				vonalakszama = i;
				break;
			}
		}

		Format(szoveg, "(( %s%s ))\nTANKOLÁS", str_repeat("|", vonalakszama), str_repeat(".", (MAX_TANKOLAS_VONAL - vonalakszama)));
		UpdateDynamic3DTextLabelText(Tankolas3D[kocsi], COLOR_GREEN, szoveg);
		
		SetTimerEx("BenzinTankolas", 1 * 1000, false, "ddd", playerid, tipus);
	}
	
	return 1;
}

fuggveny FrakcioTagok(frakcio)
{
	new tagok;
	PlayerForeach(x)
	{
		if(!IsValidPlayerID(x) || !Logged(x) || IsPlayerNPC(x)) continue;
		if(PlayerInfo[x][pMember] == frakcio)
			tagok++;
	}
	return tagok;
}

fuggveny TrafipaxCheck(playerid, sebesseg, kocsi)
{
	PlayerForeach(x)
	{
		if(!IsValidPlayerID(x) || !Logged(x) || IsPlayerNPC(x) || !OnDuty[x] || !TrafiPax[x][tAktiv] || TrafiPax[x][tSebesseg] >= sebesseg || IsAPlane(kocsi) || IsABicikli(kocsi)) continue;
		if(ProxDetectorS(30, playerid, x))
		{
		    new bool:elkap;
		    if(PlayerRaceTuning[playerid][tEMP] == 0)
		    {
				elkap = true;
			}
			else if(PlayerRaceTuning[playerid][tEMP] == 1)
		    {
		        switch(random(100))
		        {
		        	case 0 .. 50: elkap = false;
		   			default: elkap = true;
		        }
			}
			else if(PlayerRaceTuning[playerid][tEMP] == 2)
		    {
		        switch(random(100))
		        {
		        	case 0 .. 75: elkap = false;
		   			default: elkap = true;
		        }
			}
			else if(PlayerRaceTuning[playerid][tEMP] == 3)
		    {
		        switch(random(100))
		        {
		        	case 0 .. 99: elkap = false;
		   			default: elkap = true;
		        }
			}
			if(elkap || PlayerInfo[x][pMobiltrafi] == 1)
			{
				new string[256];
				new bszamolas;
				bszamolas = sebesseg - TrafiPax[x][tSebesseg];
				if(bszamolas >= 20 && bszamolas <= 35)
				{
					TrafiPax[x][tBuntetes] = 150;
				}
				if(bszamolas >= 36 && bszamolas <= 50)
				{
					TrafiPax[x][tBuntetes] = 200;
				}
				if(bszamolas >= 51 && bszamolas <= 65)
				{
					TrafiPax[x][tBuntetes] = 300;
				}
				if(bszamolas >= 66 && bszamolas <= 80)
				{
					TrafiPax[x][tBuntetes] = 400;
				}
				if(bszamolas >= 81 && bszamolas <= 95)
				{
					TrafiPax[x][tBuntetes] = 600;
				}
				if(bszamolas >= 96 && bszamolas <= 130)
				{
					TrafiPax[x][tBuntetes] = 800;
				}
				if(bszamolas >= 131)
				{
					TrafiPax[x][tBuntetes] = 1500;
					PlayerInfo[x][pCarLic] = 0;
				}
				if(bszamolas < 20 )
				{
						if(TrafiPax[playerid][tBfigyelmeztetes] > 0)
						{
							TrafiPax[playerid][tBfigyelmeztetes] --;
							break;
						}
						TrafiPax[playerid][tBfigyelmeztetes] = 5;
						
						SCM(playerid, COLOR_WHITE, ValasztoVonal("Trafipax"));
						Msg(x, "Elkaptál egy gyorshajtót tájékoztatási határon belül!");
						SendFormatMessage(x, COLOR_WHITE, "Név: %s", PlayerName(playerid));
						SendFormatMessage(x, COLOR_WHITE, "Rendszám: %d", GetPlayerVehicleID(playerid));
						SendFormatMessage(x, COLOR_WHITE, "Sebesség: %d MPH", sebesseg);
						SendFormatMessage(x, COLOR_WHITE, "Sebességkorlát: %d MPH", TrafiPax[x][tSebesseg]);
						SendFormatMessage(x, COLOR_WHITE, "Büntetés: Nincs", TrafiPax[x][tSebesseg]);
						SCM(playerid, COLOR_WHITE, ValasztoVonal("Trafipax"));
				}
					
				format(string, sizeof(string), "**=[TRAFI]=**: Egy ember bemérte %s %s típusú gépjármûvét: (%d MPH)-val", 
				PlayerName(playerid),
				GetVehicleModelName(GetVehicleModel(GetPlayerVehicleID(playerid))-400),
				sebesseg
				);
				
				SendTeamMessage(LMUNKA_LSPD, COLOR_DBLUE, string);
				SendTeamMessage(LMUNKA_FBI, COLOR_DBLUE, string);
				SendTeamMessage(LMUNKA_NAV, COLOR_DBLUE, string);
				
				format(string, sizeof(string), "**=[TRAFI]=**: Rendszám: %d | Sebességtúllépés: %d MPH | Sebességkorlát: %d MPH | Büntetés: $%d", 
				GetPlayerVehicleID(playerid),
				bszamolas,
				TrafiPax[x][tSebesseg],
				TrafiPax[x][tBuntetes]);
				
				SendTeamMessage(LMUNKA_LSPD, COLOR_DBLUE, string);
				SendTeamMessage(LMUNKA_FBI, COLOR_DBLUE, string);
				SendTeamMessage(LMUNKA_NAV, COLOR_DBLUE, string);

				SCM(playerid, COLOR_WHITE, ValasztoVonal("Trafipax"));
				Msg(playerid, "Büntetést kaptál gyorshajtás miatt");
				SendFormatMessage(playerid, COLOR_WHITE, "Sebességed: %d MPH", sebesseg);
				SendFormatMessage(playerid, COLOR_WHITE, "Sebességkorlát: %d MPH", TrafiPax[x][tSebesseg]);
				SendFormatMessage(playerid, COLOR_WHITE, "Büntetés: $%d", TrafiPax[x][tBuntetes]);
				if(bszamolas >= 131)
				{
					SendClientMessage(x, COLOR_LIGHTRED, "Mivel több mint 130 MPH-val haladtál a jogosítványod bevontuk!");
				}
				SCM(playerid, COLOR_WHITE, ValasztoVonal("Trafipax"));
				Cselekves(x, "valakit elkapott egy trafipax", NINCS);
				PlayerInfo[playerid][pAccount] -= TrafiPax[x][tBuntetes];
				
				TrafiBuntetve[playerid] = true;
				SetTimerEx("TrafiUjraBuntetes", 10*1000, false, "i", playerid);
				
				FrakcioInfo[PlayerInfo[x][pMember]][fPenz] += TrafiPax[x][tBuntetes];
				TrafiPax[playerid][tBuntetheto] = 30;
				//Freeze(playerid, 100);
				break;
			}
			else
			{
				Msg(x, "=====[ TRAFIPAX ]=====");
				Msg(x, "ERR_ERR_ERR_ERR_ERR_ERR_ERR!");
				SendClientMessage(x, COLOR_LIGHTRED, "Név: ?Aõq:");
				SendClientMessage(x, COLOR_LIGHTRED, "Rendszám: ??Q>");
				SendClientMessage(x, COLOR_LIGHTRED, "Sebességed: ?ÁûPAéõ");
				SendClientMessage(x, COLOR_LIGHTRED, "Sebességkorlát: []xQpi];");
				SendClientMessage(x, COLOR_LIGHTRED, "Büntetés: >íyS88q6sX");
				SendClientMessage(x, COLOR_WHITE, "");
				SendClientMessage(playerid,COLOR_YELLOW, "Anti Trafipax: A Védelem sikeresen elhárította a trafipax sugarait!");
			}
		}
	}
	return 1;
}

stock CountChars(szoveg[], karakter)
{
	new darab;
	for(new x = 0; x < strlen(szoveg); x++)
		if(szoveg[x] == karakter) darab++;
	return darab;
}

stock EngedelyezettKarakterek(szoveg[], extrajelek[] = "'.!?_[]():,;<>#&@ -")
{
	new bool:talalt;
	for(new x = 0; x < strlen(szoveg); x++)
	{
		if(szoveg[x] < 48 || szoveg[x] > 57 && szoveg[x] < 65 || szoveg[x] > 90 && szoveg[x] < 97 || szoveg[x] > 122 && szoveg[x] < 128)
		{
			if(!strlen(extrajelek)) return 0;
			talalt = false;
			for(new y = 0; y < strlen(extrajelek); y++)
			{
				if(szoveg[x] == extrajelek[y])
				{
					talalt = true;
					break;
				}
			}
			if(!talalt) return 0;
		}
	}
	return 1;
}

fuggveny OnlinePlayers()
{
	new players = 0;
	PlayerForeach(x)
	{
		if(IsValidPlayerID(x))
			players ++;
	}
	return players;
}

fuggveny SetVehicleInterior(kocsi, interior)
{
	if(interior < 0) return 1;
	LinkVehicleToInterior(kocsi, interior);
	//new vs = IsAVsKocsi(kocsi);
	Jarmu_Int[kocsi] = interior;
	
	return 1;
}

fuggveny SetVehicleVW(kocsi, vw)
{
	if(vw < 0) return 1;
	SetVehicleVirtualWorld(kocsi, vw);
	Jarmu_VW[kocsi] = vw;
	return 1;
}

stock ZsarukOnline()
{
	new zsaruk;
	PlayerForeach(x)
	{
		if(!IsValidPlayerID(x) || !Logged(x) || IsPlayerNPC(x) || !LegalisSzervezetTagja(x)) continue;
		zsaruk ++;
	}
	return zsaruk;
}

fuggveny JatekosSebessege(playerid)
{
	new Float:x, Float:y, Float:z;
	if(IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	else
	    GetPlayerVelocity(playerid,x,y,z);
		
	return floatround(floatsqroot(x * x + y* y + z * z) * 100.0 * 2.0);
}

fuggveny GetSpeed(playerid)
{
	new Float: Pos[4];
    GetVehicleVelocity(GetPlayerVehicleID(playerid), Pos[0], Pos[1], Pos[2]);
    return floatround(1.61 * floatsqroot(floatabs(floatpower(Pos[0] + Pos[1] + Pos[2], 2))) * 100);
}

fuggveny SetVehicleColor(kocsi, szin1, szin2)
{
	KocsiSzinek[kocsi][0] = szin1;
	KocsiSzinek[kocsi][1] = szin2;
	ChangeVehicleColor(kocsi, szin1, szin2);
}

fuggveny Nagyobbadmin(player, kinel)
{
	if(PlayerInfo[player][pAdmin] > PlayerInfo[kinel][pAdmin]) return 1;
	return 0;
}

stock FloodCheck(playerid, parancs[], ido = 2, kick = NINCS)
{
	if(PlayerInfo[playerid][pElozoParancs] != 0)
	{
		PlayerInfo[playerid][pFlood]++;
		if(PlayerInfo[playerid][pFlood] >= kick && kick != NINCS)
		{
			SendFormatMessageToAll(COLOR_LIGHTRED, "%s kirúgva a rendszer által! | Oka: Flood! (Parancs: %s)",PlayerName(playerid), parancs);
			KickEx(playerid);
			return 1;
			//Kick(playerid);
		}
		
		new szoveg[48];
		Format(szoveg, "Ne floodold a %s parancsot!", parancs);
		iMsg(playerid, szoveg);
		
		return 1;
	}
	else
	{
		PlayerInfo[playerid][pElozoParancs] = ido;
		PlayerInfo[playerid][pFlood] = 0;
	}
	
	return 0;
}

fuggveny RaktarUpdate(c, ...)
{
	if(!Raktar[c][rNeedUpdate])
		Raktar[c][rNeedUpdate] = true;

	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == RAKTAR_Pos) RaktarUpdates[c][rPos] = true;
		else if(val == RAKTAR_Tulaj) RaktarUpdates[c][rTulaj] = true;
		else if(val == RAKTAR_Jelszo) RaktarUpdates[c][rJelszo] = true;
		else if(val == RAKTAR_Ar) RaktarUpdates[c][rAr] = true;
		else if(val == RAKTAR_Drog) RaktarUpdates[c][rDrog] = true;
		else if(val == RAKTAR_Mati) RaktarUpdates[c][rMati] = true;
		else if(val == RAKTAR_Penz) RaktarUpdates[c][rPenz] = true;
		else if(val == RAKTAR_Fegyver) RaktarUpdates[c][rFegyver] = true;
		else if(val == RAKTAR_Loszer) RaktarUpdates[c][rLoszer] = true;
	}
	Updater(6);
}
fuggveny FrakcioUpdate(c, ...)
{
	if(!FrakcioInfo[c][fNeedUpdate])
		FrakcioInfo[c][fNeedUpdate] = true;

	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == FRAKCIO_Cuccok) FrakcioUpdates[c][fCuccok] = true;
		else if(val == FRAKCIO_PosX) FrakcioUpdates[c][fPosX] = true;
		else if(val == FRAKCIO_PosY) FrakcioUpdates[c][fPosY] = true;
		else if(val == FRAKCIO_PosZ) FrakcioUpdates[c][fPosZ] = true;
		else if(val == FRAKCIO_PosA) FrakcioUpdates[c][fPosA] = true;
		else if(val == FRAKCIO_Object) FrakcioUpdates[c][fObject] = true;
		else if(val == FRAKCIO_Nev) FrakcioUpdates[c][fNev] = true;
		else if(val == FRAKCIO_Fegyverek) FrakcioUpdates[c][fFegyver] = true;
		else if(val == FRAKCIO_UtolsoTamadas) FrakcioUpdates[c][fUtolsoTamadas] = true;
		else if(val == FRAKCIO_Fizetes) FrakcioUpdates[c][fFizetes] = true;
		else if(val == FRAKCIO_Szovetseg) FrakcioUpdates[c][fSzovetseg] = true;
		else if(val == FRAKCIO_Raktar_Fegyver) FrakcioUpdates[c][fRaktarFegyver] = true;
		else if(val == FRAKCIO_Raktar_Loszer) FrakcioUpdates[c][fRaktarLoszer] = true;
		else if(val == FRAKCIO_Raktar_Melleny) FrakcioUpdates[c][fRaktarMelleny] = true;
		else if(val == FRAKCIO_MinRang) FrakcioUpdates[c][fMinRang] = true;
		else if(val == FRAKCIO_Jelado) FrakcioUpdates[c][fJelado] = true;
		else if(val == FRAKCIO_Gyemant){ FrakcioUpdates[c][fGyemant] = true; FrakcioUpdates[c][fGyemantPW] = true; }
		else if(val == FRAKCIO_Jelszo) FrakcioUpdates[c][fJelszoUpDate] = true;
		else if(val == FRAKCIO_Limit) FrakcioUpdates[c][fLimit] = true;
		else if(val == FRAKCIO_Rangok) FrakcioUpdates[c][fRangok] = true;
	}
	Updater(5);
}


fuggveny GazdasagMentes(c, ...)
{
	if(!Gazdasag[c][fNeedUpdate])
		Gazdasag[c][fNeedUpdate] = true;

	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == GAZDASAG_Buza) GazdasagUpdate[c][fBuza] = true;
		else if(val == GAZDASAG_Liszt) GazdasagUpdate[c][fLiszt] = true;
		else if(val == GAZDASAG_Tej) GazdasagUpdate[c][fTej] = true;
		else if(val == GAZDASAG_Szalma) GazdasagUpdate[c][fSzalma] = true;
		else if(val == GAZDASAG_Alma) GazdasagUpdate[c][fAlma] = true;
	}
	Updater(7);
}

fuggveny CarUpdate(c, ...)
{
	if(!CarInfo[c][cNeedUpdate])
		CarInfo[c][cNeedUpdate] = true;
	
	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == CAR_Owned) CarUpdates[c][cOwned] = true;
		else if(val == CAR_Owner) CarUpdates[c][cOwner] = true;
		else if(val == CAR_Model) CarUpdates[c][cModel] = true;
		else if(val == CAR_X) CarUpdates[c][cLocationx] = true;
		else if(val == CAR_Y) CarUpdates[c][cLocationy] = true;
		else if(val == CAR_Z) CarUpdates[c][cLocationz] = true;
		else if(val == CAR_Angle) CarUpdates[c][cAngle] = true;
		else if(val == CAR_ColorOne) CarUpdates[c][cColorOne] = true;
		else if(val == CAR_ColorTwo) CarUpdates[c][cColorTwo] = true;
		else if(val == CAR_Value) CarUpdates[c][cValue] = true;
		else if(val == CAR_Lock) CarUpdates[c][cLock] = true;
		else if(val == CAR_Date) CarUpdates[c][cDate] = true;
		else if(val == CAR_Painted) CarUpdates[c][cPainted] = true;
		else if(val == CAR_Tuning) CarUpdates[c][cMod] = true;
		else if(val == CAR_Kerek) CarUpdates[c][cKerek] = true;
		else if(val == CAR_Matrica) CarUpdates[c][cMatrica] = true;
		else if(val == CAR_Neon) CarUpdates[c][cNeon] = true;
		#if defined FRAKCIOKOCSIK
			else if(val == CAR_Frakcio) CarUpdates[c][cFrakcio] = true;
		#endif
		else if(val == CAR_BRendszer) CarUpdates[c][cBRendszer] = true;
		else if(val == CAR_BRendszerKod) CarUpdates[c][cBRendszerKod] = true;
		else if(val == CAR_BRendszerAktiv) CarUpdates[c][cBRendszerAktiv] = true;
		else if(val == CAR_Dimenzio) CarUpdates[c][cDimenzio] = true;
		else if(val == CAR_PotKerek) CarUpdates[c][cPotKerek] = true;
		else if(val == CAR_MegtettKM) CarUpdates[c][cMegtettKM] = true;
		else if(val == CAR_Hidraulika) CarUpdates[c][cHidraulika] = true;
		else if(val == CAR_MinRang) CarUpdates[c][cMinRang] = true;
		else if(val == CAR_Muszaki) CarUpdates[c][cMuszaki] = true;
		else if(val == CAR_EMP) CarUpdates[c][cEMP] = true;
		else if(val == CAR_Regisztracio) CarUpdates[c][cRegisztracio] = true;
		//else if(val == CAR_) CarUpdates[x][c] = true;
	}
	Updater(3);
}

fuggveny BizUpdate(c, ...)
{
	return 1;
}

fuggveny HazUpdate(c, ...)
{
	if(!HouseInfo[c][hNeedUpdate])
		HouseInfo[c][hNeedUpdate] = true;
		
	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == HAZ_Owned) HouseUpdates[c][hOwned] = true;
		else if(val == HAZ_Owner) HouseUpdates[c][hOwner] = true;
		else if(val == HAZ_X) HouseUpdates[c][hEntrancex] = true;
		else if(val == HAZ_Y) HouseUpdates[c][hEntrancey] = true;
		else if(val == HAZ_Z) HouseUpdates[c][hEntrancez] = true;
		else if(val == HAZ_Belso) HouseUpdates[c][hBelso] = true;
		else if(val == HAZ_Health) HouseUpdates[c][hHealth] = true;
		else if(val == HAZ_Armour) HouseUpdates[c][hArmour] = true;
		else if(val == HAZ_Value) HouseUpdates[c][hValue] = true;
		else if(val == HAZ_Hel) HouseUpdates[c][hHel] = true;
		else if(val == HAZ_Arm) HouseUpdates[c][hArm] = true;
		else if(val == HAZ_Lock) HouseUpdates[c][hLock] = true;
		else if(val == HAZ_Rooms) HouseUpdates[c][hRooms] = true;
		else if(val == HAZ_Rent) HouseUpdates[c][hRent] = true;
		else if(val == HAZ_Rentabil) HouseUpdates[c][hRentabil] = true;
		else if(val == HAZ_Takings) HouseUpdates[c][hTakings] = true;
		else if(val == HAZ_Date) HouseUpdates[c][hDate] = true;
		else if(val == HAZ_Csak) HouseUpdates[c][hCsak] = true;
		else if(val == HAZ_Csakneki) HouseUpdates[c][hCsakneki] = true;
		else if(val == HAZ_Kaja) HouseUpdates[c][hKaja] = true;
		else if(val == HAZ_Cigi) HouseUpdates[c][hCigi] = true;
		else if(val == HAZ_Kokain) HouseUpdates[c][hKokain] = true;
		else if(val == HAZ_Heroin) HouseUpdates[c][hHeroin] = true;
		else if(val == HAZ_Marihuana) HouseUpdates[c][hMarihuana] = true;
		else if(val == HAZ_Mati) HouseUpdates[c][hMati] = true;
		else if(val == HAZ_Tipus) HouseUpdates[c][hTipus] = true;
		else if(val == HAZ_Fegyverek) HouseUpdates[c][hFegyverek] = true;
		else if(val == HAZ_Mellenyek) HouseUpdates[c][hMellenyek] = true;
        else if(val == HAZ_Villany) HouseUpdates[c][hVillanyFizetve] = true;
		else if(val == HAZ_Drog) HouseUpdates[c][hDrog] = true;
		else if(val == HAZ_Garazs) HouseUpdates[c][hGarazs] = true;
		else if(val == HAZ_Gyogyszer) HouseUpdates[c][hGyogyszer] = true;
		else if(val == HAZ_Szef) HouseUpdates[c][hSzef] = true;
		//else if(val == HAZ_) HouseUpdates[c][h] = true;
	}
	Updater(1);
}


fuggveny HotelUpdate(c, ...)
{
	if(!HotelInfo[c][hNeedUpdate])
		HotelInfo[c][hNeedUpdate] = true;
		
	new a = numargs(), val;
	for(new x = 0; x < a; x++)
	{
		val = getarg(x);
		if(val == HOTEL_Eladva) HotelUpdates[c][hEladva] = true;
		else if(val == HOTEL_Tulaj) HotelUpdates[c][hTulaj] = true;
		else if(val == HOTEL_X) HotelUpdates[c][hEntranceX] = true;
		else if(val == HOTEL_Y) HotelUpdates[c][hEntranceY] = true;
		else if(val == HOTEL_Z) HotelUpdates[c][hEntranceZ] = true;
		else if(val == HOTEL_Belso) HotelUpdates[c][hBelso] = true;
		else if(val == HOTEL_Hel) HotelUpdates[c][hHel] = true;
		else if(val == HOTEL_Arm) HotelUpdates[c][hArm] = true;
		else if(val == HOTEL_Zarva) HotelUpdates[c][hZarva] = true;
		else if(val == HOTEL_Ara) HotelUpdates[c][hAra] = true;
		else if(val == HOTEL_Penz) HotelUpdates[c][hPenz] = true;
		else if(val == HOTEL_Date) HotelUpdates[c][hDate] = true;
		else if(val == HOTEL_Kaja) HotelUpdates[c][hKaja] = true;
		else if(val == HOTEL_Cigi) HotelUpdates[c][hCigi] = true;
		else if(val == HOTEL_Kokain) HotelUpdates[c][hKokain] = true;
		else if(val == HOTEL_Heroin) HotelUpdates[c][hHeroin] = true;
		else if(val == HOTEL_Marihuana) HotelUpdates[c][hMarihuana] = true;
		else if(val == HOTEL_Mati) HotelUpdates[c][hMati] = true;
		else if(val == HOTEL_Fegyverek) HotelUpdates[c][hFegyverek] = true;
		else if(val == HOTEL_Mellenyek) HotelUpdates[c][hMellenyek] = true;
		else if(val == HOTEL_Gyogyszer) HotelUpdates[c][hGyogyszer] = true;
		else if(val == HOTEL_Ruha) HotelUpdates[c][hRuha] = true;
		//else if(val == HAZ_) HouseUpdates[c][h] = true;
	}
	Updater(9);
}

public MySQLUpdater()
{
	new darab, x;
	for(x = 0; x < MAXHAZ; x++)
	{
		if(HouseInfo[x][hNeedUpdate])
			darab++;
	}
	if(darab > 0) Updater(1);

	darab = 0;
	for(x = 0; x < MAXVSKOCSI; x++)
	{
		if(CarInfo[x][cNeedUpdate])
			darab++; 
	}
	if(darab > 0) Updater(3);
	
	for(new i = 0; i < MAX_BIZ; i++)
	{
		BizniszSQLUpdate(i);
	}
	
	darab = 0;
	for(x = 0; x < MAX_FRAKCIO; x++)
	{
		if(FrakcioInfo[x][fNeedUpdate])
			darab++;
	}
	if(darab > 0) Updater(5);

	darab = 0;
	for(x = 0; x < MAXHOTEL; x++)
	{
		if(HotelInfo[x][hNeedUpdate])
			darab++;
	}
	if(darab > 0) Updater(8);
	
	CsomagTartoMentes();
	//KmMentes();
	SaveTek();
}

public Updater(type)
{
	new x, updated, folytat, query[MAX_MYSQL_STRING_UPDATER];
	if(type == 1)
	{
		if(UpdateFolytatodik[uHaz] != NINCS)
			folytat = UpdateFolytatodik[uHaz];

		for(x = folytat; x < MAXHAZ; x++)
		{
			if(!HouseInfo[x][hNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uHaz])
			{
				UpdateFolytatodik[uHaz] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}
			
			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Hazak);
		
			//if(HouseUpdate[x][h]) MysqlUpdateInt("", HouseInfo[x][h]);
			if(HouseUpdates[x][hOwned]) { MysqlUpdateInt(query, "Eladva", HouseInfo[x][hOwned]); HouseUpdates[x][hOwned] = false; }
			if(HouseUpdates[x][hOwner]) { MysqlUpdateStr(query, "Tulaj", HouseInfo[x][hOwner]); HouseUpdates[x][hOwner] = false; }
			if(HouseUpdates[x][hCsak]) { MysqlUpdateInt(query, "Csak", HouseInfo[x][hCsak]); HouseUpdates[x][hCsak] = false; }
			if(HouseUpdates[x][hCsakneki]) { MysqlUpdateInt(query, "Neki", HouseInfo[x][hCsakneki]); HouseUpdates[x][hCsakneki] = false; }
			if(HouseUpdates[x][hEntrancex]) { MysqlUpdateFlo(query, "X", HouseInfo[x][hEntrancex]); HouseUpdates[x][hEntrancex] = false; }
			if(HouseUpdates[x][hEntrancey]) { MysqlUpdateFlo(query, "Y", HouseInfo[x][hEntrancey]); HouseUpdates[x][hEntrancey] = false; }
			if(HouseUpdates[x][hEntrancez]) { MysqlUpdateFlo(query, "Z", HouseInfo[x][hEntrancez]); HouseUpdates[x][hEntrancez] = false; }
			if(HouseUpdates[x][hValue]) { MysqlUpdateInt(query, "Ara", HouseInfo[x][hValue]); HouseUpdates[x][hValue] = false; }
			if(HouseUpdates[x][hRentabil]) { MysqlUpdateInt(query, "Kiado", HouseInfo[x][hRentabil]); HouseUpdates[x][hRentabil] = false; }
			if(HouseUpdates[x][hRent]) { MysqlUpdateInt(query, "KAra", HouseInfo[x][hRent]); HouseUpdates[x][hRent] = false; }
			if(HouseUpdates[x][hBelso]) { MysqlUpdateInt(query, "Belso", HouseInfo[x][hBelso]); HouseUpdates[x][hBelso] = false; }
			if(HouseUpdates[x][hHel]) { MysqlUpdateInt(query, "Elet", HouseInfo[x][hHel]); HouseUpdates[x][hHel] = false; }
			if(HouseUpdates[x][hArm]) { MysqlUpdateInt(query, "Pajzs", HouseInfo[x][hArm]); HouseUpdates[x][hArm] = false; }
			if(HouseUpdates[x][hTakings]) { MysqlUpdateInt(query, "Penz", HouseInfo[x][hTakings]); HouseUpdates[x][hTakings] = false; }
			if(HouseUpdates[x][hCigi]) { MysqlUpdateInt(query, "Cigi", HouseInfo[x][hCigi]); HouseUpdates[x][hCigi] = false; }
			if(HouseUpdates[x][hKaja]) { MysqlUpdateInt(query, "Kaja", HouseInfo[x][hKaja]); HouseUpdates[x][hKaja] = false; }
			if(HouseUpdates[x][hKokain]) { MysqlUpdateInt(query, "Kokain", HouseInfo[x][hKokain]); HouseUpdates[x][hKokain] = false; }
			if(HouseUpdates[x][hHeroin]) { MysqlUpdateInt(query, "Heroin", HouseInfo[x][hHeroin]); HouseUpdates[x][hHeroin] = false; }
			if(HouseUpdates[x][hMarihuana]) { MysqlUpdateInt(query, "Marihuana", HouseInfo[x][hMarihuana]); HouseUpdates[x][hMarihuana] = false; }
			if(HouseUpdates[x][hMati]) { MysqlUpdateInt(query, "Material", HouseInfo[x][hMati]); HouseUpdates[x][hMati] = false; }
			if(HouseUpdates[x][hLock]) { MysqlUpdateInt(query, "Zarva", HouseInfo[x][hLock]); HouseUpdates[x][hLock] = false; }
			if(HouseUpdates[x][hDate]) { MysqlUpdateInt(query, "UtolsoBelepes", HouseInfo[x][hDate]); HouseUpdates[x][hDate] = false; }
			if(HouseUpdates[x][hTipus]) { MysqlUpdateInt(query, "Tipus", HouseInfo[x][hTipus]); HouseUpdates[x][hTipus] = false; }
			
			if(HouseUpdates[x][hFegyverek]) {
				new cuccok[90], z;
				format(cuccok, 90, "%d", HouseInfo[x][hFegyverek][0]);
				for(z = 1; z < 10; z++) format(cuccok, 90, "%s,%d", cuccok, HouseInfo[x][hFegyverek][z]); MysqlUpdateStr(query, "Fegyverek", cuccok); format(cuccok, 90, "%d", HouseInfo[x][hToltenyek][0]);
				for(z = 1; z < 10; z++) format(cuccok, 90, "%s,%d", cuccok, HouseInfo[x][hToltenyek][z]); MysqlUpdateStr(query, "Toltenyek", cuccok);
				HouseUpdates[x][hFegyverek] = false;
			}
			if(HouseUpdates[x][hMellenyek]) 
			{
				new cuccok[90], z;
				format(cuccok, 90, "%d", HouseInfo[x][hMellenyek][0]);
				for(z = 1; z < 10; z++)
					format(cuccok, 90, "%s,%d", cuccok, HouseInfo[x][hMellenyek][z]);
				MysqlUpdateStr(query, "Mellenyek", cuccok); 
				HouseUpdates[x][hMellenyek] = false;
			}
			if(HouseUpdates[x][hVillanyFizetve])
			{
			    new adatok[64];
			    Format(adatok, "%d,%d,%d",HouseInfo[x][hVillanyFizetve],HouseInfo[x][hVillanySzamla], HouseInfo[x][hLekapcsolva]);
				MysqlUpdateStr(query, "VillanySzamla", adatok);
				HouseUpdates[x][hTipus] = false;
			}
			if(HouseUpdates[x][hDrog]) 
			{ 
				MysqlUpdateInt(query, "Drog", HouseInfo[x][hDrog]); 
				HouseUpdates[x][hDrog] = false; 
			}
			if(HouseUpdates[x][hGarazs]) 
			{ 
				new GarazsPozStr[64];
				Format(GarazsPozStr, "%.3f, %.3f, %.3f, %.3f",HouseInfo[x][hGarazsPoz][0],HouseInfo[x][hGarazsPoz][1],HouseInfo[x][hGarazsPoz][2], HouseInfo[x][hGarazsPoz][3]);
				MysqlUpdateStr(query, "GarazsPos", GarazsPozStr); 
				MysqlUpdateInt(query, "Garazs", HouseInfo[x][hGarazs]); 
				HouseUpdates[x][hGarazs] = false; 
			}
			if(HouseUpdates[x][hGyogyszer]) { MysqlUpdateInt(query, "Gyogyszer", HouseInfo[x][hGyogyszer]); HouseUpdates[x][hGyogyszer] = false; }
   			if(HouseUpdates[x][hSzef])
			{
				MysqlUpdateInt(query, "Szef", HouseInfo[x][hSzef]);
				HouseUpdates[x][hSzef] = false;
			}
			MysqlFinalUpdate(query, x);
			
			HouseInfo[x][hNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uHaz])
			UpdateFolytatodik[uHaz] = NINCS;
	}
	if(type == 2)
	{
		/*if(UpdateFolytatodik[uBiz] != NINCS)
			folytat = UpdateFolytatodik[uBiz];

		for(x = folytat; x < MAXBIZ; x++)
		{
			if(!BizzInfo[x][bNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uBiz])
			{
				UpdateFolytatodik[uBiz] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}
			
			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Bizek);
		
			//if(BizzUpdates[x][b]) MysqlUpdateInt("", BizzInfo[x][b]);
			if(BizzUpdates[x][bMessage]) { MysqlUpdateStr(query, "Nev", BizzInfo[x][bMessage]); BizzUpdates[x][bMessage] = false; }
			if(BizzUpdates[x][bOwned]) { MysqlUpdateInt(query, "Eladva", BizzInfo[x][bOwned]); BizzUpdates[x][bOwned] = false; }
			if(BizzUpdates[x][bOwner]) { MysqlUpdateStr(query, "Tulaj", BizzInfo[x][bOwner]); BizzUpdates[x][bOwner] = false; }
			if(BizzUpdates[x][bExtortion]) { MysqlUpdateStr(query, "Extortion", BizzInfo[x][bExtortion]); BizzUpdates[x][bExtortion] = false; }
			if(BizzUpdates[x][bEntranceX]) { MysqlUpdateFlo(query, "BeX", BizzInfo[x][bEntranceX]); BizzUpdates[x][bEntranceX] = false; }
			if(BizzUpdates[x][bEntranceY]) { MysqlUpdateFlo(query, "BeY", BizzInfo[x][bEntranceY]); BizzUpdates[x][bEntranceY] = false; }
			if(BizzUpdates[x][bEntranceZ]) { MysqlUpdateFlo(query, "BeZ", BizzInfo[x][bEntranceZ]); BizzUpdates[x][bEntranceZ] = false; }
			if(BizzUpdates[x][bExitX]) { MysqlUpdateFlo(query, "KiX", BizzInfo[x][bExitX]); BizzUpdates[x][bExitX] = false; }
			if(BizzUpdates[x][bExitY]) { MysqlUpdateFlo(query, "KiY", BizzInfo[x][bExitY]); BizzUpdates[x][bExitY] = false; }
			if(BizzUpdates[x][bExitZ]) { MysqlUpdateFlo(query, "KiZ", BizzInfo[x][bExitZ]); BizzUpdates[x][bExitZ] = false; }
			if(BizzUpdates[x][bLevelNeeded]) { MysqlUpdateInt(query, "Szint", BizzInfo[x][bLevelNeeded]); BizzUpdates[x][bLevelNeeded] = false; }
			if(BizzUpdates[x][bBuyPrice]) { MysqlUpdateInt(query, "Ara", BizzInfo[x][bBuyPrice]); BizzUpdates[x][bBuyPrice] = false; }
			if(BizzUpdates[x][bEntranceCost]) { MysqlUpdateInt(query, "BelepesAra", BizzInfo[x][bEntranceCost]); BizzUpdates[x][bEntranceCost] = false; }
			if(BizzUpdates[x][bTill]) { MysqlUpdateInt(query, "Kassza", BizzInfo[x][bTill]); BizzUpdates[x][bTill] = false; }
			if(BizzUpdates[x][bLocked]) { MysqlUpdateInt(query, "Zarva", BizzInfo[x][bLocked]); BizzUpdates[x][bLocked] = false; }
			if(BizzUpdates[x][bInterior]) { MysqlUpdateInt(query, "Interior", BizzInfo[x][bInterior]); BizzUpdates[x][bInterior] = false; }
			if(BizzUpdates[x][bVanBelso]) { MysqlUpdateInt(query, "VanBelso", BizzInfo[x][bVanBelso]); BizzUpdates[x][bVanBelso] = false; }
			if(BizzUpdates[x][bProducts]) { MysqlUpdateInt(query, "Prod", BizzInfo[x][bProducts]); BizzUpdates[x][bProducts] = false; }
			if(BizzUpdates[x][bMaxProducts]) { MysqlUpdateInt(query, "MaxProd", BizzInfo[x][bMaxProducts]); BizzUpdates[x][bMaxProducts] = false; }
			if(BizzUpdates[x][bPriceProd]) { MysqlUpdateInt(query, "ProdPrice", BizzInfo[x][bPriceProd]); BizzUpdates[x][bPriceProd] = false; }

			MysqlFinalUpdate(query, x);
			
			BizzInfo[x][bNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uBiz])
			UpdateFolytatodik[uBiz] = NINCS;*/
	}
	if(type == 3)
	{
		if(UpdateFolytatodik[uKocsi] != NINCS)
			folytat = UpdateFolytatodik[uKocsi];

		for(x = folytat; x < MAXVSKOCSI; x++)
		{
			if(!CarInfo[x][cNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uKocsi])
			{
				UpdateFolytatodik[uKocsi] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}
			
			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Kocsik);

			//if(CarUpdates[x][c]) MysqlUpdateInt("", CarInfo[x][c]);
			if(CarUpdates[x][cOwned]) { MysqlUpdateInt(query, "Eladva", CarInfo[x][cOwned]); CarUpdates[x][cOwned] = false; }
			if(CarUpdates[x][cOwner]) { MysqlUpdateStr(query, "Tulaj", CarInfo[x][cOwner]); CarUpdates[x][cOwner] = false; }
			if(CarUpdates[x][cModel]) { MysqlUpdateInt(query, "Model", CarInfo[x][cModel]); CarUpdates[x][cModel] = false; }
			if(CarUpdates[x][cValue]) { MysqlUpdateInt(query, "Ara", CarInfo[x][cValue]); CarUpdates[x][cValue] = false; }
			if(CarUpdates[x][cLocationx]) { MysqlUpdateFlo(query, "LocX", CarInfo[x][cLocationx]); CarUpdates[x][cLocationx] = false; }
			if(CarUpdates[x][cLocationy]) { MysqlUpdateFlo(query, "LocY", CarInfo[x][cLocationy]); CarUpdates[x][cLocationy] = false; }
			if(CarUpdates[x][cLocationz]) { MysqlUpdateFlo(query, "LocZ", CarInfo[x][cLocationz]); CarUpdates[x][cLocationz] = false; }
			if(CarUpdates[x][cAngle]) { MysqlUpdateFlo(query, "Angle", CarInfo[x][cAngle]); CarUpdates[x][cAngle] = false; }
			if(CarUpdates[x][cColorOne]) { MysqlUpdateInt(query, "Szin1", CarInfo[x][cColorOne]); CarUpdates[x][cColorOne] = false; }
			if(CarUpdates[x][cColorTwo]) { MysqlUpdateInt(query, "Szin2", CarInfo[x][cColorTwo]); CarUpdates[x][cColorTwo] = false; }
			if(CarUpdates[x][cLock]) { MysqlUpdateInt(query, "Zarva", CarInfo[x][cLock]); CarUpdates[x][cLock] = false; }
			if(CarUpdates[x][cDate]) { MysqlUpdateInt(query, "UtolsoBelepes", CarInfo[x][cDate]); CarUpdates[x][cDate] = false; }
			if(CarUpdates[x][cMod])
			{
			    new tuning[128],tuning2[24];
				for(new i=0; i < 14; i++)
				{
					if(i == 13)
						Format(tuning2, "%d",CarInfo[x][cMod][i]);
					else
						Format(tuning2, "%d, ",CarInfo[x][cMod][i]);

					strcat(tuning,tuning2,128);
				}
				MysqlUpdateStr(query, "Tuning",tuning);
				CarUpdates[x][cMod] = false;
			}
			if(CarUpdates[x][cKerek]) { MysqlUpdateInt(query, "Kerek", CarInfo[x][cKerek]); CarUpdates[x][cKerek] = false; }
			if(CarUpdates[x][cMatrica]) { MysqlUpdateInt(query, "Matrica", CarInfo[x][cMatrica]); CarUpdates[x][cMatrica] = false; }
			if(CarUpdates[x][cNeon]) { MysqlUpdateInt(query, "Neon", CarInfo[x][cNeon]); CarUpdates[x][cNeon] = false; }
			#if defined FRAKCIOKOCSIK
			if(CarUpdates[x][cFrakcio]) { MysqlUpdateInt(query, "Frakcio", CarInfo[x][cFrakcio]); CarUpdates[x][cFrakcio] = false; }
			#endif
			if(CarUpdates[x][cBRendszer]) { MysqlUpdateInt(query, "BRendszer", CarInfo[x][cBRendszer]); CarUpdates[x][cBRendszer] = false; }
			if(CarUpdates[x][cBRendszerKod]) { MysqlUpdateInt(query, "BRendszerKod", CarInfo[x][cBRendszerKod]); CarUpdates[x][cBRendszerKod] = false; }
			if(CarUpdates[x][cBRendszerAktiv]) { MysqlUpdateInt(query, "BRendszerAktiv", CarInfo[x][cBRendszerAktiv]); CarUpdates[x][cBRendszerAktiv] = false; }
			if(CarUpdates[x][cDimenzio])
			{
				new Dimenzio[64];
				Format(Dimenzio, "%d,%d",CarInfo[x][cDimenzio][0],CarInfo[x][cDimenzio][1]);
				MysqlUpdateStr(query, "Dimenzio",Dimenzio);
				CarUpdates[x][cDimenzio] = false;
			}
			if(CarUpdates[x][cPotKerek])
			{
				MysqlUpdateInt(query, "Potkerek", CarInfo[x][cPotKerek]);
				CarUpdates[x][cPotKerek] = false;
			}
			if(CarUpdates[x][cMegtettKM])
			{
			    MysqlUpdateInt(query, "MegtettKM", CarInfo[x][cMegtettKM]);
				CarUpdates[x][cMegtettKM] = false;
			}
			if(CarUpdates[x][cHidraulika])
			{
			    MysqlUpdateInt(query, "Hidraulika", CarInfo[x][cHidraulika]);
				CarUpdates[x][cHidraulika] = false;
			}
			if(CarUpdates[x][cMinRang])
			{
			    MysqlUpdateInt(query, "MinRang", CarInfo[x][cMinRang]);
				CarUpdates[x][cMinRang] = false;
			}
			if(CarUpdates[x][cMuszaki])
			{
			    new Muszaki[128];
			    Format(Muszaki, "%d",CarInfo[x][cMuszakiIdo]);
			    MysqlUpdateStr(query, "Muszaki",Muszaki);
			    CarUpdates[x][cMuszaki] = false;
			}
			if(CarUpdates[x][cAllapot])
			{
			    new allapot[128],allapot2[24];
				for(new i=0; i < ALLAPOTOK; i++)
				{
					if(i == ALLAPOTOK-1)
						Format(allapot2, "%d",CarInfo[x][cAllapot][i]);
					else
						Format(allapot2, "%d, ",CarInfo[x][cAllapot][i]);

					strcat(allapot,allapot2,128);
				}
			    MysqlUpdateStr(query, "Allapot",allapot);
                CarUpdates[x][cAllapot] = false;
			}
			if(CarUpdates[x][cEMP])
			{
			    MysqlUpdateInt(query, "EMP", CarInfo[x][cEMP]);
				CarUpdates[x][cEMP] = false;
			}
			if(CarUpdates[x][cRegisztracio])
			{
			    new registr[32];
			    Format(registr, "%s,%d",CarInfo[x][cRendszam],CarInfo[x][cRegisztralva]);
			    MysqlUpdateStr(query, "Regisztracio",registr);
				CarUpdates[x][cRegisztracio] = false;
			}
			MysqlFinalUpdate(query, x);
			
			CarInfo[x][cNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uKocsi])
			UpdateFolytatodik[uKocsi] = NINCS;
	}
	if(type == 5)
	{
		if(UpdateFolytatodik[uFrakcio] != NINCS)
			folytat = UpdateFolytatodik[uFrakcio];

		for(x = folytat; x < MAX_FRAKCIO; x++)
		{
			if(!FrakcioInfo[x][fNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uFrakcio])
			{
				UpdateFolytatodik[uFrakcio] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}

			format(query, sizeof(query), "UPDATE frakciok SET ");

			if(FrakcioUpdates[x][fCuccok])
			{
			    new Cuccok[128];
			    Format(Cuccok, "%d,%d,%d,%d,%d,%d",FrakcioInfo[x][fPenz],FrakcioInfo[x][fMati],FrakcioInfo[x][fHeroin],FrakcioInfo[x][fKokain],FrakcioInfo[x][fMarihuana],FrakcioInfo[x][fKaja]);
				MysqlUpdateStr(query, "Cuccok", Cuccok);
				FrakcioUpdates[x][fCuccok] = false;
			}
			if(FrakcioUpdates[x][fPosX]) { MysqlUpdateFlo(query, "PosX", FrakcioInfo[x][fPosX]); FrakcioUpdates[x][fPosX] = false; }
			if(FrakcioUpdates[x][fPosY]) { MysqlUpdateFlo(query, "PosY", FrakcioInfo[x][fPosY]); FrakcioUpdates[x][fPosY] = false; }
			if(FrakcioUpdates[x][fPosZ]) { MysqlUpdateFlo(query, "PosZ", FrakcioInfo[x][fPosZ]); FrakcioUpdates[x][fPosZ] = false; }
			if(FrakcioUpdates[x][fPosA]) { MysqlUpdateFlo(query, "PosA", FrakcioInfo[x][fPosA]); FrakcioUpdates[x][fPosA] = false; }
			if(FrakcioUpdates[x][fObject]) { MysqlUpdateInt(query, "Object", FrakcioInfo[x][fObject]); FrakcioUpdates[x][fObject] = false; }
			//if(FrakcioUpdates[x][fNev]) { MysqlUpdateInt(query, "ObjectID", FrakcioInfo[x][fNev]); FrakcioUpdates[x][fNev] = false; }
			if(FrakcioUpdates[x][fFegyver])
			{
			    new Fegyverek[128];
			    Format(Fegyverek, "%d,%d,%d,%d,%d,%d,%d",FrakcioInfo[x][fCombat],FrakcioInfo[x][fSniper],FrakcioInfo[x][fDeagle],FrakcioInfo[x][fSilenced],FrakcioInfo[x][fMp5],FrakcioInfo[x][fM4],FrakcioInfo[x][fShotgun]);
				MysqlUpdateStr(query, "Fegyverek", Fegyverek);
				FrakcioUpdates[x][fFegyver] = false;
			}
			if(FrakcioUpdates[x][fUtolsoTamadas]) { MysqlUpdateInt(query, "UtolsoTamadas", FrakcioInfo[x][fUtolsoTamadas]); FrakcioUpdates[x][fUtolsoTamadas] = false; }
			if(FrakcioUpdates[x][fFizetes])
			{
			    new fizu[512], fizu2[102];
				for(new i=0; i < (MAX_FRAKCIO_RANG+1); i++)
				{
					if(i == MAX_FRAKCIO_RANG+1) {
						Format(fizu2, "%d",FrakcioInfo[x][fFizetes][i]);
					} else {
						Format(fizu2, "%d, ",FrakcioInfo[x][fFizetes][i]);
					}
					strcat(fizu, fizu2, 512);
				}
				MysqlUpdateStr(query, "Fizetesek",fizu);
				FrakcioUpdates[x][fFizetes] = false;
			}
			if(FrakcioUpdates[x][fJelszoUpDate]) { MysqlUpdateStr(query, "Jelszo", FrakcioInfo[x][fJelszo]); FrakcioUpdates[x][fJelszoUpDate] = false; }
			if(FrakcioUpdates[x][fSzovetseg])
			{
				new szovi[128],szovi2[24];
				for(new i=1; i < MAX_FRAKCIO; i++)
				{
					if(i == MAX_FRAKCIO-1) {
						Format(szovi2, "%d",FrakcioInfo[x][fSzovetseges][i]);
					} else {
						Format(szovi2, "%d, ",FrakcioInfo[x][fSzovetseges][i]);
					}
					strcat(szovi,szovi2, 128);
				}
				MysqlUpdateStr(query, "Szovetsegesek", szovi);
				FrakcioUpdates[x][fSzovetseg] = false;
			}
            if(FrakcioUpdates[x][fMinRang])
			{
				MysqlUpdateInt(query, "MinRang", FrakcioInfo[x][fMinrang]);
				FrakcioUpdates[x][fMinRang] = false;
			}
			if(FrakcioUpdates[x][fRaktarFegyver])
			{
				new fegyo[256], fegyostrcat[24];
				for(new i=0; i < FEGYVERRAKTAR_SLOT; i++)
				{
					if(i == 50)
						Format(fegyostrcat, "%d",FrakcioInfo[x][fFegyver][i]);
					else
						Format(fegyostrcat, "%d, ",FrakcioInfo[x][fFegyver][i]);
					
					strcat(fegyo,fegyostrcat,128);
				}
				MysqlUpdateStr(query, "Raktar_Fegyver",fegyo);
				FrakcioUpdates[x][fRaktarFegyver] = false;
			}
			if(FrakcioUpdates[x][fRaktarLoszer])
			{
				new loszer[256], loszerstrcat[24];
				for(new i=0; i < FEGYVERRAKTAR_SLOT; i++)
				{
					if(i == FEGYVERRAKTAR_SLOT-1)
						Format(loszerstrcat, "%d",FrakcioInfo[x][fTolteny][i]);
					else
						Format(loszerstrcat, "%d, ",FrakcioInfo[x][fTolteny][i]);
					
					strcat(loszer,loszerstrcat,128);
				}
				MysqlUpdateStr(query, "Raktar_Loszer",loszer);
				FrakcioUpdates[x][fRaktarLoszer] = false;
			}
			if(FrakcioUpdates[x][fRaktarMelleny])
			{
				new melleny[256], mellenystrcat[24];
				for(new i=0; i < FEGYVERRAKTAR_SLOT; i++)
				{
					if(i == FEGYVERRAKTAR_SLOT-1)
						Format(mellenystrcat, "%d",FrakcioInfo[x][fMelleny][i]);
					else
						Format(mellenystrcat, "%d, ",FrakcioInfo[x][fMelleny][i]);
					
					strcat(melleny,mellenystrcat,128);
				}
				MysqlUpdateStr(query, "Raktar_Melleny",melleny);
				
				FrakcioUpdates[x][fRaktarMelleny] = false;
			}
			if(FrakcioUpdates[x][fJelado])
			{
				MysqlUpdateInt(query, "Jelado", FrakcioInfo[x][fJelado]);
				new jeladopos[128];
				Format(jeladopos, "%.3f,%.3f,%.3f,%.3f",FrakcioInfo[x][fJeladoPos][0],FrakcioInfo[x][fJeladoPos][1],FrakcioInfo[x][fJeladoPos][2],FrakcioInfo[x][fJeladoPos][3]);
				MysqlUpdateStr(query, "JeladoPos", jeladopos);
				MysqlUpdateInt(query, "JelErosito", FrakcioInfo[x][fJelErosito]);
				
				FrakcioUpdates[x][fJelado] = false;
			}
			if(FrakcioUpdates[x][fGyemant])
			{
				MysqlUpdateInt(query, "Gyemant", FrakcioInfo[x][fGyemant]);
				FrakcioUpdates[x][fGyemant] = false;
			}
			if(FrakcioUpdates[x][fGyemantPW])
			{
				MysqlUpdateStr(query, "GyemantPW", FrakcioInfo[x][fGyemantPW]);
				FrakcioUpdates[x][fGyemantPW] = false;
			}
			
			if(FrakcioUpdates[x][fLimit]) { MysqlUpdateInt(query, "FrakcioLimit", FrakcioInfo[x][fLimit]); FrakcioUpdates[x][fLimit] = false; }
			
			if(FrakcioUpdates[x][fRangok])
			{
				new osszrang[512];
				
				//format(osszrang, 512, "%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s",
				format(osszrang, 512, "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s", /* nem szabad, hogy legyen szóköz különben azt is a rang nevéhez veszi! */
				FrakcioRangInfo[x][0][rNev], FrakcioRangInfo[x][1][rNev], FrakcioRangInfo[x][2][rNev],
				FrakcioRangInfo[x][3][rNev], FrakcioRangInfo[x][4][rNev], FrakcioRangInfo[x][5][rNev],
				FrakcioRangInfo[x][6][rNev], FrakcioRangInfo[x][7][rNev], FrakcioRangInfo[x][8][rNev],
				FrakcioRangInfo[x][9][rNev], FrakcioRangInfo[x][10][rNev], FrakcioRangInfo[x][11][rNev],
				FrakcioRangInfo[x][12][rNev], FrakcioRangInfo[x][13][rNev], FrakcioRangInfo[x][14][rNev],
				FrakcioRangInfo[x][15][rNev]);
				
				MysqlUpdateStr(query, "Rangok", osszrang);
				
				FrakcioUpdates[x][fRangok] = false;				
			}
			
			if(FrakcioUpdates[x][fNev]) { MysqlUpdateStr(query, "FrakcioNev", Szervezetneve[x-1][0]); FrakcioUpdates[x][fNev] = false; }
			
			MysqlFinalUpdate(query, x);

			FrakcioInfo[x][fNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uFrakcio])
			UpdateFolytatodik[uFrakcio] = NINCS;
	}
	if(type == 6)
	{
		if(UpdateFolytatodik[uRaktar] != NINCS)
			folytat = UpdateFolytatodik[uRaktar];

		for(x = folytat; x < MAX_RAKTAR; x++)
		{
			if(!Raktar[x][rNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uRaktar])
			{
				UpdateFolytatodik[uRaktar] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}

			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Raktar);

			//if(RaktarUpdates[x][t]) { MysqlUpdateInt(query, "", Raktar[x][t]); RaktarUpdates[x][t] = false; }
			if(RaktarUpdates[x][rPos])
			{
				MysqlUpdateFlo(query, "Pos_X", Raktar[x][aPosX]);
				MysqlUpdateFlo(query, "Pos_Y", Raktar[x][aPosY]);
				MysqlUpdateFlo(query, "Pos_Z", Raktar[x][aPosZ]);
				RaktarUpdates[x][rPos] = false;
			}
			if(RaktarUpdates[x][rTulaj]){ MysqlUpdateStr(query, "Tulaj", Raktar[x][rTulaj]); RaktarUpdates[x][rTulaj] = false; }
            if(RaktarUpdates[x][rJelszo]){ MysqlUpdateStr(query, "Jelszo", Raktar[x][rJelszo]); RaktarUpdates[x][rJelszo] = false; }
            if(RaktarUpdates[x][rAr]){ MysqlUpdateInt(query, "Ara", Raktar[x][rAr]); RaktarUpdates[x][rAr] = false; }
            if(RaktarUpdates[x][rDrog])
			{
				MysqlUpdateInt(query, "Kokain", Raktar[x][rKokain]);
				MysqlUpdateInt(query, "Heroin", Raktar[x][rHeroin]);
				MysqlUpdateInt(query, "Marihuana", Raktar[x][rMarihuana]);
				RaktarUpdates[x][rDrog] = false;
			}
			if(RaktarUpdates[x][rMati]){ MysqlUpdateInt(query, "Mati", Raktar[x][rMati]); RaktarUpdates[x][rMati] = false; }
			if(RaktarUpdates[x][rPenz]){ MysqlUpdateInt(query, "Penz", Raktar[x][rPenz]); RaktarUpdates[x][rPenz] = false; }
			if(RaktarUpdates[x][rFegyver])
			{
				new fegyver[256], fegyverstrcat[24];
				for(new i=0; i < MAX_RAKTAR_FEGYVER; i++)
				{
					if(i == MAX_RAKTAR_FEGYVER-1)
						Format(fegyverstrcat, "%d",Raktar[x][rFegyver][i]);
					else
						Format(fegyverstrcat, "%d, ",Raktar[x][rFegyver][i]);

					strcat(fegyver,fegyverstrcat,256);
				}
				MysqlUpdateStr(query, "Fegyver",fegyver);
				RaktarUpdates[x][rFegyver] = false;
			}
			if(RaktarUpdates[x][rLoszer])
			{
				new loszer[256], loszerstrcat[24];
				for(new i=0; i < MAX_RAKTAR_FEGYVER; i++)
				{
					if(i == MAX_RAKTAR_FEGYVER-1)
						Format(loszerstrcat, "%d",Raktar[x][rLoszer][i]);
					else
						Format(loszerstrcat, "%d, ",Raktar[x][rLoszer][i]);

					strcat(loszer,loszerstrcat,256);
				}
				MysqlUpdateStr(query, "Loszer",loszer);
				RaktarUpdates[x][rLoszer] = false;
			}
			MysqlFinalUpdate(query, x);

			Raktar[x][rNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uRaktar])
			UpdateFolytatodik[uRaktar] = NINCS;
	}
	if(type == 7)
	{
		if(UpdateFolytatodik[uGazdasag] != NINCS)
			folytat = UpdateFolytatodik[uGazdasag];

		for(x = folytat; x < MAX_FARM; x++)
		{
			if(!Gazdasag[x][fNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uGazdasag])
			{
				UpdateFolytatodik[uGazdasag] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}

			format(query, sizeof(query), "UPDATE gazdasag SET ");

            if(GazdasagUpdate[x][fBuza]){ MysqlUpdateInt(query, "Buza", Gazdasag[x][fBuza]); GazdasagUpdate[x][fBuza] = false; }
			else if(GazdasagUpdate[x][fLiszt]){  MysqlUpdateInt(query, "Liszt", Gazdasag[x][fLiszt]); GazdasagUpdate[x][fLiszt] = false; }
			else if(GazdasagUpdate[x][fTej]){ MysqlUpdateInt(query, "Tej", Gazdasag[x][fTej]); GazdasagUpdate[x][fTej] = false; }
			else if(GazdasagUpdate[x][fSzalma]){ MysqlUpdateInt(query, "Szalma", Gazdasag[x][fSzalma]); GazdasagUpdate[x][fSzalma] = false; }
			else if(GazdasagUpdate[x][fAlma]){ MysqlUpdateInt(query, "Alma", Gazdasag[x][fAlma]); GazdasagUpdate[x][fAlma] = false; }
			
			MysqlFinalUpdate(query, x);

			Gazdasag[x][fNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uGazdasag])
			UpdateFolytatodik[uGazdasag] = NINCS;
	}
	if(type == 9)
	{
		if(UpdateFolytatodik[uHotel] != NINCS)
			folytat = UpdateFolytatodik[uHotel];

		for(x = folytat; x < MAXHOTEL; x++)
		{
			if(!HotelInfo[x][hNeedUpdate]) continue;
			if(updated >= UpdatePerSec[uHotel])
			{
				UpdateFolytatodik[uHotel] = x;
				SetTimerEx("Updater", 1000, false, "d", type);
				break;
			}
			
			format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Hotelek);
		
			//if(HotelUpdates[x][h]) MysqlUpdateInt("", HotelInfo[x][h]);
			if(HotelUpdates[x][hEladva]) { MysqlUpdateInt(query, "Eladva", HotelInfo[x][hEladva]); HotelUpdates[x][hEladva] = false; }
			if(HotelUpdates[x][hTulaj]) { MysqlUpdateStr(query, "Tulaj", HotelInfo[x][hTulaj]); HotelUpdates[x][hTulaj] = false; }
			if(HotelUpdates[x][hEntranceX]) { MysqlUpdateFlo(query, "X", HotelInfo[x][hEntranceX]); HotelUpdates[x][hEntranceX] = false; }
			if(HotelUpdates[x][hEntranceY]) { MysqlUpdateFlo(query, "Y", HotelInfo[x][hEntranceY]); HotelUpdates[x][hEntranceY] = false; }
			if(HotelUpdates[x][hEntranceZ]) { MysqlUpdateFlo(query, "Z", HotelInfo[x][hEntranceZ]); HotelUpdates[x][hEntranceZ] = false; }
			if(HotelUpdates[x][hAra]) { MysqlUpdateInt(query, "Ara", HotelInfo[x][hAra]); HotelUpdates[x][hAra] = false; }
			if(HotelUpdates[x][hBelso]) { MysqlUpdateInt(query, "Belso", HotelInfo[x][hBelso]); HotelUpdates[x][hBelso] = false; }
			if(HotelUpdates[x][hHel]) { MysqlUpdateInt(query, "Elet", HotelInfo[x][hHel]); HotelUpdates[x][hHel] = false; }
			if(HotelUpdates[x][hArm]) { MysqlUpdateInt(query, "Pajzs", HotelInfo[x][hArm]); HotelUpdates[x][hArm] = false; }
			if(HotelUpdates[x][hPenz]) { MysqlUpdateInt(query, "Penz", HotelInfo[x][hPenz]); HotelUpdates[x][hPenz] = false; }
			if(HotelUpdates[x][hCigi]) { MysqlUpdateInt(query, "Cigi", HotelInfo[x][hCigi]); HotelUpdates[x][hCigi] = false; }
			if(HotelUpdates[x][hKaja]) { MysqlUpdateInt(query, "Kaja", HotelInfo[x][hKaja]); HotelUpdates[x][hKaja] = false; }
			if(HotelUpdates[x][hKokain]) { MysqlUpdateInt(query, "Kokain", HotelInfo[x][hKokain]); HotelUpdates[x][hKokain] = false; }
			if(HotelUpdates[x][hHeroin]) { MysqlUpdateInt(query, "Heroin", HotelInfo[x][hHeroin]); HotelUpdates[x][hHeroin] = false; }
			if(HotelUpdates[x][hMarihuana]) { MysqlUpdateInt(query, "Marihuana", HotelInfo[x][hMarihuana]); HotelUpdates[x][hMarihuana] = false; }
			if(HotelUpdates[x][hMati]) { MysqlUpdateInt(query, "Material", HotelInfo[x][hMati]); HotelUpdates[x][hMati] = false; }
			if(HotelUpdates[x][hZarva]) { MysqlUpdateInt(query, "Zarva", HotelInfo[x][hZarva]); HotelUpdates[x][hZarva] = false; }
			if(HotelUpdates[x][hDate]) { MysqlUpdateInt(query, "UtolsoBelepes", HotelInfo[x][hDate]); HotelUpdates[x][hDate] = false; }
			
			if(HotelUpdates[x][hFegyverek]) {
				new cuccok[90], z;
				format(cuccok, 90, "%d", HotelInfo[x][hFegyverek][0]);
				for(z = 1; z < 10; z++) format(cuccok, 90, "%s,%d", cuccok, HotelInfo[x][hFegyverek][z]); MysqlUpdateStr(query, "Fegyverek", cuccok); format(cuccok, 90, "%d", HotelInfo[x][hToltenyek][0]);
				for(z = 1; z < 10; z++) format(cuccok, 90, "%s,%d", cuccok, HotelInfo[x][hToltenyek][z]); MysqlUpdateStr(query, "Toltenyek", cuccok);
				HotelUpdates[x][hFegyverek] = false;
			}
			if(HotelUpdates[x][hMellenyek]) 
			{
				new cuccok[90], z;
				format(cuccok, 90, "%d", HotelInfo[x][hMellenyek][0]);
				for(z = 1; z < 10; z++)
					format(cuccok, 90, "%s,%d", cuccok, HotelInfo[x][hMellenyek][z]);
				MysqlUpdateStr(query, "Mellenyek", cuccok); 
				HotelUpdates[x][hMellenyek] = false;
			}
			if(HotelUpdates[x][hGyogyszer]) { MysqlUpdateInt(query, "Gyogyszer", HotelInfo[x][hGyogyszer]); HotelUpdates[x][hGyogyszer] = false; }
   			if(HotelUpdates[x][hRuha])
   			{
   			    new cuccok[90], z;
   			    format(cuccok, 90, "%d", HotelInfo[x][hRuha][0]);
   			    for(z = 1; z < 10; z++)
				   format(cuccok, 90, "%s,%d", cuccok, HotelInfo[x][hRuha][z]);
				   
			   	MysqlUpdateStr(query, "Ruha", cuccok);
   			}
			MysqlFinalUpdate(query, x);
			
			HotelInfo[x][hNeedUpdate] = false;
			updated++;
		}
		if(updated < UpdatePerSec[uHotel])
			UpdateFolytatodik[uHotel] = NINCS;
	}
}

public BackupTimer()
{
	PlayerForeach(x)
	{
		if(!IsValidPlayerID(x) || !Logged(x) || IsPlayerNPC(x)) continue;

		BackupTime[x] += BackTime;
		if(BackupTime[x] >= BackTimeSave)
		{
		    BanEllenorzes(x);
			AdatMentesSQL(x);
			BackupTime[x] = 0;
		}
	}

	return 1;
}

public OnPlayerMoneyChange(playerid, newmoney, oldmoney)
{
	return 1;
}

stock FegyverKaliberhezMinSzint(playerid, weaponid)
{
	if(weaponid == 41 || weaponid == 42 || weaponid == 43) return true;
	else if(Szint(playerid) < GetWeaponSlot(weaponid))
	{
		
		FegyverElvesz(playerid, weaponid);
		
		PlayerTextFormat(playerid, "Sajnálom, ehhez a kaliberû fegyverhez (%s), minimum %d. szint szükséges!", aWeaponNames[weaponid], GetWeaponSlot(weaponid));
		Msg(playerid, PlayerText[playerid], COL_PIROS);
		
		return false;
	}
	return true;
}

public OnPlayerWeaponChange(playerid, newweapon, oldweapon) // görgõvel fegyverelõvétel
{
	if(newweapon != Fegyvere[playerid] && MostLepettBe[playerid] == 0)
	{
		if(!FegyverKaliberhezMinSzint(playerid, newweapon)) return false;
	}
	return 1;
}
stock LovikAKocsit(kocsi)
{
	new lovik=false;
	#define HOLDING(%0) ((newkeys & (%0)) == (%0))
	new newkeys,l,u,fegyver;
	PlayerForeach(playerid)
	{
		fegyver = GetPlayerWeapon(playerid);
		if(!IsPlayerLookingAtVehicle(playerid,kocsi) || !Lofegyver(fegyver)) continue;
		GetPlayerKeys(playerid, newkeys, l, u);
		if(HOLDING(KEY_FIRE))
		{
			lovik = true;
			break;
		}
	}
	return lovik;
}
public OnTrailerAttach(vehicle, trailer)
{
	new sofor = KocsiSofor(vehicle);
	Msg(sofor, "A vontatmány felcsatolva!");
	if(IsAPlato(trailer))
		Cselekves(sofor, "felkapcsolta a pótkocsit",0);

	return 1;
}
public OnTrailerDetach(vehicle, trailer)
{
  	new sofor = KocsiSofor(vehicle);
   	SendClientMessage(sofor,COLOR_LIGHTRED, "Figyelmeztetés: A vontatmány lekapcsolódott!!");
	return 1;
}
public OnVehicleHealthChange(vehicle, Float:newhealth, Float:oldhealth)
{
	new Float:Kulonbseg = oldhealth - newhealth;
	new Float:UjElet;
	new Float:Elet;
    if(newhealth < 1000.0 && oldhealth > newhealth) //0.8
	{
		PlayerForeach(p)
		{
		    if(IsPlayerInVehicle(p, vehicle) && IsPlayerInAnyVehicle(p))
			{
				GetPlayerHealth(p, UjElet);
				if(GetPlayerState(p) == 2)
					if(ov[p])
						Elet = UjElet - ((Kulonbseg / UtkozesErzekenyseg)/2);
					else
						Elet = UjElet - (Kulonbseg / UtkozesErzekenyseg);
				else if(GetPlayerState(p) == 3)
					if(ov[p])
						Elet = UjElet - ((Kulonbseg / UtkozesErzekenyseg+3)/2);
					else
						Elet = UjElet - (Kulonbseg / UtkozesErzekenyseg+3);
						
				if(Elet < 1.0)
				{
			   	 	Elet = 1.0;
					RemovePlayerFromVehicle(p);
					HalalAnimPlay(p, true);
				}
				//if(Kulonbseg > (UtkozesErzekenyseg * 2.8))
				  //  AnimbaRak(p,TIPUS_UTKOZES);
				    
      			SetHealth(p, Elet);
	  		}
		}
	}
	return 1;
}

public OnPlayerHealthChange(playerid, Float:newhealth, Float:oldhealth)
{
	new Float:tarolthp = JatekosElete[playerid];
	if(newhealth != tarolthp) SetPlayerHealth(playerid, tarolthp);
	return 1;
}

public OnPlayerArmourChange(playerid, Float:newarmour, Float:oldarmour)
{
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(Tevezve[playerid] != NINCS)
		SetPlayerVirtualWorld(Tevezve[playerid], newinteriorid);
	return 1;
}

public OnPlayerVirtualWorldChange(playerid, newvirtualworld, oldvirtualworld)
{
	if(Tevezve[playerid] != NINCS)
		SetPlayerVirtualWorld(Tevezve[playerid], newvirtualworld);
	return 1;
}

public OnPlayerScoreChange(playerid, newscore, oldscore)
{
	return 1;
}

encode_tires(tire1, tire2, tire3, tire4) return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(GetPVarInt(playerid, "TaxiLicense") > 0)
		fail_taxi_exam(playerid, "Ütköztél!");
		
    return 1;	
}
public OnPlayerTeamChange(playerid, newteam, oldteam)
{
	return 1;
}

public OnPlayerSkinChange(playerid, newskin, oldskin)
{
	return 1;
}

public OnPlayerWantedLevelChange(playerid, newwantedlevel, oldwantedlevel)
{
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	KocsiRendszam(vehicleid);
	SzirenaTorles(vehicleid);
	BlinkingLights(vehicleid, false);
	JarmuFenyhid(vehicleid, false);
	DestroyDynamic3DTextLabel(CarSign[vehicleid]);
	
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	GetDamageStat(vehicleid);
	KocsiRendszam(vehicleid);
	
	/*new Float:HP;
	GetVehicleHealth(vehicleid, HP);
	if(HP > 350 && IsValidPlayerID(killerid))
	{
		new ido = 60, playerid = killerid;
		Jail(playerid, "set", ido * 60, "ajail", EkezetMentes("Jármû bugoltatás [víz respawn]"));
		
		PlayerTextFormat(playerid, "%s %d perc AdminJailt kapott a Rendszer által.", PlayerName(playerid), ido);
		AdminCMD(PlayerText[playerid]);
		AdminCMD("Oka: Jármû bugoltatás [víz respawn]");
	}*/
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(Locked(vehicleid))
		SetVehicleParamsForPlayer(vehicleid, forplayerid, 0, 1);
		
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	new kocsi = GetPlayerVehicleID(playerid);
	if(IsAPlane(kocsi)) return 1;
	
	new race,cp,statusz;
	race = PlayerRaceInfo[playerid][xVersenyen];
	cp = PlayerRaceInfo[playerid][xCP];
	statusz = RaceInfo[race][rStatusz];

	if(race == NINCS)
		return 1;
	if(statusz != RACE_ELINDULT)
		return 1;

	
	if(cp != RACE_CP_CEL)
	{
		if(cp == RACE_CP_START)
		{
			if(RaceInfo[race][rCP] > 0)
			{
				PlayerRaceInfo[playerid][xCP] = 0;
				
				if(RaceInfo[race][rCP] > 1)
					PlayerRaceInfo[playerid][xKoviCP] = 1;
				else
					PlayerRaceInfo[playerid][xKoviCP] = RACE_CP_CEL;
			}
			else
			{
				PlayerRaceInfo[playerid][xCP] = RACE_CP_CEL;
				PlayerRaceInfo[playerid][xKoviCP] = RACE_CP_CEL;
			}
		}
		else
		{
			if((cp+1) >= RaceInfo[race][rCP])
			{
				PlayerRaceInfo[playerid][xCP] = RACE_CP_CEL;
				PlayerRaceInfo[playerid][xKoviCP] = RACE_CP_CEL;
			}
			else
			{
				PlayerRaceInfo[playerid][xCP]++;
				
				if((cp+2) >= RaceInfo[race][rCP])
					PlayerRaceInfo[playerid][xKoviCP] = RACE_CP_CEL;
				else
					PlayerRaceInfo[playerid][xKoviCP] = PlayerRaceInfo[playerid][xCP] + 1;
			}
		}
		SetPlayerRaceCP(playerid);
	}
	else if(cp == RACE_CP_CEL)
	{
		//new time = PlayerRaceInfo[playerid][xIdo];
		RaceInfo[race][rBeert]++;
		new hanyadik = RaceInfo[race][rBeert];
		new uzenet[128];

		if(hanyadik <= 8)
		{
			new nyeremeny = floatround(float(RaceInfo[race][rNyeremeny]) * float(VersenySzorzo[hanyadik-1]) * 0.1);
			PlayerForeach(x)
			{
				if(PlayerRaceInfo[x][xVersenyen] == race || Admin(x, FOADMIN))
				{
				    SendFormatMessage(x, COLOR_LIGHTGREEN, "%s %d. lett a  %s versenyen! | Nyereménye: $%d",PlayerName(playerid), RaceInfo[race][rBeert], RaceInfo[race][rNev], nyeremeny);
				}
			}
			SendFormatMessage(playerid, COLOR_LIGHTGREEN, "Gratulálunk! %d. lettél! A nyereményed $%d! Máris utaljuk a számládra", hanyadik, nyeremeny);
			PlayerInfo[playerid][pAccount] += nyeremeny;
			//HelyezesFelrak(playerid, false);
		}
		else
		{
			format(uzenet, 128, "%s - I%d.", PlayerName(playerid), hanyadik);
			PlayerForeach(x)
			{
				if(PlayerRaceInfo[x][xVersenyen] == race || Admin(x, FOADMIN))
					SendClientMessage(x, COLOR_YELLOW, uzenet);
			}
		}

		VersenyVege(playerid);

		new meg = 0;
		PlayerForeach(x)
		{
			if(PlayerRaceInfo[x][xVersenyen] == race)
				meg++;
		}
		if(meg == 0)
		{
			RaceInfo[race][rStatusz] = RACE_VEGE;
			PlayerForeach(x)
			{
				if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
				{
				    SendFormatMessage(x, COLOR_WHITE, "A %s versenynek vége", RaceInfo[race][rNev]);
				}
			}
		}
	}
	
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

//-------------------------------------------------------------------------------------------------------

stock Floatmszktas(szam1, szam2, IntegerEredmeny = false)
{
	new Float:eredmeny, Float:sz1, Float:sz2;
	eredmeny = float(szam1) / float(szam2);
	
	if(IntegerEredmeny)
		return floatround(eredmeny);
	else
		return eredmeny;
}

stock GetAllFrakcioRang(frakcio)
{
	new rangok[1024], x = frakcio;
	format(rangok, 1024, "Rang 0: %s\nRang 1: %s\nRang 2: %s\nRang 3: %s\nRang 4: %s\nRang 5: %s\
	\nRang 6: %s\nRang 7: %s\nRang 8: %s\nRang 9: %s\nRang 10: %s\nRang 11: %s\nRang 12: %s\
	\nRang 13: %s\nRang 14: %s\nRang 15: %s\n", 	
	FrakcioRangInfo[x][0][rNev], FrakcioRangInfo[x][1][rNev], FrakcioRangInfo[x][2][rNev],
	FrakcioRangInfo[x][3][rNev], FrakcioRangInfo[x][4][rNev], FrakcioRangInfo[x][5][rNev],
	FrakcioRangInfo[x][6][rNev], FrakcioRangInfo[x][7][rNev], FrakcioRangInfo[x][8][rNev],
	FrakcioRangInfo[x][9][rNev], FrakcioRangInfo[x][10][rNev], FrakcioRangInfo[x][11][rNev],
	FrakcioRangInfo[x][12][rNev], FrakcioRangInfo[x][13][rNev], FrakcioRangInfo[x][14][rNev],
	FrakcioRangInfo[x][15][rNev]);
	return rangok;
}

stock CsoportLeader(playerid)
{
	new sqlstring[24];
	Format(sqlstring, "Leader = '%d' ", PlayerSQLID(playerid));
	if(Mysql_Num("csoportok", sqlstring) == 1) return 1;
	
	return 0;
}

stock GetPlayerFrakcio(playerid)
{
	return PlayerInfo[playerid][pMember];
}

stock GetPlayerRangNev(playerid)
{
	new szoveg[128];
	new lekeres1 = PlayerInfo[playerid][pMember];
	new lekeres2 = PlayerInfo[playerid][pRank];
	Format(szoveg, "%s", FrakcioRangInfo[lekeres1][lekeres2][rNev]);
	return szoveg;
}

fuggveny HibasJelszo(playerid)
{
	new string[128];
	HibasBelepes[playerid] ++;
	if(HibasBelepes[playerid] == 2)
	{
		//ClearChat(playerid);
		new bantime = 5;
		MsgFormat(playerid, "Elírtad a jelszavad, ezért %d percre ki lettél tiltva!", bantime);
		BlockPlayerIP(playerid, bantime);
		return 1;
	}
	string = "Kérlek írd be az alábbi mezõbe a jelszavad!\n\nJelszó:";
	ShowPlayerDialog(playerid, DIALOG_PASSWORDCHECK, DIALOG_STYLE_PASSWORD, "Hibás jelszó", string, "Beír", "Kilépés");
	return 1;
}

fuggveny DutyTime(playerid)
{
	#if defined DutyKorlatozas
	DutyIdo[playerid] = SZOLGALATIDO * 60;
	#endif
}

fuggveny NincsIlyenFegyvere(playerid, fegyo)
{
	if(fegyo < 0 || fegyo >= sizeof(aWeaponNames))
		return 1;
	
	new wep, ammo, slot;
	slot = GetGunSlot(fegyo);
	GetPlayerWeaponData(playerid, slot, wep, ammo);
	
	if(slot != 0 && wep < 1 || ammo == 0)
		return 1;
	
	return 0;
}

stock IsToltenyesFegyver(fegyver, slot = false)
{
	new slotok[5] = {0, 1, 10, 11, 12}, x, fegyo;
	if(slot) fegyo = fegyver;
	else fegyo = GetGunSlot(fegyver);
	for(x = 0; x < sizeof(slotok); x++)
	{
		if(fegyo == slotok[x])
			return 0;
	}
	return 1;
}

stock GetGunSlot(fegyo)
{
	if(fegyo < 0 || fegyo >= sizeof(aWeaponSlotok))
		return 0;
	return aWeaponSlotok[fegyo];
}

stock GetGunName(id)
{
	new nev[30];
	if(id < 0 || id >= sizeof(aWeaponNames))
		nev = "Nincs";
	else
		strmid(nev, aWeaponNames[id], 0, strlen(aWeaponNames[id]));
		
	return nev;	
}

stock GetGunID(string[])
{
	new fegyo;
	for(new x = 0; x < sizeof(aWeaponNames); x++)
	{
		if(egyezik(string, aWeaponNames[x]))
		{
			fegyo = x;
			break;
		}
	}
	
	return fegyo;
}

stock IsTrailer(kocsi)
{
	new model = GetVehicleModel(kocsi);
	new trailers[8] = {435, 450, 591, 606, 607, 608, 610, 611};
	for(new x = 0; x < sizeof(trailers); x++)
	{
		if(model == trailers[x])
			return 1;
	}
	return 0;
}

stock TrailerAttached(trailer)
{
	new csatolva = NINCS;
	VehicleForeach(x)
	{
		if(!IsVehicleConnected(x) || x == trailer) continue;
		if(GetVehicleTrailer(x) == trailer)
		{
			csatolva = x;
			break;
		}
	}
	
	return csatolva;
}

stock ViadalMessage(uzenet, szin = COLOR_YELLOW, kellsms = true)
{
	PlayerForeach(x)
	{
		if(!IsValidPlayerID(x) || !Logged(x) || !BViadal[x]) continue;
		
		if(kellsms)
		{
		    SendFormatMessage(x, szin, "SMS: %s | Küldõ: Hitman Director", uzenet);
		}
		else
			Msg(x, uzenet, szin);
	}
	return 1;
}

fuggveny Berlo(playerid)
{
	return PlayerInfo[playerid][pBerlo];
}

fuggveny NincsHaza(playerid)
{
	if(PlayerInfo[playerid][pPhousekey] == NINCS && PlayerInfo[playerid][pPhousekey2] == NINCS) return 1;
	return 0;
}

fuggveny HazbaVan(playerid)
{
    new hazak = sizeof(HouseInfo), ottvan = NINCS;
	for(new i = 0; i < hazak; i++)
	{
		new HazBelso = HouseInfo[i][hBelso];
		if(PlayerToPoint(250, playerid,IntInfo[HazBelso][iExitX], IntInfo[HazBelso][iExitY], IntInfo[HazBelso][iExitZ]) && GetPlayerVirtualWorld(playerid) == i && GetPlayerInterior(playerid) == IntInfo[HazBelso][iNumber])
		{
		    ottvan = HazBelso;
		    break;
		}
	}
	return ottvan;
}

fuggveny Hazban(playerid, haz)
{
	new VW = GetPlayerVirtualWorld(playerid), Int = GetPlayerInterior(playerid);
	new belso = HouseInfo[haz][hBelso];
	if(VW == haz && Int == IntInfo[belso][iNumber] && PlayerToPoint(150, playerid, IntInfo[belso][iExitX], IntInfo[belso][iExitY], IntInfo[belso][iExitZ]))
		return 1;
	return 0;
}

fuggveny Haznal(playerid, haz)
{
	if(PlayerToPoint(2, playerid, HouseInfo[haz][hEntrancex], HouseInfo[haz][hEntrancey], HouseInfo[haz][hEntrancez]))
		return 1;
	return 0;
}

fuggveny HazKozelebe(playerid, Float:sugar)
{
	new Haz=NINCS;
	for(new i=0; i < sizeof(HouseInfo); i++)
	{
		if(PlayerToPoint(sugar, playerid, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
			Haz = i;
			break;
		}
	}
	return Haz;
}

fuggveny HazaElottVan(playerid)
{
	if(NincsHaza(playerid)) return NINCS;
	
	if(PlayerInfo[playerid][pPhousekey] != NINCS)
	{
		if(Haznal(playerid, PlayerInfo[playerid][pPhousekey]))
			return PlayerInfo[playerid][pPhousekey];
	}
	if(PlayerInfo[playerid][pPhousekey2] != NINCS)
	{
		if(Haznal(playerid, PlayerInfo[playerid][pPhousekey2]))
			return PlayerInfo[playerid][pPhousekey2];
	}
	
	return NINCS;
}

fuggveny HazabanVan(playerid)
{
	if(NincsHaza(playerid)) return NINCS;
	
	if(PlayerInfo[playerid][pPhousekey] != NINCS)
	{
		if(Hazban(playerid, PlayerInfo[playerid][pPhousekey]))
			return PlayerInfo[playerid][pPhousekey];
	}
	if(PlayerInfo[playerid][pPhousekey2] != NINCS)
	{
		if(Hazban(playerid, PlayerInfo[playerid][pPhousekey2]))
			return PlayerInfo[playerid][pPhousekey2];
	}
	new haz = IsAt(playerid,IsAt_Haz);
	if(haz != NINCS)
	{
		if(egyezik(HouseInfo[haz][hOwner],PlayerInfo[playerid][pMarriedTo]))
			return haz;
	}
	return NINCS;
}

stock bool:JatekosHaza(playerid, haz)
{
	if(egyezik(HouseInfo[haz][hOwner], PlayerName(playerid, true))) return true;
	else return false;
}

fuggveny NincsHotele(playerid)
{
	if(PlayerInfo[playerid][pHotelSzoba] == NINCS) return 1;
	return 0;
}

fuggveny HoteleElottVan(playerid)
{
	if(NincsHotele(playerid)) return NINCS;
	
	if(PlayerInfo[playerid][pHotelSzoba] != NINCS)
	{
		if(Hotelnel(playerid, PlayerInfo[playerid][pHotelSzoba]))
			return PlayerInfo[playerid][pHotelSzoba];
	}
	return NINCS;
}

fuggveny Hotelben(playerid, hotel)
{
	new VW = GetPlayerVirtualWorld(playerid), Int = GetPlayerInterior(playerid);
	new belso = HotelInfo[hotel][hBelso];
	if(VW == ALAPHOTELVW+hotel && Int == IntInfo[belso][iNumber] && PlayerToPoint(150, playerid, IntInfo[belso][iExitX], IntInfo[belso][iExitY], IntInfo[belso][iExitZ]))
		return 1;
	return 0;
}

fuggveny HotelebenVan(playerid)
{
	if(NincsHotele(playerid)) return NINCS;
	
	if(PlayerInfo[playerid][pHotelSzoba] != NINCS)
	{
		if(Hotelben(playerid, PlayerInfo[playerid][pHotelSzoba]))
			return PlayerInfo[playerid][pHotelSzoba];
	}
	return NINCS;
}

fuggveny Hotelnel(playerid, hotel)
{
	if(PlayerToPoint(2, playerid, HotelInfo[hotel][hEntranceX], HotelInfo[hotel][hEntranceY], HotelInfo[hotel][hEntranceZ]))
		return 1;
	return 0;
}

fuggveny PremiumPont(playerid)
{
	return PlayerInfo[playerid][pPremiumPont];
}

fuggveny VanHaza(playerid)
{
	new van;
	if(PlayerInfo[playerid][pPhousekey] != NINCS) van++;
	if(PlayerInfo[playerid][pPhousekey2] != NINCS) van++;
	
	return van;
}

stock KocsiElad(kocsi, szoveg = 1)
{
	if(szoveg == 1)
	{
	    PlayerForeach(i)
	    {
		 	SendFormatMessage(i,COLOR_LIGHTRED, "Autokereskedés: Egy kocsi eladóvá vált. Megvehetõ az Autokereskedés-nél! Elõzõ tulaj: %s", CarInfo[kocsi][cOwner]);
		}
	}
	CarInfo[kocsi][cOwned] = 0;
	strmid(CarInfo[kocsi][cOwner], "Nincs_Tulaj", 0, strlen("Nincs_Tulaj"), 20);
	CarInfo[kocsi][cFrakcio] = 0;
	CarInfo[kocsi][cDate] = 0;
	CarUpdate(kocsi, CAR_Owned, CAR_Owner, CAR_Date, CAR_Frakcio);
	
	ParkCarToKereskedo(kocsi);
		
	return 1;
}

stock HazElad(haz, minimumar = 2500000, szoveg = 1)
{
	new nev[MAX_PLAYER_NAME];
	nev = "Senki";
	HouseInfo[haz][hOwner] = nev;
	HouseInfo[haz][hHel] = 0;
	HouseInfo[haz][hArm] = 0;
	HouseInfo[haz][hLock] = 0;
	HouseInfo[haz][hOwned] = 0;

	if(HouseInfo[haz][hValue] < minimumar)
		HouseInfo[haz][hValue] = minimumar;
	
	#if defined KELLHAZPICKUP
		OnHousePickupUpdate(haz);
	#endif
	
	HazUpdate(haz, HAZ_Owner, HAZ_Hel, HAZ_Arm, HAZ_Lock, HAZ_Owned);
		
	if(szoveg == 1)
	{
	    PlayerForeach(i)
	    {
		 	SendFormatMessage(i,COLOR_LIGHTRED, "Házmesterek Zrt: Los Santos str. %d eladó lett! Ára $%d! Elõzõ tulaj: %s", haz, HouseInfo[haz][hValue], HouseInfo[haz][hOwner]);
		}
	}
	
	return 1;
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	if(IsPlayerInAnyVehicle(forplayerid))
	{
  		new kocsi = GetPlayerVehicleID(forplayerid);
  		new VS=IsAVsKocsi(kocsi);
  		if(VS != NINCS)
  		{
  		    if(CarInfo[VS][cEMP] != 0)
  		    {
  		        if(TrafiPax[playerid][tAktiv] && PlayerInfo[playerid][pMobiltrafi] != 1)
  		        {
  		            SendClientMessage(forplayerid, COLOR_YELLOW, "EMP Riasztás: Trafipax a közelben!!! (GPS-en jelölve)");
  		            SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_PIROS);
				}
  		    }
  		}
	}
	
	if(IDk[forplayerid] == 1)
	{
		if(!IsValidDynamic3DTextLabel(IDText[forplayerid][playerid]))
		{
			new Float:Pos[3];
			GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
			IDText[forplayerid][playerid] = CreateDynamic3DTextLabel(RandomPlayerID[playerid], COLOR_WHITE, Pos[0], Pos[1], Pos[2], 50.0, playerid,INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), forplayerid);
		}
	}
	if(Nevek[forplayerid] != 0)
	{
	    if(!NoName[playerid])
	    {
		    if(Nevek[forplayerid] == 1 && !NoName[playerid])
		    {
				ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
			}
			else if(Nevek[forplayerid] == 2)
			{
			    if(!NoName[playerid] && HitmanDuty[playerid] == 0 && PlayerInfo[forplayerid][pMember] == PlayerInfo[playerid][pMember])
					ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
				else
				    ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
			}
		}
 	}
	else
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
		
	if(Erosites[playerid])
	{
		if(IsACop(forplayerid))
			SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_LIGHTGREEN);
	}
	
	if(BViadal[playerid] && BViadal[forplayerid] && BVStart || BViadal[playerid] && IsHitman(forplayerid) || BViadal[playerid] && IsDirector(forplayerid))
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_YELLOW);
	//SendFormatMessageToAll(COLOR_WHITE, "OnPlayerStreamIn(%s, for: %s)", PlayerName(playerid), PlayerName(forplayerid));
	
	if(LMT(forplayerid,LMUNKA_TAXI))
	{
		if(KiertMegy[playerid] == forplayerid)
			SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_PIROS);
		if(KiertMegy[forplayerid] == playerid)
			SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_PIROS);
	}
	else
	{
	    if(KiertMegy[playerid] == forplayerid)
			SetPlayerMarkerForPlayer(playerid, forplayerid, MentoSzinek[MentoHivasSzin[playerid]]);
		if(KiertMegy[forplayerid] == playerid)
			SetPlayerMarkerForPlayer(forplayerid, playerid, MentoSzinek[MentoHivasSzin[playerid]]);
	}
	if(PlayerInfo[playerid][pHeadValue] > 0 && HitmanDuty[forplayerid] == 1)
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0x00FF00FF);

	if(PlayerRaceInfo[playerid][xVersenyen] != NINCS && PlayerRaceInfo[playerid][xVersenyen] == PlayerRaceInfo[forplayerid][xVersenyen])
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_YELLOW);
		
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
    if(Nevek[forplayerid] != 0)
	{
	    if(!NoName[playerid])
	    {
		    if(Nevek[forplayerid] == 1 && !NoName[playerid])
		    {
				ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
			}
			else if(Nevek[forplayerid] == 2)
			{
			    if(!NoName[playerid] && HitmanDuty[playerid] == 0 && PlayerInfo[forplayerid][pMember] == PlayerInfo[playerid][pMember])
					ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
				else
				    ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
			}
		}
 	}
	else
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
		
	if(PlayerInfo[playerid][pHeadValue] > 0 && HitmanDuty[forplayerid] == 1)
		SetPlayerMarkerForPlayer(forplayerid, playerid, 0x00FF00FF);
		
	if(PlayerRaceInfo[playerid][xVersenyen] != NINCS && PlayerRaceInfo[playerid][xVersenyen] == PlayerRaceInfo[forplayerid][xVersenyen])
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_YELLOW);
		
	if(Erosites[playerid])
	{
		if(IsACop(forplayerid))
			SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_LIGHTGREEN);
	}
	
	if(LMT(forplayerid,LMUNKA_TAXI))
	{
		if(KiertMegy[playerid] == forplayerid)
			SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_PIROS);
		if(KiertMegy[forplayerid] == playerid)
			SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_PIROS);
	}
	else
	{
	    if(KiertMegy[playerid] == forplayerid)
			SetPlayerMarkerForPlayer(playerid, forplayerid, MentoSzinek[MentoHivasSzin[playerid]]);
		if(KiertMegy[forplayerid] == playerid)
			SetPlayerMarkerForPlayer(forplayerid, playerid, MentoSzinek[MentoHivasSzin[playerid]]);
	}
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	new 
		cpid = clickedplayerid,
		szoveg[124]
	;
	
	if(!Admin(playerid, 1) && !Admin(cpid, 1))
	{
		Format(szoveg, "{00FF00}%s {FFFFFF}nem Admin!", PlayerName(cpid));
		ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "{FF0000}Hiba!", szoveg, "Bezár", "");
		return 1;
	}
	
	if(!AdminDuty[cpid] && !Admin(playerid, 1)) 
	{
		Format(szoveg, "{FFFFFF}(%s) {00FF00}%s {FFFFFF}nincs AdminSzolgálatban!", AdminSzint(cpid), PlayerName(cpid));
		ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "{FF0000}Hiba!", szoveg, "Bezár", "");
		return 1;
	}	
	
	if(PlayerInfo[playerid][pMuted] == 1)
	{
		szoveg = "Le vagy némítva ezért nem tudsz PM-et küldeni!";
		ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "{FF0000}Hiba!", szoveg, "Bezár", "");
		return 1;
	}
	
	if(HidePM[cpid] > 0 && !Admin(playerid, FOADMIN)) 
	{
		ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "{FF0000}Hiba!", "{FFFFFF}Ennek az adminnak tiltva vannak a PM fogadások!\nHasználd a /jelentés parancsot!", "Bezár", "");
		return 1;
	}
	
	Format(szoveg, "{FFFFFF}Üzenet küldése neki:\n({FF0000}%s{FFFFFF}) %s", AdminSzint(cpid), PlayerName(cpid));	
	ShowPlayerDialog(playerid, DIALOG_PRIVATUZENET, DIALOG_STYLE_INPUT, "Üzenet küldése", szoveg, "Elküld", "Mégse");
	
	KinekKuldUzit[playerid] = cpid;
	
	return 1;
}

stock NevMutatas(playerid, beki)
{
	PlayerForeach(x)
	{
		if(Nevek[x] != 1) continue;
		ShowPlayerNameTagForPlayer(x, playerid, beki);
	}
}
stock ShowNamesFrakcio(playerid, beki)
{
    PlayerForeach(x)
	{
		if(PlayerInfo[x][pMember] == PlayerInfo[playerid][pMember] || PlayerInfo[x][pLeader] == PlayerInfo[playerid][pMember] || PlayerInfo[x][pMember] == PlayerInfo[playerid][pLeader] || PlayerInfo[x][pLeader] == PlayerInfo[playerid][pLeader])
		{
			ShowPlayerNameTagForPlayer(playerid, x, beki);
		}
	}
}
stock ShowNames(playerid, beki)
{
	PlayerForeach(x) {
		ShowPlayerNameTagForPlayer(playerid, x, beki);
	}
}

stock getSzerverVerzio()
{
	new verzio[24];
	if(SzerverTipus == SZT_NORMAL)
	{
		new keres[10], ahol[20];
		keres = "Ertek";
		ahol = "Nev='Verzio'";
		Format(verzio, "LS:RP v%s", Mysql_Get(SQL_DB_Server, keres, ahol));
		SetGameModeText(verzio);	
		return verzio;
	}
	else if(SzerverTipus == SZT_TESZT)
	{
		SetGameModeText("LS:RP TESZT");	
	}
	return verzio;
}

stock PrintModVerzio()
{
	new keres[10], ahol[20], szoveg[24];
	keres = "Ertek"; ahol = "Nev = 'Verzio'";		
	Format(szoveg, "%s", Mysql_Get(SQL_DB_Server, keres, ahol));
	return szoveg;
}

stock GetServerVerzio()
{
	new version[64];
	GetServerVarAsString("version", version, sizeof(version));
	return version;
}

stock getAdminJelszo()
{
	new apass[129], keres[10], ahol[20];
	keres = "Ertek";
	ahol = "Nev = 'SzervPass'";
	
	apass = Mysql_Get(SQL_DB_Server, keres, ahol);
	
	strmid(adminjelszo, apass, 0, strlen(apass), sizeof(apass));
}

stock getUzemanyag()
{
	new uzemanyag[129], keres[10], ahol[20];
	keres = "Ertek";
	ahol = "Nev='BenzinAr'";
	
	uzemanyag = Mysql_Get(SQL_DB_Server, keres, ahol);
}

fuggveny AJelszoUpdate()
{
	new apass[129], keres[10], ahol[20];
	keres = "Ertek";
	ahol = "Nev='SzervPass'";
	
	apass = Mysql_Get(SQL_DB_Server, keres, ahol);
	
	if(!egyezik(adminjelszo, apass))
	{
		ABroadCast(COLOR_LIGHTRED, "====================================", 1);
		ABroadCast(COLOR_LIGHTRED, "!!! Az AdminJelszó megváltozott! !!!", 1);
		ABroadCast(COLOR_LIGHTRED, "====================================", 1);
		
		strmid(adminjelszo, apass, 0, strlen(apass), 129);
	}
}

stock OnlineAdminok(minszint = 1, maxszint = NINCS)
{
	new adminok;
	
	PlayerForeach(x)
	{
		if(!IsValidPlayerID(x) || IsPlayerNPC(x) || !Logged(x)) continue;
		if(maxszint == NINCS && PlayerInfo[x][pAdmin] >= minszint || minszint != NINCS && PlayerInfo[x][pAdmin] >= minszint && PlayerInfo[x][pAdmin] <= maxszint) adminok++;
	}

	return adminok;
}
stock OnlineTuzoltok()
{
	new tuzoltok;

	PlayerForeach(x)
	{
		if(!IsValidPlayerID(x) || IsPlayerNPC(x) || !Logged(x)) continue;
		if(LMT(x, LMUNKA_TUZOLTO)) tuzoltok++;
	}

	return tuzoltok;
}
fuggveny BVIdoCheck()
{
	if(BVStart != 1) return 1;
	
	if(BVIdo > 0)
		BVIdo--;

	new uzi[128], uzii[128];
	if(BVJatekosok < 2)
	{
		PlayerForeach(x)
		{
			if(!IsValidPlayerID(x) || !Logged(x) || BViadal[x] != 1) continue;
			format(uzii, sizeof(uzii), "Viadal: A Viadalnak vége! Nyertes: %s", PlayerName(x));
			SendHitmanRadioMessage(COLOR_YELLOW, uzii);
			SendClientMessage(x, COLOR_YELLOW, "SMS: A Viadalnak vége! Te gyõztél, a pénzt átutaltuk! | Feladó: Hitman Director");
			PlayerInfo[x][pAccount] += BVPenz;
		}
		BVPenz = 0;
		BVStart = 0;
		BVIdo = 1800;
		BVJatekosok = 0;
		return 1;
	}
	if(BVIdo < 1)
	{
		PlayerForeach(x)
		{
			if(!IsValidPlayerID(x) || !Logged(x) || BViadal[x] != 1) continue;
			format(uzii, sizeof(uzii), "Viadal: A Viadalnak vége! Nincs nyertes, mert lejárt az idõ!", PlayerName(x));
			SendHitmanRadioMessage(COLOR_YELLOW, uzii);
			SendClientMessage(x, COLOR_YELLOW, "Az idõ lejárt. Mivel nem volt nyertes, ezért a testetekben lévõ bomba végzett veletek.");
			SetHealth(x, 1);
			new Float:xx, Float:yy, Float:zz;
			GetPlayerPos(x, xx, yy, zz);
			CreateExplosion(xx, yy, zz, 4, 5);
			BViadal[x] = 0;
		}
		BVPenz = 0;
		BVStart = 0;
		BVIdo = 1800;
		BVJatekosok = 0;
		return 1;
	}
    if(BVIdo > 0)
	{
		PlayerForeach(x)
		{
			if(!IsValidPlayerID(x) || !Logged(x) || BViadal[x] != 1) continue;
			Format(uzi, "~y~Meg ~r~%d ~b~mp...", BVIdo);
			GameTextForPlayer(x, uzi, 975, 4);
		}
	}
	return 1;
}

new HBMTimer[MAX_PLAYERS];
stock iMsg(playerid, const uzi[], bool:showhatter = true, ido = 5)
{
	KillTimer(HBMTimer[playerid]);
	TextDrawHideForPlayer(playerid, iMsgTD[playerid]);
	TextDrawDestroy(iMsgTD[playerid]);
	
	new str[512];
	format(str,512,"%s",uzi);
	if(strlen(uzi) <= 28) iMsgTD[playerid] = TextDrawCreate(146.000000, 385.000000, str);
	else if(28 < strlen(uzi) <= 56) iMsgTD[playerid] = TextDrawCreate(146.000000, 375.000000, str);
	else if(56 < strlen(uzi) <= 84) iMsgTD[playerid] = TextDrawCreate(146.000000, 370.000000, str);
	else if(84 < strlen(uzi) <= 112) iMsgTD[playerid] = TextDrawCreate(146.000000, 365.000000, str);
	else if(strlen(uzi) > 112) iMsgTD[playerid] = TextDrawCreate(146.000000, 360.000000, str);
	
	if(showhatter)
	{
		TextDrawBackgroundColor(iMsgTD[playerid], 255);
		TextDrawUseBox(iMsgTD[playerid], 1);
	}
	
	TextDrawFont(iMsgTD[playerid], 1);
	TextDrawLetterSize(iMsgTD[playerid], 0.500000, 1.000000);
	TextDrawColor(iMsgTD[playerid], -1);
	TextDrawSetOutline(iMsgTD[playerid], 1);
	TextDrawSetProportional(iMsgTD[playerid], 1);
	TextDrawBoxColor(iMsgTD[playerid], 64);
	TextDrawTextSize(iMsgTD[playerid], 425.000000, 0.000000);
	TextDrawSetSelectable(iMsgTD[playerid], 0);
	
	TextDrawShowForPlayer(playerid, iMsgTD[playerid]);
	
	#if defined KELLMSGSOUND
		PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	#endif
	
	HBMTimer[playerid] = SetTimerEx("HideBoxMsg", (ido * 1000), false, "i", playerid);
	return 1;
}

fuggveny HideBoxMsg(playerid)
{
	TextDrawHideForPlayer(playerid, iMsgTD[playerid]);
	#if defined KELLMSGSOUND
		PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
	#endif
	return 1;
}

stock rag(szo[], tipus) // 1 - val-vel  2 - nak-nek   3 - t
{
    new string[128];
    new string2[128];
	if(tipus == 1 || tipus == 2 || tipus == 3)
	{
		new xd = strlen(szo);
		format(string, sizeof(string), "%s", szo);
		strdel(string, 0, xd-2);
		new sorszam = strfind(string, "a");
		if(sorszam == 1)
		{
		    format(string,sizeof(string), "%s", szo);
			strdel(string, xd-1, xd);
			if(tipus == 1) format(string2,sizeof(string2), "%sával", string);
			else if(tipus == 2) format(string2,sizeof(string2), "%sának", string);
			else if(tipus == 3) format(string2,sizeof(string2), "%sát", string);
		    return string2;
		}
		else
		{
            sorszam = strfind(string, "e");
            if(sorszam == 1)
			{
			    format(string,sizeof(string), "%s", szo);
				strdel(string, xd-1, xd);
			    if(tipus == 1) format(string2,sizeof(string2), "%sével", string);
			    else if(tipus == 2) format(string2,sizeof(string2), "%sének", string);
			    else if(tipus == 3) format(string2,sizeof(string2), "%sét", string);
			    return string2;
			}
			else
			{
                sorszam = strfind(string, "i");
	            if(sorszam == 1)
				{
				    format(string,sizeof(string), "%s", szo);
				    strdel(string, 0, xd-3);
				    if(tipus == 3) { format(string,sizeof(string), "%st", szo); return string2; }
				    if( strfind(string, "a") != -1 || strfind(string, "o") != -1 || strfind(string, "u") != -1)
				    {
				    	if(tipus == 1) format(string2,sizeof(string2), "%sval", szo);
				    	else if(tipus == 2) format(string2,sizeof(string2), "%snak", szo);
				    	return string2;
				    }
				    else if(strfind(string, "e") != -1 || strfind(string, "i") != -1)
				    {
				        if(tipus == 1) format(string2,sizeof(string2), "%svel", szo);
				        else if(tipus == 2) format(string2,sizeof(string2), "%snek", szo);
				    	return string2;
				    }
				    else
				    {
				        format(string2,sizeof(string2), "%svel", szo);
				    	return string2;
				    }
				}
				else
				{
				    sorszam = strfind(string, "o");
		            if(sorszam == 1)
					{
					    format(string,sizeof(string), "%s", szo);
						strdel(string, xd-1, xd);
					    if(tipus == 1) format(string2,sizeof(string2), "%sóval", string);
					    else if(tipus == 2) format(string2,sizeof(string2), "%sónak", string);
					    else if(tipus == 3) format(string2,sizeof(string2), "%sót", string);
					    return string2;
					}
					else
					{
					    sorszam = strfind(string, "u");
			            if(sorszam == 1)
						{
						    if(tipus == 1) format(string2,sizeof(string2), "%sval", szo);
						    else if(tipus == 2) format(string2,sizeof(string2), "%snak", szo);
						    else if(tipus == 3) format(string2,sizeof(string2), "%st", szo);
						    return string2;
						}
						else
						{
							if(tipus == 1 || tipus == 2)
							{
							    new string3[10];
								format(string,sizeof(string), "%s", szo);
							    if(tipus==1)
							    {
								    if(strfind(string, "cs") != -1 || strfind(string, "dz") != -1 || strfind(string, "dzs") != -1 || strfind(string, "gy") != -1 || strfind(string, "ly") != -1 || strfind(string, "ny") != -1 || strfind(string, "sz") != -1 || strfind(string, "ty") != -1 || strfind(string, "zs") != -1)
								    {
								        if(strfind(string, "dzs") != -1)
								        {
								            strdel(string, 0, xd-3);
								            if(strfind(string, "dzs") != -1)
								            {
								                strmid(string3, szo, 0, xd-2);
								    			format(string2,sizeof(string2), "%sdzsel", string3);
								    			return string2;
								    		}
								    	}
								        strdel(string,0, xd-2);
								        if(strfind(string, "cs") != -1 || strfind(string, "dz") != -1 || strfind(string, "gy") != -1 || strfind(string, "ly") != -1 || strfind(string, "ny") != -1 || strfind(string, "sz") != -1 || strfind(string, "ty") != -1 || strfind(string, "zs") != -1)
								        {
								            format(string,sizeof(string), "%s", szo);
								            strdel(string, 0, xd-3);
								    		if( strfind(string, "a") != -1 || strfind(string, "o") != -1 || strfind(string, "u") != -1)
								    		{
								            	format(string,sizeof(string), "%s", szo);
								            	strdel(string, xd-1, xd);
								            	strmid(string3, szo, xd-2, xd);
								            	format(string2,sizeof(string2), "%s%sal", string,string3);
								            	return string2;
								            }
								            else
								            {
								                format(string,sizeof(string), "%s", szo);
								            	strdel(string, xd-1, xd);
								            	strmid(string3, szo, xd-2, xd);
								            	format(string2,sizeof(string2), "%s%sel", string,string3);
								            	return string2;
								            }
								        }
								    }
								}
					    		strdel(string, 0, xd-3);
					    		if( strfind(string, "a") != -1 || strfind(string, "o") != -1 || strfind(string, "u") != -1)
					    		{
							    	strmid(string3, szo, xd-1, xd);
							    	if(tipus == 1) format(string2,sizeof(string2), "%s%sal", szo, string3);
							    	else if(tipus == 2) format(string2,sizeof(string2), "%snak", szo);
							    	return string2;
							    }
							    else
							    {
							    	strmid(string3, szo, xd-1, xd);
							    	if(tipus == 1) format(string2,sizeof(string2), "%s%sel", szo, string3);
							    	else if(tipus == 2) format(string2,sizeof(string2), "%snek", szo);
							    	return string2;
							    }
							}
							else if(tipus == 3)
							{
							    format(string,sizeof(string), "%s", szo);
						        strdel(string, 0, xd-1);
						    	if(strfind(string, "j") != -1 || strfind(string, "l") != -1 || strfind(string, "n") != -1 || strfind(string, "r") != -1 || strfind(string, "s") != -1 || strfind(string, "y") != -1 || strfind(string, "z") != -1)
						    	{
						    	    format(string2,sizeof(string2), "%st", szo);
						    	    return string2;
						    	}
						    	else
						    	{
						    	    format(string,sizeof(string), "%s", szo);
						    	    strdel(string, 0, xd-3);
						    	    if( strfind(string, "a") != -1 || strfind(string, "o") != -1 || strfind(string, "u") != -1)
						    	    {
						    	        format(string2,sizeof(string2), "%sot", szo);
						    	    	return string2;
						    	    }
						    	    else
						    	    {
						    	        format(string2,sizeof(string2), "%set", szo);
						    	    	return string2;
						    	    }
						    	}
						    }
						}
					}
				}
			}
		}
	}
	else format(string, sizeof(string), "Típus nem jó");
	return string;
}
fuggveny RabolasCheck(hol)
{
	new penz, uzi[32];
	if(hol == BANKRABLAS_KUL)
	{
		PlayerForeach(x)
		{
			if(!IsValidPlayerID(x) || !Logged(x) || IsPlayerNPC(x) || Rabol[x] != BANKRABLAS_KUL || BankRobVan[BANKRABLAS_KASZ] != 0) continue;
			if(!PlayerToPoint(8, x, 2144.5344,1640.4023,993.6882) && !PlayerToPoint(8, x, 2904.8376,-2033.7015,1957.3275))
			{
				Msg(x, "Elmentél a helyrõl, a pakolást befejezted!");
				Rabol[x] = 0;
				continue;
			}
			if(BankRobIdo[BANKRABLAS_KUL] < 1 && VisszaKRobbol < 1)
			{
				Rabol[x] = 0;
				UnFreeze(x);
				ClearAnimations(x);
				continue;
			}
			penz = Rand(1000, 15000);
			if(JatekosZsak[x][0] >= MAXZSAKPENZ)
			{
				Rabol[x] = 0;
				UnFreeze(x);
				ClearAnimations(x);
				Cselekves(x, "zsákja megtelt");
				Msg(x, "A zsákod megtelt");
				continue;
			}
			if(BankSzef < penz && BankSzef > 0)
				penz = BankSzef;
			else if(BankSzef <= 0)
			{
				Rabol[x] = 0;
				UnFreeze(x);
				ClearAnimations(x);
				Msg(x, "A pénz elfogyott a bankszéfben");
				Cselekves(x, "végzett a pénzpakolással");
				continue;
			}
			if((JatekosZsak[x][0] + penz) >= MAXZSAKPENZ)
				penz = MAXZSAKPENZ - JatekosZsak[x][0];

			Format(uzi, "~y~+~g~%d", penz);
			GameTextForPlayer(x, uzi, 950, 5);
			JatekosZsak[x][0] += penz;
			BankSzef -= penz;
		}
	}
	else if(hol == BANKRABLAS_KASZ)
	{
        PlayerForeach(x)
		{
			if(!IsValidPlayerID(x) || !Logged(x) || IsPlayerNPC(x) || Rabol[x] != BANKRABLAS_KASZ || BankRobVan[BANKRABLAS_KUL] != 0) continue;
			if(!PlayerToPoint(8, x, 2144.5344,1640.4023,993.6882) && !PlayerToPoint(8, x, 2904.8376,-2033.7015,1957.3275))
			{
				Msg(x, "Elmentél a helyrõl, a pakolást befejezted!");
				Rabol[x] = 0;
				continue;
			}
			if(BankRobIdo[BANKRABLAS_KASZ] < 1 && VisszaKRobbol < 1)
			{
				Rabol[x] = 0;
				UnFreeze(x);
				ClearAnimations(x);
				continue;
			}
			penz = Rand(1000, 15000);
			if(JatekosZsak[x][0] >= MAXZSAKPENZ)
			{
				Rabol[x] = 0;
				UnFreeze(x);
				ClearAnimations(x);
				Cselekves(x, "zsákja megtelt");
				Msg(x, "A zsákod megtelt!");
				continue;
			}
			if(BankSzef < penz && BankSzef > 0)
				penz = BankSzef;
			else if(BankSzef <= 0)
			{
				Rabol[x] = 0;
				UnFreeze(x);
				ClearAnimations(x);
				Msg(x, "A pénz elfogyott a bankszéfben");
				Cselekves(x, "végzett a pénzpakolással");
				continue;
			}
			if((JatekosZsak[x][0] + penz) >= MAXZSAKPENZ)
				penz = MAXZSAKPENZ - JatekosZsak[x][0];

			Format(uzi, "~y~+~g~%d", penz);
			GameTextForPlayer(x, uzi, 950, 5);
			JatekosZsak[x][0] += penz;
			BankSzef -= penz;
		}
	}
	else if(hol == BANKRABLAS_LOT)
	{
        PlayerForeach(x)
		{
			if(!IsValidPlayerID(x) || !Logged(x) || IsPlayerNPC(x) || Rabol[x] != BANKRABLAS_LOT || BankRobVan[BANKRABLAS_KUL] != 0) continue;
			if(!PlayerToPoint(8, x, 242.2162,240.3088,1397.7683))
			{
				Msg(x, "Elmentél a helyrõl, a pakolást befejezted!");
				Rabol[x] = 0;
				continue;
			}
			if(BankRobIdo[BANKRABLAS_LOT] < 1 && VisszaKRobbol < 1)
			{
				Msg(x, "A rablás idõ letelt!");
				Rabol[x] = 0;
				UnFreeze(x);
				ClearAnimations(x);
				continue;
			}
			penz = Rand(0, 3);
			if(JatekosZsak[x][1] >= MAXZSAKARANY)
			{
				Rabol[x] = 0;
				UnFreeze(x);
				ClearAnimations(x);
				Cselekves(x, "zsákja megtelt");
				Msg(x, "A zsákod megtelt!");
				continue;
			}
			if(BankSzef < penz && BankSzef > 0)
				penz = BankSzef;
			else if(BankSzef <= 0)
			{
				Rabol[x] = 0;
				UnFreeze(x);
				ClearAnimations(x);
				Msg(x, "A pénz elfogyott a bankszéfben");
				Cselekves(x, "végzett a pénzpakolással");
				continue;
			}
			if((JatekosZsak[x][1] + penz) >= MAXZSAKARANY)
				penz = MAXZSAKARANY - JatekosZsak[x][1];

			Format(uzi, "~y~+~g~%d", penz);
			GameTextForPlayer(x, uzi, 950, 5);
			JatekosZsak[x][1] += penz;
			BankSzef -= penz;
		}
	}
	return 1;
}

stock Rand(szam1, szam2)
{
	new szam;
	szam += szam1;
	szam += random(szam2 - szam1);
	return szam;
}

stock BankSzamla(szam)
{
	new player = NINCS;
	PlayerForeach(x)
	{
		if(PlayerInfo[x][pBankSzamlaSzam] == szam)
		{
			player = x;
			break;
		}
	}

	return player;
}

stock ParkCarToKereskedo(car)
{
	new Float:x, Float:y, Float:z;
	x = -2053.8244015 + random(80);
	y = -191.9231375 - random(80);
	z = 38.0;
	
	GetDamageStat(CarInfo[car][cId]);
	
	ParkCar(car, x, y, z, 0, 0);
	return 1;
}

stock ParkCar(kocsi, Float:posx, Float:posy, Float:posz, Float:posa = 0.0, VW = 0, Int = 0)
{
	CarInfo[kocsi][cLocationx] = posx;
	CarInfo[kocsi][cLocationy] = posy;
	CarInfo[kocsi][cLocationz] = posz;
	CarInfo[kocsi][cAngle] = posa;
	CarInfo[kocsi][cDimenzio][0] = VW;
	CarInfo[kocsi][cDimenzio][1] = Int;

	CarUpdate(kocsi, CAR_X, CAR_Y, CAR_Z, CAR_Angle, CAR_Dimenzio, CAR_Tuning);
	
	DestroyVehicle(CarInfo[kocsi][cId]);
	CarInfo[kocsi][cId] = UjKocsi(CarInfo[kocsi][cModel], CarInfo[kocsi][cLocationx], CarInfo[kocsi][cLocationy], CarInfo[kocsi][cLocationz], CarInfo[kocsi][cAngle], CarInfo[kocsi][cColorOne], CarInfo[kocsi][cColorTwo]);

	KocsiRespawnWR(CarInfo[kocsi][cId]);
	return 1;
}

stock GetDamageStat(vehicleid)
{
	new kocsi = IsAVsKocsi(vehicleid);
	if(kocsi != NINCS)
	{
		if(BenzinesKocsi(kocsi)) JarmuUzemanyag[vehicleid] = Gas[kocsi][0];
		else if(DieselesKocsi(kocsi)) JarmuUzemanyag[vehicleid] = Gas[kocsi][1];
	
		GetVehicleHealth(vehicleid, DamageHP_VS[kocsi]);
		GetVehicleDamageStatus(vehicleid, DamageStat_VS[kocsi][0], DamageStat_VS[kocsi][1], DamageStat_VS[kocsi][2], DamageStat_VS[kocsi][3]);
	}
	else
	{
		if(BenzinesKocsi(vehicleid)) JarmuUzemanyag[vehicleid] = Gas[vehicleid][0];
		else if(DieselesKocsi(vehicleid)) JarmuUzemanyag[vehicleid] = Gas[vehicleid][1];
		
		//RepairVehicle(vehicleid);
		GetVehicleHealth(vehicleid, DamageHP[vehicleid]);
		GetVehicleDamageStatus(vehicleid, DamageStat[vehicleid][0], DamageStat[vehicleid][1], DamageStat[vehicleid][2], DamageStat[vehicleid][3]);
	}	
	return 1;
}

stock SetDamageStat(vehicleid)
{
	new kocsi = IsAVsKocsi(vehicleid);
	if(kocsi != NINCS)
	{
		if(BenzinesKocsi(kocsi)) Gas[kocsi][0] = JarmuUzemanyag[vehicleid];
		else if(DieselesKocsi(kocsi)) Gas[kocsi][1] = JarmuUzemanyag[vehicleid];
		
		SetVehicleHealth(vehicleid, DamageHP_VS[kocsi]);
		UpdateVehicleDamageStatus(vehicleid, DamageStat_VS[kocsi][0], DamageStat_VS[kocsi][1], DamageStat_VS[kocsi][2], DamageStat_VS[kocsi][3]);
	}
	else
	{
		if(BenzinesKocsi(vehicleid)) Gas[vehicleid][0] = JarmuUzemanyag[vehicleid];
		else if(DieselesKocsi(vehicleid)) Gas[vehicleid][1] = JarmuUzemanyag[vehicleid];
		
		SetVehicleHealth(vehicleid, DamageHP[vehicleid]);
		UpdateVehicleDamageStatus(vehicleid, DamageStat[vehicleid][0], DamageStat[vehicleid][1], DamageStat[vehicleid][2], DamageStat[vehicleid][3]);
	}
	return 1;
}

stock Locker(car)
{
	if(Locked(car))
		LockCar(car);
	else
		UnLockCar(car);

	return 1;
}

stock UjKapu(Float:posx, Float:posy, Float:posz, Float:rX, Float:rY, Float:rZ, Float:zposx, Float:zposy, Float:zposz, Float:zrX, Float:zrY, Float:zrZ, model, tulaj[], frakcio = 0)
{
	new ureshely = UresKapuHely();
	if(ureshely == -1)
		return false;

	KapuInfo[ureshely][Van] = 1;

	new nev[MAX_PLAYER_NAME];
	if(frakcio != 0)
		format(nev, sizeof(nev), "Nincs");
	else
	    format(nev, sizeof(nev), "%s",tulaj);

    KapuInfo[ureshely][kPos][0] = posx;
	KapuInfo[ureshely][kPos][1] = posy;
	KapuInfo[ureshely][kPos][2] = posz;

	KapuInfo[ureshely][kAngle][0] = rX;
	KapuInfo[ureshely][kAngle][1] = rY;
	KapuInfo[ureshely][kAngle][2] = rZ;

	KapuInfo[ureshely][kTulaj] = nev;
	KapuInfo[ureshely][kFrakcio] = frakcio;
 	KapuInfo[ureshely][kObjectID] = model;
 	//KapuInfo[ureshely][kJelszo] = "0000";
	format(KapuInfo[ureshely][kJelszo],32, "0000");

    KapuInfo[ureshely][kNyitottPos][0] = zposx;
	KapuInfo[ureshely][kNyitottPos][1] = zposy;
	KapuInfo[ureshely][kNyitottPos][2] = zposz;
	
	KapuInfo[ureshely][kNyitottAngle][0] = zrX;
	KapuInfo[ureshely][kNyitottAngle][1] = zrY;
	KapuInfo[ureshely][kNyitottAngle][2] = zrZ;
	
	KapuInfo[ureshely][kAutomata] = 0;
			
	new nevek[256], adatok[384];
	nevek = "Id, Model, PosX, PosY, PosZ, RotX, RotY, RotZ, Frakcio, Tulaj, Zarva, zPosX, zPosY, zPosZ, zRotX, zRotY, zRotZ";
	Format(adatok, "'%d','%d','%f','%f','%f','%f','%f','%f','%d','%s','0','%f','%f','%f','%f','%f','%f'", ureshely,model,posx, posy, posz, rX, rY, rZ,frakcio,nev,zposx,zposy,zposz,zrX,zrY,zrZ);

	Mysql_Insert(SQL_DB_Kapuk, nevek, adatok);

	KapuInfo[ureshely][kObject] = CreateDynamicObject(model, posx, posy, posz, rX, rY, rZ);

	return true;
}

stock UjCar(Float:posx, Float:posy, Float:posz, Float:posa, szin1, szin2, model = 410, ara = 1000000, zarva = 0)
{
	new ureshely = UresKocsiHely();
	if(ureshely == -1)
		return 0;

	CarInfo[ureshely][Van] = 1;

	new nev[MAX_PLAYER_NAME];
	format(nev, sizeof(nev), "Nincs_Tulaj");

	CarInfo[ureshely][cOwned] = 0;
	CarInfo[ureshely][cOwner] = nev;
	CarInfo[ureshely][cModel] = model;
	CarInfo[ureshely][cValue] = ara;
	CarInfo[ureshely][cLocationx] = posx;
	CarInfo[ureshely][cLocationy] = posy;
	CarInfo[ureshely][cLocationz] = posz;
	CarInfo[ureshely][cAngle] = posa;
	CarInfo[ureshely][cColorOne] = szin1;
	CarInfo[ureshely][cColorTwo] = szin2;
	CarInfo[ureshely][cLock] = zarva;
	CarInfo[ureshely][cDimenzio][0] = 0;
	CarInfo[ureshely][cDimenzio][1] = 0;
	
	new nevek[100], adatok[256];
	nevek = "Id, Eladva, Tulaj, Model, Ara, LocX, LocY, LocZ, Angle, Szin1, Szin2, Zarva";
	Format(adatok, "'%d', '0', '%s', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d'", ureshely, nev, model, ara, posx, posy, posz, posa, szin1, szin2, zarva);

	Mysql_Insert(SQL_DB_Kocsik, nevek, adatok);

	CarInfo[ureshely][cId] = UjKocsi(model, posx, posy, posz, posa, szin1, szin2);
	
	gCarLock[CarInfo[ureshely][cId]] = zarva;
	
	return CarInfo[ureshely][cId];
}

stock Automatakereskedo(playerid, Float:posx, Float:posy, Float:posz, Float:posa, model, szin1, szin2)
{
	new ureshely = UresKocsiHely();
	
	if(ureshely == -1) return 0;

	CarInfo[ureshely][Van] = 1;

	new nev[MAX_PLAYER_NAME];		
	Format(nev, "%s", PlayerName(playerid, true));
	strmid(CarInfo[ureshely][cOwner], nev, 0, strlen(nev), 25);

	new ara = 1;

	CarInfo[ureshely][cOwned] = 1;
	CarInfo[ureshely][cOwner] = nev;
	CarInfo[ureshely][cModel] = model;
	CarInfo[ureshely][cValue] = 1;
	CarInfo[ureshely][cLocationx] = posx;
	CarInfo[ureshely][cLocationy] = posy;
	CarInfo[ureshely][cLocationz] = posz;
	CarInfo[ureshely][cAngle] = posa;
	CarInfo[ureshely][cColorOne] = szin1;
	CarInfo[ureshely][cColorTwo] = szin2;
	CarInfo[ureshely][cLock] = 0;
	CarInfo[ureshely][cDimenzio][0] = 0;
	CarInfo[ureshely][cDimenzio][1] = 0;
	
	new nevek[100], adatok[256];
	nevek = "Id, Eladva, Tulaj, Model, Ara, LocX, LocY, LocZ, Angle, Szin1, Szin2, Zarva";
	Format(adatok, "'%d', '1', '%s', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d'", ureshely, nev, model, ara, posx, posy, posz, posa, szin1, szin2, 1);

	Mysql_Insert(SQL_DB_Kocsik, nevek, adatok);
	
	CarUpdate(ureshely, CAR_Owned, CAR_Owner);
	CorrectPlayerDatas(playerid);

	CarInfo[ureshely][cId] = UjKocsi(model, posx, posy, posz, posa, szin1, szin2);
	
	gCarLock[CarInfo[ureshely][cId]] = 0;
	
	MaxUzemanyag(ureshely);
	
	return CarInfo[ureshely][cId];
}

stock UjFrakcioJarmu(frakcio, Float:posx, Float:posy, Float:posz, Float:posa, model, szin1, szin2)
{
	new ureshely = UresKocsiHely();
	
	if(ureshely == -1) return 0;

	CarInfo[ureshely][Van] = 1;

	new tulaj[24];
	Format(tulaj, "Frakcio_%d", frakcio);
	//Format(tulaj, "%s%d", "Frakcio_", frakcio);	
	strmid(CarInfo[ureshely][cOwner], tulaj, 0, strlen(tulaj), 25);
	
	new ara = 1;

	CarInfo[ureshely][cOwned] = 1;
	CarInfo[ureshely][cOwner] = tulaj;
	CarInfo[ureshely][cModel] = model;
	CarInfo[ureshely][cValue] = 1;
	CarInfo[ureshely][cLocationx] = posx;
	CarInfo[ureshely][cLocationy] = posy;
	CarInfo[ureshely][cLocationz] = posz;
	CarInfo[ureshely][cAngle] = posa;
	CarInfo[ureshely][cColorOne] = szin1;
	CarInfo[ureshely][cColorTwo] = szin2;
	CarInfo[ureshely][cLock] = 0;
	CarInfo[ureshely][cFrakcio] = frakcio;
	CarInfo[ureshely][cDimenzio][0] = 0;
	CarInfo[ureshely][cDimenzio][1] = 0;
	
	new nevek[100], adatok[256];
	nevek = "Id, Eladva, Tulaj, Model, Ara, LocX, LocY, LocZ, Angle, Szin1, Szin2, Zarva, Frakcio";
	Format(adatok, "'%d', '1', '%s', '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d'", ureshely, tulaj, model, ara, posx, posy, posz, posa, szin1, szin2, 1, frakcio);

	Mysql_Insert(SQL_DB_Kocsik, nevek, adatok);
	
	CarUpdate(ureshely, CAR_Owned, CAR_Owner);

	if(frakcio == LMUNKA_LSPD)
		CarInfo[ureshely][cId] = UjKocsi(model, posx, posy, posz, posa, szin1, szin2, true);
	else
		CarInfo[ureshely][cId] = UjKocsi(model, posx, posy, posz, posa, szin1, szin2);
	
	gCarLock[CarInfo[ureshely][cId]] = 0;
	
	FrakcioInfo[CarInfo[ureshely][cFrakcio]][fJarmuvekSzama] ++;
	
	MaxUzemanyag(ureshely);
	
	return CarInfo[ureshely][cId];
}

stock GetVehicleModelName(id, bool:carid = false)
{
	new str[64];
	if(!carid)
	{
		if(id >= 400)
			id -= 400;
		Format(str, "%s", vehName[id]);
	}
	else
		Format(str, "%s", vehName[GetVehicleModel(id) - 400]);
	return str;
}

stock UresRaktarHely()
{
	new hely = NINCS;
	for(new x = 1; x < sizeof(Raktar); x++)
	{
		if(Raktar[x][Van] != 1)
		{
			hely = x;
			break;
		}
	}
	return hely;
}

stock UresATMHely()
{
	new hely = NINCS;
	for(new x = 1; x < sizeof(ATM); x++)
	{
		if(ATM[x][Van] != 1)
		{
			hely = x;
			break;
		}
	}
	return hely;
}

stock UresVasarlasHely()
{
	new hely = NINCS;
	for(new x = 1; x < MAX_BUYS; x++)
	{
		if(buInfo[x][buID] == NINCS)
		{
			hely = x;
			break;
		}
	}
	return hely;
}

stock UresBizniszHely()
{
	new hely = NINCS;
	for(new x = 1; x < MAX_BIZ; x++)
	{
		if(bInfo[x][bID] == NINCS)
		{
			hely = x;
			break;
		}
	}
	return hely;
}

stock UresPickupHely()
{
	new hely = NINCS;
	for(new x = 1; x < sizeof(Pickup); x++)
	{
		if(Pickup[x][Van] != 1)
		{
			hely = x;
			break;
		}
	}
	return hely;
}

stock UresFulkeHely()
{
	new hely = NINCS;
	for(new x = 1; x < sizeof(Fulke); x++)
	{
		if(Fulke[x][Van] != 1)
		{
			hely = x;
			break;
		}
	}
	return hely;
}

stock UresKapuHely()
{
	new hely = NINCS;
	for(new x = 1; x < sizeof(KapuInfo); x++)
	{
		if(KapuInfo[x][Van] == 0)
		{
			hely = x;
			break;
		}
	}
	return hely;
}

stock UresKocsiHely()
{
	new hely = NINCS;
	for(new x = 0; x < sizeof(CarInfo); x++)
	{
		if(CarInfo[x][Van] == 0)
		{
			hely = x;
			break;
		}
	}
	return hely;
}

stock UresTaskaHely()
{
	new hely = NINCS;
	for(new x = 1; x < sizeof(TaskaInfo); x++)
	{
		if(TaskaInfo[x][Van] == 0)
		{
			hely = x;
			break;
		}
	}
	return hely;
}

stock Tele(playerid, Float:posx, Float:posy, Float:posz, kocsival = true, VW = NINCS, Int = NINCS)
{
	if(!IsValidPlayerID(playerid) || IsPlayerNPC(playerid) || !Logged(playerid)) return 1;
	new kocsi, trailer,model;
	kocsi = GetPlayerVehicleID(playerid);
	model = GetVehicleModel(playerid);
	if(kocsival && GetPlayerState(playerid) == 2 || model == 441)
	{
		SetVehiclePos(kocsi, posx, posy, posz);
		trailer = GetVehicleTrailer(kocsi);
		if(trailer != 0) AttachTrailerToVehicle(trailer, kocsi);
	}
	else
		SetPlayerPos(playerid, posx, posy, posz);
		
	if(VW != NINCS)
	{
	    PlayerForeach(i)
	    {
	        if(IsPlayerInVehicle(i,kocsi))
                SetPlayerVirtualWorld(i, VW);
	    }
		SetPlayerVirtualWorld(playerid, VW);
		if(kocsi != 0)
		{
			SetVehicleVW(kocsi, VW);
			if(trailer != 0)
				SetVehicleVW(trailer, VW);
		}
	}
	if(Int != NINCS)
	{
	    PlayerForeach(i)
	    {
	        if(IsPlayerInVehicle(i,kocsi))
                SetPlayerInterior(i, Int);
	    }
		SetPlayerInterior(playerid, Int);
		if(kocsi != 0)
		{
			SetVehicleInterior(kocsi, Int);
			if(trailer != 0)
				SetVehicleInterior(trailer, Int);
		}
	}		
	return 1;
}

stock SzintLepeshezKell(playerid)
{
	new 
		lvl = Szint(playerid),
		kell = 0,
		alapora = 8,
		szorzo = 4
	;
	
	if(lvl == 1) kell = alapora;
	else if(lvl == 2) kell = alapora + szorzo;
	else kell = alapora + ((lvl - 2) * szorzo);
	
	return kell;
}

stock Szint(playerid) return PlayerInfo[playerid][pLevel];
stock JatszottOraja(playerid) return PlayerInfo[playerid][pConnectTime];

stock CheckSzint(playerid)
{
	if(Szint(playerid) < 1) PlayerInfo[playerid][pLevel] = 1;
	
	new 
		lvl = Szint(playerid),
		jatszottora = JatszottOraja(playerid)
	;

	if(jatszottora == SzintLepeshezKell(playerid))
	{
		MsgFormat(playerid, "Gratulálok! Szintet léphetsz! Következõ szint: %d. (/levelup)", lvl + 1);
		PlayerInfo[playerid][pSzintetLephet] = 1;
	}
	
	return 1;
}

stock SzovegEllenorzes(playerid, szoveg[], parancs[], tipus = ELLENORZES_HIRDETES)
{
	new talalt, hol;
	if(tipus == ELLENORZES_SZIDAS || tipus == ELLENORZES_MINDKETTO)
	{
		new cenzurak_x[27][] = {
		"fasz", "buzi", "geci", "cigány",
		"cigany", "zsidó", "zsido", "szop",
		"kurva", "baz", "bmeg", "b+", "anyád",
		"anyad", "köcsög", "low", "noob", "láma",
		"lama", "szar", "azdmeg", "jóédeskurvaanyád",
		"frici", "cheat", "fuck", "dick", "ass"
		};
		for(new x = 0; x < sizeof(cenzurak_x); x++)
		{
			hol = strfind(szoveg, cenzurak_x[x], true);
			if(hol != NINCS)
			{
				if(egyezik(cenzurak_x[x], "fasz"))
				{
					if(strfind(szoveg, "fasz", true) != NINCS && strfind(szoveg, "fasza", true) == NINCS)
					{
						talalt = 1;
						break;
					}
				}
				else
				{
					talalt = 1;
					break;
				}
			}
		}
		if(talalt)
		{
		    Msg(playerid, "Ne szidj OOC!");
			return 1;
		}
	}
	return 0;
}

stock Suttog2(Float:radi, playerid, string[], egyeb=BESZED_NINCS)
{
	if(IsValidPlayerID(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		
		new szinkaki = COLOR_FADE1;
		//new nyelv = PlayerInfo[playerid][pNyelv];
		
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		new egyebstr[64], nev[260];
		if(egyeb== BESZED_NINCS) { egyebstr = ""; }
        else if(egyeb== BESZED_TELEFON) { egyebstr = "[Telefon]"; }
		else if(egyeb==BESZED_JARMUBEN) { egyebstr = "[Jármûben]"; }
		else if(egyeb==BESZED_JARMUBOL) { egyebstr = "[Jármûbol]"; }
		else if(egyeb==BESZED_RADIO) { egyebstr = "[Rádió]"; }
		else if(egyeb==BESZED_OOCRADIO) { egyebstr = "(( [OOC-R]"; }
		else if(egyeb==BESZED_OOC) { egyebstr = "(( [OOC]"; }
		
		if(PlayerInfo[playerid][pHamisNev] != 0) {
			Format(nev,"%s",PlayerInfo[playerid][pHamisNev]);
		} else if(Maszk[playerid] != 0) {
			Format(nev, "%s", MaszkString(playerid));
		} else {
			Format(nev, "%s", PlayerName(playerid));
		}
		
		if(egyeb == BESZED_OOC || egyeb == BESZED_OOCRADIO)
		{
			format(string,strlen(string)+10,"%s ))",string);
		}
		PlayerForeach(i)
		{
			if(!IsValidPlayerID(i) || GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(i)) continue;
			
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);
			
			if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				szinkaki = COLOR_FADE1;
			else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				szinkaki = COLOR_FADE2;
			else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				szinkaki = COLOR_FADE3;
			else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				szinkaki = COLOR_FADE4;
			else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				szinkaki = COLOR_FADE5;
			else
				continue;
			
			szinkaki = COLOR_WHITE;
			
			PlayerForeach(p)
			{
				if(Poloska[p] == NINCS || !PoloskaHallgat[p] || p == i) continue;
				if(Poloska[p] == i)
				{
					SendFormatMessage(p,COLOR_YELLOW,"*p* %s: %s",nev,string);
				}
			}
			#if defined BARATSYST
				if(IsBarat(playerid,i) && PlayerInfo[playerid][pHamisNev] == 0 || playerid == i && PlayerInfo[playerid][pHamisNev] == 0 || LMT(i,PlayerInfo[playerid][pMember]) && PlayerInfo[playerid][pHamisNev] == 0)
					nev = PlayerName(playerid);
				else
					Format(nev,"[%s]Valaki",RandomPlayerID[playerid]);
			#endif
			
			szinkaki = COLOR_YELLOW;
			//new language = PlayerInfo[playerid][pNyelv];
			if(strlen(string) < STRINGTORDELES)
			{
				/*if(playerid != i)
				{*/
					/*if(language != PlayerInfo[i][pNyelv]) {
						SendFormatMessage(i, szinkaki, "%s%s suttogja [%s]: ?????? ((Nem érted...))", egyebstr, nev, Nyelvek[language][1]);
					} else {*/
						SendFormatMessage(i, szinkaki, "%s%s suttogja: %s", egyebstr, nev, string);
					/*}*/						
				/*}
				else if(playerid == i) {
					SendFormatMessage(playerid, szinkaki, "%sTe mondod [%s]: %s", egyebstr, Nyelvek[language][1], string);
				}*/
			}
			if(strlen(string) > (STRINGTORDELES-1))
			{
				new nagystring[STRINGTORDELES-1];
				strmid(nagystring, string, (STRINGTORDELES-1), strlen(string));
				strdel(string, (STRINGTORDELES-1), strlen(string));
				
				/*if(playerid != i)
				{*/
					/*if(language != PlayerInfo[i][pNyelv]) {
						SendFormatMessage(i, szinkaki, "%s%s suttogja [%s]: ?????? ((Nem érted...))", egyebstr, nev, Nyelvek[language][1]);
					} else {*/
						SendFormatMessage(i, szinkaki, "%s%s suttogja: %s...", egyebstr, nev, string);
						SendFormatMessage(i, szinkaki, "...%s (( %s ))", nagystring, nev);
					/*}*/
				/*}
				else if(playerid == i)
				{
					SendFormatMessage(i, szinkaki, "%sTe suttogod [%s]: %s...", egyebstr, Nyelvek[language][1], string);
					SendFormatMessage(i, szinkaki, "...%s (( Te ))", nagystring);
				}*/
			}
		}
	}
	return 1;
}

stock Suttog(Float:radi, playerid, string[], egyeb=BESZED_NINCS)
{
	if(IsValidPlayerID(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		
		new szinkaki = COLOR_FADE1;
		//new nyelv = PlayerInfo[playerid][pNyelv];
		
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		new egyebstr[64], nev[260];
		if(egyeb== BESZED_NINCS) { egyebstr = ""; }
        else if(egyeb== BESZED_TELEFON) { egyebstr = "[Telefon]"; }
		else if(egyeb==BESZED_JARMUBEN) { egyebstr = "[Jármûben]"; }
		else if(egyeb==BESZED_JARMUBOL) { egyebstr = "[Jármûbol]"; }
		else if(egyeb==BESZED_RADIO) { egyebstr = "[Rádió]"; }
		else if(egyeb==BESZED_OOCRADIO) { egyebstr = "(( [OOC-R]"; }
		else if(egyeb==BESZED_OOC) { egyebstr = "(( [OOC]"; }
		
		if(PlayerInfo[playerid][pHamisNev] != 0) {
			Format(nev,"%s",PlayerInfo[playerid][pHamisNev]);
		} else if(Maszk[playerid] != 0) {
			Format(nev, "%s", MaszkString(playerid));
		} else {
			Format(nev, "%s", PlayerName(playerid));
		}
		
		if(egyeb == BESZED_OOC || egyeb == BESZED_OOCRADIO)
		{
			format(string,strlen(string)+10,"%s ))",string);
		}
		PlayerForeach(i)
		{
			if(!IsValidPlayerID(i) || GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(i)) continue;
			
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);
			
			if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				szinkaki = COLOR_FADE1;
			else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				szinkaki = COLOR_FADE2;
			else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				szinkaki = COLOR_FADE3;
			else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				szinkaki = COLOR_FADE4;
			else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				szinkaki = COLOR_FADE5;
			else
				continue;
			
			szinkaki = COLOR_WHITE;
			
			PlayerForeach(p)
			{
				if(Poloska[p] == NINCS || !PoloskaHallgat[p] || p == i) continue;
				if(Poloska[p] == i)
				{
					SendFormatMessage(p,COLOR_YELLOW,"*p* %s: %s",nev,string);
				}
			}
			#if defined BARATSYST
				if(IsBarat(playerid,i) && PlayerInfo[playerid][pHamisNev] == 0 || playerid == i && PlayerInfo[playerid][pHamisNev] == 0 || LMT(i,PlayerInfo[playerid][pMember]) && PlayerInfo[playerid][pHamisNev] == 0)
					nev = PlayerName(playerid);
				else
					Format(nev,"[%s]Valaki",RandomPlayerID[playerid]);
			#endif
			
			szinkaki = COLOR_YELLOW;
			//new language = PlayerInfo[playerid][pNyelv];
			if(strlen(string) < STRINGTORDELES)
			{
				/*if(playerid != i)
				{*/
					/*if(language != PlayerInfo[i][pNyelv]) {
						SendFormatMessage(i, szinkaki, "%s%s suttogja [%s]: ?????? ((Nem érted...))", egyebstr, nev, Nyelvek[language][1]);
					} else {*/
						SendFormatMessage(i, szinkaki, "%s%s suttogja: %s", egyebstr, nev, string);
					/*}*/						
				/*}
				else if(playerid == i) {
					SendFormatMessage(playerid, szinkaki, "%sTe mondod [%s]: %s", egyebstr, Nyelvek[language][1], string);
				}*/
			}
			if(strlen(string) > (STRINGTORDELES-1))
			{
				new nagystring[STRINGTORDELES-1];
				strmid(nagystring, string, (STRINGTORDELES-1), strlen(string));
				strdel(string, (STRINGTORDELES-1), strlen(string));
				
				/*if(playerid != i)
				{*/
					/*if(language != PlayerInfo[i][pNyelv]) {
						SendFormatMessage(i, szinkaki, "%s%s suttogja [%s]: ?????? ((Nem érted...))", egyebstr, nev, Nyelvek[language][1]);
					} else {*/
						SendFormatMessage(i, szinkaki, "%s%s suttogja: %s...", egyebstr, nev, string);
						SendFormatMessage(i, szinkaki, "...%s (( %s ))", nagystring, nev);
					/*}*/
				/*}
				else if(playerid == i)
				{
					SendFormatMessage(i, szinkaki, "%sTe suttogod [%s]: %s...", egyebstr, Nyelvek[language][1], string);
					SendFormatMessage(i, szinkaki, "...%s (( Te ))", nagystring);
				}*/
			}
		}
	}
	return 1;
}

stock IsSzidas(szoveg[])
{
	new cenzurak_x[21][] =
	{
		"fasz", "buzi", "geci", "cigány", "cigany",
		"zsidó", "zsido", "szop", "kurva", "baz",
		"bmeg", "b+", "anyád", "anyad", "köcsög",
		"kocsog", "low", "noob", "kva", "basz", "dög"
	};
	new talalt;
	
	for(new x = 0; x < sizeof(cenzurak_x); x++)
	{
		new hol = strfind(szoveg, cenzurak_x[x], true);
		if(hol != NINCS)
		{
			if(egyezik(cenzurak_x[x], "fasz"))
			{
				if(strfind(szoveg, "fasz", true) != NINCS && strfind(szoveg, "fasza", true) == NINCS)
				{
					talalt = 1;
					break;
				}
			}
			else
			{
				talalt = 1;
				break;
			}
		}
	}
	if(talalt)
	{
		return true;
	}
	return false;
}

stock Civil(playerid)
{
	if(PlayerInfo[playerid][pMember] == 0 && PlayerInfo[playerid][pLeader] == 0) return 1;
	return 0;
}

/*#include <System/Script/Mobile/variable>
#include <System/Script/Mobile/function>*/

stock SeeRPGKick(playerid, miert[], kivolt = NINCS)
{
	if(IsPlayerNPC(playerid)) return 1;
	new ki[MAX_PLAYER_NAME], jatekos[MAX_PLAYER_NAME];

	if(kivolt == NINCS || !IsValidPlayerID(kivolt) || IsPlayerNPC(kivolt))
		ki = "a rendszer";
	else
		ki = PlayerName(kivolt);

	jatekos = PlayerName(playerid);
	
	PlayerTextFormat(playerid, "%s kickelve lett %s által!", jatekos, ki);
	AdminCMD(PlayerText[playerid]);
	PlayerTextFormat(playerid, "Oka: %s", miert);
	AdminCMD(PlayerText[playerid]);
	
	KickEx(playerid);
	return 1;
}

stock SeeRPGBan(playerid, ido, banner = NINCS, oka[], bool:ipban = false, bool:kick = true)
{
	new query[256], orok[10], tipus[5], cim[30], bannolo[30];

	if(ido <= 0) orok = "i";
	else orok = "n";

	if(ipban) tipus = "ip";
	else tipus = "nev";

	if(ipban) strmid(cim, PlayerIP(playerid), 0, strlen(PlayerIP(playerid)), 30);
	else strmid(cim, PlayerName(playerid, true), 0, strlen(PlayerName(playerid, true)), 30);

	if(banner == NINCS) bannolo = "Rendszer";
	else strmid(bannolo, PlayerName(banner, true), 0, strlen(PlayerName(banner, true)), 30);
	
	if(!BanParancsKikuledve[playerid])
	{
		format(query, sizeof(query), "INSERT INTO bans (Tipus, Cim, Ido, Orok, Bannolta, Oka, Datum) VALUES('%s', '%s', '%d', '%s', '%s', '%s', '%s')", tipus, cim, ido, orok, bannolo, oka, gettime());
		mysql_query(query);
		BanParancsKikuledve[playerid] = true;
	}
	
	if(kick)
	{
		KickEx(playerid);
	}

	return 1;
}

fuggveny PingChecker()
{
	new MaxPing = 500;
	PlayerForeach(x)
	{
		if(IsValidPlayerID(x))
		{
			new GetPing = GetPlayerPing(x);
			if((GetPing > MaxPing) && (GetPing != 65535) && !Admin(x))
			{
				PlayerTextFormat(x, "Túl nagy a pinged ezért kickel a rendszer! [%d/%d]", MaxPing, GetPing);
				Msg(x, PlayerText[x]);
				KickEx(x);
			}
		}
	}
	return 1;
}

stock IsMafia(frakcio)
{
	if(frakcio == LMUNKA_CAMORRA || frakcio == LMUNKA_UM) return true;
	return false;
}
stock MafiaTag(playerid)
{
	if(LMT(playerid,LMUNKA_CAMORRA) || LMT(playerid,LMUNKA_UM))
	    return 1;
	return 0;
}
stock IsBanda(frakcio)
{
	if(frakcio == LMUNKA_GSF || frakcio == LMUNKA_SURENOS || frakcio == LMUNKA_LK || frakcio == LMUNKA_BALLAS)
	    return true;
	return false;
}
stock BandaTag(playerid)
{
	if(LMT(playerid,LMUNKA_GSF) || LMT(playerid,LMUNKA_SURENOS) || LMT(playerid,LMUNKA_LK) || LMT(playerid,LMUNKA_BALLAS))
	    return 1;
	return 0;
}
stock LegalisSzervezet(id)
{
	if(id == LMUNKA_LSPD || id == LMUNKA_FBI || id == LMUNKA_MENTO ||
		id == LMUNKA_ALLAM || id == LMUNKA_RIPORTER || id == LMUNKA_TAXI || id == LMUNKA_SZERELO ||
		id == LMUNKA_KATONA || id == LMUNKA_OKTATO || id == LMUNKA_NAV || id == LMUNKA_TUZOLTO ||
		id == LMUNKA_SWAT)
		return 1;
	return 0;
}
stock LegalisSzervezetTagja(playerid)
{
	if(LMT(playerid, LMUNKA_LSPD) || LMT(playerid, LMUNKA_FBI) || LMT(playerid, LMUNKA_MENTO) ||
		LMT(playerid, LMUNKA_ALLAM) || LMT(playerid, LMUNKA_RIPORTER) || LMT(playerid, LMUNKA_TAXI) || LMT(playerid, LMUNKA_SZERELO) ||
		LMT(playerid, LMUNKA_KATONA) || LMT(playerid, LMUNKA_OKTATO) || LMT(playerid, LMUNKA_NAV) || LMT(playerid, LMUNKA_TUZOLTO) ||
		LMT(playerid, LMUNKA_SWAT))
		return 1;
	return 0;
}
/*stock LegalisnakTiltottFegyver(playerid)
{
	if(LMT(playerid, LMUNKA_MENTO) || LMT(playerid, LMUNKA_ALLAM) || LMT(playerid, LMUNKA_RIPORTER) || 
		LMT(playerid, LMUNKA_TAXI) || LMT(playerid, LMUNKA_SZERELO) || LMT(playerid, LMUNKA_OKTATO) || LMT(playerid, LMUNKA_TUZOLTO) ||
		return 1;
	return 0;
}*/

stock RegisztraltSQLUser(string[])
{
	new where[40];
	Format(where, "nev='%s'", string);
	if(Mysql_Num(SQL_DB_Player, where) >= 1)
		return 1;
	return 0;
}
stock KocsiSofor(kocsi)
{
	new player = NINCS;
	PlayerForeach(p)
	{
		if(IsPlayerInVehicle(p, kocsi) && GetPlayerState(p) == PLAYER_STATE_DRIVER)
		{
			player = p;
			break;
		}
	}
	return player;
}

public RaceTimer()
{
	new string[16], uzenet[128];
	for(new race = 0; race < RACESLOTOK; race++)
	{
		if(RaceInfo[race][rStatusz] == RACE_INDUL)
		{
			RaceInfo[race][rIndul] --;
			new time = RaceInfo[race][rIndul];
			
			if((time >= 1800 && time % 1800 == 0) || (time >= 600 && time < 1800 && time % 600 == 0))
			{
				format(uzenet, 128, "A %s %s múlva indul! (( /gps race %d ))", RaceInfo[race][rNev], FormatTime(time), race);
				if(time > 1800) PlayerForeach(x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					{
						SendClientMessage(x, COLOR_WHITE, "========== Los Santos Verseny Csapat ==========");
						SendClientMessage(x, COLOR_PIROS, uzenet);
					}
				}
				else PlayerForeach(x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					{
						SendClientMessage(x, COLOR_WHITE, "========== Los Santos Verseny Csapat ==========");
						SendClientMessage(x, COLOR_LIGHTRED, uzenet);
					}
				}
			}
			else if(time >= 120 && time < 600 && time % 60 == 0)
			{
				if(time > 300) format(uzenet, 128, "A %s %s múlva indul! (( /gps race %d ))", RaceInfo[race][rNev], FormatTime(time), race);
				else format(uzenet, 128, "A %s %s múlva indul! (( /gps race %d )) - Mostmár lehet jelentkezni! (( /race join ))", RaceInfo[race][rNev], FormatTime(time), race);
				
				PlayerForeach(x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					{
						SendClientMessage(x, COLOR_WHITE, "========== Los Santos Verseny Csapat ==========");
						SendClientMessage(x, COLOR_ORANGE, uzenet);
					}
				}
			}
			else if(time == 60)
			{
				format(uzenet, 128, "A %s egy perc mulva indul! (( /gps race %d )) - Ha még nem jelentkeztél, jelentkezz! (( /race join ))", RaceInfo[race][rNev], race);
				PlayerForeach(x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					{
						SendClientMessage(x, COLOR_WHITE, "========== Los Santos Verseny Csapat ==========");
						SendClientMessage(x, COLOR_YELLOW, uzenet);
					}
				}
			}
			else if(time == 30)
			{
				format(uzenet, 128, "A %s 30 másodperc mulva indul! (( /gps race %d )) - Ha még nem jelentkeztél, jelentkezz! (( /race join ))", RaceInfo[race][rNev], race);
				PlayerForeach(x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					{
						SendClientMessage(x, COLOR_WHITE, "========== Los Santos Verseny Csapat ==========");
						SendClientMessage(x, COLOR_YELLOW, uzenet);
					}
				}
			}
			else if(time <= 15 && time > 0)
			{
				PlayerForeach(x)
				{
					if(PlayerRaceInfo[x][xVersenyen] != race) continue;

					if(time > 10)
						Format(string, "~g~%d", time);
					else if(time <= 10 && time >= 8)
						Format(string, "~g~~h~%d", time);
					else if(time <= 7&& time >= 6)
						Format(string, "~y~%d", time);
					else if(time <= 5 && time >= 4)
						Format(string, "~r~~h~~h~%d", time);
					else if(time <= 3 && time >= 2)
						Format(string, "~r~~h~%d", time);
					else if(time < 2)
						Format(string, "~r~%d", time);
					GameTextForPlayer(x, string, 925, 5);
					if(time == 5)
					    TogglePlayerControllable(x, false);
					if(time == 3 || time == 2 || time == 1)
						PlayerPlaySound(x, 1056, 0.0,0.0,0.0);
				}
			}
			else if(time <= 0)
			{
				format(uzenet, 128, "A %s elindult!", RaceInfo[race][rNev]);
				PlayerForeach(x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == race || !LegalisSzervezetTagja(x))
					{
						SendClientMessage(x, COLOR_WHITE, "========== Los Santos Verseny Csapat ==========");
						SendClientMessage(x, COLOR_LIGHTGREEN, uzenet);
					}
				}
				
				RaceInfo[race][rStatusz] = RACE_ELINDULT;
				PlayerForeach(x)
				{
					if(PlayerRaceInfo[x][xVersenyen] == NINCS)
					{
						DisablePlayerRaceCheckpoint(x);
						continue;
					}
					Format(string, "~r~~h~Go!!", time);
					GameTextForPlayer(x, string, 3000, 5);
					PlayerPlaySound(x, 1057, 0.0,0.0,0.0);
					TogglePlayerControllable(x, true);
					
					PlayerRaceInfo[x][xCP] = RACE_CP_START;

					PlayerRaceInfo[x][xIdo] = 0;
					SetPlayerRaceCP(x);

				}
			}
		}
		else if(RaceInfo[race][rStatusz] == RACE_ELINDULT)
		{
			PlayerForeach(x)
			{
				if(PlayerRaceInfo[x][xVersenyen] != race) continue;
				PlayerRaceInfo[x][xIdo]++;
			}
		}
	}

	return 1;
}

stock SetPlayerRaceCP(playerid)
{
	new cp = PlayerRaceInfo[playerid][xCP], race = PlayerRaceInfo[playerid][xVersenyen];
	if(cp == RACE_CP_START)
	{
		if(RaceInfo[race][rCP] > 0)
			SetPlayerRaceCheckpoint(playerid, 0, RaceStart[race][0], RaceStart[race][1], RaceStart[race][2], RaceCP[race][0][0], RaceCP[race][0][1], RaceCP[race][0][2], RACECPMERET);
		else
			SetPlayerRaceCheckpoint(playerid, 0, RaceStart[race][0], RaceStart[race][1], RaceStart[race][2], RaceCel[race][0], RaceCel[race][1], RaceCel[race][2], RACECPMERET);
	}
	else if(cp == RACE_CP_CEL)
		SetPlayerRaceCheckpoint(playerid, 1, RaceCel[race][0], RaceCel[race][1], RaceCel[race][2], 0.0, 0.0, 0.0, RACECPMERET);
	else
	{
		if((cp+1) >= RaceInfo[race][rCP])
			SetPlayerRaceCheckpoint(playerid, 0, RaceCP[race][cp][0], RaceCP[race][cp][1], RaceCP[race][cp][2], RaceCel[race][0], RaceCel[race][1], RaceCel[race][2], RACECPMERET);
		else
			SetPlayerRaceCheckpoint(playerid, 0, RaceCP[race][cp][0], RaceCP[race][cp][1], RaceCP[race][cp][2], RaceCP[race][cp+1][0], RaceCP[race][cp+1][1], RaceCP[race][cp+1][2], RACECPMERET);
	}

	return 1;
}

stock RaceStartnal(playerid)
{
	for(new x = 0; x < RACESLOTOK; x++)
	{
		if(RaceInfo[x][rStatusz] == RACE_INDUL)
		{
			if(PlayerToPoint(15, playerid, RaceStart[x][0], RaceStart[x][1], RaceStart[x][2]))
				return x;
		}
	}
	return -1;
}

stock FormatTime(ido)
{
	new string[128];
	if(ido < 60)
		Format(string, "%d másodperc", ido);
	else if(ido >= 60 && ido < 3600)
	{
		if(ido % 60 == 0)
			Format(string, "%d perc", (ido / 60));
		else
			Format(string, "%d perc és %d másodperc", floatround((ido / 60), floatround_floor), (ido % 60));
	}
	else if(ido >= 3600)
	{
		if(ido % 3600 == 0)
			Format(string, "%d óra", (ido / 3600));
		else
			Format(string, "%d óra és %d perc", floatround((ido / 3600), floatround_floor), floatround((ido % 3600) / 60));
	}

	return string;
}

stock HibasRaceSlot(playerid, slot)
{
	if(slot < 0 || slot > (RACESLOTOK - 1))
	{
		SendFormatMessage(playerid, COLOR_LIGHTRED, "Hibás RaceSlot! A RaceSlot minimum 0 és max %d lehet!", (RACESLOTOK - 1));
		return 1;
	}
	return 0;
}

stock HibasBizNev(string[])
{
	if(strfind(string, "|") != -1 || strfind(string, "'") != -1 || strfind(string, "\"") != -1 )
		return 1;
	return 0;
}

fuggveny VanBenneSzam(string[])
{
	if(strfind(string, "0") != NINCS || strfind(string, "1") != NINCS || strfind(string, "2") != NINCS ||
	strfind(string, "3") != NINCS || strfind(string, "4") != NINCS || strfind(string, "5") != NINCS ||
	strfind(string, "6") != NINCS || strfind(string, "7") != NINCS || strfind(string, "8") != NINCS ||
	strfind(string, "9") != NINCS || strfind(string, "/") != NINCS || strfind(string, "\"") != NINCS || 
	strfind(string, "~") != NINCS || strfind(string, "'") != NINCS || strfind(string, ";") != NINCS) return true;
	return false;
}
fuggveny ReloadAllCarDataSQL()
{
	new string[129], ahol[32];
	VehicleForeach(carid)
	{
		new vs = IsAVsKocsi(carid);
	    if(carid == INVALID_VEHICLE_ID || !IsVehicleConnected(carid) || vs == NINCS) continue;

		Format(ahol, "id='%d'", vs);

		string = Mysql_Get(SQL_DB_Kocsik, "Tulaj", ahol);
		strmid(CarInfo[vs][cOwner], string, 0, strlen(string), 50);
	}
}
fuggveny UserCPUpdater()
{
    ReloadAllCarDataSQL();
}

fuggveny CorrectPlayerDatas(playerid)
{
	new x, talalat;

	talalat = 0;
	for(x = 0; x < sizeof(CarInfo); x++)
	{
		if(CarInfo[x][Van] == 1 && CarInfo[x][cOwned] && egyezik(CarInfo[x][cOwner], PlayerName(playerid, true)))
		{
			if(talalat == 0) {
				PlayerInfo[playerid][pPcarkey] = x;
			} else if(talalat == 1) {
				PlayerInfo[playerid][pPcarkey2] = x;
			} else {
				CarInfo[x][cOwned] = 0;
				//CarUpdate(x, "Eladva='%d'", CarInfo[x][cOwned]);
				CarUpdate(x, CAR_Owned);
				ParkCarToKereskedo(x);
			}
			talalat++;
		}
	}
	
	if(talalat == 0)
	{
		PlayerInfo[playerid][pPcarkey] = NINCS;
		PlayerInfo[playerid][pPcarkey2] = NINCS;
	}
	else if(talalat == 1) {
		PlayerInfo[playerid][pPcarkey2] = NINCS;
	}

	talalat = 0;
	for(x = 0; x < sizeof(HouseInfo); x++)
	{
		if(HouseInfo[x][Van] == 1 && HouseInfo[x][hOwned] && egyezik(HouseInfo[x][hOwner], PlayerName(playerid, true)))
		{
			if(talalat == 0) {
				PlayerInfo[playerid][pPhousekey] = x;
			} else if(talalat == 1) {
				PlayerInfo[playerid][pPhousekey2] = x;
			} else {
				HazElad(x);
			}
			talalat++;
		}
	}
	
	if(talalat == 0)
	{
		PlayerInfo[playerid][pPhousekey] = NINCS;
		PlayerInfo[playerid][pPhousekey2] = NINCS;
	}
	else if(talalat == 1) {
		PlayerInfo[playerid][pPhousekey2] = NINCS;
	}
	
	new haza = PlayerInfo[playerid][pPhousekey];
	if(haza != NINCS)
	{
		if(haza > MAXHAZ || HouseInfo[haza][Van] != 1 || HouseInfo[haza][hOwned] != 1)
			PlayerInfo[playerid][pPhousekey] = NINCS;
	}

	return 1;
}

fuggveny BizbeVan(playerid)
{
	return 1;
}

fuggveny BiznelVan(playerid)
{
	return 1;
}
stock Szazalekszamitas(szam,hanyszazalek)
{
	return szam * (hanyszazalek/100);
}
stock BizPenz(biz, penz, playerid = NINCS)
{

	return 1;
}

public nnikapcsolodas(playerid)
{
	if(PlayerInfo[playerid][pNIDTag] != 0)
		SendClientMessage(playerid, COLOR_YELLOW, "Connected to NNI / NID Server. Lehetõségek:");
	else
		SendClientMessage(playerid, COLOR_YELLOW, "Connected to NNI Server. Lehetõségek:");
	
	SendClientMessage(playerid, Pink, "| - Jelszó - Clear");
	SendClientMessage(playerid, Pink, "| - Beépülés - Álnév");
	SendClientMessage(playerid, Pink, "| - Aktiválás - Deaktiválás");
	SendClientMessage(playerid, Pink, "| - Lehallgatás - Lefoglalás");
	SendClientMessage(playerid, Pink, "| - Lenyomozás - Adatnézés");
	if(PlayerInfo[playerid][pNIDTag] != 1)
	{
		SendClientMessage(playerid, Pink, "| - Rendõrfelfüggesztés - Bankszámla");
	}
	else
	{
		SendClientMessage(playerid, COLOR_PIROS, "| - Felfüggesztés - Bankszámla");
	}
	Msg(playerid, "				Logout");
	Belepve[playerid] = 1;
	return 1;
}

stock AdminName(playerid)
{
	new name[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pAdminAlnevBe]) {
		strmid(name, PlayerInfo[playerid][pAdminAlnev], 0, strlen(PlayerInfo[playerid][pAdminAlnev]), 25);
	} else {
		//strmid(name, PlayerInfo[playerid][pNev], 0, strlen(PlayerInfo[playerid][pNev]), 25);
		format(name, MAX_PLAYER_NAME, "%s", PlayerName(playerid));
	}
	return name;
}

fuggveny Nevvaltas(playerid, ujnev[])
{
	new x;

	for(x = 0; x < sizeof(HouseInfo); x++)
	{
		if(HouseInfo[x][hOwned] && strlen(HouseInfo[x][hOwner]) > 0 && egyezik(PlayerName(playerid, true), HouseInfo[x][hOwner]))
		{
			//HazUpdate(x, "Tulaj='%s'", ujnev);
			strmid(HouseInfo[x][hOwner], ujnev, 0, strlen(ujnev), 255);
			HazUpdate(x, HAZ_Owner);
		}
	}
	for(x = 0; x < sizeof(CarInfo); x++)
	{
		if(CarInfo[x][cOwned] && strlen(CarInfo[x][cOwner]) > 0 && egyezik(PlayerName(playerid, true), CarInfo[x][cOwner]))
		{
			//CarUpdate(x, "Tulaj='%s'", ujnev);
			strmid(CarInfo[x][cOwner], ujnev, 0, strlen(ujnev), 255);
			CarUpdate(x, CAR_Owner);
		}
	}
	for(x = 0; x < sizeof(Raktar); x++)
	{
		if(!egyezik(Raktar[x][rTulaj], "Nincs_Tulaj") && egyezik(PlayerName(playerid, true), Raktar[x][rTulaj]))
		{
			//CarUpdate(x, "Tulaj='%s'", ujnev);
			strmid(Raktar[x][rTulaj], ujnev, 0, strlen(ujnev), 255);
			RaktarUpdate(x,RAKTAR_Tulaj);
		}
	}

	strmid(PlayerInfo[playerid][pNev], ujnev, 0, strlen(ujnev), 25);
	PlayerUpdate(playerid, "Nev='%s'", ujnev);
	SetPlayerName(playerid, ujnev);
	CorrectPlayerDatas(playerid);
}

stock VezetekNev(playerid)
{
    new namestring[2][MAX_PLAYER_NAME];
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, MAX_PLAYER_NAME);
    split(name, namestring, '_');
    return namestring[0];
}

stock MysqlGetPass(playerid)
{
	if(Registered(playerid) != 2) return 1;

	new 
		pass[149],
		keres[149], 
		ahol[149]
	;
	
	keres = "Pass";	
	Format(ahol, "id='%d'", PlayerInfo[playerid][pID]);	
	pass = Mysql_Get(SQL_DB_Player, keres, ahol);	
	strmid(PlayerInfo[playerid][pKey], pass, 0, strlen(pass), 149);	
	/* ############################################################## */
	keres = "SecurityPass";
	Format(ahol, "id='%d'", PlayerInfo[playerid][pID]);	
	pass = Mysql_Get(SQL_DB_Player, keres, ahol);	
	strmid(PlayerInfo[playerid][pSecurityKey], pass, 0, strlen(pass), 149);
	/* ############################################################## */
	keres = "UtoljaraAktivIP";
	Format(ahol, "id='%d'", PlayerInfo[playerid][pID]);	
	pass = Mysql_Get(SQL_DB_Player, keres, ahol);	
	strmid(PlayerInfo[playerid][pUtolsoLoginIP], pass, 0, strlen(pass), 16);
	
	return 1;

}
stock MysqlGetMail(playerid)
{
	if(Registered(playerid) != 2) return 1;

	new pass[129],keres[24], ahol[20];
	keres = "UserCP_Email";
	Format(ahol, "id='%d'", PlayerInfo[playerid][pID]);
	
	pass = Mysql_Get(SQL_DB_Player, keres, ahol);
	
	strmid(PlayerInfo[playerid][pEmail], pass, 0, strlen(pass), 128);

	return 1;

}
stock MysqlGetPlayerId(playerid)
{
	new id, keres[5], ahol[40];
	keres = "id";
	Format(ahol, "nev='%s'", PlayerName(playerid, true));

	if(Mysql_Num(SQL_DB_Player, ahol) > 0)
		id = strval(Mysql_Get(SQL_DB_Player, keres, ahol));
	else
		id = NINCS;

	PlayerInfo[playerid][pID] = id;

	return 1;
}

stock MysqlGetPlayerULI(playerid)
{
	new ido, keres[16], ahol[40];
	keres = "UtoljaraAktiv";
	Format(ahol, "nev='%s'", PlayerName(playerid, true));

	if(Mysql_Num(SQL_DB_Player, ahol) > 0)
		ido = strval(Mysql_Get(SQL_DB_Player, keres, ahol));
	else
		ido = NINCS;

	PlayerInfo[playerid][pUtolsoLoginIdo] = ido;

	return 1;
}

stock MysqlFinalUpdate(query[], sqlid, bool:log=false)
{
	new string[64];
	Format(string, "WHERE id = '%d'", sqlid);
	strcat(query, string, MAX_MYSQL_STRING);
	mysql_query(query);
	mysql_free_result();
	if(log)
		printf("mysql_query vegrehajtva:\n%s",query);
		
	return 1;
}

stock MysqlFinalUpdate2(query[], elsodlegeskulcs[], sqlid)
{
	new string[64];
	Format(string, "WHERE %s = '%d'", elsodlegeskulcs, sqlid);
	strcat(query, string, MAX_MYSQL_STRING);
	mysql_query(query);
	mysql_free_result();	
	return 1;
}

stock MysqlUpdateFlo(query[], nev[], Float:ertek)
{
	if(strfind(query, "=", true) != -1)
		strcat(query, ", ", MAX_MYSQL_STRING);
	new string[32];
	Format(string, "%s='%.3f'", nev, ertek);
	strcat(query, string, MAX_MYSQL_STRING);
	return 1;
}

stock MysqlUpdateStr(query[], nev[], ertek[])
{
	if(strfind(query, "=", true) != -1)
		strcat(query, ", ", MAX_MYSQL_STRING);
	new string[256];
	Format(string, "%s='%s'", nev, ertek);
	strcat(query, string, MAX_MYSQL_STRING);
	return 1;
}

stock MysqlUpdateInt(query[], nev[], ertek)
{
	if(strfind(query, "=", true) != -1)
		strcat(query, ", ", MAX_MYSQL_STRING);
	new string[32];
	Format(string, "%s='%d'", nev, ertek);
	strcat(query, string, MAX_MYSQL_STRING);
	return 1;
}

stock MoneyTrans(kitol, kinek, mennyit)
{
	if(!IsValidPlayerID(kitol) || !IsValidPlayerID(kinek)) return 1;

	GiveMoney(kitol, -mennyit);
	GiveMoney(kinek, mennyit);

	return 1;
}


stock SetMoney(playerid, money)
{
	PlayerInfo[playerid][pCash] = money;
	return 1;
}

stock ResetMoney(playerid)
{
	PlayerInfo[playerid][pCash] = 0;
	return 1;
}
stock GetMoney(playerid, bool:BankKartya=false)
{
	if(!BankKartya)
		return PlayerInfo[playerid][pCash];
	else
	{
	    if(BKUse[playerid] == 1)
	        return PlayerInfo[playerid][pAccount];
		else
		    return PlayerInfo[playerid][pCash];
	}
}
stock GiveMoney(playerid, money, bool:BankKartya=false)
{
    if(!BankKartya)
		PlayerInfo[playerid][pCash] += money;
	else
	{
	    if(BKUse[playerid] == 1)
		{
			PlayerInfo[playerid][pAccount] += money;
			MsgFormat(playerid, "A bankkártyádról vásároltál! Az összeget levontuk a számládról! Vásárolt Összeg: $%d", money * (-1));
			BKUse[playerid] = 0;
			return 1;
		}
		else
		{
			PlayerInfo[playerid][pCash] += money;
			MsgFormat(playerid, "Kézpénzben fizettél! Vásárolt összeg: $%d", money * (-1));
		}
	}
	return 1;
}

public SzerverJelszo()
{
	new pw[24];
    GetServerVarAsString("password", pw, sizeof(pw));
	if(!egyezik(pw, ""))
	{
		printf("Szerver jelszó: %s", pw)
	}	
	return 1;
}

public AutomataSzerverNev()
{
	if(AutomataSzerverNevTiltas == BE) return 1;
	
	if(!GameModeBetoltve)
	{
		SendRconCommand("hostname A mod betoltese folyamatban van...");
		return 1;
	}
	
	new szoveg[48], szervernev[72];
	
	if(karbantartas) szoveg = "| KARBANTARTÁS";
	else if(SzerverTipus == SZT_TESZT) szoveg = "| TESZT SZERVER";
	
	Format(szervernev, "hostname Los Santos Roleplay [%s] %s", OFFICIALWEB, szoveg);
	SendRconCommand(szervernev);
	
	return 1;
}

stock VeszLeallitas(hibakod, bool:kickall = true)
{
	new szoveg[64];
	Format(szoveg, "hostname -!- FIGYELEM: VÉSZLEÁLLÍTÁS! HIBAKÓD: %d -!-", hibakod);
	SendRconCommand(szoveg);	
	
	if(kickall) { KickAllPlayer(); }
	AutomataSzerverNevTiltas = BE;
	
	GameModeExit();
}

fuggveny Bortonben(playerid)
{
	if(PlayerInfo[playerid][pJailed] > 0) return 1;
	else return 0;
}

fuggveny Bilincs(playerid, bilincs)
{
	if(bilincs == 0)
	{
		PlayerCuffed[playerid] = 0;
		UnFreeze(playerid);
		TogglePlayerControllable(playerid, 1);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		if(IsPlayerAttachedObjectSlotUsed(playerid, SLOT_KEZ)) RemovePlayerAttachedObject(playerid, SLOT_KEZ);
	}
	else if(bilincs == 1)
	{
		PlayerCuffed[playerid] = 1;
		TogglePlayerControllable(playerid, 0);
	}
	else if(bilincs == 2)
	{
		PlayerCuffed[playerid] = 2;
		TogglePlayerControllable(playerid, 1);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
		SetPlayerAttachedObject(playerid, SLOT_KEZ, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	}
	return 1;
}

public RandomHirdetes()
{
	new hirdetes, fajl[64], string[32], szoveg[256], mehet = 1, x = 1, osszes;
	format(fajl, sizeof(fajl), "Config/hirdetesek.cfg");

	while(mehet)
	{
		format(string, sizeof(string), "hirdetes%d", x);
		
		if(!dini_Isset(fajl, string)) { osszes = x; mehet = 0; }
		x++;
	}

	if(osszes > 0)
	{
		hirdetes = 1 + random(osszes-1);
		format(string, sizeof(string), "hirdetes%d", hirdetes);
		szoveg = dini_Get(fajl, string);

		SendFormatMessageToAll(0xBFFF00FF, "{%s}%s", COLOR_SEEBLUE, szoveg);
	}
	//SetTimer("BandaInfo",10000, false);
	return 1;
}

stock Cselekves(playerid, cselekves[], valaki = 0, bool:OOC = false)
{
	new string[128];
	if(valaki == 1 || Maszk[playerid] != 0) {
		format(string, sizeof(string), "* Valaki %s", cselekves);
	}
	if(valaki == 0)
	{
		if(PlayerInfo[playerid][pHamisNev] == 0)
			format(string, sizeof(string), "* %s %s", PlayerName(playerid), cselekves);
		else
			format(string, sizeof(string), "* %s %s", PlayerInfo[playerid][pHamisNev], cselekves);
	}	
	if(valaki == 2 || valaki == NINCS) {
		format(string, sizeof(string), "* %s", cselekves);
	}
	if(OOC) {
		format(string, sizeof(string), "(( OOC: %s ))", string);
	}

	Format(string, "{%s}%s", COLOR_CSELEKVES, string);
	
	#if defined KELLAUTOMATACSELEKVES
		if(!Csendvan) {
			ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		}
	#endif
	return 1;
}

public HaznalVan(playerid)
{
	new haz = -1;

	for(new x = 0; x < sizeof(HouseInfo); x++)
	{
		if(PlayerToPoint(2, playerid, HouseInfo[x][hEntrancex], HouseInfo[x][hEntrancey], HouseInfo[x][hEntrancez]))
		{
			haz = x;
			break;
		}
	}

	return haz;
}

stock GetPlayerZoneName(playerid)
{
	new szoveg[30], zone[MAX_ZONE_NAME];
	GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
	Format(szoveg, "%s", zone);
	return szoveg;
}

fuggveny ShowLoginDraw(playerid, bool:allapot)
{
	if(allapot == true)
	{
		SelectTextDraw(playerid, COLOR_LOGINDRAW);
		for(new i=0; i < MAX_LOGINDRAW; i++) 
		{ 
			PlayerTextDrawShow(playerid, LoginDraw[playerid][i]); 
		}
	}
	else
	{
		for(new i=0; i < MAX_LOGINDRAW; i++) 
		{ 
			PlayerTextDrawHide(playerid, LoginDraw[playerid][i]);
			PlayerTextDrawDestroy(playerid, LoginDraw[playerid][i]);
		}
	}
	return 1;
}

fuggveny AFKKick(playerid)
{
	HideDialog(playerid);
	if(Admin(playerid, 1)) Msg(playerid, "Mivel te admin vagy használd a /adminafk parancsot!")
	SeeRPGKick(playerid, "[A]way [F]rom [K]eyboard (/afk)", NINCS);
	return 1;
}

fuggveny AFKEllenorzo()
{
	PlayerForeach(x)
	{
		if(!IsValidPlayerID(x) || IsPlayerNPC(x) || !Logged(x) || AFK[x] || Admin(x, SZUPERADMIN) || NemMozoghat(x)) continue;
		new Float:px, Float:py, Float:pz;

		GetPlayerPos(x, px, py, pz);
		if(px == AFKPos[x][0] && py == AFKPos[x][1] && pz == AFKPos[x][2])
			AFKIdo[x] += 5;
		else
            AFKIdo[x] = 0;

		AFKPos[x][0] = px;
		AFKPos[x][1] = py;
		AFKPos[x][2] = pz;

		if(AFKIdo[x] > MAXAFKIDO && AFKDialogShowing[x] == 0)
		{
		    AFKDialogShowing[x] = 1;
		    ShowPlayerDialog(x, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "{FF0000}Anti AFK", "Haló, itt vagy?\n{FF0000}Ha 20mp-en belül nem reagálsz, kickellek!", "Igen", "Nem");
		    AFKTimer[x] = SetTimerEx("AFKKick",20000, false, "d",x);
		}
	}
	return 1;
}

public AfkChecker()
{
    AFKEllenorzo();
	PlayerForeach(x)
	{
		if(TrafiPax[x][tAktiv])
		{
			if((!PlayerToPoint(5, x, TrafiPax[x][tPosX], TrafiPax[x][tPosY], TrafiPax[x][tPosZ]) && PlayerInfo[x][pMobiltrafi] != 1) || (!IsPlayerInAnyVehicle(x) && PlayerInfo[x][pMobiltrafi] == 1))
			{
			    if(IsValidDynamic3DTextLabel(TrafiPax[x][t3D])) {
					DestroyDynamic3DTextLabel(TrafiPax[x][t3D]);
				}
				TrafiPax[x][tAktiv] = false;
			//	TrafiPax[x][t3D] = NINCS;
				Msg(x, "Mivel elmentél a helyedrõl, a trafipax törölve");
			}
		}
	}
	return 1;
}

stock Mysql_Insert(tabla[], adatok[], ertekek[])
{
	new query[512];
	Format(query, "INSERT INTO %s (%s) VALUES(%s)", tabla, adatok, ertekek);
	mysql_query(query);
	return 1;
}

stock Mysql_Num(tabla[], ahol[])
{
	new query[256], num;
	Format(query, "SELECT * FROM `%s` WHERE %s", tabla, ahol);
	mysql_query(query);
	mysql_store_result();
	num = mysql_num_rows();
	mysql_free_result();
	return num;
}

stock Mysql_Num_Rows(const tabla[], const by)
{
	new query[256], num;
	Format(query, "SELECT * FROM `%s` WHERE ORDER BY %s", tabla, by);
	mysql_query(query);
	mysql_store_result();
	num = mysql_num_rows();
	mysql_free_result();
	return num;
}

stock Mysql_Get(tabla[], nev[], ahol[])
{
	new query[256], ertek[129];//, result[128];
	Format(query, "SELECT `%s` FROM `%s` WHERE %s LIMIT 1", nev, tabla, ahol);
	mysql_query(query);
	mysql_store_result();
	mysql_fetch_row(ertek);
	mysql_free_result();
	//strmid(result, ertek, 0, strlen(ertek));
	return ertek;
}

stock Mysql_Set(tabla[], ertekek[], ahol[])
{
	new query[256];
	Format(query, "UPDATE `%s` SET %s WHERE %s", tabla, ertekek, ahol);
	mysql_query(query);
	return 1;
}

stock MysqlKapcsolodas(bool:muvelet) // MySql kapcsolódás
{
	if(!Mysql && muvelet == true)
	{
		new isReal = IsRealServer();
		if(isReal == 1)
		{
			if(SzerverTipus == SZT_NORMAL)
			{
				mysql_connect("127.0.0.1", "samp", "0K6k5k5Vj6ksaX6D", DATABASENAME);
				print("MySQL mód: PUBLIC");
			}
			else if(SzerverTipus == SZT_TESZT)
			{
				mysql_connect("127.0.0.1", "samp", "0K6k5k5Vj6ksaX6D", DATABASENAME);
				print("MySQL mód: TESZT");
			}
			else
			{
				mysql_close();
				SzerverStop("MySQL mód: ISMERETLEN");
			}
		}
		else if(isReal == -1)
			FatalServerStopping();
	}
	//mysql_connect(SQL_Host, SQL_User, SQL_Jelszo, SQL_Adatbazis);	
	return 1;
}

fuggveny MySQL_Ping_Check()
{
	if(!mysql_ping())
    {
		SzerverStop("MySQL: A kapcsolat nem jött létre a kiszolgálóval!");
    }
	return 1;
}

fuggveny LSBankChck()
{
	if(BankRobVan[BANKRABLAS_KUL] && BankC2 == 0)
	{
		UpdateDynamic3DTextLabelText(BankC23D, COLOR_GREEN, "Fal átrobbantva!\n/enter");
	}
	else
	{
		if(BankC2 != NINCS)
		{
			new c2str[64];
			Format(c2str, "Rablás (Bombák szerelése)folyamatban...\nMég %d C2",(LSROBC2-BankC2));
			UpdateDynamic3DTextLabelText(BankC23D, COLOR_GREEN, c2str);
		}
		else
		{
			UpdateDynamic3DTextLabelText(BankC23D, COLOR_GREEN, "A c2-ket még fel kell szerelni");
		}
	}
}

stock TeljesDatum()
{
	new date[24];
	Format(date, "%s.%s.%s. %s:%s", Time("ev"), Time("honap"), Time("nap"), Time("ora"), Time("perc"));
	return date;
}

public MysqlEllenorzes()
{
	LSBankChck();
	//IbizaDjAnim();
	if(Mysql)
	{
		//if(MysqlHiba % 2 == 1) mysql_reload();

		if(mysql_ping() == -1)
			MysqlHiba++;
		else
			MysqlHiba = 0;

		if(MysqlHiba >= 10)
		{
			SendClientMessageToAll(COLOR_LIGHTRED, "Hiba az adatbázis tárolónál, ezért a szerver leáll...");
			SetTimer("Stop", 3000, false);
		}
	}
}

stock egyezik(string1[], string2[], bool:betumeretmindegy = true)
{
	return !strcmp(string1, string2, betumeretmindegy);
}

stock RendorKocsi(car)
{
	new vs = IsAVsKocsi(car);
	if(vs == NINCS)
	{
		if(car >= LKocsik[LMUNKA_LSPD-1][0] && car <= LKocsik[LMUNKA_LSPD-1][1]) return 1;
		if(car >= LKocsik[LMUNKA_FBI-1][0] && car <= LKocsik[LMUNKA_FBI-1][1]) return 1;
		if(car >= LKocsik[LMUNKA_NAV-1][0] && car <= LKocsik[LMUNKA_NAV-1][1]) return 1;
		if(car >= LKocsik[LMUNKA_KATONA-1][0] && car <= LKocsik[LMUNKA_KATONA-1][1]) return 1;
		if(car >= LKocsik[LMUNKA_SWAT-1][0] && car <= LKocsik[LMUNKA_SWAT-1][1]) return 1;
	}
	else
	{
		if(CarInfo[vs][cFrakcio] == LMUNKA_LSPD) return 1;
		if(CarInfo[vs][cFrakcio] == LMUNKA_FBI) return 1;
		if(CarInfo[vs][cFrakcio] == LMUNKA_NAV) return 1;
		if(CarInfo[vs][cFrakcio] == LMUNKA_KATONA) return 1;
		if(CarInfo[vs][cFrakcio] == LMUNKA_SWAT) return 1;
	}
	return 0;
}

stock MsgDialog(playerid, cim[], torzs[], gomb1[])
{
	if(!IsValidPlayerID(playerid)) return 1;
	ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, cim, torzs, gomb1, "");
	return 1;
}

stock HibaDialog(playerid, torzs[], dialog=DIALOG_NINCS)
{
	if(!IsValidPlayerID(playerid)) return 1;
	ShowPlayerDialog(playerid, dialog, DIALOG_STYLE_MSGBOX, "Hiba!", torzs, "Bezár", "");
	return 1;
}

stock Msg(playerid, const szoveg[], const color[] = COLOR_MSG)
{
	if(!IsValidPlayerID(playerid)) return 0;
	if(strlen(szoveg) > 144) return SCM(playerid, COLOR_PIROS, "Hiba! Túl sok karakter az üzenetben!");
	SendFormatMessage(playerid, COLOR_WHITE, "{%s}(( {%s}%s {%s}))", color, COL_WHITE, szoveg, color);
	//SendFormatMessage(playerid, COLOR_WHITE, "{%s}%s", color, szoveg);	
	return 1;
}

stock MsgToAll(szoveg[], kellOOCjel = true)
{
	PlayerForeach(x)
	{
		if(kellOOCjel)
			Msg(x, szoveg, true);
		else
			Msg(x, szoveg, false);
	}
}

stock Msg2(playerid, szoveg[], szin = COLOR_WHITE)
{
	if(!IsValidPlayerID(playerid)) return 1;
	SendClientMessage(playerid, szin, szoveg);
	return 1;
}

stock Online(nev[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i) && Logged(i) || IsPlayerNPC(i))
			if(strcmp(PlayerName(i), nev, false) == 0)
				return 1;
	}
	return 0;
}

stock NameTag(playerid, bool:be)
{
	PlayerForeach(x)
	{
		if(!IsValidPlayerID(x) || !Logged(x) || playerid == x || IsPlayerNPC(x)) continue;
		ShowPlayerNameTagForPlayer(playerid, x, be);
	}
	return 1;
}

stock NameTagEngem(playerid, bool:be)
{
	PlayerForeach(x)
	{
		if(!IsValidPlayerID(x) || !Logged(x) || playerid == x || IsPlayerNPC(x)) continue;
		ShowPlayerNameTagForPlayer(x, playerid, be);
	}
	return 1;
}
fuggveny RaktarnalVan(playerid)
{
	new atm = -1;
	for(new x = 0; x < MAX_RAKTAR; x++)
	{
		if(PlayerToPoint(4.5, playerid,  Raktar[x][aPosX], Raktar[x][aPosY], Raktar[x][aPosZ]))
		{
			atm = x;
			break;
		}
	}

	return atm;
}

public ATMnelVan(playerid)
{
	new atm = -1;
	for(new x = 0; x < MAX_ATM; x++)
	{
		if(PlayerToPoint(4.5, playerid,  ATM[x][aPosX], ATM[x][aPosY], ATM[x][aPosZ]))
		{
			atm = x;
			break;
		}
	}

	return atm;
}

fuggveny HazElottVan(playerid, Float:tavolsag)
{
	new haz = NINCS;
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][Van] != 1) continue;
		if(PlayerToPoint(tavolsag, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
		{
			haz = h;
			break;
		}
	}
	return haz;
}

fuggveny IntibeVan(playerid)
{
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	    return true;
	else if(IsAt(playerid,IsAt_Bank)
	|| IsAt(playerid,IsAt_Pizzazo)||
	IsAt(playerid,IsAt_Csirkes)||
	IsAt(playerid,IsAt_Korhaz)||
	IsAt(playerid,IsAt_Etterem)||
	IsAt(playerid,IsAt_LSPDBorton)||
	IsAt(playerid,IsAt_Haz)||
	IsAt(playerid,IsAt_Pizzazo))
	    return true;

	return false;
}
public IsAt(playerid, hol)
{
	new Int = GetPlayerInterior(playerid);
	if(hol == IsAt_Csokiautomata)
	{
		if(PlayerToPoint(3, playerid, 1634.0973,-2238.2817,13.5078) ||
		PlayerToPoint(3, playerid, 2481.7778,-1958.6669,13.5817) ||
		PlayerToPoint(3, playerid, 2140.2891,-1161.9464,23.9922) ||
		PlayerToPoint(3, playerid, 2154.1648,-1016.1125,62.8740) ||
		PlayerToPoint(3, playerid, 662.2329,-551.3305,16.3359) ||
		PlayerToPoint(3, playerid, 361.5373,159.5193,1008.3828) || 
		PlayerToPoint(3, playerid, 500.2959,-2.3686,1000.6797) || 
		PlayerToPoint(3, playerid, -17.5830,-90.5193,1003.5469) ||
		PlayerToPoint(3, playerid, -36.3786,-57.1332,1003.5469) ||
		PlayerToPoint(3, playerid, -1349.3627,494.0229,11.1953) ||
		PlayerToPoint(3, playerid, -1819.9491,341.9710,-41.7493) ||
		PlayerToPoint(3, playerid, -2229.0271,287.2406,35.3203))
			return 1;
	}
	if(hol == IsAt_McDonald)
	{
		if(PlayerToPoint(2.0, playerid, 375.730133, -67.441177, 1001.507812) && Int == 10)
			return 1;
	}
	else if(hol == IsAt_Bank)
	{
		if(PlayerToPoint(15.0, playerid, 327.7227, 130.9936, 1007.9657) || PlayerToPoint(30, playerid, 1415.951171,-988.971191,1639.980224))
			return 1;
	}
	else if(hol == IsAt_Pizzazo)
	{
		if(PlayerToPoint(3.0, playerid, 375.997497, -118.807800, 1001.499511) && Int == 5)
			return 1;
	}
	else if(hol == IsAt_Csirkes)
	{
		if(PlayerToPoint(2.5, playerid, 369.596130, -6.029798, 1001.858886) && Int == 9)
			return 1;
	}
	else if(hol == IsAt_Korhaz)
	{
		if(PlayerToPoint(35.0, playerid, 1112.79, -1281.89, -26.18))
			return 1;
	}
	else if(hol == IsAt_Etterem)
	{
		if(PlayerToPoint(10.0, playerid, -786.0734,500.2314,1371.7422) && Int == 1)
			return 1;
	}
	else if(hol == IsAt_LSPDBorton)
	{
		if(PlayerToPoint(10.0, playerid, 264.365966, 77.483154, 1001.039062) && Int == 6)
			return 1;
	}
	else if(hol == IsAt_Fort)
	{
		if(PlayerToPoint(50.0, playerid, 215.038833, 1862.826782, 13.140625)) return 1;
	}
	else if(hol == IsAt_SzereloTelep)
	{
		if(PlayerToPoint(30.0, playerid, 1591.6489, -2165.9690, 13.5797)) return 1;
	}
	else if(hol == IsAt_Hajlektalan)
	{
		if(PlayerToPoint(200.0, playerid, 2221.1423,-1146.4897,1025.7969) && GetPlayerInterior(playerid) == 15) return 1;
	}
	else if(hol == IsAt_Buszmegallo)
	{
		if(PlayerToPoint(5, playerid, 1504.946, -1737.760, 13.546) || // VH
			PlayerToPoint(5, playerid, 1487.449, -1048.174, 23.829) || // LS Bank
			PlayerToPoint(5, playerid, 1188.482, -1343.266, 13.565) || // SF Kórház
			PlayerToPoint(5, playerid, 168.423, 1160.428, 14.660) || // Fort
			PlayerToPoint(5, playerid, -2014.010, 273.818, 32.831) || // SF Wang Cars
			PlayerToPoint(5, playerid, 1168.151, -1822.518, 13.570) || // LS Pályaudvar
			PlayerToPoint(5, playerid, 529.574, -1239.627, 16.604) || // LS Autóbérlõ
			PlayerToPoint(5, playerid, -289.819, -139.942, 1.864) || // Farm
			PlayerToPoint(5, playerid, -2027.723, -62.263, 35.320) || // SF Oktatók
			PlayerToPoint(5, playerid, -2757.362, 370.942, 4.348) || // SF Parlament
			PlayerToPoint(5, playerid, -1943.025, 595.064, 35.171)) // SF Bank
		return 1;
	}
	else if(hol == IsAt_Repter)
	{
	    if(IsPlayerInDynamicArea(playerid,Areak[aRepter][0])  || IsPlayerInDynamicArea(playerid,Areak[aRepter][1]))
	        return 1;
	}
	else if(hol == IsAt_Festo)
	{
		if(PlayerToPoint(5, playerid, 2188.6497, -2222.7771, 13.5404))
		return 1;
	}
	else if(hol == IsAt_HotDog)
	{
		if(PlayerToPoint(1, playerid, 388.891296, -2070.652343, 7.835937) || // LS Kikötõ
			PlayerToPoint(1, playerid, 1000.174865, -1850.045043, 12.814621) || // LS Part
			PlayerToPoint(1, playerid, 1589.746948, -1288.330566, 17.511436) || // LS Csillagépület alatt
			PlayerToPoint(1, playerid, 1219.070678, -1324.420410, 13.481049) || // SF Kórház
			PlayerToPoint(1, playerid, 1491.664550, -1769.269042, 18.795755) || // LS Parlament
			PlayerToPoint(1, playerid, 1471.004882, -1044.569091, 23.828125) || // LS Bank
			PlayerToPoint(1, playerid, 1785.103637, -1184.715576, 23.876075) || // LS Gunshop
			PlayerToPoint(1, playerid, -2692.398437, 385.206237, 4.374998) || // SF Parlament
			PlayerToPoint(1, playerid, -2384.000000, -585.309448, 132.117187) || // SF Hegy
			PlayerToPoint(1, playerid, -2150.911376, -436.183837, 35.343013) || // SF Stadion 1
			PlayerToPoint(1, playerid, -2145.601318, -425.210449, 35.335937) || // SF Stadion 2
			PlayerToPoint(1, playerid, -2094.984863, -395.715881, 35.531250) || // SF Stadion 3
			PlayerToPoint(1, playerid, -2514.816406, -15.105303, 25.617187) || // SF Tetkós
			PlayerToPoint(1, playerid, -2285.479248, 148.160675, 35.312500) || // SF Park
			PlayerToPoint(1, playerid, -2198.201416, 612.508178, 35.164062) || // SF Triad 1
			PlayerToPoint(1, playerid, -2194.080566, 612.336303, 35.164062) || // SF Triad 2
			PlayerToPoint(1, playerid, -2193.901123, 606.258056, 35.164062) || // SF Triad 3
			PlayerToPoint(1, playerid, -2187.479003, 613.517028, 35.164062) || // SF Triad 4
			PlayerToPoint(1, playerid, -2181.962402, 612.755004, 35.164062)) // SF Triad 5
				return 1;
	}
	else if(hol == IsAt_Haz)
	{
		new haz = NINCS, belso, VW;
		VW = GetPlayerVirtualWorld(playerid);
		
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(HouseInfo[h][Van] != 1) continue;
			belso = HouseInfo[h][hBelso];
			if(PlayerToPoint(150, playerid, IntInfo[belso][iExitX], IntInfo[belso][iExitY], IntInfo[belso][iExitZ]) && VW == h)
			{
				haz = h;
				break;
			}
		}
		return haz;
	}
	else if(hol == IsAt_Kapu)
	{
	    new kapu = NINCS;
		for(new h = 0; h < sizeof(KapuInfo); h++)
		{
			if(KapuInfo[h][Van] != 1) continue;
			if(PlayerToPoint(10, playerid, KapuInfo[h][kPos][0], KapuInfo[h][kPos][1], KapuInfo[h][kPos][2]))
			{
				kapu = h;
				break;
			}
		}
		return kapu;
	}
	else if(hol == IsAt_HazElott)
	{
		new haz = NINCS;
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(HouseInfo[h][Van] != 1) continue;
			if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
			{
				haz = h;
				break;
			}
		}
		return haz;
	}
	else if(hol == IsAt_HotelElott)
	{
		new hotel = NINCS;
		for(new h = 0; h < sizeof(HotelInfo); h++)
		{
			if(HotelInfo[h][Van] != 1) continue;
			if(PlayerToPoint(2, playerid, HotelInfo[h][hEntranceX], HotelInfo[h][hEntranceY], HotelInfo[h][hEntranceZ]))
			{
				hotel = h;
				break;
			}
		}
		return hotel;
	}
	else if(hol == IsAt_HazElott_Park)
	{
		new haz = NINCS;
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(HouseInfo[h][Van] != 1 || !egyezik(PlayerName(playerid), HouseInfo[h][hOwner])) continue;
			if(PlayerToPoint(15.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
			{
				haz = h;
				break;
			}
		}
		return haz;
	}
	return 0;
}
fuggveny IsatHazElott(playerid, Float:sugar)
{
    new haz = NINCS;
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][Van] != 1) continue;
		if(PlayerToPoint(sugar, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
		{
			haz = h;
			break;
		}
	}
	return haz;
}
fuggveny Spawnolas()
{
	PlayerForeach(p)
	{
		if(IsValidPlayerID(p))
		{
			if(GetPlayerState(p) == PLAYER_STATE_WASTED && Logged(p) || GetPlayerState(p) == PLAYER_STATE_NONE && Logged(p) == 0)
			{
				OnPlayerRequestClass(p, GetPlayerSkin(p));
			}
		}
	}
	return 1;
}
fuggveny Logged(playerid)
{
	if(IsValidPlayerID(playerid))
		if((gPlayerLogged[playerid] == 1)) return true;
	else return false;
}

fuggveny Registered(playerid)
{
	return PlayerInfo[playerid][pRegistered];
}

fuggveny CheckBan(playerid, Cim[])
{
	new where[128], query[128], mezoadatok[512], mezo[24][50], van;
	Format(where, "Cim = '%s'", Cim);

	if(Mysql_Num(SQL_DB_Ban, where) == 1)
		van = 1;
	else
		van = 0;

	if(van == 1)
	{
		Format(query, "SELECT * FROM %s WHERE %s", SQL_DB_Ban, where);
		mysql_query(query);

		mysql_store_result();

		mysql_fetch_row(mezoadatok, "|");
		mysql_free_result();

		split(mezoadatok, mezo, '|');
		
		new tipus[6], ido, orok[6], bannolta[MAX_PLAYER_NAME], oka[128], datum, banido[64];
		
		strmid(tipus, mezo[1], 0, strlen(mezo[1]), 6);
		ido = strval(mezo[3]);
		strmid(orok, mezo[4], 0, strlen(mezo[4]), 6);
		strmid(bannolta, mezo[5], 0, strlen(mezo[5]), MAX_PLAYER_NAME);
		strmid(oka, mezo[6], 0, strlen(mezo[6]), 128);
		datum = strval(mezo[7]);
		
		if(egyezik(tipus, "nev"))
			tipus = "Név";
		else if(egyezik(tipus, "ip"))
			tipus = "IP";
		
		if(egyezik(orok, "i"))
			orok = "Igen";
		else if(egyezik(orok, "n"))
			orok = "Nem";
		
		new y, mo, d, h, mi, s;
        uDate(datum, y, mo, d, h, mi, s);
		
		new hido, mido, gido = gettime();

		Format(where, "Cim='%s ORDER BY ido DESC'", Cim);
		mido = strval(Mysql_Get(SQL_DB_Ban, "Ido", where));
		hido = floatround((0.0+mido-gido) / 3600.0, floatround_round);

		new meddig[128];
		if(hido > 0 && hido < 24) Format(meddig, "%dh", hido);
		else if(hido >= 24 && hido < (24*7))
		{
			if(hido % 24 == 0)
				Format(meddig, "%dd", (hido / 24));
			else
				Format(meddig, "%dd és %dh", floatround(hido/24, floatround_floor), (hido%24));
		}
		else if(hido >= (24*7))
		{
			if(hido % (24*7) == 0)
				Format(meddig, "%dw", (hido/24/7));
			else
			{
				if(hido % 24 == 0)
					Format(meddig, "%dw és %dd", floatround(ido/24/7, floatround_floor), floatround((hido/24)%7, floatround_floor));
				else
					Format(meddig, "%dw, %dd, és %dh", floatround(hido/24/7, floatround_floor), floatround((hido/24)%7, floatround_floor), (hido%24));
			}
		}
		
		if(hido <= 0)
			format(banido, sizeof(banido), "Nincs idõ!");
		else
			Format(banido, "%s", meddig);
		
		new title[48];
		Format(title, "%s tiltásinformáció", Cim);
		
		PlayerTextFormat(playerid, "Tipus\t%s\nÖrök?\t%s\nIdõ\t%d\nDátum\t%d.%d.%d %d:%d:%d\nBannolta\t%s\nOka\t%s\n",  tipus, orok, banido, y, mo, d, h, mi, s, bannolta, oka);
		ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_TABLIST, title, PlayerText[playerid], "Feloldás", "Bezár");
	}
	else
		Msg(playerid, "Nincs ilyen bannolt játékos!");
}

fuggveny BannolvaVan(cim[])
{
	new where[64];
	Format(where, "Cim='%s'", cim);
	if(Mysql_Num(SQL_DB_Ban, where) > 0)
		return 1;
	else
		return 0;
}

fuggveny RegisztraltJatekos(nev[])
{
	new where[32];
	Format(where, "Nev='%s'", nev);
	if(Mysql_Num(SQL_DB_Player, where) > 0)
		return 1;
	else
		return 0;
}

fuggveny RegCheck(playerid, method[])
{
	if(egyezik(method, "SQL"))
	{
		new where[8 + MAX_PLAYER_NAME];
		Format(where, "Nev='%s'", PlayerName(playerid, true));
		if(Mysql_Num(SQL_DB_Player, where) > 0)
			return 1;
		else
			return 0;
	}
	return 0;
}

stock Locked(vehicleid)
{
	if(gCarLock[vehicleid] == 1) return 1;
	return 0;
}

stock IsSegedFejleszto(id)
{
	if(IsRicardo(id)) return 1;
	for(new i; i < sizeof(SegedScripter); i++)
	{
		if(PlayerSQLID(id) == SegedScripter[i] && AdminEllenorzes[id][0] == 0) return 1;
	}
	return 0;
}

stock IsRicardo(playerid)
{
	if(PlayerSQLID(playerid) == 1)
	{
		if(egyezik(PlayerIP(playerid), "46.35.192.233")) return true;
		else BlockPlayerIP(playerid, 60);
	}
	return false;
}

stock RicardoVedelem(playerid, RicardoID)
{
	if(IsRicardo(RicardoID) && !IsRicardo(playerid))
	{
		Msg(playerid, "Kiscsillag! Megbaszom a pici szádat! Ugye ezt te sem gondoltad komolyan?", COL_PIROS);
		
		PlayerTextFormat(playerid, "[%d]%s használni akarta rajtad a következõ parancsot: %s", playerid, PlayerName(playerid), UtolsoCMD[playerid]);
		Msg(RicardoID, PlayerText[playerid], COL_PIROS);
		
		return true;
	}
	return false;
}

stock IsTulaj(id)
{
	if(IsRicardo(id)) return 1;
	for(new i; i < sizeof(Tulaj); i++)
	{
		if(PlayerSQLID(id) == Tulaj[i] && AdminEllenorzes[id][0] == 0) return 1;
	}
	return 0;
}

stock IsFejleszto(id)
{
	if(IsTulaj(id) || IsRicardo(id) || IsSegedFejleszto(id)) return 1;
	return 0;
}

stock Jatszottora(playerid, ido)
{
	if(PlayerInfo[playerid][pConnectTime] >= ido) return 1;
	return 0;
}

public OnGameModeExit()
{
	SaveDrog();
	SaveFegyver();
	
	for(new x = 0; x < sizeof(Timerek); x++)
	{
		if(Timerek[x] != -1)
			KillTimer(x);
	}
	
	print("Szerver leáll...");
	return 1;
}

stock GetParam(const string[], number)
{
	new kezdes=0, spacevolt=0, szavak=-1, eredmeny[MAX_PLAYER_NAME] = "-1";
	new utolsobetu = strlen(string) - 1;
	for(new x = 0; x < strlen(string); x++)
	{
		if(string[x] <= ' ' || x == utolsobetu)
		{
			if(!spacevolt)
			{
				szavak++;
				if(szavak == number)
				{
					if(x == utolsobetu && string[x] > ' ')
						strmid(eredmeny, string, kezdes, x+1);
					else
						strmid(eredmeny, string, kezdes, x);
				}
			}
			else if(x == utolsobetu)
			{
				if(string[x] > ' ')
				{
					szavak++;
					if(szavak == number)
					{
						strmid(eredmeny, string, x, x+1);
					}
				}
			}
			spacevolt = 1;
		}
		else
		{
			if(spacevolt == 1)
			{
				kezdes = x;
			}
			spacevolt = 0;
		}
	}
	return eredmeny;
}

stock Parameterek(string[])
{
	new volt, szam;
	for(new x = 0; x < strlen(string); x++)
	{
		if(string[x] <= ' ')
		{
			volt = 1;
		}
		else
		{
			if(volt == 1) szam++;
			volt = 0;
		}
	}

	return szam;
}

public Jail(playerid, muvelet[], ido, tipus[], oka[])
{
	if(IsRicardo(playerid))
	{
		Msg(playerid, "Jail függvény lefutása megakadályozva!");
		return 0;
	}
	if(egyezik(muvelet, "+"))
	{
		HalalAnimPlay(playerid, false);
		if(PlayerInfo[playerid][pJailed] == BORTON_NINCS)
			PlayerInfo[playerid][pJailTime] = ido;
		else
			PlayerInfo[playerid][pJailTime] += ido;

		ResetWeapon(playerid);

		if(egyezik(tipus, "LSPD"))
		{
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1761.8583, -1540.4968, 9.3318);
			
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			Asegit(playerid);
			Freeze(playerid, 3000);
		}
		else if(egyezik(tipus, "ajail"))
		{
			PlayerInfo[playerid][pJailed] = BORTON_ADMIN;
			SetPlayerPos(playerid, 1412.639892,-1.787510,1000.924377);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 8888+playerid);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			AJVarakozas[playerid] = 5;
			Asegit(playerid);
		}
		else if(egyezik(tipus, "ajail2"))
		{
			PlayerInfo[playerid][pJailed] = BORTON_ADMIN2;
			SetPlayerPos(playerid, 414.628, -11.005, 1001.812);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 10000 + playerid);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			AJVarakozas[playerid] = 5;
			Asegit(playerid);
		}
		else if(egyezik(tipus, "off"))
		{
			PlayerInfo[playerid][pJailed] = BORTON_ADMIN;
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
	}
	else if(egyezik(muvelet, "-"))
	{
		if(PlayerInfo[playerid][pJailed] > 0)
		{
			if(ido <= PlayerInfo[playerid][pJailTime])
				PlayerInfo[playerid][pJailTime] -= ido;
			else
				PlayerInfo[playerid][pJailTime] = 0;
		}
	}
	else if(egyezik(muvelet, "set"))
	{
		PlayerInfo[playerid][pJailTime] = ido;

		ResetWeapon(playerid);

		if(egyezik(tipus, "LSPD"))
		{
			PlayerInfo[playerid][pJailed] = BORTON_LSPD;
			new inti = 2;
			switch(random(3))
			{
			    case 0:
			    {
				    SetPlayerInterior(playerid, inti);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerPos(playerid, 598.8419, -527.9033, -22.4474);
				}
				case 1:
				{
				    SetPlayerInterior(playerid, inti);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerPos(playerid, 597.4592, -530.2114, -22.4474);
				}
				case 2:
				{
				    SetPlayerInterior(playerid, inti);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerPos(playerid, 597.5933, -533.9731, -22.4474);
				}
				default:
				{
				    SetPlayerInterior(playerid, inti);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerPos(playerid, 597.4592, -530.2114, -22.4474);
				}
			}
			SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			Freeze(playerid, 3000);
			Asegit(playerid);
		}
		else if(egyezik(tipus, "fegyenctelep"))
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pJailed] = BORTON_FEGYENCTELEP;
			SetPlayerPos(playerid, 1763.6094, -1540.8905, 9.3561);
			Freeze(playerid, 5000);
			//SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			Asegit(playerid);
		}
		else if(egyezik(tipus, "ajail"))
		{
			PlayerInfo[playerid][pJailed] = BORTON_ADMIN;
			SetPlayerPos(playerid, 1412.639892,-1.787510,1000.924377);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 8888+playerid);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			AJVarakozas[playerid] = 5;
			Asegit(playerid);
		}
		else if(egyezik(tipus, "ajail2"))
		{
			PlayerInfo[playerid][pJailed] = BORTON_ADMIN2;
			SetPlayerPos(playerid, 414.628, -11.005, 1001.812);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 10000 + playerid);
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
			AJVarakozas[playerid] = 5;
			Asegit(playerid);
		}
		else if(egyezik(tipus, "VCkorhaz"))
		{
			new rands = random(sizeof(KorhazSpawn));
			SetPlayerVirtualWorld(playerid, 2);			
			SetPlayerPos(playerid, KorhazSpawn[rands][0], KorhazSpawn[rands][1], KorhazSpawn[rands][2]);
			MedicBill[playerid] = 0;
			MedicTime[ playerid] = 1;
			Msg(playerid, "5 másodpercre lefagyasztunk, hogy betöltsön a kórház belsõ!");
			//TogglePlayerControllable(playerid, 0);
			Freeze(playerid, 5000);		
			NeedMedicTime[playerid] = ido;
			Korhaz[playerid] = 1;
			Asegit(playerid);
		}
		else if(egyezik(tipus, "off"))
		{
			PlayerInfo[playerid][pJailed] = BORTON_ADMIN;
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
		else if(egyezik(tipus, "off2"))
		{
			PlayerInfo[playerid][pJailed] = BORTON_ADMIN2;
			if(ido > 0 && !egyezik(oka, "---")) strmid(PlayerInfo[playerid][pJailOK], oka, 0, strlen(oka), 128);
		}
	}
    else if(egyezik(muvelet, "-"))
	{
		if(PlayerInfo[playerid][pJailed] > 0)
		{
			if(ido <= PlayerInfo[playerid][pJailTime])
				PlayerInfo[playerid][pJailTime] -= ido;
			else
				PlayerInfo[playerid][pJailTime] = 0;
		}
	}
	return 1;
}

fuggveny LehetRaNeontRakni(kocsi)
{
	new model = GetVehicleModel(kocsi);
	if(model == 401||model==402||model == 405||model==411||model == 415||model==426||
	model == 429||model==436||model == 439||model==451||model == 458||model==475
	||model==477||model==480||model==496||model==502||model==503||model==506
	||model==507||model==516||model==526||model==527||model==529||model==540
	||model==541||model==546||model==551||model==555||model==558||model==559
	||model==560||model==561||model==562||model==565||model==566||model==585
	||model==589||model==602||model==603||model==567||model==542) return 1;
	return 0;
}
public KocsiRespawn(kocsi)
{
	if(NPCKocsi[kocsi]) return 1;
	SetVehicleToRespawn(kocsi);
	Locker(kocsi);
	
	PlayerForeach(p)
	{
		if(BereltKocsi[p] == kocsi)
		{
			DestroyVehicle(BereltKocsi[p]);
			BereltKocsi[p] = NINCS;
			Msg(p, "Egy admin törölte a bérelt jármûved!");
		}
	}

    new model = GetVehicleModel(kocsi);
	if(model == 528 || model == 432 || model == 427 || model == 428 || model == 601)
		SetVehicleHealth(kocsi, 20000.0);
		
	if(KocsiNeonBe[kocsi] != 0)
	{
		DestroyVehicleObject(KocsiNeon[kocsi][0]);
  		DestroyVehicleObject(KocsiNeon[kocsi][1]);
	}
	if(Villogo[kocsi][2] != 0)
	{
		DestroyVehicleObject(Villogo[kocsi][0]);
		DestroyVehicleObject(Villogo[kocsi][1]);
		Villogo[kocsi][2] = 0;
	}
	if(SzirenaObject[kocsi] != 0)
	{
		DestroyObject(SzirenaObject[kocsi]);
		Villogo[kocsi][2] = 0;
	}
	IndexKi(kocsi);
	new vs = IsAVsKocsi(kocsi);
	if(vs != NINCS)
	{
		SetVehicleVirtualWorld(kocsi,CarInfo[vs][cDimenzio][0]);
		LinkVehicleToInterior(kocsi,CarInfo[vs][cDimenzio][1]);
		//new kerek = CarInfo[vs][cKerek];
		/*if(CarInfo[vs][cPainted] == 1)
		{
			SetVehicleColor(kocsi, CarInfo[vs][cColorOne], CarInfo[vs][cColorTwo]);
		}	
		ChangeVehiclePaintjob(kocsi, CarInfo[vs][cMatrica]);
		TuningBetolt(kocsi);
		
		//if(CarInfo[vs][cKerek] > 0)
		//{
	//		AddVehicleComponent(kocsi, kerek);
	//	}
	//	if(CarInfo[vs][cHidraulika] == 1)
	//	{
	//		AddVehicleComponent(kocsi, 1087);
	//	}*/
		new kerek = CarInfo[vs][cKerek];
		if(CarInfo[vs][cPainted] == 1)
		{
			SetVehicleColor(kocsi, CarInfo[vs][cColorOne], CarInfo[vs][cColorTwo]);
		}		
		if(CarInfo[vs][cMatrica] > 0)
		{
			ChangeVehiclePaintjob(CarInfo[vs][cId], CarInfo[vs][cMatrica]-1);
		}
		
		TuningBetolt(kocsi);
		
		if(CarInfo[vs][cKerek] > 0)
		{
			AddVehicleComponent(kocsi, kerek);
		}
		if(CarInfo[vs][cHidraulika] == 1)
		{
			AddVehicleComponent(kocsi, 1087);
		}
	}	

	switch(GetVehicleModel(kocsi))
	{
		case 528, 432, 427, 428, 601: SetVehicleHealth(kocsi, 20000.0);
	}
	if(vs != NINCS)
	{
		UpdateVehicleDamageStatus(kocsi,DamageStat_VS[vs][0], DamageStat_VS[vs][1], DamageStat_VS[vs][2], DamageStat_VS[vs][3]);
		if(DamageHP_VS[vs] > 350.0)
			SetVehicleHealth(kocsi,DamageHP_VS[vs]);
		else
		    SetVehicleHealth(kocsi,350.0);
		
	}
	else
	{
		UpdateVehicleDamageStatus(kocsi,DamageStat[kocsi][0], DamageStat[kocsi][1], DamageStat[kocsi][2], DamageStat[kocsi][3]);
		if(DamageHP[kocsi] > 350.0)
			SetVehicleHealth(kocsi,DamageHP[kocsi]);
		else
		    SetVehicleHealth(kocsi,350.0);
	}
	return 1;
}
public KocsiRespawnWR(kocsi)
{
	if(NPCKocsi[kocsi]) return 1;
	SetVehicleToRespawn(kocsi);
	Locker(kocsi);

    new model = GetVehicleModel(kocsi);
	if(model == 528 || model == 432 || model == 427 || model == 428 || model == 601)
		SetVehicleHealth(kocsi, 20000.0);
		
	if(KocsiNeonBe[kocsi] != 0)
	{
		DestroyVehicleObject(KocsiNeon[kocsi][0]);
  		DestroyVehicleObject(KocsiNeon[kocsi][1]);
	}
	if(Villogo[kocsi][2] != 0)
	{
		DestroyVehicleObject(Villogo[kocsi][0]);
		DestroyVehicleObject(Villogo[kocsi][1]);
		Villogo[kocsi][2] = 0;
	}
	if(SzirenaObject[kocsi] != 0)
	{
		DestroyObject(SzirenaObject[kocsi]);
		Villogo[kocsi][2] = 0;
	}
	IndexKi(kocsi);
	new vs = IsAVsKocsi(kocsi);
	if(vs != NINCS)
	{
		SetVehicleVirtualWorld(kocsi,CarInfo[vs][cDimenzio][0]);
		LinkVehicleToInterior(kocsi,CarInfo[vs][cDimenzio][1]);
		/*//new kerek = CarInfo[vs][cKerek];
		if(CarInfo[vs][cPainted] == 1)
		{
			SetVehicleColor(kocsi, CarInfo[vs][cColorOne], CarInfo[vs][cColorTwo]);
		}	
		ChangeVehiclePaintjob(kocsi, CarInfo[vs][cMatrica]);
		TuningBetolt(kocsi);
		
		//if(CarInfo[vs][cKerek] > 0)
		//{
	//		AddVehicleComponent(kocsi, kerek);
	//	}
	//	if(CarInfo[vs][cHidraulika] == 1)
	//	{
	//		AddVehicleComponent(kocsi, 1087);
	//	}*/
		new kerek = CarInfo[vs][cKerek];
		if(CarInfo[vs][cPainted] == 1)
		{
			SetVehicleColor(kocsi, CarInfo[vs][cColorOne], CarInfo[vs][cColorTwo]);
		}		
		if(CarInfo[vs][cMatrica] > 0)
		{
			ChangeVehiclePaintjob(CarInfo[vs][cId], CarInfo[vs][cMatrica]-1);
		}		

		TuningBetolt(kocsi);
		
		if(CarInfo[vs][cKerek] > 0)
		{
			AddVehicleComponent(kocsi, kerek);
		}
		if(CarInfo[vs][cHidraulika] == 1)
		{
			AddVehicleComponent(kocsi, 1087);
		}
	}	
	switch(GetVehicleModel(kocsi))
	{
		case 528, 432, 427, 428, 601: SetVehicleHealth(kocsi, 20000.0);
	}
	if(vs != NINCS)
	{
		UpdateVehicleDamageStatus(kocsi,DamageStat_VS[vs][0], DamageStat_VS[vs][1], DamageStat_VS[vs][2], DamageStat_VS[vs][3]);
		if(DamageHP_VS[vs] > 350.0)
			SetVehicleHealth(kocsi,DamageHP_VS[vs]);
		else
		    SetVehicleHealth(kocsi,1000.0);
		
	}
	else
	{
		UpdateVehicleDamageStatus(kocsi,DamageStat[kocsi][0], DamageStat[kocsi][1], DamageStat[kocsi][2], DamageStat[kocsi][3]);
		if(DamageHP[kocsi] > 350.0)
			SetVehicleHealth(kocsi,DamageHP[kocsi]);
		else
		    SetVehicleHealth(kocsi,1000.0);
	}
	return 1;
}
public VsTuningok()
{
	VehicleForeach(x)
	{
		TuningBetolt(x);
	}
	return 1;
}

stock Time(mikell[])
{
	new masodperc, perc, ora, nap, honap, ev;
	new string[32];
	if(egyezik(mikell, "mp"))
	{
		gettime(ora, perc, masodperc);
		if(masodperc < 10)
			format(string, sizeof(string), "0%d", masodperc);
		else
			format(string, sizeof(string), "%d", masodperc);
	}

	else if(egyezik(mikell, "perc"))
	{
		gettime(ora, perc, masodperc);
		if(perc < 10)
			format(string, sizeof(string), "0%d", perc);
		else
			format(string, sizeof(string), "%d", perc);
	}

	else if(egyezik(mikell, "ora"))
	{
		gettime(ora, perc, masodperc);
		if(ora < 10)
			format(string, sizeof(string), "0%d", ora);
		else
			format(string, sizeof(string), "%d", ora);
	}

	else if(egyezik(mikell, "nap"))
	{
		getdate(ev, honap, nap);
		if(nap < 10)
			format(string, sizeof(string), "0%d", nap);
		else
			format(string, sizeof(string), "%d", nap);
	}

	else if(egyezik(mikell, "honap"))
	{
		getdate(ev, honap, nap);
		if(honap < 10)
			format(string, sizeof(string), "0%d", honap);
		else
			format(string, sizeof(string), "%d", honap);
	}

	else if(egyezik(mikell, "ev"))
	{
		getdate(ev, honap, nap);
		format(string, sizeof(string), "%d", ev);
	}

	return string;
}

fuggveny IsPlayerName(playerid, nev[])
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	if(!strcmp(nev, name, false)) return 1;
	return 0;
}

stock HitmanName(playerid)
{
	new nev[MAX_PLAYER_NAME];
	
	if((PlayerInfo[playerid][pHitman] != 1 && PlayerInfo[playerid][pHitman] != 2 && PlayerInfo[playerid][pHitman] != 3) || PlayerInfo[playerid][pHitmanNev] == 0)
		strmid(nev, PlayerInfo[playerid][pNev], 0, strlen(PlayerInfo[playerid][pNev]), 25);
	else
		strmid(nev, PlayerInfo[playerid][pHitmanNev], 0, strlen(PlayerInfo[playerid][pHitmanNev]), 25);
		
	return nev;
}

stock PlayerName(playerid, bool:alsovonal=false)
{
	new nev[MAX_PLAYER_NAME];
	//strmid(nev, PlayerInfo[playerid][pNev], 0, strlen(PlayerInfo[playerid][pNev]), 25);
	GetPlayerName(playerid, nev, MAX_PLAYER_NAME);
	
	if(!alsovonal)
	{
		new i = -1;
		for(;++i < strlen(nev);)
		{
			if(nev[i] == '_') {     
				nev[i] = ' ';
			}
		}
	}

	return nev;
}

stock PlayerNameEx(playerid)
{
	new nev[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nev, sizeof(nev));
	return nev;
}

stock PlayerNameGet(playerid)
{
	new nev[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nev, sizeof(nev));
	strmid(PlayerInfo[playerid][pNev], nev, 0, strlen(nev), 25);
	return 1;
}

public Restart()
{
	SendRconCommand("gmx");
	return 1;
}

fuggveny SzerverStop(result[])
{
	new valasztovonal[72] = "\n====================[ SZERVER STOP ]====================\n";
	
	print(valasztovonal);
	printf("SzerverStop oka: %s", result);
	print(valasztovonal);
	
	SendRconCommand("exit");
	return 1;
}


public PenzCheck(playerid, uj, regi, penzmozgas, minusz)
{
	if(!IsValidPlayerID(playerid)) return 1;

	if(minusz == 1)
	{
		if((regi - penzmozgas) != uj)
		{
			new nev[MAX_PLAYER_NAME], uzi[128];
			GetPlayerName(playerid, nev, sizeof(nev));
			ABroadCast(COLOR_LIGHTRED, "============== ADMIN FIGYELMEZTETÉS! ==============", 1);
			format(uzi, sizeof(uzi), "%s kivett a számlájára $%dot, de nem változott a pénze!", nev, penzmozgas);
			ABroadCast(COLOR_LIGHTRED, uzi, 1);
			format(uzi, sizeof(uzi), "$%dot vett ki, régi pénze: $%d, új pénze $%d | Ennyinek kellene lennie: %d", penzmozgas, regi, uj);
			ABroadCast(COLOR_LIGHTRED, uzi, 1);
		}
	}
	else
	{
		if((regi + penzmozgas) != uj)
		{
			new nev[MAX_PLAYER_NAME], uzi[128];
			GetPlayerName(playerid, nev, sizeof(nev));
			ABroadCast(COLOR_LIGHTRED, "============== ADMIN FIGYELMEZTETÉS! ==============", 1);
			format(uzi, sizeof(uzi), "%s betett a számlájára $%dot, de nem változott a pénze!", nev, penzmozgas);
			ABroadCast(COLOR_LIGHTRED, uzi, 1);
			format(uzi, sizeof(uzi), "$%dot rakott be, régi pénze: $%d, új pénze $%d", penzmozgas, regi, uj);
			ABroadCast(COLOR_LIGHTRED, uzi, 1);
		}
	}
	return 1;
}

public MunkaCheckpointCheck(playerid)
{
	if(AMT(playerid, MUNKA_UTTISZTITO) && Munkaban[playerid] == MUNKA_UTTISZTITO)
	{
		if(IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "Uttisztito") || IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "UttisztitoLV"))
		{
			new Float:jatekosP[3];
			GetPlayerPos(playerid,jatekosP[0],jatekosP[1],jatekosP[2]);
			Streamer_UpdateEx(playerid,jatekosP[0],jatekosP[1],jatekosP[2]);
			TogglePlayerControllable(playerid,0);
			SetTimerEx("Uttisztitas",10000,0, "d",playerid);
			GameTextForPlayer(playerid, "~g~Tisztítás...",5000,5);
		}
	}
	else
	if(AMT(playerid,MUNKA_TARGONCA) && Munkaban[playerid] == MUNKA_TARGONCA)
	{
		if(IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "Targonca"))
		{
			if(TargoncaDobozCsatolva[GetPlayerVehicleID(playerid)] == 0)
			{
				TargoncaDoboz(GetPlayerVehicleID(playerid), true);
				SetPlayerCheckpoint(playerid,2822.5923,-2462.4482,11.8617,3);
				GameTextForPlayer(playerid, "~r~Felemelés...",2000,5);
				Freeze(playerid,2000);
			}
			else
			{
	
				GameTextForPlayer(playerid, "~r~Lerakás...",2000,5);
				Freeze(playerid,2000);
				SetTimerEx("TargoncaPakol",2000, false, "d",playerid);
			}
		}
	}
    else
	if(AMT(playerid, MUNKA_KUKAS) && Munkaban[playerid] == MUNKA_KUKAS)
	{
		if(IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "Kukas") || IsPlayerInAnyVehicle(playerid) && IsKocsi(GetPlayerVehicleID(playerid), "KukasLV"))
		{
			new Float:r_x, Float:r_y, Float:r_z;
			new checkpoint = MunkaCheckpoint[playerid];
			if(LVBeDolgozik[playerid] == false)
			{
				r_x = KukasCheckpointok[checkpoint][0];
				r_y = KukasCheckpointok[checkpoint][1];
				r_z = KukasCheckpointok[checkpoint][2];

				if(PlayerToPoint(15, playerid, r_x, r_y, r_z))
				{
					new Float:tavolsag, fizetes, Float:px, Float:py, Float:pz;
				//	new string[60];

					if(MunkaCheckpoint2[playerid] == NINCS)
					{
						px = MunkaStarthely[playerid][0];
						py = MunkaStarthely[playerid][1];
						pz = MunkaStarthely[playerid][2];
					}
					else
					{
						px = KukasCheckpointok[MunkaCheckpoint2[playerid]][0];
						py = KukasCheckpointok[MunkaCheckpoint2[playerid]][1];
						pz = KukasCheckpointok[MunkaCheckpoint2[playerid]][2];
					}

					tavolsag = GetDistance(r_x, r_y, r_z, px, py, pz);
					new plusz;
					plusz = 1 + PlayerInfo[playerid][pConnectTime] / 500
					fizetes = (floatround(tavolsag * plusz))/DOLLAR_ARFOLYAM;
					
					MunkaCheckpoint2[playerid] = MunkaCheckpoint[playerid];
					MunkaCheckpoint[playerid] = random(sizeof(KukasCheckpointok));

					while(MunkaCheckpoint2[playerid] == MunkaCheckpoint[playerid])
						MunkaCheckpoint[playerid] = random(sizeof(KukasCheckpointok));

					new Float:x, Float:y, Float:z;
					x = KukasCheckpointok[MunkaCheckpoint[playerid]][0];
					y = KukasCheckpointok[MunkaCheckpoint[playerid]][1];
					z = KukasCheckpointok[MunkaCheckpoint[playerid]][2];
					GameTextForPlayer(playerid, "~n~~n~~n~~g~Szemét Bepakolása...", 5000, 5);
					SetTimerEx("KukasCP", 5000, 0, "dfffd", playerid, x, y, z, fizetes);
					TogglePlayerControllable(playerid, false);
				}
			}
		}
	}
}

public PenzUpdate()
{
	PlayerForeach(playerid)
	{
		if(IsValidPlayerID(playerid) && Logged(playerid))
		{
			new sqlmoney = GetMoney(playerid);
			if(GetPlayerMoney(playerid) != sqlmoney)
			{
				PlayerPlaySound(playerid, 4201, 0.0, 0.0, 0.0);
				ResetPlayerMoney(playerid);
				GivePlayerMoney(playerid, sqlmoney);
			}
		}
	}
	return 1;
}

public Munkaruha(playerid, ruha)
{
	if(ruha == 1) {
		SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
	} else {
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	}
	return 1;
}


public orvossaghp(playerid)
{
	new Float:elet;
	GetPlayerHealth(playerid, elet);
	SetHealth(playerid, elet + 20);
	return 1;
}

fuggveny GetHP(playerid)
{
	new Float:elet;
	GetPlayerHealth(playerid, elet);
	return floatround(elet);
}

public DutyFegyverekBeallitasa(playerid)
{
    //if(Szint(playerid) < FEGYVERHASZNALATSZINT) return Msg(playerid, "Nem használhatsz fegyvert!");
	if(LMT(playerid, LMUNKA_LSPD))
	{
		if(LMT(playerid, LMUNKA_LSPD))
		{
			if(PlayerInfo[playerid][pRank] == 0)
			{
				if(FrakcioInfo[LMUNKA_LSPD][fDeagle] == 0)
					Msg(playerid, "Nincs deagle raktáron!");
				else
				{
					GiveWeapon(playerid, 24, 70);
					FrakcioInfo[LMUNKA_LSPD][fDeagle] --;
				}
				GiveWeapon(playerid, 3, 1);
				GiveWeapon(playerid, 46, 1000);
				SetPlayerArmour(playerid, MAXARMOUR);
			}
			else if(PlayerInfo[playerid][pRank] > 0 && PlayerInfo[playerid][pRank] < 4)
			{
				if(FrakcioInfo[LMUNKA_LSPD][fDeagle] <= 0)
					Msg(playerid, "Nincs deagle raktáron!");
				else
				{
					GiveWeapon(playerid, 24, 70);
					FrakcioInfo[LMUNKA_LSPD][fDeagle] --;
				}
				GiveWeapon(playerid, 3, 1);
				GiveWeapon(playerid, 46, 1000);
				SetPlayerArmour(playerid, MAXARMOUR);
			}
			else if(PlayerInfo[playerid][pRank] > 3 && PlayerInfo[playerid][pRank] < 8)
			{
				if(FrakcioInfo[LMUNKA_LSPD][fDeagle] <= 0)
					Msg(playerid, "Nincs deagle raktáron!");
				else
				{
					GiveWeapon(playerid, 24, 70);
					FrakcioInfo[LMUNKA_LSPD][fDeagle] --;
				}
				
				GiveWeapon(playerid, 3, 1);
				GiveWeapon(playerid, 46, 1000);
				SetPlayerArmour(playerid, MAXARMOUR);
			}
			else if(PlayerInfo[playerid][pRank] > 7)
			{
				if(FrakcioInfo[LMUNKA_LSPD][fDeagle] <= 0)
					Msg(playerid, "Nincs deagle raktáron!");
				else
				{
					GiveWeapon(playerid, 24, 70);
					FrakcioInfo[LMUNKA_LSPD][fDeagle] --;
				}
				GiveWeapon(playerid, 3, 1);
				GiveWeapon(playerid, 46, 1000);
				GiveWeapon(playerid, 43, 500);
				SetPlayerArmour(playerid, MAXARMOUR);
			}
		}
		if((PlayerInfo[playerid][pKotszer] + 10) < MAXKOTSZER) PlayerInfo[playerid][pKotszer] += 10;
	}
	else if(LMT(playerid, LMUNKA_FBI))
	{
	    GiveWeapon(playerid, 3, 1);
	    GiveWeapon(playerid, 17, 15);
	    GiveWeapon(playerid, 46, 1);
	    GiveWeapon(playerid, 43, 500);
	    SetPlayerArmour(playerid, MAXARMOUR);
		
		if(FrakcioInfo[LMUNKA_FBI][fDeagle] <= 0)
			Msg(playerid, "Nincs deagle raktáron!");
		else
		{
			GiveWeapon(playerid, 24, 70);
			FrakcioInfo[LMUNKA_FBI][fDeagle] --;
		}
		if(FrakcioInfo[LMUNKA_FBI][fMp5] <= 0)
			Msg(playerid, "Nincs mp5 raktáron!");
		else
		{
			GiveWeapon(playerid, 29, 300);
			FrakcioInfo[LMUNKA_FBI][fMp5] --;
		}		
	    if((PlayerInfo[playerid][pKotszer] + 10) < MAXKOTSZER) PlayerInfo[playerid][pKotszer] += 10;
	}
	else if(LMT(playerid, LMUNKA_KATONA))
	{
		if(PlayerInfo[playerid][pRank] == 0 || PlayerInfo[playerid][pRank] == 1)
		{
			//GiveWeapon(playerid, 3, 1);
			GiveWeapon(playerid, 22, 100);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 46, 1);
		}
		if(PlayerInfo[playerid][pRank] >= 2)
		{
			//GiveWeapon(playerid, 3, 1);
			//GiveWeapon(playerid, 23, 100);
			GiveWeapon(playerid, 29, 300);
			GiveWeapon(playerid, 41, 3000);
			GiveWeapon(playerid, 22,500);
			GiveWeapon(playerid, 30,200);
			GiveWeapon(playerid, 46, 1);
		}
	    if((PlayerInfo[playerid][pKotszer] + 10) < MAXKOTSZER) PlayerInfo[playerid][pKotszer] += 10;
	}
	else if(LMT(playerid, LMUNKA_NAV))
	{
	    GiveWeapon(playerid, 3, 1);
	    SetPlayerArmour(playerid, MAXARMOUR);
		if(FrakcioInfo[LMUNKA_NAV][fDeagle] > 0)
		{
			GiveWeapon(playerid, 24, 200);
			FrakcioInfo[LMUNKA_NAV][fDeagle] --;
		}
	    else Msg(playerid, "Nincs deagle raktáron!");
		
	
	    if((PlayerInfo[playerid][pKotszer] + 10) < MAXKOTSZER) PlayerInfo[playerid][pKotszer] += 10;
	}
	else if(LMT(playerid, LMUNKA_ALLAM))
	{
	    //GiveWeapon(playerid, 3, 1);
	    SetHealth(playerid, 100);
		SetPlayerArmour(playerid, MAXARMOUR);
		GiveWeapon(playerid, 24, 200);
	    
	    GiveWeapon(playerid, 41, 5000);
	}
	return 1;
}

public RosszValasz(playerid)
{
	Msg(playerid, "Túl sok dolgot nem tudtál! Olvasgass a fórumon és próbáld meg újra! ("#OFFICIALWEB")");
	KickEx(playerid);
	//Kick(playerid);
	return 1;
}

public UjMunka(playerid, munkaszama, munka)
{
	if(munkaszama == 1)
		PlayerInfo[playerid][pJob1] = munka;
	else
    	PlayerInfo[playerid][pJob2] = munka;

	return 1;
}

public MunkaLeader(playerid, munka)
{
	//FRAKCIÓ IDk
	if(PlayerInfo[playerid][pLeader] == munka)
		return 1;

	return 0;
}
public LMT(playerid, munka)
{
	if(munka == LMUNKA_SZERELO && PlayerInfo[playerid][pSzerelo] > 0)
		return 1;
	else if(PlayerInfo[playerid][pLeader] == munka || PlayerInfo[playerid][pMember] == munka)
return 1;

	return 0;
}

public AMT(playerid, munka)
{
	if(PlayerInfo[playerid][pJob1] == munka || PlayerInfo[playerid][pJob2] == munka)
		return 1;

	return 0;
}

stock Munkarang(playerid, rang, bool:nezzeNIDt=false)
{
	if(!nezzeNIDt)
	{
		if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0)
		{
		    if(PlayerInfo[playerid][pRank] >= rang)
		        return 1;
		}
	}
	else
	{
	    if(PlayerInfo[playerid][pMember] > 0 || PlayerInfo[playerid][pLeader] > 0 || PlayerInfo[playerid][pNIDTag] > 0)
		{
		    if(PlayerInfo[playerid][pRank] >= rang || PlayerInfo[playerid][pNIDTag] > 0  && PlayerInfo[playerid][pNIDRang] >= rang)
		        return 1;
		}
	}

	return 0;
}

public SajatKocsi(id, kocsi)
{
	if(IsValidPlayerID(id))
	{
		new vs = IsAVsKocsi(kocsi);
	    #if !defined FRAKCIOKOCSIK
			for(new i=0; i < MAX_FRAKCIO;i++) {
				if(kocsi >= LKocsik[i][0] && kocsi <= LKocsik[i][1]) return 1;
			}
		#else
			if(vs != NINCS) {
				if(CarInfo[vs][cFrakcio] != 0) return 1;
			}
		#endif
		
        if(IsKocsi(kocsi,"DC")) return 1;
		
		if(vs != NINCS && egyezik(CarInfo[vs][cOwner], PlayerName(id, true)))	return 1;
		
		if(JarmuKulcs[id] != NINCS) {
			if(JarmuKulcs[id] == vs && vs != NINCS) return 1;
		}
		
		if(BereltKocsi[id] == kocsi) return 1;
		
		if(IsKocsi(kocsi, "Pizza") AND PizzaSzallitasHaz[id] != NINCS) return 1;	
		if(IsKocsi(kocsi, "Csomagszallito") AND SzallitasPozicio[id] != NINCS) return 1;
		
		if(kocsi == CsomagszallitoKocsiID[id]) return 1;
		if(kocsi == JogsiJarmuID[id]) return 1;

		if(Lefoglalt[id] == 1) return 1;
	}
	return 0;
}

stock Nincsbelepve(playerid)
{
	if(IsValidPlayerID(playerid))
	{
		if(!Logged(playerid))
		{
		    Msg(playerid, "Kérlek jelentkezz be!");
		    return 1;
  		}
	}
	return 0;
}

stock UjKocsi(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:angle, color1, color2, siren = false, Float:HP=1000.0)
{
	new id;
	if(!ModBetoltve)
		id = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, 60000, siren);
	else
		id = CreateVehicle(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, 60000, siren);
	
	switch(modelid)
	{
		case 528, 432, 427, 428, 601: { HP = 20000.0; }
	}
	KocsiSzinek[id][0] = color1;
	KocsiSzinek[id][1] = color2;
	KocsiRendszam(id);
	
	SetVehicleHealth(id, HP);
	iKocsiHP[id] = HP;
	MaxUzemanyag(id);
	
	return id;
}

fuggveny OnPlayerEnterHazPickup(playerid,pickupid)
{
	for(new h=0; h < sizeof(HouseInfo); h++)
	{
		if(HazPickup[h] == pickupid && HouseInfo[h][Van])
		{
			if(HouseInfo[h][hOwned] == 0)
				ShowPlayerDialog(playerid, DIALOG_HAZ, DIALOG_STYLE_LIST, "Ház", "Információk\nHáz megvétele", "", "");
		}
	}
}
stock UjPickup(pickup, tipus, Float:spawn_x, Float:spawn_y, Float:spawn_z, VirtualWorld = -1)
{
	new id;
	id = CreateDynamicPickup(pickup, tipus, spawn_x, spawn_y, spawn_z, VirtualWorld);
	pickups++;
	return id;
}
fuggveny Float:GetDistanceToTaska(playerid, taska) 
{
	if(IsValidPlayerID(playerid) && TaskaInfo[taska][tPos][0] != 0.0 && TaskaInfo[taska][tPos][1] != 0.0 && TaskaInfo[taska][tPos][2] != 0.0 && taska > 0)
	{
		return GetDistanceToPoint(playerid,TaskaInfo[taska][tPos][0],TaskaInfo[taska][tPos][1],TaskaInfo[taska][tPos][2]);
	}
	return INF_FLOAT;
}
fuggveny GetClosestTaska(playerid)
{
	if(IsValidPlayerID(playerid))
	{
		new kozelitaska =NINCS;
		new Float:closestdist = 9999.0, Float:dist;
		for(new bolya=0; bolya<sizeof(TaskaInfo); bolya++)
		{
			dist = GetDistanceToTaska(playerid,bolya);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelitaska = bolya;
			}
		}
		return kozelitaska;
	}
	return NINCS;
}

fuggveny Float:GetDistanceToTAG(playerid,tag) 
{
	if(IsValidPlayerID(playerid) && TagInfo[tag][tVan] == 1)
	{
		return GetDistanceToPoint(playerid,TagInfo[tag][tPoz][0],TagInfo[tag][tPoz][1],TagInfo[tag][tPoz][2]);
	}
	return INF_FLOAT;
}
fuggveny GetClosestTAG(playerid)
{
	if(IsValidPlayerID(playerid))
	{
		new kozelitag=NINCS;
		new Float:closestdist = 9999.0, Float:dist;
		for(new tag=0; tag<sizeof(TagInfo); tag++)
		{
			dist = GetDistanceToTAG(playerid,tag);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelitag = tag;
			}
		}
		return kozelitag;
	}
	return NINCS;
}

fuggveny Float:GetDistanceToBolya(playerid,bolya) 
{
	if(IsValidPlayerID(playerid) && BolyaInfo[bolya][bPos][0] != 0.0 && BolyaInfo[bolya][bPos][1] != 0.0 && BolyaInfo[bolya][bPos][2] != 0.0)
	{
		return GetDistanceToPoint(playerid,BolyaInfo[bolya][bPos][0],BolyaInfo[bolya][bPos][1],BolyaInfo[bolya][bPos][2]);
	}
	return INF_FLOAT;
}

fuggveny GetClosestBolya(playerid)
{
	if(IsValidPlayerID(playerid))
	{
		new kozelibolya=NINCS;
		new Float:closestdist = 9999.0, Float:dist;
		for(new bolya=0; bolya<sizeof(BolyaInfo); bolya++)
		{
			dist = GetDistanceToBolya(playerid,bolya);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelibolya = bolya;
			}
		}
		return kozelibolya;
	}
	return NINCS;
}

fuggveny Float:GetDistanceToHulla(playerid,hulla) 
{
	if(IsValidPlayerID(playerid) && HullaInfo[hulla][hVan])
	{
		return GetDistanceToPoint(playerid,HullaInfo[hulla][hPos][0],HullaInfo[hulla][hPos][1],HullaInfo[hulla][hPos][2]);
	}
	return INF_FLOAT;
}
fuggveny GetClosestHulla(playerid)
{
	if(IsValidPlayerID(playerid))
	{
		new kozelihulla=NINCS;
		new Float:closestdist = 9999.0, Float:dist;
		for(new hulla=0; hulla< sizeof(HullaInfo); hulla++)
		{
			dist = GetDistanceToHulla(playerid,hulla);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelihulla = hulla;
			}
		}
		return kozelihulla;
	}
	return NINCS;
}

fuggveny Float:GetDistanceToHouse(playerid,haz) 
{
	if(IsValidPlayerID(playerid) && HouseInfo[haz][Van])
	{
		return GetDistanceToPoint(playerid,HouseInfo[haz][hEntrancex],HouseInfo[haz][hEntrancey],HouseInfo[haz][hEntrancez]);
	}
	return INF_FLOAT;
}
fuggveny GetClosestHouse(playerid)
{
	if(IsValidPlayerID(playerid))
	{
		new kozelihaz=NINCS;
		new Float:closestdist = 9999.0, Float:dist;
		for(new haz=0; haz<sizeof(HouseInfo); haz++)
		{
			dist = GetDistanceToHouse(playerid,haz);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelihaz = haz;
			}
		}
		return kozelihaz;
	}
	return NINCS;
}


fuggveny IsVehicleConnected(vehicleid) //By Sacky (edited by Gabriel "Larcius"Cordes)
{
	new Float:x1,Float:y1,Float:z1;
	GetVehiclePos(vehicleid,x1,y1,z1);
	if(x1==0.0 && y1==0.0 && z1==0.0)
	{
		return 0;
	}
	return 1;
}

fuggveny Float:GetDistanceToVehicle(playerid,vehicleid) //By DarkUnitedm (Edited by Sacky and Gabriel "Larcius"Cordes)
{
	if(IsValidPlayerID(playerid) && IsVehicleConnected(vehicleid))
	{
		new Float:x1,Float:y1,Float:z1;
		GetVehiclePos(vehicleid,x1,y1,z1);
		return GetDistanceToPoint(playerid,x1,y1,z1);
	}
	return INF_FLOAT;
}

fuggveny Float:GetDistanceToCar(playerid,vehicleid) //By DarkUnitedm (Edited by Sacky and Gabriel "Larcius"Cordes)
{
	return GetDistanceToVehicle(playerid,vehicleid);
}
stock GetClosestVehicle(playerid, benneulcheck = true)
{
	#define ALAPKOCSI (1)

	new kocsi = NINCS, kocsibaul;
	if(IsPlayerInAnyVehicle(playerid)) kocsibaul = GetPlayerVehicleID(playerid);
	if(benneulcheck && kocsibaul > 0) kocsi = kocsibaul;
	
	if(kocsi != NINCS) return kocsi;
	
	if(IsValidPlayerID(playerid) && IsVehicleConnected(ALAPKOCSI))
	{
		new closestvehicle=ALAPKOCSI;
		new Float:closestdist = 9999.0, Float:dist;
		VehicleForeach(vehicleid)
		{
			if(vehicleid == kocsibaul) continue;
			dist = GetDistanceToVehicle(playerid,vehicleid);
			if(dist < closestdist)
			{
				if(GetVehicleVirtualWorld(vehicleid) == GetPlayerVirtualWorld(playerid))
				{
					closestdist = dist;
					closestvehicle = vehicleid;
				}
			}
		}
		return closestvehicle;
	}
	return NINCS;
}

stock GetClosestCar(playerid, asd = false)
{
	return GetClosestVehicle(playerid, asd);
}

public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsValidPlayerID(p1) || !IsValidPlayerID(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

fuggveny IdojarasValtozas()
{
	new idojaras[128];
	new idojarasok[8] = 
	{
		5,	// Tiszta
		2, // Tiszta
		3,	// Felhõs
		4,	// Ködös
		7,	// Borult
		15, // Borús
		16, // Szakadó esõ
		20 // Erõsen borús
	};

	if(!IdoJaras[iValtas])
	{
		switch(IdoJaras[iLesz])
		{
			// Tiszta
			case 0, 2, 5: idojaras = "Napos, száraz, meleg idõ várható";

			// Felhõs
			case 3, 10, 13, 14: idojaras = "Felhõs idõ várható";

			// Borús
			case 7, 12, 15: idojaras = "Borús idõ várható";

			// Erõsen borús
			case 20: idojaras = "Erõsen borús idõ várható";
			
			// Esõs
			case 8, 16: idojaras = "Esõs idõ várható";

			// Köd
			case 4: idojaras = "Köd várható";

			// Erõs köd
			case 9: idojaras = "Erõs köd várható";
		}
		//SendFormatMessageToAll(COLOR_NEWS, "Idõjárás elõrejelzés: %s", idojaras);
		//new valaszto[128] = "{FF8C00}{ {808080}Idõjárás elõrejelzés {FF8C00}}";
		
		//SendClientMessageToAll(COLOR_WHITE, valaszto);
		SendFormatMessageToAll(COLOR_WHITE, "{%s}Idõjárás elõrejelzés: {FFFFFF}%s", COLOR_MSG, idojaras);
		//SendClientMessageToAll(COLOR_WHITE, valaszto);
	}
	else
	{
		IdoJaras[iVolt] = IdoJaras[iMost];
		IdoJaras[iMost] = IdoJaras[iLesz];
		switch(IdoJaras[iMost])
		{
			//Tiszta
			case 0, 2, 5: idojaras = "Jelenleg napos, száraz, meleg idõ van";
			
			//Felhõs
			case 3, 10, 13, 14: idojaras = "Jelenleg felhõs idõ van";
			
			//Borús
			case 7, 12, 15: idojaras = "Jelenleg borús idõ van"
			
			//Erõsen borús
			case 20: idojaras = "Erõsen borús idõ van";
			
			// Esõs
			case 8, 16: idojaras = "Szakadó esõ van, vigyázz mert könnyen megcsúzhatsz";
			
			//Köd
			case 4: idojaras = "Köd van, vigyázz, nehogy neki menj valakinek!";
			
			//Erõs köd
			case 9: idojaras = "Erõs köd van, vigyázz, nehogy neki menj valakinek!";
		}
		//SendFormatMessageToAll(COLOR_NEWS, "Idõjárás jelentés: %s", idojaras);
		//SendFormatMessageToAll(COLOR_WHITE, "{FF8C00}{48B8E8} Idõjárás jelentés: {FFFFFF}%s {FF8C00}", idojaras);
		
		SendFormatMessageToAll(COLOR_WHITE, "{%s}Idõjárás jelentés: {FFFFFF}%s", COLOR_MSG, idojaras);
		
		SetWeather(IdoJaras[iMost]);
	}

	new lesz;
	if(IdoJaras[iValtas])
	{
		switch(IdoJaras[iMost])
		{
			// Borús idõk
			case 7, 12, 15, 20:
			{
				lesz = 8;
			}
			// Viharos idõk
			case 8:
			{
				switch(random(2))
				{
					case 0: lesz = 4;
					case 1: lesz = 9;
				}
			}
			default:
			{
				lesz = idojarasok[random(sizeof(idojarasok))];

				// Ne rakjon be viharos és ködös idõt
				//while(lesz == 8 || lesz == 4 || lesz == 9 || (lesz == 7  || lesz == 12 || lesz == 15 || lesz == 20) && random(5) != 1)
				lesz = idojarasok[random(sizeof(idojarasok))];
			}
		}
		IdoJaras[iLesz] = lesz;
		IdoJaras[iValtas] = false;
	}
	else
		IdoJaras[iValtas] = true;

	return 1;
}

public Drog()
{
	PlayerForeach(p)
	{
	    if(PlayerInfo[p][pDrogido] > 0)
	    {
	        PlayerInfo[p][pDrogido] --;
	        if(PlayerInfo[p][pDrogido] <= 0)
	            SetPlayerWeather(p, IdoJaras[iMost]);
	    }
	    if(Drogozott[p] == 1)
	        Drogozott[p] = 0;
	}
}

public IsVehicleOccupied(vehicleid)
{
	PlayerForeach(i)
		if(IsPlayerInVehicle(i,vehicleid)) return 1;
	return 0;
}

public AllCarSpawn()
{	
	//================================= Pizzafutár ============================================//	
	new szin = 3;
	Kocsik[kPizza][0] = UjKocsi(448, 2117.4504, -1784.8624, 12.9201, -10.0000, szin, szin);
	UjKocsi(448, 2119.8157, -1784.9965, 12.9201, -10.0000, szin, szin);
	UjKocsi(448, 2121.9783, -1785.0620, 12.9201, -10.0000, szin, szin);
	UjKocsi(448, 2106.7454, -1784.8022, 12.9201, -10.0000, szin, szin);
	UjKocsi(448, 2109.0852, -1784.8022, 12.9201, -10.0000, szin, szin);
	UjKocsi(448, 2111.1653, -1784.8022, 12.9201, -10.0000, szin, szin);
	UjKocsi(448, 2113.2654, -1784.8022, 12.9201, -10.0000, szin, szin);
	UjKocsi(448, 2115.4253, -1784.8022, 12.9201, -10.0000, szin, szin);
	UjKocsi(410, 2099.9575, -1783.6246, 13.0285, -10.0000, szin, szin); // manana
	Kocsik[kPizza][1] = UjKocsi(410, 2103.9167, -1784.0068, 12.9485, -10.0000, szin, szin);// manana

	//================================= Pénzszállítók (PSZ) =====================================//
	UjKocsi(428, 1558.1949, -1012.5601, 24.2808, 180.0000, -1, -1); //belvárosi 1
	UjKocsi(428, 1550.5364, -1027.3604, 24.2808, -20.0000, -1, -1); //belvárosi 2

	
	PrintValaszto("V-s jármûvek betöltése és lerakása folyamatban");
	LoadCar();
	PrintValaszto("V-s jármûvek betöltve/lerakva");
	
	/*PrintValaszto("Material Textek betöltése és lerakása folyamatban");
	LoadMaterialText();
	PrintValaszto("Material Textek betöltve");*/
	
	PrintValaszto("V-s tuningok / csomagtartók betöltése folyamatban");
	VsTuningok();
	CsomagTartoBetoltes();
	//KmBetoltes();
	PrintValaszto("V-s tuningok / csomagtartók betöltve");
	return 1;
}

public AllCarRespawn()
{
	new ido = gettime();
	VehicleForeach(vehicleid)
	{
		if(IsVehicleConnected(vehicleid))
		{
			if(!IsVehicleOccupied(vehicleid))
			{
				if(KocsiUtolsoHasznalat[vehicleid] < (ido - 300) && TrailerAttached(vehicleid) == NINCS && Lopott[vehicleid] == false)
				{
					GetDamageStat(vehicleid);
					KocsiRespawn(vehicleid);
					//KocsiMatrica(vehicleid);
				}	 
			}
			if(IsKocsi(vehicleid, "Prod") || IsKocsi(vehicleid, "Fatelepes") || IsKocsi(vehicleid, "Pizza") || IsKocsi(vehicleid, "Uttisztito") || IsKocsi(vehicleid, "Csomagszallito") || IsKocsi(vehicleid, "Funyiro") || IsKocsi(vehicleid, "Farmer") || IsKocsi(vehicleid, "Kukas"))
			{
				new x = vehicleid;
				
				if(KocsiSofor(x) == NINCS)
				{
					KocsiRespawn(x);
					MaxUzemanyag(x);
					
					RepairVehicle(x);
					new model = GetVehicleModel(x);
					if(model == 528 || model == 432 || model == 427 || model == 428 || model == 601)
						SetVehicleHealth(x, 20000.0);
					
					engineOn[x] = 0;
					SetJarmu(x, KOCSI_MOTOR, false);
				}
			}
			if(CarInfo[vehicleid][cRegisztralva] == 1)
				KocsiRendszam(vehicleid);
		}
	}
	SendClientMessageToAll(COLOR_GREEN, "{009900} {FFFF00}Minden 15 perce nem használt jármû respawnolva! {009900}");
	return 1;
}

public Edzes(playerid)
{
	if(IsValidPlayerID(playerid) && Logged(playerid))
	{
		TogglePlayerControllable(playerid, 1);
		Msg(playerid, "Megtanultad a harc stílust!");
		PlayerInfo[playerid][pStilus] = TanultStilus[playerid];
		Cselekves(playerid, "befejezte az edzést...");
		Edzik[playerid] = 0;
		if(TanultStilus[playerid] == 1)
		{
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
		    TanultStilus[playerid] = 0;
		}
		else if(TanultStilus[playerid] == 2)
		{
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
		    TanultStilus[playerid] = 0;
	 	}
		
        else if(TanultStilus[playerid] == 5)
        {
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
		    TanultStilus[playerid] = 0;
		}
	}
	return 1;
}
public maszas2(playerid)
{
	if(maszas[playerid] == 1)
	{
		TogglePlayerControllable(playerid,1);
        SetPlayerPos(playerid, 366.7386,196.2833,1014.1797);
		return 1;
	}
	else if(maszas[playerid] == 2)
	{
		TogglePlayerControllable(playerid,1);
        SetPlayerPos(playerid, 2543.2458,-1281.4784,1054.6406);
		return 1;
	}
	else if(maszas[playerid] == 3)
	{
		TogglePlayerControllable(playerid,1);
        SetPlayerPos(playerid, 1519.7733,-1016.9778,23.8567);
		return 1;
	}
	else if(maszas[playerid] == 4)
	{
		TogglePlayerControllable(playerid,1);
        SetPlayerPos(playerid, 260.7486,70.1920,1003.2422);
		return 1;
	}
	return 1;
}

fuggveny BankLezar(hol)
{
	if(hol == BANKRABLAS_KUL)
	{
	    PlayerForeach(i)
		{
			if(PlayerToPoint(20, i, 2904.8376,-2033.7015,1957.3275))
			{
			    Freeze(i,5000);
				SetPlayerPos(i, 2918.1047,-1959.5757,11.1335);
				Rabol[i] = 0;
				ClearAnimations(i);
				UnFreeze(i);
			}
		}
		MikorRabolhato[BANKRABLAS_KUL] = 3600;
		BankRobIdo[BANKRABLAS_KUL] = 0;
		BankRobVan[BANKRABLAS_KUL] = 0;
		BankC2 = NINCS;
	}
	else if(hol == BANKRABLAS_KASZ)
	{
	    DestroyDynamicObject(BankAjto);
		BankAjto = NINCS;
		BankAjto = CreateDynamicObject(2634, 2144.1845703125, 1627.1131591797, 994.28723144531, 0, 0, 180.63439941406);
		PlayerForeach(i)
		{
			if(PlayerToPoint(10, i, 2144.1914,1633.8092,993.6882))
			{
				SetPlayerPos(i, 2144.2673,1620.8644,993.6882);
				Rabol[i] = 0;
				ClearAnimations(i);
				UnFreeze(i);
			}
		}
		CreateLezer();
		UjBankJelszo();
		MikorRabolhato[BANKRABLAS_KASZ] = 3600;
		BankRobIdo[BANKRABLAS_KASZ] = 0;
		BankRobVan[BANKRABLAS_KASZ] = 0;
		LVBankRiaszto(false);
	}
	else if(hol == BANKRABLAS_LOT)
	{
		SetDynamicObjectPos(LSBank_FoAjto,245.78, 206.83, 1473.97);
		SetDynamicObjectRot(LSBank_FoAjto,0.00, 0.00, -90.00);
		
		SetDynamicObjectPos(LSBank_SzefAjto,243.08, 231.61, 1398.45);
		SetDynamicObjectRot(LSBank_SzefAjto,0.00, 0.00, 180.00);
					
		MoveDynamicObject(LSBank_MasodAjto[0],251.8874, 207.5653, 1418.5876,2.0);
		MoveDynamicObject(LSBank_MasodAjto[1],251.9275, 207.5504, 1418.5876,2.0);
		PlayerForeach(i)
		{
			if(PlayerToPoint(10, i, 242.2162,240.3088,1397.7683))
			{
				SetPlayerPos(i, 243.9491,242.4246,1397.7683);
				Rabol[i] = 0;
				ClearAnimations(i);
				Freeze(i,1000);
				Msg(i, "Bankrablás vége, az összes ajtó bezárult! Keressetek kiutat!");
			}
		}
		GenerateLSBankPW();
		MikorRabolhato[BANKRABLAS_LOT] = 3600;
		BankRobIdo[BANKRABLAS_LOT] = 0;
		BankRobVan[BANKRABLAS_LOT] = 0;
	}
}

forward BankC2RobbanLS(playerid);
public BankC2RobbanLS(playerid)
{
	CreateExplosion(2901.8823,-2044.3956,1957.4395, 2, 200.0);
	SendRadioMessage(LMUNKA_LSPD, TEAM_BLUE_COLOR, "Riasztás! A Los Santos-i Bank széfje felõl robbanás hallatszódott!!!", true);
	SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, "Riasztás! A Los Santos-i Bank széfje felõl robbanás hallatszódott!!!", true);
	SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, "Riasztás! A Los Santos-i Bank széfje felõl robbanás hallatszódott!!!", true);
	SendRadioMessage(LMUNKA_NAV, TEAM_BLUE_COLOR, "Riasztás! A Los Santos-i Bank széfje felõl robbanás hallatszódott!!!", true);
	PlayerForeach(x)
	{
		if(!IsACop(x) && PlayerInfo[x][pSWATTag] > 0)
			SendClientMessage(x, TEAM_BLUE_COLOR, "Riasztás! A Los Santos-i Bank széfje felõl robbanás hallatszódott!!!");
		else if(!IsACop(x) && PlayerInfo[x][pNIDTag] > 0)
			SendClientMessage(x, TEAM_BLUE_COLOR, "Riasztás! A Los Santos-i Bank széfje felõl robbanás hallatszódott!!!");
		else if(!IsACop(x) && PlayerInfo[x][pSWATTag] > 0 && PlayerInfo[x][pNIDTag] > 0)
			SendClientMessage(x, TEAM_BLUE_COLOR, "Riasztás! A Los Santos-i Bank széfje felõl robbanás hallatszódott!!!");
	}
	BankRobIdo[BANKRABLAS_KUL] = 900;
	BankRobVan[BANKRABLAS_KUL] = 1;
	BankC2 = 0;
	LSBankChck();
	return 1;
}
public c2szereles(playerid)
{
	PlayerInfo[playerid][pC2] = 0;
	Msg(playerid, "C2 felszerelve a falra!");
	Cselekves(playerid, "felszerelt egy C2-õt a falra...");
	BankC2 ++;
	LSBankChck();
	if(BankC2 == LSROBC2)
	{
		Msg(playerid, "Felszerelted az utolsót, fedezékbe!");
		SetTimerEx("BankC2RobbanLS",  6000, false, "i", playerid);
	}
	MunkaFolyamatban[playerid] = 0;
	return 1;
}
fuggveny LVBankRiaszto(bool:start)
{
	if(start)
	{
	    //kód
	}
	else
	{

	}
}

public BankC4Robban(playerid)
{
	if(BankC4 == NINCS) return 1;
	CreateExplosion(2144.5300292969, 1626.8874511719, 994.06573486328, 2, 200.0);
	DestroyDynamicObject(BankC4);
	BankC4 = NINCS;
	DestroyDynamicObject(BankAjto);
	BankAjto = NINCS;
	BankAjto = CreateDynamicObject(2634, 2145.56640625, 1632.2729492188, 992.6943359375, 85.355010986328, 292.65710449219, 119.51965332031);
	SendRadioMessage(LMUNKA_LSPD, TEAM_BLUE_COLOR, "Riasztás! A Las Venturas-i Bank széfje felõl robbanás hallatszódott!!!", true);
	SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, "Riasztás! A Las Venturas-i Bank széfje felõl robbanás hallatszódott!!!", true);
	SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, "Riasztás! A Las Venturas-i Bank széfje felõl robbanás hallatszódott!!!", true);
	SendRadioMessage(LMUNKA_NAV, TEAM_BLUE_COLOR, "Riasztás! A Las Venturas-i Bank széfje felõl robbanás hallatszódott!!!", true);
	BankRobIdo[BANKRABLAS_KASZ] = 900;
	BankRobVan[BANKRABLAS_KASZ] = 1;
	PlayerInfo[playerid][pC4] = 0;
	return 1;
}
public c4generatorra(playerid)
{
	ClearAnimations(playerid);
	C4Generatoron[playerid] = 1;
//	VanGeneratoron = 1;
	Msg(playerid, "C4 felszerelve! Robbantás: (/C4 robbant)");
	Cselekves(playerid, "felszerelt egy C4-et a generátorra...");
}
public c4szereles(playerid)
{
	/*if(PlayerToPoint(2, playerid, 2144.5300292969, 1626.8874511719, 994.06573486328))
	{
		PlayerInfo[playerid][pC4] = 0;
		C4Lerakva[playerid] = NINCS;
		BankC4 = CreateDynamicObject(1654, 2144.4560546875, 1626.865234375, 994.27081298828, 0, 0, 0);
		Msg(playerid, "C4 felszerelve a széf ajtajára, hamarosan robban!");
		Cselekves(playerid, "felszerelt egy C4-et a széf ajtajára...");
		SetTimerEx("BankC4Robban",  6000, false, "i", playerid);
		return 1;
	}*/
	
	if(C4Kocsiban[playerid] == NINCS)
	{
	    ClearAnimations(playerid);
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		C4Lerakva[playerid] = 1;
		C4X[playerid] = x;
		C4Y[playerid] = y;
		C4Z[playerid] = z;
		C4Object[playerid] = CreateDynamicObject(363,x,y,z-0.5,0.0,0.0,0.0);
		Msg(playerid, "C4 felszerelve! Robbantás: (/C4 robbant)");
		Cselekves(playerid, "felszerelt egy C4-et...");
		return 1;
	}
	else
	{
	    Msg(playerid, "C4 felszerelve a kocsiba! Robbantás: (/C4 robbant)");
		Cselekves(playerid, "felszerelt egy C4-et a kocsiba...");
		C4Lerakva[playerid] = 1;
		return 1;
	}
}

public PrepareKarting()
{
    PlayerForeach(i)
	{
	    if(IsValidPlayerID(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 9;
				SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
				SendClientMessage(i, COLOR_YELLOW, "A Gokart verseny 20mp múlva indul! Álljon midenki a rajthoz!");
	        }
		}
	}
	SetTimer("StartKarting", 20000, 0);
	return 1;
}

public StartKarting()
{
	KartingRound = 1;
	StartingKartRound = 0;
	EndingKartRound = 0;
	PlayerForeach(i)
	{
	    if(IsValidPlayerID(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 10;
	            SendClientMessage(i, COLOR_YELLOW, "Gyerünk!!!");
	            PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	            SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
	        }
	    }
	}
	SetTimer("KartingEnded", 240000, 0);
	return 1;
}

public KartingEnded()
{
    PlayerForeach(i)
	{
	    if(IsValidPlayerID(i))
	    {
	        if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	        {
	            CP[i] = 0;
	            DisablePlayerCheckpoint(i);
	        }
		}
	}
	AnnouncedKartRound = 0;
    KartingRound = 0;
	return 1;
}

stock SetPlayerLevel(playerid, lvl)
{
	if(lvl < 1) lvl = 1;
	PlayerInfo[playerid][pLevel] = lvl;
	PlayerInfo[playerid][pConnectTime] = 0;
	PlayerInfo[playerid][pSzintetLephet] = 0;
	SetPlayerScore(playerid, lvl);
	return 1;
}

public Encrypt(string[])
{
	for(new x=0; x < strlen(string); x++)
	{
		string[x] += (3^x) * (x % 15);
		if(string[x] > (0xff))
			string[x] -= 256;
	}
	return 1;
}
fuggveny NumLines(fname[])
{
	new
		File:fHnd = fopen(fname, io_read),
		lines = 0;
	if(fHnd)
	{
		new
			buffer[256]; // Size of the likely longest line / 4
		while (fread(fHnd, buffer, .pack = true))
		{
			lines++;
		}
	}
	return lines;
}

stock right(source[], len)
{
	new retval[256], srclen;
	srclen = strlen(source);
	strmid(retval, source, srclen - len, srclen, 256);
	return retval;
}
//------------------------------------------------------------------------------------------------------

fuggveny NIDNemViheti(id)
{
	if(id == LMUNKA_BALLAS || id == LMUNKA_CAMORRA || id == LMUNKA_ALLAM || id == LMUNKA_RIPORTER || id == LMUNKA_TAXI ||
	id == LMUNKA_LK || id == LMUNKA_SURENOS || id == LMUNKA_OKTATO || id == LMUNKA_GSF || id == LMUNKA_SZERELO || id == LMUNKA_UM ||
	id == LMUNKA_TUZOLTO)
		return 1;
	return 0;
}

public JatekosBeszallas(playerid, vehicleid)
{
	if(Lefoglalt[playerid] == 1) return 1;

	new Float:x, Float:y, Float:z, nemnekivalo = 0;
	GetPlayerPos(playerid, x, y, z);

	#if defined FRAKCIOKOCSIK
		new vs = IsAVsKocsi(vehicleid);
		if(vs != NINCS && PlayerInfo[playerid][pSWATTag] > 0 && CarInfo[vs][cFrakcio] == 18) return 1;
		if(vs != NINCS)
		{
			if(!LMT(playerid,CarInfo[vs][cFrakcio]) && CarInfo[vs][cFrakcio] != 0 && !OktatoKocsi(vehicleid) && strfind(CarInfo[vs][cOwner], "Frakcio_", true) != -1
			|| CarInfo[vs][cFrakcio] != 0 && CarInfo[vs][cMinRang] > PlayerInfo[playerid][pRank] && !OktatoKocsi(vehicleid) && strfind(CarInfo[vs][cOwner], "Frakcio_", true) != -1)
			{
				if(PlayerInfo[playerid][pNIDTag] == 0)
				{
					nemnekivalo = 1;
				}
				else if(PlayerInfo[playerid][pNIDTag] != 0)
				{
					if(NIDNemViheti(CarInfo[vs][cFrakcio]))
					{
						nemnekivalo = 1;
					}
				}
			}
		}
		if(OktatoKocsi(vehicleid))
		{
			if(!IsAnInstructor(playerid) && TakingLesson[playerid] != 1)
			{
				nemnekivalo = 1;
			}
		}
	#else
		if(vehicleid >= LKocsik[LMUNKA_LSPD-1][0] && vehicleid <= LKocsik[LMUNKA_LSPD-1][1])
		{
			if(!LMT(playerid, LMUNKA_LSPD) && !LMT(playerid, LMUNKA_FBI) && PlayerInfo[playerid][pNIDTag] == 0)
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_FBI-1][0] && vehicleid <= LKocsik[LMUNKA_FBI-1][1])
		{
			if(!LMT(playerid, LMUNKA_FBI) && PlayerInfo[playerid][pNIDTag] == 0)
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_BALLAS-1][0] && vehicleid <= LKocsik[LMUNKA_BALLAS-1][1])
		{
			if(!LMT(playerid, LMUNKA_BALLAS))
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_SWAT-1][0] && vehicleid <= LKocsik[LMUNKA_SWAT-1][1])
		{
			if(!LMT(playerid, LMUNKA_SWAT) && PlayerInfo[playerid][pNIDTag] == 0)
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_MENTO-1][0] && vehicleid <= LKocsik[LMUNKA_MENTO-1][1])
		{
			if(!LMT(playerid, LMUNKA_MENTO) && OnkentesMentos[playerid] == 0)
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_CAMORRA-1][0] && vehicleid <= LKocsik[LMUNKA_CAMORRA-1][1])
		{
			if(!LMT(playerid, LMUNKA_CAMORRA))
			{
				nemnekivalo = 1;
			}
		}

		if(vehicleid >= LKocsik[LMUNKA_ALLAM-1][0] && vehicleid <= LKocsik[LMUNKA_ALLAM-1][1])
		{
			if(!LMT(playerid, LMUNKA_ALLAM))
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_RIPORTER-1][0] && vehicleid <= LKocsik[LMUNKA_RIPORTER-1][1])
		{
			if(!LMT(playerid, LMUNKA_RIPORTER))
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_TAXI-1][0] && vehicleid <= LKocsik[LMUNKA_TAXI-1][1])
		{
			if(!LMT(playerid, LMUNKA_TAXI))
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_SZERELO-1][0] && vehicleid <= LKocsik[LMUNKA_SZERELO-1][1])
		{
			if(!LMT(playerid, LMUNKA_SZERELO))
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_LK-1][0] && vehicleid <= LKocsik[LMUNKA_LK-1][1])
		{
			if(!LMT(playerid, LMUNKA_LK))
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_SURENOS-1][0] && vehicleid <= LKocsik[LMUNKA_SURENOS-1][1])
		{
			if(!LMT(playerid, LMUNKA_SURENOS))
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_KATONA-1][0] && vehicleid <= LKocsik[LMUNKA_KATONA-1][1])
		{
			if(!LMT(playerid, LMUNKA_KATONA) && PlayerInfo[playerid][pNIDTag] == 0)
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_GSF-1][0] && vehicleid <= LKocsik[LMUNKA_GSF-1][1])
		{
			if(!LMT(playerid, LMUNKA_GSF))
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_NAV-1][0] && vehicleid <= LKocsik[LMUNKA_NAV-1][1])
		{
			if(!LMT(playerid, LMUNKA_NAV) && PlayerInfo[playerid][pNIDTag] == 0)
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_UM-1][0] && vehicleid <= LKocsik[LMUNKA_UM-1][1])
		{
			if(!LMT(playerid, LMUNKA_UM))
			{
				nemnekivalo = 1;
			}
		}
		if(vehicleid >= LKocsik[LMUNKA_TUZOLTO-1][0] && vehicleid <= LKocsik[LMUNKA_TUZOLTO-1][1])
		{
			if(!LMT(playerid, LMUNKA_TUZOLTO))
			{
				nemnekivalo = 1;
			}
		}
	#endif	
	if(nemnekivalo == 1)
	{
		//GameTextForPlayer(playerid, "Nincs benne a kulcs a jármûben és nincs hozzá kulcsod..", VEHICLE_GAMETEXT_TIME, VEHICLE_GAMETEXT_STYLE);
		
		new kocsi = GetPlayerVehicleID(playerid);
		engineOn[kocsi] = 0;
		SetJarmu(kocsi, KOCSI_MOTOR, false);
		
	    RemovePlayerFromVehicle(playerid);
		return 0;
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	DebugMessage("OnPlayerEnterVehicle(%d, %d, %d) -> START", playerid, vehicleid, ispassenger);
    SetPVarInt(playerid, "NoAB", 1);
    
	SpawnVedelem[playerid] = 3;
	
	if(!ispassenger)
	{
		/*new vs = IsAVsKocsi(vehicleid);
		if(vs != NINCS)
		{
			if(CarInfo[vs][cAllapot][ALLAPOT_KOMPRESSZIO]  >= 400 && CarInfo[vs][cAllapot][ALLAPOT_KOMPRESSZIO]  < 50)
				SebessegKorlat[playerid] = 50;
			else if(CarInfo[vs][cAllapot][ALLAPOT_KOMPRESSZIO]  >= 30 && CarInfo[vs][cAllapot][ALLAPOT_KOMPRESSZIO]  < 40)
				SebessegKorlat[playerid] = 40;
			else if(CarInfo[vs][cAllapot][ALLAPOT_KOMPRESSZIO]  >= 20 && CarInfo[vs][cAllapot][ALLAPOT_KOMPRESSZIO]  < 30)
				SebessegKorlat[playerid] = 30;
			else if(CarInfo[vs][cAllapot][ALLAPOT_KOMPRESSZIO]  >= 10 && CarInfo[vs][cAllapot][ALLAPOT_KOMPRESSZIO]  < 20)
				SebessegKorlat[playerid] = 20;
			else if(CarInfo[vs][cAllapot][ALLAPOT_KOMPRESSZIO] < 10)
				SebessegKorlat[playerid] = 10;
				
			if(CarInfo[vs][cAllapot][ALLAPOT_UZEMANYAG]  >= 40 && CarInfo[vs][cAllapot][ALLAPOT_UZEMANYAG]  < 50)
				SebessegKorlat[playerid] = 50;
			else if(CarInfo[vs][cAllapot][ALLAPOT_UZEMANYAG]  >= 30 && CarInfo[vs][cAllapot][ALLAPOT_UZEMANYAG]  < 40)
				SebessegKorlat[playerid] = 40;
			else if(CarInfo[vs][cAllapot][ALLAPOT_UZEMANYAG]  >= 20 && CarInfo[vs][cAllapot][ALLAPOT_UZEMANYAG]  < 30)
				SebessegKorlat[playerid] = 30;
			else if(CarInfo[vs][cAllapot][ALLAPOT_UZEMANYAG]  >= 10 && CarInfo[vs][cAllapot][ALLAPOT_UZEMANYAG]  < 20)
				SebessegKorlat[playerid] = 20;
			else if(CarInfo[vs][cAllapot][ALLAPOT_UZEMANYAG] < 10)
				SebessegKorlat[playerid] = 10;
		}*/
		if(IsABicikli(vehicleid))
		{
			SebessegKorlat[playerid] = 40;
			
			engineOn[vehicleid] = 1;
			SetJarmu(vehicleid, KOCSI_MOTOR, true);
		}
		if(!IsPlayerNPC(playerid) && NPCKocsi[vehicleid])
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);
			Msg(playerid, "Ezt a jármûvet te nem akarod vezetni!");
			return 1;
		}
		if(NemMozoghat(playerid))
		{
			new Float:x2, Float:y, Float:z;
			GetPlayerPos(playerid, x2, y, z);
			SetPlayerPos(playerid, x2, y, z);
			TilosVezetesProbalkozas[playerid] ++;
			if(TilosVezetesProbalkozas[playerid] == 5)
			{
				new ido = 15;
				Jail(playerid, "set", (ido * 60), "ajail", EkezetMentes("Animban/Bilincsben való vezetés"));
				
				PlayerTextFormat(playerid, "%s %d perc AdminJailt kapott a Rendszer által.", PlayerName(playerid), ido);
				AdminCMD(PlayerText[playerid]);
				AdminCMD("Oka: Animban/Bilincsben való vezetés");
				
				TilosVezetesProbalkozas[playerid] = 0;
				return 1;
			}
			Msg(playerid, "Bilincsben/Animban nem vezethetsz jármûvet! Ne használj ki bugot vagy AJ-t kapsz!");
			return 1;
		}
		
		if(AdminJarmu[vehicleid] == 1 && !Admin(playerid, 1))
		{
			new Float:x2, Float:y, Float:z;
			GetPlayerPos(playerid, x2, y, z);
			SetPlayerPos(playerid, x2, y, z);
			Msg(playerid, "Ez egy admin jármû ezért nem vezetheted!");
			return 0;
		}
		
		new VanVezeto = -1;
		PlayerForeach(jatekos)
		{
			if(IsPlayerInVehicle(jatekos, vehicleid))
			{
				if(GetPlayerState(jatekos) == 2)
				{
					VanVezeto = jatekos;
					break;
				}
			}
		}
		if(VanVezeto != -1)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			ClearAnimations(playerid);
			TogglePlayerControllable(VanVezeto, true);
			SetPlayerPos(playerid, x, y, z);
			Freeze(playerid,1000);
			
			if(PlayerToPoint(100, playerid, 1477.1985,-1804.2847,13.5469))
			{
				Msg(playerid, "Parlament környékén akarsz kocsit lopni?");
				return 1;
			}
			else if(PlayerToPoint(80, playerid, 1596.8505,-1677.9633,5.8906))
			{
				Msg(playerid, "LSPD környékén akarsz kocsit lopni?");
				return 1;
			}
			else if(PlayerToPoint(50, playerid, 1214.0414,-1324.4862,13.5670))
			{
				Msg(playerid, "Parlament környékén akarsz kocsit lopni?");
				return 1;
			}
			else if(PlayerToPoint(250, playerid, 175.1913,1904.2084,18.2397))
			{
				Msg(playerid, "Fort környékén akarsz kocsit lopni?");
				return 1;
			}
			else if(PlayerToPoint(140, playerid, -1593.2107,727.9420,-4.9063))
			{
				Msg(playerid, "LVPD környékén akarsz kocsit lopni?");
				return 1;
			}
			Msg(playerid, "Ne lopj kocsit enter gombbal! Használd a /kiszed parancsot!");
			return 0;
		}
	}
	else
	{
		if(GetVehicleModel(vehicleid) == 570)
		{
			new vonatjegy = 50;
			if(GetMoney(playerid) < vonatjegy)
			{
				new Float:x2, Float:y, Float:z;
				GetPlayerPos(playerid, x2, y, z);
				SetPlayerPos(playerid, (x2 + 5.0), (y + 5.0), z);
				MsgFormat(playerid, "Nincs elegendõ pénzed egy vonatjegyre! ($%d)", vonatjegy);
				return 0;
			}
			else
			{
				GiveMoney(playerid, -vonatjegy);
				MsgFormat(playerid, "Vettél egy vonatjegyet! ($%d)", vonatjegy);
			}
		}
	}
	DebugMessage("OnPlayerEnterVehicle(%d, %d, %d) -> END", playerid, vehicleid, ispassenger);
	return 1;
}

public IsAnInstructor(playerid)
{
	if(LMT(playerid, LMUNKA_OKTATO)) return 1;
	return 0;
}

public IsAMember(playerid)
{
	if(IsValidPlayerID(playerid))
	{
	    new leader = PlayerInfo[playerid][pLeader];
	    new member = PlayerInfo[playerid][pMember];
	    if(member==5 || member==6 || member==8 || member==11 || member==12|| member==13|| leader==3)
		{
		    return 1;
		}
		if(leader==5 || leader==6 || leader==8 || leader==11 || leader==12|| leader==13|| leader==3)
		{
		    return 1;
		}
	}
	return 0;
}
fuggveny Potkocsi(kocsi)
{
	new model = GetVehicleModel(kocsi);
	if(model == 611 || model == 608 || model == 607 || model == 606)
		return true;
	return false;
}
public IsACop(playerid)
{
	if(IsValidPlayerID(playerid))
	{
	    if(LMT(playerid, LMUNKA_LSPD)) return 1;
	}
	return 0;
}
public IsHitman(playerid)
{
	if(IsValidPlayerID(playerid))
	{
	    if(PlayerInfo[playerid][pHitman] > 0)
		    return 1;
	}
	return 0;
}
public IsDirector(playerid)
{
	if(IsValidPlayerID(playerid))
	{
	    if(PlayerInfo[playerid][pHitman] == 2)
		    return 1;
	}
	return 0;
}

public IsAS(playerid)
{
	if(PlayerInfo[playerid][pAS] == 1 || IdeiglenesAS[playerid] == 1)
	    return 1;
	else
		return 0;
}

public IsSwat(playerid)
{
	if(LMT(playerid, LMUNKA_SWAT) || PlayerInfo[playerid][pSWATTag] > 0)
	    return 1;
	else
		return 0;
}

public IsSwatLeader(playerid)
{
	if(PlayerInfo[playerid][pLeader] == LMUNKA_SWAT || PlayerInfo[playerid][pSWATTag] == 2)
	    return 1;
	else
		return 0;
}

public IsKocsi(carid, tipus[])
{
	if(carid <= 0) return 0;
//========================[ Céges(Munka) Kocsik ]========================
	if(egyezik(tipus, "Uttisztito"))
	{
		if(carid >= Kocsik[kUttisztito][0] && carid <= Kocsik[kUttisztito][1])
			return 1;
	}
	else if(egyezik(tipus, "UttisztitoLV"))
	{
		if(carid >= Kocsik[kUttisztitoLV][0] && carid <= Kocsik[kUttisztitoLV][1])
			return 1;
	}
	else if(egyezik(tipus, "Taxi"))
	{
		if(carid >= Kocsik[kTaxi][0] && carid <= Kocsik[kTaxi][1])
			return 1;
	}
	else if(egyezik(tipus, "Targonca"))
	{
		if(carid >= Kocsik[kTargonca][0] && carid <= Kocsik[kTargonca][1])
			return 1;
	}
	else if(egyezik(tipus, "Fatelepes"))
	{
		if(carid >= Kocsik[kFavago][0] && carid <= Kocsik[kFavago][1])
			return 1;
	}
	else if(egyezik(tipus, "Pizza"))
	{
		if(carid >= Kocsik[kPizza][0] && carid <= Kocsik[kPizza][1])
			return 1;
	}
	else if(egyezik(tipus, "Prod"))
	{
		if(carid >= Kocsik[kProd][0] && carid <= Kocsik[kProd][1])
			return 1;
	}
	else if(egyezik(tipus, "Csomagszallito"))
	{
		if(carid >= Kocsik[kCsomagszallito][0] && carid <= Kocsik[kCsomagszallito][1])
			return 1;
	}
	else if(egyezik(tipus, "Farmer"))
	{
		if(carid >= Kocsik[kFarmer][0] && carid <= Kocsik[kFarmer][1])
			return 1;
	}
    else if(egyezik(tipus, "Funyiro"))
	{
		if(carid >= Kocsik[kFunyiro][0] && carid <= Kocsik[kFunyiro][1])
			return 1;
	}
	else if(egyezik(tipus, "Kukas"))
	{
		if(carid >= Kocsik[kKukas][0] && carid <= Kocsik[kKukas][1])
			return 1;
	}
	else if(egyezik(tipus, "KukasLV"))
	{
		if(carid >= Kocsik[kKukasLV][0] && carid <= Kocsik[kKukasLV][1])
			return 1;
	}
	else if(egyezik(tipus, "Busz"))
	{
		if(carid >= Buszok[0] && carid <= Buszok[1])
			return 1;
	}
//========================[ Egyéb Kocsik ]========================
    else if(egyezik(tipus, "Szabad"))
	{
		if(carid >= Kocsik[kSzabad][0] && carid <= Kocsik[kSzabad][1])
			return 1;
	}
    else if(egyezik(tipus, "Gokart"))
	{
		if(carid >= Kocsik[kGokart][0] && carid <= Kocsik[kGokart][1])
			return 1;
	}
	return 0;
}

public IsAVsKocsi(kocsi)
{
	new x;
	for(x = 0; x < MAXVSKOCSI; x++)
	{
	    if(CarInfo[x][Van] == 1)
	    {
	        if(CarInfo[x][cId] == kocsi) return x;
	    }
	}
	return -1;
}

public IsAtDealership(playerid)
{
	if(IsValidPlayerID(playerid))
	{
	    if(PlayerToPoint(20.0, playerid, 1078.572753, -1756.450561, 16.768434))
			return 1;
	}
	return 0;
}

public IsAtClothShop(playerid)
{
    if(IsValidPlayerID(playerid))
	{
        if(PlayerToPoint(25.0,playerid, 204.3504, -159.3505, 1000.5234) || PlayerToPoint(25.0,playerid, 207.1055, -129.1799, 1003.5080))
		{//Binco & Suburban
		    return 1;
		}
		else if(PlayerToPoint(30.0, playerid, 206.3741, -8.2628, 1001.2108) || PlayerToPoint(50.0,playerid, 207.4953, -100.3319, 1005.2580))
		{//Zip & Victim
		    return 1;
		}
	}
	return 0;
}

fuggveny DobozObjectFelrakas(playerid)
{
	new slot = SLOT_BOT;
	if(IsPlayerAttachedObjectSlotUsed(playerid, slot)) RemovePlayerAttachedObject(playerid, slot);
	SetPlayerAttachedObject(playerid, slot, 19636, 6, 0.167999, 0.021999, -0.135000, -111.499938, -9.900009, -10.799999, 1.000000, 1.000000, 1.000000, 0, 0);
	return 1;
}

fuggveny DobozLerakAnimTorles(playerid)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid, SLOT_BOT)) RemovePlayerAttachedObject(playerid, SLOT_BOT);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	ClearAnimations(playerid);
	ClearAnim(playerid);
	return 1;
}

public IsAtGasStation(playerid)
{
	for(new b = 0; b < MAX_BENZINKUT; b++)
	{
		if(PlayerToPoint(BenzinKutak[b][bTav], playerid, BenzinKutak[b][bPosX], BenzinKutak[b][bPosY], BenzinKutak[b][bPosZ]))
		{
			return b;
		}
	}
	
	return NINCS;
}
public IsAtBar(playerid)
{
    if(IsValidPlayerID(playerid))
	{
		if(PlayerToPoint(4.0,playerid,495.7801,-76.0305,998.7578) || PlayerToPoint(10.0,playerid,-229.143188, 1401.401611, 27.765625) ||
		PlayerToPoint(4.0,playerid,499.9654,-20.2515,1000.6797)|| PlayerToPoint(7.0,playerid,1257.7136,-791.0314,1084.0078) || PlayerToPoint(7.0,playerid, 1992.6913,-1825.2166,13.6979))
		{//In grove street bar (with girlfriend), and in Havanna, mafi hq
		    return 1;
		}
		else if(PlayerToPoint(4.0,playerid,1215.9480,-13.3519,1000.9219) || PlayerToPoint(10.0,playerid,-2658.9749,1407.4136,906.2734))
		{//PIG Pen
		    return 1;
		}
		else if(PlayerToPoint(4.0,playerid,1624.9729,2208.9739,13604.8984) || PlayerToPoint(4.0,playerid,1549.7107,2206.8975,13603.8281) || PlayerToPoint(4.0,playerid,1511.9447,2193.1575,13601.3857)
		|| PlayerToPoint(8.0,playerid,1182.44921875, -1638, 14.930000305176) ||  PlayerToPoint(10.0, playerid, 1050.239, 1352.963, 10.820) || 
		IsPlayerInRangeOfPoint(playerid, 10.0,1153.0103,-1475.6779,12210.9512) || IsPlayerInRangeOfPoint(playerid, 10.0,1144.8900,-1528.5199,12210.9746))
		{
			return 1;
		}
	}
	return 0;
}

public IsABoat(carid)
{
	new model = GetVehicleModel(carid);
	new hajok[10] = {430, 446, 452, 453, 454, 472, 473, 484, 493, 595};
	for(new u = 0; u < sizeof(hajok); u++)
	{
		if(hajok[u] == model)
			return 1;
	}
	return 0;
}

public IsAPlane(carid)
{
	new model = GetVehicleModel(carid);
	new repcsik[20] = {417,425,447,460,469,476,487,488,497,511,512,513,519,520,548,553,563,577,592,593};
	for(new u = 0; u < sizeof(repcsik); u++)
	{
		if(repcsik[u] == model)
			return 1;
	}
	return 0;
}
public LakoKocsik(carid)
{
	new model = GetVehicleModel(carid);
	new lako[2] = {483, 508};
	for(new u = 0; u < sizeof(lako); u++)
	{
		if(lako[u] == model)
			return 1;
	}
	return 0;
}
public Bikes(carid)
{
	new model = GetVehicleModel(carid);
	new bikes[14] = {448, 461, 462, 463, 468, 471, 481, 509, 510, 521, 522, 523, 581, 586};
	for(new u = 0; u < sizeof(bikes); u++)
	{
		if(bikes[u] == model)
			return 1;
	}
	return 0;
}

public IsAMotor(carid)
{
	new model = GetVehicleModel(carid);
	new bikes[12] = {448, 461, 462, 463, 468, 521, 522, 581, 586};
	for(new u = 0; u < sizeof(bikes); u++)
	{
		if(bikes[u] == model)
			return 1;
	}
	return 0;
}

public IsABicikli(carid)
{
	new model = GetVehicleModel(carid);
	new biciklik[3] = {481, 509, 510};
	for(new u = 0; u < sizeof(biciklik); u++)
	{
		if(biciklik[u] == model)
			return 1;
	}
	return 0;
}

public IsACopCar(carid)
{
	return RendorKocsi(carid)
}
fuggveny OktatoKocsi(kocsi)
{
	new vs = IsAVsKocsi(kocsi);
	if(vs != NINCS) if(CarInfo[vs][cFrakcio] == LMUNKA_OKTATO) return true;
	else if(kocsi >= LKocsik[LMUNKA_OKTATO-1][0] && kocsi <= LKocsik[LMUNKA_OKTATO-1][1]) return true;
	return false;
}
public IsAnAmbulance(kocsi)
{
	new vs = IsAVsKocsi(kocsi);
	if(vs != NINCS) if(CarInfo[vs][cFrakcio] == LMUNKA_MENTO) return true;
	else if(kocsi >= LKocsik[LMUNKA_MENTO-1][0] && kocsi <= LKocsik[LMUNKA_MENTO-1][1]) return true;
	return false;
}

public IsATruck(carid)
{
	new model = GetVehicleModel(carid);
	new jarmuvek[10] = {403, 414, 433, 456, 498, 499, 514, 515, 573, 609};
	for(new u = 0; u < sizeof(jarmuvek); u++)
	{
		if(jarmuvek[u] == model)
			return 1;
	}
	return 0;
}

public IsAPlato(carid)
{
	new model = GetVehicleModel(carid);
	new jarmuvek[4] = {435, 450, 591, 584};
	for(new u = 0; u < sizeof(jarmuvek); u++)
	{
		if(jarmuvek[u] == model)
			return 1;
	}
	return 0;
}

fuggveny IsCarupCar(kocsinev[], carupid)
{

	new Carup0[][] = {
		{"Linerunner"},
		{"Dumper"},
		{"Firetruck"},
		{"Trashmaster"},
		{"Pony"},
		{"Mule"},
		{"Leviathan"},
		{"Whoopee"},
		{"Hunter"},
		{"Rhino"},
		{"Barracks"},
		{"Packer"},
		{"Monster0"},
		{"Seasparrow"},
		{"Flatbed"},
		{"Sparrow"},
		{"Dinghy"},
		{"Rustler"},
		{"BMX"},
		{"Dozer"},
		{"Hotring0"},
		{"Sandking"},
		{"HotringA"},
		{"HotringB"},
		{"Bloodring"},
		{"Bike"},
		{"Mountain"},
		{"Tanker"},
		{"Roadtrain"},
		{"Hydra"},
		{"Cement"},
		{"Forklift"},
		{"Tractor"},
		{"Combine"},
		{"Dodgem"},
		{"Cargobob"},
		{"Utility"},
		{"MonsterA"},
		{"MonsterB"},
		{"Raindance"},
		{"Kart"},
		{"Mower"},
		{"Dune"},
		{"DFT30"},
		{"Ranger"},
		{"SWAT"}
	};

	new Carup1[][] = {
		{"Caddy"},
		{"Baggage"},
		{"Tug"}
	};

    new Carup2[][] = {
	    {"Faggio"},
		{"Admiral"},
		{"Bravura"},
		{"Cadrona"},
		{"Camper"},
		{"Clover"},
		{"Esperanto"},
		{"Glendale"},
		{"Greenwood"},
		{"Hermes"},
		{"Intruder"},
		{"Majestic"},
		{"Oceanic"},
		{"Perennial"},
		{"Phoenix"},
		{"Picado"},
		{"Premier"},
		{"Previon"},
		{"Primo"},
		{"Regina"},
		{"Sadler"},
		{"Sunrise"},
		{"Tahoma"},
		{"Tampa"},
		{"Walton"}
	};

	new Carup3[][] = {
	    {"BF400"},
		{"Freeway"},
		{"Sanchez"},
		{"Quad"},
		{"Alpha"},
		{"Bandito"},
		{"Blista"},
		{"Bobcat"},
		{"Buccaner"},
		{"Buffalo"},
		{"Burrito"},
		{"Club"},
		{"Elegant"},
		{"Emperor"},
		{"Euros"},
		{"Fortune"},
		{"Journey"},
		{"Landstalker"},
		{"Mesa"},
		{"Nebula"},
		{"Rancher"},
		{"Sabre"},
		{"Solair"},
		{"Stallion"},
		{"Vincent"},
		{"Virgo"},
		{"Washington"},
		{"Willard"},
		{"Yosemite"},
		{"ZR350"}
	};

	new Carup4[][] = {
	    {"FCR900"},
		{"PCJ600"},
		{"Wayfarer"},
		{"Banshee"},
		{"Bullet"},
		{"Cheetah"},
		{"Comet"},
		{"Feltzer"},
		{"Huntley"},
		{"Hustler"},
		{"Infernus"},
		{"Merit"},
		{"Sentinel"},
		{"SuperGT"},
		{"Turismo"},
		{"Windsor"}
	};

	new Carup5[][] = {
	    {"NRG500"},
		{"Hotknife"},
		{"Patriot"},
		{"Stafford"},
		{"Stretch"},
		{"Maverick"}
	};

	new Carup6[][] = {
	    {"Elegy"},
		{"Flash"},
		{"Jester"},
		{"Stratum"},
		{"Sultan"},
		{"Uranus"}
	};

	new Carup7[][] = {
	    {"Blade"},
		{"Broadway"},
		{"Remington"},
		{"Savanna"},
		{"Slamvan"},
		{"Tornado"},
		{"Voodoo"}
	};

	new darab[8];
	darab[0] = 45;
	darab[1] = 3;
	darab[2] = 25;
	darab[3] = 30;
	darab[4] = 16;
	darab[5] = 6;
	darab[6] = 6;
	darab[7] = 7;

	if(carupid == 0)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if(egyezik(Carup0[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 1)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if(egyezik(Carup1[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 2)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if(egyezik(Carup2[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 3)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if(egyezik(Carup3[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 4)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if(egyezik(Carup4[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 5)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if(egyezik(Carup5[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 6)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if(egyezik(Carup6[a], kocsinev))
				return 1;
		}
	}

	if(carupid == 7)
	{
		for(new a = 0; a < darab[carupid]; a++)
		{
			if(egyezik(Carup7[a], kocsinev))
				return 1;
		}
	}

	return 0;

}

fuggveny NagyKezdobetusNev(playerid)
{
	if(!IsValidPlayerID(playerid)) return 0;

	new nev[MAX_PLAYER_NAME];
	nev = PlayerNameEx(playerid);

	for(new n = 0; n < strlen(nev); n++)
	{
		if(n == 0 && nev[n] == chrtolower(nev[n]))
			return 0;
		if(nev[n] == '_' && n > 0 && nev[n+1] == chrtolower(nev[n+1]))
			return 0;
		//if(n > 0 && nev[n] != '_' && nev[n-1] != '_' && nev[n] != chrtolower(nev[n])) // Hogy a többi betü kisbetü-e
		//	return 0;
	}

	return 1;
}

fuggveny IsValidName(playerid)
{
    if(IsValidPlayerID(playerid))
    {
        new player[24], alahuzasok = 0;
        GetPlayerName(playerid, player, 24);

		new cenzura[5][10] = { "buzi", "kocsog", "hulye", "szar", "geci"};

		for(new x = 0; x < sizeof(cenzura); x++)
		{
			if(strfind(player, cenzura[x], false) != -1)
				return 0;
		}

        for(new n = 0; n < strlen(player); n++)
        {
        	if(player[n] == ']' || player[n] == '[' || player[n] == '_' && n == 0 || player[n] == '_' && n == (strlen(player) - 1))
				return 0;
        	if(player[n] == '_')
			{
				if(player[n-1] == '_' || player[n+1] == '_')
					return 0;
				else
					alahuzasok ++;
			}
        }
        if(alahuzasok < 1 || alahuzasok > 2)
            return 0;
    }
    return 1;
}

fuggveny IsValidNameFromString(string[])
{
	new alahuzasok = 0;
	for(new n = 0; n < strlen(string); n++)
	{
		if(string[n] == '_')
			alahuzasok++;
		if(string[n] == ']' || string[n] == '[')
			return 0;
	}

	if(alahuzasok < 1 || alahuzasok > 2)
		return 0;

    return 1;
}

IsValidSkin(skinid)
{
    #define	MAX_BAD_SKINS (2)
    new badSkins[MAX_BAD_SKINS] = {0, 74};
	
    //if(skinid < 0 || skinid > 299 && skinid < 900 || skinid > 928 && skinid < 997 || skinid > 999) return false; // GTA United
    if(skinid < 0 || skinid > 299) return false;
    for(new i = 0; i < MAX_BAD_SKINS; i++) { if(skinid == badSkins[i]) return false; }
    #undef MAX_BAD_SKINS
    return 1;
}

IsValidCar(model)
{
	if(model < 400 || model > 611) return false;
    return 1;
}

stock IsAdminSzolis(playerid, vankivetel = VAN)
{
	if(AdminDuty[playerid]) return true;
	else if(vankivetel == VAN && Admin(playerid, FOADMIN)) return true;
	else return false;
}

stock KezdoJatekos(playerid)
{
	if(Szint(playerid) < MINSZINT) return true;
	return false;
}

stock IsBerelhetoJarmu(kocsi)
{
	if(kocsi >= BerelhetoKocsik[0] && kocsi <= BerelhetoKocsik[1]) return 1;
	return false;
}

public BanEllenorzes(playerid)
{
	new query[512], where[128], ido, mido, gido = gettime();
	Format(query, "SELECT ido FROM %s WHERE %s", SQL_DB_Kocsik, where);
	Format(where, "cim='%s' or cim='%s'", PlayerName(playerid, true), PlayerIP(playerid));

	if(!IsPlayerNPC(playerid) && Mysql_Num(SQL_DB_Ban, where) >= 1)
	{
		Format(where, "cim='%s' or cim='%s ORDER BY ido DESC'", PlayerName(playerid, true), PlayerIP(playerid));
		mido = strval(Mysql_Get(SQL_DB_Ban, "ido", where));
		ido = floatround((0.0+mido-gido) / 3600.0, floatround_round);
		/*####################################################*/
		new bannok[256], kibannolt[256];
		
		bannok = Mysql_Get(SQL_DB_Ban, "Oka", where);		
		kibannolt = Mysql_Get(SQL_DB_Ban, "Bannolta", where);
		/*####################################################*/
		new meddig[128];
		if(ido > 0 && ido < 24) Format(meddig, "%d óráig", ido);
		else if(ido >= 24 && ido < (24*7))
		{
			if(ido % 24 == 0)
				Format(meddig, "%d napig", (ido / 24));
			else
				Format(meddig, "%d napig és %d óráig", floatround(ido/24, floatround_floor), (ido%24));
		}
		else if(ido >= (24*7))// && ido < (24*7*4))
		{
			if(ido % (24*7) == 0)
				Format(meddig, "%d hétig", (ido/24/7));
			else
			{
				if(ido % 24 == 0)
					Format(meddig, "%d hétig és %d napig", floatround(ido/24/7, floatround_floor), floatround((ido/24)%7, floatround_floor));
				else
					Format(meddig, "%d hétig, %d napig, és %d óráig", floatround(ido/24/7, floatround_floor), floatround((ido/24)%7, floatround_floor), (ido%24));
			}
		}

		SCM(playerid, COLOR_LIGHTBLUE, ValasztoVonal("Kitiltás"));
		if(ido <= 0)
		{
			Msg(playerid, "Sajnálom, de te bannolva lettél!");			
			MsgFormat(playerid, "Bannolt: %s", kibannolt);
			MsgFormat(playerid, "Ban oka: %s", bannok);
			Msg(playerid, "Idõtartam: ÖRÖK");
		}	
		else
		{
			Msg(playerid, "Sajnálom, de te bannolva lettél!");
			MsgFormat(playerid, "Idõ: %s", meddig);
		}
		SCM(playerid, COLOR_LIGHTBLUE, ValasztoVonal("Kitiltás"));
		
		KickEx(playerid);
		//Kick(playerid);
	}
	return 1;
}
//------------------------------------------------------------------------------------------------------
stock ConnectMessage(playerid, const type[], reason = 1)
{
	new szoveg[64], conntype[8];
	Format(conntype, "%s", type);
	
	if(egyezik(conntype, "join"))
	{
		Format(szoveg, "*** %s csatlakozott a szerverre", PlayerName(playerid));
	}
	else if(egyezik(conntype, "leave"))
	{
		new DisConnectReason[3][] =
		{
			"Idõtúllépés/Crash",
			"Kilépés",
			"Kick/Ban"
		};
	
		Format(szoveg, "*** %s elhagyta a szervert (%s)", PlayerName(playerid), DisConnectReason[reason]);
	}
	
	PlayerForeach(x)
	{
		if(x == playerid) continue;
		if(!Logged(x))
		{
			SCM(x, COLOR_GREY, szoveg);
		}
	}
	
	return 1;
}

stock ValtozokAlapertekre(playerid)
{
	OnplayerSpawnLefutott[playerid] = false;
	SetPVarInt(playerid, "InAnim", 0);
	
	//InfoBoxotNezi[playerid] = false; InfoTxtShowing[playerid] = false;
	C4Taska[playerid] = NINCS;
	AdminEllenorzes[playerid][0] = 0; AdminEllenorzes[playerid][1] = 0; MitModosit[playerid] = NINCS;
	SzefInfok[playerid] = true; UtalasSzamla[playerid] = NINCS; BaratkozoSzemely[playerid] = NINCS;
    RuhatElvett[playerid] = 0; BolyaKezbe[playerid] = 0; PotKerek[playerid] = 0; TaskaKezbe[playerid] = NINCS; Helyszinel[playerid] = false;
	ElveszIdo[playerid] = 0; TaskaVan[playerid] = 0; KocsibanVan[playerid] = false;
	SetHealth(playerid,100.0); Segitik[playerid] = 0; JoRPTesztValasz[playerid] = RPTESZTKERDES; RPTesztHiba[playerid] = 0;
	RPTeszt[playerid] = 0; Nyelv_Tanul[playerid] = 0; LVBeDolgozik[playerid] = false; Alszik[playerid] = 0; INV[playerid][0] = NINCS; INV[playerid][1] = NINCS;
	Bankszamla_Belep[playerid][0] = NINCS; Bankszamla_Belep[playerid][1] = NINCS; PickupAntiFlood[playerid] = 0;
	LoginTD[playerid] = NINCS; DMOff[playerid] = 0; ViewStats[playerid][0] = 0; ViewStats[playerid][1] = NINCS; AutoAjto[playerid] = true;
	SegitBillentyu[playerid] = NINCS; SegitStep[playerid] = NINCS; KitSegit[playerid] = NINCS; Megnyomta[playerid] = false; TankolasAra[playerid] = 0; 
	PlayerChannel[playerid] = 0; BanParancsKikuledve[playerid] = false; ReportElkuldve[playerid] = false;
	
	for(new f = 0; f < 12; f++) 
	{ 
		PlayerInfo[playerid][pFegyver][f] = 0;
		PlayerInfo[playerid][pTolteny][f] = 0;
	}
	
	// FlyMode
	noclipdata[playerid][cameramode] = CAMERA_MODE_NONE;
	noclipdata[playerid][lrold] = 0;
	noclipdata[playerid][udold] = 0;
	noclipdata[playerid][mode] = 0;
	noclipdata[playerid][lastmove] = 0;
	noclipdata[playerid][accelmul] = 0.0;
	
	for(new i = 0; i < MAX_OBJECT_TENGELY; i++)
	{
		SavedSzirenaPos[playerid][i] = 0.0;
	}
	
	SASDuty[playerid] = 0; SASEngedely[playerid] = 0;
    Korhaz[playerid] = 0; PoloskaHallgat[playerid] = false; Gyujtas[playerid] = false; StreameltKocsiID[playerid] = 0;
 	SetPVarInt(playerid, "color", 18643); Csengo[playerid] = 1; PizzaSzallitasHaz[playerid] = NINCS; Doboz[playerid] = 0;
 	BetorPos[playerid][0] = 0.0; BetorPos[playerid][1] = 0.0; BetorPos[playerid][2] = 0.0; Kuldetesben[playerid] = 0;
 	WantedLevel[playerid] = 0; WantedPoints[playerid] = 0; BKUse[playerid] = 0; C4Lerakva[playerid] = NINCS; C4Kocsiban[playerid] = NINCS;
 	Logining[playerid] = 0; BetoroCucc[playerid] = 0; Kresz[playerid] = 0;
	VanKB[playerid] = false; KBWait[playerid] = 0; KBWait2[playerid] = 0; BRendszer[playerid] = 0; BRendszer2[playerid] = 0; BRendszer3[playerid] = 0; BRKod[playerid] = 0;
	AJSzovegIdo[playerid] = 10; AJSzoveg[playerid] = 0; AJSzovegHiba[playerid] = 0; PajzsEloveve[playerid] = 0; Poloska[playerid] = NINCS;
	Felberelve[playerid] = NINCS; FelberelveOsszeg[playerid] = NINCS; Tej[playerid] = 0; Skinsel[playerid] = 0;
	KiertMegy[playerid] = NINCS; Munkaban[playerid] = NINCS; KaszinoCsekk[playerid] = 0; BementIdo[playerid] = 0;
	C4Generatoron[playerid] = NINCS; TogRadio[playerid] = 0;  SzallitasPozicio[playerid] = NINCS; SzallitasAru[playerid] = NINCS;
	SzemuvegFennt[playerid] = 0; C4Object[playerid] = NINCS; DutyIdo[playerid] = 0; AszoliIdo[playerid] = 0; Megprobal[playerid] = 0;
	OnkentesMentos[playerid] = 0; CurrentCCTV[playerid] = -1; Maszk[playerid] = 0; PajzsFelrakva[playerid] = 0;
	Aukciozik[playerid] = false; Harcol[playerid] = false; HarcolTerulet[playerid] = NINCS; AJSzokesek[playerid] = 0;
	Rejtett[playerid] = 0;  Ugrasok[playerid] = {0,0,0}; TaxiHivas[playerid] = 0; MentoHivas[playerid] = 0; MentoHivasSzin[playerid] = NINCS;
	Vizsgafajta[playerid] = 0; SzemBekotve[playerid] = 0; SzajBekotve[playerid] = 0; JatekBetoltve[playerid] = false; Licitalt[playerid] = false;
 	SebessegKorlat[playerid] = 0; Szunet[playerid] = false; SzunetIdo[playerid] = 0; nnios[playerid] = NINCS; Hazbanvan[playerid] = 0;
	Nyomozott[playerid] = 0; JarmuKulcs[playerid] = NINCS; HazKulcs[playerid] = NINCS;
	Sokkolt[playerid] = 0; Sokkolva[playerid] = 0; Leutott[playerid] = 0; Leutve[playerid] = false; LeutveIdo[playerid] = 0; BelepesIdo[playerid] = 0; TrafiPax[playerid][tAktiv] = false; TrafiPax[playerid][tBuntetheto] = 0; Tankol[playerid][0] = 0; Kilepesek[playerid] = true;
	JatekosZsak[playerid][0] = 0; JatekosZsak[playerid][1] = 0; JatekosZsak[playerid][2] = 0; BenzintSzallit[playerid] = false; PlayerOnline[playerid] = true; Sokk[playerid] = 0;
	HolTart[playerid] = NINCS; Tszin[playerid] = NINCS; Tkerek[playerid] = NINCS; Csere[playerid] = NINCS; MitCsere[playerid] = NINCS; SzefEngedely[playerid] = 0;
	RadioHallgatas[playerid] = NINCS; LezartUtat[playerid] = 0; LezartUtZ[playerid] = 0.000000; LezartUtY[playerid] = 0.000000; LezartUtX[playerid] = 0.000000;
	UresUveg[playerid] = 0; UvegEloveve[playerid] = 0; KiMergezte[playerid] = NINCS; Mergezve[playerid] = 0; VanSzelvenye[playerid] = 0; talalatok[playerid] = 0;
	PSzam5[playerid] = 0; PSzam6[playerid] = 0; PSzam7[playerid] = 0; PSzam8[playerid] = 0; UMDuty[playerid] = 0;
	PSzam1[playerid] = 0; PSzam2[playerid] = 0; PSzam3[playerid] = 0; PSzam4[playerid] = 0; LoginFolyamatban[playerid] = false;
	TudReportolni[playerid] = 0;
	BViadal[playerid] = 0; Nevek[playerid] = 0; Biztos[playerid] = 0; Belepve[playerid] = 0; nnicelpont[playerid] = NINCS;
	PrivatEngedely[playerid] = NINCS; PrivatAr[playerid] = NINCS; PrivatAjanlat[playerid] = NINCS; VizsgaAr[playerid] = 0; VizsgaAjanlat[playerid] = NINCS; FegyverEngedelyAjanlat[playerid] = NINCS; C4Kocsiban[playerid] = NINCS; C4Z[playerid] = 0.000000; C4Y[playerid] = 0.000000; C4X[playerid] = 0.000000; C4Lerakva[playerid] = 0;
	CsatlakozottSzamla[playerid] = NINCS; Szondaztat[playerid] = NINCS; Rabol[playerid] = 0; //Tankol[playerid] = 0;
	Edzik[playerid] = 0; TanultStilus[playerid] = 0; AdasVeteliNeki[playerid] = NINCS; AdasVeteliTipus[playerid] = NINCS; MostLepettBe[playerid] = 1; Fegyvere[playerid] = 0;
	HitmanDuty[playerid] = 0; HibasBelepes[playerid] = 0; tuningolo[playerid] = 0; ov[playerid] = 0;
	reporttiltva[playerid] = 0; FelujitasElfogadas[playerid] = NINCS; RegEngedely[playerid] = 0; RegAdatok[playerid] = 0;
	ElsoSpawn[playerid] = 1; AFKIdo[playerid] = 0; AdminDuty[playerid] = false; ScripterDuty[playerid] = 0; AFKDialogShowing[playerid] = 0;
	AFK[playerid] = 0; Visz[playerid] = NINCS; Engedely[playerid] = 0; LopasProbalkozas[playerid] = 0;
	SelectChar[playerid] = 0; HidePM[playerid] = 0; PhoneOnline[playerid] = 0;
	SelectCharID[playerid] = 0; SelectCharPlace[playerid] = 0; ChosenSkin[playerid] = 0;
	GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; Gokartozas[playerid] = 0;
    ApprovedLawyer[playerid] = 0; CallLawyer[playerid] = 0; WantLawyer[playerid] = 0;
	UsedFind[playerid] = 0;
	CP[playerid] = 0; Robbed[playerid] = 0; Autocp[playerid] = 0; Repulocp[playerid] = 0; Hajocp[playerid] = 0; Csomagszallitocp[playerid] = 0; Motorcp[playerid] = 0; Jogsineki[playerid] = NINCS; Tanulofelpenz[playerid] = 0;
	CarOffer[playerid] = 999; CarPrice[playerid] = 0; CarID[playerid] = 0;
	RobbedTime[playerid] = 0; MoneyMessage[playerid] = 0; Condom[playerid] = 0;
	STDPlayer[playerid] = 0; SexOffer[playerid] = 999; SexPrice[playerid] = 0;
	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0;
	KokainKartya[playerid]= 0; KokainSzort[playerid] = 0; KokainFelszivott[playerid] = 0;
	TalkingLive[playerid] = 255; LiveOffer[playerid] = 999; TakingLesson[playerid] = 0;
	RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; MapIconsShown[playerid] = 0;
	PlayerCuffed[playerid] = 0;
	RegistrationStep[playerid] = 0; AnimLekeres[playerid] = 0;
	ConnectedToPC[playerid] = 0; OrderReady[playerid] = 0; HitmanRendeles[playerid] = 0;
	MedicTime[playerid] = 0; NeedMedicTime[playerid] = 0; MedicBill[playerid] = 0;
	skine[playerid] = 0; fegyvere[playerid] = 0;
	OnDuty[playerid] = 0; WantedLevel[playerid] = 0;
	BoxWaitTime[playerid] = 0; SchoolSpawn[playerid] = 0; ChangePos2[playerid][1] = 0;
	TransportDuty[playerid] = 0; PlayerTied[playerid] = 0;
	BusCallTime[playerid] = 0; TaxiCallTime[playerid] = 0; MedicCallTime[playerid] = 0; MechanicCallTime[playerid] = 0;
	FindTimePoints[playerid] = 0; FindTime[playerid] = 0; JobDuty[playerid] = 0;
	Mobile[playerid] = -1; BoxOffer[playerid] = 999; PlayerBoxing[playerid] = 0;
	Spectate[playerid] = 255; PlayerDrunk[playerid] = 0; PlayerDrunkTime[playerid] = 0;
	Unspec[playerid][sLocal] = 255;
	PaperOffer[playerid] = 999; ConsumingMoney[playerid] = 0;
    gLastCar[playerid] = 0; gBooc[playerid] = 0;
	gOoc[playerid] = 0; gNews[playerid] = 0; BigEar[playerid] = 0; gDice[playerid] = 0; gFam[playerid] = 0; gReport[playerid] = 0; gLogin[playerid] = 0; gInfo[playerid] = 0; TogVa[playerid] = 0;
	gPlayerLogged[playerid] = 0;
	gPlayerSpawned[playerid] = 0; PlayerKarting[playerid] = 0; PlayerInKart[playerid] = 0;
	PlayerStoned[playerid] = 0;
	TicketOffer[playerid] = 999; TicketMoney[playerid] = 0;
	Csiga[playerid] = 0; Cp[playerid] = 0; Morzsolas[playerid] = 0; Tekerve[playerid] = 0; Joint[playerid] = 0; JointIdo[playerid] = 0;
	Drogozott[playerid] = 0; Animban[playerid] = 0; Animbanemrakhato[playerid] = 1; MunkaFelvetel[playerid] = 0;
	MennyiszerLop[playerid] = NINCS;
	NevvaltasiEngedely[playerid] = 0; MunkaFolyamatban[playerid] = 0; IdeiglenesAS[playerid] = 0;
    Emelo[playerid] = 0;FelmondoUgyved[playerid] = NINCS;
	FelmondasAra[playerid] = 0;
	TaxiAccepted[playerid] = 999; BusAccepted[playerid] = 999;
	PlayerInfo[playerid][pCash] = dollah;
	BereltKocsi[playerid] = NINCS; PlayersChannel[playerid] = 999;
	TransportValue[playerid] = 0; TransportMoney[playerid] = 0; TransportTime[playerid] = 0; TransportCost[playerid] = 0; TransportDriver[playerid] = 999;
	PlayerOnMission[playerid] = 0; MissionCheckpoint[playerid] = 0;
	Tevezik[playerid] = NINCS; Tevezve[playerid] = NINCS;
	ProposeOffer[playerid] = 999; MarryWitness[playerid] = 999; MarryWitnessOffer[playerid] = 999; MarriageCeremoney[playerid] = 0; ProposedTo[playerid] = 999; GotProposedBy[playerid] = 999; DivorceOffer[playerid] = 999;
	Fishing[playerid] = 0; HuzzadVaze[playerid] = 0; BotAKezbe[playerid] = 0; Felni[playerid] = 0; BuyedMatrica[playerid]  = 0; NeOn[playerid]  = 0;
    Felhatalmazva[playerid] = 0;
	Raktarengedely[playerid] = 0;
	
	LoginPWKitoltve[playerid] = 0;
	JarmuInfoDrawMegjelenitve[playerid] = false;
	
	Kamerazik[playerid] = 0; LoterenGyakorol[playerid] = 0, GazAlarc[playerid] = 0;
	
	for(new x=0; x < 7; x++) PlayerInfo[playerid][pOktatasok][x] = 0;
	PlayerInfo[playerid][pKresz] = 0;
	JatekosLaptopInfo[playerid][jWifi] = NINCS;
	JatekosLaptopInfo[playerid][jLaptopBe] = false;
	JatekosLaptopInfo[playerid][jFolyamat] = 0;
	
	PlayerInfo[playerid][pCamera] = 0;
	PlayerInfo[playerid][pCameraE] = 0;
	
	// Ricardo féle
	ElrontottAjelszo[playerid] = 0;
	HalalAnim[playerid] = false;
	
	KorhazType[playerid] = 0;
	ASDuty[playerid] = 0;
	
	JogsiJarmuID[playerid] = 0;
	CsomagszallitoKocsiID[playerid] = 0;
	AdminKocsiID[playerid] = NINCS;
	HalalAnimPlay(playerid, false);
	
	HifiLerakva[playerid] = NINCS;
	
	//ERIK!
	kdebug[playerid] = 0;
	KaR[playerid] = 0;
	Sisak[playerid] = 0; SisakotVesz[playerid] = 0;
	RadioElveve[playerid] = false; ElvettRadio[playerid][rFrakcio] = NINCS; ElvettRadio[playerid][rRang] = NINCS;
	Kezenlove[playerid] = false;
	KinekKuldUzit[playerid] = NINCS;
	GodMode[playerid] = false;

	PlayerInfo[playerid][pLevel] = 0;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pDonateRank] = 0;
	PlayerInfo[playerid][gPupgrade] = 0;
	PlayerInfo[playerid][pConnectTime] = -1;
	PlayerInfo[playerid][pSex] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pOrigin] = 0;
	PlayerInfo[playerid][pExp] = 0;
	PlayerInfo[playerid][pAccount] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pWantedDeaths] = 0;
	PlayerInfo[playerid][pPhoneBook] = 0;
	PlayerInfo[playerid][pLottoNr] = 0;
	PlayerInfo[playerid][pJob1] = 0;
	PlayerInfo[playerid][pJob2] = 0;
	PlayerInfo[playerid][pPayCheck] = 0;
	PlayerInfo[playerid][pHeadValue] = 0;
	PlayerInfo[playerid][pJailed] = BORTON_NINCS;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pMats] = 0;
	PlayerInfo[playerid][pKokain] = 0;
	PlayerInfo[playerid][pHeroin] = 0;
	PlayerInfo[playerid][pMarihuana] = 0;
	PlayerInfo[playerid][pLeader] = 0;
	PlayerInfo[playerid][pMember] = 0;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pFishes] = 0;
	PlayerInfo[playerid][pChar] = 0;
	PlayerInfo[playerid][pContractTime] = 0;
	PlayerInfo[playerid][pContractTime2] = 0;
	PlayerInfo[playerid][pDetSkill] = 0;
	PlayerInfo[playerid][pSexSkill] = 0;
	PlayerInfo[playerid][pBoxSkill] = 0;
	PlayerInfo[playerid][pLawSkill] = 0;
	PlayerInfo[playerid][pMechSkill] = 0;
	PlayerInfo[playerid][pJackSkill] = 0;
	PlayerInfo[playerid][pCarSkill] = 0;
	PlayerInfo[playerid][pFegyokerSkill] = 0;
	PlayerInfo[playerid][pNewsSkill] = 0;
	PlayerInfo[playerid][pDrugsSkill] = 0;
	PlayerInfo[playerid][pRiasztoSkill] = 0;
	PlayerInfo[playerid][pHackingSkill] = 0;
	PlayerInfo[playerid][pSHealth] = 0.0;
	PlayerInfo[playerid][pHealth] = MAXHP;
	PlayerInfo[playerid][pPosX] = 0.0;
	PlayerInfo[playerid][pPosY] = 0.0;
	PlayerInfo[playerid][pPosZ] = 0.0;
	PlayerInfo[playerid][pInt] = 15;
	PlayerInfo[playerid][pLocal] = NINCS;
	PlayerInfo[playerid][pModel] = 167;
	//new randphone = 1000 + random(8999);//minimum 1000  max 9999 //giving one at the start
	PlayerInfo[playerid][pPnumber] = 0;
	PlayerInfo[playerid][pPhousekey] = NINCS;
	PlayerInfo[playerid][pPbiskey] = NINCS;
	PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pBoatLic] = 0;
	PlayerInfo[playerid][pFishLic] = 0;
	PlayerInfo[playerid][pGunLic] = 0;
	PlayerInfo[playerid][pCarTime] = 0;
	PlayerInfo[playerid][pPayDay] = 0;
	PlayerInfo[playerid][pPayDayHad] = 0;
	PlayerInfo[playerid][pCDPlayer] = 0;
	PlayerInfo[playerid][pWins] = 0;
	PlayerInfo[playerid][pLoses] = 0;
	PlayerInfo[playerid][pAlcoholPerk] = 0;
	PlayerInfo[playerid][pDrugPerk] = 0;
	PlayerInfo[playerid][pMiserPerk] = 0;
	PlayerInfo[playerid][pPainPerk] = 0;
	PlayerInfo[playerid][pTraderPerk] = 0;
	PlayerInfo[playerid][pTutorial] = 0;
	PlayerInfo[playerid][pWarns] = 0;
	PlayerInfo[playerid][pKWarns] = 0;
	PlayerInfo[playerid][pFuel][UZEMANYAGTIPUS_BENZIN] = 0;
	PlayerInfo[playerid][pFuel][UZEMANYAGTIPUS_DIESEL] = 0;
	PlayerInfo[playerid][pLokator] = 0;
	PlayerInfo[playerid][pHamisNev] = 0;
	//PlayerInfo[playerid][pNyomkoveto] = 0;
	//PlayerInfo[playerid][pNyomkovetes] = 0;
	PlayerInfo[playerid][pSpawned] = 0;
	PlayerInfo[playerid][pMuanyag] = 0;
	PlayerInfo[playerid][pCserje] = 0;
	PlayerInfo[playerid][pMak] = 0;
	PlayerInfo[playerid][pCannabis] = 0;
	PlayerInfo[playerid][pKaja] = 0;
	PlayerInfo[playerid][pDrogido] = 0;
	PlayerInfo[playerid][pAS] = 0;
	PlayerInfo[playerid][pCrash] = 0;
	PlayerInfo[playerid][pCelet] = MAXHP;
	PlayerInfo[playerid][pCpajzs] = 0.0;
	PlayerInfo[playerid][pPcarkey] = NINCS;
	PlayerInfo[playerid][pCigiUsed] = 0;
	PlayerInfo[playerid][pCigiFuggoseg] = 0;
	PlayerInfo[playerid][pCigi] = 0;
	PlayerInfo[playerid][pNikotin] = 0;
	PlayerInfo[playerid][pGyujto] = 0;
	PlayerInfo[playerid][pPia] = 0;
	PlayerInfo[playerid][pNIDTag] = 0;
	PlayerInfo[playerid][pOperator] = 0;
	PlayerInfo[playerid][pNIDRang] = 0;
	PlayerInfo[playerid][pKituntetes] = 0;
	PlayerInfo[playerid][pSzallitott] = 0;
	PlayerInfo[playerid][pSpawnchange] = 0;
	PlayerInfo[playerid][pTeloEgyenleg] = 0;
	PlayerInfo[playerid][pUtlevel] = 0;
	PlayerInfo[playerid][pSzemelyi] = 0;
	PlayerInfo[playerid][pLakcimkartya] = 0;
	PlayerInfo[playerid][pMunkaVallalasi] = 0;
	PlayerInfo[playerid][pStilus] = 0;
	PlayerInfo[playerid][pBankSzamla] = 0;
	PlayerInfo[playerid][pBankSzamlaSzam] = 0;
	PlayerInfo[playerid][pBankSzamlaJelszo] = 0;
	PlayerInfo[playerid][pC4] = 0;
	PlayerInfo[playerid][pHitman] = 0;
	PlayerInfo[playerid][pHitmanNev][0] = EOS;
	PlayerInfo[playerid][pKey][0] = EOS;
	PlayerInfo[playerid][pPremiumCsomag] = 0;
	PlayerInfo[playerid][pPremiumIdo] = 0;
	PlayerInfo[playerid][pPremiumPont] = 0;
	PlayerInfo[playerid][pPower] = 0;
	PlayerInfo[playerid][pMotorJogsi] = 0;
	PlayerInfo[playerid][pCsomagszallitoJogsi] = 0;
	PlayerInfo[playerid][pReportChannel] = NINCS;
	PlayerInfo[playerid][pViewReportChannel] = NINCS;
	PlayerInfo[playerid][pSzemuveg] = 0;
	PlayerInfo[playerid][pMaszk] = 0;
	PlayerInfo[playerid][pHelyszinelo] = 0;
	PlayerInfo[playerid][pVontatoKotel] = 0;
	PlayerInfo[playerid][pSWATTag] = 0;
	PlayerInfo[playerid][pSWATRang] = 0;

	PlayerInfo[playerid][pBankKartya] = 0;
	PlayerInfo[playerid][pFishes] = 0;
	PlayerInfo[playerid][pBot] = 0;
	PlayerInfo[playerid][pCsali] = 0;
	PlayerInfo[playerid][pDamil] = 0;
	for(new i = 1; i < OSSZMUNKA;i++) {
		PlayerInfo[playerid][pKitanulva][i] = 0;
	}
	PlayerInfo[playerid][pTerkep] = 0;
	PlayerInfo[playerid][pCsavarhuzo] = 0;
	PlayerInfo[playerid][pC2] = 0;
	PlayerInfo[playerid][pC2Taska] = 0;
	PlayerInfo[playerid][pJelzes][0] = 0;
	PlayerInfo[playerid][pJelzes][1] = COLOR_INVISIBLE;
	PlayerInfo[playerid][pJelzes][2] = NINCS;
	PlayerInfo[playerid][pNyelv] = NINCS;
	PlayerInfo[playerid][pNyelvTanulas][0] = 0;
	PlayerInfo[playerid][pNyelvTanulas][1] = NINCS;
	for(new i = 0; i < MAX_NYELV; i++) {
		PlayerInfo[playerid][pNyelvTanulva][i] = 0;
	}

	ChatAnim[playerid] = 1;
	
	PlayerInfo[playerid][pAlmossag] = 0.0;
	PlayerInfo[playerid][pEhseg] = 0.0;
	PlayerInfo[playerid][pSzomjusag] = 0.0;
	PlayerInfo[playerid][pCp] = 0;
	PlayerInfo[playerid][pCsipogo] = 0;
	PlayerInfo[playerid][pSapka] = 0;
	PlayerInfo[playerid][pUtolsoLoginIP][0] = EOS;
	PlayerInfo[playerid][pUtolsoLoginIdo] = 0;
	
	PlayerInfo[playerid][pHotelSzoba] = NINCS;
	
	PlayerInfo[playerid][pSzerelo] = 0;
	PlayerInfo[playerid][pSzereloRang] = 0;
	
	PlayerInfo[playerid][pHazMasodtulaj] = 0;
	
	PlayerInfo[playerid][pAdminAlnevBe] = 0;
	
	NoName[playerid] = false;
	
	kBankrober[playerid] = INVALID_PLAYER_ID;
	kBankrob[playerid][TagokSzama] = 0;
	kBankrob[playerid][TolvajokSzama] = 0;
	kBankrob[playerid][HackerekSzama] = 0;
	for(new i=0; i< 10; i++) kBankrob[playerid][kTagok][i] = INVALID_PLAYER_ID;
	
	for(new i=0; i < INV_SLOT; i++) PlayerInfo[playerid][pInventory][i] = NINCS;

	PlayerInfo[playerid][pOrvossag] = 0;
    PlayerInfo[playerid][pSzerszamoslada] = 0;

	PlayerRaceInfo[playerid][xVersenyen] = NINCS;
	PlayerRaceInfo[playerid][xEpites] = NINCS;
	return 1;
}

stock Run_MapRemover(playerid)
{
	DebugMessage("%s - Run_MapRemover(playerid) - START", PlayerName(playerid));
	new File:file = fopen(MAPS_TXT, io_read);
	if(!file) return false;
	new 
		string[128],
		removed = 0
	;
	while(fread(file, string))
	{	
		if(strfind(string, "RemoveBuildingForPlayer(") != -1)
		{
			Format(string, "%s", strreplace(" ", "", string));
			Format(string, "%s", strreplace("RemoveBuildingForPlayer(playerid,", "", string));
			Format(string, "%s", strreplace(");", "", string));
			
			new objectid, Float:pos[4];
			sscanf(string, "p<,>dffff", objectid, pos[0], pos[1], pos[2], pos[3]);
			
			RemoveBuildingForPlayer(playerid, objectid, pos[0], pos[1], pos[2], pos[3]);
			removed ++;
		}
	}
	fclose(file);
	DebugMessage("RemoveBuildingek száma: %d", removed);
	DebugMessage("%s - Run_MapRemover(playerid) - END", PlayerName(playerid));
	return 1;
}

public OnPlayerConnect(playerid)
{
	DebugMessage("%s - OnPlayerConnect(playerid) - START", PlayerName(playerid));
	if(IsPlayerNPC(playerid))
	{
		gPlayerLogged[playerid] = 1;
		//if(!egyezik(PlayerIP(playerid), "127.0.0.1")) KickEx(playerid);
		return 1;
	}
	
	numplayers ++;
	BanParancsKikuledve[playerid] = false;
	
	if(numplayers >= MAX_PLAYERS) // kell az egyenlõség jel mert van 0-ás ID
	{
		MsgFormat(playerid, "A szerver betelt! Max férõhely: %d", (MAX_PLAYERS - 1));
		KickEx(playerid);
		return 0;
	}
	
	if(!GameModeBetoltve)
	{
		Msg(playerid, "A mód még nem töltött be! Próbáld meg egy kicsit késõbb!");
		KickEx(playerid);
		return 0;
	}
	
	PlayerNameGet(playerid);
	if(!IsValidName(playerid))
	{
		Msg(playerid, "Ez nem RP-s név! Vezetéknév_Keresztnév");
		KickEx(playerid);
		return 0;
	}
	if(VanBenneSzam(PlayerName(playerid, true)))
	{
	    Msg(playerid, "A nevekben nincsenek számok!");
		KickEx(playerid);
		return 0;
	}
	if(!NagyKezdobetusNev(playerid))
	{
		Msg(playerid, "A nevek nagy betûvel kezdõdnek!");
		KickEx(playerid);
		return 0;
	}
	
	BanEllenorzes(playerid);	
	GPCICheck(playerid);
	
	PlayTarhelySound(playerid, "LoginMusic.mp3");
	ClearChat(playerid, 500);
	
	ValtozokAlapertekre(playerid);
	ResetPlayerWeaponDamageType(playerid);
	P_OnPlayerConnect(playerid);	
	Run_MapRemover(playerid);
	/*ClearCrime(playerid);
	ClearGroceries(playerid);
	ClearMarriage(playerid);*/
	
	if(RegCheck(playerid, "SQL")) {
		PlayerInfo[playerid][pRegistered] = 2;
	} else {
		PlayerInfo[playerid][pRegistered] = 0;
	}
	
	MysqlGetPlayerId(playerid);	
	MysqlGetPlayerULI(playerid);
	
	if(Registered(playerid) == 2)
	{
		MysqlGetPass(playerid);
		//MysqlGetMail(playerid);
	}
	
	SetPlayerColor(playerid, COLOR_GRAD2);

	VehicleForeach(c)
	{
		if(!IsVehicleConnected(c)) continue;
		if(Locked(c)) SetVehicleParamsForPlayer(playerid, c, 0, 1);
	}
	
	new bekistring[128];
	format(bekistring, sizeof(bekistring), "[IP: %s | ID: %d]%s Csatlakozott", PlayerIP(playerid), playerid, PlayerName(playerid));
	BeKilepes(bekistring);
	
	DebugMessage("%s - OnPlayerConnect(playerid) - END", PlayerName(playerid));
	return 1;
}

public ClearMarriage(playerid)
{
	if(IsValidPlayerID(playerid))
	{
	    new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "No-one");
		strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
		PlayerInfo[playerid][pMarried] = 0;
	}
	return 1;
}
public ClearCrime(playerid)
{
	if(IsValidPlayerID(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "********");
		strmid(PlayerCrime[playerid][pBplayer], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusing], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusedof], string, 0, strlen(string), 255);
	}
	return 1;
}
public ClearGroceries(playerid)
{
	if(IsValidPlayerID(playerid))
	{
	    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
	    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
	    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
	}
	return 1;
}

stock KillTimers(playerid)
{
	if(!IsValidPlayerID(playerid)) return 0;
	
	KillTimer(LoginTimeLimit[playerid]);
	KillTimer(AnimTimer[playerid]);
	
	KillTimer(HBMTimer[playerid]);
	KillTimer(AFKTimer[playerid]);
	KillTimer(SegitTimer[playerid]);
	
	KillTimer(GetPVarInt(playerid, "CheckpointTimer"));
	KillTimer(GetPVarInt(playerid, "FareTimer"));
	
	return 1;
}

//------------------------------------------------------------------------------------------------------
public OnPlayerDisconnect(playerid, reason)
{
	DebugMessage("%s - OnPlayerDisconnect(playerid) - START", PlayerName(playerid));
	if(IsPlayerNPC(playerid)) return 1;
	
	ConnectMessage(playerid, "leave");
	
	numplayers --;
	
	P_OnPlayerDisconnect(playerid);
	
	ShowInfoBar(playerid, false);
	KillTimers(playerid);
	DeleteAllTextDraw(playerid);
	
	PlayerOnline[playerid] = false;
	if(Logged(playerid) && resivan != 1)
	{
		AdatMentesSQL(playerid);
	}
	
	if(AdminKocsiID[playerid] != NINCS) 
	{
		new carid = AdminKocsiID[playerid];
		PlayerForeach(x)
		{
			if(IsPlayerInVehicle(x, carid))
			{
				RemovePlayerFromVehicle(x);
				Msg(x, "A jármû tulajdonosa elhagyta a szervert.");
			}
		}
		AdminJarmu[carid] = 0;
		AdminKocsiID[playerid] = NINCS;
		DestroyVehicle(carid);
	}
	
	new bereltkocsi = BereltKocsi[playerid];
	if(bereltkocsi != NINCS)
	{
		PlayerForeach(x)
		{
			if(x == playerid) continue;
			if(IsPlayerInVehicle(x, bereltkocsi))
			{
				RemovePlayerFromVehicle(x);
			}
		}
		DestroyVehicle(bereltkocsi);
		BereltKocsi[playerid] = NINCS;
	}
	
	if(PlayerInfo[playerid][pPcarkey] != NINCS)
	{
		new KocsiID = CarInfo[PlayerInfo[playerid][pPcarkey]][cId];
		PlayerForeach(x)
		{
			if(IsPlayerInVehicle(x, KocsiID))
			{
				RemovePlayerFromVehicle(x);
				Msg(x, "A jármû tulajdonosa elhagyta a szervert.");
			}
		}
		SetVehicleVirtualWorld(KocsiID, JARMU_AFK_VW);
	}
	
	if(PlayerInfo[playerid][pPcarkey2] != NINCS)
	{
		new KocsiID = CarInfo[PlayerInfo[playerid][pPcarkey2]][cId];
		PlayerForeach(x)
		{
			if(IsPlayerInVehicle(x, KocsiID))
			{
				RemovePlayerFromVehicle(x);
				Msg(x, "A jármû tulajdonosa elhagyta a szervert.");
			}
		}
		SetVehicleVirtualWorld(KocsiID, JARMU_AFK_VW);
	}
	
	if(CsomagszallitoKocsiID[playerid] != 0) 
	{
		new carid = CsomagszallitoKocsiID[playerid];
		
		DestroyVehicle(carid);
		CsomagszallitoKocsiID[playerid] = 0;
	}
	
	if(HifiLerakva[playerid] != NINCS)
	{
		new h = HifiLerakva[playerid];
		
		PlayerForeach(x)
		{
			if(IsPlayerInRangeOfPoint(x, MAX_HIFI_DISTANCE, HifiInfo[h][hX], HifiInfo[h][hY], HifiInfo[h][hZ]))
			{
				StopAudioStreamForPlayer(x);
				strmid(HifiZene[x], "-", 0, strlen("-"), 256);
				Msg(x, "Az HiFi tulajdonosa elhagyta a játékot, így a HiFi törlésre került.");
			}
		}
		
		HifiInfo[h][hVan] = 0;
		HifiInfo[h][hX] = 0;
		HifiInfo[h][hY] = 0;
		HifiInfo[h][hZ] = -50;
		DestroyDynamicObject(HifiInfo[h][hObject]);
		HifiLerakva[playerid] = NINCS;
	}
	
	if(JogsiJarmuID[playerid] != 0) 
	{
		new carid = JogsiJarmuID[playerid];
		
		DestroyVehicle(carid);
		JogsiJarmuID[playerid] = 0;
	}

	if(Sisak[playerid] == 1)
	{
		RemovePlayerAttachedObject(playerid, SLOT_SISAK);
		Sisak[playerid] = 0;
	}
	
	if(LoterInfo[lGyakorlo] == playerid)
	{
		ResetLoter();
	}
	KillTimer(HeroinTimer2[playerid]);
	KillTimer(HeroinTimer[playerid]);
	KillTimer(KokainTimer2[playerid]);
	KillTimer(KokainTimer[playerid]);

	MentoHivas[playerid] = 0;
	
	KezObject_Torol(playerid);
	if(TaskaKezbe[playerid] != NINCS)
	{
	    new Float:X, Float:Y, Float:Z;
	    GetPlayerPos(playerid,X,Y,Z);
	    TaskaInfo[TaskaKezbe[playerid]][tPos][0] = X;
		TaskaInfo[TaskaKezbe[playerid]][tPos][1] = Y;
		TaskaInfo[TaskaKezbe[playerid]][tPos][2] = Z;
		TaskaInfo[TaskaKezbe[playerid]][tInt] = GetPlayerInterior(playerid);
		TaskaInfo[TaskaKezbe[playerid]][tVW] = GetPlayerVirtualWorld(playerid);
		TaskaInfo[TaskaKezbe[playerid]][tObject] = CreateDynamicObject(1210, X, Y, Z-1.0, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		TaskaKezbe[playerid] = NINCS;
	}
	if(MentoHivas[playerid] != 0 || TaxiHivas[playerid] != 0)
	{
		PlayerForeach(p)
		{
			if(KiertMegy[p] == playerid)
			{
				Msg(p, "A személy akihez mentél, elhagyta a szervert!");
				SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
				KiertMegy[p] = NINCS;
			}
		}
	}
	if(AFKDialogShowing[playerid] != 0)
	{
	    KillTimer(AFKTimer[playerid]);
	}
	if(SzemuvegFennt[playerid] != 0)
	{
		RemovePlayerAttachedObject(playerid, SLOT_SZEMUVEG);
		SzemuvegFennt[playerid] = 0;
	}
	if(SapkaFennt[playerid] != 0)
	{
		RemovePlayerAttachedObject(playerid, SLOT_SAPKA);
		SapkaFennt[playerid] = 0;
	}
	if(BotAKezbe[playerid] != 0)
    {
		RemovePlayerAttachedObject(playerid,SLOT_BOT);
		BotAKezbe[playerid] = 0;
	}
	if(Maszk[playerid] != 0)
	{
	    RemovePlayerAttachedObject(playerid, SLOT_MASZK);
	    Maszk[playerid] = 0;
	}
	if(CurrentCCTV[playerid] > -1)
	{
	    KillTimer(KeyTimer[playerid]);
		CurrentCCTV[playerid] = -1;
	}
	if(Emelo[playerid] != 0)
	{
	    KillTimer(EmeloKeyTimer[playerid]);
	    Emelo[playerid] = 0;
	}
	
	if(Utzarak[playerid][uVan])
		Utzar(playerid, UTZAR_TOROL_MOST);
	

	if(Tevezve[playerid] != NINCS && IsValidPlayerID(Tevezve[playerid]))
	{
		TogglePlayerSpectating(Tevezve[playerid], 0);
		SetPlayerPos(Tevezve[playerid], TVPos[Tevezve[playerid]][0], TVPos[Tevezve[playerid]][1], TVPos[Tevezve[playerid]][2]);
		SetPlayerInterior(Tevezve[playerid], TVInt[Tevezve[playerid]]);
		SetPlayerVirtualWorld(Tevezve[playerid], TVVW[Tevezve[playerid]]);
		Freeze(Tevezve[playerid], 3000);
		Tevezik[Tevezve[playerid]] = NINCS;
	}

	if(MedicTime[playerid] > 1 && MedicTime[playerid] < NeedMedicTime[playerid]) {
		MedicBill[playerid] = 1;
	}
	
	if(TrafiPax[playerid][tAktiv])
	{
	    if(IsValidDynamic3DTextLabel(TrafiPax[playerid][t3D]))
			DestroyDynamic3DTextLabel(TrafiPax[playerid][t3D]);
	}
	if(IsAdminSzolis(playerid, NINCS))
	{
	    if(IsValidDynamic3DTextLabel(AdminDuty3D[playerid]))
			DestroyDynamic3DTextLabel(AdminDuty3D[playerid]);
		
		AdminDuty[playerid] = false;
	}

	if(Szunet[playerid])
	{
	    if(IsValidDynamic3DTextLabel(Szunet3D[playerid]))
			DestroyDynamic3DTextLabel(Szunet3D[playerid]);
	}
	if(pajzsnala[playerid] > 0)
	{
	    if(IsValidDynamic3DTextLabel(Swat3D[playerid]))
			DestroyDynamic3DTextLabel(Swat3D[playerid]);
	}
	
	if(reason != 0 && reason != 2)
	{
	    if(PlayerCuffed[playerid] == 2 && reason != 0)
		{
			Jail(playerid, "+", 7200, "off", "bilincsben kilépés");
			Bilincs(playerid, 0);
			strmid(PlayerInfo[playerid][pJailtAdta], "Rendszer", 0, strlen("Rendszer"), 32);
		}
	}
	
	new tav, egyebinfo[128];
	if(PlayerCuffed[playerid] == 1) egyebinfo = "Sokkolva";
	else if(PlayerCuffed[playerid] == 2) egyebinfo = "Bilincsben";
	
	if(Animban[playerid] != 0)
	{
		if(!strlen(egyebinfo)) egyebinfo = "Animban";
		else format(egyebinfo, 128, "%s, animban", egyebinfo,egyebinfo);
		
		Jail(playerid, "+", 7200, "off", "bilincsben kilépés");
		strmid(PlayerInfo[playerid][pJailtAdta], "Rendszer", 0, strlen("Rendszer"), 32);
	}
	
	if(Leutve[playerid])
	{
		if(!strlen(egyebinfo)) egyebinfo = "Leütve";
		else format(egyebinfo, 128, "%s, leütve", egyebinfo,egyebinfo);
	}
   
	if(!strlen(egyebinfo))
	{
		egyebinfo = "Nincs";
	}
	else
	{
		new jailok[48], ido, jailtadta[10];
		Format(jailok, "%s kilépés", egyebinfo)
		ido = 15*60; jailtadta = "Rendszer";
		
		PlayerUpdate(playerid,"JailTime = '%d'", ido);
		PlayerUpdate(playerid,"Jailed = '%d'", 5);
		PlayerUpdate(playerid,"JailOK = '%s'", jailok);
		PlayerUpdate(playerid,"JailtAdta = '%s'", jailtadta);
		
		PlayerTextFormat(playerid, "%s %d perc AdminJailt kapott a rendszer által", PlayerName(playerid), ido/60);
		AdminCMD(PlayerText[playerid]);
		
		PlayerTextFormat(playerid, "Oka: %s kilépés", egyebinfo);
		AdminCMD(PlayerText[playerid]);
		
		/*Jail(playerid, "+", ido, "off", jailok);
		strmid(PlayerInfo[playerid][pJailtAdta], "Rendszer", 0, strlen("Rendszer"), 32);*/
	}
	
	if(!resivan) PlayerForeach(x)
	{
		if(!IsValidPlayerID(x) || !Logged(x) || IsPlayerNPC(x) || !Kilepesek[x] || playerid == x) continue;
		tav = floatround(GetDistanceBetweenPlayers(playerid, x));
		if(tav <= 30)
		{
			switch(reason)
			{
				case 0: SendFormatMessage(x, COLOR_GREY, "(( Kilépés: %s crashelt a közeledben | Info: %s ))", PlayerName(playerid), egyebinfo);
				case 1: SendFormatMessage(x, COLOR_GREY, "(( Kilépés: %s kilépett a közeledben | Info: %s ))", PlayerName(playerid), egyebinfo);
				case 2: SendFormatMessage(x, COLOR_GREY, "(( Kilépés: %s kickelve/bannolva lett a közeledben | Info: %s ))", PlayerName(playerid), egyebinfo);
			}
		}
	}
	
	/*PlayerForeach(x)
	{
		if(Admin(x, 1))
		{
			if(gLogin[playerid] == 0)
			{
				switch(reason)
				{
					case 0: SendFormatMessage(x, COLOR_LIGHTGREEN, "%s lelépett a szerverrõl (crash) | Szabálysértés: %s{ADFF2F} | Létszám: %s", PlayerName(playerid), egyebinfo, SzerverLetszam());
					case 1: SendFormatMessage(x, COLOR_LIGHTGREEN, "%s lelépett a szerverrõl (-------) | Szabálysértés: %s{ADFF2F}  | Létszám: %s", PlayerName(playerid), egyebinfo, SzerverLetszam());
					case 2: SendFormatMessage(x, COLOR_LIGHTGREEN, "%s lelépett a szerverrõl (kick/ban) | Szabálysértés: %s{ADFF2F} | Létszám: %s", PlayerName(playerid), egyebinfo, SzerverLetszam());
				}
			}
		}
	}*/
	
	if(LezartUtat[playerid] != NINCS)
	{
		DestroyDynamicObject(LezartUtat[playerid]);
		if(IsValidDynamic3DTextLabel(LezartUt3D[playerid]))
			DestroyDynamic3DTextLabel(LezartUt3D[playerid]);
		LezartUtat[playerid] = NINCS;
	//	LezartUt3D[playerid] = NINCS;
		LezartUtZ[playerid] = 0.000000; 
		LezartUtY[playerid] = 0.000000; 
		LezartUtX[playerid] = 0.000000; 
	}	
	
	new bekistring[128], tipus[32];
	if(reason == 0) tipus = "crashelt";
	else if(reason == 1) tipus = "kilépett";
	else tipus = "kickelve/bannolva lett";

	format(bekistring, sizeof(bekistring), "%s %s", PlayerName(playerid), tipus);
	BeKilepes(bekistring);

	PlayerInfo[playerid][pDrogido] = 0;
	pajzsnala[playerid] = 0;
	
	if(Visz[playerid] != NINCS)
		Visz[playerid] = NINCS;

	PlayerForeach(q)
	{
		if(Visz[q] != NINCS)
		{
			if(Visz[q] == playerid)
				Visz[q] = NINCS;
		}
		if(AdasVeteliNeki[q] != NINCS)
		{
			if(AdasVeteliNeki[q] == playerid)
				AdasVeteliNeki[q] = NINCS;
		}
	}

	if(LMT(playerid, LMUNKA_MENTO) || OnkentesMentos[playerid] != 0)
	{
	    if(OnDuty[playerid] == 1) { Medics--; }
	}
	else if(LMT(playerid, LMUNKA_SZERELO))
	{
	    if(JobDuty[playerid] == 1) { Mechanics -= 1; }
	}
	
	DebugMessage("%s - OnPlayerDisconnect(playerid) - END", PlayerName(playerid));
	return 1;
}

public SetPlayerSpawn(playerid)
{
	if(IsValidPlayerID(playerid))
	{
		SetPlayerDrunkLevel(playerid, 0);
		Animbanemrakhato[playerid] = 0;
		//Animban[playerid] = 0;
		SetHealth(playerid, MAXHP);
		Bilincs(playerid, 0);
		AJVarakozas[playerid] = 10;
		StopZene(playerid);
		
	    PlayerInfo[playerid][pSpawned] = 1;
		///////////////////////////////////////////////////////////////// regisztráció utáni cuccok || 1. login
		if(PlayerInfo[playerid][pTutorial] == 0)
		{
			ResetVW(playerid);
			UnFreeze(playerid);
			
			SetHealth(playerid, MAXHP);
			SetPlayerHealth(playerid, MAXHP);
			SetPlayerArmour(playerid, 0.0);
			
			new setskin = 23;
			
			SetPlayerSkin(playerid, setskin);
			PlayerInfo[playerid][pModel] = setskin;
			
			KezdoTesztSpawn(playerid);
			
			//Freeze(playerid, 5000);
			
			new kezdopenz = 1000;
			PlayerInfo[playerid][pCash] = 0;
			GiveMoney(playerid, kezdopenz);
			
			SetPlayerLevel(playerid, 0);
			/*PlayerInfo[playerid][pTutorial] = 1;
			AdatMentesSQL(playerid);*/			
			return 1;
		}
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(JatekosHalal[playerid] > 0)
		{
			SetPlayerPos(playerid, TeleportDest[playerid][0], TeleportDest[playerid][1], TeleportDest[playerid][2]);
			if(JatekosHalal[playerid] == 1)
			{
				for(new x = 0; x < 12; x++)
				{
					if(PlayerInfo[playerid][pTolteny][x] != 0) 
					{
						/* fontos, hogy ide GivePlayerWeapon függvény kell, különben összebugolnak a lõszerek */
						GivePlayerWeapon(playerid, PlayerInfo[playerid][pFegyver][x], PlayerInfo[playerid][pTolteny][x]); 
					}
				}
			}
			SetTimerEx("HalalAnimPlay", 1500, false, "ib", playerid, true);
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == BORTON_LSPD)
		{
			new inti = 2;
			switch(random(3))
			{
			    case 0:
			    {
				    SetPlayerInterior(playerid, inti);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerPos(playerid, 598.8797, -527.6399, -22.4474);
				}
				case 1:
				{
				    SetPlayerInterior(playerid, inti);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerPos(playerid, 597.7153, -530.3923, -22.4474);
				}
				case 2:
				{
				    SetPlayerInterior(playerid, inti);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerPos(playerid, 598.2170, -534.1073, -22.4474);
				}
				default:
				{
				    SetPlayerInterior(playerid, inti);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerPos(playerid, 597.7153, -530.3923, -22.4474);
				}
			}
			Freeze(playerid, 3000);
			for(new i=0; i < 10; i++) { SendClientMessage(playerid,COLOR_WHITE, ""); }
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "{15FF00}================== {0059FF}[ BüntetésInfó ]{15FF00}================== ");
			SendFormatMessage(playerid,COLOR_YELLOW, "Oka: %s",PlayerInfo[playerid][pJailOK]);
			SendFormatMessage(playerid,COLOR_YELLOW, "Jailt Adta: %s",PlayerInfo[playerid][pJailtAdta]);
			SendFormatMessage(playerid, COLOR_YELLOW, "Hátralevõ idõ: %d perc és %d másodperc", PlayerInfo[playerid][pJailTime]/60, PlayerInfo[playerid][pJailTime]%60);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "{15FF00}================== {0059FF}[ BüntetésInfó ]{15FF00}================== ");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == BORTON_ADMIN)
		{
			SetPlayerPos(playerid, 1412.639892,-1.787510,1000.924377);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 8888+playerid);
			for(new i=0; i < 10; i++) { SendClientMessage(playerid,COLOR_WHITE, ""); }
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "{15FF00}================== {0059FF}[ AdminJail ]{15FF00}================== ");
			SendFormatMessage(playerid,COLOR_YELLOW, "Oka: %s",PlayerInfo[playerid][pJailOK]);
			SendFormatMessage(playerid,COLOR_YELLOW, "Jailt Adta: %s",PlayerInfo[playerid][pJailtAdta]);
			SendFormatMessage(playerid, COLOR_YELLOW, "Hátralevõ idõ: %d perc és %d másodperc", PlayerInfo[playerid][pJailTime]/60, PlayerInfo[playerid][pJailTime]%60);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "{15FF00}================== {0059FF}[ AdminJail ]{15FF00}================== ");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == BORTON_NAV)
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			Freeze(playerid,2500);
			switch(random(3))
			{
				case 0:
				{
				    SetPlayerPos(playerid, 229.5210, 208.6753, 1001.9869);
				}
				case 1:
				{
				    SetPlayerPos(playerid, 224.8280, 210.8836, 1001.9869);
				}
				case 2:
				{
				    SetPlayerPos(playerid, 218.6374, 209.4559, 1001.9869);
				}
				default:
				{
				    SetPlayerPos(playerid, 218.6374, 209.4559, 1001.9869);
				}
			}
			for(new i=0; i < 10; i++) { SendClientMessage(playerid,COLOR_WHITE, ""); }
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "{15FF00}================== {0059FF}[ BüntetésInfó ]{15FF00}================== ");
			SendFormatMessage(playerid,COLOR_YELLOW, "Oka: %s",PlayerInfo[playerid][pJailOK]);
			SendFormatMessage(playerid,COLOR_YELLOW, "Jailt Adta: %s",PlayerInfo[playerid][pJailtAdta]);
			SendFormatMessage(playerid, COLOR_YELLOW, "Hátralevõ idõ: %d perc és %d másodperc", PlayerInfo[playerid][pJailTime]/60, PlayerInfo[playerid][pJailTime]%60);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "{15FF00}================== {0059FF}[ BüntetésInfó ]{15FF00}================== ");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == BORTON_NNI)
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid,1364.7653,543.2070,1068.7582);
			Freeze(playerid,2000);
			
			for(new i=0; i < 10; i++) { SendClientMessage(playerid,COLOR_WHITE, ""); }
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "{15FF00}================== {0059FF}[ BüntetésInfó ]{15FF00}================== ");
			SendFormatMessage(playerid,COLOR_YELLOW, "Oka: %s",PlayerInfo[playerid][pJailOK]);
			SendFormatMessage(playerid,COLOR_YELLOW, "Jailt Adta: %s",PlayerInfo[playerid][pJailtAdta]);
			SendFormatMessage(playerid, COLOR_YELLOW, "Hátralevõ idõ: %d perc és %d másodperc", PlayerInfo[playerid][pJailTime]/60, PlayerInfo[playerid][pJailTime]%60);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "{15FF00}================== {0059FF}[ BüntetésInfó ]{15FF00}================== ");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == BORTON_ADMIN2)
		{
			SetPlayerPos(playerid, 414.628, -11.005, 1001.812);
			SetPlayerInterior(playerid, 2);
			SetPlayerVirtualWorld(playerid, 10000 + playerid);
			for(new i=0; i < 10; i++) { SendClientMessage(playerid,COLOR_WHITE, ""); }
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "{15FF00}================== {0059FF}[ BüntetésInfó ]{15FF00}================== ");
			SendFormatMessage(playerid,COLOR_YELLOW, "Oka: %s",PlayerInfo[playerid][pJailOK]);
			SendFormatMessage(playerid,COLOR_YELLOW, "Jailt Adta: %s",PlayerInfo[playerid][pJailtAdta]);
			SendFormatMessage(playerid, COLOR_YELLOW, "Hátralevõ idõ: %d perc és %d másodperc", PlayerInfo[playerid][pJailTime]/60, PlayerInfo[playerid][pJailTime]%60);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "{15FF00}================== {0059FF}[ BüntetésInfó ]{15FF00}================== ");
			return 1;
		}
		if(MedicBill[playerid] == 1) // kórházspawn | kórház spawn
		{
			Freeze(playerid, 3000);
			new house = PlayerInfo[playerid][pPhousekey];
			if(house != NINCS)
			{
				SetPlayerPos(playerid, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey], HouseInfo[house][hEntrancez]);
				Msg(playerid, "A házadban ébredtél egy hosszabb alvás után.");
			}
			else
			{
				SetPlayerPos(playerid, 1598.8921, -2332.0735, 13.5384);
				Msg(playerid, "Hosszas eszméletvesztés után a reptéren tértél magadhoz! Nincsenek emlékeid hogy kerültél ide.");
			}
			
			Korhaz[playerid] = 1;
	        TogglePlayerControllable(playerid, 0);
	        MedicBill[playerid] = 0;
			MedicTime[playerid] = 0;
			NeedMedicTime[playerid] = 0;
			SetHealth(playerid, MAXHP);
			HalalAnimPlay(playerid, false);
			Kezenlove[playerid] = false;
			return 1;
		}
		if(MostLepettBe[playerid] == 1)
		{
			LoginFolyamatban[playerid] = false;
			
			if(gettime() >= (PlayerInfo[playerid][pUtolsoLoginIdo] + (30 * 60)) || GetPVarInt(playerid, "MostRegisztralt"))
			{
				new number = NINCS;
				if(PlayerInfo[playerid][pPhousekey] != NINCS)
				{
					number = PlayerInfo[playerid][pPhousekey];					
					ResetVW(playerid);
					SetPlayerPos(playerid, HouseInfo[number][hEntrancex], HouseInfo[number][hEntrancey], HouseInfo[number][hEntrancez]);
					Msg(playerid, "Mivel van házad, ezért itt ébredtél!");
				}
				/*else if(PlayerInfo[playerid][pHotelSzoba] != NINCS)
				{
					number = PlayerInfo[playerid][pHotelSzoba];
					SetPlayerPos(playerid, HotelInfo[number][hEntranceX], HotelInfo[number][hEntranceY], HotelInfo[number][hEntranceZ]);
					Msg(playerid, "Mivel van apartmanod, ezért itt ébredtél!");
				}*/
				else
				{
					ResetVW(playerid);
					SetPlayerPos(playerid, 1808.5321, -1917.6758, 13.5654);
					SetPlayerFacingAngle(playerid, 90.0);
					Msg(playerid, "Nincs házad/apartmanod, ezért itt ébredtél!");
				}
				DeletePVar(playerid, "MostRegisztralt");
			}
			else
			{
				SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);
				SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pLocal]);
				SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ] + 0.5);
				Msg(playerid, "Mivel kevesebb mint 15 perce voltál aktív, így a kilépési helyednél ébredtél!");
			}
			
			PlayerInfo[playerid][pUtolsoLoginIdo] = gettime();
			
			SetHealth(playerid, PlayerInfo[playerid][pCelet]);
			SetPlayerArmour(playerid, PlayerInfo[playerid][pCpajzs]);
			//SetPlayerArmour(playerid, 0.0);
			
			iPlayerHealth[playerid] = PlayerInfo[playerid][pCelet];
			JatekosElete[playerid] = PlayerInfo[playerid][pCelet];

			//Animbanemrakhato[playerid] = 0;
			
			for(new x = 0; x < 12; x++)
			{
				if(PlayerInfo[playerid][pTolteny][x] > 0) 
				{
					/* fontos, hogy ide GivePlayerWeapon függvény kell, különben összebugolnak a lõszerek */
					GivePlayerWeapon(playerid, PlayerInfo[playerid][pFegyver][x], PlayerInfo[playerid][pTolteny][x]); 
				}
			}
			
			/*new index;
			if(DivatInfo[SLOT_SAPKA][playerid][dVan] == 1)
			{
				index = SLOT_SAPKA;
				SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 2, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
			}
			if(DivatInfo[SLOT_SZEMUVEG][playerid][dVan] == 1)
			{
				index = SLOT_SZEMUVEG;
				SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 2, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
			}
			if(DivatInfo[SLOT_KARORA][playerid][dVan] == 1)
			{
				index = SLOT_KARORA;
				SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 13, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
			}*/
			
			MostLepettBe[playerid] = 0;
			
			return 1;
		}
	}
	return false;
}

stock CsatornaUpdate(playerid)
{
	if(IsValidPlayerID(playerid))
	{
		new csatorna[24];
		Format(csatorna, "~b~Csat: ~h~~g~%d", PlayerChannel[playerid]);
		TextDrawSetString(pHUD[playerid][3], csatorna);
	}
	return 1;
}

//------------------------------------------------------------------------------------------------------
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(SegitBillentyu[playerid] != NINCS && newkeys != 0)
	{
		KillTimer(SegitTimer[playerid]);
		Felsegit(playerid,KitSegit[playerid],newkeys);
		return 1;
	}
	
	if(HalalAnim[playerid])
	{
		HalalAnimPlay(playerid, true);
		return 0;
	}
	
	/*if((newkeys == KEY_LOOK_BEHIND) && IsPlayerInAnyVehicle(playerid)) // 2-es gomb lámpavillogás
	{
		new kocsi = GetPlayerVehicleID(playerid);
		if(!VehicleELM[kocsi])
		{
			BlinkingLights(kocsi, true);
		}
		else
		{
			BlinkingLights(kocsi, false);
		}
	}*/
	
	if(PRESSED(KEY_NO)) // jármû kezelõ panel | mûszerfal | jkp | n betû
	{
		new text[64];
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			{
				GameTextForPlayer(playerid, "~r~Hiba!~n~Nem te vagy a sofõr!", (3 * 1000), 5);
				return 1;
			}
			new kocsi = GetClosestVehicle(playerid);
			
			Format(text, "{%s}%s {FFFFFF}mûszerfal", COLOR_MSG, GetVehicleModelName(kocsi, true));
			ShowPlayerDialog(playerid, DIALOG_KOCSIM_BELUL, DIALOG_STYLE_LIST, text, "Motor\nLámpa\nMotorháztetõ (nyit)\nRádió\nElakadásjelzõ\nMegkülönböztetõ jelzés\nAblak\nAjtók (nyit/zár)", "Ok", "Mégse");
		}
		else
		{
			new kocsi = GetClosestCar(playerid);
			if(GetDistanceToVehicle(playerid,kocsi) < 5.5)
			{
				Format(text, "{%s}%s {FFFFFF}kezelõ panel", COLOR_MSG, GetVehicleModelName(kocsi, true));
				ShowPlayerDialog(playerid, DIALOG_KOCSIM_KIVUL, DIALOG_STYLE_LIST, text, "Csomagtartó\nMotorháztetõ (zár)\nAjtók (nyit/zár)", "Ok", "Mégse");
			}	
		}
		return 1;
	}
	
	if(newkeys & KEY_FIRE)
	{
		new weaponid = GetPlayerWeapon(playerid);
		if(weaponid == 17)
		{
			new Float:x, Float:y, Float:z;
			new time = 5 * 1000;
			GetPlayerPos(playerid, x, y, z);
			PlayerForeach(i)
			{
				if(IsPlayerInRangeOfPoint(i, 10.0, x, y, z) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				{
					if(GazAlarc[i] == 0)
					{
						ApplyAnimation(i, "ped", "gas_cwr", 1.0, 0, 0, 0, time, 0);
						//Freeze(i, time);
						GiveHealth(i, -10);
					}
				}
			}
		}
	}
	
	Walk_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	AFKIdo[playerid] = 0;
	
	if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
	if(HOLDING(128) && PRESSED(KEY_FIRE) || HOLDING(128) && HOLDING(KEY_FIRE) || PRESSED(KEY_FIRE) || HOLDING(KEY_FIRE))
	{
	    if(LoterInfo[lGyakorlatvan] != 0 && LoterInfo[lGyakorlo] == playerid && LoterInfo[lTalalt] == 0)
	    {
	        new Float:oPos[3];
	        GetDynamicObjectPos(LoterInfo[ObjectAktiv],oPos[0],oPos[1],oPos[2]);
	    	if(IsPlayerAimingAt(playerid, oPos[0], oPos[1], oPos[2], 1.5))
	    	{
	    	    if(LoterInfo[AktivObjectTusz])
				{
					Msg(playerid, "Ez túsz volt! +1 hibapont"); 
					LoterInfo[lTalalat] ++;
					LoterInfo[lHibapont] ++;
					LoterInfo[lTalalt] = 1;
				}
				else 
				{
					Msg(playerid, "Szép lövés!"); 
					LoterInfo[lTalalat] ++;
					LoterInfo[lTalalt] = 1;
				}
			}
			else
			{
				Msg(playerid, "Mellé! +1 hibapont!");
				LoterInfo[lHibapont] ++;
				LoterInfo[lTalalt] = 1;
			}
		}
	}
	
	if(Sofor(playerid) && !IsAPlane(GetPlayerVehicleID(playerid)) && !IsABoat(GetPlayerVehicleID(playerid)) && !Bikes(GetPlayerVehicleID(playerid)))
	{
		if(PRESSED(KEY_LOOK_RIGHT)) // jobbra index | E
		{
			if(KocsiIndexStat[GetPlayerVehicleID(playerid)] == INDEX_JOB)
			{
				IndexKi(GetPlayerVehicleID(playerid));
			}
			else
			{
				IndexLampa(GetPlayerVehicleID(playerid), INDEX_JOB);
			}
		}
		else if(PRESSED(KEY_LOOK_LEFT)) // balra index | Q
		{
			if(KocsiIndexStat[GetPlayerVehicleID(playerid)] == INDEX_BAL)
			{
				IndexKi(GetPlayerVehicleID(playerid));
			}
			else
			{
				IndexLampa(GetPlayerVehicleID(playerid), INDEX_BAL);
			}
		}
	}
	/*if(HOLDING(KEY_FIRE) || HOLDING(KEY_SECONDARY_ATTACK) && HOLDING(KEY_HANDBRAKE))
	{
		if(PlayerInfo[playerid][pJailed] == BORTON_ADMIN || PlayerInfo[playerid][pJailed] == BORTON_ADMIN2)
		{
			Msg(playerid, "Ütögettél ezért +30mp-el nõtt az idõd!");
			PlayerInfo[playerid][pJailTime] += 30;
		}
	}*/
	
	#if defined UgralasAnim
		if(PRESSED(KEY_JUMP)  && HOLDING(KEY_SPRINT) && !HOLDING(KEY_HANDBRAKE))
		if(PRESSED(KEY_JUMP)  && HOLDING(KEY_SPRINT) && !HOLDING(KEY_HANDBRAKE))
		{
			if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && Animban[playerid] == 0 && GetPlayerWeapon(playerid) != 34)
			{
				new Fail = random(10);
				switch(Fail)
				{
					case 0,1, 2, 3, 4:
					{
						SetTimerEx("Eleses", 500, 0, "id", playerid, 0);
					}
					case 5:
					{
						SetTimerEx("Eleses", 500, 0, "id", playerid, 0);
					}
					case 6,7,8,9:
					{
						SetTimerEx("Eleses", 500, 0, "id", playerid, 1);
					}
				}
			}
		}
	#endif
	if(newkeys == KEY_HANDBRAKE && oldkeys == 0)// ANIM STOPPOLÁS
	{
		if(!NemMozoghat(playerid) && Mobile[playerid] == -1 && Rabol[playerid] == 0 && !PlayerCuffed[playerid] && !PlayerTied[playerid] && !Leutve[playerid] && Animban[playerid] == 0)
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	}
	return 1;
}
fuggveny SzovetsegekSzama(frakcio)
{
	new szovetsegosszesen = 0;
	for(new f=1; f < MAX_FRAKCIO-1; f++)
	{
		if(FrakcioInfo[frakcio][fSzovetseges][f] == 1)
			szovetsegosszesen++;
	}
	return szovetsegosszesen;
}
fuggveny IsSzovetseg(frakcio1,frakcio2)
{
	if(FrakcioInfo[frakcio1][fSzovetseges][frakcio2] == 1)
	    return true;
	else
	    return false;
}

fuggveny HalalUtaniSpawn(playerid)
{
	DestroyDynamic3DTextLabel(HalalAnim3D[playerid]);
	JatekosHalal[playerid] = 0;
	MedicBill[playerid] = 1;
	SetPlayerSpawn(playerid);
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{	
	if(MostHalt[playerid]) {
		return 1;
	} else { 
		MostHalt[playerid] = true;
	}
	
	PlayerForeach(i)
	{
		if(Admin(i))
		{
			SendDeathMessageToPlayer(i, killerid, playerid, reason);
		}
	}
	
	//SendDeathMessageToPlayer(playerid, killerid, playerid, reason); // a játékosnak jelezze, hogy ki lõtte le
	
	KillTimer(AnimTimer[playerid]);
	new halaltext[128], COLOR_HalalAnim3D[8] = "DC8169";
	JatekosHalal[playerid] ++;
	if(JatekosHalal[playerid] == 1)
	{
		DestroyDynamic3DTextLabel(HalalAnim3D[playerid]);
		Format(halaltext, "{%s}(( Ez a játékos súlyosan sérült! ))\n(( /sérülések %d ))", COLOR_HalalAnim3D, playerid);
		HalalAnim3D[playerid] = CreateDynamic3DTextLabel(halaltext, COLOR_LIGHTRED, 0.0, 0.0, 0.0, 60.0, playerid, INVALID_VEHICLE_ID, 0);
		
		GetPlayerPos(playerid, TeleportDest[playerid][0], TeleportDest[playerid][1], TeleportDest[playerid][2]);
		
		new elverzesido = 15;
		AnimTimer[playerid] = SetTimerEx("SetHealth", elverzesido * 60000, false, "if", playerid, 0.0);
		MsgFormat(playerid, "Megsérültél! Ha nem érkezik segítség %d percen belül akkor elvérzel!", elverzesido);
		MsgFormat(playerid, "Halálelfogadás %d perc után: /acceptdeath", ACCEPTDEATH_TIME);
		SetPVarInt(playerid, "AnimTime", gettime());
		return 1;
	}
	else if(JatekosHalal[playerid] == 2)
	{
		DestroyDynamic3DTextLabel(HalalAnim3D[playerid]);
		Format(halaltext, "{%s}(( EZ A JÁTÉKOS HALOTT ))", COLOR_HalalAnim3D, playerid);
		HalalAnim3D[playerid] = CreateDynamic3DTextLabel(halaltext, COLOR_LIGHTRED, 0.0, 0.0, 0.0, 60.0, playerid, INVALID_VEHICLE_ID, 0);
		
		GetPlayerPos(playerid, TeleportDest[playerid][0], TeleportDest[playerid][1], TeleportDest[playerid][2]);
		
		AnimTimer[playerid] =  SetTimerEx("HalalUtaniSpawn", 2*60000, false, "i", playerid);
		Msg(playerid, "Meghaltál, 2 perc múlva respawnolsz!");
		
		//return 1;
	}
	
	ResetWeapon(playerid);
	
	/*if(!IsAdminSzolis(playerid, NINCS))
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		if(IsValidPlayerID(killerid) && killerid != INVALID_PLAYER_ID && killerid >= 0 && killerid < MAX_PLAYERS) {
			HullaLerak(playerid, x, y, z, reason, PlayerName(killerid));
		} else {
			HullaLerak(playerid, x , y, z, reason);
		}
	}*/
	
	if(Sisak[playerid] == 1)
	{
		RemovePlayerAttachedObject(playerid, SLOT_SISAK);
		Sisak[playerid] = 0;
	}
	
	if(JatekosZsak[playerid][2] != 0)
	{
		JatekosZsak[playerid][0] = 0;
		JatekosZsak[playerid][1] = 0;
		JatekosZsak[playerid][2] = 0;

	}
	if(KocsibanVan[playerid])
	    KocsibanVan[playerid] = false;
	    
	PlayerInfo[playerid][pEhseg] = 0.0;
	PlayerInfo[playerid][pSzomjusag] = 0.0;
	//PlayerInfo[playerid][pAlmossag] = 0.0;
	
	kBankrober[playerid] = INVALID_PLAYER_ID;
	kBankrob[playerid][TagokSzama] = 0;
	kBankrob[playerid][TolvajokSzama] = 0;
	kBankrob[playerid][HackerekSzama] = 0;
	for(new i=0; i< 10; i++)	kBankrob[playerid][kTagok][i] = INVALID_PLAYER_ID;
	
	KezObject_Torol(playerid);
	if(TaskaKezbe[playerid] != NINCS)
	{
	    new Float:X, Float:Y, Float:Z;
	    GetPlayerPos(playerid,X,Y,Z);
	    TaskaInfo[TaskaKezbe[playerid]][tPos][0] = X;
		TaskaInfo[TaskaKezbe[playerid]][tPos][1] = Y;
		TaskaInfo[TaskaKezbe[playerid]][tPos][2] = Z;
		TaskaInfo[TaskaKezbe[playerid]][tInt] = GetPlayerInterior(playerid);
		TaskaInfo[TaskaKezbe[playerid]][tVW] = GetPlayerVirtualWorld(playerid);
		TaskaInfo[TaskaKezbe[playerid]][tObject] = CreateDynamicObject(1210, X, Y, Z-1.0, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		TaskaKezbe[playerid] = NINCS;
	}
	if(Segitik[playerid] != 0) Segitik[playerid] = 0;
	if(Sokk[playerid] != 0) Sokk[playerid] = 0;
	if(RuhatElvett[playerid] != 0)
	{
	    if(PlayerInfo[playerid][pChar] > 0 && OnDuty[playerid] || PlayerInfo[playerid][pChar] > 0 && !LegalisSzervezetTagja(playerid) && !IsHitman(playerid))
			SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
		else
			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
			
        RuhatElvett[playerid] = 0;
	}
	if(OnDuty[playerid] != 0){ OnDuty[playerid] = 1; Munkaruha(playerid, 0); }
	if(TransportDuty[playerid] != 0)
	{
	    TransportDuty[playerid] = 0;
	    if(IsValidDynamic3DTextLabel(TAXI3D[GetPlayerVehicleID(playerid)]))
	   		DestroyDynamic3DTextLabel(TAXI3D[GetPlayerVehicleID(playerid)]);
	}
	if(C4Lerakva[playerid] != 0)
	{
 		C4Lerakva[playerid] = 0;
 		C4Kocsiban[playerid] = NINCS;
		C4Taska[playerid] = NINCS;
 		C4Generatoron[playerid] = NINCS;
 		C4X[playerid] = 0.000000;
		C4Y[playerid] = 0.000000;
		C4Z[playerid] = 0.000000;
		PlayerInfo[playerid][pC4] = 0;
		DestroyDynamicObject(C4Object[playerid]);
		C4Object[playerid] = NINCS;
	}
	if(MentoHivas[playerid] != 0 || TaxiHivas[playerid] != 0)
	{
		PlayerForeach(p)
		{
			if(KiertMegy[p] == playerid)
			{
				Msg(p, "A személy akihez mentél, életét vesztette!");
				SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
				KiertMegy[p] = NINCS;
			}
		}
	}
	if(SzallitasPozicio[playerid] != NINCS || SzallitasAru[playerid] != NINCS){ SzallitasPozicio[playerid] = NINCS; SzallitasAru[playerid] = NINCS; }
	if(Emelo[playerid] != 0) { KillTimer(EmeloKeyTimer[playerid]); Emelo[playerid] = 0; }
	if(Animban[playerid] != 0){ Animbanemrakhato[playerid] = 0; Animban[playerid] = 0; }
	if(SzemuvegFennt[playerid] != 0){ RemovePlayerAttachedObject(playerid, SLOT_SZEMUVEG); SzemuvegFennt[playerid] = 0; }
    if(Maszk[playerid] != 0){ RemovePlayerAttachedObject(playerid, SLOT_MASZK); Maszk[playerid] = 0; }
	if(OnkentesMentos[playerid] != 0) OnkentesMentos[playerid] = 0;
	
	#if defined War_System
		if(HarcVan && Harcol[playerid] && TeruletInfo[ HarcolTerulet[playerid] ][tHarc])
			HarcKieses(playerid, "Meghalt");
	#endif
	
	if(Visz[playerid] != NINCS)
		Visz[playerid] = NINCS;
	if(Rabol[playerid] != 0)
		Rabol[playerid] = 0;

	if(IsPlayerAttachedObjectSlotUsed(playerid,SLOT_SWATPAJZS)){ RemovePlayerAttachedObject(playerid,SLOT_SWATPAJZS); }
    Animbanemrakhato[playerid] = 1;
    Animban[playerid] = 0;
	
	new name[MAX_PLAYER_NAME]; 
	new name2[MAX_PLAYER_NAME];
	//new name3[MAX_PLAYER_NAME];
	new string[128];
	new Float:px,Float:py,Float:pz;
	PlayerInfo[playerid][pSpawned] = 0;

	GetPlayerName(playerid, name, sizeof(name));

	if(IsValidPlayerID(killerid) && killerid != INVALID_PLAYER_ID && killerid >= 0 && killerid < MAX_PLAYERS) {
		GetPlayerName(killerid, name2, sizeof(name2));
	} else {
		name2 = "---";
	}
	
	if(IsValidPlayerID(killerid) && killerid != INVALID_PLAYER_ID && killerid >= 0 && killerid < MAX_PLAYERS)
	{
		//MsgFormat(playerid, "Megölt %s!", HitmanName(killerid));
		
		if(TilosOlni == 1 && !IsPlayerNPC(killerid) && IsValidPlayerID(killerid) && killerid != INVALID_PLAYER_ID && killerid >= 0 && killerid < MAX_PLAYERS)
		{
			Msg(killerid, "Zero Tolerancia érvényben van, és mivel megszegted, 2 óra jail!");
			Jail(killerid, "+", 7200, "ajail", "Zero tolerancia");
			strmid(PlayerInfo[killerid][pJailtAdta], "Rendszer", 0, strlen("Rendszer"), 32);
		}
	}
	
	
	/*new adminstring[124];
	Format(adminstring, "%s meghalt | Oka: %s | KP: $%d", name, oka, GetPlayerMoney(playerid));*/

	gPlayerSpawned[playerid] = 0;
	GetPlayerName(playerid, name, sizeof(name));
	PlayerInfo[playerid][pLocal] = NINCS;
	GetPlayerPos(playerid, px, py, pz);

	if(reason == 38)
	{
		new kstring[128];
		new kickname[MAX_PLAYER_NAME];
		if(IsValidPlayerID(killerid))
		{
			GetPlayerName(killerid, kickname, sizeof(kickname));			
			if(!IsRicardo(killerid))
			{
				format(string, 128, "FIGYELMEZTETÉS: [%d]%s minigunnal ölt meg valakit ezért bannolva lett!", killerid, kickname);
				ABroadCast(COLOR_YELLOW, string, 1);
				printf("%s\n", kstring);
				MedicBill[playerid] = 0;
				
				SeeRPGBan(killerid, 0, NINCS, "Minigunnal ölt meg valakit", true, true);
			}
		}
	}
	new caller = Mobile[playerid];
	if(caller != -1)
	{
		if(caller > -1)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "A vonal megszakadt...");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = -1;
		}
		Mobile[playerid] = -1;
		CellTime[playerid] = 0;
	}
	ClearCrime(playerid);
	
	GetPlayerPos(playerid, TeleportDest[playerid][0], TeleportDest[playerid][1], TeleportDest[playerid][2]);
	MedicBill[playerid] = 1;
	
	SetPlayerToTeamColor(playerid);
	killerid = INVALID_PLAYER_ID;
	SetHealth(playerid, MAXHP);
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if(IsPlayerNPC(playerid))
	{
		NPCSpawn(playerid);
		return 1;
	}
	
	if(!Logged(playerid)) return 1;
	//if(OnplayerSpawnLefutott[playerid]) return 1;
	DebugMessage("%s - OnPlayerSpawn(playerid) - START", PlayerName(playerid));
	
	P_OnPlayerSpawn(playerid);

    if(Skinsel[playerid] == 1)
	{
	    PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
	    Skinsel[playerid] = 0;
	}
	
	SpawnVedelem[playerid] = 10;
	
	PlayerInfo[playerid][pCamera] = NINCS;

 	STDPlayer[playerid] = 0;

	if(MostHalt[playerid]) MostHalt[playerid] = false;

	if(PlayerInfo[playerid][pChar] > 0 && OnDuty[playerid])
		SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
	else
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);

	SetPlayerSpawn(playerid);
	SetPlayerToTeamColor(playerid);

	PlayerInfo[playerid][pSpawned] = 1;
	
	if(GetPVarInt(playerid, "animacio_elotoltve") != 1)
	{
		SetPVarInt(playerid, "animacio_elotoltve", 1);
		for(new a = 0; a < sizeof(AnimKonyvtarak); a++) ApplyAnimation(playerid, AnimKonyvtarak[a], "null", 0.0, 0, 0, 0, 0, 0);
	}
	
	if(GetPlayerInterior(playerid) != 0 OR GetPlayerVirtualWorld(playerid) != 0) Freeze(playerid, 3000);
	
	FegyverElrak(playerid);
	
	OnplayerSpawnLefutott[playerid] = true;
	
	DebugMessage("%s - OnPlayerSpawn(playerid) - END", PlayerName(playerid));
	return 1;
}

public CKLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Log/ck.log", io_append);
	if(!hFile) return false;
	fwrite(hFile, entry);
	fclose(hFile);
	return true;
}

public LSPDmoneyLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%d\n", LSPDmoney);
	new File:hFile;
	hFile = fopen("Log/LSPDmoney.log", io_append);
	if(!hFile) return false;
	fwrite(hFile, entry);
	fclose(hFile);
	return true;
}
public LoadLSPDmoney()
{
	new arrCoords[1][64];
	new strFromFile2[256];
	new File: file = fopen("Log/LSPDmoneyLog.log", io_read);
	if(file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		LSPDmoney = strval(arrCoords[0]);
		fclose(file);
	}
	return 1;
}

public KillLog(string[], cheat)
{
	new entry[256], fajl[64];

	if(cheat)
		format(fajl, sizeof(fajl), "Log/Kill/%s-%s-%s(cheat).log", Time("ev"), Time("honap"), Time("nap"));
	else
		format(fajl, sizeof(fajl), "Log/Kill/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	if(!hFile) return false;
	fwrite(hFile, entry);
	fclose(hFile);
	return true;
}

public PayLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Pay/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	if(!hFile) return false;
	fwrite(hFile, entry);
	fclose(hFile);
	return true;
}

public KickLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Kick/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	if(!hFile) return false;
	fwrite(hFile, entry);
	fclose(hFile);
	return true;
}

public ChatLog(string[])
{
	new entry[256], fajl[64];
	new stringmeret = strlen(ChatLogStr);
	format(entry,256, "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);
	if(stringmeret + strlen(string) >= LOGMERET)
	{
		format(fajl, sizeof(fajl), "Log/Chat/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
		new File:hFile;
		hFile = fopen(fajl, io_append);
		if(!hFile) return false;
		fwrite(hFile, ChatLogStr);
		fclose(hFile);
		ChatLogStr = "";
		strcat(ChatLogStr, entry);
		print("<< ChatLog mentésre került! >>");
	}
	else
	{
		strcat(ChatLogStr, entry);
	}
	return true;
}

fuggveny RPPontLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/RPPont/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	if(!hFile) return false;
	fwrite(hFile, entry);
	fclose(hFile);
	return true;
}

fuggveny ResetVW(playerid)
{
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
}

public NevLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Nevvaltas/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	if(!hFile) return false;
	fwrite(hFile, entry);
	fclose(hFile);
	return true;
}

public CommandLog(string[])
{
	new entry[256], fajl[64];
	new stringmeret = strlen(ParancsLogStr);
	format(entry,256, "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);
	if(stringmeret + strlen(string) >= LOGMERET)
	{
		format(fajl, sizeof(fajl), "Log/Parancsok/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
		new File:hFile;
		hFile = fopen(fajl, io_append);
		if(!hFile) return false;
		fwrite(hFile, ParancsLogStr);
		fclose(hFile);
		ParancsLogStr = "";
		strcat(ParancsLogStr, entry);
		print("<< Parancslog mentésre került! >>");
	}
	else
	{
		strcat(ParancsLogStr, entry);
	}
	return true;
}

public PosLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Log/poziciok.log", io_append);
	if(!hFile) return false;
	fwrite(hFile, entry);
	fclose(hFile);
	return true;
}

public BeKilepes(string[])
{
	new entry[256], fajl[64];
	new stringmeret = strlen(ConnectLogStr);
	format(entry,256, "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);
	if(stringmeret + strlen(string) >= LOGMERET)
	{
		format(fajl, sizeof(fajl), "Log/Connect/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
		new File:hFile;
		hFile = fopen(fajl, io_append);
		if(!hFile) return false;
		fwrite(hFile, ConnectLogStr);
		fclose(hFile);
		ConnectLogStr = "";
		strcat(ConnectLogStr, entry);
	}
	else
	{
		strcat(ConnectLogStr, entry);
	}
	return true;
}
fuggveny CheatLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Cheat/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	if(!hFile) return false;
	fwrite(hFile, entry);
	fclose(hFile);
	return true;
}

public BanLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Ban/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	if(!hFile) return false;
	fwrite(hFile, entry);
	fclose(hFile);
	return true;
}

public EgyebLog(string[])
{
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/Egyeb/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s] %s\n", Time("ora"), Time("perc"), Time("mp"), string);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	if(!hFile) return false;
	fwrite(hFile, entry);
	fclose(hFile);
	return true;
}

public OnPlayerEnterCheckpoint(playerid)
{
	DisablePlayerCheckpoint(playerid);
	
	if(jatekosJogsiCPStatusz[playerid] >= 1)
	{
		if(jatekosJogsiCPStatusz[playerid] == 23)
		{			
			if(jatekosMilyenJogsitCsinal[playerid] == OKTATAS_AUTO) PlayerInfo[playerid][pCarLic] = JOGSI_AUTO;
			if(jatekosMilyenJogsitCsinal[playerid] == OKTATAS_MOTOR) PlayerInfo[playerid][pMotorJogsi] = JOGSI_MOTOR;
			
			if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
			DestroyVehicle(JogsiJarmuID[playerid]);
			JogsiJarmuID[playerid] = 0;
			
			Msg(playerid, "Gratulálunk, sikeresen megszerezted a jogosítványod!");	

			jatekosJogsiCPStatusz[playerid] = 0;
			jatekosJogsitCsinal[playerid] = 0;
			jatekosMilyenJogsitCsinal[playerid] = 0;			
		}
		else
		{
			jatekosJogsiCPStatusz[playerid] ++;
			new cp = jatekosJogsiCPStatusz[playerid];
			SetPlayerCheckpoint(playerid, jogsiPoziciokX[cp], jogsiPoziciokY[cp], jogsiPoziciokZ[cp], 5.0);
		}
	}
	else if(GetPVarInt(playerid, "TaxiLicense") > 0)
	{
		taxi_exam_newcp(playerid);
	}
	
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	new playerid = IpbolID(ip);
    if(!IsFejleszto(playerid) && !IsPlayerNPC(playerid))
    {
		printf("Hibás Rconba történõ bejelentkezés! Név: %s | IP: %s | Használt jelszó: %s", PlayerName(playerid), ip, password);
		BanEx(playerid, "Rcon belépésbe való próbálkozás")
		return 1;
    }
    return 1;
}

stock SaveButor(id)
{
	return 1;
}

stock GetUresButor()
{
	new vissza = NINCS;
	
	for(new i = 1; i < MAX_BUTOR; i++)
		if(ButorInfo[i][butID] == NINCS)
			{ vissza = i; break; }
			
	return vissza;
}

stock UjButor(modelid, Float:px, Float:py, Float:pz, Float:rx, Float:ry, Float:rz, int, vw, haz, nev[], tipus[], pin = NINCS)
{
	new query[MAX_MYSQL_STRING], pos[128], lerakta[128], id;
	id = GetUresButor();
	ButorInfo[id][butID] = 0;
	Format(pos, "%f, %f, %f, %f, %f, %f, %i, %i", px, py, pz, rx, ry, rz, vw, int);
	Format(lerakta, "%i, %s", gettime(), nev);
	Format(query, "INSERT INTO `butorok` (`id`, `butor`, `haz`, `pos`, `lerakta`, `tipus`, `pin`) VALUES ('%i', '%i', '%i', '%s', '%s','%s','%i')", id, modelid, haz, pos, lerakta, tipus, pin);
	mysql_query(query);
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new Float:oldX, Float:oldY, Float:oldZ,	Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
	
	if(PlayerInfo[playerid][pBObjID] != NINCS)
	{
		if(response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL) 
		{
			/*new bhid = PlayerInfo[playerid][pBHaz];
			if(PlayerInfo[playerid][pHazban] == -1 && GetDistance(hInfo[bhid][hEnPos][0], hInfo[bhid][hEnPos][1], hInfo[bhid][hEnPos][2], x, y, z) > 15.0)
			{
				EditDynamicObject(playerid,objectid); 
				Msg(playerid,"Nem rakhatod le ilyen messze a házadtól!");
				return 0;
			}*/
			
			if(objectid == HifiObjectLerakas[playerid])
			{
				DestroyDynamicObject(HifiObjectLerakas[playerid]);
				HifiObjectLerakas[playerid] = 0;
				HifiLerak(playerid, x, y, z, rx, ry, rz);
				return true;
			}
			
			if(PlayerInfo[playerid][pBUj])
			{
				if(PlayerInfo[playerid][pBObjID] == 2332) UjButor(PlayerInfo[playerid][pBObjID], x, y, z, rx, ry, rz, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), PlayerInfo[playerid][pBHaz], PlayerName(playerid, true), PlayerInfo[playerid][pBTipus], PlayerInfo[playerid][pBPIN]);
				else UjButor(PlayerInfo[playerid][pBObjID], x, y, z, rx, ry, rz, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), PlayerInfo[playerid][pBHaz], PlayerName(playerid, true), PlayerInfo[playerid][pBTipus]);
				DestroyDynamicObject(objectid);
				PlayerInfo[playerid][pBObjID] = NINCS;
			}
			else 
			{
				new bid = ButorEditSEL[playerid];
				ButorInfo[bid][butPos][0] = x;
				ButorInfo[bid][butPos][1] = y;
				ButorInfo[bid][butPos][2] = z;
				ButorInfo[bid][butPos][3] = rx;
				ButorInfo[bid][butPos][4] = ry;
				ButorInfo[bid][butPos][5] = rz;
				SaveButor(bid);
			}
		}
		return 1;
	}
	
	if(response == EDIT_RESPONSE_UPDATE)
	{
		return 1;
	}
	if(response == EDIT_RESPONSE_FINAL)
	{
		return 1;
	}
	if(response == EDIT_RESPONSE_CANCEL)
	{
		if(objectid == HifiObjectLerakas[playerid])
	    {
			//PlayerInfo[playerid][pHifi] ++;
			DestroyDynamicObject(HifiObjectLerakas[playerid]);
			//Msg(playerid, "Hifi object törölve!");
			return true;
	    }
	}
	
	MoveDynamicObject(objectid, x, y, z, 10.0, rx, ry, rz);
	return true;
}

public OnDynamicObjectMoved(objectid)
{
    new Float:x, Float:y, Float:z;
	for(new i; i < sizeof(Lift_Emeletajtok); i ++)
	{
		if(objectid == Lift_Emeletajtok[i][0])
		{
		    GetDynamicObjectPos(Lift_Emeletajtok[i][0], x, y, z);

		    if(x < X_DOOR_L_OPENED - 0.5)
		    {
				Elevator_MoveToFloor(ElevatorQueue[0]);
				RemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == LSBank_Lift_Kabin)
	{
		if(LSBank_Lift_Statusz == LSBANK_LIFT_STATUSZ_NINCS) return false;
		
		if(LSBank_Lift_Statusz == LSBANK_LIFT_STATUSZ_FEL)
		    MoveLSBankLiftAjto("fent", "nyit");
		else if(LSBank_Lift_Statusz == LSBANK_LIFT_STATUSZ_LE)
		    MoveLSBankLiftAjto("lent", "nyit");
		    
		LSBank_Lift_Statusz = LSBANK_LIFT_STATUSZ_NINCS;
	}
	for(new i = 0; i < MAX_KAPU; i++)
	{
	    if(objectid != KapuInfo[i][kObject]) continue;

		PlayerForeach(jatekos)
		{
		    PlayerPlaySound(i,1101,KapuInfo[i][kPos][0],KapuInfo[i][kPos][1],KapuInfo[i][kPos][2]);
		}
		break;
	}
	return 1;
}
public OnObjectMoved(objectid)
{
}

/*public Megmenekules(playerid,part)
{
	if(IsValidPlayerID(playerid) && Logged(playerid))
	{
		if(PlayerInfo[playerid][pTutorial] == 0)
		{
		    if(part == 1)
		    {
		        HideDialog(playerid);
				GameTextForPlayer(playerid, "~n~~n~~n~~g~Utazás...", 30000, 5);
		        Freeze(playerid,2000);
		        SetPlayerInterior(playerid,1);
		        SetPlayerPos(playerid, 2.384830, 33.103397, 1199.849976);
		        SetTimerEx("Megmenekules", 30000, 0, "dd", playerid, 2);
		    }
		    else if(part == 2)
		    {
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetPlayerPos(playerid, 1685.8081, -2333.9009, 13.5469);
		        GiveMoney(playerid, 250000);
				
				/////////////////////////////////////
				Msg(playerid, "==================================================",COLOR_WHITE, true);
				Msg(playerid, "*** Üdvözöllek a United RolePlay -en! *** ");
				Msg(playerid, "*** A szerverünk weboldala: "#OFFICIALWEB"*** ");
				Msg(playerid, "*** Fontos megemlíteni, hogy a szerver csak játszott órák vannak! *** ");
				Msg(playerid, "*** Ha segítségre van szükséged írd be, hogy /help*** ");
				Msg(playerid, "==================================================",COLOR_WHITE, true);
				/////////////////////////////////////
				
				GameTextForPlayer(playerid, "~n~~n~~n~~r~Megérkeztünk", 1000, 5);

				DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, 1566.2527, -2322.5210, 13.5458,3.0);
				PlayerInfo[playerid][pTutorial] = 1;
				AdatMentesSQL(playerid);
				new kezdo[128];
				format(kezdo, sizeof(kezdo), "{33CCFF}[KEZDÕ]\nSzint: %d", Szint(playerid));
				UpdateDynamic3DTextLabelText(Kezdo3D[playerid], COLOR_WHITE, kezdo);
				//TogglePlayerControllable(playerid, false);
		   }
		}
	}
	return 1;
}*/

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(PickupAntiFlood[playerid] != 0) return 1;
	new string[256];
	for(new i=0; i < MAX_RAKTAR; i++)
	{
		if(!Raktar[i][Van]) continue;
		if(pickupid == Raktar[i][rPickup])
		{
			PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			if(egyezik(Raktar[i][rTulaj], "Nincs_Tulaj"))
			{
				Format(string, "{FF0000}Tulajdonos - Nincs[ELADÓ]\nÁr: $%d\nMegvétel: /raktár megvesz", PenzTordeles(Raktar[i][rAr]));
			}
			else
			{
				Format(string, "{FF0000}Tulajdonos - %s",Raktar[i][rTulaj]);
			}
			ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Raktár", string, "OK", "");
		}
	}	
    PlayerForeach(utzar)
	{
		if(!Utzarak[utzar][uVan]) continue;
		
    	if(pickupid == Utzarak[utzar][uPickup][0])
		{
		    new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
	        
    	    if(Utzarak[utzar][uTipus] == UTZAR_KICSI)
    	        Utzarak[utzar][uPickup][0] = CreateDynamicPickup(1007, 14, X+(1.5*dis1), Y+(1.5*dis2), Z, 0);
    	    else
				Utzarak[utzar][uPickup][0] = CreateDynamicPickup(1007, 14, X+(4.0*dis1), Y+(4.0*dis2), Z, 0);
				
    	    break;
    	}
    	else if(pickupid == Utzarak[utzar][uPickup][1])
		{
	    	new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
			
    	    if(Utzarak[utzar][uTipus] == UTZAR_KICSI)
    	        Utzarak[utzar][uPickup][1] = CreateDynamicPickup(1007, 14, X-(1.5*dis1), Y-(1.5*dis2), Z, 0);
    	    else
				Utzarak[utzar][uPickup][1] = CreateDynamicPickup(1007, 14, X+(1.25*dis1), Y+(1.25*dis2), Z, 0);

    	    break;
    	}
    	else if(pickupid == Utzarak[utzar][uPickup][2])
		{
	    	new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
			
			Utzarak[utzar][uPickup][2] = CreateDynamicPickup(1007, 14, X-(4.0*dis1), Y-(4.0*dis2), Z, 0);
    	    break;
    	}
    	else if(pickupid == Utzarak[utzar][uPickup][3])
		{
	    	new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
			
			Utzarak[utzar][uPickup][3] = CreateDynamicPickup(1007, 14, X-(1.25*dis1), Y-(1.25*dis2), Z, 0);
    	    break;
    	}
    }
    PickupAntiFlood[playerid] = 15;
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(IsPlayerNPC(playerid))
	{
		//printf("OnNPCStateChange(npc: %d, newstate: %d, oldstate: %d)", playerid, newstate, oldstate);
		return 1;
	}
	SetPVarInt(playerid, "NoAB", 1);
	
	if(oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER)
	{
		TextDrawShowForPlayer(playerid, pHUD[playerid][0]);
		TextDrawShowForPlayer(playerid, pHUD[playerid][1]);
	}
	else if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
	{
		TextDrawHideForPlayer(playerid, pHUD[playerid][0]);
		TextDrawHideForPlayer(playerid, pHUD[playerid][1]);
	}
	
	if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
		StopAudioStreamForPlayer(playerid);
	}
	/*if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		new model = GetVehicleModel(GetPlayerVehicleID(playerid));
		switch(model)
		{
			case 592,577,511,512,520,593,553,476,519,460,513,548,425,417,487,488,497,563,447,469: PlayerWeapons[playerid][46]=true;
			case 457: PlayerWeapons[playerid][2]=true;
			case 596,597,598,599: PlayerWeapons[playerid][25]=true;
		}
	}*/
	if(oldstate == PLAYER_STATE_DRIVER)
	{
	    MunkaFolyamatban[playerid] = 0;
		if(Sisak[playerid] == 1)
		{
			RemovePlayerAttachedObject(playerid, SLOT_SISAK);
			Sisak[playerid] = 0;
			Cselekves(playerid, "levette a bukósisakot...");
		}
		if(IsABicikli(GetPlayerVehicleID(playerid)))
		{
			SebessegKorlat[playerid] = 0;
		}
	}
	if((TrafiPax[playerid][tAktiv] && PlayerInfo[playerid][pMobiltrafi] != 1) || (!IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][pMobiltrafi] == 1))
	{
	    if(IsValidDynamic3DTextLabel(TrafiPax[playerid][t3D]))
			DestroyDynamic3DTextLabel(TrafiPax[playerid][t3D]);
		TrafiPax[playerid][tAktiv] = false;
	//	TrafiPax[playerid][t3D] = NINCS;
		Msg(playerid, "Mivel elmentél a helyedrõl, a trafipax törölve");
	}

	if(newstate == PLAYER_STATE_DRIVER && IsABicikli(GetPlayerVehicleID(playerid)))
	{
	    SebessegKorlat[playerid] = 40;
	}
	else if(newstate == PLAYER_STATE_ONFOOT && IsABicikli(GetPlayerVehicleID(playerid)))
	{
	    SebessegKorlat[playerid] = 0;
	}
	else if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		SetPlayerArmedWeapon(playerid,0);
		Fegyvere[playerid] = 0;
		new vehicle = GetPlayerVehicleID(playerid);
	    if(!egyezik(KocsiZeneURL[vehicle], NINCSKOCSIZENE_URL))
        {
			StartRadio(playerid);
	    }
	}
	if(newstate == PLAYER_STATE_PASSENGER) // vonathoz jó lesz
	{
	    
	}
	if(newstate == PLAYER_STATE_DRIVER) //buggy dont finnish
	{// 38 / 49 / 56 = SS
		new newcar = GetPlayerVehicleID(playerid);
		KocsiUtolsoHasznalat[newcar] = gettime();
		if(!IsPlayerNPC(playerid) && NPCKocsi[newcar])
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerPos(playerid, x, y, z);
			Msg(playerid, "Ezt a jármûvet te nem akarod vezetni!!");
			return 1;
		}
		Fegyvere[playerid] = 0;
		SetPlayerArmedWeapon(playerid, 0);

		if(Tevezve[playerid] != NINCS)
			PlayerSpectateVehicle(Tevezve[playerid], newcar);

		if(JatekosBeszallas(playerid, newcar) == 0) return 1;
        KocsibanVan[playerid] = true;
		gLastCar[playerid] = newcar;
		gLastDriver[newcar] = playerid;
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
	
		WantedPoints[playerid] = 0;
		WantedLevel[playerid] = 0;
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		gPlayerSpawned[playerid] = 1;
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER) 
	{
		GetVehicleHealth(GetPlayerVehicleID(playerid), vhealth[playerid]); 
	} 
	return 1;
}

public HireCost(carid)
{
	switch (carid)
	{
		case 69:
		{
			return 90000; //bullit
		}
		case 70:
		{
			return 130000; //infurnus
		}
		case 71:
		{
			return 100000; //turismo
		}
		case 72:
		{
			return 80000;
		}
		case 73:
		{
			return 70000;
		}
		case 74:
		{
			return 60000;
		}
	}
	return 0;
}

public CarCheck()
{
	//new string[256];
	PlayerForeach(j)
	{
	    if(IsValidPlayerID(j))
	    {
		    new Float:health;
		    GetPlayerHealth(j, health);
   			if(STDPlayer[j]==1)
			{
			    GetPlayerHealth(j, health);
			    SetHealth(j, health - 5.0);
				SendClientMessage(j, COLOR_LIGHTBLUE, "* 'Candida' fertõzésed van, azonnal menj dokihoz!");
			}
			else if(STDPlayer[j]==2)
			{
			    GetPlayerHealth(j, health);
			    SetHealth(j, health - 15.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* 'AIDS' fertõzésed van, azonnal menj dokihoz!");
			}
			else if(STDPlayer[j]==3)
			{
			    GetPlayerHealth(j, health);
			    SetHealth(j, health - 10.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Szifilisz fertõzésed van, azonnal menj dokihoz!");
			}

			/*if(GetMoney(j) < 0)
			{
			    if(MoneyMessage[j]==0)
			    {
			        new penz = GetMoney(j);
			        new penzkell = penz - (penz * 2);
					format(string, sizeof(string), "Tartozásod van! Szerezz $%d-t vagy ki fognak nyírni!", penzkell);
					SendClientMessage(j, COLOR_LIGHTRED, string);
					MoneyMessage[j] = 1;
				}
			}
			else
			{
			    MoneyMessage[j] = 0;
			}*/
		}
	}
	return 1;
}

public CarInit()
{
	for(new c = 1; c < 254; c++)
	{
 		gLastDriver[c] = 299;
	}
	gLastDriver[301]=255;
	return 1;
}

public CarRespawn(carid)
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
			if(IsPlayerInVehicle(i, carid) || BereltKocsi[i] == carid)
			{
				gLastDriver[carid] = 255;
				return 0;
			}
		}
	}
	GetDamageStat(carid);
	KocsiRespawn(carid);
	gLastDriver[carid] = 299;
	return 1;
}

public LockCar(carid)
{
	new vs = IsAVsKocsi(carid);
	if(vs != NINCS)
		CarInfo[vs][cLock] = 1;
		
	gCarLock[carid] = 1;
	PlayerForeach(p)
	{
		if(IsValidPlayerID(p))
			SetVehicleParamsForPlayer(carid, p, 0, 1);
	}
	return 1;
}

public UnLockCar(carid)
{
	new vs = IsAVsKocsi(carid);
	if(vs != NINCS)
		CarInfo[vs][cLock] = 0;
		
	gCarLock[carid] = 0;
	PlayerForeach(p)
	{
		if(IsValidPlayerID(p))
			SetVehicleParamsForPlayer(carid, p, 0, 0);
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    KocsibanVan[playerid] = false;
    
    SetPVarInt(playerid, "NoAB", 1);
	if(IsABicikli(vehicleid))
	{
		SebessegKorlat[playerid] = 0;
	}
	if(PlayerRaceTuning[playerid][tNitro] > 0 && PlayerRaceTuning[playerid][tNitroIdo] == 0 && IsPlayerInAnyVehicle(playerid))
		PlayerRaceTuning[playerid][tNitroIdo] = 0;
		
	if(Lefoglalt[playerid] == 1) Lefoglalt[playerid] = 0;

	if(ov[playerid] != 0)
	{
	   	Cselekves(playerid, "kikapcsolta a biztonsági övet, és kiszállt a jármûbõl");
    	ov[playerid] = 0;
	}
	if(Gokartozas[playerid] == 1)
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Kiszálltál a jármûbõl, ezért a gokartozást befejezted!");
		KocsiRespawn(vehicleid);
		engineOn[vehicleid] = 0;
		SetJarmu(vehicleid, KOCSI_MOTOR, false);
		Gokartozas[playerid] = 0;
	}
		
	/*if(engineOn[vehicleid] == 1 && GetPlayerState(playerid) == 2 && !IsABicikli(GetPlayerVehicleID(playerid)))
	{
		Msg(playerid, "Figyelmeztetés: A motor nincs leállítva!");
	}*/
	if(Vizsgafajta[playerid] > 0 && Vizsgafajta[playerid] != 5 && Vizsgafajta[playerid] != 6)
	{
	    DestroyDynamic3DTextLabel(Tanulo3D[vehicleid]);
	}
	KocsiUtolsoHasznalat[vehicleid] = gettime();
	if(Munkaban[playerid] != NINCS)
	{
		
	}
	if(Munkaban[playerid] != NINCS && Munkaban[playerid] != MUNKA_PIZZA)
	{
		if(AMT(playerid,MUNKA_UTTISZTITO) && Munkaban[playerid] == MUNKA_UTTISZTITO)
		{
			DestroyDynamicObject(UttisztitoObject[playerid][0]);
			UttisztitoObject[playerid][0] = NINCS;
			new Float:jatekosP[3];
			GetPlayerPos(playerid,jatekosP[0],jatekosP[1],jatekosP[2]);
			Streamer_UpdateEx(playerid,jatekosP[0],jatekosP[1],jatekosP[2]);
		}
		if(AMT(playerid,MUNKA_TARGONCA) && Munkaban[playerid] == MUNKA_TARGONCA)
		{
			TargoncaDoboz(vehicleid, false);
		}
		Munkaban[playerid] = NINCS;
		MunkaCheckpoint[playerid] = NINCS;
		DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Kiszálltál a jármûbõl, ezért a munkát befejezted!");
	}
	if(LMT(playerid, LMUNKA_TAXI) || AMT(playerid, MUNKA_BUS))
	{
		if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
		    {
		        TaxiDrivers -= 1;
		    }
		    else if(TransportDuty[playerid] == 2)
		    {
		        BusDrivers -= 1;
		    }
			new string[90];
		    TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* Kiléptél a szolgálatból, ennyit kaptál: $%d", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GiveMoney(playerid, TransportMoney[playerid]/2);
			FrakcioInfo[LMUNKA_TAXI][fPenz] += TransportMoney[playerid]/2;
			ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			if(IsValidDynamic3DTextLabel(TAXI3D[GetPlayerVehicleID(playerid)]))
	   			DestroyDynamic3DTextLabel(TAXI3D[GetPlayerVehicleID(playerid)]);
		}
	}
	return 1;
}

fuggveny OnPlayerScreenFade(playerid, color, speed)
{
	return true;
}

fuggveny OnPlayerScreenColorFade(playerid, color, speed)
{
	if(PlayerInfo[playerid][pCamera] != -1) return CallLocalFunction("FixPlayerCam", "i", playerid);	
	return true;
}

fuggveny LoginTimeLimitElerve(playerid)
{
	KillTimer(LoginTimeLimit[playerid]);
	//ClearChat(playerid);
	MsgFormat(playerid, "Elérted a %d másodperces belépési idõlimitet!", MAX_LOGINTIME);
	KickEx(playerid);
	return 1;
}

fuggveny LoadLoginScreen(playerid)
{		
	switch(random(6 + 1))
	{
		case 0:
		{
			SetPlayerCameraPos(playerid, 2143.8442, -1655.4440, 115.2211);
			SetPlayerCameraLookAt(playerid, 2144.8447, -1655.4186, 114.8610);
		}
		case 1:
		{
			SetPlayerCameraPos(playerid, 1880.4482, -1325.2211, 50.5857);
			SetPlayerCameraLookAt(playerid, 1880.8314, -1326.1438, 50.2501);
		}
		case 2: // SF híd
		{
			SetPlayerCameraPos(playerid, -1479.7292, 703.7188, 2.7728);
			SetPlayerCameraLookAt(playerid, -1397.7458, 667.8534, 34.5781);
		}
		case 3: // LS óriáskerék
		{
			SetPlayerCameraPos(playerid, 358.9719, -2029.6898, 6.8147);
			SetPlayerCameraLookAt(playerid, 359.9694, -2029.6478, 7.2098);
		}
		case 4: // LS Gleenpark tó
		{
			SetPlayerCameraPos(playerid, 1861.2750, -1267.6014, 45.3082);
			SetPlayerCameraLookAt(playerid, 1862.0536, -1266.9749, 45.1784);
		}
		case 5: // LV halálfej
		{
			SetPlayerCameraPos(playerid, 2019.8103, 1668.2188, 12.2166);
			SetPlayerCameraLookAt(playerid, 2018.8129, 1668.2538, 12.3316);
		}
		case 6: // LV vízesés
		{
			SetPlayerCameraPos(playerid, 2100.0933, 1927.2815, 14.8147);
			SetPlayerCameraLookAt(playerid, 2099.4678, 1926.5034, 14.7697);
		}
	}
	
	if(ElsoSpawn[playerid] == 1)
	{
		KillTimer(LoginTimeLimit[playerid]);
		LoginTimeLimit[playerid] = SetTimerEx("LoginTimeLimitElerve", MAX_LOGINTIME * 1000, false, "d", playerid);
		
		if(Registered(playerid) != 0)
		{
			SetTimer("Spawnolas", 2000, false);
			ElsoSpawn[playerid] = 0;
			JatekBetoltve[playerid] = true;
			
			new lastlogin[48];
			if(PlayerInfo[playerid][pUtolsoLoginIdo] != 0)
			{
				new y, mo, month[6], day[6], d, h, minute[6], mi, s;
				uDate(PlayerInfo[playerid][pUtolsoLoginIdo], y, mo, d, h, mi, s);
				if(mo < 10) Format(month, "0%d", mo); else Format(month, "%d", mo);
				if(d < 10) Format(day, "0%d", d); else Format(day, "%d", d);
				if(mi < 10) Format(minute, "0%d", mi); else Format(minute, "%d", mi);
				Format(lastlogin, "%d.%s.%s. %d:%d", y, month, day, (h + 1), minute);
			}
			else {
				lastlogin = "N/A";
			}
			
			PlayerTextFormat(playerid, "{FFFFFF}Üdvözöllek %s!\nUtolsó belépés: %s\n\nKérlek jelentkezz be!\nA bejelentkezésre maximum %d másodperced van!\nWeboldalunk elérhetõsége: %s\n\nJelszavad:", PlayerName(playerid), lastlogin, MAX_LOGINTIME, OFFICIALWEB);
			ShowPlayerDialog(playerid, DIALOG_PASSWORDCHECK, DIALOG_STYLE_PASSWORD, "Bejelentkezõ panel", PlayerText[playerid], "Beír", "Kilépés");
		}
		else
		{
			//WebesKarireg(playerid);
			KarakterRegisztracio(playerid, 1);
		}
	}
	
	return 1;
}

stock KarakterRegisztracio(playerid, szakasz)
{
	if(szakasz == 1)
	{
		new text[48] = "Kérlek add meg jelszavad:\n";
		ShowPlayerDialog(playerid, DIALOG_KARAKTERREG_PASS, DIALOG_STYLE_PASSWORD, "Regisztráció [jelszó]", text, "Beír", "Kilépés");
	}
	else if(szakasz == 2)
	{
		AdatMentesSQL(playerid);
		LoadLoginScreen(playerid);
		SetPVarInt(playerid, "MostRegisztralt", 1);
		Msg(playerid, "Sikeres regisztráció!");
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid)) return 1;
	DebugMessage("%s - OnPlayerRequestClass(playerid, classid) - START", PlayerName(playerid));
	P_OnPlayerRequestClass(playerid);
	
	if(karbantartas && !IsFejleszto(playerid))
	{
		ClearChat(playerid, 300);
		Msg(playerid, "A karbantartás mód aktiválva van!", COL_PIROS);
		KickEx(playerid);
		return 0;
	}
	
	new gamemode[72];
    GetServerVarAsString("gamemodetext", gamemode, sizeof(gamemode));
	//MsgFormat(playerid, "Játémód: %s | Készítette: Tony | Elérhetõség: tony@ls-rp.hu", gamemode);
	
	SetHealth(playerid, MAXHP);
	if(Logged(playerid) == 0)
	{
		ConnectMessage(playerid, "join");
		SpawnPlayer(playerid);
		ResetVW(playerid);		
		TogglePlayerSpectating(playerid, true);
		TogglePlayerControllable(playerid, false);		
		SetTimerEx("LoadLoginScreen", 1000, false, "d", playerid);		
	}
	DebugMessage("%s - OnPlayerRequestClass(playerid, classid) - END", PlayerName(playerid));
	return 1;
}
fuggveny SetupPlayerForClassSelection(playerid)
{
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid,-1657.5237,1207.6644,13.6719);
	SetPlayerFacingAngle(playerid,357.6906);
	SetPlayerCameraPos(playerid, -1657.4678,1211.2292,13.6781);
	SetPlayerCameraLookAt(playerid,-1657.5237,1207.6644,13.6719);
}
public OnPlayerRequestSpawn(playerid)
{
	if(Logged(playerid) == 0 && !IsPlayerNPC(playerid)) return 0;
	return 1;
}
//---------------------------------------------------------

public SetPlayerCriminal(playerid,declare,reason[])
{//example: SetPlayerCriminal(playerid,255, "Stealing A Police Vehicle");
	if(IsValidPlayerID(playerid))
	{
	    new points = WantedPoints[playerid];
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new wantedmes[128];
		new wlevel;
		strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
		GetPlayerName(playerid, turned, sizeof(turned));
		if(declare == 255)
		{
			format(turner, sizeof(turner), "CCTV Camera");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		else
		{
		    if(IsValidPlayerID(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
				strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
				strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
			}
		}
		format(turnmes, sizeof(turnmes), "Feljelentettek! Vád: %s. Jelentõ: %s.",reason,turner);
		Msg(playerid, turnmes);
		if(points > 0)
		{
		    new yesno;
			if(points == 3) { if(WantedLevel[playerid] != 1) { WantedLevel[playerid] = 1; wlevel = 1; yesno = 1; } }
			else if(points >= 4 && points <= 5) { if(WantedLevel[playerid] != 2) { WantedLevel[playerid] = 2; wlevel = 2; yesno = 1; } }
			else if(points >= 6 && points <= 7) { if(WantedLevel[playerid] != 3) { WantedLevel[playerid] = 3; wlevel = 3; yesno = 1; } }
			else if(points >= 8 && points <= 9) { if(WantedLevel[playerid] != 4) { WantedLevel[playerid] = 4; wlevel = 4; yesno = 1; } }
			else if(points >= 10 && points <= 11) { if(WantedLevel[playerid] != 5) { WantedLevel[playerid] = 5; wlevel = 5; yesno = 1; } }
			else if(points >= 12 && points <= 13) { if(WantedLevel[playerid] != 6) { WantedLevel[playerid] = 6; wlevel = 6; yesno = 1; } }
			else if(points >= 14) { if(WantedLevel[playerid] != 10) { WantedLevel[playerid] = 10; wlevel = 10; yesno = 1; } }
			if(yesno)
			{
				format(wantedmes, sizeof(wantedmes), "Körözési szinted: %d", wlevel);
				SendClientMessage(playerid, COLOR_YELLOW, wantedmes);
				PlayerForeach(i)
				{
					if(IsValidPlayerID(i))
					{
					    if(IsACop(i))
					    {
							if(OnDuty[i] != 0)
							{
								format(cbjstore, sizeof(turnmes), "HQ: Minden egységnek! Jelentõ: %s",turner);
								SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
								format(cbjstore, sizeof(turnmes), "HQ: Vád: %s | Vádlott: %s",reason,turned);
								SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
							}
						}
					}
				}
			}
		}
	}//not connected
}
//---------------------------------------------------------

public SetPlayerFree(playerid,declare,reason[])
{
	if(IsValidPlayerID(playerid))
	{
		ClearCrime(playerid);
		new crbjstore[128];
		PlayerForeach(i)
		{
			if(IsValidPlayerID(i))
			{
			    if(IsACop(i))
			    {
					format(crbjstore, sizeof(crbjstore), "HQ: %s letartóztatta %s-t",PlayerName(declare), PlayerName(playerid));
					SendClientMessage(i, COLOR_DBLUE, crbjstore);
				}
			}
		}
	}
}

public RingToner()
{
	PlayerForeach(i)
	{
	    if(IsValidPlayerID(i))
	    {
			if(RingTone[i] != 6 && RingTone[i] != 0 && RingTone[i] < 11)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 6)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 20)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
			}
		}
	}
	SetTimer("RingTonerRev", 1000, 0);
	return 1;
}

public RingTonerRev()
{
	PlayerForeach(i)
	{
	    if(IsValidPlayerID(i))
	    {
			if(RingTone[i] != 5 && RingTone[i] != 0 && RingTone[i] < 10)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1137, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 5)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 19)
			{
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
				RingTone[i] = 0;
			}
		}
	}
	SetTimer("RingToner", 1000, 0);
	return 1;
}
public CsomagTartoMentes() //Ne nyúljá hozzá(FluckS)
{
	new idx;
	new File: file2;
	idx = 1;
	while (idx < sizeof(CarInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i,%i\n",
		CuccokAKocsiban[idx][4],
		CuccokAKocsiban[idx][5],
		CuccokAKocsiban[idx][6],
		CuccokAKocsiban[idx][7],
		CuccokAKocsiban[idx][8],
		CuccokAKocsiban[idx][9],
		CuccokAKocsiban[idx][1],
		CuccokAKocsiban[idx][2],
		CuccokAKocsiban[idx][3],
		CuccokAKocsiban[idx][0],
		CuccokAKocsiban[idx][12],
		CuccokAKocsiban[idx][13],
		CuccokAKocsiban[idx][14],
		CuccokAKocsiban[idx][15],
		CuccokAKocsiban[idx][16],
		CuccokAKocsiban[idx][17],
		CuccokAKocsiban[idx][18],
		CuccokAKocsiban[idx][19],
		CuccokAKocsiban[idx][20]);
		if(idx == 1)
		{
			file2 = fopen("Config/csomagtarto.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/csomagtarto.cfg", io_append);
		}
		if(!file2){ break; }
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public CsomagTartoBetoltes() //Ne nyúljá hozzá(FluckS)
{
	new arrCoords[19][64];
	new File: file = fopen("Config/csomagtarto.cfg", io_read);
	if(!file) return false;
	new File2[256];
	if(file)
	{
		new idx = 1;
		while (idx < sizeof(CarInfo))
		{
		    fread(file, File2);
		    split(File2, arrCoords, ',');
		    CuccokAKocsiban[idx][4] = strval(arrCoords[0]);
		    CuccokAKocsiban[idx][5] = strval(arrCoords[1]);
		    CuccokAKocsiban[idx][6] = strval(arrCoords[2]);
		    CuccokAKocsiban[idx][7] = strval(arrCoords[3]);
		    CuccokAKocsiban[idx][8] = strval(arrCoords[4]);
		    CuccokAKocsiban[idx][9] = strval(arrCoords[5]);
			CuccokAKocsiban[idx][1] = strval(arrCoords[6]);
			CuccokAKocsiban[idx][2] = strval(arrCoords[7]);
			CuccokAKocsiban[idx][3] = strval(arrCoords[8]);
			CuccokAKocsiban[idx][0] = strval(arrCoords[9]);
			CuccokAKocsiban[idx][12] = strval(arrCoords[10]);
			CuccokAKocsiban[idx][13] = strval(arrCoords[11]);
			CuccokAKocsiban[idx][14] = strval(arrCoords[12]);
			CuccokAKocsiban[idx][15] = strval(arrCoords[13]);
			CuccokAKocsiban[idx][16] = strval(arrCoords[14]);
			CuccokAKocsiban[idx][17] = strval(arrCoords[15]);
			CuccokAKocsiban[idx][18] = strval(arrCoords[16]);
			CuccokAKocsiban[idx][19] = strval(arrCoords[17]);
			CuccokAKocsiban[idx][20] = strval(arrCoords[18]);

			idx++;
		}
	}
	return 1;
}

public PuttoSorsolas()
{
	if(PSorsolas < 1)
	{
		PlayerForeach(i)
		{
			if(VanSzelvenye[i] == 1)
			{
					//SendClientMessage(i, COLOR_LIGHTBLUE, "* Puttó Sorsolás elkezdõdött!");
					new Szam1 = Rand(1, 20);
					new Szam2 = Rand(1, 20);
					new Szam3 = Rand(1, 20);
					new Szam4 = Rand(1, 20);
					new Szam5 = Rand(1, 20);
					new Szam6 = Rand(1, 20);
					new Szam7 = Rand(1, 20);
					new Szam8 = Rand(1, 4);
					if(Szam1 == Szam2 || Szam1 == Szam3 ||  Szam1 == Szam4 ||  Szam1 == Szam5 ||  Szam1 == Szam6 ||  Szam1 == Szam7) return PuttoSorsolas();
					if(Szam2 == Szam1 || Szam2 == Szam3 ||  Szam2 == Szam4 ||  Szam2 == Szam5 ||  Szam2 == Szam6 ||  Szam2 == Szam7) return PuttoSorsolas();
					if(Szam3 == Szam1 || Szam3 == Szam2 ||  Szam3 == Szam4 ||  Szam3 == Szam5 ||  Szam3 == Szam6 ||  Szam3 == Szam7) return PuttoSorsolas();
					if(Szam4 == Szam1 || Szam4 == Szam2 ||  Szam4 == Szam3 ||  Szam4 == Szam5 ||  Szam4 == Szam6 ||  Szam4 == Szam7) return PuttoSorsolas();
					if(Szam5 == Szam1 || Szam5 == Szam2 ||  Szam5 == Szam3 ||  Szam5 == Szam3 ||  Szam5 == Szam6 ||  Szam5 == Szam7) return PuttoSorsolas();
					if(Szam6 == Szam1 || Szam6 == Szam2 ||  Szam6 == Szam3 ||  Szam6 == Szam4 ||  Szam6 == Szam5 ||  Szam6 == Szam7) return PuttoSorsolas();
					if(Szam7 == Szam1 || Szam7 == Szam2 ||  Szam7 == Szam3 ||  Szam7 == Szam4 ||  Szam7 == Szam5 ||  Szam7 == Szam6) return PuttoSorsolas();
					
					SendClientMessage(i, COLOR_LIGHTBLUE, "* Puttó Sorsolás elkezdõdött!");
					SendFormatMessage(i, COLOR_LIGHTBLUE, "* Nyerõ számok: %d, %d, %d, %d, %d, %d, %d, B:%d", Szam1, Szam2, Szam3, Szam4, Szam5, Szam6, Szam7, Szam8);
					SendFormatMessage(i, COLOR_LIGHTBLUE, "* Te számaid: %d, %d, %d, %d, %d, %d, %d, B:%d", PSzam1[i], PSzam2[i], PSzam3[i], PSzam4[i], PSzam5[i], PSzam6[i], PSzam7[i], PSzam8[i]);
					if(PSzam1[i] == Szam1 || PSzam1[i] == Szam2 || PSzam1[i] == Szam3 || PSzam1[i] == Szam4 || PSzam1[i] == Szam5 || PSzam1[i] == Szam6 || PSzam1[i] == Szam7) talalatok[i]++;
					if(PSzam2[i] == Szam1 || PSzam2[i] == Szam2 || PSzam2[i] == Szam3 || PSzam2[i] == Szam4 || PSzam2[i] == Szam5 || PSzam2[i] == Szam6 || PSzam2[i] == Szam7) talalatok[i]++;
					if(PSzam3[i] == Szam1 || PSzam3[i] == Szam2 || PSzam3[i] == Szam3 || PSzam3[i] == Szam4 || PSzam3[i] == Szam5 || PSzam3[i] == Szam6 || PSzam3[i] == Szam7) talalatok[i]++;
					if(PSzam4[i] == Szam1 || PSzam4[i] == Szam2 || PSzam4[i] == Szam3 || PSzam4[i] == Szam4 || PSzam4[i] == Szam5 || PSzam4[i] == Szam6 || PSzam4[i] == Szam7) talalatok[i]++;
					if(PSzam5[i] == Szam1 || PSzam5[i] == Szam2 || PSzam5[i] == Szam3 || PSzam5[i] == Szam4 || PSzam5[i] == Szam5 || PSzam5[i] == Szam6 || PSzam5[i] == Szam7) talalatok[i]++;
					if(PSzam6[i] == Szam1 || PSzam6[i] == Szam2 || PSzam6[i] == Szam3 || PSzam6[i] == Szam4 || PSzam6[i] == Szam5 || PSzam6[i] == Szam6 || PSzam6[i] == Szam7) talalatok[i]++;
					if(PSzam7[i] == Szam1 || PSzam7[i] == Szam2 || PSzam7[i] == Szam3 || PSzam7[i] == Szam4 || PSzam7[i] == Szam5 || PSzam7[i] == Szam6 || PSzam7[i] == Szam7) talalatok[i]++;
					if(PSzam8[i] == Szam8) talalatok[i] ++;
					if(talalatok[i] > 0)
					{
						GiveMoney(i, talalatok[i]*500);
						SendFormatMessage(i, COLOR_LIGHTBLUE, "* Találataid száma: %d, Nyertél $%d-ot.", talalatok[i], talalatok[i]*500);
					}
					else
					{
						SendFormatMessage(i, COLOR_LIGHTBLUE, "* Találataid száma: %d, Sajnos nem nyertél semmit...", talalatok[i]);
					}
					SendClientMessage(i, COLOR_LIGHTBLUE, "* Következõ sorsolás 5 Perc múlva.");
					VanSzelvenye[i] = 0;
					talalatok[i] = 0;
			}
		}	
		PSorsolas = 300;
	}
	return 1;
}

public SecTimer()
{
	if(BejelentkezokSzama > 0) BejelentkezokSzama = 0;
	PlayerForeach(p)
	{
		KezdoTesztSpawn(p);
	}
	return 1;
}
fuggveny LiftbeVan(playerid)
{
	new Float:Pos[3];
	GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
	
	if(PlayerToPoint(4.0, playerid, 1786.8239,-1303.9459,Pos[2]))
		return true;
	return false;
}
fuggveny Float:GetPlayerSpeedXY(playerid)
{
	new Float:SpeedX, Float:SpeedY, Float:SpeedZ;
	new Float:Speed;
	if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid), SpeedX, SpeedY, SpeedZ);
	else GetPlayerVelocity(playerid, SpeedX, SpeedY, SpeedZ);
	Speed = floatsqroot(floatadd(floatpower(SpeedX, 2.0), floatpower(SpeedY, 2.0)));
	return floatmul(Speed, 200.0);
}
fuggveny KorhazChatTorles(playerid)
{	
	ClearChat(playerid);
	Msg(playerid, "Innentõl kezdve IC nem emlékszel az elmúlt 10 percre!");
}
public OtherTimer()
{
	//HelyezesCheck();
    PlayerForeach(i)
	{
		new string[248];
		if(Logged(i))
		{
			if(GetPlayerSkin(i) == 0 && !IsRicardo(i)) SetPlayerSkin(i, 23);
			
			if(IsAdminSzolis(i, NINCS))
			{
				new text[124], togpm[10];
				if(HidePM[i] == 1) { togpm = "~r~KI"; } else { togpm = "~g~BE"; }				
				Format(text, "~r~AdminSzolgálatban  ~w~PM-ek: %s  ~w~Létszám: %s", togpm, SzerverLetszam());				
				TextDrawSetString(AdminSzoliTextDraw[i], text);
			}
			
		    if(GetPlayerAnimationIndex(i) && AnimLekeres[i] != 0)
		    {
		        new animlib[32];
		        new animname[32];
		        new msg[128];
		        GetAnimationName(GetPlayerAnimationIndex(i),animlib,32,animname,32);
		        format(msg, 128, "Jelenlegi animáció: animlib: %s | animname: %s, ID: %d", animlib, animname, GetPlayerAnimationIndex(i));
		        SendClientMessage(i, 0xFFFFFFFF, msg);
		    }
		 	
			if(BRendszer3[i] > 0)
			{
				BRendszer3[i] --;
				if(BRendszer3[i] == 0)
				{
					new kocsi = GetClosestVehicle(i);
					if(GetDistanceToVehicle(i, kocsi) < 4.0)
					{
						new vs = IsAVsKocsi(kocsi);
						if(vs != NINCS)
						{
							SendClientMessage(i, COLOR_LIGHTGREEN, "** Biztonsági Rendszer Deaktiválva **");
							CarInfo[vs][cBRendszerAktiv] = 0;
							CarUpdate(vs, CAR_BRendszerAktiv);
							Cselekves(i, "deaktiválta a biztonsági rendszert... / deactivated the security system ...");
						}
					}	
				}	
			}
			if(BRendszer2[i] > 0)
			{
				BRendszer2[i] --;
				if(BRendszer2[i] == 0)
				{
					new kocsi = GetClosestVehicle(i);
					if(GetDistanceToVehicle(i, kocsi) < 4.0)
					{
						new vs = IsAVsKocsi(kocsi);
						if(vs != NINCS)
						{
							SendClientMessage(i, COLOR_LIGHTGREEN, "** Biztonsági Rendszer Aktiválva **");
							CarInfo[vs][cBRendszerAktiv] = 1;
							CarUpdate(vs, CAR_BRendszerAktiv);
							Cselekves(i, "aktiválta a biztonsági rendszert... / activated the security system ...");
						}
					}	
				}	
			}
			if(BRendszer[i] > 0)
			{
				BRendszer[i] --;
				if(BRendszer[i] == 0)
				{
					UnFreeze(i);
					new kocsi = GetClosestVehicle(i);
					if(GetDistanceToVehicle(i, kocsi) < 4.0)
					{
						new vs = IsAVsKocsi(kocsi);
						if(vs != NINCS)
						{
							CarInfo[vs][cBRendszer] = 1;
							CarInfo[vs][cBRendszerKod] = BRKod[i];
							CarUpdate(vs, CAR_BRendszer);
							CarUpdate(vs, CAR_BRendszerKod);
							SendClientMessage(i, COLOR_LIGHTGREEN, "** Biztonsági Rendszer Telepítve **");
							SendFormatMessage(i, COLOR_YELLOW, "- Aktiválási kód: [ %d ]", BRKod[i]);
							SendClientMessage(i, COLOR_YELLOW, "- Rendõrségi adatbázis frissítve.");
							SendClientMessage(i, COLOR_YELLOW, "- Rendszer aktiválása ...");
							BRendszer2[i] = 5;
							BRKod[i] = 0;
						}
					}
				}
			}
			if(KBWait2[i] > 0)
			{
				KBWait2[i] --;
				if(KBWait2[i] == 0)
				{
					UnFreeze(i);
					new kocsi = GetClosestVehicle(i);
					if(GetDistanceToVehicle(i, kocsi) < 4.0)
					{
						Msg(i, "Kerékbilincs leszerelve.");
						Cselekves(i, "leszerelte a kerékbilincset és levette a cédulát");
						KerekBilincs[kocsi] = false;
						SetJarmu(kocsi, KOCSI_MOTOR, false);
						if(IsValidDynamic3DTextLabel(KB3D[kocsi]))
							DestroyDynamic3DTextLabel(KB3D[kocsi]);
		//			KB3D[kocsi] = NINCS;
					}	
				}
			}
			if(KBWait[i] > 0)
			{
				KBWait[i] --;
				if(KBWait[i] == 0)
				{
					UnFreeze(i);
					new kocsi = GetClosestVehicle(i);
					if(GetDistanceToVehicle(i, kocsi) < 4.0)
					{
						new kiv = PlayerInfo[i][pMember] - 1;
						new szneve[60];
						szneve = Szervezetneve[kiv][0];
						Msg(i, "Kerékbilincs felszerelve.");
						Cselekves(i, "felszerelt egy kerékbilincset és felrakott egy cédulát. / fitted a wheel clamp");
						new text[128];
						Format(text, "===[Kerékbilincs - Wheel Clamp]===\n%s - %s", PlayerName(i), szneve);
						KB3D[kocsi] = CreateDynamic3DTextLabel(text, COLOR_YELLOW, 0.0, 0.0, 0.0, 20.0, INVALID_PLAYER_ID, kocsi);
						KerekBilincs[kocsi] = true;
						ABroadCastFormat(COLOR_LIGHTRED, 1, "<< %s felszerelt egy kerékbilincset | Jármû ID: %d >>", PlayerName(i), kocsi);
						VanKB[i] = 0;
						engineOn[kocsi] = 0;
						SetJarmu(kocsi, KOCSI_MOTOR, false);
					}	
				}
			}
		    /*if(Szint(i) < FEGYVERHASZNALATSZINT)
			{
				new wn = 0, wid, wammo;
				for(new w = 0; w < 13; w++)
				{
					GetPlayerWeaponData(i, w, wid, wammo);
					if(wid != 0 && wammo != 0)
					{
						wn++;
					}
				}
				if(wn)
				{
					SendFormatMessage(i, COLOR_LIGHTRED, "Legalább %d szinttûnek kell lenned, hogy használhass fegyvert!", FEGYVERHASZNALATSZINT);
					ResetWeapon(i);
				}
			}*/
		}
		if(PlayerInfo[i][pPremiumIdo] > 0)
			PlayerInfo[i][pPremiumIdo] -= 1;
		if(PlayerInfo[i][pPremiumCsomag] != 0 && PlayerInfo[i][pPremiumIdo] <= 1)
		{
			Msg(i, "A prémiumod lejárt.");
			PlayerInfo[i][pPremiumCsomag] = 0;
			PlayerInfo[i][pPremiumIdo] = 0;
		}
		if(BementIdo[i] != 0)
		{
		    if(BementIdo[i] != 1)
		        BementIdo[i] --;
			else
			    BementIdo[i] = 0;
		}
		if(PickupAntiFlood[i] != 0)
		{
		    if(PickupAntiFlood[i] != 1)
		        PickupAntiFlood[i] --;
			else
			    PickupAntiFlood[i] = 0;
		}
		if(PlayerInfo[i][pJailed] == BORTON_ADMIN2)
		{
			if(AJSzovegIdo[i] > 0)
				AJSzovegIdo[i] --;
			
			if(AJSzovegIdo[i] == 0)
			{
				new
					szoveg[256],
					id, ido;
				id = random( sizeof(JailSzovegek) );
				ido = 20 + strlen( JailSzovegek[ id ][0] ) / 6;
				format(szoveg, 200, "Írd be a következõ szöveget, betûre pontosan!\n\n\"%s\"\n\nHa beírod, az idõd csökken %d másodperccel", JailSzovegek[ id ][0], ido);
				ShowPlayerDialog(i, DIALOG_AJSZOVEG, DIALOG_STYLE_INPUT, "Adminjail", szoveg, "Mehet", "");
				
				AJSzovegIdo[i] = NINCS;
				AJSzoveg[i] = id;
				AJSzovegHiba[i] = 0;
			}
		}
		if(CsomagszallitoIdo[i] > 0 && !IsPlayerInAnyVehicle(i))
		{
			CsomagszallitoIdo[i] --;
			if(CsomagszallitoIdo[i] == 1)
			{
				Msg(i, "Túl sokáig nem ültél vissza a Csomagszallitoodba, ezért a szállítás érvényét vesztette!");
    			CsomagszallitoIdo[i] = 0;
				szallit[i] = 0;
				SzallitasPozicio[i] = 0;
				CsomagszallitoMerve[i] = 0;
			}
		}
		if(ErositesIdo[i] > 0)
		{
			ErositesIdo[i] --;
			if(ErositesIdo[i] == 1)
			{
			    Msg(i, "Az erõsítés lejárt!");
				ErositesIdo[i] = 0;
				Erosites[i] = false;
				PlayerForeach(p)
				{
					SetPlayerMarkerForPlayer(p, i, COLOR_INVISIBLE);
				}
			}
		}
		
		if(AJVarakozas[i] > 0)
			AJVarakozas[i] --;
		if(ReportolasIdo[i] > 0)
		{
			ReportolasIdo[i] --;
			if(ReportolasIdo[i] == 0)
				Msg(i, "Újra üzenhetsz");
		}
			
		if(Ugrasok[i][0] == 1)
			Ugrasok[i][0] = 0;

		if(Ugrasok[i][1] > 0)
		{
			Ugrasok[i][1] --;
			if(Ugrasok[i][1] == 0)
				Ugrasok[i][2] = 0;
		}
		if(Szunet[i])
		{
			SzunetIdo[i] ++;

			new SzunetStr[24];
			Format(SzunetStr, "AFK [%d mp]",SzunetIdo[i]);
    		UpdateDynamic3DTextLabelText(Szunet3D[i], COLOR_AFK, SzunetStr);
		}
		if(Elverzes[i] > 0 && Animban[i] == TIPUS_LOTTSEB)
		{
		    Elverzes[i] --;
		    //if(Elverzes[i] % 60)
			//	SendClientMessage(i,COLOR_LIGHTRED, "Figyelmeztetés: Ha nem érkezik segítség, hamarosan elvérzel!!!");

            if(Elverzes[i] == 0)
			{
				Msg(i, "Elvéreztél, ezért meghaltál!");
				SetHealth(i,0.0);
			}
		}
		if(SpawnVedelem[i] > 0)
		{
			SpawnVedelem[i] --;
		}
		if(Megprobal[i] > 0)
		{
			Megprobal[i] --;
			if(Megprobal[i] == 0)
			{
				Msg(i, "Újra írhatsz /megpróbál-t");
			}
		}
		if(Nyomozott[i] > 0)
		{
			Nyomozott[i] --;
			if(Nyomozott[i] == 0)
				DisablePlayerCheckpoint(i);
		}

		if(HatartAtlepte[i] > 0) HatartAtlepte[i] --;
		
		if(Sokkolva[i] > 0)
		{
			Sokkolva[i] --;
			if(Sokkolva[i] == 0)
			{
				Bilincs(i, 0);
				UnFreeze(i);
			}
		}
		
		if(PlayerInfo[i][pSzokesJelzes]>0)
		{
			PlayerInfo[i][pSzokesJelzes] --;
			if(PlayerInfo[i][pSzokesJelzes] == 0) 
			{
				PlayerForeach(x)
				{
					if(IsACop(x)) SetPlayerMarkerForPlayer(x, i, COLOR_INVISIBLE); 
				}
			}
		}
		if(Leutott[i] > 0)
		{
			Leutott[i] --;
			if(Leutott[i] == 0)
			{
				Msg(i, "Rendbejött a kezed igy ujra letudsz ütni valakit.");
			}
		}
		if(PlayerInfo[i][pHack] > 0)
		{
			PlayerInfo[i][pHack] --;
			if(PlayerInfo[i][pHack] == 0)
			{ 
				Msg(i, "Újra hackelhetsz!");
				PlayerInfo[i][pHackProba] = 0;
			}
		}
		if(LeutveIdo[i] > 0)
		{
			LeutveIdo[i] --;
			if(LeutveIdo[i] == 0)
			{
				Cselekves(i, "felébredt", 1);
				Msg(i, "Felébredtél");
					
				UnFreeze(i);
				Feketeseg(i, false,0);
				Leutve[i] = false;
				PlayerForeach(p)
				{
					if(!RendesJatekos(p)) continue;
					if(Visz[p] == i)
						Visz[p] = NINCS;
				}
			}
		}
		if(TrafiPax[i][tBuntetheto] > 0)
		{
			TrafiPax[i][tBuntetheto] --;
			if(TrafiPax[i][tBuntetheto] == 0)
				Msg(i, "Vigyázz! Ha megint gyorsan hajtasz, ismét büntetést fogsz kapni!");
		}

		if(PlayerInfo[i][pEhseg] < 0)
		{
			/*new Float:HP; GetPlayerHealth(i, HP);
			
			if(HP > 10)
				GiveHealth(i, -10);
				
			//OnePlayAnim(i, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
			Cselekves(i, "-nak/nek hányingere lett, mert túl sokat evett vagy ivott");*/
			Cselekves(i, "jól lakott mivel sokat evett");
			PlayerInfo[i][pEhseg] = 0.0;
		}
		
		if(PlayerInfo[i][pSzomjusag] < 0.0)
		{
			Cselekves(i, "már nem szomjas mivel eleget ivott");
			PlayerInfo[i][pSzomjusag] = 0.0;
		}
		
	    if(CellTime[i] > 0)
		{
			if(CellTime[i] == cchargetime)
			{
				CellTime[i] = 1;
				if(IsValidPlayerID(Mobile[i]) && Mobile[Mobile[i]] == i)
				{
					CallCost[i] = 5;
				}
			}
			CellTime[i] = CellTime[i] +1;
			if(IsValidPlayerID(Mobile[i]) && Mobile[Mobile[i]] == -1 && CellTime[i] == 5)
			{
				format(string, sizeof(string), "* Valakinek csörög a telefonja");
				RingTone[Mobile[i]] = 10;
				ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
		}

		if(CellTime[i] == 0 && CallCost[i] > 0)
		{
			format(string, sizeof(string), "~w~A Hívás Díja:~n~~r~$%d", CallCost[i]);
			PlayerInfo[i][pTeloEgyenleg] = PlayerInfo[i][pTeloEgyenleg] - CallCost[i];
			new ujegyenleg = PlayerInfo[i][pTeloEgyenleg];
			GameTextForPlayer(i, string, 5000, 1);
			format(string, sizeof(string), "[%s]Hivás Díja: $%d | Új Egyenlege: $%d",SzolgaltatoNev(i),CallCost[i], ujegyenleg);
            SendClientMessage(i, COLOR_YELLOW, string);
			CallCost[i] = 0;
		}
	}
	return 1;
}

public SetPlayerUnjail()
{
	//new plname[MAX_PLAYER_NAME];
	new string[256];
	if(KartingPlayers >= 2 && KartingRound != 1 && StartingKartRound != 1)
	{
	    StartingKartRound = 1;
	    SetTimer("PrepareKarting", 15000, 0);
	}
	if(KartingRound != 0 && KartingPlayers < 2)
	{
	    StartingKartRound = 0;
	    KartingRound = 0;
	    EndingKartRound = 1;
	}
	PlayerForeach(i)
	{
	    if(IsValidPlayerID(i))
	    {
		    if(PlayerInfo[i][pJailed] > 0 && PlayerInfo[i][pJailed] != BORTON_ADMIN2)
		    {
				if(PlayerInfo[i][pJailTime] > 0) // emiatt telik a jail idõ
				{
					if(Szunet[i] == false)
					{
						PlayerInfo[i][pJailTime] --;
					}
				}
				
				if(PlayerInfo[i][pJailTime] <= 0)
				{
				    PlayerInfo[i][pJailTime] = 0;
					if(PlayerInfo[i][pJailed] == BORTON_LSPD)
					{
						ResetVW(i);
						SetPlayerPos(i, 1478.9479, -1741.8082, 13.5469);
						SetPlayerFacingAngle(i, 90.6791);
					}
					else if(PlayerInfo[i][pJailed] == BORTON_FEGYENCTELEP) 
					{
					    SetPlayerWorldBounds(i,20000.0000,-20000.0000,20000.0000,-20000.0000); //Reset world to player
						SetPlayerPos(i, 1763.6094, -1540.8905, 9.3561);
						Freeze(i, 5000);
					}
					else if(PlayerInfo[i][pJailed] == BORTON_ADMIN)
					{
						ResetVW(i);
					   	SetPlayerPos(i, 1478.9479, -1741.8082, 13.5469);
					}
					else if(PlayerInfo[i][pJailed] == BORTON_NAV)
					{
						ResetVW(i);
					   	SetPlayerPos(i, 1478.9479, -1741.8082, 13.5469);
					}
					else if(PlayerInfo[i][pJailed] == BORTON_NNI)
					{
						ResetVW(i);
					   	SetPlayerPos(i, 1478.9479, -1741.8082, 13.5469);
					}
					PlayerInfo[i][pJailed] = BORTON_NINCS;
					Msg(i, "Letöltötted a büntetésed!");
					//format(string, sizeof(string), "~g~Szabad vagy~n~~w~Légy jó polgár!");
					//SetPlayerPos(i, -1605.507446, 711.250549, 13.365664);
					GameTextForPlayer(i, string, 5000, 1);
					ClearCrime(i);
					SetPlayerToTeamColor(i);
				}
			}
		    if(UsedFind[i] >= 1)
		    {
		        UsedFind[i] += 1;
				if(UsedFind[i] >= FINDLIMIT*60)
				{
				    UsedFind[i] = 0;
				}
		    }

			if(WantLawyer[i] >= 1)
			{
				if(PlayerInfo[i][pJailed] == BORTON_LSPD || PlayerInfo[i][pJailed] == BORTON_NAV)
				{
					CallLawyer[i] = 111;
					if(WantLawyer[i] == 1)
					{
						SendClientMessage(i, COLOR_LIGHTRED, "Szeretnél ügyvédet? (igen / nem)");
					}
					WantLawyer[i] ++;
					if(WantLawyer[i] == 8)
					{
						SendClientMessage(i, COLOR_LIGHTRED, "Szeretnél ügyvédet? (igen / nem)");
					}
					if(WantLawyer[i] == 15)
					{
						SendClientMessage(i, COLOR_LIGHTRED, "Szeretnél ügyvédet? (igen / nem)");
					}
					if(WantLawyer[i] == 20)
					{
						SendClientMessage(i, COLOR_LIGHTRED, "Most már nem tudsz ügyvédet hívni, lejárt az idõ! Elkezdted a büntetésed letöltését.");
						WantLawyer[i] = 0;
						CallLawyer[i] = 0;
					}
				}	
			}
			if(PlayerStoned[i] >= 2)
			{
		        PlayerStoned[i] += 1;
			    if(PlayerStoned[i] == 10)
			    {
			        PlayerStoned[i] = 2;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	SetVehicleZAngle(GetPlayerVehicleID(i), angle + 25);
						}
					}
					else
					{
					    SetPlayerFacingAngle(i, angle + 90);
					}
			    }
			}
			if(PlayerInfo[i][pCarTime] > 0)
			{
			    if(PlayerInfo[i][pCarTime] <= 0)
			    {
			        PlayerInfo[i][pCarTime] = 0;
			    }
			    else
			    {
			        PlayerInfo[i][pCarTime] -= 1;
			    }
			}
			if(BoxWaitTime[i] > 0)
			{
			    if(BoxWaitTime[i] >= BoxDelay)
				{
				    BoxDelay = 0;
					BoxWaitTime[i] = 0;
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
					GameTextForPlayer(i, "~g~Meccs elindult!", 5000, 1);
					TogglePlayerControllable(i, 1);
					RoundStarted = 1;
				}
			    else
				{
				    format(string, sizeof(string), "%d", BoxDelay - BoxWaitTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					BoxWaitTime[i] += 1;
				}
			}
			if(RoundStarted > 0)
			{
			    if(PlayerBoxing[i] > 0)
			    {
			        new trigger = 0;
			        new Lost = 0;
		        	new Float:angle;
		            new Float:health;
					GetPlayerHealth(i, health);
		            if(health < 12)
					{
					    if(i == Boxer1) { Lost = 1; trigger = 1; }
			            else if(i == Boxer2) { Lost = 2; trigger = 1; }
					}
			        if(health < 28) { GetPlayerFacingAngle(i, angle); SetPlayerFacingAngle(i, angle + 85); }
			        if(trigger)
			        {
			            new winner[MAX_PLAYER_NAME];
			            new loser[MAX_PLAYER_NAME];
			            new titel[MAX_PLAYER_NAME];
			            if(Lost == 1)
			            {
			                if(IsValidPlayerID(Boxer1) && IsValidPlayerID(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
			                	GetPlayerName(Boxer1, loser, sizeof(loser));
			                	GetPlayerName(Boxer2, winner, sizeof(winner));
		                		if(AMT(Boxer1, MUNKA_BOXOLO)) { PlayerInfo[Boxer1][pLoses] += 1; }
								if(AMT(Boxer2, MUNKA_BOXOLO)) { PlayerInfo[Boxer2][pWins] += 1; }
							 	SetPlayerFightingStyle (Boxer1, FIGHT_STYLE_GRABKICK);
							  	SetPlayerFightingStyle (Boxer2, FIGHT_STYLE_GRABKICK);
			                	if(TBoxer < 255)
			                	{
			                	    if(IsValidPlayerID(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer2)
				                	    {
				                	        if(AMT(Boxer2, MUNKA_BOXOLO))
				                	        {
				                	            TBoxer = Boxer2;
				                	            GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "Boxing News: %s has Won the fight against Champion %s and is now the new Boxing Champion.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
				                	        }
				                	        else
				                	        {
				                	            SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You would have been the Champion if you had the Boxer Job !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "Boxing News: Boxing Champion %s has Won the fight against %s.",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer2][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* You have Lost the Fight against %s.", winner);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~r~You lost", 3500, 1);
								format(string, sizeof(string), "* You have Won the Fight against %s.", loser);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~You won", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
								    SetHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
								    SetHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
							    	SetHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
								    SetHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match Over", 5000, 1);
								if(AMT(Boxer2, MUNKA_BOXOLO)) { PlayerInfo[Boxer2][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            else if(Lost == 2)
			            {
			                if(IsValidPlayerID(Boxer1) && IsValidPlayerID(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
			                	GetPlayerName(Boxer1, winner, sizeof(winner));
			                	GetPlayerName(Boxer2, loser, sizeof(loser));
		                		if(AMT(Boxer2, MUNKA_BOXOLO)) { PlayerInfo[Boxer2][pLoses] += 1; }
								if(AMT(Boxer1, MUNKA_BOXOLO)) { PlayerInfo[Boxer1][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsValidPlayerID(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer1)
				                	    {
				                	        if(AMT(Boxer1, MUNKA_BOXOLO))
				                	        {
					                	        TBoxer = Boxer1;
					                	        GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(string, sizeof(string), "Boxing News: %s has Won the fight against Champion %s and is now the new Boxing Champion.",  titel, loser);
												OOCOff(COLOR_WHITE,string);
											}
				                	        else
				                	        {
				                	            SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You would have been the Champion if you had the Boxer Job !");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(string, sizeof(string), "Boxing News: Boxing Champion %s has Won the fight against %s.",  titel, loser);
											OOCOff(COLOR_WHITE,string);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer1][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* You have Lost the Fight against %s.", winner);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~You lost", 3500, 1);
								format(string, sizeof(string), "* You have Won the Fight against %s.", loser);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~g~You won", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
								    SetHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
								    SetHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
							    	SetHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
								    SetHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match Over", 5000, 1);
								if(AMT(Boxer1, MUNKA_BOXOLO)) { PlayerInfo[Boxer1][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            RoundStarted = 0;
			            Boxer1 = 255;
			            Boxer2 = 255;
			            TBoxer = 255;
			            trigger = 0;
			        }
			    }
			}
			if(StartingKartRound == 1 && AnnouncedKartRound == 0)
			{
			    AnnouncedKartRound = 1;
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        SendClientMessage(i, COLOR_YELLOW, "A Gokart verseny ki lett hírdetve, hogy több versenyzõ jöjjön!");
			    }
			}
			if(EndingKartRound == 1)
			{
			    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
			    {
			        DisablePlayerCheckpoint(i);
			        CP[i] = 0;
			    }
			}
			if(FindTime[i] > 0)
			{
			    if(FindTime[i] == FindTimePoints[i]) { FindTime[i] = 0; FindTimePoints[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Jelzés vége", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", FindTimePoints[i] - FindTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					FindTime[i] += 1;
				}
			}
			if(TaxiCallTime[i] > 0)
			{
			    if(TaxiAccepted[i] < 999)
			    {
				    if(IsValidPlayerID(TaxiAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(TaxiAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(BusCallTime[i] > 0)
			{
			    if(BusAccepted[i] < 999)
			    {
				    if(IsValidPlayerID(BusAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(MedicCallTime[i] > 0)
			{
			    if(MedicCallTime[i] == 60) { MedicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Jelzes vege", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", 60 - MedicCallTime[i]);
					GameTextForPlayer(i, string, 30000, 6);
					MedicCallTime[i] += 1;
				}
			}
			if(MechanicCallTime[i] > 0)
			{
			    if(MechanicCallTime[i] == 30) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Jelzes vege", 2500, 1); }
			    else
				{
				    format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
					GameTextForPlayer(i, string, 1500, 6);
					MechanicCallTime[i] += 1;
				}
			}
			if(Robbed[i] == 1)
			{
			    if(RobbedTime[i] <= 0)
			    {
			        RobbedTime[i] = 0;
					Robbed[i] = 0;
			    }
			    else
			    {
			        RobbedTime[i] -= 1;
			    }
			}
			else if(PlayerToPoint(20, i,1133.0699,-9.5731,1000.6797))
			{//West Casino place
			    GameTextForPlayer(i, "~r~Closed", 5000, 1);
			    SetPlayerInterior(i, 0);
			    SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}
		}
	}
}

public CheckGas()
{
	new sofor;
	VehicleForeach(v)
	{
		if(!IsVehicleConnected(v) || IsAPlane(v) || IsKocsi(v, "gokart") || IsABoat(v) || IsABicikli(v)) continue;

		sofor = NINCS;
		PlayerForeach(p)
		{
			if(!IsValidPlayerID(p) || !Logged(p) || IsPlayerNPC(p) || GetPlayerState(p) != 2) continue;
			if(IsPlayerInVehicle(p, v))
			{
				sofor = p;
				break;
			}
		}
		if(engineOn[v])
		{
			if(BenzinesKocsi(v))
			{
				if(Gas[v][0] > MaxBenzin(v))
				{
					Gas[v][0] = MaxBenzin(v);
				}
				else if(Gas[v][0] >= 2)
				{
					Gas[v][0] -= 1;
				}
				else
				{
					engineOn[v] = 0;
					Gas[v][0] = 0;
					if(sofor != NINCS)
					{
						Msg(sofor, "A motor leállt mivel kifogyott a jármûbõl az üzemanyag.");
						SetJarmu(v, KOCSI_MOTOR, false);
					}
				}
			}
			else if(DieselesKocsi(v))
			{
				if(Gas[v][1] > MaxBenzin(v))
				{
					Gas[v][1] = MaxBenzin(v);
				}
				else if(Gas[v][1] >= 2)
				{
					Gas[v][1] -=1 ;
				}
				else
				{
					engineOn[v] = 0;
					Gas[v][1] = 0;
					if(sofor != NINCS)
					{
						Msg(sofor, "A motor leállt mivel kifogyott a jármûbõl az üzemanyag.");
						SetJarmu(v, KOCSI_MOTOR, false);
					}
				}
			}
		}
		if(sofor != NINCS)
		{
			if(BenzinesKocsi(v))
			{
				if(Gas[v][0] >= 1)
				{
					if(Gas[v][0] <= 15)
					{
						PlayerPlaySound(sofor, 1085, 0.0, 0.0, 0.0);
						GameTextForPlayer(sofor, "~r~~n~~n~~n~~n~~n~~n~~n~~n~~n~Fogy az üzemanyag", 5000, 3);
					}
				}
			}
			else
			{
				if(Gas[v][1] >= 1)
				{
					if(Gas[v][1] <= 15)
					{
						PlayerPlaySound(sofor, 1085, 0.0, 0.0, 0.0);
						GameTextForPlayer(sofor, "~r~~n~~n~~n~~n~~n~~n~~n~~n~~n~Fogy az üzemanyag", 5000, 3);
					}
				}
			}
		}
	}
	return 1;
}

public FszallitasTimer(playerid)
{
	UnFreeze(playerid);
	Msg(playerid, "Kipakoltad a fegyvereket!");
	GiveWeapon(playerid, 24, 200);
	GiveWeapon(playerid, 29, 300);
	GiveWeapon(playerid, 31, 500);
	SetPlayerArmour(playerid, MAXARMOUR);
}
public MunkaTimer()
{
	return 1;
}

public EgyebTimer()
{
	PenzUpdate();
	
	//if(TilosOlni == 0) TextDrawHideForAll(zerotd);
	
	PlayerForeach(p)
	{
		if(IsValidPlayerID(p) && !IsPlayerNPC(p))
		{
			//Firka_OnPlayerUpdate(p);
			Tuz_OnPlayerUpdate(p);
			if(StopperFut[p] != 0)
			{
				StopperIdo[p] ++;
			}
			if(ElveszIdo[p] != 0)
			{
			    if(ElveszIdo[p] > 1)
			    {
			 		ElveszIdo[p] --;
				}
				else if(ElveszIdo[p] == 1)
				{
					ElveszIdo[p] = 0;
				}
	  		}
		    if(DutyIdo[p] != 0)
			{
			    if(DutyIdo[p] > 1)
			    {
			 		DutyIdo[p] --;
				}
				else if(DutyIdo[p] == 1)
				{
					DutyIdo[p] = 0;
				}
			}
			if(AszoliIdo[p] != 0)
			{
			    if(AszoliIdo[p] > 1)
			    {
			 		AszoliIdo[p] --;
				}
				else if(AszoliIdo[p] == 1)
				{
					AszoliIdo[p] = 0;
				}
			}
			/*else
			{
				SebessegKorlat[p] = 0;
			}*/
		    if(GetPlayerState(p) == 7) continue;
		    if(Animban[p] != 0)
	    	{
	        	ApplyAnimation(p, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
				if(IsPlayerInAnyVehicle(p) && GetPlayerState(p) == PLAYER_STATE_DRIVER)
					RemovePlayerFromVehicle(p);
		    }
			for(new i=1;i<MAXHIFI;i++)
			{
				if(IsPlayerInRangeOfPoint(p, MAX_HIFI_DISTANCE, HifiInfo[i][hX], HifiInfo[i][hY], HifiInfo[i][hZ]))
				{
					if(HifiInfo[i][hX] != 0 && HifiInfo[i][hY] != 0 && HifiInfo[i][hZ] != 0)
					{
						if(!egyezik(HifiInfo[i][hURL], HifiZene[p]) && !egyezik(HifiInfo[i][hURL], "-"))
						{
							StopAudioStreamForPlayer(p);
							PlayAudioStreamForPlayer(p, HifiInfo[i][hURL], HifiInfo[i][hX], HifiInfo[i][hY], HifiInfo[i][hZ], MAX_HIFI_DISTANCE, 1);
							strmid(HifiZene[p], HifiInfo[i][hURL], 0, strlen(HifiInfo[i][hURL]), 256);
						}
					}
				}
			}
		    //1. meló
		    if(PlayerInfo[p][pJob1] != 0 )
	    	{
	        	if(PlayerInfo[p][pContractTime] < 9000)
			        PlayerInfo[p][pContractTime]++;
		    }
			if(JointIdo[p] > 0)
			{
				JointIdo[p] --;
				if(JointIdo[p] == 0)
				{
					Joint[p] = 0;
					ProxDetector(30.0, p, "* Valakinek a jointja elfogyott.", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
			}
			//2. meló
		    if(PlayerInfo[p][pJob2] != 0 )
		    {
	    	    if(PlayerInfo[p][pContractTime2] < 9000)
			        PlayerInfo[p][pContractTime2]++;
		    }
			
			/*new skin = GetPlayerSkin(p);
			if(!IsValidSkin(skin) || skin == 124 && !Skin(p, 1))
			{				
				new keres[64], ahol[64], nev[256];
				keres = "Nev";
				ahol = "ID='1'";		
				nev = Mysql_Get(SQL_DB_Player, keres, ahol);
				
				SendFormatMessage(p, COLOR_LIGHTBLUE, "Nem-nem! Ez %s skine! :D", nev);
				SetPlayerSkin(p, 1);
			}*/

			/*if(!IsValidSkin(skin) || skin == 188 && !Skin(p, 2))
			{
				SetPlayerSkin(p, 10);
				SendClientMessage(p, COLOR_LIGHTBLUE, "Ez Márk skin-je! Nem-nem! :D");
			}*/
				
			if(TransportTime[p] > 0)
			{
				TransportTime[p]++;
			    if(TransportTime[p] >= 16)
				{
					TransportTime[p] = 1;
					
					new driver = TransportDriver[p];
					if(RendesJatekos(driver, false) && driver != p)
					{
      					TransportCost[p] += TransportValue[driver];
					    TransportCost[driver] = TransportCost[p];
					}
				}
				new string[128];
			    format(string, sizeof(string), "~n~~n~~r~15 / %d ~n~~g~$%d", TransportTime[p], TransportCost[p]);
			    GameTextForPlayer(p, string, 15000, 4);
			}

			new fizetes[3];
			fizetes[0] = floatround(PlayerInfo[p][pConnectTime] / 300);
			fizetes[1] = floatround(PlayerInfo[p][pConnectTime] / 150);
			fizetes[2] = floatround(PlayerInfo[p][pConnectTime] / 120);

			if(fizetes[0] <= 0) fizetes[0] = 1;
			if(fizetes[1] <= 0) fizetes[1] = 1;
			if(fizetes[2] <= 0) fizetes[2] = 1;

			if(Visz[p] != NINCS)
			{
				new Float:X, Float:Y, Float:Z, Int, VW;
				GetPlayerPos(p, X, Y, Z);
				VW = GetPlayerVirtualWorld(p);
				Int = GetPlayerInterior(p);

				SetPlayerPos(Visz[p], (X+0.5), Y, Z);
				SetPlayerInterior(Visz[p], Int);
				SetPlayerVirtualWorld(Visz[p], VW);
			}
			
			// névszínezés
			if(IsAdminSzolis(p, NINCS)) SetPlayerColor(p, COLOR_HEX_ADMIN); // color_adminszoli
			else if(Logged(p) && PlayerInfo[p][pTutorial] == 0) SetPlayerColor(p, COLOR_PINK);
			else if(AFK[p] == 1) SetPlayerColor(p, COLOR_BLACK);
			else if(Erosites[p]) SetPlayerColor(p, COLOR_LIGHTGREEN);
			else if(IsACop(p) AND OnDuty[p] == 1) SetPlayerColor(p, COLOR_POLICE & 0xFFFFFF00);
			else SetPlayerToTeamColor(p);
			
			if(PlayerInfo[p][pElozoParancs] > 0) PlayerInfo[p][pElozoParancs] --;
		}
	}

	EngineBreak();
	return 1;
}

public TeleTimer()
{
	new Float:x, Float:y, Float:z;
	PlayerForeach(p)
	{
		GetPlayerPos(p, x, y, z);
		// AdminJail 2 ellenörzõ
		if(PlayerInfo[p][pJailed] == BORTON_ADMIN && (z < 1000.0 || z > 1010.0 || GetPlayerInterior(p) != 1) && AJVarakozas[p] == 0)
		{
			//Msg(p, "Szerinted azért zártunk ide, hogy BungieJumpingoljá? Súgok: Nem-Nem :D");
			SetPlayerPos(p, 1412.639892,-1.787510,1000.924377);
			SetPlayerInterior(p, 1);
			SetPlayerVirtualWorld(p, 8888+p);
			continue;
		}
		if(PlayerInfo[p][pJailed] == BORTON_ADMIN2 && (z < 1000.0 || z > 1005.0 || y > -9.0 || y < -14.0 || x > 416.0 || x < 413.0 || GetPlayerVirtualWorld(p) != (10000+p) || GetPlayerInterior(p) != 2) && AJVarakozas[p] == 0)
		{
			AJSzokesek[p]++;
			if(AJSzokesek[p] >= 3)
			{
				Msg(p, "Én szóltam! +15perc adminjailt kapsz!");
				Jail(p, "+", 900, "off2", "---");
				continue;
			}
			SetPlayerPos(p, 414.628, -11.005, 1001.812);
			SetPlayerInterior(p, 2);
			SetPlayerVirtualWorld(p, 10000 + p);
			Msg(p, "Ne próbálkozz");
			continue;
		}
	
		// Ház 1 fort
		if(PlayerToPoint(3.0, p, 1627.5342, -1417.5098, 5.7204))
	    {
			if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
				SetVehiclePos(GetPlayerVehicleID(p), 1628.1488, -1406.1797, 5.3335);
			else if(!IsPlayerInAnyVehicle(p))
				SetPlayerPos(p, 1628.1488,-1406.1797,5.3335);
	    }
		if(PlayerToPoint(3.0, p, 1628.1488, -1406.1797, 5.3335))
	    {
			if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
				SetVehiclePos(GetPlayerVehicleID(p), 1627.5342, -1417.5098, 5.7204);
			else if(!IsPlayerInAnyVehicle(p))
				SetPlayerPos(p, 1627.5342, -1417.5098, 5.7204);
	    }
		/* ####################################################### */
		if(PlayerToPoint(3.0, p, 1500.1542, -1418.5269, 5.9489))
	    {
			if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
				SetVehiclePos(GetPlayerVehicleID(p), 1500.2291, -1413.3606, 5.9508);
			else if(!IsPlayerInAnyVehicle(p))
				SetPlayerPos(p, 1500.2291, -1413.3606, 5.9508);
	    }
		if(PlayerToPoint(3.0, p, 1500.2291, -1413.3606, 5.9508))
	    {
			if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
				SetVehiclePos(GetPlayerVehicleID(p), 500.1542, -1418.5269, 5.9489);
			else if(!IsPlayerInAnyVehicle(p))
				SetPlayerPos(p, 500.1542, -1418.5269, 5.9489);
	    }
		/* ####################################################### */
		if(PlayerToPoint(3.0, p, 1354.2426, -1355.4567, 5.7429))
	    {
			if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
				SetVehiclePos(GetPlayerVehicleID(p), 1348.7711, -1352.6218, 5.6428);
			else if(!IsPlayerInAnyVehicle(p))
				SetPlayerPos(p, 1348.7711, -1352.6218, 5.6428);
	    }
		if(PlayerToPoint(3.0, p, 1348.7711, -1352.6218, 5.6428))
	    {
			if(GetPlayerState(p) == PLAYER_STATE_DRIVER)
				SetVehiclePos(GetPlayerVehicleID(p), 1354.2426, -1355.4567, 5.7429);
			else if(!IsPlayerInAnyVehicle(p))
				SetPlayerPos(p, 1354.2426, -1355.4567, 5.7429);
	    }
		/* ####################################################### */
	}
}

public Munkavege(playerid, Munka, db)
{
   	if(IsValidPlayerID(playerid))
   	{
		new string2[128];//, MunkaString[32];
//		format(MunkaString, sizeof(MunkaString), "%s", string);
        if(Munka == M_CSERJE)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(MaxTalalas[7]);
				talalt += 3;
				if(talalt == 0)
				    Msg(playerid, "Sajnos nem volt valami jó termés... :S");
				else
				{
				    if(PlayerInfo[playerid][pCserje] + talalt > MAXCSERJE)
				    {
				        new cserje = PlayerInfo[playerid][pCserje];
					    format(string2, sizeof(string2), "Szedtél %ddb jó kokacserjét, de csak %ddb-ot bírsz el, ezért %ddb-ot itthagysz", talalt, MAXCSERJE, ((cserje + talalt) - MAXCSERJE));
					    PlayerInfo[playerid][pCserje] += (MAXCSERJE - cserje);
						if(PlayerInfo[playerid][pCserje] > 50)
						{
							PlayerInfo[playerid][pCserje] = 50;
						}
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Szedtél %ddb jó kokacserjét! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pCserje] + talalt));
					    PlayerInfo[playerid][pCserje] += talalt;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}
   	    else if(Munka == M_MAK)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(MaxTalalas[8]);
				talalt += 3;
				if(talalt == 0)
				    Msg(playerid, "Sajnos nem volt valami jó termés... :S");
				else
				{
				    if(PlayerInfo[playerid][pMak] + talalt > MAXMAK)
				    {
				        new mak = PlayerInfo[playerid][pMak];
					    format(string2, sizeof(string2), "Szedtél %ddb jó Máklevelet, de csak %ddb-ot bírsz el, ezért %ddb-ot itthagysz", talalt, MAXMAK, ((mak + talalt) - MAXMAK));
					    PlayerInfo[playerid][pMak] += (MAXMAK - mak);
						if(PlayerInfo[playerid][pMak] > 50)
						{
							PlayerInfo[playerid][pMak] = 50;
						}
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Szedtél %ddb jó Máklevelet! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pMak] + talalt));
					    PlayerInfo[playerid][pMak] += talalt;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_CANNABIS)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(MaxTalalas[9]);
				talalt += 3;
				if(talalt == 0)
				    Msg(playerid, "Sajnos nem volt valami jó termés... :S");
				else
				{
				    if(PlayerInfo[playerid][pCannabis] + talalt > MAXCANNABIS)
				    {
				        new cannabis = PlayerInfo[playerid][pCannabis];
					    format(string2, sizeof(string2), "Szedtél %ddb jó gubót, de csak %ddb-ot bírsz el, ezért %ddb-ot itthagysz", talalt, MAXCANNABIS, ((cannabis + talalt) - MAXCANNABIS));
					    PlayerInfo[playerid][pCannabis] += (MAXCANNABISMAG - cannabis);
						if(PlayerInfo[playerid][pCannabis] > 50)
						{
							PlayerInfo[playerid][pCannabis] = 50;
						}
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Szedtél %ddb jógubót! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pCannabis] + talalt));
					    PlayerInfo[playerid][pCannabis] += talalt;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}
		else if(Munka == M_CSERJEMAG)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(MaxTalalas[0]);
				if(talalt == 0)
				    Msg(playerid, "Sajnos nem találtál egy jó magot...");
				else
				{
				    if(PlayerInfo[playerid][pCserjeMag] + talalt > MAXCSERJEMAG)
				    {
				        new cserje = PlayerInfo[playerid][pCserjeMag];
					    format(string2, sizeof(string2), "Találtál %ddb jó magot, de csak %ddb-ot bírsz el, ezért %ddb-ot itthagysz", talalt, MAXCSERJEMAG, ((cserje + talalt) - MAXCSERJEMAG));
					    PlayerInfo[playerid][pCserjeMag] += (MAXCSERJEMAG - cserje);
						if(PlayerInfo[playerid][pCserjeMag] > 100)
						{
							PlayerInfo[playerid][pCserjeMag] = 100;
						}
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Találtál %ddb jó magot! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pCserjeMag] + talalt));
					    PlayerInfo[playerid][pCserjeMag] += talalt;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				new talalt2 = random(MaxTalalas[7]);
				if(talalt2 == 0)
				    Msg(playerid, "Sajnos nem volt valami jó termés... :S");
				else
				{
				    if(PlayerInfo[playerid][pCserje] + talalt2 > MAXCSERJE)
				    {
				        new cserje = PlayerInfo[playerid][pCserje];
					    format(string2, sizeof(string2), "Szedtél %ddb jó kokacserjét, de csak %ddb-ot bírsz el, ezért %ddb-ot itthagysz", talalt2, MAXCSERJE, ((cserje + talalt2) - MAXCSERJE));
					    PlayerInfo[playerid][pCserje] += (MAXCSERJE - cserje);
						if(PlayerInfo[playerid][pCserje] > 50)
						{
							PlayerInfo[playerid][pCserje] = 50;
						}
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Szedtél %ddb jó kokacserjét! Összesen %ddb-od van", talalt2, (PlayerInfo[playerid][pCserje] + talalt2));
					    PlayerInfo[playerid][pCserje] += talalt2;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}
   	    else if(Munka == M_MAKMAG)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(MaxTalalas[1]);
				if(talalt == 0)
				    Msg(playerid, "Sajnos nem találtál egy jó magot...");
				else
				{
				    if(PlayerInfo[playerid][pMakMag] + talalt > MAXMAKMAG)
				    {
				        new mak = PlayerInfo[playerid][pMakMag];
					    format(string2, sizeof(string2), "Találtál %ddb jó magot, de csak %ddb-ot bírsz el, ezért %ddb-ot itthagysz", talalt, MAXMAKMAG, ((mak + talalt) - MAXMAKMAG));
					    PlayerInfo[playerid][pMakMag] += (MAXMAKMAG - mak);
						if(PlayerInfo[playerid][pMakMag] > 100)
						{
							PlayerInfo[playerid][pMakMag] = 100;
						}
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Találtál %ddb jó magot! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pMakMag] + talalt));
					    PlayerInfo[playerid][pMakMag] += talalt;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				new talalt2 = random(MaxTalalas[8]);
				if(talalt2 == 0)
				    Msg(playerid, "Sajnos nem volt valami jó termés... :S");
				else
				{
				    if(PlayerInfo[playerid][pMak] + talalt2 > MAXMAK)
				    {
				        new mak = PlayerInfo[playerid][pMak];
					    format(string2, sizeof(string2), "Szedtél %ddb jó Máklevelet, de csak %ddb-ot bírsz el, ezért %ddb-ot itthagysz", talalt2, MAXMAK, ((mak + talalt2) - MAXMAK));
					    PlayerInfo[playerid][pMak] += (MAXMAK - mak);
						if(PlayerInfo[playerid][pMak] > 50)
						{
							PlayerInfo[playerid][pMak] = 50;
						}
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Szedtél %ddb jó Máklevelet! Összesen %ddb-od van", talalt2, (PlayerInfo[playerid][pMak] + talalt2));
					    PlayerInfo[playerid][pMak] += talalt2;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_CANNABISMAG)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(MaxTalalas[2]);
				if(talalt == 0)
				    Msg(playerid, "Sajnos nem találtál egy jó magot...");
				else
				{
				    if(PlayerInfo[playerid][pCannabisMag] + talalt > MAXCANNABISMAG)
				    {
				        new cannabis = PlayerInfo[playerid][pCannabisMag];
					    format(string2, sizeof(string2), "Találtál %ddb jó magot, de csak %ddb-ot bírsz el, ezért %ddb-ot itthagysz", talalt, MAXCANNABISMAG, ((cannabis + talalt) - MAXCANNABISMAG));
					    PlayerInfo[playerid][pCannabisMag] += (MAXCANNABISMAG - cannabis);
						if(PlayerInfo[playerid][pCannabisMag] > 100)
						{
							PlayerInfo[playerid][pCannabisMag] = 100;
						}
			    	}
			    	else
			    	{
						format(string2, sizeof(string2), "Találtál %ddb jó magot! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pCannabisMag] + talalt));
					    PlayerInfo[playerid][pCannabisMag] += talalt;
			    	}
			    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				new talalt2 = random(MaxTalalas[9]);
				if(talalt2 == 0)
					Msg(playerid, "Sajnos nem volt valami jó termés... :S");
				else
				{
					if(PlayerInfo[playerid][pCannabis] + talalt2 > MAXCANNABIS)
					{
						new cannabis = PlayerInfo[playerid][pCannabis];
						format(string2, sizeof(string2), "Szedtél %ddb jó gubót, de csak %ddb-ot bírsz el, ezért %ddb-ot itthagysz", talalt, MAXCANNABIS, ((cannabis + talalt2) - MAXCANNABIS));
						PlayerInfo[playerid][pCannabis] += (MAXCANNABISMAG - cannabis);
						if(PlayerInfo[playerid][pCannabis] > 50)
						{
							PlayerInfo[playerid][pCannabis] = 50;
						}
					}
					else
					{
						format(string2, sizeof(string2), "Szedtél %ddb jógubót! Összesen %ddb-od van", talalt2, (PlayerInfo[playerid][pCannabis] + talalt2));
						PlayerInfo[playerid][pCannabis] += talalt2;
					}
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);
				}
				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}
   	    else if(Munka == M_KOKAIN)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(db * MaxTalalas[3]) + 1;

			    if(PlayerInfo[playerid][pKokain] + talalt > MAXKOKAIN)
			    {
			        new drogja = PlayerInfo[playerid][pKokain];
				    format(string2, sizeof(string2), "Sikeresen készítettél %dg kokaint, de csak %dg-ot bírsz el, ezért %dg-ot itthagysz", talalt, MAXKOKAIN, ((drogja + talalt) - MAXKOKAIN));
				    PlayerInfo[playerid][pKokain] += (MAXKOKAIN - drogja);
					if(PlayerInfo[playerid][pKokain] > 5000)
					{
							PlayerInfo[playerid][pKokain] = 5000;
					}
		    	}
		    	else
		    	{
					format(string2, sizeof(string2), "Sikeresen készítettél %dg kokaint! Összesen %dg-od van", talalt, (PlayerInfo[playerid][pKokain] + talalt));
				    PlayerInfo[playerid][pKokain] += talalt;
		    	}
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);

				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_HEROIN)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(db * MaxTalalas[4]) + 1;

			    if(PlayerInfo[playerid][pHeroin] + talalt > MAXHEROIN)
			    {
			        new drogja = PlayerInfo[playerid][pHeroin];
				    format(string2, sizeof(string2), "Sikeresen készítettél %dg heroin, de csak %dg-ot bírsz el, ezért %dg-ot itthagysz", talalt, MAXHEROIN, ((drogja + talalt) - MAXHEROIN));
				    PlayerInfo[playerid][pHeroin] += (MAXHEROIN - drogja);
					if(PlayerInfo[playerid][pHeroin] > 5000)
					{
							PlayerInfo[playerid][pHeroin] = 5000;
					}
		    	}
		    	else
		    	{
					format(string2, sizeof(string2), "Sikeresen készítettél %dg heroint! Összesen %dg-od van", talalt, (PlayerInfo[playerid][pHeroin] + talalt));
				    PlayerInfo[playerid][pHeroin] += talalt;
		    	}
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);

				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_MARIHUANA)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(db * MaxTalalas[5]) + 1;

			    if(PlayerInfo[playerid][pMarihuana] + talalt > MAXMARIHUANA)
			    {
			        new drogja = PlayerInfo[playerid][pMarihuana];
				    format(string2, sizeof(string2), "Sikeresen készítettél %dg marihuánát, de csak %dg-ot bírsz el, ezért %dg-ot itthagysz", talalt, MAXMARIHUANA, ((drogja + talalt) - MAXMARIHUANA));
				    PlayerInfo[playerid][pMarihuana] += (MAXMARIHUANA - drogja);
					if(PlayerInfo[playerid][pMarihuana] > 5000)
					{
							PlayerInfo[playerid][pMarihuana] = 5000;
					}
		    	}
		    	else
		    	{
					format(string2, sizeof(string2), "Sikeresen készítettél %dg marihuánát! Összesen %dg-od van", talalt, (PlayerInfo[playerid][pMarihuana] + talalt));
				    PlayerInfo[playerid][pMarihuana] += talalt;
		    	}
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);

				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}
   	    else if(Munka == M_MATERIAL)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				new talalt = random(db * MaxTalalas[6]) + 1;

			    if(PlayerInfo[playerid][pMats] + talalt > MAXMATI)
			    {
			        new matija = PlayerInfo[playerid][pMats];
				    format(string2, sizeof(string2), "Sikeresen készítettél %ddb materialt, de csak %d-t bírsz el, ezért %d-t itthagysz", talalt, MAXMATI, ((matija + talalt) - MAXMATI));
				    PlayerInfo[playerid][pMats] += (MAXMATI - matija);
		    	}
		    	else
		    	{
					format(string2, sizeof(string2), "Sikeresen készítettél %ddb materialst! Összesen %ddb-od van", talalt, (PlayerInfo[playerid][pMats] + talalt));
				    PlayerInfo[playerid][pMats] += talalt;
		    	}
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string2);

				TogglePlayerControllable(playerid, true);
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				MunkaFolyamatban[playerid] = 0;
		 	}
	 	}
        else if(Munka == M_KATANA)
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Sikeresen elkészítettél 1 katana kardot!");
			MunkaFolyamatban[playerid] = 0;
			GiveWeapon(playerid, 8, 1);
			TogglePlayerControllable(playerid, true);
			ClearAnimations(playerid);
		}
   	    else if(Munka == M_SEGIT)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				if(ProxDetectorS(5, playerid, db))
				{
					TogglePlayerControllable(playerid, true);
					ClearAnimations(playerid);
					
					Animban[db] = 0;
					Segitik[db] = 0;
					SetPlayerDrunkLevel(db, 0);
					
					if(!NemMozoghat(db))
					{
						TogglePlayerControllable(db, true);
						ClearAnimations(db);
					}
					MunkaFolyamatban[playerid] = 0;
					PlayerInfo[playerid][pKotszer] --;
					SendClientMessage(playerid, COLOR_GREEN, "Sikeresen elláttad a sebeit, és felsegítetted!");
					SendClientMessage(db, COLOR_GREEN, "Ellátták a sebeidet, és felsegítettek!");
					new Float:hp; GetPlayerHealth(db, hp);
					if(hp < 15.0)
						SetHealth(db, 32.0);
					else if(hp < 95.0)
						SetHealth(db, hp+5.0);
				}
				else
				    MunkaFolyamatban[playerid] = 0;
		 	}
	 	}
		else if(Munka == M_SEGIT_DROG)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				if(ProxDetectorS(5, playerid, db))
				{
					TogglePlayerControllable(playerid, true);
					ClearAnimations(playerid);
					
					Animban[db] = 0;
					Segitik[db] = 0;
					SetPlayerDrunkLevel(db, 0);
					
					if(!NemMozoghat(db))
					{
						TogglePlayerControllable(db, true);
						ClearAnimations(db);
					}
					MunkaFolyamatban[playerid] = 0;
					SendClientMessage(playerid, COLOR_GREEN, "Sikeresen elláttad és felsegítetted!");
					SendClientMessage(db, COLOR_GREEN, "Elláttak és felsegítettek!");
					Msg(db, "Jobban lettél de még mindig nem tudsz felálni!");
					SetPlayerDrunkLevel(playerid, 0);
					HeroinRossz[playerid] = 0;
					Freeze(db, 60000);
					ApplyAnimation(db, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
					ApplyAnimation(db, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
					new Float:hp; GetPlayerHealth(db, hp);
					if(hp < 15.0)
						SetHealth(db, 32.0);
					else if(hp < 95.0)
						SetHealth(db, hp+5.0);
				}
				else
				    MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_MSEGIT)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
				if(Animban[playerid] != 0)
				{
					TogglePlayerControllable(playerid, true);
					ClearAnimations(playerid);
					Animban[playerid] = 0;
					SetPlayerDrunkLevel(playerid, 0);
					MunkaFolyamatban[playerid] = 0;
					SendClientMessage(playerid, COLOR_GREEN, "Sikeresen elláttad a sebeidet!");
					Cselekves(playerid, "ellátta a sebeit...");
					new Float:hp; GetPlayerHealth(db, hp);
					if(hp < 15.0)
						SetHealth(db, 22.0);
					else if(hp < 95.0)
						SetHealth(db, hp+5.0);
				}
				else
				    MunkaFolyamatban[playerid] = 0;
		 	}
	 	}

   	    else if(Munka == M_MOTOR)
   	    {
			if(MunkaFolyamatban[playerid] == 1)
		    {
		        if(!IsPlayerInAnyVehicle(playerid))
		        {
		            MunkaFolyamatban[playerid] = 0;
		            return 1;
		        }
				new kocsim = GetPlayerVehicleID(playerid);
				engineOn[GetPlayerVehicleID(playerid)] = 1;
				SetJarmu(kocsim, KOCSI_MOTOR, true);
				MunkaFolyamatban[playerid] = 0;
				//SendClientMessage(playerid, COLOR_GREEN, "Jármû motorja beindítva!");
				GameTextForPlayer(playerid, "Motor ~g~beindítva", VEHICLE_GAMETEXT_TIME, VEHICLE_GAMETEXT_STYLE);
			}
		}
		else if(Munka == M_BELSO)
		{
			if(MunkaFolyamatban[playerid] == 1)
			{
				new haz = HaznalVan(playerid);
				if(PlayerInfo[playerid][pAccount] < BelsoArak[db] || haz == -1)
				{
					MunkaFolyamatban[playerid] = 0;
					return 1;
				}

				new kinek = HouseInfo[haz][hOwner];

				TogglePlayerControllable(playerid, true);
				ClearAnimations(playerid);

				HouseInfo[haz][hBelso] = db;
				//HazUpdate(haz, "Belso='%d'", db);
				HazUpdate(haz, HAZ_Belso);
				PlayerInfo[playerid][pAccount] -= BelsoArak[db];
				Cselekves(playerid, "felújított egy házat");
				FelujitasElfogadas[kinek] = NINCS;
			}
		}

	 	else
	 	    SendFormatMessage(playerid, COLOR_PIROS, "Error... [%d]", Munka);

		MunkaFolyamatban[playerid] = 0;
	}
	return 1;
}

public Fagyasztas(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

public Kiolvasztas(playerid)
{
	TogglePlayerControllable(playerid, 0);
	return 1;
}

public FegyverElvesz(playerid, weaponid)
{
	new Fegyo[12], FegyverTolteny[12] = 0;
	for(new slot = 0; slot < 12; slot++)
	{
		GetPlayerWeaponData(playerid, slot, Fegyo[slot], FegyverTolteny[slot]);
		
		if(Fegyo[slot] == weaponid)
			Fegyo[slot] = 0;
	}

	ResetWeapon(playerid);
	
	for(new slot = 0; slot < 12; slot++)
		if(Fegyo[slot] != 0 && FegyverTolteny[slot] != 0)
		GiveWeapon(playerid, Fegyo[slot], FegyverTolteny[slot]);
		
	Fegyvere[playerid] = 0;
	SetPlayerArmedWeapon(playerid, 0);
	return 1;
}

public ShowDetektivPlayerStats(playerid,targetid)
{
    if(IsValidPlayerID(playerid)&&IsValidPlayerID(targetid))
	{
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "Férfi"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "Nõ"; }
  		new otext[20];
		if(PlayerInfo[targetid][pOrigin] == 1) { otext = "Magyarország"; }
		else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "Európa"; }
		else if(PlayerInfo[targetid][pOrigin] == 3) { otext = "Ázsia"; }
		new ttext[32];


		if(PlayerInfo[targetid][pMember] > 0)
		{
			new szam = PlayerInfo[targetid][pMember] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else if(PlayerInfo[targetid][pLeader] > 0)
		{
			new szam = PlayerInfo[targetid][pLeader] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else
			ttext = "Civil";

		new dtext[20];
		if(STDPlayer[targetid] == 1) { dtext = "Candida"; }
		else if(STDPlayer[targetid] == 2) { dtext = "Aids"; }
		else if(STDPlayer[targetid] == 3) { dtext = "Szifilisz"; }
		else { dtext = "Nincs"; }

		new rtext[32];
		rtext = "-";

		new drank[20];
		if(PlayerInfo[targetid][pDonateRank] == 1) { drank = "Power User"; }
		else if(PlayerInfo[targetid][pDonateRank] >= 2) { drank = "Donater"; }
		else { drank = "None"; }
		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		new age = PlayerInfo[targetid][pAge];
		new ptime = PlayerInfo[targetid][pConnectTime];
		new arrests = PlayerInfo[targetid][pArrested];
		new wanted = WantedLevel[targetid];
		new pnumber = PlayerInfo[targetid][pPnumber];
		new housekey = PlayerInfo[targetid][pPhousekey];
		new housekey2 = PlayerInfo[targetid][pPhousekey2];

		new coordsstring[256];

		new droghatas = PlayerInfo[targetid][pDrogido];
		new BizniszSzam = PlayerInfo[targetid][pPbiskey];

		new meg = floatround((9000 - PlayerInfo[playerid][pContractTime]) / 60);
		new meg2 = floatround((9000 - PlayerInfo[playerid][pContractTime]) / 60);

		new vkocsi[40], vkocsi2[40], bkocsi[40], id;

		if(PlayerInfo[targetid][pPcarkey] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey]][cId];
			format(vkocsi, sizeof(vkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi = "Nincs";
		
		if(PlayerInfo[targetid][pPcarkey2] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey2]][cId];
			format(vkocsi2, sizeof(vkocsi2), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi2 = "Nincs";

		if(BereltKocsi[targetid] != NINCS)
		{
			id = BereltKocsi[targetid];
			format(bkocsi, sizeof(bkocsi), "%s(%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			bkocsi = "Nincs";

		new fizu = PlayerInfo[targetid][pPayCheck];
		new bcash = PlayerInfo[targetid][pAccount];
		
		if(PlayerInfo[playerid][pDetSkill] < 50 && !IsHitman(playerid)) return Msg(playerid, "A detektív skilled túl alacsony(Minimum 2).");
		SendClientMessage(playerid, COLOR_GREEN, "================================[ Adatok ]================================");
		if(PlayerInfo[playerid][pDetSkill] >= 50 || IsHitman(playerid))
		{
			format(coordsstring, sizeof(coordsstring), "*** Név: %s ***", PlayerName(targetid));
			Msg(playerid,coordsstring);

			format(coordsstring, sizeof(coordsstring), "Nem: %s | Életkor: %d | Bõrszín: %s | Bank: $%d | Telefonszám: %d", atext,age,otext, bcash, pnumber);
			Msg(playerid,coordsstring);
		}	
		if(PlayerInfo[playerid][pDetSkill] >= 100 || IsHitman(playerid))
		{
			format(coordsstring, sizeof(coordsstring), "Ház: %d/%d | Biznisz: %d | Házastárs: %s | Játszott órák: %d | FõMunka: %s(%dp) | Másodmunka: %s(%dp)", housekey, housekey2, BizniszSzam ,married, ptime, Munkanevek[PlayerInfo[targetid][pJob1]][0], meg, Munkanevek[PlayerInfo[targetid][pJob2]][0], meg2);
			Msg(playerid,coordsstring);
		}
		if(PlayerInfo[playerid][pDetSkill] >= 200 || IsHitman(playerid))
		{
			format(coordsstring, sizeof(coordsstring), "Letartóztatások: %d | Üldözési szint: %d | Szervezet: %s | Rang: %s | Betegség: %s | Droghatás: %dmp", arrests,wanted,ttext,rtext,dtext,droghatas);
			SendClientMessage(playerid, COLOR_GRAD3,coordsstring);
		}	
		if(PlayerInfo[playerid][pDetSkill] >= 400 || IsHitman(playerid))
		{
			format(coordsstring, sizeof(coordsstring), "Saját autók: %s/%s | Bérkocsi: %s | Fizetés: $%d | Bankszámlaszám: %d", vkocsi, vkocsi2, bkocsi, fizu, PlayerInfo[targetid][pBankSzamlaSzam]);
			SendClientMessage(playerid, COLOR_GRAD4,coordsstring);
		}	
	}
	return 1;
}
public ShowStats(playerid, targetid)
{
    if(IsValidPlayerID(playerid) && IsValidPlayerID(targetid))
	{
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "Férfi"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "Nõ"; }
		
  		new otext[20];
		if(PlayerInfo[targetid][pOrigin] == 1) { otext = "Magyarország"; }
		else if(PlayerInfo[targetid][pOrigin] == 2) { otext = "Európa"; }
		else if(PlayerInfo[targetid][pOrigin] == 3) { otext = "Ázsia"; }
		else otext = "Ismeretlen";
		
		new ttext[32];
		if(PlayerInfo[targetid][pMember] > 0)
		{
			new szam = PlayerInfo[targetid][pMember] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else if(PlayerInfo[targetid][pLeader] > 0)
		{
			new szam = PlayerInfo[targetid][pLeader] - 1;
			ttext = Szervezetneve[szam][0];
		}
		else
			ttext = "Civil";

		new dtext[20];
		if(STDPlayer[targetid] == 1) { dtext = "Candida"; }
		else if(STDPlayer[targetid] == 2) { dtext = "Aids"; }
		else if(STDPlayer[targetid] == 3) { dtext = "Szifilisz"; }
		else { dtext = "Nincs"; }

		new rtext[32];
		if(PlayerInfo[targetid][pMember] >= 1 || PlayerInfo[targetid][pLeader] >= 1)//PD Ranks
		{
			Format(rtext, "%s", GetPlayerRangNev(targetid));
		}
		else
		{
		    rtext = "-";
		}
        
		new drank[20];
		if(PlayerInfo[targetid][pDonateRank] == 1) { drank = "Power User"; }
		else if(PlayerInfo[targetid][pDonateRank] >= 2) { drank = "Donater"; }
		else { drank = "None"; }
		
		new housekey[40], housekey2[40], hid;

		if(PlayerInfo[targetid][pPhousekey] != NINCS)
		{
			hid = PlayerInfo[targetid][pPhousekey];
			
			format(housekey, sizeof(housekey), "%d", hid);
		}
		else
			housekey = "Nincs";
		
		if(PlayerInfo[targetid][pPhousekey2] != NINCS)
		{
			hid = PlayerInfo[targetid][pPhousekey2];
			
			format(housekey2, sizeof(housekey2), "%d", hid);
		}
		else
			housekey2 = "Nincs";

		//new BizniszSzam = PlayerInfo[targetid][pPbiskey];
		new bizkey[40], bid;

		if(PlayerInfo[targetid][pPbiskey] != NINCS)
		{
			bid = PlayerInfo[targetid][pPbiskey];
			
			format(bizkey, sizeof(bizkey), "%d", bid);
		}
		else
			bizkey = "Nincs";
			
		new HotelSzoba[12];
		if(PlayerInfo[targetid][pHotelSzoba] != NINCS)
		{
			bid = PlayerInfo[targetid][pHotelSzoba];
			
			format(HotelSzoba, sizeof(HotelSzoba), "%d", bid);
		}
		else
			HotelSzoba = "Nincs";

		new vkocsi[40], vkocsi2[40], bkocsi[40], id;

		if(PlayerInfo[targetid][pPcarkey] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey]][cId];
			format(vkocsi, sizeof(vkocsi), "%s (%d)", GetVehicleModelName(GetVehicleModel(id)-400), id);
		}
		else
			vkocsi = "Nincs";
		
		if(PlayerInfo[targetid][pPcarkey2] != NINCS)
		{
			id = CarInfo[PlayerInfo[targetid][pPcarkey2]][cId];
			
			format(vkocsi2, sizeof(vkocsi2), "%s (%d)", GetVehicleModelName(GetVehicleModel(id) - 400), id);
		}
		else
			vkocsi2 = "Nincs";

		if(BereltKocsi[targetid] != NINCS)
		{
			id = BereltKocsi[targetid];
			format(bkocsi, sizeof(bkocsi), "%s (%d)", GetVehicleModelName(GetVehicleModel(id) - 400), id);
		}
		else
			bkocsi = "Nincs";

		new fizu = PlayerInfo[targetid][pPayCheck];
		
		if(PlayerInfo[targetid][pMember] > 0) fizu += FrakcioInfo[PlayerInfo[targetid][pMember]][fFizetes][PlayerInfo[targetid][pRank]];
		
		new bcash = PlayerInfo[targetid][pAccount];
		
		new Float:armour, Float:health;
		GetPlayerArmour(targetid, armour);
		GetPlayerHealth(targetid, health);
		/* ###################################################################### */
		new 
			valaszto[128],
			color[8] = "e2ffff"
		;
		SCM(playerid, COLOR_WHITE, " ");
		Format(valaszto, "|____________________[%s - %s - %s]____________________|", PlayerName(targetid), OFFICIALWEB, TeljesDatum());		
		SendClientMessage(playerid, COLOR_GREEN, valaszto);
		
		SendFormatMessage(playerid, COLOR_WHITE, "{%s}| Karakter | Frakció: [%s] Rang: [%s] Tel.: [%d]", color, ttext, rtext, PlayerInfo[targetid][pPnumber]);
		SendFormatMessage(playerid, COLOR_WHITE, "{%s}| Szint | Játékosszint: [%d] Támogatói szint: [%d]", color, PlayerInfo[targetid][pLevel], 0);
		SendFormatMessage(playerid, COLOR_WHITE, "{%s}| Skill | Élet: [%.1f/%.1f] Páncél: [%.1f/%.1f]", color, MAXHP, health, MAXARMOUR, armour);
		SendFormatMessage(playerid, COLOR_WHITE, "{%s}| Pénz | Kézpénz: [$%s] Bank: [$%s] Fizetési csekk: [$%s]", color, PenzTordeles(GetMoney(targetid)), PenzTordeles(bcash), PenzTordeles(fizu));
		SendFormatMessage(playerid, COLOR_WHITE, "{%s}| Ingó | 1. jármû: [%s] 2. jármû [%s]", color, vkocsi, vkocsi2);
		SendFormatMessage(playerid, COLOR_WHITE, "{%s}| Ingatlan | 1. ház: [%s] 2. ház [%s] hotelszoba: [%s]", color, housekey, housekey2, HotelSzoba);
		SendFormatMessage(playerid, COLOR_WHITE, "{%s}| Egyéb | uID: [%d]", color, PlayerSQLID(targetid));
		
		SendClientMessage(playerid, COLOR_GREEN, valaszto);
		SCM(playerid, COLOR_WHITE, " ");
		/* ###################################################################### */
	}
	return 1;
}
public ShowZseb(playerid, targetid)
{
    if(IsValidPlayerID(playerid)&&IsValidPlayerID(targetid))
	{
		new lotto = PlayerInfo[targetid][pLottoNr];

		new coordsstring[512];

		new cash = GetMoney(targetid);
		new mats = PlayerInfo[targetid][pMats];
		new kokain = PlayerInfo[targetid][pKokain];
		new heroin = PlayerInfo[targetid][pHeroin];
		new marihuana = PlayerInfo[targetid][pMarihuana];

		new muanyag = PlayerInfo[targetid][pMuanyag];
		new cserje = PlayerInfo[targetid][pCserje];
		new mak = PlayerInfo[targetid][pMak];
		new cannabis = PlayerInfo[targetid][pCannabis];
		
		new cserjemag = PlayerInfo[targetid][pCserjeMag];
		new makmag = PlayerInfo[targetid][pMakMag];
		new cannabismag = PlayerInfo[targetid][pCannabisMag];
		
		new fem = PlayerInfo[playerid][pFem];
		new kotszer = PlayerInfo[targetid][pKotszer];
		new cigi = PlayerInfo[targetid][pCigi];
		new kaja = PlayerInfo[targetid][pKaja];
		new uveg = UresUveg[playerid];
		new orvossag = PlayerInfo[targetid][pOrvossag];
		new fegyverek[96], fegyverek2[96], fegyok, fegyo, ammo, ammo2[8];
		for(new x = 0; x < 13; x++)
		{
			GetPlayerWeaponData(targetid, x, fegyo, ammo);
			if(x == 0 && fegyo != 1) continue;
				
			if(ammo > 0) Format(ammo2, "[%d]", ammo);
			else ammo2[0] = EOS;
				
			if(ammo != 0)
			{
				fegyok++;
				if(fegyok < 6)
					if(fegyok == 1)
						Format(fegyverek, "(%d)%s%s", fegyo, aWeaponNames[fegyo], ammo2);
					else
						Format(fegyverek, "%s, (%d)%s%s", fegyverek, fegyo, aWeaponNames[fegyo], ammo2);
				else
					if(fegyok == 6)
						Format(fegyverek2, "Fegyverek: (%d)%s%s", fegyo, aWeaponNames[fegyo], ammo2);
					else
						Format(fegyverek2, "%s, (%d)%s%s", fegyverek2, fegyo, aWeaponNames[fegyo], ammo2);
			}
			//SendFormatMessage(playerid, COLOR_WHITE, "Slot: %d Fegyó: %d Töltény: %d", x, fegyo, ammo);
		}
			
		if(fegyok < 1)
			fegyverek = "Nincs fegyvered";
			
		SendClientMessage(playerid, COLOR_GREEN, "{00FF00}==============================[ {FFFFFF}Tárgyak a Zsebedben {00FF00}]==============================");

		Format(coordsstring, "{FFFFFF}Pénztárca: {48B8E8}$%s {FFFFFF}| Lottószelvény: {48B8E8}%d", PenzTordeles(cash), lotto);
		Msg(playerid, coordsstring);
			
		Format(coordsstring, "{FFFFFF}Üveg: {48B8E8}%d/%d | Mûanyag: {48B8E8}%d/%d |  Fém: {48B8E8}%d/%d",MAXUVEG, uveg, MAXMUANYAG, muanyag, MAXFEM, fem);
		Msg(playerid, coordsstring);
			
		Format(coordsstring, "{FFFFFF}Kokacserje: {48B8E8}%d/%d {FFFFFF}| Mák: {48B8E8}%d/%d {48B8E8}| Cannabis: {48B8E8}%d/%d",MAXCSERJE, cserje, MAXMAK, mak, MAXCANNABIS, cannabis);
  		Msg(playerid, coordsstring);

		Format(coordsstring, "{FFFFFF}Kokacserje Mag: {00FF00}%d/%d {FFFFFF}| Mák Mag: {00FF00}%d/%d {FFFFFF}| Cannabis Mag: {00FF00}%d/%d",MAXCSERJEMAG, cserjemag, MAXMAKMAG, makmag, MAXCANNABISMAG, cannabismag);
        Msg(playerid, coordsstring);

		Format(coordsstring, "{FFFFFF}Kokain: {00FF00}%d/%d {FFFFFF}| Heroin: {00FF00}%d/%d {FFFFFF}| Marihuana: {00FF00}%d/%d {FFFFFF}| Material: {00FF00}%d/%d", MAXKOKAIN, kokain, MAXHEROIN, heroin, MAXMARIHUANA, marihuana, MAXMATI, mats);
		Msg(playerid, coordsstring);

		Format(coordsstring, "{FFFFFF}Kötszer: {00FF00}%ddb {FFFFFF}| Cigi: {00FF00}%ddb {FFFFFF}| Kaja: {00FF00}%d/%d",kotszer, cigi, MAXKAJA, kaja);
		Msg(playerid, coordsstring);
		
		Format(coordsstring, "{FFFFFF}Orvosság: {00FF00}%d/%d", MAXORVOSSAG, orvossag);
		Msg(playerid, coordsstring);
			
		Format(coordsstring, "{FFFFFF}Fegyverek: %s", fegyverek);
		SendClientMessage(playerid, COLOR_GRAD3, coordsstring);
			
		if(fegyok >= 6)
			SendClientMessage(playerid, COLOR_GRAD4, fegyverek2);
			
	}
}
//---------------------------------------------------------
public SetPlayerToTeamColor(playerid)
{
	if(IsValidPlayerID(playerid))
	{
		SetPlayerColor(playerid, COLOR_INVISIBLE);
	}
}
public LoadBoxer()
{
	new arrCoords[3][64];
	new strFromFile2[256];
	new File: file = fopen("Config/boxer.ini", io_read);
	if(!file) return false;
	if(file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Titel[TitelWins] = strval(arrCoords[0]);
		strmid(Titel[TitelName], arrCoords[1], 0, strlen(arrCoords[1]), 255);
		Titel[TitelLoses] = strval(arrCoords[2]);
		fclose(file);
	}
	return 1;
}
public VehicleHasDriver(vehicleid)
{
	for(new i=0;i<=MAX_PLAYERS;i++)
 	{
     	if(IsPlayerInAnyVehicle(i))
      	{
       		if(GetPlayerVehicleID(i)==vehicleid)
       		{
         		if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
               	{
                	return 1;
       			}
       		}
       	}
	}
 	return 0;
}

public SaveBoxer()
{
	new coordsstring[256];
	format(coordsstring, sizeof(coordsstring), "%d,%s,%d", Titel[TitelWins],Titel[TitelName],Titel[TitelLoses]);
	new File: file2 = fopen("Config/boxer.ini", io_write);
	if(!file2) return false;
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public LoadInts()
{
	new arrCoords[5][64];
	new strFromFile2[256];
	new File: file = fopen("Config/interiors.cfg", io_read);
	if(!file) return false;
	new ennyi = IntekSzama();
	if(file)
	{
		new idx = ALAPINTERIORSZAM;
		printf("\n==============Interiorok betoltese folyamatban==============\n");
		while (idx <= ennyi)
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			//IntInfo[idx][iType] = strval(arrCoords[0]);
			strmid(IntInfo[idx][iType], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			IntInfo[idx][iNumber] = strval(arrCoords[1]);
			IntInfo[idx][iExitX] = floatstr(arrCoords[2]);
			IntInfo[idx][iExitY] = floatstr(arrCoords[3]);
			IntInfo[idx][iExitZ] = floatstr(arrCoords[4]);
			DebugMessage("Interior %d betöltve!", idx);
			idx++;
		}
		printf("\n==============Interiorok betoltve==============\n");
		fclose(file);
	}
	return 1;
}

fuggveny MySQL_Karbantartas() // By. Ricardo
{
	new valaszto[124] = ""
	print(valaszto);
	printf("MYSQL KARBANTARTÁS KEZDETE");
	/*======================================================================================================================*/
	new 
		time = gettime(),
		inaktiv = time - 2629743, // 1 hónap
		//parancs[256],
		toroltcuccok = 0
	;
	/*======================================================================================================================*/
	/*printf("\nInaktív játékosok törlése folyamatban...");
	Format(parancs, "DELETE FROM `%s`.`playerek` WHERE `playerek`.`UtoljaraAktiv` < %s && `Admin` < %d", DATABASENAME, inaktiv, FOADMIN);
	mysql_query(parancs);
	printf("Törölt játékosok száma: %d", mysql_affected_rows());
	printf("Inaktív játékosok törölve.");*/
	/*======================================================================================================================*/
	printf("\nInaktív házak törlése folyamatban...");
	
	for(new h = 0; h < MAXHAZ; h++)
	{
		if(HouseInfo[h][Van] == 1)
		{
			if((time-HouseInfo[h][hDate] <= inaktiv) AND (HouseInfo[h][hDate] != 0))
			{
				/*#if defined KELLHAZPICKUP
					DestroyDynamicPickup(HazPickup[h]);
					HazPickup[h] = NINCS;
				#endif
				
				HouseInfo[h][Van] = 0;
				
				Format(parancs, "DELETE FROM %s WHERE ID='%d'", SQL_DB_Hazak, h);
				mysql_query(parancs);
				
				#if defined KELLBUTORRENDSZER
					Format(parancs, "DELETE FROM %s WHERE Haz='%d'", SQL_DB_Butorok, h);
					mysql_query(parancs);
				#endif*/
				
				toroltcuccok ++;
			}
		}
	}
	printf("Törölt házak száma: %d", toroltcuccok);
	printf("Inaktiv házak törölve.");
	/*======================================================================================================================*/
	/*printf("\nInaktív jármûvek törlése folyamatban...");
	Format(parancs, "DELETE FROM `%s`.`kocsik` WHERE `kocsik`.`UtolsoBelepes` < %s", DATABASENAME, inaktiv);
	mysql_query(parancs);
	printf("Törölt jármûvek száma: %d", mysql_affected_rows());
	printf("Inaktív jármûvek törölve.");*/
	/*======================================================================================================================*/
	printf("\nMYSQL KARBANTARTÁS BEFEJEZVE");	
	print(valaszto);
	return 1;
}

fuggveny UresHazKereses()
{
	new haz = -1;
	for(new t = 0; t < sizeof(HouseInfo); t++)
	{
	    if(HouseInfo[t][Van] == 0)
		{
			haz = t;
			break;
		}
	}
    return haz;
}

fuggveny UresHotelKereses()
{
	new hotel = -1;
	for(new t = 0; t < sizeof(HotelInfo); t++)
	{
	    if(HotelInfo[t][Van] == 0)
		{
			hotel = t;
			break;
		}
	}
    return hotel;
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,   Float:ObjX, Float:ObjY, Float:ObjZ,   Float:FrX, Float:FrY, Float:FrZ) {

	new Float:TGTDistance;
	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));
	new Float:tmpX, Float:tmpY, Float:tmpZ;
	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;
	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}
stock IsPlayerAiming(playerid, aimid)
{
	new Float:X1, Float:Y1, Float:Z1, Float:X2, Float:Y2, Float:Z2;
	GetPlayerPos(playerid, X1, Y1, Z1);
	GetPlayerPos(aimid, X2, Y2, Z2);
	new Float:Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	if(Distance < 100)
	{
		new Float:A;
		GetPlayerFacingAngle(playerid, A);
		X1 += (Distance * floatsin(-A, degrees));
		Y1 += (Distance * floatcos(-A, degrees));
		Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
		if(Distance < 1.3)
		{
			return 1/>true;
		}
	}
	return 1/>false;
}

public IntekSzama()
{
	return NumLines("Config/interiors.cfg");
}

stock LoadMaterialText()
{
	new Object;
	
	/*Object = CreateObject(19329, 1351.68494, -1759.58044, 15.44720,   0.00000, 0.00000, 0.00000);
	SetObjectMaterialText(Object, "{FF0000}CBA", 0, OBJECT_MATERIAL_SIZE_256x128, \
	"Arial", 120, 1, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);*/
	
	Object = CreateObject(19329, 1555.85242, -1675.66943, 18.61390,   0.00000, 0.00000, 90.00000);
	SetObjectMaterialText(Object, "{FFFFFF}LSPD", 0, OBJECT_MATERIAL_SIZE_256x128, \
	"Arial", 75, 1, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	
	/*Object = CreateObject(19372, 1951.68420, -1982.38208, 16.74950,   0.00000, 0.00000, 0.00000);
	SetObjectMaterialText(Object, "{000000}Munkaügyi\nKözpont", 0, OBJECT_MATERIAL_SIZE_256x256, \
	"Arial", 40, 1, 0xFFFF8200, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);*/

	return 1;
}

stock LoadModelSelections()
{
	pickuplista = LoadModelSelectionMenu("mSelection/osszes_pickup.txt");	
	jarmuberleslista = LoadModelSelectionMenu("mSelection/jarmuberleslista.txt");	
	//fegyolista = LoadModelSelectionMenu("mSelection/fegyverek.txt");
	
	//skinlista = LoadModelSelectionMenu("mSelection/osszes_skin.txt");
	ruhaboltskinlista = LoadModelSelectionMenu("mSelection/ruhabolt_skins.txt");
	
	autokereskedes_motorkerekpar = LoadModelSelectionMenu("mSelection/autokereskedes/autokereskedes_motor.txt");
	autokereskedes_ipari = LoadModelSelectionMenu("mSelection/autokereskedes/autokereskedes_ipari.txt");
	autokereskedes_lowrider = LoadModelSelectionMenu("mSelection/autokereskedes/autokereskedes_lowrider.txt");
	autokereskedes_terepjaro = LoadModelSelectionMenu("mSelection/autokereskedes/autokereskedes_terepjaro.txt");
	autokereskedes_furgon = LoadModelSelectionMenu("mSelection/autokereskedes/autokereskedes_furgon.txt");
	autokereskedes_sedan = LoadModelSelectionMenu("mSelection/autokereskedes/autokereskedes_sedan.txt");
	autokereskedes_kombi = LoadModelSelectionMenu("mSelection/autokereskedes/autokereskedes_kombi.txt");
	autokereskedes_sport = LoadModelSelectionMenu("mSelection/autokereskedes/autokereskedes_sport.txt");
	
	osszesjarmulista = LoadModelSelectionMenu("mSelection/osszes_jarmu.txt");
	return 1;
}

public LoadCar()
{
	new idx = 0, KocsiLoaded = 0;
	printf("\nV-s Kocsik Betöltse Folyamatban...");
	while (idx < sizeof(CarInfo))
	{
		new where[32], query[128], mezoadatok[256], mezo[31][MAX_PLAYER_NAME];
		Format(where, "id='%d'", idx);

		if(Mysql_Num(SQL_DB_Kocsik, where) == 1)
			CarInfo[idx][Van] = 1;
		else
			CarInfo[idx][Van] = 0;

		if(CarInfo[idx][Van] == 1)
		{
			Format(query, "SELECT * FROM %s WHERE %s", SQL_DB_Kocsik, where);
			mysql_query(query);

			mysql_store_result();
			mysql_fetch_row(mezoadatok, "|");
			mysql_free_result();

			split(mezoadatok, mezo, '|');

			CarInfo[idx][cOwned] = strval(mezo[1]);
			CarInfo[idx][cOwner] = mezo[2];
			CarInfo[idx][cModel] = strval(mezo[3]);
			CarInfo[idx][cValue] = strval(mezo[4]);
			CarInfo[idx][cLocationx] = floatstr(mezo[5]);
			CarInfo[idx][cLocationy] = floatstr(mezo[6]);
			CarInfo[idx][cLocationz] = floatstr(mezo[7]);
			CarInfo[idx][cAngle] = floatstr(mezo[8]);
			CarInfo[idx][cColorOne] = strval(mezo[9]);
			CarInfo[idx][cColorTwo] = strval(mezo[10]);
			CarInfo[idx][cLock] = strval(mezo[11]);
			CarInfo[idx][cDate] = strval(mezo[12]);
			//CarInfo[idx][cTuning] = strval(mezo[13]);
			new Tuning[14][MAX_PLAYER_NAME];
			split(mezo[13],Tuning,',');
			for(new i=0; i < 14; i++)
			{
			    CarInfo[idx][cMod][i] = strval(Tuning[i]);
			}
			CarInfo[idx][cKerek] = strval(mezo[14]);
			CarInfo[idx][cMatrica] = strval(mezo[15]);
			CarInfo[idx][cNeon] = strval(mezo[16]);
			#if defined FRAKCIOKOCSIK
				CarInfo[idx][cFrakcio] = strval(mezo[17]);
			#endif
			CarInfo[idx][cBRendszer] = strval(mezo[18]);
			CarInfo[idx][cBRendszerKod] = strval(mezo[19]);
			CarInfo[idx][cBRendszerAktiv] = strval(mezo[20]);
			
			new dimenziok[2][5];
			split(mezo[21],dimenziok,',');
			CarInfo[idx][cDimenzio][0] = strval(dimenziok[0]);
			CarInfo[idx][cDimenzio][1] = strval(dimenziok[1]);
			
			CarInfo[idx][cPotKerek] = strval(mezo[22]);

			CarInfo[idx][cMegtettKM] = strval(mezo[23]);
			
			CarInfo[idx][cHidraulika] = strval(mezo[24]);
			CarInfo[idx][cMinRang] = strval(mezo[25]);
			
			new Muszaki[1][MAX_PLAYER_NAME];
			split(mezo[26],Muszaki,',');
			CarInfo[idx][cMuszakiIdo] = strval(Muszaki[0]);
			
			new Allapot[ALLAPOTOK][MAX_PLAYER_NAME];
			split(mezo[27],Allapot,',');
			for(new i=0; i < ALLAPOTOK; i++) {
			    CarInfo[idx][cAllapot][i] = strval(Allapot[i]);
			}
			CarInfo[idx][cEMP] = strval(mezo[28]);
			
			new registr[2][24];
			split(mezo[29],registr,',');
			CarInfo[idx][cRegisztralva] = strval(registr[1]);
			//if(CarInfo[idx][cRegisztralva] != 0)
			//	strmid(CarInfo[idx][cRendszam], registr[0], 0, strlen(registr[0]), 12);
			//else
			strmid(CarInfo[idx][cRendszam], registr[0], 0, strlen(registr[0]), 12);
				
			//printf("Regisztralt? %d / Rendszam %s / mezoertek %s", CarInfo[idx][cRegisztralva], CarInfo[idx][cRendszam], mezo[29]);
				
			if(CarInfo[idx][cDate] < 500)
			{
				CarInfo[idx][cDate] = gettime();
				//CarUpdate(idx, "UtolsoBelepes='%d'", gettime());
				CarUpdate(idx, CAR_Date);
			}
		}
		if(CarInfo[idx][Van] == 1)
		{
		    if(CarInfo[idx][cFrakcio] != 0 && CarInfo[idx][cOwned] != 0)
		    {
		        FrakcioInfo[CarInfo[idx][cFrakcio]][fJarmuvekSzama]++;
		    }
			
			if(CarInfo[idx][cFrakcio] == LMUNKA_LSPD)
				CarInfo[idx][cId] = UjKocsi(CarInfo[idx][cModel], CarInfo[idx][cLocationx], CarInfo[idx][cLocationy], CarInfo[idx][cLocationz], CarInfo[idx][cAngle], CarInfo[idx][cColorOne], CarInfo[idx][cColorTwo], true);
			else
				CarInfo[idx][cId] = UjKocsi(CarInfo[idx][cModel], CarInfo[idx][cLocationx], CarInfo[idx][cLocationy], CarInfo[idx][cLocationz], CarInfo[idx][cAngle], CarInfo[idx][cColorOne], CarInfo[idx][cColorTwo]);
			
			SetVehicleVW(CarInfo[idx][cId],CarInfo[idx][cDimenzio][0]);
			SetVehicleInterior(CarInfo[idx][cId],CarInfo[idx][cDimenzio][1]);
			
			if(strlen(CarInfo[idx][cRendszam]) < 7 || strlen(CarInfo[idx][cRendszam]) > 12 || CarInfo[idx][cRegisztralva] != 1)
			{
		        SetVehicleNumberPlate(CarInfo[idx][cId], "");
			}
			else
			{
			    SetVehicleNumberPlate(CarInfo[idx][cId], CarInfo[idx][cRendszam]);
			}
			
			gCarLock[CarInfo[idx][cId]] = CarInfo[idx][cLock];
			//ChangeVehiclePaintjob(CarInfo[idx][cId], CarInfo[idx][cMatrica]);
			if(CarInfo[idx][cMatrica] > 0)
			{
				ChangeVehiclePaintjob(CarInfo[idx][cId], CarInfo[idx][cMatrica]-1);
			}			
			if(CarInfo[idx][cKerek] > 0)
			{
				AddVehicleComponent(CarInfo[idx][cId], CarInfo[idx][cKerek]);
			}
			if(CarInfo[idx][cHidraulika] == 1)
			{
				AddVehicleComponent(CarInfo[idx][cId], 1087);
			}
			
			/*if(CarInfo[idx][cFrakcio] == 0)
			{
				SetVehicleVirtualWorld(CarInfo[idx][cId], JARMU_AFK_VW);
			}*/
			KocsiLoaded ++;
		}
		else
		    CarInfo[idx][cId] = NINCS;

		idx++;
	}
	printf("Jármûvek Betöltve! Betöltött Jármûvek száma: %d", KocsiLoaded);
	return 1;
}

public OnPlayerKeypadInput(playerid, keypadID, type, key)
{
	if(type == KEYPAD_INPUT_GOOD)
	    GameTextForPlayer(playerid, "~G~Hozzáférés megadva!", 3000, 3);
	else if(type == KEYPAD_INPUT_BAD)
	    GameTextForPlayer(playerid, "~R~Hozzáférés megtagadva!", 3000, 3);
	    
	if(type == KEYPAD_INPUT_GOOD)
	{
	    if(keypadID >= 0 && keypadID <= MAX_KAPU)
	    {
	        MoveDynamicObject(KapuInfo[keypadID][kObject], KapuInfo[keypadID][kNyitottPos][0],KapuInfo[keypadID][kNyitottPos][1],KapuInfo[keypadID][kNyitottPos][2], 2.0);
			if(KapuInfo[keypadID][kAutomata] > 0)
				SetTimerEx("KapuBecsuk", KapuInfo[keypadID][kAutomata]*1000, false, "i", keypadID);
			PlayerForeach(i)
			{
				PlayerPlaySound(i, 1100, KapuInfo[keypadID][kPos][0], KapuInfo[keypadID][kPos][1], KapuInfo[keypadID][kPos][2]);
			}
			return true;
	    }
	}
	return true;
}

fuggveny LoadKapu()
{
	new idx = 0, KapuLoaded = 0;
	PrintValaszto("Kapuk betöltése folyamatban");
	while (idx < sizeof(KapuInfo))
	{
		new where[32], query[128], mezoadatok[256], mezo[25][MAX_PLAYER_NAME];
		Format(where, "Id='%d'", idx);

		if(Mysql_Num(SQL_DB_Kapuk, where) == 1)
			KapuInfo[idx][Van] = 1;
		else
			KapuInfo[idx][Van] = 0;

		if(KapuInfo[idx][Van] == 1)
		{
			Format(query, "SELECT * FROM %s WHERE %s", SQL_DB_Kapuk, where);
			mysql_query(query);

			mysql_store_result();
			mysql_fetch_row(mezoadatok, "|");
			mysql_free_result();

			split(mezoadatok, mezo, '|');

			KapuInfo[idx][kObjectID] = strval(mezo[1]);
			KapuInfo[idx][kPos][0] = floatstr(mezo[2]);
			KapuInfo[idx][kPos][1] = floatstr(mezo[3]);
			KapuInfo[idx][kPos][2] = floatstr(mezo[4]);
			
			KapuInfo[idx][kAngle][0] = floatstr(mezo[5]);
			KapuInfo[idx][kAngle][1] = floatstr(mezo[6]);
			KapuInfo[idx][kAngle][2] = floatstr(mezo[7]);
			KapuInfo[idx][kFrakcio] = strval(mezo[8]);
			KapuInfo[idx][kTulaj] = mezo[9];
			strmid(KapuInfo[idx][kJelszo], mezo[10], 0, strlen(mezo[10]), 32);
			KapuInfo[idx][kNyitottPos][0] = floatstr(mezo[11]);
			KapuInfo[idx][kNyitottPos][1] = floatstr(mezo[12]);
			KapuInfo[idx][kNyitottPos][2] = floatstr(mezo[13]);
			
			KapuInfo[idx][kNyitottAngle][0] = floatstr(mezo[14]);
			KapuInfo[idx][kNyitottAngle][1] = floatstr(mezo[15]);
			KapuInfo[idx][kNyitottAngle][2] = floatstr(mezo[16]);
			KapuInfo[idx][kAutomata] = strval(mezo[17]);
		}
		if(KapuInfo[idx][Van] == 1)
		{
		    KapuInfo[idx][kObject] = CreateDynamicObject(KapuInfo[idx][kObjectID],KapuInfo[idx][kPos][0],KapuInfo[idx][kPos][1],KapuInfo[idx][kPos][2],KapuInfo[idx][kAngle][0],KapuInfo[idx][kAngle][1],KapuInfo[idx][kAngle][2]);
			KapuLoaded ++;
		}

		idx++;
	}
	printf("Betöltött Kapuk száma: %d", KapuLoaded);
	PrintValaszto("Kapuk betöltve");
	return 1;
}

fuggveny LoadDrog()
{
	new File: DrogFile = fopen("Config/drogobjectek.cfg", io_read);
	if(!DrogFile) return false;
	for(new i = 0; i < sizeof(DrogInfo); i++)
	{
		new string[256], adatok[7][256];
		fread(DrogFile, string);
		split(string, adatok, ',');
		
		DrogObject[i] = CreateDynamicObject(strval(adatok[0]), floatstr(adatok[2]), floatstr(adatok[3]), floatstr(adatok[4]) - 1, 0.0, 0.0, 0.0, strval(adatok[5]), strval(adatok[6]));
		DrogInfo[i][DrogEldobObject] = strval(adatok[0]);
		DrogInfo[i][DrogEldobDarab] = strval(adatok[1]);
		DrogInfo[i][DrogEldobPosX] = floatstr(adatok[2]);
		DrogInfo[i][DrogEldobPosY] = floatstr(adatok[3]);
		DrogInfo[i][DrogEldobPosZ] = floatstr(adatok[4]);
		DrogInfo[i][DrogEldobVWorld] = strval(adatok[5]);
		DrogInfo[i][DrogEldobInterior] = strval(adatok[6]);
	}
	fclose(DrogFile);
	return 1;
}
fuggveny SaveDrog()
{
	new File: DrogFile = fopen("Config/drogobjectek.cfg", io_write);
	for(new i = 0; i < sizeof(DrogInfo); i++)
	{
		if(DrogInfo[i][DrogEldobPosX] != 0.0 && DrogInfo[i][DrogEldobPosY] != 0.0 && DrogInfo[i][DrogEldobPosZ] != 0.0)
		{
			new string[256];
			format(string, sizeof(string), "%d,%d,%f,%f,%f,%d,%d\n",
			DrogInfo[i][DrogEldobObject],
			DrogInfo[i][DrogEldobDarab],
			DrogInfo[i][DrogEldobPosX],
			DrogInfo[i][DrogEldobPosY],
			DrogInfo[i][DrogEldobPosZ],
			DrogInfo[i][DrogEldobVWorld],
			DrogInfo[i][DrogEldobInterior]
			);
			fwrite(DrogFile, string);
		}
	}
	fclose(DrogFile);
	return 1;
}

fuggveny LoadFegyver()
{
	new File: FegyverFile = fopen("Config/fegyverobjectek.cfg", io_read);
	if(!FegyverFile) return false;
	for(new i = 0; i < sizeof(DropInfo); i++)
	{
		new string[256], adatok[7][256];
		fread(FegyverFile, string);
		split(string, adatok, ',');
		
		/*
		strval(adatok[0]) = DropInfo[i][FegyverEldobAmmount][0]
		strval(adatok[1]) = DropInfo[i][FegyverEldobAmmount][1]
		floatstr(adatok[2]) = DropInfo[i][FegyverEldobPosX]
		floatstr(adatok[3]) = DropInfo[i][FegyverEldobPosY]
		floatstr(adatok[4]) = DropInfo[i][FegyverEldobPosZ]
		strval(adatok[5]) = DropInfo[i][FegyverEldobVWorld]
		strval(adatok[6]) = DropInfo[i][FegyverEldobInterior]
		*/
		
		EldobottFegyverObject[i] = CreateDynamicObject(GetFegyverObject(strval(adatok[0])), floatstr(adatok[2]), floatstr(adatok[3]), floatstr(adatok[4]) - 1, 80.0, 0.0, 0.0, strval(adatok[5]), strval(adatok[6]));
		DropInfo[i][FegyverEldobAmmount][0] = strval(adatok[0]);
		DropInfo[i][FegyverEldobAmmount][1] = strval(adatok[1]);
		DropInfo[i][FegyverEldobPosX] = floatstr(adatok[2]);
		DropInfo[i][FegyverEldobPosY] = floatstr(adatok[3]);
		DropInfo[i][FegyverEldobPosZ] = floatstr(adatok[4]);
		DropInfo[i][FegyverEldobVWorld] = strval(adatok[5]);
		DropInfo[i][FegyverEldobInterior] = strval(adatok[6]);
	}
	fclose(FegyverFile);
	return 1;
}

fuggveny SaveFegyver()
{
	new File: FegyverFile = fopen("Config/fegyverobjectek.cfg", io_write);
	for(new i = 0; i < sizeof(DropInfo); i++)
	{
		if(DropInfo[i][FegyverEldobPosX] != 0.0 && DropInfo[i][FegyverEldobPosY] != 0.0 && DropInfo[i][FegyverEldobPosZ] != 0.0)
		{
			new string[256];
			format(string, sizeof(string), "%d,%d,%f,%f,%f,%d,%d\n",
			DropInfo[i][FegyverEldobAmmount][0],
			DropInfo[i][FegyverEldobAmmount][1],
			DropInfo[i][FegyverEldobPosX],
			DropInfo[i][FegyverEldobPosY],
			DropInfo[i][FegyverEldobPosZ],
			DropInfo[i][FegyverEldobVWorld],
			DropInfo[i][FegyverEldobInterior]
			);
			fwrite(FegyverFile, string);
		}
	}
	fclose(FegyverFile);
	return 1;
}

public LoadHotel()
{
	new idx = 0, HotelLoaded = 0;
	printf("\nHotelszobák Betöltése Folyamatban...");
	while(idx < sizeof(HotelInfo))
	{
		new where[32], query[128], mezoadatok[512], mezo[24][50];
		Format(where, "id='%d'", idx);

		if(Mysql_Num(SQL_DB_Hotelek, where) == 1)
			HotelInfo[idx][Van] = 1;
		else
			HotelInfo[idx][Van] = 0;

		if(HotelInfo[idx][Van] == 1)
		{
			HotelekSzamaOsszesen++;
			Format(query, "SELECT * FROM %s WHERE %s", SQL_DB_Hotelek, where);
			mysql_query(query);

			mysql_store_result();

			mysql_fetch_row(mezoadatok, "|");
			mysql_free_result();

			split(mezoadatok, mezo, '|');
			
			HotelInfo[idx][hEladva] = strval(mezo[1]);
			strmid(HotelInfo[idx][hTulaj], mezo[2], 0, strlen(mezo[2]), MAX_PLAYER_NAME);
			HotelInfo[idx][hEntranceX] = floatstr(mezo[3]);
			HotelInfo[idx][hEntranceY] = floatstr(mezo[4]);
			HotelInfo[idx][hEntranceZ] = floatstr(mezo[5]);
			HotelInfo[idx][hAra] = strval(mezo[6]);
			HotelInfo[idx][hBelso] = strval(mezo[7]);
			HotelInfo[idx][hHel] = strval(mezo[8]);
			HotelInfo[idx][hArm] = strval(mezo[9]);
			HotelInfo[idx][hPenz] = strval(mezo[10]);
			HotelInfo[idx][hCigi] = strval(mezo[11]);
			HotelInfo[idx][hKaja] = strval(mezo[12]);
			HotelInfo[idx][hKokain] = strval(mezo[13]);
			HotelInfo[idx][hHeroin] = strval(mezo[14]);
			HotelInfo[idx][hMarihuana] = strval(mezo[15]);
			HotelInfo[idx][hMati] = strval(mezo[16]);
			HotelInfo[idx][hZarva] = strval(mezo[17]);
			HouseInfo[idx][hDate] = strval(mezo[18]);
			
			new cuccok[10][5], x;
			split(mezo[19], cuccok, ','); for(x = 0; x < 10; x++) HotelInfo[idx][hFegyverek][x] = strval(cuccok[x]);
			split(mezo[20], cuccok, ','); for(x = 0; x < 10; x++) HotelInfo[idx][hToltenyek][x] = strval(cuccok[x]);
			split(mezo[21], cuccok, ','); for(x = 0; x < 10; x++) HotelInfo[idx][hMellenyek][x] = strval(cuccok[x]);

			HotelInfo[idx][hGyogyszer] = strval(mezo[22]);
			
			new Ruhak[10][MAX_PLAYER_NAME];
			split(mezo[23],Ruhak, ',');
			for(new i=0; i < 10; i++)
			    HouseInfo[idx][hRuha][i] = strval(Ruhak[i]);
			
			#if defined KELLHOTELPICKUP
				OnHotelPickupUpdate(idx);
			#endif
			
            HotelLoaded++;
		}
		idx++;
	}
	printf("Hotelszobák Sikeresen Betöltve! Betöltött Hotelszobák Száma: %d", HotelLoaded);
}

public LoadHouse()
{
	new idx = 0, HazLoaded = 0;
	printf("\nHázak Betöltse Folyamatban...");
	while(idx < sizeof(HouseInfo))
	{
		new where[32], query[128], mezoadatok[512], mezo[35][50];
		Format(where, "id='%d'", idx);

		if(Mysql_Num(SQL_DB_Hazak, where) == 1)
			HouseInfo[idx][Van] = 1;
		else
			HouseInfo[idx][Van] = 0;

		if(HouseInfo[idx][Van] == 1)
		{
			HazakSzamaOsszesen++;
			Format(query, "SELECT * FROM %s WHERE %s", SQL_DB_Hazak, where);
			mysql_query(query);

			mysql_store_result();

			mysql_fetch_row(mezoadatok, "|");
			mysql_free_result();

			split(mezoadatok, mezo, '|');

			HouseInfo[idx][Uj] = 0;
			HouseInfo[idx][hOwned] = strval(mezo[1]);
			strmid(HouseInfo[idx][hOwner], mezo[2], 0, strlen(mezo[2]), MAX_PLAYER_NAME);
			HouseInfo[idx][hCsak] = strval(mezo[3]);
			strmid(HouseInfo[idx][hCsakneki], mezo[4], 0, strlen(mezo[4]), MAX_PLAYER_NAME);
			HouseInfo[idx][hEntrancex] = floatstr(mezo[5]);
			HouseInfo[idx][hEntrancey] = floatstr(mezo[6]);
			HouseInfo[idx][hEntrancez] = floatstr(mezo[7]);
			HouseInfo[idx][hValue] = strval(mezo[8]);
			HouseInfo[idx][hRentabil] = strval(mezo[9]);
			HouseInfo[idx][hRent] = strval(mezo[10]);
			HouseInfo[idx][hBelso] = strval(mezo[11]);
			HouseInfo[idx][hHel] = strval(mezo[12]);
			HouseInfo[idx][hArmour] = strval(mezo[13]);
			HouseInfo[idx][hTakings] = strval(mezo[14]);
			HouseInfo[idx][hCigi] = strval(mezo[15]);
			HouseInfo[idx][hKaja] = strval(mezo[16]);
			HouseInfo[idx][hKokain] = strval(mezo[17]);
			HouseInfo[idx][hHeroin] = strval(mezo[18]);
			HouseInfo[idx][hMarihuana] = strval(mezo[19]);
			HouseInfo[idx][hMati] = strval(mezo[20]);
			HouseInfo[idx][hLock] = strval(mezo[21]);
			HouseInfo[idx][hDate] = strval(mezo[22]);
			HouseInfo[idx][hTipus] = strval(mezo[23]);
			
			new cuccok[10][5], x;
			split(mezo[24], cuccok, ','); for(x = 0; x < 10; x++) HouseInfo[idx][hFegyverek][x] = strval(cuccok[x]);
			split(mezo[25], cuccok, ','); for(x = 0; x < 10; x++) HouseInfo[idx][hToltenyek][x] = strval(cuccok[x]);
			split(mezo[26], cuccok, ','); for(x = 0; x < 10; x++) HouseInfo[idx][hMellenyek][x] = strval(cuccok[x]);

            new villany[3][5];
			split(mezo[27], villany, ',');
			HouseInfo[idx][hVillanyFizetve] = strval(villany[0]);
			HouseInfo[idx][hVillanySzamla] = strval(villany[1]);
			HouseInfo[idx][hLekapcsolva] = strval(villany[2]);

			HouseInfo[idx][hDrog] = strval(mezo[28]);
			
			HouseInfo[idx][hGarazs] = strval(mezo[29]);
			
			new garazs[4][15];
			split(mezo[30], garazs, ',');
			HouseInfo[idx][hGarazsPoz][0] = floatstr(garazs[0]);
			HouseInfo[idx][hGarazsPoz][1] = floatstr(garazs[1]);
			HouseInfo[idx][hGarazsPoz][2] = floatstr(garazs[2]);
			HouseInfo[idx][hGarazsPoz][3] = floatstr(garazs[3]);
			
			HouseInfo[idx][hGyogyszer] = strval(mezo[31]);
			
			HouseInfo[idx][hSzef] = strval(mezo[32]);
			
            if(HouseInfo[idx][hDrogUltetve] != 0)
			{
				new ido = HouseInfo[idx][hDrogIdo];
				new Float:kulonbseg = (6317.29589844-6315.0);
				new letelt = (DROGNOVEKEDES_IDO-ido);
				new Float:plusz = (letelt*kulonbseg);
				HouseInfo[idx][hDrogObject] = CreateDynamicObject(3409,1250.13330078,-1703.25781250,6315.0+plusz,0.00000000,0.00000000,0.00000000,idx); //object(grassplant) (1)
			}

			OnGarazsPickupUpdate(idx);
			
			#if defined KELLHAZPICKUP
				OnHousePickupUpdate(idx);
			#endif
			
            HazLoaded++;
		}

		idx++;
	}
	printf("Házak Sikeresen Betöltve! Betöltött Házak Száma: %d", HazLoaded);
}

public LoadAjtok()
{
	new adatok[16][128];
	new strFromFile2[256];
	new File: file = fopen("Config/ajtok.cfg", io_read);
	if(!file) dini_Create("Config/ajtok.cfg");
	new idx = 0, BetoltottAjtok;
	PrintValaszto("Ajtók betöltése folyamatban");
	if(file)
	{
		while (idx < MAXAJTO)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');

			if(floatstr(adatok[2]) == 0.0 || floatstr(adatok[3]) == 0.0 || floatstr(adatok[4]) == 0.0)
			    Ajtok[idx][Van] = 0;
			else
			    Ajtok[idx][Van] = 1;

			strmid(Ajtok[idx][Csak], adatok[0], 0, strlen(adatok[0]), 32);
			strmid(Ajtok[idx][Nev], adatok[1], 0, strlen(adatok[1]), 32);
			Ajtok[idx][BeX] = floatstr(adatok[2]);
			Ajtok[idx][BeY] = floatstr(adatok[3]);
			Ajtok[idx][BeZ] = floatstr(adatok[4]);
			Ajtok[idx][BeInt] = strval(adatok[5]);
			Ajtok[idx][BeVW] = strval(adatok[6]);
			Ajtok[idx][KiX] = floatstr(adatok[7]);
			Ajtok[idx][KiY] = floatstr(adatok[8]);
			Ajtok[idx][KiZ] = floatstr(adatok[9]);
			Ajtok[idx][KiInt] = strval(adatok[10]);
			Ajtok[idx][KiVW] = strval(adatok[11]);
			Ajtok[idx][Zarva] = strval(adatok[12]);
			Ajtok[idx][Freezel] = strval(adatok[13]);
            Ajtok[idx][TeruletKint] = CreateDynamicCircle(Ajtok[idx][BeX],Ajtok[idx][BeY], 1.5);
            Ajtok[idx][TeruletBent] = CreateDynamicCircle(Ajtok[idx][KiX],Ajtok[idx][KiY], 1.5);
			Ajtok[idx][Vedelem] = strval(adatok[14]);
			Ajtok[idx][PickupID] = strval(adatok[15]);
			
			if(Ajtok[idx][Van] == 1)
			{
				#if defined KELLAJTO3D
					UpdateAjto3D(idx);
				#endif
				Ajtok[idx][TeruletKint] = CreateDynamicCircle(Ajtok[idx][BeX],Ajtok[idx][BeY], 1.0);
				Ajtok[idx][TeruletBent] = CreateDynamicCircle(Ajtok[idx][KiX],Ajtok[idx][KiY], 1.0);
				
				DebugMessage("Ajtó: %d betöltve! | Név:%s | Csak: %s | Zárva: %d", idx, Ajtok[idx][Nev], Ajtok[idx][Csak], Ajtok[idx][Zarva]);
				
				BetoltottAjtok ++;
			}
			idx++;
		}
		fclose(file);
		printf("Betöltött ajtók száma: %d", BetoltottAjtok);
		PrintValaszto("Minden ajtó betöltve");
	}
	return 1;
}
public SaveBankAdatok()
{
	new File: file2;
	
	new coordsstring[50];
	format(coordsstring, sizeof(coordsstring), "%s,%s", BankTulaj, BankMasodTulaj);
			
	file2 = fopen("Config/bank.cfg", io_write);
	if(!file2) return false;
	fwrite(file2, coordsstring);
	
	fclose(file2);
	return 1;
}
public LoadBankAdatok()
{
	print("Bank betöltése...");
	new adatok[2][30];
	new strFromFile2[256];
	new File: file = fopen("Config/bank.cfg");
	if(!file) return false;
	if(file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, adatok, ',');
		strmid(BankTulaj, adatok[0], 0, strlen(adatok[0]), 255);
		strmid(BankMasodTulaj, adatok[1], 0, strlen(adatok[1]), 255);
		fclose(file);
		print("Bank betöltése...");
	}	
	return 1;
}
public SaveBenzinKutak()
{
	new idx;
	new File: file2 = fopen("Config/benzinkutak.cfg", io_write);
	if(!file2) return false;
	while (idx < MAX_BENZINKUT)
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%s,%s,%f,%f,%f,%f,%d,%d,%d,%d\n",
		BenzinKutak[idx][bNev],
		BenzinKutak[idx][bBerlo],
		BenzinKutak[idx][bPosX], 
		BenzinKutak[idx][bPosY], 
		BenzinKutak[idx][bPosZ],
		BenzinKutak[idx][bTav],
		BenzinKutak[idx][bMaxBenzin],
		BenzinKutak[idx][bBenzin],
		BenzinKutak[idx][bBenzinAra],
		BenzinKutak[idx][bSzef]
		);

		fwrite(file2, coordsstring);
		idx++;
	}
	fclose(file2);
	return 1;
}
public LoadBenzinKutak()
{
	print("Benzinkutak betöltése...");
	new adatok[10][256];
	new strFromFile2[256];
	new File: file = fopen("Config/benzinkutak.cfg", io_read);
	if(!file) return false;
	new idx = 0;
	if(file)
	{
		while (idx < MAX_BENZINKUT)
		{
			fread(file, strFromFile2);
			split(strFromFile2, adatok, ',');

			strmid(BenzinKutak[idx][bNev], adatok[0], 0, strlen(adatok[0]), 255);
			strmid(BenzinKutak[idx][bBerlo], adatok[1], 0, strlen(adatok[1]), 255);
			BenzinKutak[idx][bPosX] = floatstr(adatok[2]);
			BenzinKutak[idx][bPosY] = floatstr(adatok[3]);
			BenzinKutak[idx][bPosZ] = floatstr(adatok[4]);
			BenzinKutak[idx][bTav] = floatstr(adatok[5]);
			BenzinKutak[idx][bMaxBenzin] = strval(adatok[6]);
			BenzinKutak[idx][bBenzin] = strval(adatok[7]);
			BenzinKutak[idx][bBenzinAra] = strval(adatok[8]);
			BenzinKutak[idx][bBenzinAra] = 1; // dollár
			BenzinKutak[idx][bSzef] = strval(adatok[9]);
			
   			/*new BenzinkutStr[128],Tulaja[25];

			Format(BenzinkutStr, "Benzinkút\nTulajdonos: %s\n Benzin ára: $%d/Liter\nDiesel ára: $%d/Liter",Tulaja,BenzinKutak[idx][bBenzinAra],(BenzinKutak[idx][bBenzinAra]-40));
			Benzinkut3D[idx] = CreateDynamic3DTextLabel(BenzinkutStr, COLOR_GREEN, BenzinKutak[idx][bPosX], BenzinKutak[idx][bPosY], BenzinKutak[idx][bPosZ],INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);*/
			idx++;
		}
		fclose(file);
		print("Benzinkutak betöltve...");
	}
	return 1;
}

forward LoadTek();
public LoadTek()
{
	new adatok[7][12];
	new szoveg[128];
	new File:file = fopen("Config/swat.cfg", io_read);
	fread(file, szoveg);
	split(szoveg, adatok, ',');
	TekInfo[tSilenced] = strval(adatok[0]);
	TekInfo[tDeagle] = strval(adatok[1]);
	TekInfo[tMp5] = strval(adatok[2]);
	TekInfo[tM4] = strval(adatok[3]);
	TekInfo[tShotgun] = strval(adatok[4]);
	TekInfo[tCombat] = strval(adatok[5]);
	TekInfo[tSniper] = strval(adatok[6]);
	/*swatsilenced = strval(adatok[0]);
	swatdeagle = strval(adatok[1]);
	swatmp5 = strval(adatok[2]);
	swatm4 = strval(adatok[3]);
	swatshotgun = strval(adatok[4]);
	swatcombat = strval(adatok[5]);
	swatsniper = strval(adatok[6]);*/
	fclose(file);
	print("SWAT betöltve");
	return 1;
}

forward SaveTek();
public SaveTek()
{
	new szoveg[256];
	new File: file = fopen("Config/swat.cfg", io_write);
	format(szoveg, 256, "%d,%d,%d,%d,%d,%d,%d", TekInfo[tSilenced], TekInfo[tDeagle], TekInfo[tMp5], TekInfo[tM4], TekInfo[tShotgun], TekInfo[tCombat], TekInfo[tSniper]);
	fwrite(file, szoveg);
	fclose(file);
	return 1;
}

public SzefToltes()
{
	/*for(new x = 0; x < MAX_FRAKCIO; x++)
	{
		if(FrakcioInfo[x][fObject])
		{
			if(FrakcioInfo[x][fNev] != 0) 
			{
				DestroyDynamicObject(FrakcioInfo[x][fNev]); 
				FrakcioInfo[x][fNev] = NINCS;
			}	
			FrakcioInfo[x][fNev] = CreateDynamicObject(2688, FrakcioInfo[x][fPosX], FrakcioInfo[x][fPosY], FrakcioInfo[x][fPosZ]-0.6, 0.0, 0.0, FrakcioInfo[x][fPosA]);
		}
		if(FrakcioInfo[x][fJelado] != 0)
		{
			if(FrakcioInfo[x][fJeladoObject] != 0)
			{
				if(FrakcioInfo[x][fJeladoObject] != 0) 
				{
					DestroyDynamicObject(FrakcioInfo[x][fJeladoObject]); 
					FrakcioInfo[x][fJeladoObject] = NINCS;
				}	
				FrakcioInfo[x][fJeladoObject] = CreateDynamicObject(1595, FrakcioInfo[x][fJeladoPos][0], FrakcioInfo[x][fJeladoPos][1], FrakcioInfo[x][fJeladoPos][2]+3.0, 0.0, 0.0, FrakcioInfo[x][fJeladoPos][3]-180);
			}
		}
	}
	return 1;*/
}
//------------------------------------------------------------------------------------------------------
public OnPlayerSelectedMenuRow(playerid, row)
{
	new Menu:Current = GetPlayerMenu(playerid);
	for(new menu; menu<TotalMenus; menu++)
	{
		if(Current == CCTVMenu[menu])
		{
		    if(MenuType[PlayerMenu[playerid]] == 1)
		    {
		        if(row == 11)
		        {
		            ShowMenuForPlayer(CCTVMenu[menu+1], playerid);
		            TogglePlayerControllable(playerid, 0);
		            PlayerMenu[playerid] = (menu+1);
				}
				else
				{
				    if(PlayerMenu[playerid] == 0)
				    {
				    	SetPlayerToCCTVCamera(playerid, row);
				    	PlayerMenu[playerid] = -1;
					}
					else
					{
					    SetPlayerToCCTVCamera(playerid, ((PlayerMenu[playerid]*11)+row));
					    PlayerMenu[playerid] = -1;
					}
				}
			}
			else
			{
			    if(PlayerMenu[playerid] == 0)
			    {
			    	SetPlayerToCCTVCamera(playerid, row);
			    	PlayerMenu[playerid] = -1;
				}
				else
				{
				    SetPlayerToCCTVCamera(playerid, ((PlayerMenu[playerid]*11)+row));
				    PlayerMenu[playerid] = -1;
				}
			}
		}
	}
		            
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	TogglePlayerControllable(playerid, 1);
	PlayerMenu[playerid] = -1;
	return 1;
}

forward BenzinesKocsi(kocsi);
public BenzinesKocsi(kocsi)
{
	new modell = GetVehicleModel(kocsi);
	for(new b=0; b < sizeof(Benzines_Kocsik); b++)
	{
		if(modell ==  Benzines_Kocsik[b])
		{
			return true;
//			break;
		}
	}
	return false;
}

forward DieselesKocsi(kocsi);
public DieselesKocsi(kocsi)
{
	new modell = GetVehicleModel(kocsi);
	for(new b=0; b < sizeof(Dieseles_Kocsik); b++)
	{
		if(modell ==  Dieseles_Kocsik[b])
		{
			return true;
//			break;
		}
	}
	return false;
}

MaxBenzin(adat, model_ = false)
{
	new model;
	if(model_) model = adat;
	else model = GetVehicleModel(adat);
	
	return Max_Benzin[model - 400];
}

public OnGameModeInit()
{
	GameModeBetoltve = false;
	SendRconCommand("password Ricardo");
	
	ManualVehicleEngineAndLights();
	//GetServerVarAsString("bind", server_ip, sizeof(server_ip));
	if(HamisSzerver())
	{
		FatalServerStopping();
		GameModeExit();
		return 1;
	}
	
	CFG_Checker();
	//MySQL_Ping_Check();
	//SetPDistance(0);
    DisableInteriorEnterExits();
	EnableStuntBonusForAll(false);
	ShowNameTags(true);
	//mysql_init(LOG_ALL);
	mysql_init(LOG_ONLY_ERRORS, true);
	MysqlKapcsolodas(true);
	DisableNameTagLOS();
	mysql_query("UPDATE playerek SET Online='0'");
	LoadFrakcioSQL();
	LoadModelSelections();
	LoadFrakcioDuty();
	LoadCsoportok();
	LoadRaktar();
	SzefToltes();
	LoadBoxer();
	LoadInts();
	LoadAjtok();
	LoadHouse();
	LoadATM();
	LoadKapu();
	LoadHotel();
	AllCarSpawn();
	LoadBenzinKutak();
	LoadFulke();
	LoadDrog();
	LoadFegyver();
	LoadBiz();	
	SpawnExportNPC();	
	LoadActors();
	
	#if defined KELLNPC
		NPCkCsatlakoztatasa();
	#endif
	
	for(new b = 0; b < MAX_BENZINKUT; b++)
	{
		if(BenzinKutak[b][bMaxBenzin] != 10000)
		{
			BenzinKutak[b][bMaxBenzin] = 10000;
			BenzinKutak[b][bBenzin] = 500;
			BenzinKutak[b][bBenzinAra] = 100;
		}
	}

	SetMapName(mapnev);

	for(new frakcio = 0; frakcio < MAX_FRAKCIO; frakcio ++)
	{
		FrakcioInfo[frakcio][fOOCRadio] = true;
	}
	
	SetValosIdo();
	
	IndulasIdo = gettime();
	ServerSettingsUpdate();
	
	//EnableZoneNames(1);
	AllowInteriorWeapons(1);
	//AllowAdminTeleport(1);
	//UsePlayerPedAnims();
	
	SetNameTagDrawDistance(30.0); // /nevek távolsága | /nevek látótávolsága | /nevek láthatósága
	
	for(new v = 0; v < MAXVSKOCSI; v++)
	{
		Matrica[v] = 3;
	}
	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425, 0, 0, 0, 0, 0, 0);
	}
	
	VehicleForeach(c)
	{
		MaxUzemanyag(c);
		MennyiszerLop[c] = NINCS;
		VanBombaBenne[c] = NINCS;
		Lopott[c] = false;
		VehicleELM[c] = false;
	}
	
	TuzVan[0] = 0;
	TuzVan[1] = 0;
	TextLabelBetoltes();
	//EnableVehicleExplosion(); // kocsisérülés amikor nem ül benne senki
	
	LoadRicardoVilla();
	LoadSeeRPGObjekt();
	
	new File:file = fopen(MAPS_TXT, io_read);
	if(file)
	{
		new 
			string[128],
			count[2] = 0
		;
		while(fread(file, string))
		{
			if(strfind(string, "CreateObject(") != -1)
			{
				Format(string, "%s", strreplace(" ", "", string));
				Format(string, "%s", strreplace("CreateObject(", "", string));
				Format(string, "%s", strreplace(");", "", string));
				
				new objectid, Float:pos[6];
				sscanf(string, "p<,>dffffff", objectid, pos[0], pos[1], pos[2], pos[3], pos[4], pos[5]);
				
				CreateDynamicObject(objectid, pos[0], pos[1], pos[2], pos[3], pos[4], pos[5]);	
				count[0] ++;
			}
		}
	}
	//LoadLoter();
	
	//CreateDynamicObject(2922, 2145.7744140625, 1606.8000488281, 993.88836669922, 0, 0, 0);
	//================================= Kapuk ===========================//
	/*PDKapu[0] = CreateDynamicObject(968, 1544.71375, -1630.98633, 13.22260, 0.00000, 90.00000, 90.00000); // sorompó
	PDKapu[1] = CreateDynamicObject(980, 1588.21680, -1637.88123, 15.07300, 0.00000, 0.00000, 0.00000); // garázskapu*/
	
	HatarSorompo[0] = CreateDynamicObject(968, 35.85170, -1525.13684, 4.98000, 0.00000, 90.00000, 91.00000); // LS-SF kijárat
	HatarSorompo[1] = CreateDynamicObject(968, 67.21190, -1536.54285, 4.72000, 0.00000, 89.98000, 269.00000); // LS-SF bejárat
	HatarSorompo[2] = CreateDynamicObject(968, 628.94849, -1193.35583, 17.81510, 0.00000, -90.00000, 205.00000); // LS alagút bejárat
	HatarSorompo[3] = CreateDynamicObject(968, 613.25568, -1199.85681, 17.92670, 0.00000, -90.00000, 19.00000); // LS alagút kijárat
	HatarSorompo[4] = CreateDynamicObject(968, 618.35999, 345.23999, 18.80000, 0.00000, 270.00000, 34.99000); // kishid1 kijarat
	HatarSorompo[5] = CreateDynamicObject(968, 606.61823, 336.85840, 18.80000, 0.00000, 90.00000, 35.95000); // kishid1 bejárat	
	HatarSorompo[6] = CreateDynamicObject(968, -191.85930, 248.24020, 11.96000, 0.00000, 270.00000, 344.89999); // kishid2 kijárat
	HatarSorompo[7] = CreateDynamicObject(968, -205.89709, 251.97400, 12.06000, 0.00000, 90.00000, 344.98999); // kishid2 bejárat	
	HatarSorompo[8] = CreateDynamicObject(968, 1746.50769, 534.77539, 26.93040, 0.00000, 90.00000, -18.00000); // LS-LV kijárat
	HatarSorompo[9] = CreateDynamicObject(968, 1735.56677, 524.47711, 27.62260, 0.00000, -90.00000, -19.00000); // LS-LV bejárat
	
	/*PDIntiKapu[0] = CreateDynamicObject(1500, 636.10999, -563.59003, -23.45530, 0.00000, 0.00000, 90.00000); // fõkapu
	PDIntiKapu[1] = CreateDynamicObject(1500, 611.14001, -545.39001, -23.45460, 0.00000, 0.00000, 0.00000); // Cellákhozbelépõkapu*/

	//============================== Kamerák ==================================//
	AddCCTV("Grove Street", 2491.7839, -1666.6194, 46.3232, 0.0); // 0
	AddCCTV("LS Downtown", 1102.6440, -837.8973, 122.7000, 180.0); // 1
	AddCCTV("SF Wang Cars", -1952.4282,285.9786,57.7031, 90.0);// 2
	AddCCTV("SF Reptér", -1275.8070, 52.9402, 82.9162, 0.0);// 3
	AddCCTV("SF Alagút", -1899.0861,731.0627,65.2969, 90.0);// 4
	AddCCTV("SF Híd", -1753.6606,884.7520,305.8750, 150.0);// 5
	AddCCTV("LVBank Lépcsõ", 2150.0, 1605.0, 1005.0, 0.0,1,0);// 6
	AddCCTV("LVBank Széf", 2142.0, 1608.0, 997.0, 0.0,1,0);// 7
	AddCCTV("SF Bank Kamera Külsõ", -1968.0, 559.0, 43.0, 0.0,0,0);// 8
	//============================= InGame Text ================================//
	/*resitd = TextDrawCreate(95.000000, 321.000000, ""); //Carresi Textdraw
	TextDrawAlignment(resitd, 2);
	TextDrawBackgroundColor(resitd, 255);
	TextDrawFont(resitd, 1);
	TextDrawLetterSize(resitd, 0.480000, 1.799999);
	TextDrawColor(resitd, 0xFF0000FF);
	TextDrawSetOutline(resitd, 1);
	TextDrawSetProportional(resitd, 1);*/
	
	/*zerotd = TextDrawCreate(4.000000, 435.000000, ".");
	TextDrawBackgroundColor(zerotd, 255);
	TextDrawFont(zerotd, 1);
	TextDrawLetterSize(zerotd, 0.500000, 1.000000);
	TextDrawColor(zerotd, -16776961);
	TextDrawSetOutline(zerotd, 1);
	TextDrawSetProportional(zerotd, 1);*/
	
	/*FeketesegTD = TextDrawCreate(0, 0, "~b~");
	TextDrawTextSize(FeketesegTD, 640, 480);
	TextDrawLetterSize(FeketesegTD,0.0,50.0);
	TextDrawUseBox(FeketesegTD , 1);	
	TextDrawBoxColor(FeketesegTD, 0x000000FF);*/
	
	/*PirossagTD = TextDrawCreate(0, 0, "~r~");
	TextDrawTextSize(PirossagTD, 640, 480);
	TextDrawLetterSize(PirossagTD,0.0,50.0);
	TextDrawUseBox(PirossagTD , 1);
	TextDrawBoxColor(PirossagTD, 0xFF000033);
	TextDrawColor(PirossagTD, 0xFF000033);*/
	/*------------------------------------------------------------------------------*/
	
	// NPC jármûvek
	REPULO_LS = AddStaticVehicle(577, 1493.4807, -2423.1213, 13.5800, -120.0000, 1, 7);
	REPULO_SF = AddStaticVehicle(577, -1331.6931, -251.0808, 14.0110, -45.0000, 1, 65);
	REPULO_LV = AddStaticVehicle(577, 1551.3439, 1360.7322, 9.8371, -80.0000, 1, 3);
	
	VONAT_LS = AddStaticVehicle(538, 1976.3766, -1954.1646, 13.2701, 266.3449, 1, 1);
	VONAT_SF = AddStaticVehicle(538, -1942.9160, 166.3571, 27.0006, 356.7942, 1, 1);
	VONAT_LV = AddStaticVehicle(538, -1942.9160, 166.3571, 27.0006, 356.7942, 1, 1);
	
	// By. Steve
	/*UjPickup(1239, 23, 2068.5806, -1779.8110, 13.5596);
	UjPickup(1239, 23, 2070.6270, -1793.7743, 13.5469);
	UjPickup(1239, 23, 2105.4885, -1806.4564, 13.5547);
	UjPickup(1274, 23, 2139.1792, -1742.7758, 13.5524);
	UjPickup(1314, 23, 2176.9204, -1770.4591, 13.5391);
	UjPickup(1239, 23, 2229.9126, -1721.2721, 13.5614);
	UjPickup(1239, 23, 2424.2139, -1742.8124, 13.5456);
	UjPickup(1239, 23, 2244.2751, -1665.5361, 15.4766);
	UjPickup(1239, 23, 1928.5811, -1776.2999, 13.5469);
	UjPickup(1239, 23, 1940.0072, -2115.9922, 13.6953);
	UjPickup(1314, 23, 1863.8379, -1597.2811, 14.3062); 
	UjPickup(1314, 23, 1498.2042, -1581.0258, 13.5498);
	UjPickup(1239, 23, 1555.5059, -1675.7162, 16.1953);
	UjPickup(1239, 23, 1481.0446, -1772.3136, 18.7958);
	UjPickup(1239, 23, 1411.5349, -1699.5614, 13.5395);
	UjPickup(1239, 23, 1352.3784, -1759.2524, 13.5078);
	UjPickup(1239, 23, 1328.0425, -1556.2021, 13.5469);
	UjPickup(1239, 23, 1172.0775, -1325.3523, 15.4074);
	UjPickup(1239, 23, 1200.4214, -918.4971, 43.1127);
	UjPickup(1239, 23, 1315.4576, -897.6856, 39.5781);
	UjPickup(1239, 23, 1000.5869, -919.8834, 42.3281);
	UjPickup(1239, 23, 927.0356, -1352.9988, 13.3768);
	UjPickup(1239, 23, 1038.1528, -1340.7311, 13.7451);
	UjPickup(1274, 23, 1043.2981, -1384.4214, 13.7131);
	UjPickup(1274, 23, 822.9655, -1757.0065, 13.6546);
	UjPickup(1239, 23, 2025.2350, -1401.6715, 17.2097);
	UjPickup(1239, 23, 2101.1597, -1359.5149, 23.9844);
	UjPickup(1314, 23, 2233.2932, -1159.7860, 25.8906);
	UjPickup(1274, 23, 2131.8254, -1151.3242, 24.0601);
	UjPickup(1239, 23, 2419.7058, -1509.0582, 24.0000);
	UjPickup(1239, 23, 2397.8225, -1899.1847, 13.5469);
	UjPickup(1314, 23, 2247.0698, -1795.9647, 13.5469);
	UjPickup(1239, 23, 1833.7817, -1842.6338, 13.5781);
	UjPickup(1239, 23, 1456.4315, -1137.6434, 23.9484);
	UjPickup(1239, 23, 461.7112, -1500.8445, 31.0448);
	UjPickup(1239, 23, -78.3534, -1169.8508, 2.1356);
	UjPickup(1239, 23, -516.1407, -539.2332, 25.5234);*/
	
	UjPickup(1239, 23, 634.1098, -1195.9039, 18.1094); // alagut ki
	UjPickup(1239, 23, 607.7025, -1197.4120, 18.6446); // alagut be
	UjPickup(1239, 23, 39.2373, -1521.5503, 5.2052); // ls-sf hatar bejarat
	UjPickup(1239, 23, 63.8567, -1539.4918, 5.0424); // ls-sf hatar kijarat
	UjPickup(1239, 23, 617.4741, 339.5045, 19.1226); // kishid1 kijarat
	UjPickup(1239, 23, 607.8223, 342.2892, 18.9297); //kishid1 bejarat
	UjPickup(1239, 23, -196.6605, 245.5021, 12.0711); // kishid2 kijarat
	UjPickup(1239, 23, -200.9090, 254.7924, 12.0781); // kishid2 bejarat
	UjPickup(1239, 23, 1748.4161, 529.2976, 27.4101); // LS-LV kijárat
	UjPickup(1239, 23, 1733.2114, 529.9335, 27.6512); // LS-LV bejárat

	printf("Pickupok szama: %d",pickups);
	
	Timerek[0] = SetTimer("CheckGas", RunOutTime, 1);
	//Timerek[1] = SetTimer("RandomHirdetes", (hirdetesidokoz * 1000), 1);
	Timerek[2] = SetTimer("BackupTimer", (BackTime*1000), 1);
	//Timerek[3] = SetTimer("MysqlEllenorzes", 10000, 1);
	Timerek[4] = SetTimer("SyncUp", 60000, 1);
	Timerek[5] = SetTimer("Production", 300000, 1);
	//Timerek[6] = SetTimer("EtvagyNoveles", 3*60000, 1);
	Timerek[7] = SetTimer("MySQLUpdater", 900000, 1);
	Timerek[8] = SetTimer("Timer_NegyedOra", 15*60000, 1);
	
	Timerek[9] = SetTimer("Timer_30000", 30000, 1);
	Timerek[10] = SetTimer("Timer_5000", 5000, 1);
	Timerek[11] = SetTimer("Timer_3000", 3000, 1);
	Timerek[12] = SetTimer("Timer_2000", 2000, 1);
	Timerek[13] = SetTimer("Timer_1000", 1000, 1);
	//Timerek[14] = SetTimer("Timer_500", 500, 1);
	//Timerek[15] = SetTimer("TeruletHaszon",60*1000*60,1);

	CarInit();

	SendRconCommand("rcon 0");
	getSzerverVerzio();
	LetszamFrissites();
	UpdatePerSec[uPlayer] = 7;
	UpdatePerSec[uHaz] = 7;
	UpdatePerSec[uKocsi] = 7;
	UpdatePerSec[uBiz] = 7;
	UpdatePerSec[uTerulet] = 7;
	UpdatePerSec[uFrakcio] = 7;
	UpdatePerSec[uRaktar] = 7;
	UpdatePerSec[uGazdasag] = 7;
	UpdatePerSec[uButor] = 7;
	UpdatePerSec[uHotel] = 7;
	
	UpdateFolytatodik[uPlayer] = NINCS;
	UpdateFolytatodik[uHaz] = NINCS;
	UpdateFolytatodik[uKocsi] = NINCS;
	UpdateFolytatodik[uBiz] = NINCS;
	UpdateFolytatodik[uTerulet] = NINCS;
	UpdateFolytatodik[uFrakcio] = NINCS;
	UpdateFolytatodik[uRaktar] = NINCS;
	UpdateFolytatodik[uGazdasag] = NINCS;
	UpdateFolytatodik[uButor] = NINCS;
	UpdateFolytatodik[uHotel] = NINCS;
	
	LoadTek();
	
	for(new i=1; i < MAX_FRAKCIO; i++)
	{
		FrakcioUpdate(i, FRAKCIO_Nev);
	}
	
	getAdminJelszo();

	Csendvan = false;
	ModBetoltve = 1;
	OnModBetoltve();
	
	return 1;
}

public SyncUp()
{
	ServerLastActiveUpdate();
	PlayerForeach(playerid)
	{
		if(!IsValidPlayerID(playerid) || !Logged(playerid) || IsPlayerNPC(playerid) || AFK[playerid] != 0) continue;
		
		
		if(IsAdminSzolis(playerid, NINCS))
		{
			AdminSzoli3DChecker(playerid);
			PlayerInfo[playerid][pDutyIdo] ++;
		}
		
		PlayerInfo[playerid][pOnlineIdo] ++;
	}
	SyncTime();
}

public SyncTime()
{
	//new string[64];
	new tmphour, tmpminute, tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	
	if(tmpminute == 45)
	{
		IdoJaras[iValtas] = false; // ez azért kell, hogy biztos elõrejelzés legyen ne pedig idõjárás váltás
		IdojarasValtozas();
	}
	
	if(tmpminute == 0)
	{
		NumPlayersDebug();
		if(SzerverTipus == SZT_TESZT)
		{
			if(numplayers < 1) 
			{
				SzerverStop("Nem volt használatban a tesztszerver");
				return 1;
			}
		}
		
		PlayerForeach(p)
		{
			ReportElkuldve[p] = false;
		}
		
		/*###################################################################################################################################################*/
		
		SetValosIdo();
		SpawnExportNPC();

		if(tmphour == 0)
		{
			FizuNullazas();
		}		
		else if(tmphour == 5) // MySQL karbantartás
		{
			//MySQL_Karbantartas();
		}
	}
	return 1;
}

fuggveny CloseSorompo(id, Float:egy, Float:ketto, Float:harom)
{
	return SetDynamicObjectRot(HatarSorompo[id], egy, ketto, harom);
}

public SaveAccounts()
{
    PlayerForeach(i)
	{
		AdatMentesSQL(i);
	}
	return 1;
}

public GetClosestPlayer(p1)
{
	new Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	PlayerForeach(x)
	{
		if(IsValidPlayerID(x))
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}

public Production()
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(PlayerDrunk[i] > 0) { PlayerDrunk[i] = 0; PlayerDrunkTime[i] = 0; /*GameTextForPlayer(i, "~p~Drunk effect~n~~w~Gone", 3500, 1);*/ }
		}
	}
	new query[120], gido = gettime();
	Format(query, "DELETE FROM %s WHERE orok='n' AND ido<='%d'", SQL_DB_Ban, gido);
	mysql_query(query);
	
	LetszamFrissites();
	return 1;
}

public DateProp(playerid, type)
{
	/*new year, month, day; getdate(year, month, day);
	new ido = (year*10000) + (month*100) + day;*/
	new ido = gettime();

	if(type == DP_Kocsi) //V-s kocsi
	{
		new kulcs = PlayerInfo[playerid][pPcarkey], kulcs2 = PlayerInfo[playerid][pPcarkey2];
		if(kulcs != NINCS)
		{
			CarInfo[kulcs][cDate] = ido;
			CarUpdate(kulcs, CAR_Date);
		}
		if(kulcs2 != NINCS)
		{
			CarInfo[kulcs2][cDate] = ido;
			CarUpdate(kulcs2, CAR_Date);
		}
	}
	else if(type == DP_Haz)
	{
		new haz = PlayerInfo[playerid][pPhousekey], haz2 = PlayerInfo[playerid][pPhousekey2];
		if(haz != NINCS)
		{
			HouseInfo[haz][hDate] = ido;
			HazUpdate(haz, HAZ_Date);
		}
		if(haz2 != NINCS)
		{
			HouseInfo[haz2][hDate] = ido;
			HazUpdate(haz2, HAZ_Date);
		}
	}
}

public Checkprop(type)
{
	if(checkprop < 1 || checkprop > 5) return 1;
	if(type == DP_Kocsi)
	{
		for(new c = 0; c < sizeof(CarInfo); c++)
		{
			if(checkprop < 1) return 1;
			if(CarInfo[c][Van] == 1 && CarInfo[c][cOwned] == 1 && CarInfo[c][cFrakcio] == 0)
			{
				if(InaktivCucc(c, INAKTIV_KOCSI))
				{
					KocsiElad(c);
					checkprop--;
				}
			}
		}
	}
	else if(type == DP_Haz)
	{
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(checkprop < 1) return 1;
			if(HouseInfo[h][Van] == 1 && HouseInfo[h][hOwned] == 1 && HouseInfo[h][hDate] != 0)
			{
				if(InaktivCucc(h, INAKTIV_HAZ))
				{
					HazElad(h);
					checkprop--;
				}
			}
		}
	}
	return 1;
}

public Vizsgaido(playerid)
{
	Msg(playerid, "Az idõ lejárt. Ha megfelelt ird be igen, ha nem ird be nem.");
	Autocp[playerid] = 22;
}

public PayDay()
{
	PlayerForeach(i)
	{
		if(!IsValidPlayerID(i) || IsPlayerNPC(i) || !Logged(i) || AFK[i] || PlayerInfo[i][pJailed] == BORTON_ADMIN && PlayerInfo[i][pJailed] == BORTON_ADMIN2) continue;
		
		PlayerInfo[i][pPayDay] += 30;
		
		if(PlayerInfo[i][pPayDay] % 3600 == 0) 
		{
			if(PlayerInfo[i][pSzintetLephet] == 0)
			{
				PlayerInfo[i][pConnectTime] ++;
				CheckSzint(i);
			}
			PlayerInfo[i][pPayDay] = 0;
		}
	}
	return 1;
}

stock FizuNullazas()
{
	PlayerForeach(x)
	{
		PlayerInfo[x][pPayDayMegkapva] = 0;
		Msg(x, "Most már felveheted a fizetésed! (/fizetéskérés)");
	}
	new query[48];
	Format(query, "UPDATE %s SET PayDayMegkapva = '0' ", SQL_DB_Player);
	mysql_query(query);
	print("FizuNullazas(); - lefutott");
	return 1;
}

stock FizetesMegadas(playerid)
{
	if(PlayerInfo[playerid][pPayDayMegkapva] != 0) return Msg(playerid, "Egy nap csak egyszer kaphatsz fizetést! Prémium felhasználóként többször is kérheted!");
	if(PlayerInfo[playerid][pBankSzamla] == 0)
	{
		Msg(playerid, "Nincs bankszámlád, ezért nem kérhetsz fizetést!");
		if(PlayerInfo[playerid][pHotelSzoba] != NINCS)
		{
			PlayerInfo[playerid][pHotelSzoba] = NINCS;
			Msg(playerid, "Nem tudod fizetni a hotelszoba bérlési árát, mert nincs aktív bankszámlád, ezért felmondták a szerzõdést!");
		}
		return 1;
	}
	
	new
		i = playerid,
		getegyenleg = PlayerInfo[i][pAccount],
		lvl = Szint(playerid)
	;
	
	if(PlayerInfo[i][pJailed] > 0 OR MedicTime[i] > 0) return 1;
	
	if(lvl <= 3)
	{
		new osszeg = 0;
		switch(lvl)
		{
			case 1: osszeg = 2000;
			case 2: osszeg = 1500;
			case 3: osszeg = 1000;
		}		
		PlayerInfo[i][pAccount] += osszeg;
		MsgFormat(playerid, "Szinted miatti bónusz: $%d", osszeg);
	}

	if(PlayerInfo[i][pPayCheck] > 0) // scriptelt munka
	{
		PlayerInfo[i][pAccount] += PlayerInfo[i][pPayCheck];
		PlayerInfo[i][pPayCheck] = 0;
	}

	if(FrakcioInfo[PlayerInfo[i][pMember]][fPenz] >= FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]] && FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]] > 0)
	{
		PlayerInfo[i][pAccount] += FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]];
		FrakcioInfo[PlayerInfo[i][pMember]][fPenz] -= FrakcioInfo[PlayerInfo[i][pMember]][fFizetes][PlayerInfo[i][pRank]]
	}
	
	//PrintValaszto("Számlák");
	/*if(PlayerInfo[i][pBankSzamla] != 0)
	{
		if(PenzLeveszBsz(i,TB))
		{
			SendFormatMessage(i, COLOR_GRAD1, "Társadalom Biztosítás: $%d", TB);
			FrakcioInfo[LMUNKA_MENTO][fPenz] += TB;
		}
		else
		{
			SendClientMessage(i, COLOR_GRAD1, "Társadalom Biztosítás: {FC494C}Nem Tudtad fizetni!");
		}
		
		
		SendClientMessage(i, COLOR_GRAD2, string);
		
		if(PlayerInfo[i][pPhousekey] != NINCS)
		{
			Format(string, "Villanyszámla: %d", VILLANSZAMLA);
			PlayerInfo[i][pAccount] -= VILLANSZAMLA;
		}
	}
	else
	{
		Msg(i, "Nincs bankszámlád, ezért nem tudtad fizetni a Számlákat!");
	}*/
	
	new hkey = PlayerInfo[i][pHotelSzoba], hrent;
	if(hkey != NINCS)
	{
		hrent = HotelInfo[hkey][hAra];
		if(PlayerInfo[i][pAccount] < hrent)
		{
			PlayerInfo[i][pHotelSzoba] = NINCS;
			SendClientMessage(i, COLOR_WHITE, "Nem tudod fizetni a hotelszoba bérlési árát, mert nincs pénz a számládon, ezért kirúgtak!");
			hrent = 0;
		}
		else
		{
			SendFormatMessage(i,COLOR_GRAD1, "Hotelszoba Bérlés: $%d", hrent);
			PlayerInfo[i][pAccount] -= hrent;
		}
		FrakcioInfo[LMUNKA_ALLAM][fPenz] += hrent;
		FrakcioUpdate(LMUNKA_ALLAM, FRAKCIO_Cuccok);
	}

	PlayerInfo[i][pPayDayMegkapva] = 1;
	
	PlayerTextFormat(i, "~y~Fizetési~n~~w~Csekk~n~~g~$%s", PenzTordeles(PlayerInfo[i][pAccount] - getegyenleg));
	GameTextForPlayer(i, PlayerText[i], (5 * 1000), 1);
	PlayTarhelySound(i, "MissionCompleted.mp3");
	return 1;
}

fuggveny SetMapName(const mapname[])
{
	if(SzerverTipus == SZT_NORMAL)
	{
		new map[48];
		format(map, sizeof(map), "mapname %s", mapname);
		SendRconCommand(map);
	}
	else if(SzerverTipus == SZT_TESZT)
	{
		SendRconCommand("mapname NONE ");
	}
	return 1;
}

fuggveny split(const strsrc[], strdest[][], delimiter)
{
	new i, li, aNum, len, srclen = strlen(strsrc);
	while(i <= srclen)
	{
		if(strsrc[i] == delimiter || i == srclen)
		{
			len = strmid(strdest[aNum], strsrc, li, i, srclen);
			strdest[aNum][len] = 0;
			li = i + 1;
			aNum++;
		}
		i++;
	}
}
public AdatMentesSQL(playerid)
{
	if((IsValidPlayerID(playerid) && Registered(playerid) && Logged(playerid)) || (IsValidPlayerID(playerid) && PlayerInfo[playerid][pID] == NINCS))
	{
		DebugMessage("%s - AdatMentesSQL(playerid) - START", PlayerName(playerid));
		
		if(PlayerInfo[playerid][pID] == NINCS)
		{
			new query2[512];
			Format(query2, "INSERT INTO %s (`Nev`, `Pass`) VALUES ('%s', '%s')", SQL_DB_Player, PlayerName(playerid, true), PlayerInfo[playerid][pKey]);
			mysql_query(query2);
			
			MysqlGetPlayerId(playerid);
			PlayerInfo[playerid][pRegistered] = 2;
		}
		
		new query[MAX_MYSQL_STRING], formazas[256];
		
		if(Spectate[playerid] != 255)
		{
			PlayerInfo[playerid][pPosX] = Unspec[playerid][sPx];
			PlayerInfo[playerid][pPosY] = Unspec[playerid][sPy];
			PlayerInfo[playerid][pPosZ] = Unspec[playerid][sPz];
			
			PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
			PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
		}

		format(query, sizeof(query), "UPDATE %s SET ", SQL_DB_Player);

		//Fõbb adatok
		//MysqlUpdateStr(query, "Pass", PlayerInfo[playerid][pKey]); //Jelszóváltásnál ugyis menti azt
		
		//MysqlUpdateInt(query, "Szint",PlayerInfo[playerid][pLevel]);
		
		Format(formazas, "%d, %d", PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pSzintetLephet]);
		MysqlUpdateStr(query, "Szint", formazas);
		
		MysqlUpdateInt(query, "Admin",PlayerInfo[playerid][pAdmin]);
		MysqlUpdateInt(query, "DonateRank", PlayerInfo[playerid][pDonateRank]);
		MysqlUpdateInt(query, "UpgradePoints", PlayerInfo[playerid][gPupgrade]);
		MysqlUpdateInt(query, "ConnectedTime", PlayerInfo[playerid][pConnectTime]);
		MysqlUpdateInt(query, "Sex", PlayerInfo[playerid][pSex]);
		MysqlUpdateInt(query, "Age", PlayerInfo[playerid][pAge]);
		MysqlUpdateInt(query, "Origin", PlayerInfo[playerid][pOrigin]);
		MysqlUpdateInt(query, "Married", PlayerInfo[playerid][pMarried]);
		MysqlUpdateStr(query, "MarriedTo", PlayerInfo[playerid][pMarriedTo]);

		//Egyéb adatok
		MysqlUpdateInt(query, "Crimes", WantedLevel[playerid]);
		MysqlUpdateInt(query, "Kills", PlayerInfo[playerid][pKills]);
		
		MysqlUpdateInt(query, "Orvossag",PlayerInfo[playerid][pOrvossag]);
		MysqlUpdateInt(query, "Arrested", PlayerInfo[playerid][pArrested]);
		MysqlUpdateInt(query, "Fem", PlayerInfo[playerid][pFem]);
		MysqlUpdateInt(query, "Fishes", PlayerInfo[playerid][pFishes]);
		MysqlUpdateFlo(query, "Ehseg", PlayerInfo[playerid][pEhseg]);
		MysqlUpdateInt(query, "HeadValue", PlayerInfo[playerid][pHeadValue]);
		MysqlUpdateInt(query, "Jailed", PlayerInfo[playerid][pJailed]);
		MysqlUpdateInt(query, "JailTime", PlayerInfo[playerid][pJailTime]);
		MysqlUpdateInt(query, "Wins", PlayerInfo[playerid][pWins]);
		MysqlUpdateInt(query, "Loses", PlayerInfo[playerid][pLoses]);
		MysqlUpdateInt(query, "Tutorial", PlayerInfo[playerid][pTutorial]);
		MysqlUpdateInt(query, "Szerszamoslada", PlayerInfo[playerid][pSzerszamoslada]);
		MysqlUpdateInt(query, "Warnings", PlayerInfo[playerid][pWarns]);
		MysqlUpdateInt(query, "KWarnings", PlayerInfo[playerid][pKWarns]);
		MysqlUpdateInt(query, "Drogido", PlayerInfo[playerid][pDrogido]);
		MysqlUpdateInt(query, "ASJog",PlayerInfo[playerid][pAS]);
		//Cuccai
		MysqlUpdateInt(query, "Respect", PlayerInfo[playerid][pExp]);
		MysqlUpdateInt(query, "Money", PlayerInfo[playerid][pCash]);
		MysqlUpdateInt(query, "Bank", PlayerInfo[playerid][pAccount]);
		MysqlUpdateInt(query, "Kaja", PlayerInfo[playerid][pKaja]);
		MysqlUpdateInt(query, "Phone", PlayerInfo[playerid][pPnumber]);
		//MysqlUpdateStr(query, "Phone", PlayerInfo[playerid][pPnumber]);
		MysqlUpdateInt(query, "House", PlayerInfo[playerid][pPhousekey]);
		MysqlUpdateInt(query, "Bizz", PlayerInfo[playerid][pPbiskey]);
		MysqlUpdateInt(query, "Kocsikulcs", PlayerInfo[playerid][pPcarkey]);
		MysqlUpdateInt(query, "Raktarengedely", Raktarengedely[playerid]);

		//Müanyag, Cseje, Mák, Cannabis
		Format(formazas, "%d,%d,%d,%d", PlayerInfo[playerid][pMuanyag], PlayerInfo[playerid][pCserje], PlayerInfo[playerid][pMak], PlayerInfo[playerid][pCannabis]);

		//Mati, Kokain, Heroin, Marihuana, Ecstasy, Amfetamin
		Format(formazas, "%s,%d,%d,%d,%d,%d,%d", formazas, PlayerInfo[playerid][pMats], PlayerInfo[playerid][pKokain], PlayerInfo[playerid][pHeroin], PlayerInfo[playerid][pMarihuana], PlayerInfo[playerid][pEcstasy], PlayerInfo[playerid][pAmfetamin]);

		MysqlUpdateStr(query, "Cuccok", formazas);

		//24/7 cuccok v. megvehetõ cuccok
		MysqlUpdateInt(query, "Phonebook", PlayerInfo[playerid][pPhoneBook]);
		MysqlUpdateInt(query, "CDPlayer", PlayerInfo[playerid][pCDPlayer]);
		MysqlUpdateInt(query, "Lotto", PlayerInfo[playerid][pLottoNr]);
		
		Format(formazas, "%d,%d", PlayerInfo[playerid][pFuel][0], PlayerInfo[playerid][pFuel][1]);
		MysqlUpdateStr(query, "Fuel", formazas);
		
		MysqlUpdateInt(query, "Cigihasznalat", PlayerInfo[playerid][pCigiUsed]);
		MysqlUpdateInt(query, "Cigi", PlayerInfo[playerid][pCigi]);
		MysqlUpdateInt(query, "Nikotin", PlayerInfo[playerid][pNikotin]);
		MysqlUpdateInt(query, "Gyujto", PlayerInfo[playerid][pGyujto]);
		MysqlUpdateInt(query, "Pia", PlayerInfo[playerid][pPia]);

		//Munka / család adatok
		MysqlUpdateInt(query, "Job1", PlayerInfo[playerid][pJob1]);
		MysqlUpdateInt(query, "Job2", PlayerInfo[playerid][pJob2]);
		MysqlUpdateInt(query, "ContractTime", PlayerInfo[playerid][pContractTime]);
		MysqlUpdateInt(query, "ContractTime2", PlayerInfo[playerid][pContractTime2]);
		MysqlUpdateInt(query, "Paycheck", PlayerInfo[playerid][pPayCheck]);
		MysqlUpdateInt(query, "PayDay", PlayerInfo[playerid][pPayDay]);
		MysqlUpdateInt(query, "PayDayHad", PlayerInfo[playerid][pPayDayHad]);
		MysqlUpdateInt(query, "Leader", PlayerInfo[playerid][pLeader]);
		MysqlUpdateInt(query, "Member", PlayerInfo[playerid][pMember]);
		MysqlUpdateInt(query, "Rank", PlayerInfo[playerid][pRank]);

		//Skillek
		Format(formazas, "%d, %d, %d, %d, %d, %d", PlayerInfo[playerid][pDetSkill], PlayerInfo[playerid][pSexSkill], PlayerInfo[playerid][pBoxSkill], PlayerInfo[playerid][pLawSkill], PlayerInfo[playerid][pMechSkill], PlayerInfo[playerid][pJackSkill]);
		Format(formazas, "%s, %d, %d, %d", formazas, PlayerInfo[playerid][pCarSkill], PlayerInfo[playerid][pNewsSkill], PlayerInfo[playerid][pDrugsSkill]);
		Format(formazas, "%s, %d, %d, %d", formazas, PlayerInfo[playerid][pRiasztoSkill], PlayerInfo[playerid][pHackingSkill],PlayerInfo[playerid][pFegyokerSkill]);

		MysqlUpdateStr(query, "Skillek", formazas);

		//Jogsik
		Format(formazas, "%d, %d, %d, %d, %d, %d, %d, %d", PlayerInfo[playerid][pCarLic], PlayerInfo[playerid][pFlyLic], PlayerInfo[playerid][pBoatLic], PlayerInfo[playerid][pFishLic], PlayerInfo[playerid][pGunLic], PlayerInfo[playerid][pMotorJogsi], PlayerInfo[playerid][pCsomagszallitoJogsi] ,PlayerInfo[playerid][pOperator]);

		MysqlUpdateStr(query, "Jogsik", formazas);

		//Skin
		MysqlUpdateInt(query, "Skin", PlayerInfo[playerid][pChar]);
		MysqlUpdateInt(query, "Model", PlayerInfo[playerid][pModel]);

		//Upgrades
		Format(formazas, "%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pAlcoholPerk], PlayerInfo[playerid][pDrugPerk], PlayerInfo[playerid][pMiserPerk], PlayerInfo[playerid][pPainPerk], PlayerInfo[playerid][pTraderPerk], PlayerInfo[playerid][pOvadek]);

		MysqlUpdateStr(query, "Upgrades", formazas);

		//Crash
		new Float:pos[3], Int, VW;
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		
		Int = GetPlayerInterior(playerid);
		VW = GetPlayerVirtualWorld(playerid);

		if(VW == 123456789) VW = 0;

		new Float:eletpajzs;
		GetPlayerArmour(playerid, eletpajzs);
		Format(formazas, "%.1f, %.1f", JatekosElete[playerid], eletpajzs);
		MysqlUpdateStr(query, "KilepesElet", formazas);
		
		new kilepesfegyverek[128], kilepestoltenyek[128];
		
		format(kilepesfegyverek, sizeof(kilepesfegyverek), "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d",
		PlayerInfo[playerid][pFegyver][0], PlayerInfo[playerid][pFegyver][1], PlayerInfo[playerid][pFegyver][2], PlayerInfo[playerid][pFegyver][3],
		PlayerInfo[playerid][pFegyver][4], PlayerInfo[playerid][pFegyver][5], PlayerInfo[playerid][pFegyver][6], PlayerInfo[playerid][pFegyver][7],
		PlayerInfo[playerid][pFegyver][8], PlayerInfo[playerid][pFegyver][9], PlayerInfo[playerid][pFegyver][10], PlayerInfo[playerid][pFegyver][11]);
		
		format(kilepestoltenyek, sizeof(kilepestoltenyek), "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d",
		PlayerInfo[playerid][pTolteny][0],PlayerInfo[playerid][pTolteny][1],PlayerInfo[playerid][pTolteny][2],PlayerInfo[playerid][pTolteny][3],
		PlayerInfo[playerid][pTolteny][4],PlayerInfo[playerid][pTolteny][5],PlayerInfo[playerid][pTolteny][6],PlayerInfo[playerid][pTolteny][7],
		PlayerInfo[playerid][pTolteny][8],PlayerInfo[playerid][pTolteny][9],PlayerInfo[playerid][pTolteny][10],PlayerInfo[playerid][pTolteny][11]);
		
		MysqlUpdateStr(query, "KilepesFegyver", kilepesfegyverek);
		MysqlUpdateStr(query, "KilepesTolteny", kilepestoltenyek);
		
		//Egyéb
		MysqlUpdateInt(query, "Muted", PlayerInfo[playerid][pMuted]);
		
		MysqlUpdateInt(query, "UtoljaraAktiv", gettime());
		
		if(Tevezik[playerid] == NINCS)
		{
			MysqlUpdateInt(query, "Inter", Int);
			MysqlUpdateInt(query, "Local", VW);
			MysqlUpdateFlo(query, "Pos_x",pos[0]);
			MysqlUpdateFlo(query, "Pos_y",pos[1]);
			MysqlUpdateFlo(query, "Pos_z",pos[2]);
		}
		MysqlUpdateInt(query, "CarTime", PlayerInfo[playerid][pCarTime]);
		MysqlUpdateInt(query, "Lokator", PlayerInfo[playerid][pLokator]);
		MysqlUpdateInt(query, "Cigifuggoseg", PlayerInfo[playerid][pCigiFuggoseg]);
		MysqlUpdateInt(query, "NID", PlayerInfo[playerid][pNIDTag]);
		MysqlUpdateInt(query, "NIDRang", PlayerInfo[playerid][pNIDRang]);
		MysqlUpdateInt(query, "Kituntetes", PlayerInfo[playerid][pKituntetes]);
		MysqlUpdateInt(query, "Szallitott", PlayerInfo[playerid][pSzallitott]);
		MysqlUpdateInt(query, "Spawnchange", PlayerInfo[playerid][pSpawnchange]);
		MysqlUpdateStr(query, "AdminAlnev", PlayerInfo[playerid][pAdminAlnev]);
		
		MysqlUpdateInt(query, "TeloEgyenleg", PlayerInfo[playerid][pTeloEgyenleg]);
		MysqlUpdateInt(query, "Kotszer", PlayerInfo[playerid][pKotszer]);
		//new szoveg[50];
		MysqlUpdateInt(query, "Utlevel", PlayerInfo[playerid][pUtlevel]);
		MysqlUpdateInt(query, "Stilus", PlayerInfo[playerid][pStilus]);
		
		Format(formazas, "%d,%d,%d", PlayerInfo[playerid][pBankSzamla], PlayerInfo[playerid][pBankSzamlaSzam], PlayerInfo[playerid][pBankSzamlaJelszo]);
		MysqlUpdateStr(query, "BankSzamla", formazas);
		
		MysqlUpdateInt(query, "C4", PlayerInfo[playerid][pC4]);
		MysqlUpdateInt(query, "Hitman", PlayerInfo[playerid][pHitman]);
		MysqlUpdateStr(query, "HitmanNev", PlayerInfo[playerid][pHitmanNev]);
		
		Format(formazas, "%d,%d", PlayerInfo[playerid][pPremiumCsomag], PlayerInfo[playerid][pPremiumPont]);
		MysqlUpdateStr(query, "Premium", formazas);
		
		MysqlUpdateInt(query, "PremiumIdo", PlayerInfo[playerid][pPremiumIdo]);
		MysqlUpdateInt(query, "Berlo", PlayerInfo[playerid][pBerlo]);
		
		if(PlayerOnline[playerid]) MysqlUpdateInt(query, "Online", 1);
		else MysqlUpdateInt(query, "Online", 0);
		
		Format(formazas, "%d, %d, %d", PlayerInfo[playerid][pSzemelyi], PlayerInfo[playerid][pLakcimkartya], PlayerInfo[playerid][pMunkaVallalasi]);
		MysqlUpdateStr(query, "Papirok", formazas);

		Format(formazas, "%d, %d, %d, %d, %d", PlayerInfo[playerid][pHitel], PlayerInfo[playerid][pFelvettHitel], PlayerInfo[playerid][pHitelOra], PlayerInfo[playerid][pHitelElteltOra], PlayerInfo[playerid][pZarolva]);
		MysqlUpdateStr(query, "Hitel", formazas);
		MysqlUpdateStr(query, "Jegy", PlayerInfo[playerid][pJegy]);
		
		Format(formazas, "%d, %d, %d, %d, %d, %d, %d", ElveszIdo[playerid], Animban[playerid], DutyIdo[playerid], PlayerCuffed[playerid], RadioElveve[playerid], Kezenlove[playerid], PlayerInfo[playerid][pHifi]);
		MysqlUpdateStr(query, "Egyeb", formazas);

		MysqlUpdateInt(query, "SSS", PlayerInfo[playerid][pSSS]);
		MysqlUpdateStr(query, "JailOK", PlayerInfo[playerid][pJailOK]);

		format(formazas, 50, "%d,%d,%d,%d", PlayerInfo[playerid][pLkocsi], PlayerInfo[playerid][pLkocsiar], PlayerInfo[playerid][pLaptop], PlayerInfo[playerid][pHack]);
		MysqlUpdateStr(query, "Tolvaj", formazas);
		new FSkill[128],FSkill2[24];
		for(new i=0; i <= 10; i++)
		{
			if(i == 10)
				Format(FSkill2, "%d",PlayerInfo[playerid][pFegyverSkill][10]);
			else
				Format(FSkill2, "%d, ",PlayerInfo[playerid][pFegyverSkill][i]);
			
			strcat(FSkill,FSkill2,128);
		}
		MysqlUpdateStr(query, "Bicikli",FSkill);
		
		MysqlUpdateInt(query, "Szemuveg", PlayerInfo[playerid][pSzemuveg]);//Szemüveg
		MysqlUpdateInt(query, "VillanySzerelo", JarmuKulcs[playerid]);
		MysqlUpdateStr(query, "JailtAdta", PlayerInfo[playerid][pJailtAdta]);
		MysqlUpdateInt(query, "Cso", PlayerInfo[playerid][pMaszk]);//

		Format(formazas, "%d,%d,%d",PlayerInfo[playerid][pBot],PlayerInfo[playerid][pCsali],PlayerInfo[playerid][pDamil]);
		MysqlUpdateStr(query, "Horgaszat", formazas);
		MysqlUpdateInt(query, "Uveg",UresUveg[playerid]);
		MysqlUpdateInt(query, "VokiToki",PlayerInfo[playerid][pVokitoki]);
		MysqlUpdateInt(query, "Helyszinelo",PlayerInfo[playerid][pHelyszinelo]);
		MysqlUpdateInt(query, "Vontatokotel",PlayerInfo[playerid][pVontatoKotel]);
		
		new Inventory2[24];
		for(new i=0; i < INV_SLOT; i++)
		{
			if(i == INV_SLOT-1)
				Format(Inventory2, "%d",PlayerInfo[playerid][pInventory][INV_SLOT-1]);
			else
				Format(Inventory2, "%d, ",PlayerInfo[playerid][pInventory][i]);
			
			strcat(formazas,Inventory2,128);
		}
		MysqlUpdateStr(query, "Inventory",formazas);
	
		MysqlUpdateInt(query, "BankKartya",PlayerInfo[playerid][pBankKartya]);

		MysqlUpdateInt(query, "Terkep",PlayerInfo[playerid][pTerkep]);
		MysqlUpdateInt(query, "Doboz",Doboz[playerid]);
		MysqlUpdateInt(query, "Csavarhuzo",PlayerInfo[playerid][pCsavarhuzo]);

		Format(formazas, "%d,%d,%d",PlayerInfo[playerid][pJelzes][0],PlayerInfo[playerid][pJelzes][1],PlayerInfo[playerid][pJelzes][2]);
		MysqlUpdateStr(query, "Jelzes",formazas);
		
		Format(formazas, "%d,%d",PlayerInfo[playerid][pC2],PlayerInfo[playerid][pC2Taska]);
		MysqlUpdateStr(query, "C2",formazas);
		
		Format(formazas, "%d,%d,%d",JatekosZsak[playerid][0],JatekosZsak[playerid][1],JatekosZsak[playerid][2]);
		MysqlUpdateStr(query, "Zsak",formazas);

		Format(formazas, "%d,%d,%d",PlayerInfo[playerid][pNyelv],PlayerInfo[playerid][pNyelvTanulas][0],PlayerInfo[playerid][pNyelvTanulas][1]);
		MysqlUpdateStr(query, "Nyelv",formazas);
		
	    new nyelvstr2[24];
		for(new i=0; i < MAX_NYELV; i++)
		{
			if(i == MAX_NYELV-1)
				Format(nyelvstr2, "%d",PlayerInfo[playerid][pNyelvTanulva][i]);
			else
				Format(nyelvstr2, "%d, ",PlayerInfo[playerid][pNyelvTanulva][i]);

			strcat(formazas,nyelvstr2,128);
		}
		MysqlUpdateStr(query, "NyelvTanulva",formazas);
		
		MysqlUpdateFlo(query, "Almossag",PlayerInfo[playerid][pAlmossag]);
		MysqlUpdateInt(query, "Valasz",PlayerInfo[playerid][pVA]);
		MysqlUpdateInt(query, "RPPont",PlayerInfo[playerid][pRPPont]);
		MysqlUpdateInt(query, "Cp",PlayerInfo[playerid][pCp]);
		MysqlUpdateInt(query, "Csipogo",PlayerInfo[playerid][pCsipogo]);
        MysqlUpdateInt(query, "Sapka",PlayerInfo[playerid][pSapka]);
		MysqlUpdateInt(query, "Swat", PlayerInfo[playerid][pSWATTag]);
		MysqlUpdateInt(query, "SwatRang", PlayerInfo[playerid][pSWATRang]);

		Format(formazas, "%d, %d, %d, %d, %d, %d, %d, %d", PlayerInfo[playerid][pAdoHaz], PlayerInfo[playerid][pAdoHazHol], PlayerInfo[playerid][pAdoSzint], PlayerInfo[playerid][pAdoJarmu], PlayerInfo[playerid][pAdoKitoltve], PlayerInfo[playerid][pAdo], PlayerInfo[playerid][pAdoFizetve], PlayerInfo[playerid][pAdoEllenorizve]);
		MysqlUpdateStr(query, "Adok", formazas);
		
		Format(formazas, "%d, %d, %d, %d, %d", PlayerInfo[playerid][pAdovan][0],PlayerInfo[playerid][pAdovan][1],PlayerInfo[playerid][pAdovan][2],PlayerInfo[playerid][pAdovan][3],PlayerInfo[playerid][pAdovan][4]);
		MysqlUpdateStr(query, "AdoVan", formazas);
		
		new Ismeros2[24];
		for(new i=0; i < MAX_ISMEROS; i++)
		{
			if(i == MAX_ISMEROS-1)
				Format(Ismeros2, "%d",PlayerInfo[playerid][pIsmeros][MAX_ISMEROS-1]);
			else
				Format(Ismeros2, "%d, ",PlayerInfo[playerid][pIsmeros][i]);

			strcat(formazas,Ismeros2,128);
		}
		MysqlUpdateStr(query, "Ismerosok",formazas);
		MysqlUpdateStr(query, "UtoljaraAktivIP", PlayerIP(playerid));
		
		Format(formazas, "%d,%d",PlayerInfo[playerid][pStand],PlayerInfo[playerid][pStandEngedely]);
		MysqlUpdateStr(query, "StandData",formazas);
		MysqlUpdateInt(query, "adminido", PlayerInfo[playerid][pDutyIdo]);
		MysqlUpdateInt(query, "onlineido", PlayerInfo[playerid][pOnlineIdo]);
		
		Format(formazas, "%d,%d,%d,%d,%d,%d,%d", PlayerInfo[playerid][pOktatasok][OKTATAS_AUTO], PlayerInfo[playerid][pOktatasok][OKTATAS_MOTOR], PlayerInfo[playerid][pOktatasok][OKTATAS_REPULO], PlayerInfo[playerid][pOktatasok][OKTATAS_HORGASZ], PlayerInfo[playerid][pOktatasok][OKTATAS_HAJO], PlayerInfo[playerid][pOktatasok][OKTATAS_Csomagszallito], PlayerInfo[playerid][pOktatasok][OKTATAS_FEGYVER]);
		MysqlUpdateStr(query, "Oktatasok",formazas);
		MysqlUpdateInt(query, "Kresz",PlayerInfo[playerid][pKresz]);
		
		MysqlUpdateInt(query, "HotelSzoba", PlayerInfo[playerid][pHotelSzoba]);
		
		Format(formazas, "%s,%d,%d", ElvettRadio[playerid][rNev], ElvettRadio[playerid][rFrakcio], ElvettRadio[playerid][rRang]);
		MysqlUpdateStr(query, "ERadio", formazas);
		
		MysqlUpdateInt(query, "Szerelo", PlayerInfo[playerid][pSzerelo]);
		MysqlUpdateInt(query, "SzereloRang", PlayerInfo[playerid][pSzereloRang]);
		
		MysqlUpdateInt(query, "HazMasodTulaj", PlayerInfo[playerid][pHazMasodtulaj]);
		
		MysqlUpdateInt(query, "AdminAlnevBe", PlayerInfo[playerid][pAdminAlnevBe]);
		
		Format(formazas,"%d",DivatInfo[SLOT_SAPKA][playerid][dVan]);
		Format(formazas,"%s,%.3f,%.3f,%.3f",formazas,DivatInfo[SLOT_SAPKA][playerid][dPosX],DivatInfo[SLOT_SAPKA][playerid][dPosY],DivatInfo[SLOT_SAPKA][playerid][dPosZ]);
		Format(formazas,"%s,%.3f,%.3f,%.3f",formazas,DivatInfo[SLOT_SAPKA][playerid][dRotX],DivatInfo[SLOT_SAPKA][playerid][dRotY],DivatInfo[SLOT_SAPKA][playerid][dRotZ]);
		Format(formazas,"%s,%.3f,%.3f,%.3f",formazas,DivatInfo[SLOT_SAPKA][playerid][dScaleX],DivatInfo[SLOT_SAPKA][playerid][dScaleY],DivatInfo[SLOT_SAPKA][playerid][dScaleZ]);
		Format(formazas,"%s,%d",formazas,DivatInfo[SLOT_SAPKA][playerid][dmodelid]);
		MysqlUpdateStr(query,"Divat_Sapka",formazas);
		
		Format(formazas,"%d",DivatInfo[SLOT_SZEMUVEG][playerid][dVan]);
		Format(formazas,"%s,%.3f,%.3f,%.3f",formazas,DivatInfo[SLOT_SZEMUVEG][playerid][dPosX],DivatInfo[SLOT_SZEMUVEG][playerid][dPosY],DivatInfo[SLOT_SZEMUVEG][playerid][dPosZ]);
		Format(formazas,"%s,%.3f,%.3f,%.3f",formazas,DivatInfo[SLOT_SZEMUVEG][playerid][dRotX],DivatInfo[SLOT_SZEMUVEG][playerid][dRotY],DivatInfo[SLOT_SZEMUVEG][playerid][dRotZ]);
		Format(formazas,"%s,%.3f,%.3f,%.3f",formazas,DivatInfo[SLOT_SZEMUVEG][playerid][dScaleX],DivatInfo[SLOT_SZEMUVEG][playerid][dScaleY],DivatInfo[SLOT_SZEMUVEG][playerid][dScaleZ]);
		Format(formazas,"%s,%d",formazas,DivatInfo[SLOT_SZEMUVEG][playerid][dmodelid]);
		MysqlUpdateStr(query,"Divat_Szemuveg",formazas);
		
		Format(formazas,"%d",DivatInfo[SLOT_KARORA][playerid][dVan]);
		Format(formazas,"%s,%.3f,%.3f,%.3f",formazas,DivatInfo[SLOT_KARORA][playerid][dPosX],DivatInfo[SLOT_KARORA][playerid][dPosY],DivatInfo[SLOT_KARORA][playerid][dPosZ]);
		Format(formazas,"%s,%.3f,%.3f,%.3f",formazas,DivatInfo[SLOT_KARORA][playerid][dRotX],DivatInfo[SLOT_KARORA][playerid][dRotY],DivatInfo[SLOT_KARORA][playerid][dRotZ]);
		Format(formazas,"%s,%.3f,%.3f,%.3f",formazas,DivatInfo[SLOT_KARORA][playerid][dScaleX],DivatInfo[SLOT_KARORA][playerid][dScaleY],DivatInfo[SLOT_KARORA][playerid][dScaleZ]);
		Format(formazas,"%s,%d",formazas,DivatInfo[SLOT_KARORA][playerid][dmodelid]);
		MysqlUpdateStr(query,"Divat_Karora",formazas);
		
		MysqlUpdateFlo(query, "Szomjusag", PlayerInfo[playerid][pSzomjusag]);		
		MysqlUpdateInt(query, "Csoport", PlayerInfo[playerid][pCsoport]);		
		MysqlUpdateInt(query, "ShowInfoBar", PlayerInfo[playerid][pShowInfoBar]);		
		MysqlUpdateInt(query, "PayDayMegkapva", PlayerInfo[playerid][pPayDayMegkapva]);
		
		Format(formazas, "%d, %d", PlayerInfo[playerid][pCsomagszallitoSkill], PlayerInfo[playerid][pValamiSkill]);
		MysqlUpdateStr(query, "MunkaSkill", formazas);
		
		MysqlFinalUpdate(query, PlayerInfo[playerid][pID]);
		
		DebugMessage("%s - AdatMentesSQL(playerid) - END", PlayerName(playerid));
	}
	else
	{
		DebugMessage("%s - AdatMentesSQL(playerid) - NEM TELJESÜLT A FELTÉTEL", PlayerName(playerid));
	}
	return 1;
}

fuggveny SQLIDBolNev(azonosito[])
{
	new jatekos = NINCS;
	PlayerForeach(i)
	{
	    if(egyezik(azonosito, RandomPlayerID[i]))
	    {
			jatekos = i;
			break;
	    }
	}
	return jatekos;
}

fuggveny GetWeaponModel(weaponid)
{
	switch(weaponid)
	{
	    case 1:
	        return 331;

		case 2..8:
		    return weaponid+331;

        case 9:
		    return 341;

		case 10..15:
			return weaponid+311;

		case 16..18:
		    return weaponid+326;

		case 22..29:
		    return weaponid+324;

		case 30,31:
		    return weaponid+325;

		case 32:
		    return 372;

		case 33..45:
		    return weaponid+324;

		case 46:
		    return 371;
	}
	return 0;
}

stock KezdoTesztSpawn(playerid)
{
	if(!IsPlayerNPC(playerid) && Logged(playerid) && PlayerInfo[playerid][pTutorial] == 0)
	{
		#define KEZDOSPAWN 1.808619, 32.384357, 1199.593750
		if(!PlayerToPoint(15.0, playerid, KEZDOSPAWN))
		{
			Freeze(playerid, 3000);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, playerid);
			SetPlayerPos(playerid, KEZDOSPAWN);
			
			SCM(playerid, COLOR_PIROS, " ");
			Msg(playerid, "Várj egy adminisztrátorra míg engedélyezi számodra a játékot!", COL_PIROS);
			ABroadCastFormat(COLOR_LIGHTRED, 1, "<< [%d]%s vár az RP tesztre! >>", playerid, PlayerName(playerid));
		}
		#undef KEZDOSPAWN
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(!IsValidPlayerID(playerid)) return 0;
	
	//DebugMessage("OnPlayerUpdate(%d) -> START", playerid);
	
	if(IsAdminSzolis(playerid, NINCS))
	{
		SetHealth(playerid, MAXHP);
		//if(Sofor(playerid)) RepairVehicle(GetPlayerVehicleID(playerid));
	}
	
	FegyverCheatCheck(playerid);
	
	new Float:Velocity[3], Float:MaxVelocity = 1.1;
	GetPlayerVelocity(playerid, Velocity[0], Velocity[1], Velocity[2]);
	if(Velocity[0] > MaxVelocity || Velocity[1] > MaxVelocity || Velocity[2] > MaxVelocity)
	{
		CallRemoteFunction("OnJunkBusterKick", "is", playerid, "Csalás! [fugga/repülés/slapper]");
		return 0;
	}
	
	if(IsPlayerInAnyVehicle(playerid) && !IsRicardo(playerid))
	{
		new kocsi = GetPlayerVehicleID(playerid);
		if(TiltottJarmu(GetVehicleModel(kocsi)))
		{
			RemovePlayerFromVehicle(playerid);
			SetVehicleParamsForPlayer(kocsi, playerid, 0, 1);
			iMsg(playerid, "Ez egy tiltott jármû!");
			return 0;
		}
	}
	
	JailCounter(playerid);
	
	if(Admin(playerid))
	{
		if(noclipdata[playerid][cameramode] == CAMERA_MODE_FLY)
		{
			new keys,ud,lr;
			GetPlayerKeys(playerid,keys,ud,lr);

			if(noclipdata[playerid][mode] && (GetTickCount() - noclipdata[playerid][lastmove] > 100))
			{
				MoveCamera(playerid);
			}

			if(noclipdata[playerid][udold] != ud || noclipdata[playerid][lrold] != lr)
			{
				if((noclipdata[playerid][udold] != 0 || noclipdata[playerid][lrold] != 0) && ud == 0 && lr == 0)
				{
					StopPlayerObject(playerid, noclipdata[playerid][flyobject]);
					noclipdata[playerid][mode]      = 0;
					noclipdata[playerid][accelmul]  = 0.0;
				}
				else
				{   
					noclipdata[playerid][mode] = GetMoveDirectionFromKeys(ud, lr);
					MoveCamera(playerid);
				}
			}
			noclipdata[playerid][udold] = ud; noclipdata[playerid][lrold] = lr; 
		}
	}
	
	//MuszerFalUpdate(playerid);
	
	P_OnPlayerUpdate(playerid);
	
	if(!GetPVarFloat(playerid, "RaktarosMelo_X"))
	{
		FegyverAttachUpdate(playerid); //fegyverlátszódás
	}
	
	GetPlayerHealth(playerid, iNewPlayerHealth[playerid]);
	if(iNewPlayerHealth[playerid] != iPlayerHealth[playerid])
	{
		OnPlayerHealthChange(playerid, iNewPlayerHealth[playerid], iPlayerHealth[playerid]);
		iPlayerHealth[playerid] = iNewPlayerHealth[playerid];
	}

	GetPlayerArmour(playerid, iNewPlayerArmour[playerid]);
	if(iNewPlayerArmour[playerid] != iPlayerArmour[playerid])
	{
		OnPlayerArmourChange(playerid, iNewPlayerArmour[playerid], iPlayerArmour[playerid]);
		iPlayerArmour[playerid] = iNewPlayerArmour[playerid];
	}

	iNewPlayerMoney[playerid] = GetPlayerMoney(playerid);
	if(iNewPlayerMoney[playerid] != iPlayerMoney[playerid])
	{
		OnPlayerMoneyChange(playerid, iNewPlayerMoney[playerid], iPlayerMoney[playerid]);
		iPlayerMoney[playerid] = iNewPlayerMoney[playerid];
	}

	iNewPlayerVirtualWorld[playerid] = GetPlayerVirtualWorld(playerid);
	if(iNewPlayerVirtualWorld[playerid] != iPlayerVirtualWorld[playerid])
	{
		OnPlayerVirtualWorldChange(playerid, iNewPlayerVirtualWorld[playerid], iPlayerVirtualWorld[playerid]);
		iPlayerVirtualWorld[playerid] = iNewPlayerVirtualWorld[playerid];
	}
	iNewPlayerScore[playerid] = GetPlayerScore(playerid);
	if(iNewPlayerScore[playerid] != iPlayerScore[playerid])
	{
		OnPlayerScoreChange(playerid, iNewPlayerScore[playerid], iPlayerScore[playerid]);
		iPlayerScore[playerid] = iNewPlayerScore[playerid];
	}

	iNewPlayerTeam[playerid] = GetPlayerTeam(playerid);
	if(iNewPlayerTeam[playerid] != iPlayerTeam[playerid])
	{
		OnPlayerTeamChange(playerid, iNewPlayerTeam[playerid], iPlayerTeam[playerid]);
		iPlayerTeam[playerid] = iNewPlayerTeam[playerid];
	}

	iNewPlayerSkin[playerid] = GetPlayerSkin(playerid);
	if(iNewPlayerSkin[playerid] != iPlayerSkin[playerid])
	{
		OnPlayerSkinChange(playerid, iNewPlayerSkin[playerid], iPlayerSkin[playerid]);
		iPlayerSkin[playerid] = iNewPlayerSkin[playerid];
	}

	iNewPlayerWeapon[playerid] = GetPlayerWeapon(playerid);
	if(iNewPlayerWeapon[playerid] != iPlayerWeapon[playerid])
	{
		OnPlayerWeaponChange(playerid, iNewPlayerWeapon[playerid], iPlayerWeapon[playerid]);
		iPlayerWeapon[playerid] = iNewPlayerWeapon[playerid];
	}

	/*if(SebessegKorlat[playerid] != 0 && KocsibanVan[playerid] && RendesJatekos(playerid))
		SebessegKorlatozoPlayer(playerid);*/
	
	new	Float:hp; 
	GetPlayerHealth(playerid, hp); 
	if(hp >= 99) SetPlayerDrunkLevel(playerid, 0); 
	else if(hp <= 10) SetPlayerDrunkLevel(playerid, 1000);  
	new vehicleid = GetPlayerVehicleID(playerid); 
	if(vehicleid) 
	{
		GetVehicleHealth(vehicleid, hp); 
		if(hp != vhealth[playerid]) 
		{ 
			if(hp < vhealth[playerid]) OnVehicleLoseHealth(playerid, vehicleid, floatround(vhealth[playerid] - hp)); 
			vhealth[playerid] = hp; 
		} 
		GetVehicleVelocity(vehicleid, velX[playerid], velY[playerid], velZ[playerid]); 
	}
	//DebugMessage("OnPlayerUpdate(%d) -> END", playerid);
	return 1;
}

fuggveny LoadBiz()
{
	PrintValaszto("Bizniszek betöltése folyamatban");
	
	new 
		idx = 0,
		where[32],
		query[128], datas[MAX_MYSQL_STRING], data[50][300]
	;
	
	while(idx < MAX_BIZ)
	{
		Format(where, "bid = '%d' ", idx);
		
		if(Mysql_Num("biz", where) == 1)
		{
			Format(query, "SELECT * FROM biz WHERE %s", where);
			mysql_query(query);
			
			mysql_store_result();
			mysql_fetch_row(datas, "|");
			mysql_free_result();
			split(datas, data, '|');

			CreateBiznisz(strval(data[0]));
		}
		else
		{
			bInfo[idx][bID] = NINCS;
		}
		idx ++;
	}
	PrintValaszto("Minden biznisz betöltve");
	/* ############################################################# */
	idx = 0;
	PrintValaszto("Vásárlási helyek betöltése folyamatban");
	while(idx < MAX_BUYS)
	{
		Format(where, "bid = '%d' ", idx);
		
		if(Mysql_Num("buys", where) == 1)
		{
			Format(query, "SELECT * FROM buys WHERE %s", where);
			mysql_query(query);
			
			mysql_store_result();
			mysql_fetch_row(datas, "|");
			mysql_free_result();
			split(datas, data, '|');

			CreateVasarlasHely(strval(data[0]));
		}
		else
		{
			buInfo[idx][buID] = NINCS;
		}
		idx ++;
	}
	PrintValaszto("Minden vásárlási hely betöltve");
	return 1;
}

fuggveny LoadFrakcioSQL()
{
	//#define KellInfo
	
	new idx;
	#if defined KellInfo
		new fStr[256];
	#endif
	PrintValaszto("Frakciók betöltése folyamatban");
	while(idx < MAX_FRAKCIO)
	{
		new where[32];
		Format(where, "id='%d'",idx);
		
		if(Mysql_Num("frakciok", where) == 1)
		{
			new query[128];
			Format(query, "SELECT * FROM frakciok WHERE %s",where);
			mysql_query(query);
			
			new datas[MAX_MYSQL_STRING],data[50][300];
			mysql_store_result();
			mysql_fetch_row(datas, "|");
			mysql_free_result();
			split(datas,data,'|');
			#if defined KellInfo
				printf("====================== Frakcio %d ======================",idx);
			#endif
				FrakcioInfo[idx][fPosX] = floatstr(data[1]);
				FrakcioInfo[idx][fPosY] = floatstr(data[2]);
				FrakcioInfo[idx][fPosZ] = floatstr(data[3]);
			#if defined KellInfo
				Format(fStr, "PosX, PosY, PosZ: %f, %f, %f",floatstr(data[1]),floatstr(data[2]),floatstr(data[3]));
				print(fStr);
			#endif
			new splits[50][100];
			
			split(data[4], splits, ',');
			FrakcioInfo[idx][fPenz] = strval(splits[0]);
			FrakcioInfo[idx][fMati] = strval(splits[1]);
			FrakcioInfo[idx][fHeroin] = strval(splits[2]);
			FrakcioInfo[idx][fKokain] = strval(splits[3]);
			FrakcioInfo[idx][fMarihuana] = strval(splits[4]);
			FrakcioInfo[idx][fKaja] = strval(splits[5]);
			#if defined KellInfo
				Format(fStr, "Penz: %d, Mati: %d, Heroin: %d, Kokain: %d, Marihuana: %d, Kaja: %d",strval(splits[0]),strval(splits[1]),strval(splits[2]),strval(splits[3]),strval(splits[4]),strval(splits[5]));
				print(fStr);
			#endif
			
			FrakcioInfo[idx][fMinrang] = strval(data[5]);
			FrakcioInfo[idx][fObject] = strval(data[6]);
			FrakcioInfo[idx][fPosA] = floatstr(data[7]);
			
			FrakcioInfo[idx][fNev] = strval(data[8]);
			
			#if defined KellInfo
				Format(fStr, "MinRang: %d, Object: %d, PosA: %f, ObjectID: %d",strval(data[5]),strval(data[6]),floatstr(data[7]),strval(data[8]));
				print(fStr);
			#endif
			//FrakcioInfo[idx][fJelszo],
			split(data[9], splits, ',');
			FrakcioInfo[idx][fCombat] = strval(splits[0]);
			FrakcioInfo[idx][fSniper] = strval(splits[1]);
			FrakcioInfo[idx][fDeagle] = strval(splits[2]);
			FrakcioInfo[idx][fSilenced] = strval(splits[3]);
			FrakcioInfo[idx][fMp5] = strval(splits[4]);
			FrakcioInfo[idx][fM4] = strval(splits[5]);
			FrakcioInfo[idx][fShotgun] = strval(splits[6]);
			#if defined KellInfo
				Format(fStr, "Combat: %d Sniper: %d Deagle: %d Silenced: %d Mp5: %d M4 Shoti: %d",strval(splits[0]),strval(splits[1]),strval(splits[2]),strval(splits[3]),strval(splits[4]),strval(splits[5]),strval(splits[6]));
				print(fStr);
			#endif
			FrakcioInfo[idx][fUtolsoTamadas] = strval(data[10]);
			#if defined KellInfo
				Format(fStr, "UtolsoTamadas:%d",data[10]);
				print(fStr);
			#endif
			
			sscanf(data[11], "p<,>dddddddddddddddd",
			FrakcioInfo[idx][fFizetes][0],FrakcioInfo[idx][fFizetes][1],
			FrakcioInfo[idx][fFizetes][2],FrakcioInfo[idx][fFizetes][3],
			FrakcioInfo[idx][fFizetes][4],FrakcioInfo[idx][fFizetes][5],
			FrakcioInfo[idx][fFizetes][6],FrakcioInfo[idx][fFizetes][7],
			FrakcioInfo[idx][fFizetes][8],FrakcioInfo[idx][fFizetes][9],
			FrakcioInfo[idx][fFizetes][10],FrakcioInfo[idx][fFizetes][11],
			FrakcioInfo[idx][fFizetes][12],FrakcioInfo[idx][fFizetes][13],
			FrakcioInfo[idx][fFizetes][14],FrakcioInfo[idx][fFizetes][15]);

			split(data[12], splits, ',');
			for(new i=1; i < MAX_FRAKCIO; i++)
			{
				FrakcioInfo[idx][fSzovetseges][i] = strval(splits[i]);
			}
			#if defined KellInfo
				Format(fStr, "Szovi1: %d Szovi2: %d",strval(splits[0]), strval(splits[1]));
				print(fStr);
			#endif
			
			split(data[13], splits, ',');
			for(new i=0; i < FEGYVERRAKTAR_SLOT; i++)
			{
				FrakcioInfo[idx][fFegyver][i] = strval(splits[i]);
			}
			split(data[14], splits, ',');
			for(new i=0; i < FEGYVERRAKTAR_SLOT; i++)
			{
				FrakcioInfo[idx][fTolteny][i] = strval(splits[i]);
			}
			split(data[15], splits, ',');
			for(new i=0; i < FEGYVERRAKTAR_SLOT; i++)
			{
				FrakcioInfo[idx][fMelleny][i] = strval(splits[i]);
			}
			FrakcioInfo[idx][fJelado] = strval(data[16]);
			
			split(data[17], splits, ',');
			FrakcioInfo[idx][fJeladoPos][0] = floatstr(splits[0]);
			FrakcioInfo[idx][fJeladoPos][1] = floatstr(splits[1]);
			FrakcioInfo[idx][fJeladoPos][2] = floatstr(splits[2]);
			FrakcioInfo[idx][fJeladoPos][3] = floatstr(splits[3]);
			
			/*if(FrakcioInfo[idx][fJeladoPos][0] != 0.0 && FrakcioInfo[idx][fJeladoPos][1] != 0.0)
				FrakcioInfo[idx][fJeladoObject] = CreateDynamicObject(1595, FrakcioInfo[idx][fJeladoPos][0], FrakcioInfo[idx][fJeladoPos][1], FrakcioInfo[idx][fJeladoPos][2]+3.0, 0.0, 0.0, FrakcioInfo[idx][fJeladoPos][3]);*/
			
			FrakcioInfo[idx][fJelErosito] = strval(data[18]);
			FrakcioInfo[idx][fGyemant] = strval(data[19]);
			strmid(FrakcioInfo[idx][fGyemantPW], data[20], 0, strlen(data[20]), 32);
			strmid(FrakcioInfo[idx][fJelszo], data[21], 0, strlen(data[21]), 32);
			FrakcioInfo[idx][fLimit] = strval(data[22]);
			
			split(data[23], splits, ',');
			for(new i = 0; i < (MAX_FRAKCIO_RANG+1); i++)
			{
				strmid(FrakcioRangInfo[idx][i][rNev], splits[i], 0, strlen(splits[i]), MAX_FRAKCIO_RANG_HOSSZ);
				DebugMessage("Frakcio: %d | Rang %d: %s", idx, i, FrakcioRangInfo[idx][i][rNev]);
			}		
		}
		idx++;
	}
	//printf("Lekeres: %s", FrakcioInfo[2][fRangok][5]);
	PrintValaszto("Minden frakció betöltve");
}

fuggveny LoadCsoportok()
{
	new idx, CsoportBetoltve;
	PrintValaszto("Csoportok betöltése folyamatban");
	while(idx < sizeof(CsoportInfo))
	{
		new where[32];
		Format(where, "id='%d'", idx);
		
		if(Mysql_Num("csoportok", where) == 1)
		{
		    new query[128];
            Format(query, "SELECT * FROM `csoportok` WHERE %s", where);
			mysql_query(query);

			new datas[MAX_MYSQL_STRING], data[5][32];
			mysql_store_result();
			mysql_fetch_row(datas, "|");
			mysql_free_result();
			split(datas, data, '|');
			
		    CsoportInfo[idx][CsID] = strval(data[0]);
			strmid(CsoportInfo[idx][CsNev], data[1], 0, strlen(data[1]), MAX_CSOPORTNEV_HOSSZ);
     		CsoportInfo[idx][CsLeader] = strval(data[2]);
     		CsoportInfo[idx][CsMembers] = strval(data[3]);
			
			DebugMessage("Csoport ID: %d | Csoportnév: %s | Csoport leader SQL ID: %d", idx, CsoportInfo[idx][CsNev], CsoportInfo[idx][CsLeader]);
			
			CsoportBetoltve ++;
		}
		idx++;
	}
	printf("%d csoport lett betöltve", CsoportBetoltve);
	PrintValaszto("Csoportok betöltve");
}

forward LoadFrakcioDuty();
public LoadFrakcioDuty()
{
	new idx, BetoltottDuty;
	PrintValaszto("Frakció Duty-k betöltése folyamatban");
	while(idx < MAX_FRAKCIO)
	{
		new where[32];
		Format(where, "id='%d'",idx);
		
		if(Mysql_Num("duty", where) == 1)
		{
			new query[128];
			Format(query, "SELECT * FROM duty WHERE %s",where);
			mysql_query(query);
			
			new datas[MAX_MYSQL_STRING],data[5][32];
			mysql_store_result();
			mysql_fetch_row(datas, "|");
			mysql_free_result();
			split(datas,data,'|');
			
			FrakcioDuty[idx][dX] = floatstr(data[1]);
     		FrakcioDuty[idx][dY] = floatstr(data[2]);
     		FrakcioDuty[idx][dZ] = floatstr(data[3]);
			
			DebugMessage("Frakció: %d | X: %f | Y: %f | Z: %f", idx, FrakcioDuty[idx][dX], FrakcioDuty[idx][dY], FrakcioDuty[idx][dZ]);
			BetoltottDuty ++;
		}
		idx ++;
	}
	printf("%d frakció duty lett betöltve", BetoltottDuty);
	PrintValaszto("Frakció Duty-k betöltve");
}

fuggveny Fulke3DText(fulke, bool:create)
{
	if(create)
	{
		DestroyDynamic3DTextLabel(Fulke[fulke][Fulke3D]);
		Fulke[fulke][Fulke3D] = CreateDynamic3DTextLabel("(( /callbox ))", COLOR_WHITE, Fulke[fulke][fPosX], Fulke[fulke][fPosY], Fulke[fulke][fPosZ], 10.0);
	}
	else
	{
		DestroyDynamic3DTextLabel(Fulke[fulke][Fulke3D]);
	}
	return 1;
}

public LoadFulke()
{
	new idx;
	PrintValaszto("Fülkék betöltése folyamatban");
	while (idx < sizeof(Fulke))
	{
		new where[32];
		Format(where, "id='%d'", idx);

		if(Mysql_Num(SQL_DB_Fulke, where) == 1)
		{
		    new query[128];
            Format(query, "SELECT * FROM `%s` WHERE %s", SQL_DB_Fulke, where);
			mysql_query(query);

			new datas[MAX_MYSQL_STRING], data[10][6];
			mysql_store_result();
			mysql_fetch_row(datas, "|");
			mysql_free_result();
			split(datas, data, '|');
			
		    Fulke[idx][fID] = strval(data[0]);
     		Fulke[idx][fPosX] = floatstr(data[1]);
     		Fulke[idx][fPosY] = floatstr(data[2]);
     		Fulke[idx][fPosZ] = floatstr(data[3]);
			Fulke3DText(idx, true);
			Fulke[idx][Van] = 1;
			
			FulkeBetoltve ++;
		}
		idx ++;
	}
	printf("%d fülke lett betöltve", FulkeBetoltve);
	PrintValaszto("Fülkék betöltve");
	return 1;
}

public LoadATM()
{
	new idx;
	printf("\n================ATM-ek betoltese folyamatban================\n");
	while (idx < sizeof(ATM))
	{
		new where[32];
		Format(where, "id='%d'", idx);

        if(Mysql_Num(SQL_DB_ATM, where) == 1)
			ATM[idx][Van] = 1;
		else
			ATM[idx][Van] = 0;

		if(ATM[idx][Van] == 1)
		{
		    new query[128];
            Format(query, "SELECT * FROM `atmek` WHERE %s", where);
			mysql_query(query);

			new datas[MAX_MYSQL_STRING], data[10][6];
			mysql_store_result();
			mysql_fetch_row(datas, "|");
			mysql_free_result();
			split(datas, data, '|');
			
		    ATM[idx][aID] = strval(data[0]);
     		ATM[idx][aPosX] = floatstr(data[1]);
     		ATM[idx][aPosY] = floatstr(data[2]);
     		ATM[idx][aPosZ] = floatstr(data[3]);
     		ATM[idx][aRotX] = floatstr(data[4]);
     		ATM[idx][aRotY] = floatstr(data[5]);
     		ATM[idx][aRotZ] = floatstr(data[6]);
     		ATM[idx][aObjectID] = strval(data[7]);
			ATM[idx][Van] = 1;
			
		    ATM[idx][aObjectID] = CreateObject(ATM_OBJECT_ID, ATM[idx][aPosX], ATM[idx][aPosY], ATM[idx][aPosZ], ATM[idx][aRotX], ATM[idx][aRotY], ATM[idx][aRotZ]);
			//ATM[idx][aMapIcon] = CreateDynamicMapIcon(ATM[idx][aPosX],ATM[idx][aPosY],ATM[idx][aPosZ], 56, 0, NINCS, NINCS, NINCS, 300.0); // eredeti sárga pötty
			ATM[idx][aMapIcon] = CreateDynamicMapIcon(ATM[idx][aPosX],ATM[idx][aPosY],ATM[idx][aPosZ], ATM_MAPICON_ID, 0, NINCS, NINCS, NINCS, 300.0); // új $ jel
			
			ATMBetoltve ++;
		}
		idx++;
	}
	printf("%d ATM lett betöltve", ATMBetoltve);
	PrintValaszto("ATM-ek betöltve");
}

fuggveny LoadRaktar()
{
	new idx;
	printf("\n================Raktarak betoltese folyamatban================\n");
	while (idx < sizeof(Raktar))
	{
		new where[32];
		Format(where, "id='%d'", idx);

        if(Mysql_Num(SQL_DB_Raktar, where) == 1)
			Raktar[idx][Van] = 1;
		else
			Raktar[idx][Van] = 0;

		if(Raktar[idx][Van] == 1)
		{
		    new query[128];
            Format(query, "SELECT * FROM `%s` WHERE %s",SQL_DB_Raktar, where);
			mysql_query(query);

			new datas[MAX_MYSQL_STRING], data[50][250];
			mysql_store_result();
			mysql_fetch_row(datas, "|");
			mysql_free_result();
			split(datas, data, '|');

		    Raktar[idx][aID] = strval(data[0]);
     		Raktar[idx][aPosX] = floatstr(data[1]);
     		Raktar[idx][aPosY] = floatstr(data[2]);
     		Raktar[idx][aPosZ] = floatstr(data[3]);
     		strmid(Raktar[idx][rTulaj], data[4], 0, strlen(data[4]), 25);
     		strmid(Raktar[idx][rJelszo], data[5], 0, strlen(data[5]), 128);
     		Raktar[idx][rAr] = strval(data[6]);
     		Raktar[idx][rKokain] = strval(data[7]);
     		Raktar[idx][rHeroin] = strval(data[8]);
     		Raktar[idx][rMarihuana] = strval(data[9]);
     		Raktar[idx][rMati] = strval(data[10]);
     		Raktar[idx][rPenz] = strval(data[11]);
     		new splits[50][100];
     		split(data[12], splits, ',');
			for(new i=0; i < MAX_RAKTAR_FEGYVER; i++)
			{
				Raktar[idx][rFegyver][i] = strval(splits[i]);
			}
			split(data[13], splits, ',');
			for(new i=0; i < MAX_RAKTAR_FEGYVER; i++)
			{
				Raktar[idx][rLoszer][i] = strval(splits[i]);
			}
			Raktar[idx][Van] = 1;
			Raktar[idx][rPickup] = UjPickup(1314, 23, Raktar[idx][aPosX], Raktar[idx][aPosY], Raktar[idx][aPosZ]);
			RaktarBetoltve ++;
		}
		idx++;
	}
	printf("%d raktár lett betöltve", RaktarBetoltve);
	printf("\n================Minden Raktarak betoltve================\n");
}

public AdatBetoltesSQL(playerid)
{
	DebugMessage("%s - AdatBetoltesSQL(playerid) - START", PlayerName(playerid));
	
	new query[128];
	Format(query, "SELECT * FROM %s WHERE id = '%d'", SQL_DB_Player, PlayerInfo[playerid][pID]);
	mysql_query(query);

	new datas[MAX_MYSQL_STRING];
	new data[159+1][256];
	new splits[50][MAX_PLAYER_NAME];
	mysql_store_result();
	mysql_fetch_row(datas, "|");
	mysql_free_result();
	split(datas, data, '|');
	
	//data[0] - ID
	//data[1] - Név
	//data[2] - Jelszó

	//PlayerInfo[playerid][pLevel] = strval(data[3]);
	sscanf(data[3], "p<,>dd", PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pSzintetLephet]);
	
	PlayerInfo[playerid][pAdmin] = strval(data[4]);
	PlayerInfo[playerid][pDonateRank] = strval(data[5]);
	PlayerInfo[playerid][gPupgrade] = strval(data[6]);
	PlayerInfo[playerid][pConnectTime] = strval(data[7]);
	PlayerInfo[playerid][pSex] = strval(data[8]);
	PlayerInfo[playerid][pAge] = strval(data[9]);
	PlayerInfo[playerid][pOrigin] = strval(data[10]);
	PlayerInfo[playerid][pMarried] = strval(data[11]);
	strmid(PlayerInfo[playerid][pMarriedTo], data[12], 0, strlen(data[12]), 25);
	WantedLevel[playerid] = strval(data[13]);
	PlayerInfo[playerid][pKills] = strval(data[14]);
	PlayerInfo[playerid][pOrvossag] = strval(data[15]);
	PlayerInfo[playerid][pArrested] = strval(data[16]);
	PlayerInfo[playerid][pFem] = strval(data[17]);
	PlayerInfo[playerid][pFishes] = strval(data[18]);
	PlayerInfo[playerid][pEhseg] = floatstr(data[19]);
	PlayerInfo[playerid][pHeadValue] = strval(data[20]);
	PlayerInfo[playerid][pJailed] = strval(data[21]);
	PlayerInfo[playerid][pJailTime] = strval(data[22]);
	PlayerInfo[playerid][pWins] = strval(data[23]);
	PlayerInfo[playerid][pLoses] = strval(data[24]);
	PlayerInfo[playerid][pTutorial] = strval(data[25]);
	PlayerInfo[playerid][pSzerszamoslada] = strval(data[26]);
	PlayerInfo[playerid][pWarns] = strval(data[27]);
	PlayerInfo[playerid][pKWarns] = strval(data[28]);
	PlayerInfo[playerid][pDrogido] = strval(data[29]);
	PlayerInfo[playerid][pAS] = strval(data[30]);
	PlayerInfo[playerid][pExp] = strval(data[31]);
	PlayerInfo[playerid][pCash] = strval(data[32]);
	PlayerInfo[playerid][pAccount] = strval(data[33]);
	PlayerInfo[playerid][pKaja] = strval(data[34]);
	PlayerInfo[playerid][pPnumber] = strval(data[35]);
	//strmid(PlayerInfo[playerid][pPnumber], data[35], 0, strlen(data[35]), 25);
	PlayerInfo[playerid][pPhousekey] = strval(data[36]);	
	PlayerInfo[playerid][pPbiskey] = strval(data[37]);
	PlayerInfo[playerid][pPcarkey] = strval(data[38]);

	sscanf(data[39], "p<,>dddddddddd",
	PlayerInfo[playerid][pMuanyag], PlayerInfo[playerid][pCserje],
	PlayerInfo[playerid][pMak], PlayerInfo[playerid][pCannabis],
	PlayerInfo[playerid][pMats], PlayerInfo[playerid][pKokain],
	PlayerInfo[playerid][pHeroin], PlayerInfo[playerid][pMarihuana], 
	PlayerInfo[playerid][pEcstasy], PlayerInfo[playerid][pAmfetamin]);

	PlayerInfo[playerid][pPhoneBook] = strval(data[40]);
	PlayerInfo[playerid][pCDPlayer] = strval(data[41]);
	PlayerInfo[playerid][pLottoNr] = strval(data[42]);

	sscanf(data[43], "p<,>dd",PlayerInfo[playerid][pFuel][UZEMANYAGTIPUS_BENZIN],PlayerInfo[playerid][pFuel][UZEMANYAGTIPUS_DIESEL]);
	PlayerInfo[playerid][pCigiUsed] = strval(data[44]);
	PlayerInfo[playerid][pCigi] = strval(data[45]);
	PlayerInfo[playerid][pNikotin] = strval(data[46]);
	PlayerInfo[playerid][pGyujto] = strval(data[47]);
	PlayerInfo[playerid][pPia] = strval(data[48]);
	PlayerInfo[playerid][pJob1] = strval(data[49]);
	PlayerInfo[playerid][pJob2] = strval(data[50]);
	PlayerInfo[playerid][pContractTime] = strval(data[51]);
	PlayerInfo[playerid][pContractTime2] = strval(data[52]);
	PlayerInfo[playerid][pPayCheck] = strval(data[53]);
	PlayerInfo[playerid][pPayDay] = strval(data[54]);
	PlayerInfo[playerid][pPayDayHad] = strval(data[55]);
	PlayerInfo[playerid][pLeader] = strval(data[56]);
	PlayerInfo[playerid][pMember] = strval(data[57]);
	PlayerInfo[playerid][pRank] = strval(data[59]);

    sscanf(data[60], "p<,>dddddddddddd",
	PlayerInfo[playerid][pDetSkill],PlayerInfo[playerid][pSexSkill],
	PlayerInfo[playerid][pBoxSkill],PlayerInfo[playerid][pLawSkill],
	PlayerInfo[playerid][pMechSkill],PlayerInfo[playerid][pJackSkill],
	PlayerInfo[playerid][pCarSkill],PlayerInfo[playerid][pNewsSkill],
	PlayerInfo[playerid][pDrugsSkill],PlayerInfo[playerid][pRiasztoSkill],
	PlayerInfo[playerid][pHackingSkill],PlayerInfo[playerid][pFegyokerSkill]);

    sscanf(data[61], "p<,>dddddddd",
    PlayerInfo[playerid][pCarLic],PlayerInfo[playerid][pFlyLic],
    PlayerInfo[playerid][pBoatLic],PlayerInfo[playerid][pFishLic],
    PlayerInfo[playerid][pGunLic],PlayerInfo[playerid][pMotorJogsi],
    PlayerInfo[playerid][pCsomagszallitoJogsi], PlayerInfo[playerid][pOperator]);

	PlayerInfo[playerid][pChar] = strval(data[62]);
	PlayerInfo[playerid][pModel] = strval(data[63]);
	
	if(!IsValidSkin(PlayerInfo[playerid][pModel])) {
		PlayerInfo[playerid][pModel] = 1; 
	}

    sscanf(data[64], "p<,>ddddd",
    PlayerInfo[playerid][pAlcoholPerk],PlayerInfo[playerid][pDrugPerk],
    PlayerInfo[playerid][pMiserPerk],PlayerInfo[playerid][pPainPerk],
    PlayerInfo[playerid][pTraderPerk]);

    //sscanf(data[65], "p<,>dd",PlayerInfo[playerid][pCInt],PlayerInfo[playerid][pCVW]);

    sscanf(data[66], "p<,>ff",
    PlayerInfo[playerid][pCelet], PlayerInfo[playerid][pCpajzs]);

    sscanf(data[67], "p<,>dddddddddddd",
    PlayerInfo[playerid][pFegyver][0], PlayerInfo[playerid][pFegyver][1], PlayerInfo[playerid][pFegyver][2], PlayerInfo[playerid][pFegyver][3],
	PlayerInfo[playerid][pFegyver][4], PlayerInfo[playerid][pFegyver][5], PlayerInfo[playerid][pFegyver][6], PlayerInfo[playerid][pFegyver][7],
	PlayerInfo[playerid][pFegyver][8], PlayerInfo[playerid][pFegyver][9], PlayerInfo[playerid][pFegyver][10], PlayerInfo[playerid][pFegyver][11]);

    sscanf(data[68], "p<,>dddddddddddd",
    PlayerInfo[playerid][pTolteny][0],PlayerInfo[playerid][pTolteny][1],PlayerInfo[playerid][pTolteny][2],PlayerInfo[playerid][pTolteny][3],
	PlayerInfo[playerid][pTolteny][4],PlayerInfo[playerid][pTolteny][5],PlayerInfo[playerid][pTolteny][6],PlayerInfo[playerid][pTolteny][7],
	PlayerInfo[playerid][pTolteny][8],PlayerInfo[playerid][pTolteny][9],PlayerInfo[playerid][pTolteny][10],PlayerInfo[playerid][pTolteny][11]);

	PlayerInfo[playerid][pMuted] = strval(data[69]);
	
	PlayerInfo[playerid][pUtolsoLoginIdo] = strval(data[70]);
	//Kilépés Pozíció és élet:
	PlayerInfo[playerid][pInt] = strval(data[71]);
	PlayerInfo[playerid][pLocal] = strval(data[72]);
	PlayerInfo[playerid][pPosX] = floatstr(data[73]);
	PlayerInfo[playerid][pPosY] = floatstr(data[74]);
	PlayerInfo[playerid][pPosZ] = floatstr(data[75]);
	
	PlayerInfo[playerid][pCarTime] = strval(data[76]);
	PlayerInfo[playerid][pLokator] = strval(data[77]);
	PlayerInfo[playerid][pCigiFuggoseg] = strval(data[78]);
	PlayerInfo[playerid][pNIDTag] = strval(data[79]);
	PlayerInfo[playerid][pNIDRang] = strval(data[80]);
	PlayerInfo[playerid][pKituntetes] = strval(data[81]);
	PlayerInfo[playerid][pSzallitott] = strval(data[82]);
	PlayerInfo[playerid][pSpawnchange] = strval(data[83]);
	
	strmid(PlayerInfo[playerid][pAdminAlnev], data[84], 0, strlen(data[84]), MAX_PLAYER_NAME);
	
	PlayerInfo[playerid][pRaktarengedely] = strval(data[85]);
	Raktarengedely[playerid] = PlayerInfo[playerid][pRaktarengedely];
	PlayerInfo[playerid][pTeloEgyenleg] = strval(data[86]);
	PlayerInfo[playerid][pKotszer] = strval(data[87]);
	PlayerInfo[playerid][pUtlevel] = strval(data[88]);
	PlayerInfo[playerid][pStilus] = strval(data[89]);
	sscanf(data[90], "p<,>ddd",PlayerInfo[playerid][pBankSzamla],PlayerInfo[playerid][pBankSzamlaSzam],PlayerInfo[playerid][pBankSzamlaJelszo]);
	PlayerInfo[playerid][pC4] = strval(data[91]);
	PlayerInfo[playerid][pHitman] = strval(data[92]);
	strmid(PlayerInfo[playerid][pHitmanNev], data[93], 0, strlen(data[93]), MAX_PLAYER_NAME);
    sscanf(data[94], "p<,>dd",PlayerInfo[playerid][pPremiumCsomag],PlayerInfo[playerid][pPremiumPont]);
	PlayerInfo[playerid][pPremiumIdo] = strval(data[95]);
	PlayerInfo[playerid][pBerlo] = strval(data[96]);
	//data[97] - Online
	sscanf(data[98], "p<,>ddd",PlayerInfo[playerid][pSzemelyi],PlayerInfo[playerid][pLakcimkartya],PlayerInfo[playerid][pMunkaVallalasi]);
    sscanf(data[99], "p<,>ddddd",PlayerInfo[playerid][pHitel],PlayerInfo[playerid][pFelvettHitel],PlayerInfo[playerid][pHitelOra],PlayerInfo[playerid][pHitelElteltOra],PlayerInfo[playerid][pZarolva]);
	PlayerInfo[playerid][pJegy] = strval(data[100]);
	sscanf(data[101], "p<,>ddddddd", ElveszIdo[playerid], Animban[playerid], DutyIdo[playerid], PlayerCuffed[playerid], RadioElveve[playerid], Kezenlove[playerid], PlayerInfo[playerid][pHifi]);
	PlayerInfo[playerid][pSSS] = strval(data[102]);
	strmid(PlayerInfo[playerid][pJailOK], data[103], 0, strlen(data[103]), 128);
    sscanf(data[104], "p<,>dddd",PlayerInfo[playerid][pLkocsi],PlayerInfo[playerid][pLkocsiar],PlayerInfo[playerid][pLaptop],PlayerInfo[playerid][pHack]);

    sscanf(data[105], "p<,>ddddddddddd",PlayerInfo[playerid][pFegyverSkill][0],PlayerInfo[playerid][pFegyverSkill][1],PlayerInfo[playerid][pFegyverSkill][2],PlayerInfo[playerid][pFegyverSkill][3],PlayerInfo[playerid][pFegyverSkill][4],
	PlayerInfo[playerid][pFegyverSkill][5],PlayerInfo[playerid][pFegyverSkill][6],PlayerInfo[playerid][pFegyverSkill][7],PlayerInfo[playerid][pFegyverSkill][8],PlayerInfo[playerid][pFegyverSkill][9],PlayerInfo[playerid][pFegyverSkill][10]);
	
	PlayerInfo[playerid][pVA] = strval(data[106]);
	//data[107] - Email
	JarmuKulcs[playerid] = strval(data[108]);
	strmid(PlayerInfo[playerid][pJailtAdta], data[109], 0, strlen(data[109]), 32);
	PlayerInfo[playerid][pSzemuveg] = strval(data[110]);
	PlayerInfo[playerid][pRPPont] = strval(data[111]);
	PlayerInfo[playerid][pMaszk] = strval(data[112]);
 	sscanf(data[113], "p<,>ddd",PlayerInfo[playerid][pBot],PlayerInfo[playerid][pCsali],PlayerInfo[playerid][pDamil]);
	UresUveg[playerid] = strval(data[114]);
	PlayerInfo[playerid][pVokitoki] = strval(data[115]);
	PlayerInfo[playerid][pHelyszinelo] = strval(data[116]);

	PlayerInfo[playerid][pVontatoKotel] = strval(data[117]);
	sscanf(data[118], "p<,>dddddddddddddddddddddddddddddddddddddddd",
	PlayerInfo[playerid][pInventory][0],PlayerInfo[playerid][pInventory][1],PlayerInfo[playerid][pInventory][2],PlayerInfo[playerid][pInventory][3],PlayerInfo[playerid][pInventory][4],
	PlayerInfo[playerid][pInventory][5],PlayerInfo[playerid][pInventory][6],PlayerInfo[playerid][pInventory][7],PlayerInfo[playerid][pInventory][8],PlayerInfo[playerid][pInventory][9],
	PlayerInfo[playerid][pInventory][10],PlayerInfo[playerid][pInventory][11],PlayerInfo[playerid][pInventory][12],PlayerInfo[playerid][pInventory][13],PlayerInfo[playerid][pInventory][14],
	PlayerInfo[playerid][pInventory][15],PlayerInfo[playerid][pInventory][16],PlayerInfo[playerid][pInventory][17],PlayerInfo[playerid][pInventory][18],PlayerInfo[playerid][pInventory][19],
	PlayerInfo[playerid][pInventory][20],PlayerInfo[playerid][pInventory][21],PlayerInfo[playerid][pInventory][22],PlayerInfo[playerid][pInventory][23],PlayerInfo[playerid][pInventory][24],
	PlayerInfo[playerid][pInventory][25],PlayerInfo[playerid][pInventory][26],PlayerInfo[playerid][pInventory][27],PlayerInfo[playerid][pInventory][28],PlayerInfo[playerid][pInventory][29],
	PlayerInfo[playerid][pInventory][30],PlayerInfo[playerid][pInventory][31],PlayerInfo[playerid][pInventory][32],PlayerInfo[playerid][pInventory][33],PlayerInfo[playerid][pInventory][34],
	PlayerInfo[playerid][pInventory][35],PlayerInfo[playerid][pInventory][36],PlayerInfo[playerid][pInventory][37],PlayerInfo[playerid][pInventory][38],PlayerInfo[playerid][pInventory][39]);

	PlayerInfo[playerid][pBankKartya] = strval(data[119]);
	//data[120] - Töréscucc
	//data[121] - Munkatanulas
	PlayerInfo[playerid][pTerkep] = strval(data[122]);
	Doboz[playerid] = strval(data[123]);
	PlayerInfo[playerid][pCsavarhuzo] = strval(data[124]);
    sscanf(data[125], "p<,>ddd",PlayerInfo[playerid][pJelzes][0],PlayerInfo[playerid][pJelzes][1],PlayerInfo[playerid][pJelzes][2]);

    sscanf(data[126], "p<,>dd",PlayerInfo[playerid][pC2],PlayerInfo[playerid][pC2Taska]);
 	sscanf(data[127], "p<,>ddd",JatekosZsak[playerid][0],JatekosZsak[playerid][1],JatekosZsak[playerid][2]);

	sscanf(data[128], "p<,>ddd",PlayerInfo[playerid][pNyelv],PlayerInfo[playerid][pNyelvTanulas][0],PlayerInfo[playerid][pNyelvTanulas][1]);

    sscanf(data[129], "p<,>dddddddddddddddddddd",
	PlayerInfo[playerid][pNyelvTanulva][0],
	PlayerInfo[playerid][pNyelvTanulva][1],
	PlayerInfo[playerid][pNyelvTanulva][2],
	PlayerInfo[playerid][pNyelvTanulva][3],
	PlayerInfo[playerid][pNyelvTanulva][4],
	PlayerInfo[playerid][pNyelvTanulva][5],
	PlayerInfo[playerid][pNyelvTanulva][6],
	PlayerInfo[playerid][pNyelvTanulva][7],
	PlayerInfo[playerid][pNyelvTanulva][8],
	PlayerInfo[playerid][pNyelvTanulva][9],
	PlayerInfo[playerid][pNyelvTanulva][10],
	PlayerInfo[playerid][pNyelvTanulva][11],
	PlayerInfo[playerid][pNyelvTanulva][12],
	PlayerInfo[playerid][pNyelvTanulva][13],
	PlayerInfo[playerid][pNyelvTanulva][14],
	PlayerInfo[playerid][pNyelvTanulva][15],
	PlayerInfo[playerid][pNyelvTanulva][16],
	PlayerInfo[playerid][pNyelvTanulva][17],
	PlayerInfo[playerid][pNyelvTanulva][18],
	PlayerInfo[playerid][pNyelvTanulva][19]);

	PlayerInfo[playerid][pAlmossag] = floatstr(data[130]);
	PlayerInfo[playerid][pCp] = strval(data[131]);
	//data[132] = Tarsitva
	PlayerInfo[playerid][pCsipogo] = strval(data[133]);
	PlayerInfo[playerid][pSapka] = strval(data[134]);

    sscanf(data[135], "p<,>dddddddd",
    PlayerInfo[playerid][pAdoHaz],
	PlayerInfo[playerid][pAdoHazHol],
	PlayerInfo[playerid][pAdoSzint],
	PlayerInfo[playerid][pAdoJarmu],
	PlayerInfo[playerid][pAdoKitoltve],
	PlayerInfo[playerid][pAdo],
	PlayerInfo[playerid][pAdoFizetve],
	PlayerInfo[playerid][pAdoEllenorizve]);
	
	sscanf(data[136], "p<,>ddddd",PlayerInfo[playerid][pAdovan][0],PlayerInfo[playerid][pAdovan][1],PlayerInfo[playerid][pAdovan][2],PlayerInfo[playerid][pAdovan][3],PlayerInfo[playerid][pAdovan][4]);
	
	PlayerInfo[playerid][pSWATTag] = strval(data[137]);
	PlayerInfo[playerid][pSWATRang] = strval(data[138]);
	//Sorrend miatt elnézted, sebaj :D lényeg, hogy mostmár jó
	
	split(data[139],splits,',');
	for(new i = 0; i < MAX_ISMEROS; i++) {
	    PlayerInfo[playerid][pIsmeros] = strval(splits[i]);
	}
	strmid(PlayerInfo[playerid][pUtolsoLoginIP], data[140], 0, strlen(data[140]), 16);
	sscanf(data[141], "p<,>dd",PlayerInfo[playerid][pStand],PlayerInfo[playerid][pStandEngedely]);
	PlayerInfo[playerid][pDutyIdo] = strval(data[142]);
	PlayerInfo[playerid][pOnlineIdo] = strval(data[143]);
	sscanf(data[144], "p<,>ddddddd",
	PlayerInfo[playerid][pOktatasok][OKTATAS_AUTO], PlayerInfo[playerid][pOktatasok][OKTATAS_MOTOR], PlayerInfo[playerid][pOktatasok][OKTATAS_REPULO], PlayerInfo[playerid][pOktatasok][OKTATAS_HORGASZ], PlayerInfo[playerid][pOktatasok][OKTATAS_HAJO], PlayerInfo[playerid][pOktatasok][OKTATAS_Csomagszallito], PlayerInfo[playerid][pOktatasok][OKTATAS_FEGYVER]);
	PlayerInfo[playerid][pKresz] = strval(data[145]);
	
	PlayerInfo[playerid][pHotelSzoba] = strval(data[146]);
	
	sscanf(data[147], "p<,>s[24]dd",
	ElvettRadio[playerid][rNev], ElvettRadio[playerid][rFrakcio], ElvettRadio[playerid][rRang]);
	
	PlayerInfo[playerid][pSzerelo] = strval(data[148]);
	PlayerInfo[playerid][pSzereloRang] = strval(data[149]);
	
	PlayerInfo[playerid][pHazMasodtulaj] = strval(data[150]);
	
	PlayerInfo[playerid][pAdminAlnevBe] = strval(data[151]);

	if(PlayerInfo[playerid][pPcarkey] > (MAXVSKOCSI+1)) {
		PlayerInfo[playerid][pPcarkey] = NINCS;
	}
	
	if(PlayerInfo[playerid][pPhousekey] > (MAXHAZ+1))
	{
		PlayerInfo[playerid][pPhousekey] = NINCS;
		PlayerInfo[playerid][pLakcimkartya] = 0;
	}
	
	sscanf(data[152], "p<,>dfffffffffd",
	DivatInfo[SLOT_SAPKA][playerid][dVan],DivatInfo[SLOT_SAPKA][playerid][dPosX],DivatInfo[SLOT_SAPKA][playerid][dPosY],DivatInfo[SLOT_SAPKA][playerid][dPosZ],
	DivatInfo[SLOT_SAPKA][playerid][dRotX],DivatInfo[SLOT_SAPKA][playerid][dRotY],DivatInfo[SLOT_SAPKA][playerid][dRotZ],DivatInfo[SLOT_SAPKA][playerid][dScaleX],
	DivatInfo[SLOT_SAPKA][playerid][dScaleY],DivatInfo[SLOT_SAPKA][playerid][dScaleZ],DivatInfo[SLOT_SAPKA][playerid][dmodelid]);
	
	sscanf(data[153], "p<,>dfffffffffd",
	DivatInfo[SLOT_SZEMUVEG][playerid][dVan],DivatInfo[SLOT_SZEMUVEG][playerid][dPosX],DivatInfo[SLOT_SZEMUVEG][playerid][dPosY],DivatInfo[SLOT_SZEMUVEG][playerid][dPosZ],
	DivatInfo[SLOT_SZEMUVEG][playerid][dRotX],DivatInfo[SLOT_SZEMUVEG][playerid][dRotY],DivatInfo[SLOT_SZEMUVEG][playerid][dRotZ],DivatInfo[SLOT_SZEMUVEG][playerid][dScaleX],
	DivatInfo[SLOT_SZEMUVEG][playerid][dScaleY],DivatInfo[SLOT_SZEMUVEG][playerid][dScaleZ],DivatInfo[SLOT_SZEMUVEG][playerid][dmodelid]);
	
	sscanf(data[154], "p<,>dfffffffffd",
	DivatInfo[SLOT_KARORA][playerid][dVan],DivatInfo[SLOT_KARORA][playerid][dPosX],DivatInfo[SLOT_KARORA][playerid][dPosY],DivatInfo[SLOT_KARORA][playerid][dPosZ],
	DivatInfo[SLOT_KARORA][playerid][dRotX],DivatInfo[SLOT_KARORA][playerid][dRotY],DivatInfo[SLOT_KARORA][playerid][dRotZ],DivatInfo[SLOT_KARORA][playerid][dScaleX],
	DivatInfo[SLOT_KARORA][playerid][dScaleY],DivatInfo[SLOT_KARORA][playerid][dScaleZ],DivatInfo[SLOT_KARORA][playerid][dmodelid]);
	
	PlayerInfo[playerid][pSzomjusag] = floatstr(data[155]);
	PlayerInfo[playerid][pCsoport] = strval(data[156]);	
	PlayerInfo[playerid][pShowInfoBar] = strval(data[157]);
	PlayerInfo[playerid][pPayDayMegkapva] = strval(data[158]);
	
	sscanf(data[159], "p<,>dd",
	PlayerInfo[playerid][pCsomagszallitoSkill], PlayerInfo[playerid][pValamiSkill]);
	
	DebugMessage("%s - AdatBetoltesSQL(playerid) - END", PlayerName(playerid));
	return 1;
}
fuggveny OnPlayerLogin(playerid)
{	
	DebugMessage("%s - OnPlayerLogin(playerid) - START", PlayerName(playerid));
	
	//new tmp2[256];
	TogglePlayerSpectating(playerid, false);
	
	CorrectPlayerDatas(playerid);	
	DebugMessage("OnPlayerLogin: %s - Lefutott", "CorrectPlayerDatas(playerid);");
	
	if(PlayerInfo[playerid][pKotszer] > MAXKOTSZER)
	{
		PlayerInfo[playerid][pKotszer] = MAXKOTSZER;
	}
	
	SpawnPlayer(playerid);
	DebugMessage("OnPlayerLogin: %s - Lefutott", "SpawnPlayer(playerid);");
	
	CurCol[playerid] = 1;
	/* ######################################################### */
	/*new Float:szelesseg = 58.0, Float:magassag = 4.50;
	EhsegBar[playerid] = CreateProgressBar(548.00, 38.00, szelesseg, magassag, -65366, 100.0);
	SzomjusagBar[playerid] = CreateProgressBar(548.00, 29.00, szelesseg, magassag, 869072810, 100.0);
	
	if(debugmode) {
		printf("OnPlayerLogin: %s - Lefutott", "CreateProgressBar(playerid,...);");
	}*/
	/* ######################################################### */
	
	TextDrawLoaded[playerid] = false;
	CreatePTD(playerid);
	DebugMessage("OnPlayerLogin: %s - Lefutott", "CreatePTD(playerid);");
	
	ShowInfoBar(playerid, true);
	DebugMessage("OnPlayerLogin: %s - Lefutott", "ShowInfoBar(playerid, true);");
	
	RemoveBuildingsForPlayer(playerid);
	DebugMessage("OnPlayerLogin: %s - Lefutott", "RemoveBuildingsForPlayer(playerid);");

	gPlayerLogged[playerid] = 1;
	
    StopZene(playerid);
	
	DateProp(playerid, DP_Haz);
	DateProp(playerid, DP_Kocsi);
	DebugMessage("OnPlayerLogin: %s - Lefutott", "DateProp(playerid, DP_Haz); DateProp(playerid, DP_Kocsi);");
	
	new query[64]; format(query, 64, "UPDATE %s SET Online='1' WHERE id='%d'", SQL_DB_Player, PlayerSQLID(playerid)); mysql_query(query);
	DebugMessage("OnPlayerLogin: %s - Lefutott", "UpdateQuery");
	
	if(PlayerInfo[playerid][pAdmin] != 0 || IsTulaj(playerid) || IsFejleszto(playerid) || IsRicardo(playerid))
	{
		if(IsRicardo(playerid))
		{
			new adminszint = (MAX_ADMIN_LEVEL + 3);
			PlayerInfo[playerid][pAdmin] = adminszint;
			AdminJelszoCheckelve[playerid] = true;
			
			PlayerTextFormat(playerid, "'%s' AdminSzint megadva! [%d]", AdminSzint(playerid), adminszint);
			Msg(playerid, PlayerText[playerid], COLOR_ADMIN);
		}
		else
		{
			//SetTimerEx("AdminJelszo", 3000, false, "d", playerid);
			Msg(playerid, "Kérlek írd be az adminjelszót! Amíg ezt nem teszed meg nem lesz adminod! (/ajelszó)", COLOR_ADMIN);
			AdminEllenorzes[playerid][0] = 1;
			AdminEllenorzes[playerid][1] = PlayerInfo[playerid][pAdmin];
			AdminJelszoCheckelve[playerid] = false;
			//PlayerInfo[playerid][pAdmin] = 0;
		}
	}
	DebugMessage("OnPlayerLogin: %s - Lefutott", "Adminszint Check");

	if(PlayerInfo[playerid][pPcarkey] != NINCS) {
		SetVehicleVirtualWorld(CarInfo[PlayerInfo[playerid][pPcarkey]][cId], 0);
	}
	if(PlayerInfo[playerid][pPcarkey2] != NINCS) {
		SetVehicleVirtualWorld(CarInfo[PlayerInfo[playerid][pPcarkey2]][cId], 0);
	}
	DebugMessage("OnPlayerLogin: %s - Lefutott", "if(PlayerInfo[playerid][pPcarkey] != NINCS)");
	
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	DebugMessage("OnPlayerLogin: %s - Lefutott", "SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);");
	
	Nevek[playerid] = 1;
	ShowNames(playerid, 1);
	
	PlayerTextFormat(playerid, "~w~Üdvözöllek~n~~y~%s", PlayerName(playerid));
	GameTextForPlayer(playerid, PlayerText[playerid], 3 * 1000, 1);
	
	MsgFormat(playerid, "Üdvözöllek %s!", PlayerName(playerid));
	
	//Havazas(playerid, true);
	
	DebugMessage("%s - OnPlayerLogin(playerid) - END", PlayerName(playerid));
	return 1;
}

fuggveny AdminJelszo(playerid)
{
	ShowPlayerDialog(playerid, DIALOG_AJELSZO, DIALOG_STYLE_INPUT, "Admin kód", "Írd be az admin kódot:", "Beír", "Mégse");
	return 1;
}

fuggveny ShowInfoBar(playerid, bool:show)
{
	if(show && PlayerInfo[playerid][pShowInfoBar] == 1) return 1;
	else if(!show && PlayerInfo[playerid][pShowInfoBar] == 0) return 1;
	
	for(new i = 2; i < MAXTD_PHUD; i++)
	{ 
		if(show)
			TextDrawShowForPlayer(playerid, pHUD[playerid][i]);
		else
			TextDrawHideForPlayer(playerid, pHUD[playerid][i]);
	}
	
	if(show)
	{
		TextDrawShowForPlayer(playerid, JobbalsoTD[playerid]);
		PlayerInfo[playerid][pShowInfoBar] = 1;
	}
	else
	{
		TextDrawHideForPlayer(playerid, JobbalsoTD[playerid]);
		PlayerInfo[playerid][pShowInfoBar] = 0;
	}
	
	return 1;
}

stock ini_GetKey(line[])
{
	new keyRes[256];
	keyRes[0] = 0;
    if(strfind(line, "=", true) == -1) return keyRes;
    strmid(keyRes, line, 0, strfind(line, "=", true), 256);
    return keyRes;
}

stock ini_GetValue(line[])
{
	new valRes[256];
	valRes[0] = 0;
	if( strfind(line, "=", true) == -1) return valRes;
	strmid(valRes, line, strfind(line , "=", true ) + 1, strlen(line), 256);
	return valRes;
}

public OnIntsUpdate()
{
	new idx = ALAPINTERIORSZAM;
	new File: file2;
	new ennyi = IntekSzama();
	while (idx <= ennyi)
	{
		new coordsstring[256];
		format(coordsstring, 256, "%s, %d, %f, %f, %f\n",
        IntInfo[idx][iType],
		IntInfo[idx][iNumber],
		IntInfo[idx][iExitX],
		IntInfo[idx][iExitY],
		IntInfo[idx][iExitZ]);
		if(idx == ALAPINTERIORSZAM)
		{
			file2 = fopen("Config/interiors.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/interiors.cfg", io_append);
		}
		if(!file2){ break; }
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public OnIgenyUpdate()
{
	new idx;
	new File: file2;
	//new hazak = 0, szamlalo;


	while (idx < MAXIGENYLES)
	{
		new coordsstring[256];
		format(coordsstring, 256, "%s,%d,%f,%f,%f\n",
		HazIgenylesek[idx][Nev],
		HazIgenylesek[idx][Belso],
		HazIgenylesek[idx][iX],
		HazIgenylesek[idx][iY],
		HazIgenylesek[idx][iZ]);
		if(idx == 0)
		{
			file2 = fopen("Config/hazigenylesek.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/hazigenylesek.cfg", io_append);
		}
		if(!file2){ break; }
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public OnAjtoUpdate()
{
	new idx;
	new File: file2;

	while (idx < MAXAJTO)
	{
		new coordsstring[256];
		format(coordsstring, 256, "%s,%s,%f,%f,%f,%d,%d,%f,%f,%f,%d,%d,%d,%d,%d,%d\n",
		Ajtok[idx][Csak],
		Ajtok[idx][Nev],
		Ajtok[idx][BeX],
		Ajtok[idx][BeY],
		Ajtok[idx][BeZ],
		Ajtok[idx][BeInt],
		Ajtok[idx][BeVW],
		Ajtok[idx][KiX],
		Ajtok[idx][KiY],
		Ajtok[idx][KiZ],
		Ajtok[idx][KiInt],
		Ajtok[idx][KiVW],
		Ajtok[idx][Zarva],
		Ajtok[idx][Freezel],
		Ajtok[idx][Vedelem],
		Ajtok[idx][PickupID]);
		if(idx == 0)
		{
			file2 = fopen("Config/ajtok.cfg", io_write);
		}
		else
		{
			file2 = fopen("Config/ajtok.cfg", io_append);
		}
		if(!file2){ break; }
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public BroadCast(color,const string[])
{
	SendClientMessageToAll(color, string);
	return 1;
}

public ABroadCast(color, const string[], level)
{
	if(level < 1) level = 1;
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i) && Logged(i))
		{
			if(Admin(i, level))
			{
				new szoveg[248];
				Format(szoveg, "%s", string);
				Msg(i, szoveg, COLOR_ADMIN);
			}
		}
	}
	printf("%s\n", string);
	return 1;
}

public OOCOff(color,const string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(!gOoc[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public OOCNews(color,const string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(!gNews[i])
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}
fuggveny CopMsg(color, string[])
{
	SendTeamMessage(LMUNKA_LSPD, color, string);
	SendTeamMessage(LMUNKA_FBI, color, string);
	SendTeamMessage(LMUNKA_KATONA, color, string);
	SendTeamMessage(LMUNKA_NAV, color, string);
}
public SendTeamMessage(team, color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		     if(LMT(i, team) || RadioHallgatas[i] == 0 || ElvettRadio[i][rFrakcio] == team)
		    {
                if(gFam[i] == 0)
                {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

SendRadioMessage(member, color, string[], bool:onduty=false)
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member || RadioHallgatas[i] == member || ElvettRadio[i][rFrakcio] == member)
		    {
				if(onduty == true)
				{
					if(OnDuty[i] != 0)
					{
						if(gFam[i] != 1)
							SendClientMessage(i, color, string);
					}
				}
				else
				{
					if(gFam[i] != 1)
						SendClientMessage(i, color, string);
				}
			}
		}
	}
}

fuggveny SendSzereloRadioMessage(color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(PlayerInfo[i][pSzerelo] > 0)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

fuggveny SendHelyRadioMessage(color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(PlayerInfo[i][pHelyszinelo] > 0)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

fuggveny SendNIDRadioMessage(color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(PlayerInfo[i][pNIDTag] > 0)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendSWATRadioMessage(color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(PlayerInfo[i][pSWATTag] > 0)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendPowerRadioMessage(color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(PlayerInfo[i][pPower] > 0)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendHitmanRadioMessage(color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(IsHitman(i))
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendCsomagszallitoRadioMessage(color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(AMT(i, MUNKA_CSOMAGSZALLITO))
		    {
		        new tmpcar = GetPlayerVehicleID(i);
		        if(IsATruck(tmpcar))
		        {
					if(KaR[i] != 1)
						SendClientMessage(i, color, string);
				}
			}
		}
	}
}

public SendJobMessage(job, color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(PlayerInfo[i][pJob1] == job || PlayerInfo[i][pJob2] == job)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}
fuggveny HatoSugaronBelul(playerid)
{
	if(Civil(playerid)) return false;
	
	new family = PlayerInfo[playerid][pMember];
	if(FrakcioInfo[family][fJelErosito] == 0)
	{
		if(PlayerToPoint(1000, playerid, FrakcioInfo[family][fJeladoPos][0],FrakcioInfo[family][fJeladoPos][1],FrakcioInfo[family][fJeladoPos][2]))
			return true;
	}
	else if(FrakcioInfo[family][fJelErosito] == 1)
	{
		if(PlayerToPoint(2000, playerid, FrakcioInfo[family][fJeladoPos][0],FrakcioInfo[family][fJeladoPos][1],FrakcioInfo[family][fJeladoPos][2]))
			return true;
	}
	else if(FrakcioInfo[family][fJelErosito] == 2)
	{
		if(PlayerToPoint(3000, playerid, FrakcioInfo[family][fJeladoPos][0],FrakcioInfo[family][fJeladoPos][1],FrakcioInfo[family][fJeladoPos][2]))
			return true;
	}
	else if(FrakcioInfo[family][fJelErosito] == 3)
	{
		if(PlayerToPoint(4000, playerid, FrakcioInfo[family][fJeladoPos][0],FrakcioInfo[family][fJeladoPos][1],FrakcioInfo[family][fJeladoPos][2]))
			return true;
	}
	else if(FrakcioInfo[family][fJelErosito] > 3)
	{
		return true;
	}
	return false;
}

public SendFamilyMessage(family, color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family || RadioHallgatas[i] == family || ElvettRadio[i][rFrakcio] == family)
		    {
                if(gFam[i] == 0)
                {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

public SendIRCMessage(channel, color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(PlayersChannel[i] == channel)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

public SendCopMessage(color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(IsACop(i))
		    {
				SendClientMessage(i, color, string);
				RingTone[i] = 20;
			}
		}
	}
}

public SendAdminMessage(color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(PlayerInfo[i][pAdmin] >= 1) 
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

fuggveny SendFAdminMessage(color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
		    if(PlayerInfo[i][pAdmin] >= FOADMIN)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

fuggveny SendSAdminMessage(color, string[])
{
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
			if(IsFejleszto(i))
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}
fuggveny StopZene(playerid)
{
	PlayerPlaySound(playerid,1077,0.0, 0.0, 0.0);
	StopAudioStreamForPlayer(playerid);
	return 1;
}

fuggveny YoutubeStreamForPlayer(playerid, vlink[], Float:x, Float:y, Float:z, Float:distance, usepos)
{	
	new videoid[128], mp3link[128];
	strmid(videoid, vlink, strfind(vlink,"v=")+2, strfind(vlink,"v=")+15);
	Format(mp3link, "http://youtubeinmp3.com/fetch/?video=http://www.youtube.com/watch?v=%s", videoid);
	PlayAudioStreamForPlayer(playerid, mp3link, x, y, z, distance, usepos);
}

GetVehicleModelIDFromName(vname[])
{
	for(new i = 0; i < 211; i++)
	{
		if(strcmp(vehName[i], vname, true) == 0)
			return i + MIN_VEHI_ID;
	}
	return -1;
}

stock Beszed(Float:radi, playerid, string[], egyeb=BESZED_NINCS)
{
	if(IsValidPlayerID(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		
		new szinkaki = COLOR_FADE1;
		//new nyelv = PlayerInfo[playerid][pNyelv];
		
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		new egyebstr[64], nev[260];
		if(egyeb== BESZED_NINCS) { egyebstr = ""; }
        else if(egyeb== BESZED_TELEFON) { egyebstr = "[Telefon]"; }
		else if(egyeb==BESZED_JARMUBEN) { egyebstr = "[Jármûben]"; }
		else if(egyeb==BESZED_JARMUBOL) { egyebstr = "[Jármûbõl]"; }
		else if(egyeb==BESZED_RADIO) { egyebstr = "[Rádió]"; }
		else if(egyeb==BESZED_OOCRADIO) { egyebstr = "(( [OOC-R]"; }
		else if(egyeb==BESZED_OOC) { egyebstr = "(( [OOC]"; }
		
		if(PlayerInfo[playerid][pHamisNev] != 0) {
			Format(nev,"%s",PlayerInfo[playerid][pHamisNev]);
		} else if(Maszk[playerid] != 0) {
			Format(nev, "%s", MaszkString(playerid));
		} else {
			Format(nev, "%s", PlayerName(playerid));
		}
		
		if(egyeb == BESZED_OOC || egyeb == BESZED_OOCRADIO)
		{
			format(string,strlen(string)+10,"%s ))",string);
		}
		PlayerForeach(i)
		{
			if(!IsValidPlayerID(i) || GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(i)) continue;
			
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);
			
			if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				szinkaki = COLOR_FADE1;
			else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				szinkaki = COLOR_FADE2;
			else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				szinkaki = COLOR_FADE3;
			else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				szinkaki = COLOR_FADE4;
			else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				szinkaki = COLOR_FADE5;
			else
				continue;
			
			PlayerForeach(p)
			{
				if(Poloska[p] == NINCS || !PoloskaHallgat[p] || p == i) continue;
				if(Poloska[p] == i)
				{
					SendFormatMessage(p, COLOR_YELLOW, "*p* %s: %s", nev, string);
				}
			}
			
			if(strfind(string, ":D", true) != -1 || strfind(string, "xD", true) != -1)
			{
				ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
				SendFormatMessage(i, COLOR_PURPLE, "* %s nevet.", PlayerName(playerid));
				return 0;
			}

			if(strfind(string, ":)", true) != -1)
			{
				SendFormatMessage(i, COLOR_PURPLE, "* %s mosolyog.", PlayerName(playerid));
				return 0;
			}

			if(strfind(string, ":(", true) != -1)
			{
				SendFormatMessage(i, COLOR_PURPLE, "* %s szomorú.", PlayerName(playerid));
				return 0;
			}

			if(strfind(string, ":P", true) != -1)
			{
				SendFormatMessage(i, COLOR_PURPLE, "* %s nyelvet ölt.", PlayerName(playerid));
				return 0;
			}

			if(strfind(string, ";)", true) != -1)
			{
				SendFormatMessage(i, COLOR_PURPLE, "* %s kacsint.", PlayerName(playerid));
				return 0;
			}

			if(strfind(string, ":@", true) != -1)
			{
				SendFormatMessage(i, COLOR_PURPLE, "* %s nagyon ideges.", PlayerName(playerid));
				return 0;
			}

			if(strfind(string, ":O", true) != -1)
			{
				SendFormatMessage(i, COLOR_PURPLE, "* %s csodálkozik.", PlayerName(playerid));
				return 0;
			}

			if(strfind(string, ":S", true) != -1)
			{
				SendFormatMessage(i, COLOR_PURPLE, "* %s rosszul van.", PlayerName(playerid));
				return 0;
			}
			
			if(strlen(string) < STRINGTORDELES)
			{
				SendFormatMessage(i, szinkaki, "%s%s mondja: %s", egyebstr, nev, string);
			}
			if(strlen(string) > (STRINGTORDELES - 1))
			{
				new nagystring[STRINGTORDELES - 1];
				strmid(nagystring, string, (STRINGTORDELES - 1), strlen(string));
				strdel(string, (STRINGTORDELES - 1), strlen(string));
				
				SendFormatMessage(i, szinkaki, "%s%s mondja: %s...", egyebstr, nev, string);
				SendFormatMessage(i, szinkaki, "...%s (( %s ))", nagystring, nev);
			}
		}
	}
	return 1;
}

stock Megafon(Float:radi, playerid, string[], col1)
{
	if(IsValidPlayerID(playerid))
	{
		new nev[260];
		if(PlayerInfo[playerid][pHamisNev] != 0) {
			Format(nev, "%s",PlayerInfo[playerid][pHamisNev]);
		} else {
			nev = PlayerName(playerid);
		}
		PlayerForeach(i)
		{
			if(IsValidPlayerID(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
			{
				if(ProxDetectorS(radi, playerid, i))
				{
					SendFormatMessage(i, col1, "o< %s megafonba: %s", nev, string);
				}
			}
		}
	}
	return 1;
}
stock Ordit(Float:radi, playerid, string[],col1,col2,col3,col4,col5,egyeb=BESZED_NINCS)
{
	if(IsValidPlayerID(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		
		new szinkaki = col1;
		
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		new egyebstr[64], nev[260];
		if(egyeb== BESZED_NINCS) { egyebstr = ""; }
        else if(egyeb== BESZED_TELEFON) { egyebstr = "[Telefon]"; }
		else if(egyeb==BESZED_JARMUBEN) { egyebstr = "[Jármûben]"; }
		else if(egyeb==BESZED_JARMUBOL) { egyebstr = "[Jármûbõl]"; }
		else if(egyeb==BESZED_RADIO) { egyebstr = "[Rádió]"; }
		else if(egyeb==BESZED_OOCRADIO) { egyebstr = "(( [OOC-R]"; }
		else if(egyeb==BESZED_OOC) { egyebstr = "(( [OOC]"; }
		
		if(PlayerInfo[playerid][pHamisNev] != 0) {
			Format(nev,"%s",PlayerInfo[playerid][pHamisNev]);
		} else if(Maszk[playerid] != 0) {
			Format(nev, "%s", MaszkString(playerid));
		} else {
			Format(nev, "%s", PlayerName(playerid));
		}

		if(egyeb == BESZED_OOC || egyeb == BESZED_OOCRADIO)
		{
			format(string,strlen(string)+10, "%s ))",string);
		}
		
		PlayerForeach(i)
		{
			if(!IsValidPlayerID(i) || GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(i)) continue;
			
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);
			
			if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				szinkaki = col1;
			else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				szinkaki = col2;
			else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				szinkaki = col3;
			else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				szinkaki = col4;
			else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				szinkaki = col5;
			else
				continue;
			
			PlayerForeach(p)
			{
				if(Poloska[p] == NINCS || !PoloskaHallgat[p] || p == i) continue;
				if(Poloska[p] == i)
				{
					SendFormatMessage(p,COLOR_YELLOW,"*p* %s ordít: %s",nev,string);
				}
			}
			#if defined BARATSYST
			if(IsBarat(playerid,i) && PlayerInfo[playerid][pHamisNev] == 0 || playerid == i && PlayerInfo[playerid][pHamisNev] == 0 || LMT(i,PlayerInfo[playerid][pMember]) && PlayerInfo[playerid][pHamisNev] == 0)
				nev = PlayerName(playerid);
			else
				Format(nev,"[%s]Valaki",RandomPlayerID[playerid]);
			#endif
			
			//new language = PlayerInfo[playerid][pNyelv];
			if(strlen(string) < STRINGTORDELES)
			{
				/*if(playerid != i)
				{*/
					/*if(language != PlayerInfo[i][pNyelv]) {
						SendFormatMessage(i, szinkaki, "%s%s ordítja [%s]: ?????? ((Nem érted...))", egyebstr, nev, Nyelvek[language][1]);
					} else {*/
						SendFormatMessage(i, szinkaki, "%s%s ordítja: %s", egyebstr, nev, string);
					/*}*/						
				/*}
				else if(playerid == i) {
					SendFormatMessage(playerid, szinkaki, "%sTe ordítod [%s]: %s", egyebstr, Nyelvek[language][1], string);
				}*/
			}
			if(strlen(string) > (STRINGTORDELES-1))
			{
				new nagystring[STRINGTORDELES-1];
				strmid(nagystring, string, (STRINGTORDELES-1), strlen(string));
				strdel(string, (STRINGTORDELES-1), strlen(string));
				
				/*if(language != PlayerInfo[i][pNyelv]) {
					SendFormatMessage(i, szinkaki, "%s%s ordítja [%s]: ?????? ((Nem érted...))", egyebstr, nev, Nyelvek[language][1]);
				} else {*/
					SendFormatMessage(i, szinkaki, "%s%s ordítja: %s...", egyebstr, nev, string);
					SendFormatMessage(i, szinkaki, "...%s (( %s ))", nagystring, nev);
				/*}*/
			}
		}
	}
	return 1;
}

public JarmuPozicio(vehicleid, Float:x, Float:y, Float:z)
{
	SetVehiclePos(vehicleid,x,y,z);
	if(VehicleHasDriver(vehicleid))
	{
 		PlayerForeach(p)
		{
			if(IsPlayerInVehicle(p, vehicleid))
			{
			    Teleztek[p] = 1;
			    SetTimerEx("Teletimer", 2500, 0, "i", p);
			}
		}
	}
}

forward KokainNulla(playerid);
public KokainNulla(playerid)
{
	KokainFelszivott[playerid] = 0;
	return 1;
}

stock UjJarmuModel(playerid, modelid)
{	
	new model = modelid, kocsi = GetClosestVehicle(playerid), vs = IsAVsKocsi(kocsi);
	CarInfo[vs][cModel] = model;
	DestroyVehicle(kocsi);
	CarInfo[vs][cId] = UjKocsi(model, CarInfo[vs][cLocationx], CarInfo[vs][cLocationy], CarInfo[vs][cLocationz], CarInfo[vs][cAngle], CarInfo[vs][cColorOne], CarInfo[vs][cColorTwo]);
	SetVehicleVW(CarInfo[vs][cId],CarInfo[vs][cDimenzio][0]);
	SetVehicleInterior(CarInfo[vs][cId],CarInfo[vs][cDimenzio][1]);
	
	engineOn[kocsi] = 0;
	SetJarmu(kocsi, KOCSI_MOTOR, 0); 
	MaxUzemanyag(kocsi);
	
	RemoveVehicleComponents(vs);	
	CarUpdate(vs, CAR_Model);
	
	new Float:x, Float:y, Float:z, Float:a;
	GetVehiclePos(kocsi, x, y, z);
	GetVehicleZAngle(kocsi, a);
	ParkCar(kocsi, x, y, z, a, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	
	UnFreeze(playerid);

	//SendFormatMessage(playerid, COLOR_LIGHTRED, "V-s [%d] kocsi átalakítva! Tulaja %s", vs, CarInfo[vs][cOwner]);
	
	PlayerTextFormat(playerid, "~g~Vehicle átalakítva!~n~Tulaja: %s~n~SQL ID: %d~n~Szerver ID: %d", CarInfo[vs][cOwner], vs, kocsi);
	GameTextForPlayer(playerid, PlayerText[playerid], 5*1000, 3);
}

stock HifiLerak(playerid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new h = -1;
	for(new i=1;i<MAXHIFI;i++)
	{
		if(HifiInfo[i][hVan] == 0)
		{
			h = i;
			break;
		}
	}
	if(h == -1)
	{
		Msg(playerid, "Hiba kód: 0001");
		return 1;
	}
	HifiInfo[h][hID] = h;
	HifiInfo[h][hVan] = 1;
	HifiInfo[h][hX] = x;
	HifiInfo[h][hY] = y;
	HifiInfo[h][hZ] = z;
	HifiInfo[h][hRx] = rx;
	HifiInfo[h][hRy] = ry;
	HifiInfo[h][hRz] = rz;
	//HifiInfo[h][hLerako] = PlayerName(playerid, true);
	HifiInfo[h][hObject] = CreateDynamicObject(2226, x, y, z, rx, ry, rz);
	strmid(HifiInfo[h][hURL], "-", 0, strlen("-"), 32);
	HifiLerakva[playerid] = h;
	Msg(playerid, "Leraktad a Hifit!");
	return 1;
}

stock MaszkString(playerid)
{
	new szoveg[24];
	Format(szoveg, "[Maszk_%d_%d]", PlayerSQLID(playerid), playerid); // [Maszk_SQLID_PlayerID]
	return szoveg;
}

stock UjAdminJarmu(playerid, modelid, color1 = 1, color2 = 3)
{
	new Float:x, Float:y, Float:z, Float:a;
	
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	
	new carid = UjKocsi(modelid, x ,y, z, a, color1, color2);
	
	AdminKocsiID[playerid] = carid;
	AdminJarmu[carid] = 1;
	
	SetVehicleHealth(carid, 1000);
	SetVehicleNumberPlate(carid, "{FF0000}ADMIN");
	SetVehicleToRespawn(carid);
	
	PutPlayerInVehicle(playerid, carid, 0);
	engineOn[carid] = 1;
	SetJarmu(carid, KOCSI_MOTOR, true);
	
	if(!IsFejleszto(playerid))
	{
		new szoveg[124];
		Format(szoveg, "(%s) %s lekért magának egy jámûvet. Model: %d | Jármû ID: %d", AdminSzint(playerid), AdminName(playerid), modelid, carid);
		//AdminCMD(szoveg);
	}
	return 1;
}

fuggveny Login(playerid)
{
	if(Logged(playerid)) return Msg(playerid, "Már be vagy jelentkezve!");
	if(LoginFolyamatban[playerid]) return Msg(playerid, "Már töltõdik!");
	
	if(!JatekBetoltve[playerid])
	{
		Msg(playerid, "Nyugi nyugi!");
	}
	
	if(!Registered(playerid))
	{
		Msg(playerid, "Kérlek regisztrálj!");
		//Register(playerid);
	}
	
	if(Logged(playerid))
	{
		Msg(playerid, "Már be vagy jelentkezve!");
	}
	
	if(Logining[playerid] != 0)
	{
		Msg(playerid, "Már be vannak töltve az adataid!");
	}
	
	if(BejelentkezokSzama > MAXBEJELENTKEZES)
	{
		return Msg(playerid, "Jelenleg túl sokan jelentkeznének be!");
	}
	
	LoginFolyamatban[playerid] = true;
	return 1;
}

fuggveny Login2(playerid, dialogid)
{
	if(!Registered(playerid)) return Msg(playerid, "Nem vagy regisztrálva!");
	
	new 
		convertpass[64],
		inputtext[MAX_PASSWORD_HOSSZ]
	;
	
	format(inputtext, MAX_PASSWORD_HOSSZ, "%s", LoginPassword[playerid]);
	
	if(strlen(inputtext) <= 1 || strlen(inputtext) > MAX_PASSWORD_HOSSZ)
	{
		PlayerTextFormat(playerid, "Bejelentkezés\nMinimum 1 - max %d karakter!\nÍrd be újra!\n\nJelszó:", MAX_PASSWORD_HOSSZ);
		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD , "Bejelentkezõ panel", PlayerText[playerid], "Beír", "Kilépés");
		return 1;				
	}
	
	if(!real_escape_string(inputtext))
	{
		PlayerText[playerid] = "Tiltott karakterek a jelszóban!\nÍrd be újra!\n\nJelszó:";
		ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_PASSWORD , "Bejelentkezõ panel", PlayerText[playerid], "Beír", "Kilépés");
		return 1;	
	}
	
	if(dialogid == DIALOG_PASSWORDCHECK)
	{
		SHA256_PassHash(inputtext, SALT_NORMALPW, convertpass, sizeof(convertpass));
		
		if(egyezik(convertpass, PlayerInfo[playerid][pKey]))
		{
			Msg(playerid, "Jelszó elfogadva!");
			
			/*if(!egyezik(PlayerIP(playerid), PlayerInfo[playerid][pUtolsoLoginIP]))
			{
				PlayerText[playerid] = "Kérlek add meg a biztonsági jelszavad!\nJelszó:";
				ShowPlayerDialog(playerid, DIALOG_SECURITYPASSWORDCHECK, DIALOG_STYLE_PASSWORD, "Bejelentkezõ panel: Biztonsági jelszó", PlayerText[playerid], "Beír", "Kilépés");
			}
			else
			{*/
				SikeresLogin(playerid);
			//}
		}
		else
		{
			HibasJelszo(playerid);
		}
	}
	else if(dialogid == DIALOG_SECURITYPASSWORDCHECK)
	{
		SHA256_PassHash(inputtext, SALT_BIZTONSAGIPW, convertpass, sizeof(convertpass));
		
		if(egyezik(convertpass, PlayerInfo[playerid][pSecurityKey]))
		{
			SikeresLogin(playerid);
		}
		else 
		{
			ClearChat(playerid);
			Msg(playerid, "Elírtad a biztonsági jelszót, ezért 5 percre ki lettél tiltva!");
			BlockPlayerIP(playerid, 5);
		}
	}
	return 1;
}

stock SikeresLogin(playerid)
{
	KillTimer(LoginTimeLimit[playerid]);
	ClearChat(playerid);
	AdatBetoltesSQL(playerid);
	//SetTimerEx("OnPlayerLogin", 3 * 1000, false, "d", playerid);
	OnPlayerLogin(playerid);
	
	if(numplayers > (MAX_PLAYERS-10))
	{
		PlayerForeach(x)
		{
			if(Admin(x, 1))
			{
				SendFormatMessage(x, COLOR_PIROS, "Férõhely/Online játékosok száma: %s | !!! A SZERVER KEZD BETELNI !!!", SzerverLetszam());
			}
		}
	}
	
	Msg(playerid, "A játékmód betöltése folyamatban van..");
	if(karbantartas) {
		Msg(playerid, "A karbantartás mód aktiválva van!", COL_PIROS);
	}
	return 1;
}

fuggveny WebesKarireg(playerid)
{
	new szoveg[384], hostname[64];
	GetConsoleVarAsString("hostname", hostname, sizeof(hostname));
	
	Format(szoveg, "{FFFFFF}Kedves {"#COLOR_MSG"}%s{FFFFFF}! \
	\nÜdvözöllek a %s szerverén!\
	\nLátom te még nem regisztráltál karaktert.\
	\nKérlek tedd meg ezt UCP-n!\
	\n\
	\nElérhetõség:\
	\nWeboldal: {"#COLOR_MSG"}"#OFFICIALWEB"", PlayerName(playerid), hostname);				
	ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Karakter regisztráció", szoveg, "Bezárás", "");

	KickEx(playerid);
	return 1;
}

forward KokainRosszullet(playerid);
fuggveny KokainRosszullet(playerid)
{
	Msg(playerid, "Jobban lettél de még mindig nem tudsz felálni!");
	SetPlayerDrunkLevel(playerid, 0);
	KokainRossz[playerid] = 0;
	ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	Freeze(playerid, 60000);
	ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

forward HeroinRosszullet(playerid);
fuggveny HeroinRosszullet(playerid)
{
	Msg(playerid, "Jobban lettél de még mindig nem tudsz felálni!");
	SetPlayerDrunkLevel(playerid, 0);
	HeroinRossz[playerid] = 0;
	ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	Freeze(playerid, 60000);
	ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

forward HeroinNulla(playerid);
fuggveny HeroinNulla(playerid)
{
	HeroinBelott[playerid] = 0;
	return 1;
}

public ProxDetector2(Float:radi, string[], Float:oldposx, Float:oldposy, Float:oldposz, col1,col2,col3,col4,col5)
{
	new Float:posx, Float:posy, Float:posz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	//radi = 2.0; //Trigger Radius
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i))
		{
			if(!BigEar[i])
			{
				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
				if(((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				{
					SendClientMessage(i, col1, string);
				}
				else if(((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				{
     				SendClientMessage(i, col2, string);
				}
				else if(((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				{
     				SendClientMessage(i, col3, string);
				}
				else if(((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				{
     				SendClientMessage(i, col4, string);
				}
				else if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
     				SendClientMessage(i, col5, string);
				}
			}
			else
			{
				SendClientMessage(i, col1, string);
			}
		}
	}
	return 1;
}

public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsValidPlayerID(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		PlayerForeach(i)
		{
			if(IsValidPlayerID(i))
			{
				if(!BigEar[i])
				{
				    new VW = GetPlayerVirtualWorld(playerid);
				    new VW2 = GetPlayerVirtualWorld(i);
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
					if(((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col1, string);
						}
					}
					else if(((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						if(VW == VW2)
						{
								SendClientMessage(i, col2, string);
						}
					}
					else if(((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						if(VW == VW2)
						{
								SendClientMessage(i, col3, string);
						}
					}
					else if(((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						if(VW == VW2)
						{
								SendClientMessage(i, col4, string);

						}
					}
					else if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						if(VW == VW2)
						{
								SendClientMessage(i, col5, string);
						}
					}
				}
				else
				{
						SendClientMessage(i, col1, string);
				}
			}
		}
	}//not connected
	return 1;
}

public CrimInRange(Float:radi, playerid,copid)
{
	if(IsValidPlayerID(playerid)&&IsValidPlayerID(copid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return 1;
		}
	}
	return 0;
}
fuggveny JatekosMogottVan(playerid, targetid, Float:dOffset)
{
	new
	    Float:pa,
	    Float:ta;
	if(!IsValidPlayerID(playerid) || !IsValidPlayerID(targetid)) return 0;
	GetPlayerFacingAngle(playerid, pa);
	GetPlayerFacingAngle(targetid, ta);
	if(AngleInRangeOfAngle(pa, ta, dOffset) && IsPlayerFacingPlayer(playerid, targetid, dOffset)) return true;
	return false;
}

fuggveny PayNSprayTimer(vehicleid)
{
	ChangeVehicleColor(vehicleid, KocsiSzinek[vehicleid][0], KocsiSzinek[vehicleid][1]);
	SetVehiclePos(vehicleid, 2076.2610, -1831.1194, 13.2963);
	SetVehicleZAngle(vehicleid, 181.7712);
	PayNSprayHasznalva = false;
	return 1;
}

fuggveny SetPlayerToFacePlayer(playerid, targetid)
{
	new
		Float:pX,
		Float:pY,
		Float:pZ,
		Float:X,
		Float:Y,
		Float:Z,
		Float:ang;
	if(!IsValidPlayerID(playerid) || !IsValidPlayerID(targetid)) return 0;
	GetPlayerPos(targetid, X, Y, Z);
	GetPlayerPos(playerid, pX, pY, pZ);
	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	if(X > pX) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);
	SetPlayerFacingAngle(playerid, ang);
 	return 0;

}

fuggveny IsPlayerFacingPlayer(playerid, targetid, Float:dOffset)
{
	new
		Float:pX,
		Float:pY,
		Float:pZ,
		Float:pA,
		Float:X,
		Float:Y,
		Float:Z,
		Float:ang;

	if(!IsValidPlayerID(playerid) || !IsValidPlayerID(targetid)) return 0;
	GetPlayerPos(targetid, pX, pY, pZ);
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);
	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;
	return false;

}
fuggveny AngleInRangeOfAngle(Float:a1, Float:a2, Float:range)
{
	a1 -= a2;
	if((a1 < range) && (a1 > -range)) return true;
	return false;

}
public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsValidPlayerID(playerid)&&IsValidPlayerID(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsValidPlayerID(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}
public LopasVege(carid)
{
	KocsiRespawn(carid);
	Lopott[carid] = false;
}
fuggveny CarToPoint(Float:radi, carid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(carid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return 1;
	return 0;
}

public CustomPickups()
{
	new string[128], oks;
	PlayerForeach(i)
	{
		if(IsValidPlayerID(i) && Logged(i))
		{
			oks = 0;

			//new PlayerVW = GetPlayerVirtualWorld(i), PlayerInt = GetPlayerInterior(i);
			if(Tevezik[i] != NINCS)
			{
			    new Float:health, Float:pajzs;
				GetPlayerArmour(Tevezik[i], pajzs);
			 	GetPlayerHealth(Tevezik[i], health);
				
				SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(Tevezik[i]));
				SetPlayerInterior(i, GetPlayerInterior(Tevezik[i]));
				
			  	format(string, sizeof(string), "~n~~n~~n~~n~~n~~y~%s (ID: %d)~n~HP:%.1f Armor:%.1f ", PlayerName(Tevezik[i]), Tevezik[i], health, pajzs);
			   	GameTextForPlayer(i, string, CUSTOMPICKUPSTIME+100, 3);
		   	}
			
			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if(HouseInfo[h][Van] != 1) continue;

				if(PlayerToPoint(3.0, i, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
				{
					new szoveg[128];
					Format(szoveg, "~g~Üdvözöllek %s házánál!~n~~w~Elérhetõ parancsok: /ajtó, /ds(hout), /ddo, /házinfo", HouseInfo[h][hOwner]);
					iMsg(i, szoveg);
					oks = 1;
					break;
				}
			}
			if(oks) continue;
			
			for(new h = 0; h < sizeof(HotelInfo); h++)
			{
				if(HotelInfo[h][Van] != 1) continue;

				if(PlayerToPoint(3.0, i, HotelInfo[h][hEntranceX], HotelInfo[h][hEntranceY], HotelInfo[h][hEntranceZ]))
				{
					iMsg(i, "Elérhetõ parancsok: /ajtó, /ds(hout), /ddo");
					oks = 1;
					break;
				}
			}
			if(oks) continue;	
			
			new bid = CheckPos(i, "ÜZLETELÕTT");
			if(bid != NINCS)
			{
				if(egyezik(bInfo[bid][bTulaj], "Eladó"))
				{
					PlayerTextFormat(i, "Ez az üzlethelység eladó. Az ára $%s. Ha meg szeretnéd vásárolni használd a (/üzletvásárlás) parancsot.", PenzTordeles(bInfo[bid][bAr]));
					iMsg(i, PlayerText[i]);
				}
				else
				{
					if(egyezik(bInfo[bid][bTulaj], PlayerName(i, true))) iMsg(i, "Ha be szeretnél menni ebbe az üzletbe, használd az (/ajtó) parancsot. Használd a (/biznisz) parancsot a további lehetõségekért.");
					else iMsg(i, "Ha be szeretnél menni ebbe az üzletbe, használd az (/ajtó) parancsot."); 
				}
			}	
			if(oks) continue;
			
			new aid = CheckPos(i, "AJTÓBEJÁRATELÕTT");
			if(aid != NINCS)
			{
				new pickup = Ajtok[aid][PickupID];
				
				/*if(pickup == 1239) iMsg(i, "Ha be szeretnél menni ebbe az épületbe, használd az (/ajtó) parancsot.");
				else if(pickup == 1314) iMsg(i, "Ha be szeretnél menni ebbe az apartmanba, használd az (/ajtó) parancsot.");*/
				
				if(pickup == 1314) iMsg(i, "Ha be szeretnél menni ebbe az apartmanba, használd az (/ajtó) parancsot.");
				else iMsg(i, "Ha be szeretnél menni ebbe az épületbe, használd az (/ajtó) parancsot.");
				
				oks = 1;
			}
			if(oks) continue;
			
		}
	}
	return 1;
}

fuggveny IsOOC(szoveg[])
{
	if(strfind(szoveg, "(") != NINCS || strfind(szoveg, ")") != NINCS ||
		strfind(szoveg, "{") != NINCS || strfind(szoveg, "}") != NINCS ||
		strfind(szoveg, "[") != NINCS || strfind(szoveg, "]") != NINCS ||
		strfind(szoveg, "|") != NINCS
	)
		return 1;
	return 0;
}

fuggveny OsszesPenz(playerid)
{
	new penz = PlayerInfo[playerid][pCash];

	// Bankszámla
	if(PlayerInfo[playerid][pBankSzamlaSzam] != 0) penz += PlayerInfo[playerid][pAccount];

	// Házak
	if(PlayerInfo[playerid][pPhousekey] != NINCS) penz += HouseInfo[ PlayerInfo[playerid][pPhousekey] ][hTakings];
	if(PlayerInfo[playerid][pPhousekey2] != NINCS) penz += HouseInfo[ PlayerInfo[playerid][pPhousekey2] ][hTakings];

	// Biznisz
	//if(PlayerInfo[playerid][pPbiskey] != NINCS) penz += BizzInfo[PlayerInfo[playerid][pPbiskey]][bTill];	//	Bugos

	return penz;
}

fuggveny 
(playerid)
{
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
    printf("Player %d selected object %d", playerid, objectid);
	SendFormatMessage(playerid, COLOR_WHITE, "{FFFFFF}Playerid: {FF0000}%d {FFFFFF}| ObjectID: {FF0000}%d {FFFFFF}| Model ID: {FF0000}%d {FFFFFF}| X poz: {FF0000}%f {FFFFFF}| Y poz: {FF0000}%f {FFFFFF}| Z poz: {FF0000}%f", playerid, objectid, modelid, x, y, z);
	EditDynamicObject(playerid, objectid);
    return 1;
}

public OnPlayerText(playerid, text[])
{
	if(!IsValidPlayerID(playerid)) return 0;
	if(IsPlayerNPC(playerid)) { return 0; }
	if(Alszik[playerid] != 0)
	{
		Msg(playerid, "Alszol, így nem beszélhetsz");
		return 0;
	}
	if(Csendvan && PlayerInfo[playerid][pAdmin] == 0)
	{
		Msg(playerid, "Most nem beszélhetsz!");
		return 0;
	}
	AFKIdo[playerid] = 0;
	//new giver[MAX_PLAYER_NAME];
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new tmp[256];
	new string[256], string2[256];
	//new giveplayerid;

	if(PlayerInfo[playerid][pMuted] == 1)
	{
		SendClientMessage(playerid, TEAM_CYAN_COLOR, "Némítva vagy!");
		return 0;
	}
	if(PlayerCuffed[playerid] == 1)
	{
		Msg(playerid, "Sokkolva vagy, nem tudsz beszélni!");
		return 0;
	}
	if(Leutve[playerid])
	{
		Msg(playerid, "Mivel elájultál ezért nem tudsz beszélni!");
		return 0;
	}
	if(AFK[playerid] == 1)
	{
		Msg(playerid, "Ha szeretnél visszatérni az AFK-ból írd be, hogy '/afk'");
		return 0;
	}
	
	/*if(iPhoneCallStatus[playerid] == 3)
	{
	    new str[256];
	    format(str, 256, "{00CCFF}* Phone: {FFFFFF}%s", text);
	    SendClientMessage(callto[playerid], -1, str);
	    format(str, 256, "{CCCCCC}* Phone: {FFFFFF}%s", text);
	    SendClientMessage(playerid, -1, str);
	    return 0;
	}*/
	
	if(MarriageCeremoney[playerid] > 0)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if(egyezik(text, "igen") || egyezik(text, "yes"))
		{
		    if(GotProposedBy[playerid] < 999)
		    {
			    if(IsValidPlayerID(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
				    format(string, sizeof(string), "Pap: %s elfogadod %s-t feleségedért? (írd 'igen')", giveplayer,sendername);
					SendClientMessage(GotProposedBy[playerid], COLOR_WHITE, string);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
			}
			else if(ProposedTo[playerid] < 999)
			{
			    if(IsValidPlayerID(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Pap: %s és %s házastársaknak nyilványítalak titeket...Férj & Feleség, megcsókolhatod.", sendername, giveplayer);
						Msg(playerid, string);
				   		format(string, sizeof(string), "Pap: %s és %s házastársaknak nyilványítalak titeket...Férj & Feleség, megcsókolhatod.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						//format(string, sizeof(string), "Házasság: Van egy új házaspárunk, %s & %s összeházasodott.", sendername, giveplayer);
						//OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 1)
					{
					    format(string, sizeof(string), "Pap: %s és %s meleg társaknak nyilványítalak titeket...Férj & Férj, megcsókolhatod.", sendername, giveplayer);
						Msg(playerid, string);
				   		format(string, sizeof(string), "Pap: %s és %s meleg társaknak nyilványítalak titeket...Férj & Férj, megcsókolhatod.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						//format(string, sizeof(string), "Házasság: Van egy új meleg párunk, %s & %s összeházasodott.", sendername, giveplayer);
						//OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 2 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
					    format(string, sizeof(string), "Pap: %s és %s meleg társaknak nyilványítalak titeket...Feleség & Feleség, megcsókolhatod.", sendername, giveplayer);
						Msg(playerid, string);
				   		format(string, sizeof(string), "Pap: %s és %s meleg társaknak nyilványítalak titeket...Feleség & Feleség, megcsókolhatod.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						//format(string, sizeof(string), "Házasság: Van egy új meleg társunk, %s & %s összeházasodott.", sendername, giveplayer);
						//OOCNews(COLOR_WHITE, string);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(string, sizeof(string), "%s", sendername);
					strmid(PlayerInfo[ProposedTo[playerid]][pMarriedTo], string, 0, strlen(string), 255);
					format(string, sizeof(string), "%s", giveplayer);
					strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
					GiveMoney(playerid, -100000);
					FrakcioInfo[LMUNKA_ALLAM][fPenz] += 100000;
					PlayerInfo[playerid][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pPhousekey] = PlayerInfo[playerid][pPhousekey];
					PlayerInfo[ProposedTo[playerid]][pPbiskey] = PlayerInfo[playerid][pPbiskey];
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
		else if(egyezik(text, "nem") || egyezik(text, "no"))
		{
		    if(GotProposedBy[playerid] < 999)
		    {
				if(IsValidPlayerID(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* Nem akarod házastársul %s, nem 'igen'-t irtál.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s nem akart elvenni, nem 'igen'-t írt.",sendername);
				    SendClientMessage(GotProposedBy[playerid], COLOR_YELLOW, string);
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
		    }
		    else if(ProposedTo[playerid] < 999)
			{
			    if(IsValidPlayerID(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* Nem akarod házastársul %s, nem 'igen'-t irtál.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s nem akart elvenni, nem 'igen'-t írt.",sendername);
				    SendClientMessage(ProposedTo[playerid], COLOR_YELLOW, string);
				    return 1;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
	    return 0;
	}
	if(ConnectedToPC[playerid] == 255)
	{
		new idx;
	    tmp = strtok(text, idx);
		if(egyezik(tmp, "versenyzõk") || egyezik(tmp, "versenyzok"))
		{
			if(!IsHitman(playerid)) return 1;

			SendFormatMessage(playerid, COLOR_WHITE, "Versenyzõk száma: %d | Hátralévõ idõ: %d másodperc(%d Perc)", BVJatekosok, BVIdo, BVIdo/60);

			new tolteny, weapon[13], ammo[13], Float:elet, Float:pajzs;
			PlayerForeach(x)
			{
				if(!IsValidPlayerID(x) || !Logged(x) || IsPlayerNPC(x) || BViadal[x] != 1) continue;

				for(new y = 0; y < 13; y++)
				{
					GetPlayerWeaponData(x, y, weapon[y], ammo[y]);
					if(weapon[y] == GetPlayerWeapon(x))
					{
						tolteny = ammo[y];
						break;
					}
				}

				GetPlayerHealth(x, elet);
				GetPlayerArmour(x, pajzs);

				SendFormatMessage(playerid, COLOR_WHITE, "Név: %s | Fegyver: %s | Töltény: %d | Élet: %1.f | Pajzs: %1.f", PlayerName(x), aWeaponNames[GetPlayerWeapon(x)], tolteny, elet, pajzs);
			}

			return 0;
		}
	    if(egyezik(tmp, "vérdíjak") || egyezik(tmp, "verdijak"))
		{
			new fejpenz, emberek, txt[128];
			PlayerForeach(x)
			{
				if(x != playerid && IsValidPlayerID(x) && Logged(x))
				{
					fejpenz = PlayerInfo[x][pHeadValue];
					if(fejpenz > 0)
					{
						emberek++;
						format(txt, sizeof(txt), "%s, %s [%d]", txt, PlayerName(x), fejpenz);
						Msg(playerid, txt);
					}
				}
			}
			if(emberek < 1)
				return Msg(playerid, "Nincs vérdíj senkin");
			return 0;
		}

		if(egyezik(tmp, "célpontok") || egyezik(tmp, "celpontok"))
		{
			new emberek;
			PlayerForeach(x)
			{
				if(!IsValidPlayerID(x) || !Logged(x) || IsPlayerNPC(x) || x == playerid) continue;
				if(PlayerInfo[x][pHeadValue] > 0)
				{
					emberek++;
					SetPlayerMarkerForPlayer(playerid, x, 0x00FF00AA);
				}
			}
			return 0;
		}
		if(egyezik(tmp, "tagok"))
		{
		    Msg(playerid, "=============[Hitman Tagok]=============");
		    PlayerForeach(x)
			{
   				if(IsHitman(x))
		    	{
		    	    if(IsDirector(playerid))
			    	{
						SendFormatMessage(playerid, COLOR_LIGHTRED, "- [%d]%s [%s]",x, PlayerName(x), PlayerInfo[x][pHitmanNev]);
					}
					else
					{
					    SendFormatMessage(playerid, COLOR_LIGHTRED, "- %s", PlayerInfo[x][pHitmanNev]);
					}
				}
			}
			Msg(playerid, "=============[Hitman Tagok]=============");
			return 0;
		}
		if(egyezik(tmp, "bomba"))
		{
			if(!IsPlayerInAnyVehicle(playerid)) return Msg (playerid, "Jármûben kell lenned");
		    new kocsim = GetPlayerVehicleID(playerid);
			if(VanBombaBenne[kocsim] != NINCS) return Msg(playerid, "Ebben a jármûben már van bomba.");
			Msg(playerid, "Bomba telepítve, ha beindítják a motort robban!");
			VanBombaBenne[kocsim] = playerid;
			Cselekves(playerid, "felszerelt egy bombát a jármûbe");
			return 0;
		}

		if(egyezik(tmp, "munka"))
		{
			new uzi[128];
			if(HitmanDuty[playerid])
			{
				Format(uzi, "%s befejezte a melót", PlayerInfo[playerid][pHitmanNev]);
				HitmanDuty[playerid] = 0;
			}
			else
			{
				Format(uzi, "%s munkába állt", PlayerInfo[playerid][pHitmanNev]);
				HitmanDuty[playerid] = 1;
			}
			SendHitmanRadioMessage(COLOR_YELLOW, uzi);
			return 0;
		}

		if(egyezik(tmp, "ruha"))
		{
			tmp = strtok(text, idx);

			if(!strlen(tmp))
				return Msg(playerid, "ruha [ruhaid]");

			new skin = strval(tmp);

			if(!IsValidSkin(skin))
				return Msg(playerid, "Nincs ilyen ruha!");

			SetPlayerSkin(playerid,skin);
			PlayerInfo[playerid][pModel] = skin;

			return 0;
		}
		if(egyezik(tmp, "hirdetés") || egyezik(tmp, "Hirdetes"))
		{
		    SendClientMessageToAll(COLOR_LIGHTRED, "Hitman: Gondod van valakivel? Talán félsz a zsaruktól? Bízd ránk! Gyors és Spéci munka!((/contract))");
			return 0;
		}
		else if(egyezik(tmp, "lenyomozás") || egyezik(tmp, "lenyomozas"))
		{
			tmp = strtok(text, idx);
			if(!strlen(tmp)) return Msg(playerid, "Lenyomozás [játékos | jármû] [JátékosID/NévRészlet]");
			if(egyezik(tmp, "kikapcsol"))
			{
				SendClientMessage(playerid, Pink, "Lenyomoz Kikapcsolva!");
				PlayerForeach(ratyi)
				{
					SetPlayerMarkerForPlayer(playerid, ratyi, COLOR_INVISIBLE);
					nnicelpont[playerid] = NINCS;
					nnios[ratyi] = NINCS;
					return 0;
				}
			}
			else if(egyezik(tmp, "laptop"))
			{
				new player = ReturnUser(tmp);
				if(player != INVALID_PLAYER_ID)
				{
					if(!JatekosLaptopInfo[player][jLaptopBe])	return Msg(playerid, "Nincs bekapcsolva a laptopja!");
					if(JatekosLaptopInfo[player][jWifi] == NINCS)	return Msg(playerid, "Nincs csatlakoztva a hálozatra!");
					SetPlayerMarkerForPlayer(playerid, player, COLOR_LIGHTRED);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Lenyomoztad a célszemélyt !");
				}
				else
					return Msg(playerid, "Nincs ilyen játékos");
			}
			else if(egyezik(tmp, "jármû") || egyezik(tmp, "jarmu"))
			{
				tmp = strtok(text, idx);
				//if(Nyomozott[playerid] > 0) return Msg(playerid, "Várj egy kicsit.");
				new rendszam = strval(tmp);
				if(rendszam < 0) return 1;
				new Float:x, Float:y, Float:z;
				GetVehiclePos(rendszam, x, y, z);
				SetTimerEx("LenyomozAuto", 1000, true, "id", playerid, rendszam);
				Nyomozott[playerid] = 10;
				SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* Jármû lenyomozva. (Rendszám: %d)", rendszam);
				return 0;
			}
			else if(egyezik(tmp, "játékos") || egyezik(tmp, "jatekos"))
			{
				tmp = strtok(text, idx);
				new player = ReturnUser(tmp);
				if(player == INVALID_PLAYER_ID) { SendClientMessage(playerid, Pink, "Hibás név!"); return 0; }
				if(PlayerInfo[player][pPnumber] == 0) { SendClientMessage(playerid, Pink, "Nincs telefonja!"); return 0; }
				if(PhoneOnline[player] > 0) { SendClientMessage(playerid, Pink, "A játékosnak kivan kapcsolva a telefonja!"); return 0; }
				new vw = GetPlayerVirtualWorld(player);
				new inti = GetPlayerInterior(player);
				if(vw != 0 || inti != 0)
				{
					if(Hazbanvan[player] == 0)
					{
						if(inti == 18)
						{
							SendClientMessage(playerid, Pink, "Célszemély az egyik 24/7 be van!");
							nnios[player] = playerid;
							return 0;
						}
						else if(inti == 3)
						{
							if(PlayerToPoint(30, player, 296.919982,-108.071998,1001.515625))
							{
								SendClientMessage(playerid, Pink, "Célszemély LS GS be van!");
								nnios[player] = playerid;
								return 0;
							}
							else if(PlayerToPoint(100, player, 384.808624,173.804992,1008.382812))
							{
								SendClientMessage(playerid, Pink, "Célszemély Városházán van!");
								nnios[player] = playerid;
								return 0;
							}
							else if(PlayerToPoint(100, player, 369.8337,162.5357,1014.1893))
							{
								SendClientMessage(playerid, Pink, "Célszemély Városházán van!");
								nnios[player] = playerid;
								return 0;
							}
							else if(PlayerToPoint(100, player, 368.2852,162.4965,1019.9844))
							{
								SendClientMessage(playerid, Pink, "Célszemély Városházán van!");
								nnios[player] = playerid;
								return 0;
							}
							else if(PlayerToPoint(100, player, 370.1142,163.1876,1025.7891))
							{
								SendClientMessage(playerid, Pink, "Célszemély Városházán van!");
								nnios[player] = playerid;
								return 0;
							}
							else if(PlayerToPoint(50, player, 833.269775,10.588416,1004.179687))
							{
								SendClientMessage(playerid, Pink, "Célszemély a Lottozóban van!");
								nnios[player] = playerid;
								return 0;
							}
							else if(PlayerToPoint(50, player, 207.054992,-138.804992,1003.507812))
							{
								SendClientMessage(playerid, Pink, "Célszemély a Bincoban van!");
								nnios[player] = playerid;
								return 0;
							}
							else if(PlayerToPoint(50, player, 288.745971,169.350997,1007.171875))
							{
								SendClientMessage(playerid, Pink, "Célszemély az nni HQ-n van!");
								nnios[player] = playerid;
								return 0;
							}
							else if(PlayerToPoint(50, player, 1494.325195,1304.942871,1093.289062))
							{
								SendClientMessage(playerid, Pink, "Célszemély az Oktató HQ-n van!");
								nnios[player] = playerid;
								return 0;
							}
							else if(PlayerToPoint(50, player, 942.171997,-16.542755,1000.929687))
							{
								Msg(playerid, "Adminjail.");
								nnios[player] = playerid;
								return 0;
							}
						}
						else if(inti == 4)
						{
							SendClientMessage(playerid, Pink, "Célszemély SF GS be van!");
							nnios[player] = playerid;
							return 0;
						}
						else if(inti == 5)
						{
							if(PlayerToPoint(50, player, 72.111999,-3.898649,1000.728820))
							{
								SendClientMessage(playerid, Pink, "Célszemély LS Edzõterembe van!");
								nnios[player] = playerid;
								return 0;
							}
							else if(PlayerToPoint(50, player, 373.825653,-117.270904,1001.499511))
							{
								SendClientMessage(playerid, Pink, "Célszemély az egyik pizzázóban van!");
								nnios[player] = playerid;
								return 0;
							}
						}
						else if(inti == 6)
						{
							if(PlayerToPoint(50, player, 774.213989,-48.924297,1000.585937))
							{
								SendClientMessage(playerid, Pink, "Célszemély Cobra Edzõterembe van!");
								nnios[player] = playerid;
								return 0;
							}
							else if(PlayerToPoint(100, player, 246.783996,63.900199,1003.640625))
							{
								SendClientMessage(playerid, Pink, "Célszemély LSPD-n van!");
								nnios[player] = playerid;
								return 0;
							}
						}
						else if(inti == 9)
						{
							SendClientMessage(playerid, Pink, "Célszemély az egyik csirkésbe van!");
							nnios[player] = playerid;
							return 0;
						}
						else if(inti == 10)
						{
							if(PlayerToPoint(50, player, 375.962463,-65.816848,1001.507812))
							{
								SendClientMessage(playerid, Pink, "Célszemély az egyik Burger Shotba van!");
								nnios[player] = playerid;
								return 0;
							}
							else if(PlayerToPoint(200, player, -975.975708,1060.983032,1345.671875))
							{
								SendClientMessage(playerid, Pink, "Célszemély az RC Gyakorlopályán van!");
								nnios[player] = playerid;
								return 0;
							}
							else if(PlayerToPoint(200, player, 246.375991,109.245994,1003.218750))
							{
								if(vw == 20)
								{
									SendClientMessage(playerid, Pink, "Célszemély VPOP HQ-n van!");
									nnios[player] = playerid;
									return 0;
								}
								else
								{
									SendClientMessage(playerid, Pink, "Célszemély LVPD HQ-n van!");
									nnios[player] = playerid;
									return 0;
								}
							}
						}
						else if(inti == 1)
						{
							SendClientMessage(playerid, Pink, "Célszemély a Húsfeldolgozóban van!((Valameik Maffia Inti))");
							nnios[player] = playerid;
							return 0;
						}
						else if(inti == 17)
						{
							SendClientMessage(playerid, Pink, "Célszemély Alhambrába van!");
							nnios[player] = playerid;
							return 0;
						}
						else if(inti == 2)
						{
							Msg(playerid, "Gyárban van, de csak OOC tudod!");
							nnios[player] = playerid;
							return 0;
						}
						else if(inti == 11)
						{
							SendClientMessage(playerid, Pink, "Célszemély Groove Kocsmában van!");
							nnios[player] = playerid;
							return 0;
						}
					}
					else
					{
						SendFormatMessage(playerid, Pink, "Célszemély a %d szám alatt tartozkodik!", vw);
						nnios[player] = playerid;
						return 0;
					}
				}
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(player, X,Y,Z);
				SetPlayerMarkerForPlayer(playerid, player, 0x00DD00FF);
				SendClientMessage(playerid, 0x00DD00FF, "Célszemély Lenyomozva!");
				SendClientMessage(playerid, 0x00DD00FF, "* Kikapcsoláshoz: lenyomozás kikapcsol");
				nnicelpont[playerid] = player;
				nnios[player] = playerid;
				return 0;
			}
		}

		if(egyezik(tmp, "alnev") || egyezik(tmp, "álnév"))
		{
			new length = strlen(text);
			while ((idx < length) && (text[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = text[idx];
				idx++;
			}
			result[idx - offset] = EOS;

			if(!strlen(result) && PlayerInfo[playerid][pHamisNev] == 0)
			{
				Msg(playerid, "Használat: alnev [újnév]");
				return 0;
			}

			if(!strlen(result) && PlayerInfo[playerid][pHamisNev] != 0)
			{
				Msg(playerid, "Újra a régi neved van!");
				PlayerInfo[playerid][pHamisNev] = 0;
				return 0;
			}

			if(strlen(result) > MAX_PLAYER_NAME)
			{
				SendFormatMessage(playerid, COLOR_GRAD1, "Maximum %d karakter!", MAX_PLAYER_NAME);
				return 0;
			}

			PlayerInfo[playerid][pHamisNev] = result;
			format(string, sizeof(string), "Az új álneved mostantól %s!", result);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			return 0;
		}

		else if((strcmp("Rendelés", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Rendelés")) || (strcmp("Rendeles", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Rendeles")))
		{
		    if(OrderReady[playerid] > 0)
		    {
		        Msg(playerid, "Már rendeltél egy csomagot!");
		        return 0;
		    }
		    tmp = strtok(text, idx);
		    if((strcmp("1", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("1")))
			{
			    if(GetMoney(playerid) >= 50000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
					SetPlayerCheckpoint(playerid,-1446.6891,-1544.5245,102.0073,3.0);
					OrderReady[playerid] = 1;
			        return 0;
			    }
			    else
			    {
			        Msg(playerid, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    if(GetMoney(playerid) >= 80000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 2;
					SetPlayerCheckpoint(playerid,-1446.6891,-1544.5245,102.0073,3.0);
			        return 0;
			    }
			    else
			    {
			        Msg(playerid, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if((strcmp("3", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("3")))
			{
			    if(GetMoney(playerid) >= 120000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 3;
					SetPlayerCheckpoint(playerid,-1446.6891,-1544.5245,102.0073,3.0);
			        return 0;
			    }
			    else
			    {
			        Msg(playerid, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if((strcmp("4", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("4")))
			{
			    if(GetMoney(playerid) >= 150000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 4;
					SetPlayerCheckpoint(playerid,-1446.6891,-1544.5245,102.0073,3.0);
			        return 0;
			    }
			    else
			    {
			        Msg(playerid, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if((strcmp("5", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("5")))
			{
			    if(GetMoney(playerid) >= 180000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 5;
					SetPlayerCheckpoint(playerid,-1446.6891,-1544.5245,102.0073,3.0);
			        return 0;
			    }
			    else
			    {
			        Msg(playerid, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if((strcmp("6", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("6")))
			{
			    if(GetMoney(playerid) >= 220000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 6;
					SetPlayerCheckpoint(playerid,-1446.6891,-1544.5245,102.0073,3.0);
			        return 0;
			    }
			    else
			    {
			        Msg(playerid, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if((strcmp("7", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("7")))
			{
			    if(GetMoney(playerid) >= 220000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 7;
					SetPlayerCheckpoint(playerid,-1446.6891,-1544.5245,102.0073,3.0);
			        return 0;
			    }
			    else
			    {
			        Msg(playerid, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if((strcmp("8", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("8")))
			{
			    if(GetMoney(playerid) >= 270000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 8;
					SetPlayerCheckpoint(playerid,-1446.6891,-1544.5245,102.0073,3.0);
			        return 0;
			    }
			    else
			    {
			        Msg(playerid, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if((strcmp("9", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("9")))
			{
			    if(GetMoney(playerid) >= 270000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 9;
					SetPlayerCheckpoint(playerid,-1446.6891,-1544.5245,102.0073,3.0);
			        return 0;
			    }
			    else
			    {
			        Msg(playerid, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if((strcmp("10", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("10")))
			{
			    if(GetMoney(playerid) >= 300000)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvercsomagot! A HQ-n felveheted!");
			        OrderReady[playerid] = 10;
					SetPlayerCheckpoint(playerid,-1446.6891,-1544.5245,102.0073,3.0);
			        return 0;
			    }
			    else
			    {
			        Msg(playerid, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else if((strcmp("X", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("X")))
			{
			    if(GetMoney(playerid) >= 25000)
			    {
					tmp = strtok(text, idx);
					if(!strlen(tmp))
					{
						Msg(playerid, "Használata: \"rendelés x [fegyvernév]\"");
						return 0;
					}

					new f = -1;
					for(new x = 1; x <= 46; x++)
					{
						if(strfind(aWeaponNames[x], tmp, true) != -1)
							f = x;
					}

					if(f == -1 || f == 19 || f == 20 || f == 21 || f > 34 && f != 43)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ilyen fegyver nincs, vagy tiltott!");
						return 0;
					}

			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megrendelted a fegyvert! A HQ-n felveheted!");
			        OrderReady[playerid] = 11;
					SetPlayerCheckpoint(playerid,-1446.6891,-1544.5245,102.0073,3.0);
					HitmanRendeles[playerid] = f;
			        return 0;
			    }
			    else
			    {
			        Msg(playerid, "Nincs elég pénzed!");
			        return 0;
			    }
			}
			else
			{
			    Msg(playerid, "|__________________ Fegyver csomagok __________________|");
				Msg(playerid, "|(1) (50000Ft) Kés, Deagle, MP5, Shotgun");
				Msg(playerid, "|(2) (80000Ft) Péncél, Kés, Deagle, M4, MP5, Shotgun");
				Msg(playerid, "|(3) (120000Ft) Péncél, Kés, Deagle, AK47, MP5, Shotgun");
				Msg(playerid, "|(4) (150000Ft) Péncél, Kés, Deagle, M4, MP5, Shotgun, Távcsöves");
				Msg(playerid, "|(5) (180000Ft) Péncél, Kés, Deagle, AK47, MP5, Shotgun, Távcsöves");
				Msg(playerid, "|(6) (220000Ft) Süti, Péncél, Kés, Deagle, M4, MP5, Shotgun, Távcsöves");
				Msg(playerid, "|(7) (220000Ft) Süti, Péncél, Kés, Hangtompitós, AK47, MP5, Shotgun, Távcsöves");
				Msg(playerid, "|(8) (270000Ft) Süti, Péncél, Kés, Hangtompitós, AK47, Tec 9, Shotgun, Távcsöves");
				Msg(playerid, "|(9) (270000Ft) Süti, Péncél, Kés, Hangtompitós, AK47, Tec 9, Shotgun, Távcsöves");
				Msg(playerid, "|(10) (300000Ft) Süti, Péncél, Kés, Hangtompitós, AK47, Tec 9, Sörétes, Távcsöves");
				Msg(playerid, "|(X) (25000Ft) Süti, Péncél + Egyéni fegyver > \"rendelés x [fegyver]\"");
			    Msg(playerid, "|________________________________________________________|");
			    return 0;
			}
		}
		else if((strcmp("Kikapcsol", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Kikapcsol")))
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kikapcsoltad a laptopodat.");
      		ConnectedToPC[playerid] = 0;
		    return 0;
		}
		else
		{
			SendClientMessage(playerid, 0xC04200FF, "====[ Laptop - Windows 8 Operációs rendszer ]====");
			if(IsDirector(playerid))
			{
			    SendClientMessage(playerid, 0x00DD00FF, "| Felvétel | - /hitman [név], majd /hitman név [név] [hitmanneve]");
			    SendClientMessage(playerid, 0x00DD00FF, "| Contract törlés | - /contracttörlés [JátékosID/NévRészlet]");
			}
			SendClientMessage(playerid, 0x00DD00FF, "| Munkába állás | - Munka(Mindig írd be ha hitmanként ölsz, ölés elõtt!!!)");
			SendClientMessage(playerid, 0x00DD00FF, "|  Hirdetés | - hirdetés(kiírja, hogy ha gondod van valakivel stb stb..) - /had [szöveg] (Egyéni hirdetés)");
			SendClientMessage(playerid, 0x00DD00FF, "|  Információ | - Tagok(kiírja a tagok hitmannevét) ; Célpontok(Megmutatja õket a térképen)...");
			SendClientMessage(playerid, 0x00DD00FF, "...Vérdíjak(Megmutatja a nevüket és hogy mennyit kapsz értük)");
			SendClientMessage(playerid, 0x00DD00FF, "| Elrejtõzés | - Ruha [skinid] - Álnév [név]");
			SendClientMessage(playerid, 0x00DD00FF, "| Módszerek | - Rendelés - Bomba(Kocsiba berakod, ha beindítják a motort robban) - /méreg[id]");
			SendClientMessage(playerid, 0x00DD00FF, "| Információ szerzés | - Lenyomozás [játékos/jármû] [id]");
			SendClientMessage(playerid, 0x00DD00FF, "| Kapcsolattartás más hitmannal: /hr, /hrb");
			SendClientMessage(playerid, 0xC04200FF, "====[ Laptop - Windows 8 Operációs rendszer ]====");
		    return 0;
		}

	}
	if(CallLawyer[playerid] == 111)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if(egyezik(text, "igen") || egyezik(text, "yes"))
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string, sizeof(string), "** %s ügyvédet hívott.", sendername);
	    	SendJobMessage(2, TEAM_Surenos_COLOR, string);
	    	SendJobMessage(2, TEAM_Surenos_COLOR, "* Menj a rendõrségre és beszélj egy rendõrrel!");
	    	Msg(playerid, "Üzeneted továbbítottuk az ügyvédeknek!");
	    	WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
	    	return 0;
		}
		else
		{
		    Msg(playerid, "Nincs Ügyvéd, büntetés letöltése...");
		    WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
		    return 0;
		}
	}
	if(TalkingLive[playerid] != 255)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
//		if(PlayerInfo[playerid][pJob] == 6)
//		{
//		    format(string, sizeof(string), "LiveNR %s: %s", sendername, text);
//			OOCNews(COLOR_LIGHTGREEN, string);
//		}
//		else
//		{
	    format(string, sizeof(string), "~~~ *ÉLÕ* %s: %s ~~~", sendername, text);
		OOCNews(COLOR_Live, string);
//		}
		return 0;
	}
	if(Mobile[playerid] != -1)
	{
		new idx;
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "[Telefon] Valaki mondja: %s", text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

		if(Mobile[playerid] == 911)
		{
			if(!strlen(text))
				Msg(playerid,  "Sürgõsségi: Sajnálom, nem értem, Rendõrség, Mentõ, Tûzoltóság?");

			else if(strcmp("LSPD", text, true) == 0 || strcmp("rendorseg", text, true) == 0 || strcmp("rendõrség", text, true) == 0)
			{
				Msg(playerid,  "Sürgõsségi: Átkapcsolom magát a rendõrségre, kérem tartsa...");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, COLOR_DBLUE, "Rendõrség: Üdvözlöm, itt a rendõrség, kérem mondja el mi történt.");
			}

			else if(strcmp("lsmd", text, true) == 0 || strcmp("mento", text, true) == 0 || strcmp("mentõ", text, true) == 0)
			{
				Msg(playerid,  "Sürgõsségi: Átkapcsolom a mentõszolgálathoz, kérem tartsa...");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Mentõszolgálat: Kérem röviden mondja el, hogy mi történt!");
			}

			else if(strcmp("tûzoltóság", text, true) == 0 || strcmp("tuzoltosag", text, true) == 0)
			{
				Msg(playerid,  "Sürgõsségi: Átkapcsolom a tûzoltósághoz, kérem tartsa...");
				Mobile[playerid] = 915;
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Tûzoltóság: Kérem röviden mondja el, hogy mi történt!");
			}

			else
				Msg(playerid,  "Sürgõsségi: Nem értem... Rendõrség, Mentõ vagy Tûzoltóság?");

			return 0;
		}

		if(Mobile[playerid] == 912)
		{
			if(!strlen(tmp))
			{
				Msg(playerid,  "912: Elnézést de nem értem.");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_DBLUE, "Rendõrség: Tudja az elkövetõ nevét? Ha nem csak mondja: ''nem''.");
			Mobile[playerid] = 913;
			return 0;
		}

		if(Mobile[playerid] == 913)
		{
			if(!strlen(tmp))
			{
				Msg(playerid,  "Rendõrség: Sajnálom... nem értem");
				return 0;
			}

			new wanted[128];

			if(egyezik(text, "nem") || egyezik(text, "no"))
			{
				new turner[MAX_PLAYER_NAME];
				GetPlayerName(playerid, turner, sizeof(turner));
				new hivo;
				hivo = PlayerInfo[playerid][pPnumber];
				
				SendRadioMessage(LMUNKA_LSPD, COLOR_DBLUE, ValasztoVonal("Bejelentés"));
				SendRadioMessage(LMUNKA_FBI, COLOR_DBLUE, ValasztoVonal("Bejelentés"));
				SendRadioMessage(LMUNKA_NAV, COLOR_DBLUE, ValasztoVonal("Bejelentés"));
				SendRadioMessage(LMUNKA_SWAT, COLOR_DBLUE, ValasztoVonal("Bejelentés"));				
				PlayerForeach(x)
				{
					if(!IsACop(x) && PlayerInfo[x][pSWATTag] > 0)
						SendClientMessage(x, COLOR_DBLUE, ValasztoVonal("Bejelentés"));
					else if(!IsACop(x) && PlayerInfo[x][pNIDTag] > 0)
						SendClientMessage(x, COLOR_DBLUE, ValasztoVonal("Bejelentés"));
					else if(!IsACop(x) && PlayerInfo[x][pSWATTag] > 0 && PlayerInfo[x][pNIDTag] > 0)
						SendClientMessage(x, COLOR_DBLUE, ValasztoVonal("Bejelentés"));
				}

				format(wanted, sizeof(wanted), "HQ: Minden egységnek! Bejelentõ tel. száma: %d | Tettes: Ismeretlen", hivo, turner);
					
				SendRadioMessage(LMUNKA_LSPD, COLOR_DBLUE, wanted);
				SendRadioMessage(LMUNKA_FBI, COLOR_DBLUE, wanted);
				SendRadioMessage(LMUNKA_NAV, COLOR_DBLUE, wanted);
				SendRadioMessage(LMUNKA_SWAT, COLOR_DBLUE, wanted);
				PlayerForeach(x)
				{
					if(!IsACop(x) && PlayerInfo[x][pSWATTag] > 0)
						SendClientMessage(x, COLOR_DBLUE, wanted);
					else if(!IsACop(x) && PlayerInfo[x][pNIDTag] > 0)
						SendClientMessage(x, COLOR_DBLUE, wanted);
					else if(!IsACop(x) && PlayerInfo[x][pSWATTag] > 0 && PlayerInfo[x][pNIDTag] > 0)
						SendClientMessage(x, COLOR_DBLUE, wanted);
				}
				format(wanted, sizeof(wanted), "HQ: Bûncselekmény: %s", PlayerCrime[playerid][pAccusing]);
				SendRadioMessage(LMUNKA_LSPD, COLOR_DBLUE, wanted);
				SendRadioMessage(LMUNKA_FBI, COLOR_DBLUE, wanted);
				SendRadioMessage(LMUNKA_NAV, COLOR_DBLUE, wanted);
				SendRadioMessage(LMUNKA_SWAT, COLOR_DBLUE, wanted);
				PlayerForeach(x)
				{
					if(!IsACop(x) && PlayerInfo[x][pSWATTag] > 0)
						SendClientMessage(x, COLOR_DBLUE, wanted);
					else if(!IsACop(x) && PlayerInfo[x][pNIDTag] > 0)
						SendClientMessage(x, COLOR_DBLUE, wanted);
					else if(!IsACop(x) && PlayerInfo[x][pSWATTag] > 0 && PlayerInfo[x][pNIDTag] > 0)
						SendClientMessage(x, COLOR_DBLUE, wanted);
				}
				Msg(playerid, "Lerakták.");
				Mobile[playerid] = 255;
				return 0;
			}
			new badguy;

			badguy = ReturnUser(tmp);
			if(IsValidPlayerID(badguy))
			{
			    if(badguy != INVALID_PLAYER_ID)
			    {
					SendClientMessage(playerid, COLOR_DBLUE, "Rendõrség: Minden egység riasztva. Köszönjük bejelentését!");

					SetPlayerCriminal(badguy,playerid, PlayerCrime[playerid][pAccusing]);

					Msg(playerid, "Lerakták.");
					Mobile[playerid] = 255;
					return 0;
				}//invalid id
				return 0;
			}//not connected
			else
			{
				format(string, sizeof(string), "Rendõrség: Sajnálom, nincs információnk errõl a személyrõl: %s. Biztos jó név?", tmp);
				SendClientMessage(playerid, COLOR_DBLUE, string);
				return 0;
			}
		}

		if(Mobile[playerid] == 914)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Mentõszolgálat: Sajnálom, de nem értem.");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Mentõszolgálat: Minden egységnek jelentve. Köszönjük bejelentését!");
			format(wanted, sizeof(wanted), "HQ: Minden egységnek! Jelentõ: %s",turner);
			SendTeamMessage(LMUNKA_MENTO, TEAM_CYAN_COLOR, wanted);  //SendCopMessage(TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "HQ: Incidens: %s",text);
			SendTeamMessage(LMUNKA_MENTO, TEAM_CYAN_COLOR, wanted);
			Msg(playerid, "Lerakták.");
			Mobile[playerid] = -1;
			return 0;
		}
        if(Mobile[playerid] == 915)
		{
			if(!strlen(tmp))
			{
				Msg(playerid,  "Tûzoltóság: Elnézést de nem értem.");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_DBLUE, "Tûzoltóság: Értem van életveszélybe valaki?");
			Mobile[playerid] = 916;
			return 0;
		}
		if(Mobile[playerid] == 916)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Tûzoltóság: Sajnálom, de nem értem.");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Tûzoltóság: Minden egységnek jelentve. Köszönjük bejelentését!");
			format(wanted, sizeof(wanted), "HQ: Minden egységnek! Jelentõ: %s",turner);
			SendTeamMessage(LMUNKA_TUZOLTO, TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "HQ: Életveszélyben: %s",PlayerCrime[playerid][pAccusing]);
			SendTeamMessage(LMUNKA_TUZOLTO, TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "HQ: Incidens: %s",text);
			SendTeamMessage(LMUNKA_TUZOLTO, TEAM_CYAN_COLOR, wanted);
			Msg(playerid, "Lerakták.");
			Mobile[playerid] = -1;
			return 0;
		}
		if(IsValidPlayerID(Mobile[playerid]))
		{
		    if(Mobile[Mobile[playerid]] == playerid)
		    {
				SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);
			}
		}

		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Nincs senki a vonalban...");
		}
		return 0;
	}

	if(PlayerRaceInfo[playerid][xEpites] != NINCS)
	{
		new params = Parameterek(text);
		new param[3][32];
		new idx;

		if(params > 0)
		{
			new params_szamlalo = 1;
			while(params_szamlalo <= params && params_szamlalo < sizeof(param))
			{
				param[params_szamlalo] = GetParam(text, params_szamlalo);
				params_szamlalo++;
			}
		}

		new funkcio[32];
		funkcio = strtok(text, idx);

		new slot = PlayerRaceInfo[playerid][xEpites];

		if(egyezik(funkcio, "start"))
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerRaceCheckpoint(playerid, 2, x, y, z, 0.0, 0.0, 0.0, RACECPMERETB);
			RaceStart[slot][0] = x;
			RaceStart[slot][1] = y;
			RaceStart[slot][2] = z;

			Msg(playerid, "Start Checkpoint lerakva");
		}
		else if(egyezik(funkcio, "finish"))
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerRaceCheckpoint(playerid, 2, x, y, z, 0.0, 0.0, 0.0, RACECPMERETB);
			RaceCel[slot][0] = x;
			RaceCel[slot][1] = y;
			RaceCel[slot][2] = z;

			Msg(playerid, "Finish Checkpoint lerakva");
		}
		else if(egyezik(funkcio, "next"))
		{
			if(PlayerRaceInfo[playerid][xEpitesCP] >= RACEMAXCP)
			{
				Msg(playerid, "Elérted a maximális CP számát! Rakd le a Finish-t!");
				return 0;
			}

			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			SetPlayerRaceCheckpoint(playerid, 2, x, y, z, 0.0, 0.0, 0.0, RACECPMERETB);

			PlayerRaceInfo[playerid][xEpitesCP]++;
			new cp = PlayerRaceInfo[playerid][xEpitesCP];
			RaceCP[slot][cp][0] = x;
			RaceCP[slot][cp][1] = y;
			RaceCP[slot][cp][2] = z;

			SendFormatMessage(playerid, COLOR_LIGHTRED, "Ez volt a %d. CP, még %d CP-t rakhatsz le!", cp, (RACEMAXCP - cp));
		}
		else if(egyezik(funkcio, "back"))
		{
			new cp = PlayerRaceInfo[playerid][xEpitesCP];
			if(cp == 0)
			{
				Msg(playerid, "Hova akarsz már visszamenni? Ez a nulladik... ");
				return 0;
			}
			new Float:x, Float:y, Float:z;
			x = RaceCP[slot][cp-1][0];
			y = RaceCP[slot][cp-1][1];
			z = RaceCP[slot][cp-1][2];

			SetPlayerRaceCheckpoint(playerid, 2, x, y, z, 0.0, 0.0, 0.0, RACECPMERETB);
			PlayerRaceInfo[playerid][xEpitesCP] = cp - 1;
			SendFormatMessage(playerid, COLOR_LIGHTRED, "Visszaugrottál a %d. CPre", (cp-1));
		}
		else if(egyezik(funkcio, "save"))
		{
			if(RaceStart[slot][0] == 0.0 || RaceStart[slot][1] == 0.0 || RaceStart[slot][2] == 0.0 || RaceCel[slot][0] == 0.0 || RaceCel[slot][1] == 0.0 || RaceCel[slot][2] == 0.0)
			{
				Msg(playerid, "Nincs megadva Start vagy Cél pozíció!");
				return 0;
			}

			if(!strlen(RaceInfo[slot][rNev]))
			{
				Msg(playerid, "A Racenek nincs neve, adnod kell egy nevet neki > nev [név]");
				return 0;
			}

			if(params < 1)
			{
				Msg(playerid, "Használata: save [savenév] - NEM tartalmazhat space-t!");
				return 0;
			}

			new snev[32], where[64];
			snev = strtok(text, idx);
			strmid(snev, param[1], 0, strlen(param[1]), 40);

			new query[350], setdata[40], start[40], cel[40];
			Format(start, "%.2f,%.2f,%.2f", RaceStart[slot][0], RaceStart[slot][1], RaceStart[slot][2]);
			Format(cel, "%.2f,%.2f,%.2f", RaceCel[slot][0], RaceCel[slot][1], RaceCel[slot][2]);

			Format(where, "SNev='%s'", snev);
			if(Mysql_Num(SQL_DB_Verseny, where) < 1)
				Format(query, "INSERT INTO %s (SNev, Nev, Start, Cel) VALUES('%s', '%s', '%s', '%s')", SQL_DB_Verseny, snev, RaceInfo[slot][rNev], start, cel);
			else
				Format(query, "UPDATE %s SET SNev='%s', Nev='%s', Start='%s', Cel='%s' WHERE %s", SQL_DB_Verseny, snev, RaceInfo[slot][rNev], start, cel, where);

			mysql_query(query);

			new cp;
			for(new x = 0; x < RACEMAXCP; x++)
			{
				if(RaceCP[slot][x][0] == 0.0 || RaceCP[slot][x][1] == 0.0 || RaceCP[slot][x][2] == 0.0) continue;

				Format(setdata, "%f,%f,%f", RaceCP[slot][x][0], RaceCP[slot][x][1], RaceCP[slot][x][2]);
				Format(query, "UPDATE %s SET CK%d = '%s' WHERE %s", SQL_DB_Verseny, cp, setdata, where);
				mysql_query(query);
				cp++;
			}
			Format(query, "UPDATE %s SET Checkpointok='%d' WHERE %s", SQL_DB_Verseny, cp, where);
			mysql_query(query);

			SendFormatMessage(playerid, COLOR_YELLOW, "%s mentve - CPk száma %d", snev, cp);
			Msg(playerid, "A race-t ujra kell loadolnod, ha újra szerkeszteni szeretnéd v. indítani");
			RaceInfo[slot][rStatusz] = RACE_NINCS;
			PlayerRaceInfo[playerid][xEpites] = NINCS;
			DisablePlayerRaceCheckpoint(playerid);
		}
		else if(egyezik(funkcio, "nev"))
		{
			new length = strlen(text);
			while ((idx < length) && (text[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = text[idx];
				idx++;
			}
			result[idx - offset] = EOS;

			if(!strlen(result))
			{
				Msg(playerid, "Használata: nev [név]");
				return 0;
			}

			strmid(RaceInfo[slot][rNev], result, 0, strlen(result), 60);
			SendFormatMessage(playerid, COLOR_LIGHTRED, "A Race neve beállítva: %s", result);
		}
		else
		{
			Msg(playerid, "Funkciók: start, finish, next, back, save");
			Msg(playerid, "Info: Start > start pozíció lerakása | Finish > cél pozícíó megadása | Nev [név] > A race neve");
			Msg(playerid, "Info: Next > Lerakja a következõ CP-t | Back > Egy CPvel visszamegy | Save [név] > Mentés");
		}

		return 0;
	}
	if(Unitedchat)
	{
		if(gPlayerLogged[playerid] == 0)
		{
			return 0;
		}
		//GetPlayerName(playerid, sendername, sizeof(sendername));
		Format(sendername, "%s", PlayerName(playerid));

		if(!gBooc[playerid])
		{
			if(SzajBekotve[playerid] == 1)
			{
				Msg(playerid, "A szád bevan kötve, így nem tudsz beszélni.");
				return 0;
			}
		}
		if(!gBooc[playerid])
		{
			if(SzovegEllenorzes(playerid, text, "IC"))
				return 0;

			PlayerForeach(i)
			{
				if(Poloska[i] == NINCS || !PoloskaHallgat[i] || i==playerid) continue;
				if(Poloska[i] == playerid)
				{
					SendFormatMessage(i,COLOR_YELLOW, "*p* %s: %s",PlayerName(playerid),text);
				}
			}
			new kocsiszoveg, kocsi;
			kocsi = GetPlayerVehicleID(playerid);
			if(IsPlayerInAnyVehicle(playerid) && !IsABicikli(kocsi) && !Bikes(kocsi) && !IsAMotor(kocsi))
			{
				if(!AblakLent[kocsi]) kocsiszoveg = 1;
				else kocsiszoveg = 2;
			}

			if(PlayerInfo[playerid][pHamisNev] == 0 && Maszk[playerid] == 0)
			{
				switch(kocsiszoveg)
				{
					/*case 1:
					{
						format(string2, 128, "[In Vehicle] %s says: %s", sendername, text);
						format(string, 128, "[Jármûben] %s mondja: %s", sendername, text);
					}
					case 2:
					{
						format(string2, 128, "[From Vehicle] %s says: %s", sendername, text);
						format(string, 128, "[Jámûbõl] %s mondja: %s", sendername, text);
					}*/
					default:
					{
						format(string2, 128, "%s says: %s", sendername, text);
						format(string, 128, "%s mondja: %s", sendername, text);
					}
				}

				ChatLog(string);
			}
			else if(PlayerInfo[playerid][pHamisNev] != 0 && Maszk[playerid] == 0)
			{
				format(string, sizeof(string), "[%s]%s mondja: %s", sendername, PlayerInfo[playerid][pHamisNev], text);
				ChatLog(string);

				switch(kocsiszoveg)
				{
					/*case 1:
					{
						format(string2, 128, "[In Vehicle] %s says: %s", PlayerInfo[playerid][pHamisNev], text);
						format(string, 128, "[Jármûben] %s mondja: %s", PlayerInfo[playerid][pHamisNev], text);
					}
					case 2:
					{
						format(string2, 128, "[From Vehicle] %s says: %s", PlayerInfo[playerid][pHamisNev], text);
						format(string, 128, "[Jármûbõl] %s mondja: %s", PlayerInfo[playerid][pHamisNev], text);
					}*/
					default:
					{
						format(string2, 128, "%s says: %s", PlayerInfo[playerid][pHamisNev], text);
						format(string, 128, "%s mondja: %s", PlayerInfo[playerid][pHamisNev], text);
					}
				}
			}
			else if(Maszk[playerid] != 0)
			{
				format(string, sizeof(string), "[Maszk]%s mondja: %s", sendername, text);
				ChatLog(string);
				switch(kocsiszoveg)
				{
					/*case 1:
					{
						format(string2, 128, "[In Vehicle] Someone says: %s", text);
						format(string, 128, "[Jármûben] Valaki mondja: %s",text);
					}
					case 2:
					{
						format(string2, 128, "[From Vehicle] Someone says: %s", text);
						format(string, 128, "[Jármûbõl] Valaki mondja: %s", text);
					}*/
					default:
					{
						format(string2, 128, "Someone says: %s", text);
						format(string, 128, "Valaki mondja: %s", text);
					}
				}
			}
			if(!IsPlayerInAnyVehicle(playerid) && !HalalAnim[playerid] && ChatAnim[playerid] != 0)
			{
				new
					time = strlen(text) * 200,
					konyvtar[6], animname[20]
				;
				
				switch(ChatAnim[playerid])
				{
					case 1: { konyvtar = "PED"; animname = "IDLE_CHAT"; }
					case 2: { konyvtar = "GANGS"; animname = "prtial_gngtlkA"; }
					case 3: { konyvtar = "GANGS"; animname = "prtial_gngtlkB"; }
					case 4: { konyvtar = "GANGS"; animname = "prtial_gngtlkC"; }
					case 5: { konyvtar = "GANGS"; animname = "prtial_gngtlkD"; }
					case 6: { konyvtar = "GANGS"; animname = "prtial_gngtlkE"; }
					case 7: { konyvtar = "GANGS"; animname = "prtial_gngtlkF"; }
					case 8: { konyvtar = "GANGS"; animname = "prtial_gngtlkG"; }
					case 9: { konyvtar = "GANGS"; animname = "prtial_gngtlkH"; }
				}
				
				ApplyAnimation(playerid, konyvtar, animname, 3, 0, 0, 0, 0, time, 1);
			}
			Beszed(20.0, playerid, text, BESZED_NINCS);
			//SetPlayerChatBubble(playerid, "* Beszélt valamit...", COLOR_PURPLE, 5, 2000);
			//SetPlayerChatBubble(playerid, string, COLOR_FADE3, B_Normal, 5000);
		}
		else
		{
			if(SzovegEllenorzes(playerid, text, "IC(OOC)", ELLENORZES_HIRDETES))
				return 0;
			if(PlayerInfo[playerid][pHamisNev] == 0 && Maszk[playerid] == 0)
			{
				format(string, sizeof(string), "(( %s mondja: %s ))", sendername, text);
				ChatLog(string);
			}
			else if(PlayerInfo[playerid][pHamisNev] != 0 && Maszk[playerid] == 0)
			{
				format(string, sizeof(string), "(( [%s]%s mondja: %s ))", sendername, PlayerInfo[playerid][pHamisNev], text);
				ChatLog(string);
				format(string, sizeof(string), "(( %s mondja: %s ))", PlayerInfo[playerid][pHamisNev], text);
			}
			else if(Maszk[playerid] != 0)
			{
				format(string, sizeof(string), "(( [Maszk]%s mondja: %s ))", sendername, text);
				ChatLog(string);
				format(string, sizeof(string), "(( %s mondja: %s ))", sendername, text);
			}
			
			if(IsAdminSzolis(playerid, NINCS))
			{
				new szin = COLOR_HEX_ADMIN;
				SetPlayerChatBubble(playerid, text, szin, 5, 5000);
				Format(string, "(( %s mondja: %s ))", AdminName(playerid), text);
				ProxDetector(20.0, playerid, string, szin, szin, szin, szin, szin);
			}
			else if(ASDuty[playerid] == 1)
			{
				new szin = COLOR_YELLOW;
				SetPlayerChatBubble(playerid, text, szin, 5, 5000);
				Format(string, "(( %s mondja: %s ))", AdminName(playerid), text);
				ProxDetector(20.0, playerid, string, szin, szin, szin, szin, szin);
			}
			else
			{
				SetPlayerChatBubble(playerid, text, COLOR_FADE3, B_Normal, 5000);
				ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			}
				

			/*if(!AdminDuty[playerid])
				SetPlayerChatBubble(playerid, text, COLOR_WHITE, 5, 5000);
			else
				SetPlayerChatBubble(playerid, text, COLOR_PIROS, 5, 5000);*/
		}
		return 0;
	}
	return 1;
}

/* ############################################################################################## */
stock GetMoveDirectionFromKeys(ud, lr)
{
	new direction = 0;

    if(lr < 0)
	{
		if(ud < 0) direction = MOVE_FORWARD_LEFT;
		else if(ud > 0) direction = MOVE_BACK_LEFT;
		else direction = MOVE_LEFT;
	}
	else if(lr > 0)
	{
		if(ud < 0) direction = MOVE_FORWARD_RIGHT;
		else if(ud > 0) direction = MOVE_BACK_RIGHT;
		else direction = MOVE_RIGHT;
 }
	else if(ud < 0) direction = MOVE_FORWARD;
	else if(ud > 0) direction = MOVE_BACK;

	return direction;
}

stock MoveCamera(playerid)
{
	new Float:FV[3], Float:CPP[3];
	GetPlayerCameraPos(playerid, CPP[0], CPP[1], CPP[2]);
    GetPlayerCameraFrontVector(playerid, FV[0], FV[1], FV[2]);


	if(noclipdata[playerid][accelmul] <= 1) noclipdata[playerid][accelmul] += ACCEL_RATE;


	new Float:speed = MOVE_SPEED * noclipdata[playerid][accelmul];

	new Float:X, Float:Y, Float:Z;
	GetNextCameraPosition(noclipdata[playerid][mode], CPP, FV, X, Y, Z);
	MovePlayerObject(playerid, noclipdata[playerid][flyobject], X, Y, Z, speed);

	noclipdata[playerid][lastmove] = GetTickCount();
	return 1;
}

stock GetNextCameraPosition(move_mode, Float:CPP[3], Float:FV[3], &Float:X, &Float:Y, &Float:Z)
{
   	#define OFFSET_X (FV[0]*6000.0)
	#define OFFSET_Y (FV[1]*6000.0)
	#define OFFSET_Z (FV[2]*6000.0)
	switch(move_mode)
	{
		case MOVE_FORWARD:
		{
			X = CPP[0]+OFFSET_X;
			Y = CPP[1]+OFFSET_Y;
			Z = CPP[2]+OFFSET_Z;
		}
		case MOVE_BACK:
		{
			X = CPP[0]-OFFSET_X;
			Y = CPP[1]-OFFSET_Y;
			Z = CPP[2]-OFFSET_Z;
		}
		case MOVE_LEFT:
		{
			X = CPP[0]-OFFSET_Y;
			Y = CPP[1]+OFFSET_X;
			Z = CPP[2];
		}
		case MOVE_RIGHT:
		{
			X = CPP[0]+OFFSET_Y;
			Y = CPP[1]-OFFSET_X;
			Z = CPP[2];
		}
		case MOVE_BACK_LEFT:
		{
			X = CPP[0]+(-OFFSET_X - OFFSET_Y);
 			Y = CPP[1]+(-OFFSET_Y + OFFSET_X);
		 	Z = CPP[2]-OFFSET_Z;
		}
		case MOVE_BACK_RIGHT:
		{
			X = CPP[0]+(-OFFSET_X + OFFSET_Y);
 			Y = CPP[1]+(-OFFSET_Y - OFFSET_X);
		 	Z = CPP[2]-OFFSET_Z;
		}
		case MOVE_FORWARD_LEFT:
		{
			X = CPP[0]+(OFFSET_X  - OFFSET_Y);
			Y = CPP[1]+(OFFSET_Y  + OFFSET_X);
			Z = CPP[2]+OFFSET_Z;
		}
		case MOVE_FORWARD_RIGHT:
		{
			X = CPP[0]+(OFFSET_X  + OFFSET_Y);
			Y = CPP[1]+(OFFSET_Y  - OFFSET_X);
			Z = CPP[2]+OFFSET_Z;
		}
	}
	return 1;
}

stock CancelFlyMode(playerid)
{
	DeletePVar(playerid, "FlyMode");
	CancelEdit(playerid);
	TogglePlayerSpectating(playerid, false);

	DestroyPlayerObject(playerid, noclipdata[playerid][flyobject]);
	noclipdata[playerid][cameramode] = CAMERA_MODE_NONE;
	
	SetPlayerPos(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
	//SetPlayerSkin(playerid, GlobNumber);
	
	for(new x = 0; x < 12; x++)
	{
		if(PlayerInfo[playerid][pTolteny][x] > 0) 
		{
			GivePlayerWeapon(playerid, PlayerInfo[playerid][pFegyver][x], PlayerInfo[playerid][pTolteny][x]);
		}
	}
	FegyverElrak(playerid);
	
	Freeze(playerid, 2000);
	return 1;
}

stock FlyMode(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	noclipdata[playerid][flyobject] = CreatePlayerObject(playerid, 19300, X, Y, Z, 0.0, 0.0, 0.0);

	TogglePlayerSpectating(playerid, true);
	AttachCameraToPlayerObject(playerid, noclipdata[playerid][flyobject]);

	SetPVarInt(playerid, "FlyMode", 1);
	noclipdata[playerid][cameramode] = CAMERA_MODE_FLY;
	return 1;
}
/* ############################################################################################## */

public FixHour(hour)
{
	if(hour < 0)
	{
		hour = hour+24;
	}
	else if(hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

public LAddsOn()
{
	return 1;
}

fuggveny HirTorles(hirID)
{
	HirInfo[hirID][hirVan] = 0;
	HirInfo[hirID][hirFelado] = 0;
	HirInfo[hirID][hirSzoveg] = 0;
	HirInfo[hirID][hirTeloszam] = 0;
}

public AddsOn()
{
	return 1;
}

public Startup(playerid, vehicleid)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;

	//if(IsABicikli(vehicleid)) SetJarmu(vehicleid, KOCSI_MOTOR, 1);
	//else if(engineOn[vehicleid]) SetJarmu(vehicleid, KOCSI_MOTOR, 1);
	else if(IsKocsi(vehicleid, "Gokart"))	return SendClientMessage(playerid, COLOR_YELLOW, "A Gokart elindításához /gokart bérel pararancsot használd!");
	else
	{
		SetJarmu(vehicleid, KOCSI_MOTOR, 0);
		SendClientMessage(playerid, COLOR_YELLOW, "A motort a /kocsi paranccsal indíthatod, vagy ha nincs kulcsod /ellop");
	}

	return 1;
}
public EngineBreak()
{
	PlayerForeach(player)
	{
		if(!IsPlayerInAnyVehicle(player)) continue;
		new Float:vHealth, car;
		car = GetPlayerVehicleID(player);
		GetVehicleHealth(car, vHealth);
		if(IsPlayerInAnyVehicle(player))
		{
			if(vHealth < 350)
			{
				SetVehicleHealth(car, 350);
				Msg(player, "Elromlott a jármûved! (/v repair)", COL_PIROS);
				engineOn[car] = 0;
				SetJarmu(car, KOCSI_MOTOR, 0);
			}
		}
	}

	return 1;
}

public Mergezes(playerid)
{
	new string[256];
	if(Mergezve[playerid] < 1)
	{
		KiMergezte[playerid] = NINCS;
		Mergezve[playerid] = 0;
		return 1;
	}
	SetHealth(playerid, 0);
	if(PlayerInfo[playerid][pHeadValue] > 0)
	{
		if(IsHitman(KiMergezte[playerid]) && HitmanDuty[KiMergezte[playerid]])
		{
			SendFormatMessageToAll(COLOR_YELLOW, " A bérgyilkos teljesítette a megbízó kérését - %s kinyírva ", PlayerName(playerid));
			format(string,sizeof(string), "%s teljesítette a megbízást", PlayerInfo[KiMergezte[playerid]][pHitmanNev]);
			SendHitmanRadioMessage(COLOR_YELLOW, string);
			SendFormatMessage(KiMergezte[playerid], COLOR_LIGHTBLUE, "A megbízást teljesítetted. A cég átutalta a pénzt a számládra. ($%d)", PlayerInfo[playerid][pHeadValue]);

			PlayerInfo[KiMergezte[playerid]][pAccount] += PlayerInfo[playerid][pHeadValue];
			PlayerInfo[playerid][pHeadValue] = 0;
			format(string, sizeof(string), "%s megmérgezte %s-t", PlayerInfo[KiMergezte[playerid]][pHitmanNev],  PlayerName(playerid));
			ABroadCast(COLOR_GREY, string, 1);
		}
	}
	KiMergezte[playerid] = NINCS;
	Mergezve[playerid] = 0;
	return 1;
}

public JarmuRiasztoBe(carid)
{
	if(GetJarmu(carid, KOCSI_RIASZTO) == 1)
	{
		SetJarmu(carid, KOCSI_RIASZTO, 1);
		SetTimerEx("JarmuRiasztoBe", 5000, false, "i", carid);
	}
}

public BoltRablas(playerid)
{
	if(BoltbaVan(playerid))
	{
		new raboltosszeg = Rand(5000, 120000)/DOLLAR_ARFOLYAM;
		GiveMoney(playerid, raboltosszeg);
		SendFormatMessage(playerid, COLOR_PIROS, "Találtál a kasszában $%s-ot!", PenzTordeles(raboltosszeg));
	}
	else
	{
		Msg(playerid, "Elmentél a helyedrõl ezért nem kapod meg a pénzt!");
	}
}

forward BankRablas();
public BankRablas()
{
	PlayerForeach(x)
	{
		if(IsACop(x))
		{
			SendClientMessage(x, TEAM_BLUE_COLOR, "* FIGYELEM! Valaki megnyomta a Miami International Bankban a néma riasztót!");
		}
		if(PlayerToPoint(30.0, x, 1091.7880, -1290.8191, 994.0234))
		{
			Cselekves(x, "megnyomta a néma riasztót", 1);
		}
	}
	printf("Rendõrök riasztásának idõpontja a bankrabláshoz: %s", TeljesDatum());
}

public rabaleng(playerid)
{
	SetPVarInt(playerid, "boltrob", 0);
}

public JarmuRiaszto(playerid)
{
	UnFreeze(playerid);
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
	Msg(playerid, "* Riasztó kikapcsolva!");
	if(KocsiRiaszto[GetPlayerVehicleID(playerid)] == 1)
		KocsiRiaszto[GetPlayerVehicleID(playerid)] = 0;
	SetJarmu(GetPlayerVehicleID(playerid), KOCSI_RIASZTO, 0);
	return 1;
}

OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

stock UjRendszam(kocsi,type[])
{
	new vs = IsAVsKocsi(kocsi);
	
	if(vs == NINCS) return false;
	
	if(egyezik(type, "random"))
	{
		new Betuk[26][] =
		{
		    "A", "B", "C", "D", "E", "F", "G",
		    "H", "I", "J", "K", "L", "M", "N",
		    "O", "P", "Q", "R", "S", "T", "U",
		    "V", "W", "X", "Y", "Z"
		};
		format(CarInfo[vs][cRendszam], 12, "%s%s%s - %d", Betuk[random(26)], Betuk[random(26)], Betuk[random(26)], kocsi);
	}
	else
	    format(CarInfo[vs][cRendszam],12, "%s", type);

	CarInfo[vs][cRegisztralva] = 1;
	KocsiRendszam(kocsi);
	CarUpdate(vs,CAR_Regisztracio);
	return true;
}

stock KocsiRendszam(kocsi, vsdef = NINCS)
{
	new string[12];
	new vs;
	if(vsdef == NINCS)
		vs = IsAVsKocsi(kocsi);
	else
		vs = vsdef;
		
	if(!NPCKocsi[kocsi])
	{
	    if(vs == NINCS)
		{
			Format(string, "GM-%d", kocsi);
		}
		else
		{
		    if(CarInfo[vs][cRegisztralva] != 1)
		        Format(string, "DB-%d-%d", vs, CarInfo[vs][cId]);
			else
			    format(string, 24, "%s", CarInfo[vs][cRendszam]);
		}
		SetVehicleNumberPlate(kocsi, string);
	}
}

stock ValodiRendszam(kocsi)
{
	new rendszam[24];
	/*if(RendszamKrealva[kocsi] == 0)
	{*/
		new Betuk[26][] =
		{
			"A", "B", "C", "D", "E", "F", "G",
			"H", "I", "J", "K", "L", "M", "N",
			"O", "P", "Q", "R", "S", "T", "U",
			"V", "W", "X", "Y", "Z"
		};		
		Format(rendszam, "U%d-%d%s%s", kocsi, Rand(1, 9), Betuk[random(26)], Betuk[random(26)]);
		//RendszamKrealva[kocsi] = 1;
	/*}*/
	return rendszam;
}

//GET X Y IN FRONT OR BEHIND PLAYER---------------------------------------------
fuggveny GetXYInFrontOfPlayer(playerid,&Float:x,&Float:y,Float:dis)
{
	new Float:a, Float:z;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid,a);
	GetXYInFrontOfPoint(x, y, a, dis);
}

fuggveny GetXYBehindPlayer(playerid,&Float:x,&Float:y,Float:dis)
{
	new Float:a, Float:z;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid,a);
	GetXYBehindPoint(x, y, a, dis);
}

//GET X Y IN FRONT/BEHIND/LEFT/RIGHT OF POINT-----------------------------------

fuggveny GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x += (distance * floatsin(-angle, degrees));
	y += (distance * floatcos(-angle, degrees));
}

fuggveny GetXYBehindPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x -= (distance * floatsin(-angle, degrees));
	y -= (distance * floatcos(-angle, degrees));
}

fuggveny GetXYLeftOfPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x -= (distance * floatsin(-angle - 90.0, degrees));
	y -= (distance * floatcos(-angle - 90.0, degrees));
}

fuggveny GetXYRightOfPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x -= (distance * floatsin(-angle + 90.0, degrees));
	y -= (distance * floatcos(-angle + 90.0, degrees));
}

//------------------------------------------------------------------------------
//Jobbra és ballra pozíciók lekérdezése
fuggveny GetXYInRightOfVehicle(playerid,&Float:x,&Float:y,Float:dis)
{
	new currentveh;
	new Float:a, Float:z;
	currentveh = GetPlayerVehicleID(playerid);
	GetVehiclePos(currentveh, x, y, z);
	GetVehicleZAngle(currentveh, a);
	GetXYRightOfPoint(x, y, a,dis);
}

fuggveny GetXYInLeftOfVehicle(playerid,&Float:x,&Float:y,Float:dis)
{
	new currentveh;
	new Float:a, Float:z;
	currentveh = GetPlayerVehicleID(playerid);
	GetVehiclePos(currentveh, x, y, z);
	GetVehicleZAngle(currentveh, a);
	GetXYLeftOfPoint(x, y, a,dis);
}
//GET X Y IN FRONT OR BEHIND OF VEHICLE-----------------------------------------
fuggveny GetXYInFrontOfVehicle(jarmu,&Float:x,&Float:y,Float:dis)
{
	new Float:a, Float:z;
	GetVehiclePos(jarmu, x, y, z);
	GetVehicleZAngle(jarmu, a);
	GetXYInFrontOfPoint(x, y, a,dis);
}

fuggveny GetXYBehindVehicle(jarmu,&Float:x,&Float:y,Float:dis)
{
	new Float:a, Float:z;
	GetVehiclePos(jarmu, x, y, z);
	GetVehicleZAngle(jarmu, a);
	GetXYBehindPoint(x, y, a,dis);
}
//------------------------------------------------------------------------------

fuggveny Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y) {

  new Float:DX, Float:DY;
  new Float:angle;

  DX = floatabs(floatsub(x2,X));
  DY = floatabs(floatsub(y2,Y));

  if(DY == 0.0 || DX == 0.0) {
    if(DY == 0 && DX > 0) angle = 0.0;
    else if(DY == 0 && DX < 0) angle = 180.0;
    else if(DY > 0 && DX == 0) angle = 90.0;
    else if(DY < 0 && DX == 0) angle = 270.0;
    else if(DY == 0 && DX == 0) angle = 0.0;
  }
  else {
    angle = atan(DX/DY);

    if(X > x2 && Y <= y2) angle += 90.0;
    else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
    else if(X < x2 && Y >= y2) angle -= 90.0;
    else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
  }

  return floatadd(angle, 90.0);
}

fuggveny IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
	new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
	GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
	GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);

	new Float:vertical, Float:Unitedtal;

	switch (GetPlayerWeapon(playerid))
	{
		case 34,35,36:
		{
			if(DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
			else return false;
		}
		case 30,31: {vertical = 4.0; Unitedtal = -1.6;}
		case 33: {vertical = 2.7; Unitedtal = -1.0;}
		default: {vertical = 6.0; Unitedtal = -2.2;}
	}

	new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
	new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
	GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+Unitedtal, floatcos(angle+vertical, degrees));

	if(DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
	return false;
}

fuggveny IsPlayerAimingAtPlayer(playerid, targetplayerid) {
  new Float:x, Float:y, Float:z;
  GetPlayerPos(targetplayerid, x, y, z);
  return IsPlayerAimingAt(playerid, x, y, z, 1.8);
}
public riasztoki(playerid)
{
	new atm = ATMnelVan(playerid);
	if(atm == -1) return 1;
	new string[256];
	format(string, sizeof(string), "**%s Deaktiválta az ATM riasztó rendszerét!**", PlayerName(playerid));
	SendRadioMessage(LMUNKA_LSPD, COLOR_DBLUE, string);
	SendRadioMessage(LMUNKA_FBI, COLOR_DBLUE, string);
	SendRadioMessage(LMUNKA_NAV, COLOR_DBLUE, string);
	ATM[atm][aRiaszto] = 0;
	PlayerForeach(i)
	{
		if(IsACop(i))
		{
			RemovePlayerMapIcon(i,atm);
		}
	}
	return 1;
}
fuggveny IsPlayerInWater(playerid) {
        new anim = GetPlayerAnimationIndex(playerid);
        if(((anim >=  1538) && (anim <= 1542)) || (anim == 1544) || (anim == 1250) || (anim == 1062)) return 1;
        return 0;
}

fuggveny IsPlayerAiming2(playerid)
{
	new anim = GetPlayerAnimationIndex(playerid);
	if(((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) ||
	(anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
	return 0;
}
fuggveny IpbolID(ip[])
{
    new id = -1;
	PlayerForeach(i)
	{
	    if(egyezik(PlayerIP(i),ip))
	    {
	        id = i;
	        break;
	    }
	}
	return id;
}
fuggveny FloatToInt(Float:numb,round)
{
 if(round == 0) return floatround(numb, floatround_round);
 else if(round == 1) return floatround(numb, floatround_floor);
 return 0;

}
forward TextLabelBetoltes();
public TextLabelBetoltes()
{
    CreateDynamic3DTextLabel("Y", COLOR_WHITE, 240.6545,210.5376,1473.8960, 1.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 0);
    CreateDynamic3DTextLabel("Y", COLOR_WHITE, 238.9058,209.7058,1473.9985, 1.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 0);
    CreateDynamic3DTextLabel("Y", COLOR_WHITE, 238.6924,209.6699,1417.8585, 1.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 0);
    CreateDynamic3DTextLabel("Y", COLOR_WHITE, 240.6389,210.6564,1417.7560, 1.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 0);
	print("3D Text Labelek lepakolva!");
}
forward Eleses(playerid,elorehatra);
public Eleses(playerid,elorehatra)
{
	if(elorehatra == 0)
	{
		ApplyAnimation(playerid, "ped", "getup_front", 4.0, 0, 0, 0, 0, 0);
	}
	else if(elorehatra == 1)
	{
		ApplyAnimation(playerid, "ped", "getup", 4.0, 0, 0, 0, 0, 0);
	}
}
fuggveny IsVehicleDrivingBackwards(vehicleid)
{
	new Float:Float[3];
	if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
	{
		GetVehicleZAngle(vehicleid, Float[0]);
		if(Float[0] < 90)
		{
			if(Float[1] > 0 && Float[2] < 0) return true;
		}
		else if(Float[0] < 180)
		{
			if(Float[1] > 0 && Float[2] > 0) return true;
		}
		else if(Float[0] < 270)
		{
			if(Float[1] < 0 && Float[2] > 0) return true;
		}
		else if(Float[1] < 0 && Float[2] < 0) return true;
	}
	return false;
}

fuggveny IsValidEmail(const email[]) //By Jan "DracoBlue"Schütze
{
	new len=strlen(email);
	new cstate=0;
	for(new i=0;i<len;i++)
	{
		if((cstate==0 || cstate==1) && (email[i]>='A' && email[i]<='Z') || (email[i]>='a' && email[i]<='z')  || (email[i]=='.')  || (email[i]=='-')  || (email[i]=='_'))
		{
		}
		else
		{
			if((cstate==0) &&(email[i]=='@'))
			{
				cstate=1;
			}
			else
			{
				return false;
			}
		}
	}
	if(cstate < 1)
	{
		return false;
	}
	if(len<6)
	{
		return false;
	}
	if((email[len-3]=='.') || (email[len-4]=='.') || (email[len-5]=='.'))
	{
		return true;
	}
	return false;
}
fuggveny OroszRulett(playerid)
{
	new Esely;
	Esely = random(100);
	if(Esely < 16)
	{
		Cselekves(playerid, "meghúzta a ravaszt és a fegyver elsûlt");
		Msg(playerid, "Fejbe lõtted magad!");
		SetPlayerHealth(playerid, 0);
	}
	else
	{
		Cselekves(playerid, "meghúzta a ravaszt de a fegyver nem sûlt el");
		Msg(playerid, "Ezt megúsztad! :)");
	}
}

forward CCTVKeyTimer(playerid);
public CCTVKeyTimer(playerid)
{
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
	if(CurrentCCTV[playerid] > -1 && PlayerMenu[playerid] == -1)
	{
	    if(leftright == KEY_RIGHT)
	  	{
	  	    if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] - 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] - 0.5);
			}
	  	    if(CCTVDegree[playerid] < 0)
	  	    {
	  	        CCTVDegree[playerid] = 359;
			}
	  	    MovePlayerCCTV(playerid);

		}
	    if(leftright == KEY_LEFT)
	    {
	        if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] + 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] + 0.5);
			}
			if(CCTVDegree[playerid] >= 360)
	  	    {
	  	        CCTVDegree[playerid] = 0;
			}
	        MovePlayerCCTV(playerid);

	    }
	    if(updown == KEY_UP)
	    {
	        if(CCTVRadius[playerid] < 25)
	        {
		        if(keys == KEY_SPRINT)
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.5);
		        	MovePlayerCCTV(playerid);
				}
				else
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.1);
		        	MovePlayerCCTV(playerid);
				}
			}
		}
		if(updown == KEY_DOWN)
	    {
			if(keys == KEY_SPRINT)
			{
			    if(CCTVRadius[playerid] >= 0.6)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.5);
			       	MovePlayerCCTV(playerid);
				}
			}
			else
			{
			    if(CCTVRadius[playerid] >= 0.2)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.1);
			       	MovePlayerCCTV(playerid);
				}
			}
		}
		if(keys == KEY_CROUCH)
		{
		    //OnPlayerCommandText(playerid, "/exitcctv");
		}
	}
	MovePlayerCCTV(playerid);
}

fuggveny MovePlayerCCTV(playerid)
{
	CCTVLA[playerid][0] = CCTVLAO[CurrentCCTV[playerid]][0] + (floatmul(CCTVRadius[playerid], floatsin(-CCTVDegree[playerid], degrees)));
	CCTVLA[playerid][1] = CCTVLAO[CurrentCCTV[playerid]][1] + (floatmul(CCTVRadius[playerid], floatcos(-CCTVDegree[playerid], degrees)));
	SetPlayerCameraLookAt(playerid, CCTVLA[playerid][0], CCTVLA[playerid][1], CCTVLA[playerid][2]);
}

fuggveny KameranalVan(playerid)
{
	new kamera = NINCS;
	for(new cctv=0; cctv < MAX_CCTVS; cctv++)
	{
		if(PlayerToPoint(70, playerid, CCTVCP[cctv][0],CCTVCP[cctv][1],CCTVCP[cctv][2]))
		{
			kamera = cctv;
			break;
		}
	}
	return kamera;
}
stock AddCCTV(name[], Float:X, Float:Y, Float:Z, Float:Angle, int=0, vw=0)
{
	if(TotalCCTVS >= MAX_CCTVS) return 0;
	format(CameraName[TotalCCTVS], 32, "%s", name);
	CCTVCP[TotalCCTVS][0] = X;
	CCTVCP[TotalCCTVS][1] = Y;
	CCTVCP[TotalCCTVS][2] = Z;
	CCTVCP[TotalCCTVS][3] = Angle;
	CCTVLAO[TotalCCTVS][0] = X;
	CCTVLAO[TotalCCTVS][1] = Y;
	CCTVLAO[TotalCCTVS][2] = Z-10;
	CCTVEgyeb[TotalCCTVS][0] = int;
	CCTVEgyeb[TotalCCTVS][1] =  vw;
	TotalCCTVS++;
	return TotalCCTVS-1;
}

SetPlayerToCCTVCamera(playerid, CCTV)
{
	if(CCTV >= TotalCCTVS)
	{
	    Msg(playerid, "Kamera {FF0000}Hiba!");
	    return 1;
	}
	if(CurrentCCTV[playerid] == -1)
    {
	    GetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
		GetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
        LastPos[playerid][LInterior] = GetPlayerInterior(playerid);
	}
	else
	{
		KillTimer(KeyTimer[playerid]);
	}
	CurrentCCTV[playerid] = CCTV;
    TogglePlayerControllable(playerid, 0);
	//SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], (CCTVCP[CCTV][2]-50));
	SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], -100.0);
	SetPlayerCameraPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], CCTVCP[CCTV][2]);
	SetPlayerCameraLookAt(playerid, CCTVLAO[CCTV][0], (CCTVLAO[CCTV][1]+0.2), CCTVLAO[CCTV][2]);
	SetPlayerInterior(playerid,CCTVEgyeb[TotalCCTVS][0]);
	SetPlayerVirtualWorld(playerid,CCTVEgyeb[TotalCCTVS][1]);
	CCTVLA[playerid][0] = CCTVLAO[CCTV][0];
	CCTVLA[playerid][1] = CCTVLAO[CCTV][1]+0.2;
	CCTVLA[playerid][2] = CCTVLAO[CCTV][2];
	CCTVRadius[playerid] = 12.5;
	CCTVDegree[playerid] = CCTVCP[CCTV][3];
	MovePlayerCCTV(playerid);
    KeyTimer[playerid] = SetTimerEx("CCTVKeyTimer", 75, 1, "i", playerid);
	return 1;
}
forward SulyMeres(playerid);
public SulyMeres(playerid)
{
	MunkaFolyamatban[playerid] = 0;
    if(AMT(playerid,MUNKA_CSOMAGSZALLITO))
	{
		Cselekves(playerid, "lemérte az áru tartalmát.",0);
		Msg(playerid, "Áru lemérve, viheted az árut!");
		CsomagszallitoMerve[playerid] = 1;
		SetPlayerCheckpoint(playerid, CsomagszallitoHely[SzallitasPozicio[playerid]][0],CsomagszallitoHely[SzallitasPozicio[playerid]][1],CsomagszallitoHely[SzallitasPozicio[playerid]][2], 3);
		TogglePlayerControllable(playerid,1);
	}
}
fuggveny CsomagszallitoPakolas(playerid,ki_be)
{
	MunkaFolyamatban[playerid] = 0;
	if(ki_be == 1)
	{
		//if(!PlayerToPoint(30, playerid, 1269.9003, -2402.8171, 5.6883)) return Msg(playerid, "Elmentél a telep rakodóhelyérõl...");
		TogglePlayerControllable(playerid, 1);
		SzallitasPozicio[playerid] = random(sizeof(CsomagszallitoHely));
		new Float:tav = GetDistanceToPoint(playerid,CsomagszallitoHely[SzallitasPozicio[playerid]][0],CsomagszallitoHely[SzallitasPozicio[playerid]][1],CsomagszallitoHely[SzallitasPozicio[playerid]][2]);
		new TavolsagKerekitve = floatround((tav/1000.0), floatround_floor);
		GameTextForPlayer(playerid, "~g~~n~~n~~n~~n~~n~~n~~n~~n~~n~Áru feltöltve!", 1000, 3);
		SzallitasAru[playerid] = random(sizeof(SzallitasNeve));
		SetPlayerCheckpoint(playerid, CsomagszallitoHely[SzallitasPozicio[playerid]][0], CsomagszallitoHely[SzallitasPozicio[playerid]][1], CsomagszallitoHely[SzallitasPozicio[playerid]][2], 5.0);
		new arumennyiseg = Rand(3, 6);
		CsomagszallitoMerve[playerid] = 1; // ez késõbb lett iderakva
		szallit[playerid] = arumennyiseg;
		/*SendClientMessage(playerid,COLOR_YELLOW, "==========[ Felpakolva ]==========");
		SendFormatMessage(playerid,COLOR_GREEN, "Szállítás Tartalma: %s",SzallitasNeve[SzallitasAru[playerid]]);
		SendFormatMessage(playerid,COLOR_GREEN, "Lerakóhelyek száma: %d",szallit[playerid]);
		SendFormatMessage(playerid,COLOR_GREEN, "Elsõ Lerakóhely: %d Km",TavolsagKerekitve);
		SendClientMessage(playerid,COLOR_YELLOW, "==========[ Felpakolva ]==========");*/
		
		new szoveg[124];
		Format(szoveg, "Szállítás Tartalma: %s\nLerakóhelyek száma: %d\nElsõ Lerakóhely: %d Km", SzallitasNeve[SzallitasAru[playerid]], szallit[playerid], TavolsagKerekitve);
		MsgDialog(playerid, "Szállítólevél", szoveg, "Bezárás");
		
		Cselekves(playerid, "feltöltötte a csomagszállítót áruval",1);
	}
	else if(ki_be == 2)
	{
		if(!PlayerToPoint(10, playerid, CsomagszallitoHely[SzallitasPozicio[playerid]][0],CsomagszallitoHely[SzallitasPozicio[playerid]][1],CsomagszallitoHely[SzallitasPozicio[playerid]][2])) return Msg(playerid, "Elmentél a lerakóhelyrõl...");

		if(szallit[playerid] == 1)
		{
			TogglePlayerControllable(playerid,1);
			
			new fizetes = Rand(50, 150);
			GameTextForPlayer(playerid, "~g~~n~~n~~n~~n~~n~~n~~n~~n~~n~Áru kipakolva!", 1000, 3);
			DisablePlayerCheckpoint(playerid);
			new veh = GetVehicleTrailer(GetPlayerVehicleID(playerid));
			KocsiRespawn(veh);
			SendFormatMessage(playerid,COLOR_YELLOW, "Kaptál ezért a fuvarért $%d!", fizetes);
			SendClientMessage(playerid,COLOR_GREEN, "Minden áru kipakolva, mehetsz vissza a telepre a következõ fuvarért!");
			if(CsomagszallitoMerve[playerid] != 0)
			{
				GiveMoney(playerid, fizetes);
				FrakcioInfo[LMUNKA_ALLAM][fPenz] -= fizetes;
			}
			else
			{
				Msg(playerid, "Sajnálom, az árut nem fizetjük ki, mert nem az eljárás szerint járt el! (nem mérted le az árut)");
				return 1;
			}	
			Cselekves(playerid, "kipakolta az árut.",1);
			szallit[playerid] = 0;
			SzallitasPozicio[playerid] = NINCS;
			CsomagszallitoMerve[playerid] = 0;
		}
		else
		{
			TogglePlayerControllable(playerid, 1);
			SzallitasPozicio[playerid] = random(sizeof(CsomagszallitoHely));
			new Float:tav = GetDistanceToPoint(playerid,CsomagszallitoHely[SzallitasPozicio[playerid]][0],CsomagszallitoHely[SzallitasPozicio[playerid]][1],CsomagszallitoHely[SzallitasPozicio[playerid]][2]);
			new TavolsagKerekitve = floatround((tav/1000.0), floatround_floor);
			new fizetes = Rand(25, 70);
			GameTextForPlayer(playerid, "~g~~n~~n~~n~~n~~n~~n~~n~~n~~n~Áru kipakolva!", 1000, 3);
			szallit[playerid] --;
			
			SetPlayerCheckpoint(playerid, CsomagszallitoHely[SzallitasPozicio[playerid]][0],CsomagszallitoHely[SzallitasPozicio[playerid]][1],CsomagszallitoHely[SzallitasPozicio[playerid]][2], 3);
			
			ProxDetector(B_Cselekves, playerid, "* elteleik 1-2 óra", COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE,COLOR_ORANGE);
			
			PlayerTextFormat(playerid, "Kereset: $%s\nSzállítás Tartalma: %s\nMegmaradt Lerakóhelyek száma: %d\nKövetkezõ Lerakóhely: %d Km", PenzTordeles(fizetes), SzallitasNeve[SzallitasAru[playerid]], szallit[playerid], TavolsagKerekitve);
			MsgDialog(playerid, "Szállítólevél", PlayerText[playerid], "Bezárás");
		
			if(CsomagszallitoMerve[playerid] != 0)
			{
				GiveMoney(playerid,fizetes);
				FrakcioInfo[LMUNKA_ALLAM][fPenz] -= fizetes;
			}
			else
			{
				Msg(playerid, "Sajnálom, az árut nem fizetjük ki, mert nem az eljárás szerint járt el! (nem mérted le az árut)");
			}
			Cselekves(playerid, "kipakolta az árut.", 1);
		}
	}
	return 1;
}

fuggveny GetSzolgaltato(playerid)
{
    if(IsPlayerInDynamicArea(playerid,Varosok[VAROS_LS]))
		return BIZ_TMOBIL;
	else if(IsPlayerInDynamicArea(playerid,Varosok[VAROS_SF]))
		return BIZ_VODAFON;
	else if(IsPlayerInDynamicArea(playerid,Varosok[VAROS_LV]))
		return BIZ_TELENOR;

	return 0;
}

fuggveny TelefonSzolgaltato(playerid)
{
	if(strfind(PlayerInfo[playerid][pPnumber], "0630"))
		return BIZ_TMOBIL;
	else if(strfind(PlayerInfo[playerid][pPnumber], "0670"))
		return BIZ_VODAFON;
	else if(strfind(PlayerInfo[playerid][pPnumber], "0620"))
		return BIZ_TELENOR;
	
	return 0;
}

/*stock SzolgaltatoNev(playerid)
{
	new sznev[64];
    //if(TelefonSzolgaltato(playerid) == BIZ_TMOBIL)
	//	sznev = "T-Mobile";
	//else if(TelefonSzolgaltato(playerid) == BIZ_VODAFON)
	//	sznev = "Vodafone";
	//else if(TelefonSzolgaltato(playerid) == BIZ_TELENOR)
	//	sznev = "Telenor";
	if(strfind(PlayerInfo[playerid][pPnumber], "0630"))
		sznev = "T-Mobile";
	else if(strfind(PlayerInfo[playerid][pPnumber], "0670"))
		sznev = "Vodafone";
	else if(strfind(PlayerInfo[playerid][pPnumber], "0620"))
		sznev = "Telenor";
	return sznev;
}*/
stock SzolgaltatoNev(playerid)
{
	new sznev[64];
    if(GetSzolgaltato(playerid) == BIZ_TMOBIL)
		{ sznev =  "T-Mobil"; }
	else if(GetSzolgaltato(playerid) == BIZ_VODAFON)
		{ sznev = "Vodafone"; }
	else if(GetSzolgaltato(playerid) == BIZ_TELENOR)
		{ sznev = "Telenor"; }

	return sznev;
}
fuggveny IsPlayerInFrontVehicle(playerid,vehicleid,Float:radius,Float:vehiclelength)
{
  new Float:x,Float:y,Float:z,Float:a;
  GetVehiclePos(vehicleid, x, y, z);
  GetPlayerFacingAngle(vehicleid, a);
  x += (vehiclelength* floatsin(-a, degrees));
  y += (vehiclelength* floatcos(-a, degrees));
  return IsPlayerInRangeOfPoint(playerid,radius,x,y,z);
}
fuggveny TrafinalVan(playerid)
{
	if(PlayerToPoint(10, playerid, 1513.244140625, -1737.7718505859, 12.546875)) return true;
	else if(PlayerToPoint(10, playerid, 1306.6531982422, -1583.3892822266, 12.5390)) return true;
	else if(PlayerToPoint(10, playerid, 374.83880615234, -1711.1370849609, 6.47292)) return true;
	else if(PlayerToPoint(10, playerid, 374.64193725586, -1707.6411132813, 6.39110)) return true;
	else if(PlayerToPoint(10, playerid, 551.15161132813, -1257.7501220703, 15.064184188)) return true;
	else if(PlayerToPoint(10, playerid, -1196.1513671875, -812.927734375, 63.785)) return true;
	else if(PlayerToPoint(10, playerid, -892.0458984375, -1105.3369140625, 97.875854)) return true;
	else if(PlayerToPoint(10, playerid, 538.41583251953, -1235.1882324219, 15.064184)) return true;
	else if(PlayerToPoint(10, playerid,649.90686035156, -1389.0290527344, 12.703598022)) return true;

	return false;
}
fuggveny Olajcsere(playerid,kocsi)
{
	if(Logged(playerid))
	{
		Msg(playerid, "Olaj kicserélve");
		Cselekves(playerid, "kicserélte az olajat, és visszaállította a kilométerórát.",0);
		//MegtettKm[kocsi] = 0.0;
		ClearAnim(playerid);
	}
}
fuggveny TartalyMosas(playerid,kocsi)
{
	if(Logged(playerid))
	{
		Msg(playerid, "Tartály kimosva!");
		Cselekves(playerid, "kimosta egy jármû tartályát.",0);
		Gas[kocsi][0] = 0;
		Gas[kocsi][1] = 0;
		ClearAnim(playerid);
	}
}
fuggveny TelVan()
{
	new ev, honap, nap;
	getdate(ev, honap, nap);
	if(honap >= 12 && nap >= 21)
		return true;
	else if(honap <= 3 && nap <= 21 || honap <= 2 || honap <= 1)
		return true;
	else
		return false;
}
fuggveny GpsBekapcsol(playerid, Float:x1, Float:y1, Float:z1)
{
	SetPlayerCheckpoint(playerid,x1,y1,z1,3.0);
}

fuggveny KocsiLopas(playerid,part)
{
	if(!IsPlayerInAnyVehicle(playerid)) return 0;

	if(part == 0)
	{
		Cselekves(playerid, "leszedte a mûszerfal fedelét...",0);
		Cselekves(playerid, "széttépi a vezetékeket");
		GameTextForPlayer(playerid, "~w~Széttéped a vezetékeket...",5000,3);
		SetTimerEx("KocsiLopas",5000,0, "dd",playerid,1);
	}
	else if(part == 1)
	{
		SendClientMessage(playerid, COLOR_GREEN, "Összekötöd a vezetékeket...");
		Cselekves(playerid, "összeköti a vezetékeket...",0);
		SetTimerEx("KocsiLopas",5000,0, "dd",playerid,2);
		GameTextForPlayer(playerid, "~w~összekötöd a vezetékeket...",5000,3);
	}
	else if(part == 2)
	{
		Munkavege(playerid, M_MOTOR, 0);
		new kocsi = GetPlayerVehicleID(playerid);
		if(KocsiRiaszto[kocsi] == 1)
		{
		    switch(random(100))
		    {
		        case 0..50:
		        {
		            Msg(playerid, "Rossz vezetéket kötöttél össze!");
					Cselekves(playerid, "megszóltalt egy riasztó...", 2);
					SetJarmu(kocsi, KOCSI_RIASZTO, true);
					SetTimerEx("JarmuRiasztoBe", 5000, false, "i", kocsi);
		        }
		    }
		}
	}
	return 1;
}

fuggveny JarmuFeltores(playerid)
{
		if(IsPlayerInAnyVehicle(playerid)) return 1;
		new kozelbenlevojarmu = GetClosestVehicle(playerid);

		if(GetDistanceToVehicle(playerid, kozelbenlevojarmu) > 3.0)
		{
		    Msg(playerid, "Nem vagy elég közel a jármûhöz!");
			return 1;
		}
		if(IsABicikli(kozelbenlevojarmu))
		{
		    Msg(playerid, "Biciklit??");
			return 1;
		}
		new sofor = KocsiSofor(kozelbenlevojarmu);
		if(sofor != NINCS)
		{
		    Msg(playerid, "Ha ülnek benne, hogy akarod feltörni??");
            return 1;
		}
		if(!Locked(kozelbenlevojarmu))
		{
		    Msg(playerid, "Már nyitva van...");
            return 1;
		}
		Msg(playerid, "Feltörted a jármûvet!");
		UnLockCar(kozelbenlevojarmu);
		UnFreeze(playerid);
		if(KocsiRiaszto[kozelbenlevojarmu] == 1)
		{
		    Msg(playerid, "Bekapcsolt a riasztó!");
			Cselekves(playerid, "megszóltalt egy riasztó / an alarm is turned on", 2);
			SetJarmu(kozelbenlevojarmu, KOCSI_RIASZTO, 1);
			SetTimerEx("JarmuRiasztoBe", 5000, false, "i", kozelbenlevojarmu);
		}
		return 1;
}
fuggveny GetFegyverObject(WeaponID)
{
    if(WeaponID < 0 || WeaponID > 64)
    {
        return 1575;
    }
    return FegyverObjektek[WeaponID];
}
fuggveny PenzEldob(Osszeg, Float:X, Float:Y, Float:Z, world, interior)
{
    if(Osszeg != 0)
    {
        for(new i = 0; i < sizeof(PenzDropInfo); i++)
        {
            if(PenzDropInfo[i][PenzX] == 0.0 && PenzDropInfo[i][PenzY] == 0.0 && PenzDropInfo[i][PenzZ] == 0.0)
            {
                PenzDropInfo[i][PenzOsszeg]= Osszeg;
                PenzDropInfo[i][PenzX] = X;
                PenzDropInfo[i][PenzY] = Y;
                PenzDropInfo[i][PenzZ] = Z;
                PenzDropInfo[i][PenzVW] = world;
                PenzDropInfo[i][PenzInt] = interior;
                EldobottPenzObject[i] = CreateDynamicObject(1212, X, Y, Z, 80.0, 0.0, 0.0, world, interior);
				break;
            }
        }
    }
	return 1;
}
fuggveny TaskaLerak(playerid, Float:X, Float:Y, Float:Z, Int, VW)
{
    new i = UresTaskaHely();
	TaskaInfo[i][Van] = 1;
	TaskaInfo[i][tPos][0] = X;
	TaskaInfo[i][tPos][1] = Y;
	TaskaInfo[i][tPos][2] = Z;
	TaskaInfo[i][tInt] = Int;
	TaskaInfo[i][tVW] = VW;
	TaskaInfo[i][tObject] = CreateDynamicObject(1210, X, Y, Z-0.8, 0.0, 0.0, 0.0, VW, Int);
	TaskaKezbe[playerid] = NINCS;
	TaskaVan[playerid] = 0;
	KezObject_Torol(playerid);
	return 1;
}

fuggveny DobozLerak(Float:X, Float:Y, Float:Z, world, interior)
{
	for(new i = 0; i < sizeof(ATMDrop); i++)
	{
		if(ATMDrop[i][aPoz][0] == 0.0 && ATMDrop[i][aPoz][1] == 0.0 && ATMDrop[i][aPoz][2] == 0.0)
		{
			ATMDrop[i][aObject] = CreateDynamicObject(3052, X, Y, Z-1, 0.0, 0.0, 0.0, world, interior);//CSERE
			ATMDrop[i][aPoz][0] = X;
			ATMDrop[i][aPoz][1] = Y;
			ATMDrop[i][aPoz][2] = Z;
			ATMDrop[i][aVW] = world;
			ATMDrop[i][aInt] = interior;
			break;
		}
	}

	return 1;
}
fuggveny BolyaLerak(playerid, Float:X, Float:Y, Float:Z)
{
	for(new i = 0; i < sizeof(BolyaInfo); i++)
	{
		if(BolyaInfo[i][bPos][0] == 0.0 && BolyaInfo[i][bPos][1] == 0.0 && BolyaInfo[i][bPos][2] == 0.0)
		{
			BolyaInfo[i][bPos][0] = X;
			BolyaInfo[i][bPos][1] = Y;
			BolyaInfo[i][bPos][2] = Z;
			BolyaInfo[i][bObject] = CreateDynamicObject(1238, X, Y, Z-0.6, 0.0, 0.0, 0.0);
			BolyaKezbe[playerid] = 0;
			KezObject_Torol(playerid);
			break;
		}
	}
	return 1;
}
fuggveny FegyverEldob(_Fegyver, Loszer, Float:X, Float:Y, Float:Z, world, interior)
{
    if(_Fegyver != 0 && Loszer != 0)
    {
        for(new i = 0; i < sizeof(DropInfo); i++)
        {
            if(DropInfo[i][FegyverEldobPosX] == 0.0 && DropInfo[i][FegyverEldobPosY] == 0.0 && DropInfo[i][FegyverEldobPosZ] == 0.0)
            {
				EldobottFegyverObject[i] = CreateDynamicObject(GetFegyverObject(_Fegyver), X, Y, Z-1, 80.0, 0.0, 0.0, world, interior);
                DropInfo[i][FegyverEldobAmmount][0] = _Fegyver;
                DropInfo[i][FegyverEldobAmmount][1] = Loszer;
                DropInfo[i][FegyverEldobPosX] = X;
                DropInfo[i][FegyverEldobPosY] = Y;
                DropInfo[i][FegyverEldobPosZ] = Z;
                DropInfo[i][FegyverEldobVWorld] = world;
                DropInfo[i][FegyverEldobInterior] = interior;
				break;
            }
        }
    }
	return 1;
}

fuggveny DrogLerak(ObjectID, Mennyi, Float:X, Float:Y, Float:Z, world, interior)
{
    if(ObjectID != 0 && Mennyi != 0)
    {
        for(new i = 0; i < sizeof(DrogInfo); i++)
        {
            if(DrogInfo[i][DrogEldobPosX] == 0.0 && DrogInfo[i][DrogEldobPosY] == 0.0 && DrogInfo[i][DrogEldobPosZ] == 0.0)
            {
				DrogObject[i] = CreateDynamicObject(ObjectID, X, Y, Z - 1, 0.0, 0.0, 0.0, world, interior);
                DrogInfo[i][DrogEldobObject] = ObjectID;
                DrogInfo[i][DrogEldobDarab] = Mennyi;
                DrogInfo[i][DrogEldobPosX] = X;
                DrogInfo[i][DrogEldobPosY] = Y;
                DrogInfo[i][DrogEldobPosZ] = Z;
                DrogInfo[i][DrogEldobVWorld] = world;
                DrogInfo[i][DrogEldobInterior] = interior;
				break;
            }
        }
    }
	return 1;
}

fuggveny LogInsert(kinek[], mit[])
{
	new ev, honap, nap;
	getdate(ev, honap,nap);
	new query[512];
	Format(query, "INSERT INTO log (Nev, Log, Datum) VALUES ('%s', '%s', '%d.%d.%d-%d:%d'",mit,kinek,ev,honap,nap,Time("ora"),Time("perc"));
	mysql_query(query);
}

fuggveny OnGarazsPickupUpdate(haz)
{
	if(HouseInfo[haz][Van])
	{
		if(HouseInfo[haz][hGarazs] == 1)
	    {
            DestroyDynamicPickup(GarazsPickup[haz]);
            GarazsPickup[haz] = NINCS;
            if(IsValidDynamic3DTextLabel(Garazs3D[haz]))
	       		DestroyDynamic3DTextLabel(Garazs3D[haz]);
	 //      	Garazs3D[haz] = NINCS;
	       	GarazsPickup[haz] = UjPickup(1318, 23, HouseInfo[haz][hGarazsPoz][0], HouseInfo[haz][hGarazsPoz][1], HouseInfo[haz][hGarazsPoz][2]);
	    }
	}
	return 1;
}

fuggveny OnHousePickupUpdate(haz)
{
	if(HouseInfo[haz][Van])
	{
	    if(HouseInfo[haz][hOwned] == 0)
		{
	       	DestroyDynamicPickup(HazPickup[haz]);
	       	HazPickup[haz] = UjPickup(1273, 23, HouseInfo[haz][hEntrancex], HouseInfo[haz][hEntrancey], HouseInfo[haz][hEntrancez]);
		}
		else if(HouseInfo[haz][hOwned] == 1)
		{
		    DestroyDynamicPickup(HazPickup[haz]);
	       	HazPickup[haz] = UjPickup(1272, 23, HouseInfo[haz][hEntrancex], HouseInfo[haz][hEntrancey], HouseInfo[haz][hEntrancez]);
		}
	}
}

fuggveny BizniszSQLUpdate(bid)
{
	if(bInfo[bid][bID] == NINCS) return 1;
	
	new query[MAX_MYSQL_STRING];

	format(query, sizeof(query), "UPDATE biz SET ");
	
	MysqlUpdateStr(query, "nev", bInfo[bid][bNev]);
	MysqlUpdateStr(query, "tulaj", bInfo[bid][bTulaj]);	
	MysqlUpdateInt(query, "lvl", bInfo[bid][bLvl]);
	MysqlUpdateInt(query, "lvl", bInfo[bid][bSzef]);
	
	MysqlUpdateFlo(query, "enposx", bInfo[bid][bEnPos][0]);
	MysqlUpdateFlo(query, "enposy", bInfo[bid][bEnPos][1]);
	MysqlUpdateFlo(query, "enposz", bInfo[bid][bEnPos][2]);
	
	MysqlUpdateInt(query, "enposint", bInfo[bid][bEnPosInt]);
	MysqlUpdateInt(query, "enposvw", bInfo[bid][bEnPosVW]);
	
	MysqlUpdateFlo(query, "exposx", bInfo[bid][bExPos][0]);
	MysqlUpdateFlo(query, "exposy", bInfo[bid][bExPos][1]);
	MysqlUpdateFlo(query, "exposz", bInfo[bid][bExPos][2]);
	
	MysqlUpdateInt(query, "exposint", bInfo[bid][bExPosInt]);
	MysqlUpdateInt(query, "exposvw", bInfo[bid][bExPosVW]);
	MysqlUpdateInt(query, "type", bInfo[bid][bType]);	
	
	MysqlFinalUpdate2(query, "bid", bid);
	return 1;
}

fuggveny CreateBiznisz(bid)
{
	new query[128];
	Format(query, "SELECT * FROM biz WHERE bid = '%d'", bid);
	mysql_query(query);
	
	new datas[MAX_MYSQL_STRING];
	new data[16+1][256];
	mysql_store_result();
	mysql_fetch_row(datas, "|");
	mysql_free_result();
	split(datas, data, '|');

	bInfo[bid][bID] = bid;
	strmid(bInfo[bid][bNev], data[1], 0, strlen(data[1]), MAX_BIZNAME);
	bInfo[bid][bAr] = strval(data[2]);
	strmid(bInfo[bid][bTulaj], data[3], 0, strlen(data[3]), MAX_PLAYER_NAME);
	bInfo[bid][bLvl] = strval(data[4]);
	bInfo[bid][bSzef] = strval(data[5]);
	bInfo[bid][bEnPos][0] = floatstr(data[6]);
	bInfo[bid][bEnPos][1] = floatstr(data[7]);
	bInfo[bid][bEnPos][2] = floatstr(data[8]);
	bInfo[bid][bEnPosInt] = strval(data[9]);
	bInfo[bid][bEnPosVW] = strval(data[10]);
	bInfo[bid][bExPos][0] = floatstr(data[11]);
	bInfo[bid][bExPos][1] = floatstr(data[12]);
	bInfo[bid][bExPos][2] = floatstr(data[13]);
	bInfo[bid][bExPosInt] = strval(data[14]);
	bInfo[bid][bExPosVW] = strval(data[15]);
	bInfo[bid][bType] = strval(data[16]);
	
	OnBizniszPickupUpdate(bid);
	
	return 1;
}

fuggveny CreateVasarlasHely(bid)
{
	new query[128];
	Format(query, "SELECT * FROM buys WHERE bid = '%d'", bid);
	mysql_query(query);
	
	new datas[MAX_MYSQL_STRING];
	new data[7+1][256];
	mysql_store_result();
	mysql_fetch_row(datas, "|");
	mysql_free_result();
	split(datas, data, '|');

	buInfo[bid][buID] = bid;
	buInfo[bid][buType] = strval(data[1]);
	buInfo[bid][buBiz] = strval(data[2]);
	buInfo[bid][buPos][0] = floatstr(data[3]);
	buInfo[bid][buPos][1] = floatstr(data[4]);
	buInfo[bid][buPos][2] = floatstr(data[5]);
	buInfo[bid][buVW] = strval(data[6]);
	buInfo[bid][buInt] = strval(data[7]);
	
	buInfo[bid][buPick] = CreateDynamicPickup(1212, 23, buInfo[bid][buPos][0], buInfo[bid][buPos][1], buInfo[bid][buPos][2], buInfo[bid][buVW], buInfo[bid][buInt]);
	
	return 1;
}

fuggveny OnBizniszPickupUpdate(bid)
{
	DestroyDynamicPickup(bInfo[bid][bPick]);
	
	new pickupid = NINCS;
	
	if(egyezik(bInfo[bid][bTulaj], "Eladó"))
		pickupid = 1274;
	else
		pickupid = 1318;
	
	bInfo[bid][bPick] = CreateDynamicPickup(pickupid, 23, bInfo[bid][bEnPos][0], bInfo[bid][bEnPos][1], bInfo[bid][bEnPos][2], bInfo[bid][bEnPosVW], bInfo[bid][bEnPosInt]);
	return 1;
}

fuggveny OnHotelPickupUpdate(hotel)
{
	if(HotelInfo[hotel][Van])
	{
	    if(HotelInfo[hotel][hEladva] == 0)
		{
	       	DestroyDynamicPickup(HotelPickup[hotel]);
	       	HotelPickup[hotel] = UjPickup(1272, 23, HotelInfo[hotel][hEntranceX], HotelInfo[hotel][hEntranceY], HotelInfo[hotel][hEntranceZ]);
		}
		else if(HotelInfo[hotel][hEladva] == 1)
		{
		    DestroyDynamicPickup(HotelPickup[hotel]);
	       	HotelPickup[hotel] = UjPickup(1273, 23, HotelInfo[hotel][hEntranceX], HotelInfo[hotel][hEntranceY], HotelInfo[hotel][hEntranceZ]);
		}
	}
}

fuggveny TDUzenet(playerid, szoveg[], ido)
{
	if(IsValidPlayerID(playerid))
	{
		GameTextForPlayer(playerid, szoveg, ido, 3);
	}
	return 1;
}
fuggveny BillentyuzetTimer(playerid)
{
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
	if(Emelo[playerid] != 0)
	{
	    new Float:l1X,Float:l1Y,Float:l1Z;
	    new Float:l2X,Float:l2Y,Float:l2Z;
		if(PlayerToPoint(3.0,playerid,-1488.2803,1200.9437,7.2188))
		{
			if(updown == KEY_UP)
			{
				if(keys == KEY_SPRINT)
				{
					GetDynamicObjectPos(szlift[2],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[3],l2X,l2Y,l2Z);
					if(l1Z > 9) return 1;
					SetDynamicObjectPos(szlift[2],l1X,l1Y,l1Z + 0.2);
					SetDynamicObjectPos(szlift[3],l2X,l2Y,l2Z + 0.2);
				}
				else
				{

					GetDynamicObjectPos(szlift[2],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[3],l2X,l2Y,l2Z);
					if(l1Z > 9) return 1;
					SetDynamicObjectPos(szlift[2],l1X,l1Y,l1Z + 0.1);
					SetDynamicObjectPos(szlift[3],l2X,l2Y,l2Z + 0.1);
				}
			}
			if(updown == KEY_DOWN)
			{
				if(keys == KEY_SPRINT)
				{

					GetDynamicObjectPos(szlift[2],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[3],l2X,l2Y,l2Z);
					if(l1Z < 6) return 1;
					SetDynamicObjectPos(szlift[2],l1X,l1Y,l1Z - 0.2);
					SetDynamicObjectPos(szlift[3],l2X,l2Y,l2Z - 0.2);
				}
				else
				{
					GetDynamicObjectPos(szlift[2],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[3],l2X,l2Y,l2Z);
					if(l1Z < 6) return 1;
					SetDynamicObjectPos(szlift[2],l1X,l1Y,l1Z - 0.1);
					SetDynamicObjectPos(szlift[3],l2X,l2Y,l2Z - 0.1);
				}
			}
			if(keys == KEY_CROUCH)
			{
				//OnPlayerCommandText(playerid, "/emelõ");
				Msg(playerid, "Emelõ lefixálva.");
			}
		}
		else if(PlayerToPoint(3.0,playerid,-1458.6656,1144.2369,7.5774))
		{
			if(updown == KEY_UP)
			{
				if(keys == KEY_SPRINT)
				{
					GetDynamicObjectPos(szlift[0],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[1],l2X,l2Y,l2Z);
					if(l1Z > 9) return 1;
					SetDynamicObjectPos(szlift[0],l1X,l1Y,l1Z + 0.2);
					SetDynamicObjectPos(szlift[1],l2X,l2Y,l2Z + 0.2);
				}
				else
				{

					GetDynamicObjectPos(szlift[0],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[1],l2X,l2Y,l2Z);
					if(l1Z > 9) return 1;
					SetDynamicObjectPos(szlift[0],l1X,l1Y,l1Z + 0.1);
					SetDynamicObjectPos(szlift[1],l2X,l2Y,l2Z + 0.1);
				}
			}
			if(updown == KEY_DOWN)
			{
				if(keys == KEY_SPRINT)
				{

					GetDynamicObjectPos(szlift[0],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[1],l2X,l2Y,l2Z);
					if(l1Z < 6) return 1;
					SetDynamicObjectPos(szlift[0],l1X,l1Y,l1Z - 0.2);
					SetDynamicObjectPos(szlift[1],l2X,l2Y,l2Z - 0.2);
				}
				else
				{

					GetDynamicObjectPos(szlift[0],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[1],l2X,l2Y,l2Z);
					if(l1Z < 6) return 1;
					SetDynamicObjectPos(szlift[0],l1X,l1Y,l1Z - 0.1);
					SetDynamicObjectPos(szlift[1],l2X,l2Y,l2Z - 0.1);
				}
			}
			if(keys == KEY_CROUCH)
			{
				//OnPlayerCommandText(playerid, "/emelõ");
				Msg(playerid, "Emelõ lefixálva.");
			}
		}
		else if(PlayerToPoint(3.0, playerid, -1517,1156,8))
		{
			if(updown == KEY_UP)
			{
				if(keys == KEY_SPRINT)
				{
					GetDynamicObjectPos(szlift[4],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[5],l2X,l2Y,l2Z);
					if(l1Z > 9) return 1;
					SetDynamicObjectPos(szlift[4],l1X,l1Y,l1Z + 0.2);
					SetDynamicObjectPos(szlift[5],l2X,l2Y,l2Z + 0.2);
				}
				else
				{
					GetDynamicObjectPos(szlift[4],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[5],l2X,l2Y,l2Z);
					if(l1Z > 9) return 1;
					SetDynamicObjectPos(szlift[4],l1X,l1Y,l1Z + 0.1);
					SetDynamicObjectPos(szlift[5],l2X,l2Y,l2Z + 0.1);
				}
			}
			if(updown == KEY_DOWN)
			{
				if(keys == KEY_SPRINT)
				{
					GetDynamicObjectPos(szlift[4],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[5],l2X,l2Y,l2Z);
					if(l1Z < 6) return 1;
					SetDynamicObjectPos(szlift[4],l1X,l1Y,l1Z - 0.2);
					SetDynamicObjectPos(szlift[5],l2X,l2Y,l2Z - 0.2);
				}
				else
				{
					GetDynamicObjectPos(szlift[4],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[5],l2X,l2Y,l2Z);
					if(l1Z < 6) return 1;
					SetDynamicObjectPos(szlift[4],l1X,l1Y,l1Z - 0.1);
					SetDynamicObjectPos(szlift[5],l2X,l2Y,l2Z - 0.1);
				}
			}
			if(keys == KEY_CROUCH)
			{
				//OnPlayerCommandText(playerid, "/emelõ");
				Msg(playerid, "Emelõ lefixálva.");
			}
		}
		else if(PlayerToPoint(3.0, playerid, -1516,1142,8))
		{
			if(updown == KEY_UP)
			{
				if(keys == KEY_SPRINT)
				{
					GetDynamicObjectPos(szlift[6],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[7],l2X,l2Y,l2Z);
					if(l1Z > 9) return 1;
					SetDynamicObjectPos(szlift[6],l1X,l1Y,l1Z + 0.2);
					SetDynamicObjectPos(szlift[7],l2X,l2Y,l2Z + 0.2);
				}
				else
				{
					GetDynamicObjectPos(szlift[6],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[7],l2X,l2Y,l2Z);
					if(l1Z > 9) return 1;
					SetDynamicObjectPos(szlift[6],l1X,l1Y,l1Z + 0.1);
					SetDynamicObjectPos(szlift[7],l2X,l2Y,l2Z + 0.1);
				}
			}
			if(updown == KEY_DOWN)
			{
				if(keys == KEY_SPRINT)
				{
					GetDynamicObjectPos(szlift[6],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[7],l2X,l2Y,l2Z);
					if(l1Z < 6) return 1;
					SetDynamicObjectPos(szlift[6],l1X,l1Y,l1Z - 0.2);
					SetDynamicObjectPos(szlift[7],l2X,l2Y,l2Z - 0.2);
				}
				else
				{
					GetDynamicObjectPos(szlift[6],l1X,l1Y,l1Z);
					GetDynamicObjectPos(szlift[7],l2X,l2Y,l2Z);
					if(l1Z < 6) return 1;
					SetDynamicObjectPos(szlift[6],l1X,l1Y,l1Z - 0.1);
					SetDynamicObjectPos(szlift[7],l2X,l2Y,l2Z - 0.1);
				}
			}
			if(keys == KEY_CROUCH)
			{
				//OnPlayerCommandText(playerid, "/emelõ");
				Msg(playerid, "Emelõ lefixálva.");
			}
		}
	}
	return 1;
}
fuggveny KukasCP(playerid, Float:x, Float:y, Float:z,fizetes)
{
	if(Logged(playerid))
	{
	    if(AMT(playerid, MUNKA_KUKAS) && Munkaban[playerid] == MUNKA_KUKAS)
		{
		    PlayerInfo[playerid][pPayCheck] += fizetes;
			new string[64];
			format(string, sizeof(string), "~n~~n~~n~~g~Szemét Bepakolva!~n~+$%d", fizetes);
			GameTextForPlayer(playerid, string, 1000, 5);
			SetPlayerCheckpoint(playerid, x, y, z, 5);
			TogglePlayerControllable(playerid, true);
		}
	}
}
fuggveny VanOttValaki(Float:sugar, Float:x,Float:y,Float:z)
{
	new ki = NINCS;
	PlayerForeach(i)
	{
		if(PlayerToPoint(sugar, i, x, y, z ))
		{
			ki = i;
			break;
		}
	}
	return ki;
}
fuggveny IllegalisMunka(munka)
{
	for(new mm = 0; mm < sizeof(IllegalisMunkak); mm++)
	{
		if(IllegalisMunkak[mm][0][0] == munka)
			return true;
	}
	return false;
}
fuggveny BalaBeallitas(kocsi)
{
	if(BalaAKocsin[kocsi] == 0)
	{
		Bala[0][kocsi] = CreateObject(1454,0.0,0.0,0.0,0.0,0.0,0.0);
		AttachObjectToVehicle(Bala[0][kocsi], kocsi, -0.029999, 0.899999, 0.294999, 86.429962, 0.000000, 0.000000); //Object Model: 1454 |
		BalaAKocsin[kocsi] = 1;
 	}
	else if(BalaAKocsin[kocsi] == 1)
	{
		Bala[1][kocsi] = CreateObject(1454,0.0,0.0,0.0,0.0,0.0,0.0);
		AttachObjectToVehicle(Bala[1][kocsi], kocsi, 0.000000, -1.509998, 0.374999, 85.424964, 0.000000, -93.464942); //Object Model: 1454 |
		BalaAKocsin[kocsi] = 2;
	}
	else if(BalaAKocsin[kocsi] == 2)
	{
		Bala[2][kocsi] = CreateObject(1454,0.0,0.0,0.0,0.0,0.0,0.0);
		AttachObjectToVehicle(Bala[2][kocsi], kocsi, 0.000000, -4.110046, 0.374999, 85.424964, 0.000000, -93.464942); //Object Model: 1454 |
		BalaAKocsin[kocsi] = 3;
	}
}
fuggveny BalaHordasVege(playerid)
{
	if(IsValidPlayerID(playerid))
	{
	    new kocsi = GetPlayerVehicleID(playerid);
	    Munkaban[playerid] = NINCS;
		DisablePlayerCheckpoint(playerid);
		Msg(playerid, "A munkát befejezted. ))");
		Balahordas[playerid] = 0;
		DestroyObject(Bala[0][kocsi]);
	 	DestroyObject(Bala[1][kocsi]);
		DestroyObject(Bala[2][kocsi]);
		new str[64];
		Format(str, "~g~+$%d",BalaAKocsin[kocsi]*1500);
		GameTextForPlayer(playerid,str,5000,3);
		GiveMoney(playerid,BalaAKocsin[kocsi]*1500);
		BalaAKocsin[kocsi] = 0;
		TogglePlayerControllable(playerid, true);
	}
	return 1;
}
fuggveny Pajzs_Hatra(playerid)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid,SLOT_SWATPAJZS)) RemovePlayerAttachedObject(playerid,SLOT_SWATPAJZS);
	SetPlayerAttachedObject(playerid, SLOT_SWATPAJZS , 18637, 1, 0, -0.1, 0.18, 90, 0, 272, 1, 1, 1);
}
fuggveny Pajzs_Kezbe(playerid)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid,SLOT_SWATPAJZS)) RemovePlayerAttachedObject(playerid,SLOT_SWATPAJZS);
	SetPlayerAttachedObject(playerid, SLOT_SWATPAJZS, 18637, 4, 0.3, 0, 0, 0, 170, 270, 1, 1, 1);
}

fuggveny IsKereskedo(playerid)
{	
	if(LMT(playerid, LMUNKA_SZERELO) && PlayerInfo[playerid][pSzereloRang] >= 7) return true;
	return false;
}
fuggveny IsSzerelo(playerid)
{	
	if(LMT(playerid, LMUNKA_SZERELO) && PlayerInfo[playerid][pSzereloRang] >= 0) return true;
	return false;
}

fuggveny TehenFejes(playerid)
{
    Tej[playerid] = Rand(5,30);
    SendFormatMessage(playerid,COLOR_LIGHTBLUE, "Fejtél %d Liter tejet! Vidd, és add el a tejet egy boltnak!",Tej[playerid]);
	SetPlayerAttachedObject(playerid, SLOT_ZSAK, 1554, 1, 0.1, -1.0, 0, 0, 0, 0, 1, 1, 1);
	MunkaFolyamatban[playerid] = 0;
	UnFreeze(playerid);
}
//-----------------------------------------------------------
fuggveny Floor_OpenDoors(floorid)
{
    MoveDynamicObject(Lift_Emeletajtok[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Lift_Emeletajtok[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	return 1;
}
fuggveny Floor_CloseDoors(floorid)
{
    MoveDynamicObject(Lift_Emeletajtok[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Lift_Emeletajtok[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	return 1;
}
fuggveny Elevator_MoveToFloor(floorid)
{
	ElevatorState = LIFT_STATUSZ_MOZOG;
	ElevatorFloor = floorid;

	MoveDynamicObject(Lift_Objekt, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), 0.5);
    MoveDynamicObject(LiftAjto_Objekt[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);
    MoveDynamicObject(LiftAjto_Objekt[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.5);
    Delete3DTextLabel(LiftLabel);


	return 1;
}
public Elevator_Boost(floorid)
{
	MoveDynamicObject(Lift_Objekt, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(LiftAjto_Objekt[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(LiftAjto_Objekt[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);

	return 1;
}
public Elevator_TurnToIdle()
{
	ElevatorState = LIFT_STATUSZ_TETLEN;
	ReadNextFloorInQueue();

	return 1;
}
fuggveny RemoveFirstQueueFloor()
{
	for(new i; i < sizeof(ElevatorQueue) - 1; i ++)
	    ElevatorQueue[i] = ElevatorQueue[i + 1];

	ElevatorQueue[sizeof(ElevatorQueue) - 1] = SZINT_NINCS;

	return 1;
}
fuggveny AddFloorToQueue(floorid)
{

	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(ElevatorQueue[i] == SZINT_NINCS)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

	    if(ElevatorState == LIFT_STATUSZ_TETLEN)
	        ReadNextFloorInQueue();

	    return 1;
	}

	return 0;
}
fuggveny ResetElevatorQueue()
{
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    ElevatorQueue[i] 	= SZINT_NINCS;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}

	return 1;
}
fuggveny IsFloorInQueue(floorid)
{

	for(new i; i < sizeof(ElevatorQueue); i ++)
	    if(ElevatorQueue[i] == floorid)
	        return 1;

	return 0;
}
fuggveny ReadNextFloorInQueue()
{

	if(ElevatorState != LIFT_STATUSZ_TETLEN || ElevatorQueue[0] == SZINT_NINCS)
	    return 0;
		
	Floor_CloseDoors(ElevatorFloor);

	return 1;
}
fuggveny DidPlayerRequestElevator(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy); i ++)
	    if(FloorRequestedBy[i] == playerid)
	        return 1;

	return 0;
}
fuggveny ShowLiftDialog(playerid)
{
	new string[512];
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(FloorRequestedBy[i] != INVALID_PLAYER_ID)
	        strcat(string, "{FF0000}");

	    strcat(string, EmeletekNevei[i]);
	    strcat(string, "\n");
	}
    ShowPlayerDialog(playerid, DIALOG_FELVONO, DIALOG_STYLE_LIST, "Lift", string, "Kiválaszt", "Mégse");
	return 1;
}
fuggveny LiftHivasa(playerid, floorid)
{
	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid))
	    return 0;

	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);

	return 1;
}
fuggveny Float:GetElevatorZCoordForFloor(floorid)
    return (GROUND_Z_COORD + Emeletpozicio[floorid] + ELEVATOR_OFFSET);

fuggveny Float:GetDoorsZCoordForFloor(floorid)
	return (GROUND_Z_COORD + Emeletpozicio[floorid]);


fuggveny Bankban(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 228.4312, 106.8984, 1570.3265)) return true;
	return false;
}

fuggveny DrogKeszitoHely(playerid)
{
	if(PlayerToPoint(1, playerid, 197.7785,260.0500,902.8438))
		return true;
	else if(PlayerToPoint(20.0, playerid, 2755.0347,-1611.8745,-72.1132))
	    return true;
	return false;
}

fuggveny BoltbaVan(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, -21.8143, -138.4330, 1003.5470) || IsPlayerInRangeOfPoint(playerid, 3.0, -21.8143, -138.4330, 1003.5470) 
	|| IsPlayerInRangeOfPoint(playerid, 3.0, 1322.8381, -898.1937, 39.5781) || IsPlayerInRangeOfPoint(playerid, 3.0, -23.1774, -55.6476, 1003.5466))
 		return true;
	return false;
}

fuggveny VaildFishPlace(playerid)
{
	if(IsValidPlayerID(playerid))
	{
	    new kocsi = GetClosestCar(playerid);
	    if(GetDistanceToCar(playerid,kocsi) < 2.0)
	        return true;
	    else if(IsPlayerInRangeOfPoint(playerid, 40,600.5013,-2223.9265,0.7104) || IsPlayerInRangeOfPoint(playerid, 40,503.6664,-2180.1780,1.2949))
		    return true;
		else if(IsPlayerInRangeOfPoint(playerid, 40,534.6290,-2087.8506,0.8033))
		    return true;
	}
	return false;
}

fuggveny Huzza(playerid)
{
	if(VaildFishPlace(playerid))
	{
	    if(Fishing[playerid] == 1)
	    {
     		new hal = Rand(0,10);
     		switch(hal)
     		{
     		    case 0:
 				{
 				    SendClientMessage(playerid,COLOR_LIGHTRED, "A damil elszakadt! (-1 Csali, -2 Damil)");
 				    PlayerInfo[playerid][pDamil] -= 3;
 				    PlayerInfo[playerid][pCsali] -= 1;
 				    Cselekves(playerid, "beszakította a damilt / snapped the fishing line",0);
 				}
 				case 1,3:
 				{
 				    SendClientMessage(playerid,COLOR_LIGHTRED, "Fogtál egy halat!");
 				    PlayerInfo[playerid][pFishes] += 1;
 				    PlayerInfo[playerid][pCsali] -= 1;
 				    Cselekves(playerid, "fogott egy halat / caught a fish",0);
 				}
 				case 2:
 				{
 				    SendClientMessage(playerid,COLOR_LIGHTRED, "Fogtál egy halat!");
 				    PlayerInfo[playerid][pFishes] += 1;
 				    PlayerInfo[playerid][pCsali] -= 1;
 				    Cselekves(playerid, "fogott egy halat / caught a fish",0);
 				}
 				case 4,9:
 				{
					SendClientMessage(playerid,COLOR_LIGHTRED, "A hal elúszott...");
 				    PlayerInfo[playerid][pCsali] -= 1;
 				}
 				case 5:
 				{
     				SendClientMessage(playerid,COLOR_LIGHTRED, "Fogtál egy halat!");
 				    PlayerInfo[playerid][pFishes] += 1;
 				    PlayerInfo[playerid][pCsali] -= 1;
 				    Cselekves(playerid, "fogott egy halat / caught a fish",0);
 				}
 				case 6:
 				{
     				SendClientMessage(playerid,COLOR_LIGHTRED, "Fogtál egy halat!");
 				    PlayerInfo[playerid][pFishes] += 1;
 				    PlayerInfo[playerid][pCsali] -= 1;
 				    Cselekves(playerid, "fogott egy halat / caught a fish",0);
 				}
 				case 7:
 				{
 				    SendClientMessage(playerid,COLOR_LIGHTRED, "A damil elszakadt! (-1 Csali, -1 Damil)");
 				    PlayerInfo[playerid][pDamil] -= 1;
 				    PlayerInfo[playerid][pCsali] -= 1;
 				    Cselekves(playerid, "beszakította a damilt / snapped the fishing line",0);
 				}
 				case 8:
 				{
 				    SendClientMessage(playerid,COLOR_LIGHTRED, "Fogtál egy halat!");
 				    PlayerInfo[playerid][pFishes] += 1;
 				    PlayerInfo[playerid][pCsali] -= 1;
 				    Cselekves(playerid, "fogott egy halat / caught a fish",0);
 				}
 				case 10:
 				{
					SendClientMessage(playerid,COLOR_GREEN, "Majdnem kifogtad, de visszaesett a vízbe!");
 				    PlayerInfo[playerid][pCsali] -= 1;
 				    Cselekves(playerid, "visszaejtette a halat / dropped the fish",0);
 				}
     		}
			Fishing[playerid] = 0;
	        TogglePlayerControllable(playerid, 1);
	        ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	    }
	}
}
fuggveny MOST(playerid)
{
	HuzzadVaze[playerid] = 1;
	new ido = Rand(150,1000);
	SetTimerEx("MOSTVege",ido,0, "d",playerid);
	GameTextForPlayer(playerid, "~g~KAPÁS VAN!!~n~~r~MOST, HÚZD!!!!~n~n~SPACE",ido,5);
	return 1;
}
fuggveny MOSTVege(playerid)
{
	if(HuzzadVaze[playerid] != 0)
	{
	    Vege(playerid);
	    SendClientMessage(playerid,COLOR_LIGHTRED, "Ezt lekésted, sajnos! A hal elúszott");
	    Fishing[playerid] = 0;
    	HuzzadVaze[playerid] = 0;
	}
	else
	{
	    Vege(playerid);
	    HuzzadVaze[playerid] = 0;
	}
    return 1;
}
fuggveny HorgaszasAnim(playerid)
{
	if(VaildFishPlace(playerid))
	{
	    if(Fishing[playerid] == 1)
	    {
		    SetCameraBehindPlayer(playerid);
	   		ApplyAnimation(playerid, "SWORD", "sword_block",50.0,0,1,0,1,1);
	    }
	}
}
fuggveny Vege(playerid)
{
	if(VaildFishPlace(playerid))
	{
	    if(Fishing[playerid] == 1)
	    {
	        TogglePlayerControllable(playerid,1);
		    Fishing[playerid] = 0;
		    SetCameraBehindPlayer(playerid);
	   		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	    }
	}
}
fuggveny Betores(playerid,haz)
{
	if(AMT(playerid,MUNKA_BETORO))
	{
		new bejelent = random(100);
		new BejelentUzi[256];
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if(PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
			{
				switch(bejelent)
				{
					case 0..20:
					{
						Format(BejelentUzi, "Ismeretlen Jelentõ: Betörés történt a Los Santos u. %d címû házba! Kérem siessenek!", i);
						SendRadioMessage(LMUNKA_LSPD, COLOR_GREEN, BejelentUzi, true);
						SendRadioMessage(LMUNKA_FBI, COLOR_GREEN, BejelentUzi, true);
						SendRadioMessage(LMUNKA_KATONA, COLOR_GREEN, BejelentUzi, true);
						SendRadioMessage(LMUNKA_NAV, COLOR_GREEN, BejelentUzi, true);
					}
				}
				new HazBelso = HouseInfo[i][hBelso];
				SetPlayerInterior(playerid,IntInfo[HazBelso][iNumber]);
				SetPlayerVirtualWorld(playerid, i);

				SetPlayerPos(playerid,IntInfo[HazBelso][iExitX],IntInfo[HazBelso][iExitY],IntInfo[HazBelso][iExitZ]);
				GameTextForPlayer(playerid, "~r~Betörtél a házba", 5000, 1);
				SendClientMessage(playerid,COLOR_GREEN, "Betörtél a házba! Siess, a rendõrök tudhatják hogy itt vagy!");
				Cselekves(playerid, "betört a házba", 1);
				PlayerInfo[playerid][pLocal] = i;
				HouseInfo[i][hLock] = 0;
				MunkaFolyamatban[playerid] = 0;
			}
		}
	}
	return 1;
}
fuggveny Lopas(playerid)
{
	if(AMT(playerid,MUNKA_BETORO))
	{
		new talalat = random(100);
		switch(talalat)
		{
			case 0..45:
			{
				new cucc = Rand(0,3);
				new CuccNev[64];
				switch(cucc)
				{
					case 0:
					{
						CuccNev ="egy tálca szendvics";
						PlayerInfo[playerid][pKaja] += 5;
					}
					case 1:
					{
						CuccNev = "egy doboz cigaretta";
						PlayerInfo[playerid][pCigi] += 20;
					}
					case 2:
					{
						CuccNev ="öngyújtó";
						PlayerInfo[playerid][pGyujto] ++;
					}
					case 3:
					{
						CuccNev = "egy kis pénz"
						GiveMoney(playerid,Rand(100,5000));
					}
				}
				BetoroCucc[playerid]++;
				SendFormatMessage(playerid,COLOR_GREEN, "Találtál egy %s-t! Még %d Cucc és viheted a górénak!", (RABLASCUCC - BetoroCucc[playerid]));
				GetPlayerPos(playerid,BetorPos[playerid][0],BetorPos[playerid][1],BetorPos[playerid][2]);
			}
			default:
			{
			    SendClientMessage(playerid,COLOR_GREEN, "Sajnos nem találtál semmit, keresgélj tovább...");
			}
		}
	}
}

stock HanyNyelvetBeszel(playerid)
{
	new tud = 0;
	for(new i=0; i < sizeof(Nyelvek); i++)
	    if(BeszeliANyelvet(playerid,i) tud++
	return tud;
}
stock BeszeliANyelvet(playerid,nyelv)
{
    if(PlayerInfo[playerid][pNyelvTanulva][nyelv] != 0 || IsAdminSzolis(playerid, NINCS))
		return true;
	else
		return false;
}
stock Kitanulva(playerid,munka)
{
	if(PlayerInfo[playerid][pKitanulva][munka] == 1)
		return true;
	else
		return false;
}
fuggveny ATMSzereles(playerid,atmid)
{
	/*DestroyDynamicObject(ATM[atmid][aObjectID]);ATM[atmid][aObjectID] = NINCS;
	ATM[atmid][aObjectID] = CreateDynamicObject(2942, ATM[atmid][aPosX], ATM[atmid][aPosY], ATM[atmid][aPosZ]-0.3, 0.0, 0.0, ATM[atmid][aPosA]);
	ATM[atmid][aKirabolva] = 0;
	Cselekves(playerid, "megjavította az ATMet / fixed the ATM",0);
	SendClientMessage(playerid,COLOR_LIGHTGREEN, "Megjavítottad az ATM-et! Jutalmad 5.000Ft!");
	GiveMoney(playerid,5000);
	BankSzef -= 5000;
	MunkaFolyamatban[playerid] = 0;*/
}
fuggveny GetClosestDoboz(playerid)
{
	new id = NINCS;
	for(new i=0; i < sizeof(ATMDrop); i++)
	{
		if(PlayerToPoint(2.0,playerid,ATMDrop[i][aPoz][0],ATMDrop[i][aPoz][1],ATMDrop[i][aPoz][2]))
		{
			id = i;
			break;
		}
	}
	return id;
}
fuggveny Hack(playerid,tipus,bool:bukta)
{
	if(AMT(playerid,MUNKA_HACKER))
	{
		if(tipus == 1)//ATM doboz szétszedése
		{
			new doboz = GetClosestDoboz(playerid);
			if(!bukta)
			{
				Msg(playerid, "Sikerült felfeszítened! Szedd a lóvét és tünés!");
				UnFreeze(playerid);
				for(new a=0; a < ATMROBPICKUP; a++)
				{
					DestroyDynamicObject(ATMDrop[doboz][aObject]);
					ATMDrop[doboz][aObject] = NINCS;
					new Float:X=ATMDrop[doboz][aPoz][0]+(random(3)-random(3));
					new Float:Y=ATMDrop[doboz][aPoz][1]+(random(3)-random(3));
					PenzEldob(Rand(ATMROBMIN,ATMROBMAX),X,Y,ATMDrop[doboz][aPoz][2],GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid));
					ATMDrop[doboz][aPoz][0] = 0.0;
					ATMDrop[doboz][aPoz][1] = 0.0;
					ATMDrop[doboz][aPoz][2] = 0.0;
				}
				Cselekves(playerid, "feltörte a dobozt. / hacked the box",0);
			}
			else
			{
				PlayerInfo[playerid][pHackProba] = 0;
				PlayerInfo[playerid][pHack] = 1800;
				/*WantedPoints[playerid]+=3; SetPlayerCriminal(playerid,255, "Hackerkedés!");
				SendClientMessage(playerid, COLOR_YELLOW, "Feljelentettek hackerkedésért!");*/
				Msg(playerid, "Nem sikerült felfeszítened!");
				UnFreeze(playerid);
				Cselekves(playerid, "nem tudta feltörni a dobozt / could not hack the box",0);
			}
		}
	}
}
fuggveny ATMRablas(playerid,lepes)
{
	if(IsValidPlayerID(playerid))
	{
		new atm=ATMnelVan(playerid);
		if(atm == NINCS) return false;
		if(lepes == 0)
		{
			Cselekves(playerid, "leveszi a fedõlapot",1);
			SetTimerEx("ATMRablas",5000, false, "dd",playerid,1);
		}
		else if(lepes == 1)
		{
			Cselekves(playerid, "csatlakoztatja a kábeleket",1);
			SetTimerEx("ATMRablas",5000, false, "dd",playerid,2);
		}
		else if(lepes == 2)
		{
			Cselekves(playerid, "kiveszi a dobozt",1);
			SetTimerEx("ATMRablas",5000, false, "dd",playerid,3);
			//Jelzes(playerid,60,COLOR_PIROS,RENDVEDELEM);
		}
		else if(lepes == 3)
		{
			Cselekves(playerid, "lecsatlakoztatta a kábeleket",1);
			UnFreeze(playerid);
			Msg(playerid, "Kiraboltad az ATMet! Gyorsan, elinnen!");
			ATM[atm][aKirabolva] = 1;
			Doboz[playerid] = 1;
			MunkaFolyamatban[playerid] = 0;
		}
	}
	return true;
}
//dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd
#define MAX_DISTANCE_UNIT   100.0

#define TESTRESZ_FEJ  1
#define TESTRESZ_TEST 2
#define TESTRESZ_LAB  3
fuggveny IsPlayerAimingBodyPart(playerid, bodypart)
{
	// Get the camera's positions
	new Float:x, Float:y, Float:z, Float:a;
	new Float:vx, Float:vy, Float:vz;
	new Float:cx, Float:cy, Float:cz;
	new Float:offset;
	new Float:radius;
	GetPlayerCameraFrontVector(playerid, vx, vy, vz);
	GetPlayerCameraPos(playerid, cx, cy, cz);
	GetPlayerFacingAngle(playerid, a);
	// Check if the player is aiming in a certain distance
	for(new Float:d; d < MAX_DISTANCE_UNIT; d += 0.5)
	{
		switch (GetPlayerWeapon(playerid))
		{
		    case 24, 29, 22, 23, 25, 26, 27, 28, 32: offset = 0.11;
		    case 30, 31: offset = 0.07;
		    case 33: offset = 0.045;
		    default: offset = 0.0;
		}
	    switch (GetPlayerWeapon(playerid))
	    {
	        case 22, 26, 28, 32:
	        {
			    // duals, where you don't need to change your angle to change aim direction --  Not very accurate, but considering they spray, it should be good
			    x = vx*d+cx;
			    y = vy*d+cy;
	        }
	        default:
	        {
	    		// this is for weapons where your angle moves when you change your aim(deagle, sdpistol, m4, etc)
	            x = cx + (d * floatsin(-a, degrees));
	    		y = cy + (d * floatcos(-a, degrees));
	        }
	    }

	    z = (vz+offset)*d+cz;
	    switch (bodypart)
	    {
	        case TESTRESZ_FEJ: z -= 0.0, radius = 0.3;  // the offsets are made for head shots
	        case TESTRESZ_TEST: z += 0.6, radius = 0.5;
	        case TESTRESZ_LAB: z += 1.2, radius = 0.4;
	    }

	    for(new i, m = GetMaxPlayers(); i < m; i++)
	    {
			if(!IsValidPlayerID(i)) continue;
			if(playerid == i) continue;
			if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_DUCK)
			{
				if(IsPlayerInRangeOfPoint(i, radius+0.2, x, y, z+1.2-1.3-(bodypart==TESTRESZ_TEST?0.42:0.0)))
				{
					return i;
				}
			}
			else if(IsPlayerInRangeOfPoint(i, radius, x, y, z-0.8))
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}
fuggveny IsPlayerAimingTargetBodyPart(playerid, targetid, bodypart)
{
	new Float:x, Float:y, Float:z, Float:a;
	new Float:vx, Float:vy, Float:vz;
	new Float:cx, Float:cy, Float:cz;
	new Float:offset;
	new Float:radius;
	GetPlayerCameraFrontVector(playerid, vx, vy, vz);
	GetPlayerCameraPos(playerid, cx, cy, cz);
	GetPlayerFacingAngle(playerid, a);
	for(new Float:d; d < MAX_DISTANCE_UNIT; d += 0.5)
	{
		switch (GetPlayerWeapon(playerid))
		{
		    case 24, 29, 22, 23, 25, 26, 27, 28, 32: offset = 0.11;
		    case 30, 31: offset = 0.07;
		    case 33, 34: offset = 0.0;
		}
	    switch (GetPlayerWeapon(playerid))
	    {
	        case 22, 26, 28, 32:
	        {
			    // duals, where you don't need to change your angle to change aim direction --  Not very accurate, but considering they spray, it should be good
			    x = vx*d+cx;
			    y = vy*d+cy;
	        }
	        default:
	        {
	    		// this is for weapons where your angle moves when you change your aim(deagle, sdpistol, m4, etc)
	            x = cx + (d * floatsin(-a, degrees));
	    		y = cy + (d * floatcos(-a, degrees));
	        }
	    }

	    z = (vz+offset)*d+cz;
	    switch (bodypart)
	    {
	        case TESTRESZ_FEJ: z -= 0.0, radius = 0.3;  // the offsets are made for head shots
	        case TESTRESZ_TEST: z += 0.6, radius = 0.5;
	        case TESTRESZ_LAB: z += 1.2, radius = 0.4;
	    }

		if(GetPlayerSpecialAction(targetid) == SPECIAL_ACTION_DUCK)
		{
			if(IsPlayerInRangeOfPoint(targetid, radius+0.2, x, y, z+1.2-1.3-(bodypart==TESTRESZ_TEST?0.42:0.0)))
			{
				return 1;
			}
		}
		else if(IsPlayerInRangeOfPoint(targetid, radius, x, y, z-0.8))
		{
			return 1;
		}
	}
	return 0;
}

stock AszolistBant(tamado, kitbant)
{
	new FreezTime = 5;
	Freeze(tamado, FreezTime*1000);
	ResetWeapon(tamado);
	
	PlayerTextFormat(kitbant, "[%d]%s le lett fagyasztva a rendszer eltál %d másodpercre mert megsebzett!", tamado, PlayerName(tamado), FreezTime);
	Msg(kitbant, PlayerText[kitbant], COLOR_ADMIN);
	
	//SeeRPGKick(tamado, "Ne bántsd az AdminSzolgálatost!");
	return 1;
}

public OnPlayerHeadshot(playerid,targetid,weaponid)
{
	/*if(AdminDuty[targetid] != 0 && PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] && DMOff[targetid] != 0 || ScripterDuty[targetid] != 0 && PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] && DMOff[targetid] != 0)
	{
	    //GiveHealth(targetid,amount);
		AszolistBant(playerid, targetid);
		return 1;
	}
	if(weaponid == 41) return 1;
	if(Lofegyver(weaponid) && !ProxDetectorS(1.0,playerid,targetid))
	{
		new Float:pancel;
		GetPlayerArmour(targetid, pancel);
		if(PlayerInfo[targetid][pSWATTag] != 0 && pancel > 50.0) return 1;
		MsgFormat(playerid, "Fejbelõtted! %s", GetPlayerSQLID(targetid));
		MsgFormat(targetid, "Fejbelõttek! %s", GetPlayerSQLID(playerid));
		SetHealth(targetid, 0);
		PlayerInfo[playerid][pKills] ++;
		OnPlayerDeath(targetid, playerid, weaponid);
		SetHealth(targetid, 0);
	}
    return 1;*/
}

public OnPlayerLegshot(playerid,targetid,weaponid)
{
	/*if(AdminDuty[targetid] != 0 && PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] && DMOff[targetid] != 0 
	|| ScripterDuty[targetid] != 0 && PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] && DMOff[targetid] != 0)
	{
		AszolistBant(playerid, targetid);
		return 1;
	}
	if(weaponid == 41) return 1;
	if(Lofegyver(weaponid)  && !ProxDetectorS(1.0,playerid,targetid) && Animban[targetid] == 0 && pajzsnala[targetid] <= 0)
	{
		new Float:pancel;
		GetPlayerArmour(targetid, pancel);
		if(PlayerInfo[targetid][pSWATTag] != 0 && pancel > 50.0) return 1;
		MsgFormat(playerid, "Lábonlõtted! %s", GetPlayerSQLID(targetid));
		MsgFormat(targetid, "Lábonlõttek! %s", GetPlayerSQLID(playerid));
		AnimbaRak(targetid, TIPUS_LOTTSEB);
	}
    return 1;*/
}

public OnPlayerArmshot(playerid,targetid,weaponid)
{
	/*if(AdminDuty[targetid] != 0 && PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] && DMOff[targetid] != 0 
	|| ScripterDuty[targetid] != 0 && PlayerInfo[targetid][pAdmin] > PlayerInfo[playerid][pAdmin] && DMOff[targetid] != 0)
	{	
		AszolistBant(playerid, targetid);
		return 1;
	}
	if(weaponid == 41) return 1;
	if(Lofegyver(weaponid)  && !ProxDetectorS(1.0,playerid,targetid) && Animban[targetid] == 0 && pajzsnala[targetid] <= 0)
	{
		new Float:pancel;
		GetPlayerArmour(targetid, pancel);
		if(PlayerInfo[targetid][pSWATTag] != 0 && pancel > 50.0) return 1;
		MsgFormat(playerid, "Kezenlõtted! %s", GetPlayerSQLID(targetid));
		MsgFormat(targetid, "Kezenlõttek! %s", GetPlayerSQLID(playerid));
		FegyverElrak(targetid);
		Kezenlove[targetid] = true;
		//AnimbaRak(damagedid,TIPUS_LOTTSEB);
	}
    return 1;*/
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	if(IsValidPlayerID(playerid) && IsValidPlayerID(damagedid))
	{
		if(AFKWeaponHack(playerid))
		{
			GiveHealth(damagedid, amount);
			return false;
		}
	}
	return 1;
}

fuggveny UpdateWheelTarget()
{
}
fuggveny RotateWheel()
{
}

fuggveny IsPlayerReloading(playerid)
{
	if(GetPlayerWeaponState(playerid) != WEAPONSTATE_RELOADING) return false;
	return true;
}

stock LoadRicardoVilla()
{
	// kapuk
	RicardoVilla = CreateObject(19912, 267.92029, -1330.71484, 52.20000,   0.00000, 0.00000, 34.50000); // Fõbejárat
	
	// kocsik
	new veh, felirat[8] = "RICARDO";
	veh = UjKocsi(487, 222.0013, -1378.9886, 53.2800, -50.0000, 0, 6); // Maverick
	
	veh = UjKocsi(477, 268.2177, -1366.5277, 52.8028, 40.0000, 2, 2); // ZR-350
	SetVehicleNumberPlate(veh, felirat);
	
	veh = UjKocsi(579, 279.5365, -1356.2379, 52.9154, 41.0000, 0, 0); // Huntley
	SetVehicleNumberPlate(veh, felirat);
	
	veh = UjKocsi(541, 272.9807, -1363.0479, 52.6091, 40.0000, 0, 6); // Bullet
	SetVehicleNumberPlate(veh, felirat);
	
	veh = UjKocsi(411, 284.5136, -1352.6422, 52.7440, 45.0000, 2, 2); // Infernus
	SetVehicleNumberPlate(veh, felirat);
	
	// mappolás
	CreateObject(11490, 241.13774, -1379.69678, 52.03610,   0.00000, 0.00000, 125.00000);
	CreateObject(11491, 250.18326, -1373.35632, 53.46000,   0.00000, 0.00000, 125.00000);
	CreateObject(3934, 222.77707, -1378.37463, 52.10280,   0.00000, 0.00000, 40.00000);
	CreateObject(3604, 275.72171, -1370.63892, 54.56000,   0.00000, 0.00000, -138.00000);
	CreateObject(3461, 251.91490, -1369.88123, 53.75890,   0.00000, 0.00000, 0.00000);
	CreateObject(3461, 250.17986, -1367.43762, 53.75890,   0.00000, 0.00000, 0.00000);
	CreateObject(16151, 235.73512, -1366.02722, 52.42930,   0.00000, 0.00000, 215.00000);
	CreateObject(1825, 252.83890, -1377.26819, 53.51740,   0.00000, 0.00000, 0.00000);
	CreateObject(1616, 266.82440, -1331.08643, 57.86330,   0.00000, 0.00000, 30.00000);
	CreateObject(11666, 244.70372, -1377.22668, 55.21420,   0.00000, 0.00000, 125.00000);
	CreateObject(11631, 240.17189, -1384.53271, 54.76980,   0.00000, 0.00000, 125.00000);
	CreateObject(11664, 237.21820, -1378.92554, 54.01390,   0.00000, 0.00000, 125.00000);
	CreateObject(11665, 242.28175, -1375.28198, 54.21000,   0.00000, 0.00000, 125.00000);
	CreateObject(3604, 287.08322, -1360.37646, 54.56000,   0.00000, 0.00000, -138.00000);
	CreateObject(3461, 247.35298, -1375.33337, 51.99490,   0.00000, 0.00000, 0.00000);
	CreateObject(3437, 277.91620, -1361.56946, 49.18800,   0.00000, 0.00000, 44.00000);

	return 1;
}

stock LoadSeeRPGObjekt()
{
	CreateObject(2957, 1843.28540, -1856.31238, 13.89620,	0.00000, 0.00000, 90.00000); // bombarakó hely ellen	
	CreateObject(4100, 1972.46838, -1615.94763, 15.89018,	0.00000, 0.00000, 50.10680); // egy bugkihasználás ellen
	
	CreateObject(19322, 1117.58801, -1490.00610, 32.72000,	0.00000, 0.00000, 0.00000); // pláza alap
	CreateObject(7419, 1094.12000, -1626.51099, 6.15010,	0.00000, 0.00000, -180.00000); // parkoló alap
	
	LSPDKAPU = CreateDynamicObject(19911, 1589.01868, -1637.91931, 14.67790,   0.00000, 0.00000, 90.00000);
	
	// Pay n Spray lezárók
	CreateObject(971, 2071.51733, -1830.41040, 13.16459,   0.00000, 0.00000, 90.00000);
	CreateObject(971, 487.91965, -1735.20618, 11.88894,   0.00000, 0.00000, -7.68000);
	CreateObject(971, 1024.92151, -1029.33582, 31.62901,   0.00000, 0.00000, 0.00000);
	CreateObject(971, 1042.44482, -1025.98022, 31.09787,   0.00000, 0.00000, 0.00000);
	CreateObject(971, 720.13342, -462.58057, 15.53479,   0.00000, 0.00000, 0.00000);
	CreateObject(985, 2644.72925, -2039.20728, 11.09419,   0.00000, 0.00000, 0.00000);
	CreateObject(2990, 2386.39673, 1043.66162, 11.22834,   0.00000, 0.00000, 0.00000);
	CreateObject(2990, 1968.59814, 2162.73438, 12.07088,   0.00000, 0.00000, 90.00000);
	CreateObject(985, -99.91837, 1111.39771, 19.07824,   0.00000, 0.00000, 0.00000);
	CreateObject(985, -1420.55273, 2591.07520, 55.22378,   0.00000, 0.00000, 0.00000);
	CreateObject(985, -2425.78809, 1028.03418, 51.06034,   0.00000, 0.00000, 0.00000);
	CreateObject(985, -1786.76550, 1209.52161, 24.12358,   0.00000, 0.00000, 0.00000);
	CreateObject(985, -1935.95288, 239.55972, 33.30345,   0.00000, 0.00000, 0.00000);
	CreateObject(985, -1904.89343, 278.01166, 41.62607,   0.00000, 0.00000, 0.00000);
	CreateObject(985, -2716.35864, 217.24814, 3.32070,   0.00000, 0.00000, 90.00000);
	
	// benzinkút robbantás ellen
	CreateObject(970, 1942.43115, -1768.21326, 12.90060,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1942.43115, -1772.36401, 12.90060,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1942.43115, -1776.50806, 12.90060,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1942.43115, -1778.55212, 12.90060,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1940.87000, -1768.21326, 12.90060,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1940.87000, -1772.36633, 12.90060,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1940.87000, -1776.53125, 12.90060,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1940.87000, -1778.57129, 12.90060,   0.00000, 0.00000, 90.00000);
	
	// bugos ház amibe bele lehet mászni
	CreateObject(974, 2007.38110, -1593.04041, 16.11940,   90.00000, 0.00000, -45.00000);
	CreateObject(971, 2018.02026, -1591.58313, 16.13500,   90.00000, 0.00000, -45.00000);
	CreateObject(971, 1998.11182, -1591.42834, 16.13500,   90.00000, 0.00000, -45.00000);
	CreateObject(971, 1993.92786, -1587.28650, 16.13500,   90.00000, 0.00000, -45.00000);
	
	// óriáskeréknél lévõ ház bug elleni javítás
	CreateObject(974, 395.61841, -2052.67114, 9.74710,   90.00000, 0.00000, 0.00000);
	CreateObject(974, 395.61841, -2053.98511, 9.74710,   90.00000, 0.00000, 0.00000);
	
	// domboldal bug elleni javítás
	CreateObject(971, 1045.44116, -822.34857, 86.52500,   -50.00000, 0.00000, 20.00000);
	CreateObject(971, 1049.12354, -820.97491, 86.52500,   -50.00000, 0.00000, 20.00000);
	CreateObject(971, 1047.21655, -826.62158, 82.00000,   -45.00000, 0.00000, 15.00000);
	CreateObject(971, 1055.71887, -824.36292, 82.00000,   -45.00000, 0.00000, 15.00000);

	// SF reptér parkoló betonfal
	CreateObject(18981, -1257.30151, 98.70570, 0.62500,   0.00000, 0.00000, -45.00000);
	CreateObject(18981, -1406.48865, -304.64182, 0.58000,   0.00000, 0.00000, 40.00000);
	CreateObject(18981, -1424.06531, -287.78168, 0.58000,   0.00000, 0.00000, 48.00000);

	
	// vasúti átkelõ figyelmeztetések
	new villogo = 19290;
	
	CreateObject(19966, 1956.71399, -1950.12354, 12.63400,   0.00000, 0.00000, 180.00000);
	CreateObject(villogo, 1956.72961, -1950.10107, 15.52892,   0.00000, 0.00000, 0.00000);
	CreateObject(villogo, 1956.72815, -1950.10107, 14.99634,   0.00000, 0.00000, 0.00000);
	CreateObject(19966, 1966.56860, -1961.48633, 12.68720,   0.00000, 0.00000, 0.00000);
	CreateObject(villogo, 1966.55652, -1961.50928, 15.58718,   0.00000, 0.00000, 0.00000);
	CreateObject(villogo, 1966.56189, -1961.50928, 15.04996,   0.00000, 0.00000, 0.00000);
	
	CreateObject(19966, 2195.03857, -1737.90735, 12.32210,   0.00000, 0.00000, -90.00000);
	CreateObject(villogo, 2195.01563, -1737.91296, 15.19702,   0.00000, 0.00000, 0.00000);
	CreateObject(villogo, 2195.01563, -1737.90454, 14.67346,   0.00000, 0.00000, 0.00000);
	CreateObject(19966, 2206.42090, -1726.38513, 12.40610,   0.00000, 0.00000, 90.00000);
	CreateObject(villogo, 2206.44409, -1726.40259, 15.28833,   0.00000, 0.00000, 0.00000);
	CreateObject(villogo, 2206.44409, -1726.39758, 14.75660,   0.00000, 0.00000, 0.00000);
	
	CreateObject(19966, 2206.01221, -1651.46936, 14.11420,   0.00000, 0.00000, -106.00000);
	CreateObject(villogo, 2205.99194, -1651.45483, 16.99752,   0.00000, 0.00000, 0.00000);
	CreateObject(villogo, 2205.99170, -1651.45544, 16.45751,   0.00000, 0.00000, 0.00000);
	CreateObject(19966, 2220.17334, -1643.08606, 14.44500,   0.00000, 0.00000, 65.00000);
	CreateObject(villogo, 2220.19141, -1643.10156, 17.31372,   0.00000, 0.00000, 0.00000);
	CreateObject(villogo, 2220.19165, -1643.10120, 16.79582,   0.00000, 0.00000, 0.00000);

	// egyéb
	#include "System/Maps"
	
	return 1;
}

fuggveny RicardoVillaKapuZar(Float:sebesseg)
{
	MoveObject(RicardoVilla, 267.92029, -1330.71484, 52.20000, sebesseg);
	return 1;
}

stock RemoveBuildingsForPlayer(playerid)
{
	// italautómaták
	RemoveBuildingForPlayer(playerid, 955, 1729.7891, -1943.0469, 12.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 1928.7344, -1772.4453, 12.9453, 0.25);
	
	// Ricardo villa
	RemoveBuildingForPlayer(playerid, 708, 286.0000, -1362.3906, 51.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3738, 249.0469, -1370.9922, 55.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 246.4063, -1399.2188, 51.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 241.1953, -1395.0313, 51.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 230.1250, -1390.8438, 51.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 244.0313, -1387.2109, 51.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 209.7500, -1381.4531, 52.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 217.7031, -1381.6094, 52.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 230.2266, -1379.2109, 51.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 217.8516, -1374.6875, 51.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 275.2891, -1374.8359, 51.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 219.3281, -1371.6484, 52.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 228.4375, -1368.7500, 51.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 223.2656, -1369.0938, 52.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 3619, 249.0469, -1370.9922, 55.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 287.2734, -1362.1016, 56.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 272.1172, -1361.4141, 50.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 238.0156, -1354.9531, 50.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 269.5000, -1354.5391, 52.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 671, 256.4219, -1350.3906, 51.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 671, 270.8047, -1349.3125, 52.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 280.6797, -1347.3125, 50.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 273.8125, -1344.1797, 52.5000, 0.25);
	
	return 1;
}

fuggveny DarukTorlese(playerid)
{

}

fuggveny ParancsKuldes(playerid, Command[]) return CallRemoteFunction("//OnPlayerCommandText", "ds", playerid, Command);

fuggveny GarazsEpites(playerid,haz)
{
	GiveMoney(playerid, -8000000);
	GetPlayerPos(playerid,HouseInfo[haz][hGarazsPoz][0],HouseInfo[haz][hGarazsPoz][1],HouseInfo[haz][hGarazsPoz][2]);
	GetPlayerFacingAngle(playerid,HouseInfo[haz][hGarazsPoz][3]);
	HouseInfo[haz][hGarazs] = 1;
	HazUpdate(haz,HAZ_Garazs);
	OnGarazsPickupUpdate(haz);
	Cselekves(playerid, "felépített egy garázst / built a garage");
}

fuggveny CreateLezer()
{
	if(VanLVBankLezer) return false;
    lezer[0] = CreateDynamicObject(19081, 2150.0380859375, 1612.4652099609, 993.5439453125, 0, 359.99996948242, 180.24993896484);
	lezer[1] = CreateDynamicObject(19081, 2150.1171875, 1617.7203369141, 993.5439453125, 0, 359.99450683594, 180.24719238281);
	lezer[2] = CreateDynamicObject(19081, 2150.146484375, 1622.6157226563, 993.5439453125, 0, 359.99450683594, 180.24719238281);
	lezer[3] = CreateDynamicObject(19081, 2150.146484375, 1622.615234375, 996.0439453125, 0, 359.99450683594, 180.24719238281);
	lezer[4] = CreateDynamicObject(19081, 2150.0029296875, 1617.5610351563, 996.0439453125, 0, 359.99450683594, 180.24719238281);
	lezer[5] = CreateDynamicObject(19081, 2150.033203125, 1612.3712158203, 996.0439453125, 0, 359.99450683594, 180.99719238281);
	lezer[6] = CreateDynamicObject(19081, 2150.033203125, 1612.37109375, 996.0439453125, 0, 10.489013671875, 179.99426269531);
	lezer[7] = CreateDynamicObject(19081, 2150.0859375, 1617.5764160156, 996.0439453125, 0, 10.486450195313, 179.98901367188);
	lezer[8] = CreateDynamicObject(19081, 2150.134765625, 1622.6197509766, 996.0439453125, 0, 10.486450195313, 179.98901367188);
	lezer[9] = CreateDynamicObject(19081, 2136.6711425781, 1622.6243896484, 996.05548095703, 0, 10.250091552734, 0);
	lezer[10] = CreateDynamicObject(19081, 2136.6049804688, 1617.5009765625, 996.05548095703, 0, 10.244750976563, 0);
	lezer[11] = CreateDynamicObject(19081, 2136.1369628906, 1612.16015625, 996.05548095703, 0, 10.244750976563, 1.25);
	lezer[12] = CreateDynamicObject(19081, 2151.2768554688, 1611.8565673828, 997.36950683594, 0, 32.499938964844, 0);
	lezer[13] = CreateDynamicObject(19081, 2151.2426757813, 1617.0734863281, 997.36950683594, 0, 32.49755859375, 0);
	lezer[14] = CreateDynamicObject(19081, 2151.2736816406, 1622.1203613281, 997.36950683594, 0, 32.49755859375, 0);
	lezer[15] = CreateDynamicObject(19081, 2151.2697753906, 1611.8082275391, 992.66534423828, 0, 326.74996948242, 0);
	lezer[16] = CreateDynamicObject(19081, 2151.3142089844, 1616.9853515625, 992.66534423828, 0, 326.74987792969, 0);
	lezer[17] = CreateDynamicObject(19081, 2151.2629394531, 1622.1345214844, 992.66534423828, 0, 326.74987792969, 0);
	lezer[18] = CreateDynamicObject(19081, 2129.603515625, 1612.4478759766, 995.09729003906, 0, 0, 0);
	lezer[19] = CreateDynamicObject(19081, 2139.3237304688, 1617.3081054688, 995.02221679688, 0, 0, 0);
	lezer[20] = CreateDynamicObject(19081, 2139.1013183594, 1612.0637207031, 995.02221679688, 0, 0, 0);
	VanLVBankLezer = true;
	return true;
}
fuggveny DestroyLezer()
{
	for(new i=0; i < sizeof(lezer); i++)
	{
			DestroyDynamicObject(lezer[i]);
			lezer[i] = NINCS;
	}
	VanLVBankLezer = false;
	return 1;
}
fuggveny UjBankJelszo()
{
    new BRP[36][] = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"};
    new sz1 = random(sizeof(BRP)), sz2 = random(sizeof(BRP)), sz3 = random(sizeof(BRP)), sz4 = random(sizeof(BRP)), sz5 = random(sizeof(BRP)),
    sz6 = random(sizeof(BRP)), sz7 = random(sizeof(BRP)), sz8 = random(sizeof(BRP)), sz9 = random(sizeof(BRP)), sz10 = random(sizeof(BRP));
	Format(BankPass, "%s%s%s%s%s%s%s%s%s%s",BRP[sz1],BRP[sz2],BRP[sz3],BRP[sz4],BRP[sz5],BRP[sz6],BRP[sz7],BRP[sz8],BRP[sz9],BRP[sz10]);
	printf("Rendszer: Uj SFbank Password: %s",BankPass);
	return 1;
}

stock RandomText()
{
	new text[32];
    new BRP[36][] = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"};
    new sz1 = random(sizeof(BRP)), sz2 = random(sizeof(BRP)), sz3 = random(sizeof(BRP)), sz4 = random(sizeof(BRP));
	Format(text, "%s%s%s%s",BRP[sz1],BRP[sz2],BRP[sz3],BRP[sz4]);
	return text;
}
fuggveny PassHackTimer(playerid)
{
	new RandomTalalas;
 	RandomTalalas = Rand(0,9);
  	switch(RandomTalalas)
  	{
   		case 0..4:
   		{
			SendFormatMessage(playerid,COLOR_GREEN, "A jelszó: %s",BankPass);
			Cselekves(playerid, "feltörte a rendszert,de valamit elrontott / hacked the system, but something spoiled...", 0);
			SendRadioMessage(LMUNKA_LSPD, TEAM_BLUE_COLOR, "** RIADÓ ** Betörtek a Bank Biztonsági rendszerébe!");
			SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, "** RIADÓ ** Betörtek a Bank Biztonsági rendszerébe!");
			SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, "** RIADÓ ** Betörtek a Bank Biztonsági rendszerébe!");
			MunkaFolyamatban[playerid] = 0;
			LVBankRiaszto(true);
			DestroyLezer();
		}
		case 5..9:
   		{
			SendFormatMessage(playerid,COLOR_GREEN, "A jelszó: %s",BankPass);
			
			Cselekves(playerid, "feltörte a biztonsági rendszert", 0);
			MunkaFolyamatban[playerid] = 0;
			DestroyLezer();
   		}
		default:
		{
			SendFormatMessage(playerid,COLOR_GREEN, "A jelszó: %s",BankPass);
			Cselekves(playerid, "feltörte a biztonsági rendszert", 0);
			MunkaFolyamatban[playerid] = 0;
			DestroyLezer();
		}
   	}
	return 1;
}
fuggveny BankMotoz(playerid, melyik)
{
	new rand = random(10);
	switch(rand)
	{
		case 0,2,4,6,8:
		{
		    SendClientMessage(playerid,COLOR_LIGHTGREEN, "Megtaláltad a hitelesítõ kártyát, nyomás tovább!!");
			if(melyik == 0)
			{
			}
			else
			{
				VisszaKRobbol = 50;
				//SetTimerEx("kBankrobRiaszt", 60000, false, "d", kBankrober[playerid]);
			}
		}
		default:
		{
		    SendClientMessage(playerid,COLOR_LIGHTRED, "Sajnos most nem találtál semmit!");
		}
	}
}
fuggveny kBankrobRiaszt(playerid)
{
	if(VisszaKRobbol > 10)
	{
		VisszaKRobbol -= 2;
		for(new i = 0; i < kBankrob[playerid][TagokSzama]; i++)
		{
			SendFormatMessage(kBankrob[playerid][kTagok][i], COLOR_PIROS, "Már csak %d perc van vissza a rablásból, utána riasztják a rendõröket!", (VisszaKRobbol / 2));
		}
		SetTimerEx("kBankrobRiaszt", 60000, false, "d", playerid);
		return 1;
	}
	else if(VisszaKRobbol < 10 &&VisszaKRobbol > 0)
	{
		VisszaKRobbol --;
		for(new i = 0; i < kBankrob[playerid][TagokSzama]; i++)
		{
			SendFormatMessage(kBankrob[playerid][kTagok][i], COLOR_PIROS, "Már csak %d másodperc van vissza a rablásból, utána riasztják a rendõröket!", (VisszaKRobbol * 30));
			SetTimerEx("kBankrobRiaszt", 30000, false, "d", playerid);
		}
		return 1;
	}
	else if(VisszaKRobbol == 0)
	{
		for(new i = 0; i < kBankrob[playerid][TagokSzama]; i++)
		{
			SendClientMessage(kBankrob[playerid][kTagok][i], COLOR_PIROS, "Letelt a kaszinó biztonsági ideje, riasztották a rendõröket!");
		}
		SendRadioMessage(LMUNKA_LSPD, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Kaszinó széfét kirabolták!!! ***", true);
		SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Kaszinó széfét kirabolták!!! ***", true);
		SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Kaszinó széfét kirabolták!!! ***", true);
		SendRadioMessage(LMUNKA_NAV, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Kaszinó széfét kirabolták!!! ***", true);
		PlayerForeach(x)
		{
			if(!IsACop(x) && PlayerInfo[x][pSWATTag] > 0)
				SendClientMessage(x, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Kaszinó széfét kirabolták!!! ***");
			else if(!IsACop(x) && PlayerInfo[x][pNIDTag] > 0)
				SendClientMessage(x, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Kaszinó széfét kirabolták!!! ***");
			else if(!IsACop(x) && PlayerInfo[x][pSWATTag] > 0 && PlayerInfo[x][pNIDTag] > 0)
				SendClientMessage(x, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Kaszinó széfét kirabolták!!! ***");
		}
		//VoltKaszinoRob = true;
		SetTimer("UjraKBankRob", 7200000, false);
	}
	return 1;
}
fuggveny UjraKBankRob()
{
	//VoltKaszinoRob = false;
	return 1;
}
fuggveny KezObject_Torol(playerid)
{
	if(IsPlayerAttachedObjectSlotUsed(playerid,SLOT_KEZ))
	    RemovePlayerAttachedObject(playerid,SLOT_KEZ);

	if(PotKerek[playerid] != 0)
		PotKerek[playerid] = 0;

	if(BolyaKezbe[playerid] != 0)
		BolyaKezbe[playerid] = 0;
}
fuggveny KezObject_Felrak(playerid,objektid, kez[])
{
	if(IsPlayerAttachedObjectSlotUsed(playerid,SLOT_KEZ))
	    RemovePlayerAttachedObject(playerid,SLOT_KEZ);

	if(objektid == 1238)
		BolyaKezbe[playerid] = 1;

	if(egyezik(kez, "bal"))
		SetPlayerAttachedObject (playerid, SLOT_KEZ, objektid, 5, 0.0, 0.044200, -0.060892, 156.370300, 0.0, 0.0, 1.0, 1.0, 1.0 );//Bal
	else if(egyezik(kez, "jobb"))
		SetPlayerAttachedObject (playerid, SLOT_KEZ, objektid, 6, 0.038329, -0.032494, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );//Jobb
	else
		SetPlayerAttachedObject (playerid, SLOT_KEZ, objektid, 6, 0.038329, -0.032494, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );//Jobb
}
stock Muhelyben(playerid)
{
	if(PlayerToPoint(50.0, playerid, 2480.9375, -2097.6296, 13.5469)) return true;
	return false;
}
stock EmelonelVan(playerid)
{
	if(PlayerToPoint(50.0, playerid, -58.4986,-1131.0100,1.0781)) return 1;
	else if(PlayerToPoint(3.0,playerid,1080.4814,1231.2235,10.8313)) return 2;
	else if(PlayerToPoint(3.0, playerid, 1066.5231,1231.0767,10.8313)) return 3;

	return 0;
}
stock KocsiMogottVan(playerid,jarmu)
{
	new Float:tav = 3.5;
	new Float:Poz[3];
	new model = GetVehicleModel(jarmu);
	switch(model)
	{
		default: tav = 3.5;
	}
	GetVehiclePos(jarmu,Poz[0],Poz[1],Poz[2]);
	GetXYBehindVehicle(jarmu,Poz[0],Poz[1],tav);
	if(PlayerToPoint(2.5,playerid,Poz[0],Poz[1],Poz[2]))
		return true;

	return false;
}
stock GetKerekNev(id)
{
	new string[64];
	switch(id)
	{
		case KEREK_HATSO_BAL: string = "Bal Hátsó";
		case KEREK_HATSO_JOBB: string = "Jobb Hátsó";
		case KEREK_ELSO_BAL: string = "Bal Elsõ";
		case KEREK_ELSO_JOBB: string = "Jobb Elsõ";
		default: string = "WTF?";
	}
	return string;
}
stock GetKerek(playerid,kocsi)
{
	if(IsPlayerInAnyVehicle(playerid) || Bikes(kocsi) || IsAPlane(kocsi) || IsABoat(kocsi)) return NINCS;
	new Float:Pos[3], Float:Angle;
	GetVehiclePos(kocsi,Pos[0],Pos[1],Pos[2]);
	//new Float:EloreHatra, Float:Oldalra;
	if(IsATruck(kocsi))
	{
		GetXYBehindVehicle(kocsi,Pos[0],Pos[1],3.5);
		GetVehicleZAngle(kocsi,Angle);
		GetXYRightOfPoint(Pos[0],Pos[1], Angle, 1.7);//Bal
		if(PlayerToPoint(1.5,playerid,Pos[0],Pos[1],Pos[2]))
			return KEREK_HATSO_BAL;

		GetVehicleZAngle(kocsi,Angle);
		GetXYLeftOfPoint(Pos[0],Pos[1], Angle, 1.7);//Jobb
		if(PlayerToPoint(1.5,playerid,Pos[0],Pos[1],Pos[2]))
			return KEREK_HATSO_JOBB;

		GetXYInFrontOfVehicle(kocsi,Pos[0],Pos[1],1.5);
		GetVehicleZAngle(kocsi,Angle);

		GetXYRightOfPoint(Pos[0],Pos[1], Angle, 1.7);//Bal
		if(PlayerToPoint(1.5,playerid,Pos[0],Pos[1],Pos[2]))
			return KEREK_ELSO_BAL;

		GetVehicleZAngle(kocsi,Angle);
		GetXYLeftOfPoint(Pos[0],Pos[1], Angle, 1.7);//Jobb
		if(PlayerToPoint(1.5,playerid,Pos[0],Pos[1],Pos[2]))
			return KEREK_ELSO_JOBB;
	}
	else
	{
		GetXYBehindVehicle(kocsi,Pos[0],Pos[1],1.5);
		GetVehicleZAngle(kocsi,Angle);
		GetXYRightOfPoint(Pos[0],Pos[1], Angle, 1.7);//Bal
		if(PlayerToPoint(1.0,playerid,Pos[0],Pos[1],Pos[2]))
			return KEREK_HATSO_BAL;

		GetVehicleZAngle(kocsi,Angle);
		GetXYLeftOfPoint(Pos[0],Pos[1], Angle, 1.7);//Jobb
		if(PlayerToPoint(1.5,playerid,Pos[0],Pos[1],Pos[2]))
			return KEREK_HATSO_JOBB;

		GetXYInFrontOfVehicle(kocsi,Pos[0],Pos[1],1.5);

		GetVehicleZAngle(kocsi,Angle);
		GetXYRightOfPoint(Pos[0],Pos[1], Angle, 1.7);//Bal
		if(PlayerToPoint(1.5,playerid,Pos[0],Pos[1],Pos[2]))
			return KEREK_ELSO_BAL;

		GetVehicleZAngle(kocsi,Angle);
		GetXYLeftOfPoint(Pos[0],Pos[1], Angle, 1.7);//Jobb
		if(PlayerToPoint(1.5,playerid,Pos[0],Pos[1],Pos[2]))
			return KEREK_ELSO_JOBB;
	}
	return NINCS;
}

fuggveny GetKerekStatusz(kocsi,kerek)
{
    new panels, doors, lights, tires;
	GetVehicleDamageStatus(kocsi, panels, doors, lights, tires);
	if(kerek == KEREK_HATSO_BAL)
	{
	    return tires >> 2 & 1;
	}
	else if(kerek == KEREK_HATSO_JOBB)
	{
	    return tires & 1;
	}
	else if(kerek == KEREK_ELSO_BAL)
	{
	    return tires >> 3 & 1;
	}
	else if(kerek == KEREK_ELSO_JOBB)
	{
	    return tires >> 1 & 1;
	}
	return NINCS;
}
fuggveny KerekCsere(playerid,kocsi,kerek)
{
	if(IsValidPlayerID(playerid))
	{
		new panels, doors, lights, tires, string[128];
		GetVehicleDamageStatus(kocsi, panels, doors, lights, tires);
		//encode_tires(GetKerekStatusz(kocsi,KEREK_HATSO_JOBB), GetKerekStatusz(kocsi,KEREK_ELSO_JOBB), GetKerekStatusz(kocsi,KEREK_HATSO_BAL), GetKerekStatusz(kocsi,KEREK_ELSO_BAL));
		if(kerek == KEREK_HATSO_BAL)
			tires = encode_tires(GetKerekStatusz(kocsi,KEREK_HATSO_JOBB), GetKerekStatusz(kocsi,KEREK_ELSO_JOBB), 0, GetKerekStatusz(kocsi,KEREK_ELSO_BAL));
		else if(kerek == KEREK_HATSO_JOBB)
			tires = encode_tires(0, GetKerekStatusz(kocsi,KEREK_ELSO_JOBB), GetKerekStatusz(kocsi,KEREK_HATSO_BAL), GetKerekStatusz(kocsi,KEREK_ELSO_BAL));
		else if(kerek == KEREK_ELSO_BAL)
			tires = encode_tires(GetKerekStatusz(kocsi,KEREK_HATSO_JOBB), GetKerekStatusz(kocsi,KEREK_ELSO_JOBB), GetKerekStatusz(kocsi,KEREK_HATSO_BAL), 0);
		else if(kerek == KEREK_ELSO_JOBB)
			tires = encode_tires(GetKerekStatusz(kocsi,KEREK_HATSO_JOBB), 0, GetKerekStatusz(kocsi,KEREK_HATSO_BAL), GetKerekStatusz(kocsi,KEREK_ELSO_BAL));

		UpdateVehicleDamageStatus(kocsi, panels, doors, lights, tires);
		PotKerek[playerid] = 0;
		Format(string, "kicserélte a jármû %s kerekét / Replaced the car wheel",GetKerekNev(kerek));
		Cselekves(playerid,string);
		KezObject_Torol(playerid);
		MunkaFolyamatban[playerid] = 0;
	}
}

stock SzirenaTorles(veh)
{
	if(SzirenaObject[veh] != 0)
	{
		DestroyObject(SzirenaObject[veh]);
		SzirenaObject[veh] = 0;
		BlinkingLights(veh, false);
		return 1;
	}
	else return 0;
}

stock IsAHeli(carid)
{
    new modelid = GetVehicleModel(carid);
	if(modelid == 417 || modelid == 425 || modelid == 447 || modelid == 465 || modelid == 469 || modelid == 487 || modelid == 488 || modelid == 497 || modelid == 501 || modelid == 548 || modelid == 563)
	{
		return 1;
	}
	return 0;
}
fuggveny IsAtFa(playerid)
{
    if(IsValidPlayerID(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 5, -1326.0748,-2246.4487,31.3983) ||
			IsPlayerInRangeOfPoint(playerid, 5, -1323.3660,-2232.1309,28.8248) ||
			IsPlayerInRangeOfPoint(playerid, 5, -1307.0891,-2238.3003,27.9613)||
			IsPlayerInRangeOfPoint(playerid, 5, -1311.9469,-2252.9170,30.3293)||
			IsPlayerInRangeOfPoint(playerid, 5, -1321.5831,-2261.8679,33.2332)||
			IsPlayerInRangeOfPoint(playerid, 5, -1338.6177,-2253.1394,33.5492)||
			IsPlayerInRangeOfPoint(playerid, 5, -1338.6433,-2252.9907,33.5285))
		    	return 1;
	}
	return 0;
}
fuggveny FegyverAttachUpdate(playerid)
{
    if(GetTickCount() - armedbody_pTick[playerid] > 113){ //prefix check itter
		new weaponid[13],weaponammo[13],pArmedWeapon;
		pArmedWeapon = GetPlayerWeapon(playerid);
		GetPlayerWeaponData(playerid,1,weaponid[1],weaponammo[1]);
		GetPlayerWeaponData(playerid,2,weaponid[2],weaponammo[2]);
		GetPlayerWeaponData(playerid,4,weaponid[4],weaponammo[4]);
		GetPlayerWeaponData(playerid,5,weaponid[5],weaponammo[5]);
		#if ARMEDBODY_USE_HEAVY_WEAPON
			GetPlayerWeaponData(playerid,7,weaponid[7],weaponammo[7]);
		#endif
		if(weaponid[1] && weaponammo[1] > 0){
			if(pArmedWeapon != weaponid[1]){
				if(!IsPlayerAttachedObjectSlotUsed(playerid,5)){
					SetPlayerAttachedObject(playerid,5,GetWeaponModel(weaponid[1]),1, 0.199999, -0.139999, 0.030000, 0.500007, -115.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				}
			}
			else {
				if(IsPlayerAttachedObjectSlotUsed(playerid,5)){
					RemovePlayerAttachedObject(playerid,5);
				}
			}
		}
		else if(IsPlayerAttachedObjectSlotUsed(playerid,5)){
			RemovePlayerAttachedObject(playerid,5);
		}
		if(weaponid[2] && weaponammo[2] > 0){
			if(pArmedWeapon != weaponid[2]){
				if(!IsPlayerAttachedObjectSlotUsed(playerid,6)){
					//SetPlayerAttachedObject(playerid,6,GetWeaponModel(weaponid[2]),8, -0.079999, -0.039999, 0.109999, -90.100006, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				}
			}
			else {
				if(IsPlayerAttachedObjectSlotUsed(playerid,6)){
					RemovePlayerAttachedObject(playerid,6);
				}
			}
		}
		else if(IsPlayerAttachedObjectSlotUsed(playerid,6)){
			RemovePlayerAttachedObject(playerid,6);
		}
		if(weaponid[4] && weaponammo[4] > 0){
			if(pArmedWeapon != weaponid[4]){
				if(!IsPlayerAttachedObjectSlotUsed(playerid,7)){
					SetPlayerAttachedObject(playerid,7,GetWeaponModel(weaponid[4]),7, 0.000000, -0.100000, -0.080000, -95.000000, -10.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				}
			}
			else {
				if(IsPlayerAttachedObjectSlotUsed(playerid,7)){
					RemovePlayerAttachedObject(playerid,7);
				}
			}
		}
		else if(IsPlayerAttachedObjectSlotUsed(playerid,7)){
			RemovePlayerAttachedObject(playerid,7);
		}
		if(weaponid[5] && weaponammo[5] > 0){
			if(pArmedWeapon != weaponid[5]){
				if(!IsPlayerAttachedObjectSlotUsed(playerid,8)){
					SetPlayerAttachedObject(playerid,8,GetWeaponModel(weaponid[5]),1, 0.200000, -0.119999, -0.059999, 0.000000, 206.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				}
			}
			else {
				if(IsPlayerAttachedObjectSlotUsed(playerid,8)){
					RemovePlayerAttachedObject(playerid,8);
				}
			}
		}
		else if(IsPlayerAttachedObjectSlotUsed(playerid,8)){
			RemovePlayerAttachedObject(playerid,8);
		}
		#if ARMEDBODY_USE_HEAVY_WEAPON
			if(weaponid[7] && weaponammo[7] > 0){
				if(pArmedWeapon != weaponid[7]){
					if(!IsPlayerAttachedObjectSlotUsed(playerid,9)){
						SetPlayerAttachedObject(playerid,9,GetWeaponModel(weaponid[7]),1,-0.100000, 0.000000, -0.100000, 84.399932, 112.000000, 10.000000, 1.099999, 1.000000, 1.000000);
					}
				}
				else {
					if(IsPlayerAttachedObjectSlotUsed(playerid,9)){
						RemovePlayerAttachedObject(playerid,9);
					}
				}
			}
			else if(IsPlayerAttachedObjectSlotUsed(playerid,9)){
				RemovePlayerAttachedObject(playerid,9);
			}
		#endif
		armedbody_pTick[playerid] = GetTickCount();
	}
}
fuggveny KonyvTarbanVan(playerid)
{
    if(!PlayerToPoint(8.0, playerid, 1793.3761,-1302.2100,28.4653)) return true;
    else return false;
}

fuggveny TargoncaDoboz(targonca, bool:felrak)
{
	if(GetVehicleModel(targonca) != 530) return false;
	if(felrak)
	{
	    if(TargoncaDobozCsatolva[targonca] != 0) return false;
	    TargoncaDobozID[targonca] = CreateObject(1221,0.0,0.0,-100.0,0.0,0.0,0.0);
	    AttachObjectToVehicle(TargoncaDobozID[targonca], targonca, 0.000000, 0.539999, 0.374999, 0.000000, 0.000000, 0.000000);
	    TargoncaDobozCsatolva[targonca] = 1;
	}
	else
	{
	    DestroyObject(TargoncaDobozID[targonca]);
		TargoncaDobozCsatolva[targonca] = 0;
	}
	return true;
}
fuggveny TargoncaPakol(playerid)
{
	TargoncaDoboz(GetPlayerVehicleID(playerid), false);
	GameTextForPlayer(playerid, "~g~~h~+1500Ft", 5000, 1);
	GiveMoney(playerid, 1500);
	FrakcioInfo[LMUNKA_ALLAM][fPenz] -= 1500;
	SetPlayerCheckpoint(playerid,2779.6128,-2449.7878,13.3974,3);
}

stock UresTuzHely()
{
	new hely = NINCS;
	for(new x = 0; x < sizeof(Tuz); x++)
	{
	    if(x == 0) continue;
		if(Tuz[x][Van] != 1)
		{
			hely = x;
			break;
		}
	}
	return hely;
}

stock TuzalloRuha(skin)
{
	if(skin == 277 || skin == 278 || skin == 279)
	    return true;
	return false;
}
stock TuzLerak(Float:x,Float:y,Float:z, Float:Erosseg,bool:kellszoveg=false,szoveg[]="")
{
	new ureshely = UresTuzHely();
	if(ureshely == NINCS) return print("Tûz tároló betelt!");
	Tuz[ureshely][Van] = 1;
	Tuz[ureshely][tObject] = CreateDynamicObject(3461, x, y, z-2.61, 0, 0, 0.0);
	Tuz[ureshely][tdHP] = Erosseg;
	Tuz[ureshely][tPoz][0] = x;
	Tuz[ureshely][tPoz][1] = y;
	Tuz[ureshely][tPoz][2] = z;
	new Float:meret = 5.0;
	Tuz[ureshely][tArea] = CreateDynamicRectangle(x-meret,y-meret,x+meret,y+meret);

	return 1;
}
stock TuzTorol(tuz)
{
	if(Tuz[tuz][Van] == 0) return print("Tuztorol: Nincs ilyen tuz!");
	Tuz[tuz][Van] = 0;
	DestroyDynamicObject(Tuz[tuz][tObject]);
	Tuz[tuz][tObject] = NINCS;
	Tuz[tuz][tdHP] = 0.0;
    Tuz[tuz][tPoz][0] = 0.0;
	Tuz[tuz][tPoz][1] = 0.0;
	Tuz[tuz][tPoz][2] = 0.0;

    DestroyDynamicArea(Tuz[tuz][tArea]);
	return 1;
}
stock GetTuzHP(tuz)
{
	return Tuz[tuz][tdHP];
}
stock Eszik(playerid,mit[], ara, Float:ertek=10.0)
{
	new PerMe[64];
	Format(PerMe, "evett egy %s-t",mit);
	Cselekves(playerid,PerMe,1);
	PlayerInfo[playerid][pEhseg] -= ertek;
	new Float:elet;
	GetPlayerHealth(playerid,elet);
	if((elet + ertek) >= 200.0)
		SetPlayerHealth(playerid, 200.0);
	else
		SetPlayerHealth(playerid, elet + ertek);
	GiveMoney(playerid, -ara);
	return true;
}

stock Iszik(playerid, mit[], ara, Float:ertek=10.0)
{
	new PerMe[64];
	Format(PerMe, "ivott egy %s-t",mit);
	Cselekves(playerid,PerMe,1);
	PlayerInfo[playerid][pSzomjusag] -= ertek;
	new Float:elet;
	GetPlayerHealth(playerid,elet);
	SetPlayerHealth(playerid, elet + ertek);
	GiveMoney(playerid, -ara);
	return true;
}
fuggveny GetDotXY(Float:StartPosX, Float:StartPosY, &Float:NewX, &Float:NewY, Float:alpha, Float:dist)
{
	 NewX = StartPosX + (dist * floatsin(alpha, degrees));
	 NewY = StartPosY + (dist * floatcos(alpha, degrees));
}
fuggveny Kocsijavit(playerid, kocsi)
{
	RepairVehicle(kocsi);
	SetVehicleHealth(kocsi,1000.0);
	Cselekves(playerid, "megjavította a jármûvet",1);
	TogglePlayerControllable(playerid, true);
}
stock Csillag(hanyszor)
{
	new str1[32];
	if(hanyszor > 0)
	{
		for(new i = 1; i <= hanyszor; i++)
			strcat(str1, "*");
	}
	else
		str1="Nincs";

	return str1;

}
fuggveny TilosIttParkolni(playerid)
{
	new Haz = IsAt(playerid,IsAt_HazElott_Park);
	if(PlayerToPoint(100, playerid, 1477.1985,-1804.2847,13.5469) ||
	PlayerToPoint(80, playerid, 1596.8505,-1677.9633,5.8906) ||
	PlayerToPoint(50, playerid, 1214.0414,-1324.4862,13.5670) ||
	PlayerToPoint(250, playerid, 175.1913,1904.2084,18.2397) ||
	PlayerToPoint(140, playerid, -1593.2107,727.9420,-4.9063) ||
	Haz == NINCS)
		return true;
	return false;
}
fuggveny ResetLoter()
{
	LoterInfo[lFegyver] = NINCS;
	LoterInfo[lGyakorlatvan] = 0;
	LoterInfo[lGyakorlo] = NINCS;
	LoterInfo[lGyakorlatIdo] = LOGYAKORLATIDO;
	LoterInfo[lHibapont] = 0;
	LoterInfo[lTalalat] = 0;
	LoterInfo[lTalalt] = 0;
	for(new i = 0; i < sizeof(LoterInfo[lEllenseg]); i++)
	    SetDynamicObjectRot(LoterInfo[lEllenseg][i],270,0,0);

    for(new i = 0; i < sizeof(LoterInfo[lTusz]); i++)
	    SetDynamicObjectRot(LoterInfo[lTusz][i],270,0,0);

	return true;
}
fuggveny LoterTorol()
{
    for(new i = 0; i < sizeof(LoterInfo[lEllenseg]); i++)
	{
	    if(IsValidDynamicObject(LoterInfo[lEllenseg][i])) DestroyDynamicObject(LoterInfo[lEllenseg][i]);
		LoterInfo[lEllenseg][i] = NINCS;
	}

    for(new i = 0; i < sizeof(LoterInfo[lTusz]); i++)
	{
	    if(IsValidDynamicObject(LoterInfo[lTusz][i])) DestroyDynamicObject(LoterInfo[lTusz][i]);
		LoterInfo[lTusz][i] = NINCS;
	}
	return true;
}
stock LoadLoter()
{
    LoterInfo[lFegyver] = NINCS;
	LoterInfo[lGyakorlatvan] = 0;
	LoterInfo[lGyakorlo] = NINCS;
	LoterInfo[lGyakorlatIdo] = LOGYAKORLATIDO;
	LoterInfo[lHibapont] = 0;
	LoterInfo[lTalalat] = 0;

    LoterInfo[lEllenseg][0] = CreateDynamicObject(1583, 284.673828125, -8.4738082885742, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][1] = CreateDynamicObject(1583, 286.32354736328, -10.373645782471, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][2] = CreateDynamicObject(1583, 288.24807739258, -8.5230522155762, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][3] = CreateDynamicObject(1583, 289.998046875, -18.0224609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][4] = CreateDynamicObject(1583, 291.748046875, -12.7724609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][5] = CreateDynamicObject(1583, 294.248046875, -9.2724609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][6] = CreateDynamicObject(1583, 296.498046875, -14.0224609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][7] = CreateDynamicObject(1583, 294.498046875, -15.7724609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][8] = CreateDynamicObject(1583, 289.498046875, -15.0224609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][9] = CreateDynamicObject(1583, 286.998046875, -15.0224609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][10] = CreateDynamicObject(1583, 288.248046875, -12.0224609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][11] = CreateDynamicObject(1583, 291.248046875, -9.2724609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][12] = CreateDynamicObject(1583, 289.748046875, -11.5224609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][13] = CreateDynamicObject(1583, 294.498046875, -12.0224609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][14] = CreateDynamicObject(1583, 296.748046875, -10.2724609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][15] = CreateDynamicObject(1583, 298.498046875, -13.0224609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][16] = CreateDynamicObject(1583, 298.998046875, -16.2724609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][17] = CreateDynamicObject(1583, 297.498046875, -19.2724609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][18] = CreateDynamicObject(1583, 295.998046875, -17.7724609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][19] = CreateDynamicObject(1583, 293.09820556641, -21.19744682312, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][20] = CreateDynamicObject(1583, 296.248046875, -22.7724609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][21] = CreateDynamicObject(1583, 289.998046875, -22.7724609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][22] = CreateDynamicObject(1583, 285.248046875, -21.2724609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][23] = CreateDynamicObject(1583, 299.248046875, -21.7724609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][24] = CreateDynamicObject(1583, 299.248046875, -8.5224609375, 1000.5, 270, 0, 0);
	LoterInfo[lEllenseg][25] = CreateDynamicObject(1583, 287.748046875, -19.2724609375, 1000.5, 270, 0, 0);

	LoterInfo[lTusz][0] = CreateDynamicObject(1585, 292.41418457031, -15.033295631409, 1000.5, 270, 0, 0);
	LoterInfo[lTusz][1] = CreateDynamicObject(1585, 294.53915405273, -18.283203125, 1000.5, 270, 0, 0);
	LoterInfo[lTusz][2] = CreateDynamicObject(1585, 290.5390625, -20.283203125, 1000.5, 270, 0, 0);
	LoterInfo[lTusz][3] = CreateDynamicObject(1585, 285.7890625, -16.983200073242, 1000.5, 270, 0, 0);
	LoterInfo[lTusz][4] = CreateDynamicObject(1585, 285.7890625, -12.807420730591, 1000.5, 270, 0, 0);
	LoterInfo[lTusz][5] = CreateDynamicObject(1585, 292.98907470703, -11.306640625, 1000.5, 270, 0, 0);
	LoterInfo[lTusz][6] = CreateDynamicObject(1585, 292.43914794922, -18.133201599121, 1000.5, 270, 0, 0);
	LoterInfo[lTusz][7] = CreateDynamicObject(1585, 292.58843994141, -8.0078182220459, 1000.5, 270, 0, 0);
	LoterInfo[lTusz][8] = CreateDynamicObject(1585, 289.61264038086, -8.0078125, 1000.5, 270, 0, 0);
}
fuggveny LoterTimer()
{
	if(LoterInfo[lGyakorlatvan] != 0)
	{
		switch(random(100))
		{
			case 0..70:
			{
				new bool:tusz, ID;
				switch(random(100))
				{
					case 0..49: tusz = false;
					case 50..100: tusz = true;
				}
				if(tusz)
				{
					LoterInfo[AktivObjectTusz] = true;
					ID = random(sizeof(LoterInfo[lTusz]));
					//SetDynamicObjectRot(ID,0.0,0.0,0.0);
				}
				else
				{
					LoterInfo[AktivObjectTusz] = false;
					ID = random(sizeof(LoterInfo[lEllenseg]));
					//SetDynamicObjectRot(ID,0.0,0.0,0.0);
				}
				SetDynamicObjectRot(LoterInfo[ObjectAktiv],270,0,0);
				if(tusz)
				{
					SetDynamicObjectRot(LoterInfo[lTusz][ID],0.0,0.0,0.0);
					LoterInfo[ObjectAktiv] = LoterInfo[lTusz][ID];
				}
				else
				{
					SetDynamicObjectRot(LoterInfo[lEllenseg][ID],0.0,0.0,0.0);
					LoterInfo[ObjectAktiv] = LoterInfo[lEllenseg][ID];
				}
				PlayerPlaySound(LoterInfo[lGyakorlo], 1145, 0.0, 0.0, 0.0);
				LoterInfo[lTalalt] = 0;
			}
		}
	}
}
fuggveny SetFegyverSkill(playerid, fegyver, skill)
{
	if(skill > 999) skill = 999;
	if(PlayerInfo[playerid][pFegyverSkill][fegyver] + skill < 0) {
		PlayerInfo[playerid][pFegyverSkill][fegyver] = 0;
	} else {
		PlayerInfo[playerid][pFegyverSkill][fegyver] = skill;
	}
	SetPlayerSkillLevel(playerid, fegyver, PlayerInfo[playerid][pFegyverSkill][fegyver]);
	return 1;
}
fuggveny VanFegyvere(playerid)
{
	new fegyok, fegyo, ammo;
	for(new x = 0; x < 13; x++)
	{
		GetPlayerWeaponData(playerid, x, fegyo, ammo);
		if(x == 0 && fegyo != 1) continue;

		if(ammo != 0) {
			fegyok++;
		}
	}

	if(fegyok < 1) return false;

	return true ;
}
fuggveny IndexKi(kocsi)
{
	new melyik = KocsiIndexStat[kocsi];
	if(melyik == INDEX_MINDD)
	{
	    DestroyVehicleObject(KocsiIndex[kocsi][0]);
	    DestroyVehicleObject(KocsiIndex[kocsi][1]);
	    DestroyVehicleObject(KocsiIndex[kocsi][2]);
	    DestroyVehicleObject(KocsiIndex[kocsi][3]);
	}
	else if(melyik == INDEX_BAL)
	{
	    DestroyVehicleObject(KocsiIndex[kocsi][0]);
	    DestroyVehicleObject(KocsiIndex[kocsi][1]);
	}
	else if(melyik == INDEX_JOB)
	{
	    DestroyVehicleObject(KocsiIndex[kocsi][2]);
	    DestroyVehicleObject(KocsiIndex[kocsi][3]);
	}
	KocsiIndexStat[kocsi] = 0;
}
fuggveny IndexLampa(kocsi,melyik)
{
	new modell = GetVehicleModel(kocsi);
	if(KocsiIndexStat[kocsi] != 0)
	{
		IndexKi(kocsi);
	}
	switch(modell)
	{
		case 596,597,598:
		{
			if(melyik == INDEX_MINDD)
		    {
				KocsiIndex[kocsi][0] = CreateVehicleObject(19294, kocsi, 0.794999, 2.505009, 0.030000, 0.000000, 0.000000, 0.000000,50); //Object Model: 19294 |
				KocsiIndex[kocsi][1] = CreateVehicleObject(19294, kocsi, 0.954999, -2.720014, 0.085000, 0.000000, 0.000000, 0.000000, 50); //Object Model: 19294 |
				KocsiIndex[kocsi][2] = CreateVehicleObject(19294, kocsi, -0.824999, 2.555011, 0.000000, 0.000000, 0.000000, 0.000000, 50); //Object Model: 19294 |
				KocsiIndex[kocsi][3] = CreateVehicleObject(19294, kocsi, -0.974999, -2.760015, 0.000000, 0.000000, 0.000000, 0.000000, 50); //Object Model: 19294 |
				KocsiIndexStat[kocsi] = INDEX_MINDD;
			}
		    else if(melyik == INDEX_BAL)
		    {
				KocsiIndex[kocsi][0] =  CreateVehicleObject(19294, kocsi, -0.824999, 2.555011, 0.000000, 0.000000, 0.000000, 0.000000, 50); //Object Model: 19294 |
				KocsiIndex[kocsi][1] = CreateVehicleObject(19294, kocsi, -0.974999, -2.760015, 0.000000, 0.000000, 0.000000, 0.000000, 50); //Object Model: 19294 |
                KocsiIndexStat[kocsi] = INDEX_BAL;
			}
		    else if(melyik == INDEX_JOB)
		    {
		        KocsiIndex[kocsi][2] = CreateVehicleObject(19294, kocsi, 0.794999, 2.505009, 0.030000, 0.000000, 0.000000, 0.000000, 50); //Object Model: 19294 |
				KocsiIndex[kocsi][3] = CreateVehicleObject(19294, kocsi, 0.954999, -2.720014, 0.085000, 0.000000, 0.000000, 0.000000, 50); //Object Model: 19294 |
                KocsiIndexStat[kocsi] = INDEX_JOB;
			}
		}
		
		case 560:
		{
		    if(melyik == INDEX_MINDD)
		    {
		        KocsiIndex[kocsi][0] = CreateVehicleObject(19294, kocsi, -0.939999, 2.530010, 0.060000, 0.000000, 0.000000, 0.000000, 50); //Bal elsõ
				KocsiIndex[kocsi][1] = CreateVehicleObject(19294, kocsi, -0.939999, -2.200002, 0.100000, 0.000000, 0.000000, 0.000000, 50); //Bal hátsó
				KocsiIndex[kocsi][2] = CreateVehicleObject(19294, kocsi, 0.914999, -2.200002, 0.100000, 0.000000, 0.000000, 0.000000, 50); //Jobb hátsó
				KocsiIndex[kocsi][3] = CreateVehicleObject(19294, kocsi, 0.984999, 2.400007, 0.050000, 0.000000, 0.000000, 0.000000, 50); //Jobb elsõ
				KocsiIndexStat[kocsi] = INDEX_MINDD;
			}
		    else if(melyik == INDEX_BAL)
		    {
		        KocsiIndex[kocsi][0] = CreateVehicleObject(19294, kocsi, -0.939999, 2.530010, 0.060000, 0.000000, 0.000000, 0.000000, 50); //Bal elsõ
				KocsiIndex[kocsi][1] = CreateVehicleObject(19294, kocsi, -0.939999, -2.200002, 0.100000, 0.000000, 0.000000, 0.000000, 50); //Bal hátsó
                KocsiIndexStat[kocsi] = INDEX_BAL;
			}
		    else if(melyik == INDEX_JOB)
		    {
		        KocsiIndex[kocsi][2] = CreateVehicleObject(19294, kocsi, 0.914999, -2.200002, 0.100000, 0.000000, 0.000000, 0.000000, 50); //Jobb hátsó
				KocsiIndex[kocsi][3] = CreateVehicleObject(19294, kocsi, 0.984999, 2.400007, 0.050000, 0.000000, 0.000000, 0.000000, 50); //Jobb elsõ
                KocsiIndexStat[kocsi] = INDEX_JOB;
			}
		}
		default:
		{
		    if(melyik == INDEX_MINDD)
		    {
		        KocsiIndex[kocsi][0] = CreateVehicleObject(19294, kocsi, -0.939999, 2.530010, 0.060000, 0.000000, 0.000000, 0.000000, 50); //Bal elsõ
				KocsiIndex[kocsi][1] = CreateVehicleObject(19294, kocsi, -0.939999, -2.200002, 0.100000, 0.000000, 0.000000, 0.000000, 50); //Bal hátsó
				KocsiIndex[kocsi][2] = CreateVehicleObject(19294, kocsi, 0.914999, -2.200002, 0.100000, 0.000000, 0.000000, 0.000000, 50); //Jobb hátsó
				KocsiIndex[kocsi][3] = CreateVehicleObject(19294, kocsi, 0.984999, 2.400007, 0.050000, 0.000000, 0.000000, 0.000000, 50); //Jobb elsõ
				KocsiIndexStat[kocsi] = INDEX_MINDD;
			}
		    else if(melyik == INDEX_BAL)
		    {
		        KocsiIndex[kocsi][0] = CreateVehicleObject(19294, kocsi, -0.939999, 2.530010, 0.060000, 0.000000, 0.000000, 0.000000, 50); //Bal elsõ
				KocsiIndex[kocsi][1] = CreateVehicleObject(19294, kocsi, -0.939999, -2.200002, 0.100000, 0.000000, 0.000000, 0.000000, 50); //Bal hátsó
                KocsiIndexStat[kocsi] = INDEX_BAL;
			}
		    else if(melyik == INDEX_JOB)
		    {
		        KocsiIndex[kocsi][2] = CreateVehicleObject(19294, kocsi, 0.914999, -2.200002, 0.100000, 0.000000, 0.000000, 0.000000, 50); //Jobb hátsó
				KocsiIndex[kocsi][3] = CreateVehicleObject(19294, kocsi, 0.984999, 2.400007, 0.050000, 0.000000, 0.000000, 0.000000, 50); //Jobb elsõ
                KocsiIndexStat[kocsi] = INDEX_JOB;
			}
		}
	}
}
fuggveny RandomTuz()
{
	if(OnlineTuzoltok() < 1) return false;
	if(TuzVan[0] == 0)
	{
		new SpawnID = random(sizeof(TuzSpawn));
		for(new a=0; a < TUZINTENZIVITAS; a++)
		{
			new Float:X = TuzSpawn[SpawnID][0]+(random(5)-random(5));
			new Float:Y = TuzSpawn[SpawnID][1]+(random(5)-random(5));
			AddFire(X, Y, TuzSpawn[SpawnID][2],5);
			TuzVan[1] ++;
		}
		TuzVan[0] = 1;
		JelenlegiTuzPoz[0] = TuzSpawn[SpawnID][0];
		JelenlegiTuzPoz[1] = TuzSpawn[SpawnID][1];
		JelenlegiTuzPoz[2] = TuzSpawn[SpawnID][2];
		PlayerForeach(i)
		{
			if(LMT(i, LMUNKA_TUZOLTO))
			{
				SetPlayerCheckpoint(i, JelenlegiTuzPoz[0], JelenlegiTuzPoz[1], JelenlegiTuzPoz[2], 10.0);
				SendClientMessage(i, COLOR_LIGHTRED, "Riasztás: Tûz ütött ki! Azonnal mindenki a helyszínre! (GPS-en megjelölve)");
			}
		}
	}
	return true;
}

fuggveny Tuz_OnPlayerUpdate(playerid)
{
	#define HOLDING(%0) ((newkeys & (%0)) == (%0))
	new newkeys,l,u;
	GetPlayerKeys(playerid, newkeys, l, u);
	new i;
	new skin = GetPlayerSkin(playerid);
 	for(i = 0; i < MAXTUZ; i++)
 	{
 		if(IsValidFire(i))
  		{
			if( IsPlayerInRangeOfPoint(playerid, 4, Tuz[i][TuzPos][0],  Tuz[i][TuzPos][1],  Tuz[i][TuzPos][2]) && !TuzalloRuha(skin))
			{
				if(Animban[playerid] == 0)
				{
					AnimbaRak(playerid);
					Msg(playerid, "Égési sérülést szereztél! Elõbb vagy utóbb meg fogsz halni!");
				}
				GiveHealth(playerid,-0.1);
			}
			if(HOLDING(KEY_FIRE))
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					for(i = 0; i < MAXTUZ; i++)
					{
						if(IsValidFire(i))
						{
							if(IsPlayerAimingAt(playerid, Tuz[i][TuzPos][0],  Tuz[i][TuzPos][1],  Tuz[i][TuzPos][2], 2.5) && IsPlayerInRangeOfPoint(playerid, 20.0, Tuz[i][TuzPos][0],  Tuz[i][TuzPos][1],  Tuz[i][TuzPos][2]))
							{
								Tuz[i][TuzHP]-=2;

								if(Tuz[i][TuzHP] <= 0)
								{
									Tuz_Torles(i);
									OnTuzoltas(i,playerid);
								}
							}
						}
					}
				}
	   			else if(GetPlayerWeapon(playerid) == 42 && PlayerFaces(playerid, Tuz[i][TuzPos][0],  Tuz[i][TuzPos][1],  Tuz[i][TuzPos][2], 1) && IsPlayerInRangeOfPoint(playerid, 4, Tuz[i][TuzPos][0],  Tuz[i][TuzPos][1],  Tuz[i][TuzPos][2]))
	    		{
	    			Tuz[i][TuzHP]-=2;
					
				    if(Tuz[i][TuzHP] <= 0)
				    {
						Tuz_Torles(i);
						OnTuzoltas(i,playerid);
					}
				}
			}
		}
	}
	return 1;
}

stock MySQL_Safety_Mode()
{	
	new maxerror = 50;
	if(mysqlerror > maxerror)
	{
		//SendRconCommand("hostname !!! MySQL SAFETY MÓD AKTIVÁLVA !!!");
		VeszLeallitas(1);
		
		for(new c = 1; c <= 200; c++)
		{
			SendClientMessageToAll(COLOR_PIROS, "!!! MySQL SAFETY MÓD AKTIVÁLVA !!!");
		}
		
		SendRconCommand("password maxmysqlerrorelerve");
		
		KickAllPlayer();

		mysql_close();
	}
	return maxerror;
}

public OnMysqlError(error[], errorid, MySQL:handle)
{
	//MySQL_Ping_Check();
	
	new sqlerror[256], valaszto[128];
	valaszto = "{FF0000}[ {FFFFFF}MySQL ERROR{FF0000} ]";
	
	ABroadCast(COLOR_LIGHTRED, valaszto, 1);
	
	Format(sqlerror, "MySQL Hiba történt. Error ID: %d.", errorid);
	ABroadCast(COLOR_PIROS, sqlerror, 1);
	
	Format(sqlerror, "Hiba: %s", error);
	ABroadCast(COLOR_WHITE, sqlerror, 1);
	
	ABroadCast(COLOR_LIGHTRED, valaszto, 1);
	
	new entry[256], fajl[64];

    format(fajl, sizeof(fajl), "Log/MySQL/%s-%s-%s.log", Time("ev"), Time("honap"), Time("nap"));
	format(entry, sizeof(entry), "[%s:%s:%s]-[%d] %s\n", Time("ora"), Time("perc"), Time("mp"), errorid, error);

	new File:hFile;
	hFile = fopen(fajl, io_append);
	if(!hFile) return false;
	fwrite(hFile, entry);
	fclose(hFile);
	return true;
}

fuggveny OnTuzoltas(ID, killerid)
{
    if(TuzVan[0] > 0)
	{
		TuzVan[1] --;
		if(TuzVan[1] == 1)
		{
			TuzVan[0] = 0;
			SendRadioMessage(LMUNKA_TUZOLTO, COLOR_LIGHTRED, "Bejelentés: Tûz kioltva! Gratulálunk! $200-t kaptatok a széfbe!");
			FrakcioInfo[LMUNKA_TUZOLTO][fPenz] += 200;
			FrakcioUpdate(LMUNKA_TUZOLTO,FRAKCIO_Cuccok);
		}
	}
	return 1;
}

fuggveny PlayerFaces(playerid, Float:x, Float:y, Float:z, Float:radius)
{
	new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
	GetPlayerCameraPos(playerid, cx, cy, cz);
	GetPlayerCameraFrontVector(playerid, fx, fy, fz);
	return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

fuggveny AddFire(Float:x, Float:y, Float:z, HP)
{
	new TuzID = UresTuzHely();
	if( TuzID == NINCS) return false;

   	Tuz[TuzID][tID] = TuzID;
   	Tuz[TuzID][Van] = 1;
   	Tuz[TuzID][tObjekt] = CreateDynamicObject(18692, x, y, z-2.5, 0, 0, 0.0);
   	Tuz[TuzID][TuzHP] = HP;
   	Tuz[TuzID][MaxTuzHP] = HP;
	Tuz[TuzID][TuzPos][0] = x;
	Tuz[TuzID][TuzPos][1] = y;
	Tuz[TuzID][TuzPos][2] = z;

	return true;
}
fuggveny Tuz_Torles(tuzid)
{
	DestroyDynamicObject(Tuz[tuzid][tObjekt]);
	Tuz[tuzid][tObjekt] = NINCS;
//	TotalFires--;
	Tuz[tuzid][Van] = 0;
	Tuz[tuzid][TuzPos][0] = 0.0;
	Tuz[tuzid][TuzPos][1] = 0.0;
	Tuz[tuzid][TuzPos][2] = 0.0;
}
fuggveny DeleteAllFire()
{
	new ID;
	for(ID = 0; ID < MAXTUZ; ID++)
	{
		DestroyDynamicObject(Tuz[ID][tObjekt]);
        Tuz[ID][TuzPos][0] = 0.0;
		Tuz[ID][TuzPos][1] = 0.0;
		Tuz[ID][TuzPos][2] = 0.0;
		Tuz[ID][tID] = NINCS;
   		Tuz[ID][Van] = 0;
	}
}
stock IsValidFire(ID)
{
	if(Tuz[ID][Van] == 1) return true;
	else return false;
}
stock GetClosestFire(playerid)
{
	new i;
	for(i = 0; i< MAXTUZ; i++)
	{
	    if(IsValidFire(i) && IsPlayerInRangeOfPoint(playerid, 1, Tuz[i][TuzPos][0],  Tuz[i]TuzPos][1],  Tuz[i]TuzPos][2]))
	    {
	        return i;
		}
	}
	return 0;
}
fuggveny StreamSeeRPGObjects()
{
	for (new id=1; id < MAX_SeeRPG_OBJECT; id++) if(SeeRPGStreamer[id][object_modelid])
	{
		new in_range;
		PlayerForeach(playerid) if(IsPlayerInRangeOfPoint(playerid, SeeRPGStreamer[id][object_distance], SeeRPGStreamer[id][object_x], SeeRPGStreamer[id][object_y], SeeRPGStreamer[id][object_z]))
		{
	        in_range = 1;
	        break;
		}

		if(in_range == 1 && SeeRPGStreamer[id][object_objectid] == 0)
		{
			new objectid = CreateObject(SeeRPGStreamer[id][object_modelid], SeeRPGStreamer[id][object_x], SeeRPGStreamer[id][object_y], SeeRPGStreamer[id][object_z], Jarmu_Streamer[id][object_rx], Jarmu_Streamer[id][object_ry], Jarmu_Streamer[id][object_rz], SeeRPGStreamer[id][object_distance]);
			if(objectid != INVALID_OBJECT_ID)
			{
				new text[256];
				format(text,256, "%s",SeeRPGStreamer[id][object_text]);
			    SeeRPGStreamer[id][object_objectid] = objectid;
			    
			
			}
		}
		else if(in_range == 0 && SeeRPGStreamer[id][object_objectid] !=  0)
		{
		    STREAM_OBJECT_OUT(id);
		}
	}
}
//==================== Jármû objektek streamelése =================================
fuggveny StreamVehicleObjects()
{
    new Float:x, Float:y, Float:z,
		world, vehicleid;
	for (new id=1; id < MAX_VEHICLE_OBJECTS; id++) if(Jarmu_Streamer[id][object_modelid])
	{
		if(!GetVehiclePos((vehicleid = Jarmu_Streamer[id][object_vehicleid]), x, y ,z))
		{
		    if(Jarmu_Streamer[id][object_objectid])
			{
				STREAM_OBJECT_OUT(id);
			}
		    continue;
		}

		world = GetVehicleVirtualWorld(vehicleid);

		new in_range;
		PlayerForeach(playerid) if(IsPlayerInRangeOfPoint(playerid, Jarmu_Streamer[id][object_distance], x, y, z) && GetPlayerVirtualWorld(playerid) == world)
		{
	        in_range = 1;
	        break;
		}

		if(in_range == 1 && Jarmu_Streamer[id][object_objectid] == 0)
		{
			new objectid = CreateObject(Jarmu_Streamer[id][object_modelid], 0, 0, 0, 0, 0, 0, Jarmu_Streamer[id][object_distance]);
			if(objectid != INVALID_OBJECT_ID)
			{
			    Jarmu_Streamer[id][object_objectid] = objectid;
			    AttachObjectToVehicle(objectid, Jarmu_Streamer[id][object_vehicleid],
				Jarmu_Streamer[id][object_x], Jarmu_Streamer[id][object_y], Jarmu_Streamer[id][object_z],
				Jarmu_Streamer[id][object_rx], Jarmu_Streamer[id][object_ry], Jarmu_Streamer[id][object_rz]);
			}
		}
		else if(in_range == 0 && Jarmu_Streamer[id][object_objectid] !=  0)
		{
		    STREAM_OBJECT_OUT(id);
		}
	}
}
stock RemoveObjectsFromVehicle(vehicleid)
{
	new n;
	for (new i=1; i < MAX_VEHICLE_OBJECTS; i++) if(Jarmu_Streamer[i][object_vehicleid] == vehicleid)
	{
	    DestroyVehicleObject(i);
	    n++;
	}
	return n;
}
stock DestroyVehicleObject(vobjectid)
{
	if(vobjectid == 0 || Jarmu_Streamer[vobjectid][object_modelid] == 0) return 0;
	STREAM_OBJECT_OUT(vobjectid);
	Jarmu_Streamer[vobjectid][object_modelid] 		= 0;
	Jarmu_Streamer[vobjectid][object_vehicleid] 	= 0;
	return 1;
}
stock CreateSeeRPGObject(modelid, Float:X, Float:Y, Float:Z, Float:ForgX, Float:ForgY, Float:ForgZ, Float:stream_distance, text[] = "")
{
	if(modelid == 0) return 0;
	new id;
	for (new i = 1; i < MAX_SeeRPG_OBJECT; i++) if(SeeRPGStreamer[i][object_modelid] == 0)
	{
	    id = i;
	    break;
	}
	if(id == 0) return 0;

	SeeRPGStreamer[id][object_x] = X;
	SeeRPGStreamer[id][object_y] = Y;
	SeeRPGStreamer[id][object_z] = Z;

	SeeRPGStreamer[id][object_rx]= ForgX;
	SeeRPGStreamer[id][object_ry] = ForgY;
	SeeRPGStreamer[id][object_rz] = ForgZ;

	SeeRPGStreamer[id][object_distance] = stream_distance;
	SeeRPGStreamer[id][object_objectid] = 0;
	SeeRPGStreamer[id][object_modelid] = modelid;
	strmid(SeeRPGStreamer[id][object_text], text, 0, strlen(text), 255);
	
	return id;
}
stock DestroySeeRPGObject(vobjectid)
{
	if(vobjectid == 0 || SeeRPGStreamer[vobjectid][object_modelid] == 0) return 0;
	STREAM_OBJECT_OUT(vobjectid);
	SeeRPGStreamer[vobjectid][object_modelid] 		= 0;
	return 1;
}

stock CreateVehicleObject(modelid, vehicleid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:stream_distance)
{
	if(vehicleid == 0 || vehicleid == INVALID_VEHICLE_ID || modelid ==0) return 0;
	new id;
	for (new i=1; i < MAX_VEHICLE_OBJECTS; i++) if(Jarmu_Streamer[i][object_modelid] == 0)
	{
	    id = i;
	    break;
	}
	if(id == 0) return 0;

	Jarmu_Streamer[id][object_x] = fOffsetX;
	Jarmu_Streamer[id][object_y] = fOffsetY;
	Jarmu_Streamer[id][object_z] = fOffsetZ;

	Jarmu_Streamer[id][object_rx]= fRotX;
	Jarmu_Streamer[id][object_ry] = fRotY;
	Jarmu_Streamer[id][object_rz] = fRotZ;

	Jarmu_Streamer[id][object_distance] = stream_distance;
	Jarmu_Streamer[id][object_vehicleid]= vehicleid;
	Jarmu_Streamer[id][object_objectid] = 0;
	Jarmu_Streamer[id][object_modelid] = modelid;
	return id;
}

fuggveny MennyiVanBelole(playerid,cucc)
{
	new ennyi = 0;
	for(new i=0; i < INV_SLOT; i++)
	{
	    if(PlayerInfo[playerid][pInventory][i] != NINCS && PlayerInfo[playerid][pInventory][i] == cucc)
	    {
            ennyi++;
		}
	}
	return ennyi;
}
fuggveny GetCuccSlot(playerid,cucc)
{
	new ID = NINCS;
	for(new i=0; i < INV_SLOT; i++)
	{
	    if(PlayerInfo[playerid][pInventory][i] != NINCS && PlayerInfo[playerid][pInventory][i] == cucc)
	    {
	        ID = i;
	        break;
		}
	}
	return ID;
}

fuggveny UresInventoryHely(playerid)
{
	new ID = NINCS;
	for(new i=0; i < INV_SLOT; i++)
	{
	    if(PlayerInfo[playerid][pInventory][i] == NINCS)
	    {
	        ID = i;
	        break;
		}
	}
	return ID;
}
fuggveny UresTargyHely()
{
	new Hely = NINCS;
	for(new i=0; i < MAX_KINCS; i++)
	{
		if(KincsInfo[i][tVanLerakva] == 0)
		{
			Hely = i;
			break;
		}
	}
	return Hely;
}

fuggveny TuzoltoKocsi(kocsi)
{
	new model = GetVehicleModel(kocsi);
	if(model == 407 || model == 544) return true;
	return false;
}
fuggveny ArrestHelyenVan(playerid)
{
	if(PlayerToPoint(5.0, playerid, 1797.5916, -1578.8693, 14.0856)) return BORTON_LSPD;
	else return BORTON_NINCS;
}

fuggveny VanBenneCsomagtarto(kocsi)
{
	if(IsATruck(kocsi) || Bikes(kocsi) || IsABoat(kocsi) || IsAPlato(kocsi) || IsAPlane(kocsi) || IsAHeli(kocsi))
	    return false;
	return true;
}

/*fuggveny AdatChck(playerid)
{
	if(PlayerInfo[playerid][pSex] != 1 && PlayerInfo[playerid][pSex] != 2 || PlayerInfo[playerid][pAge] < 18)
	    DialogList(playerid, DIALOG_NEMVALASZTAS, "Nem választás", "Férfi\nNõ", "Kiválaszt", "");
}*/

fuggveny KiVanAKocsiElott(kocsi)
{
	new van = NINCS;
	new Float:KocsiPos[3];
	GetVehiclePos(kocsi,KocsiPos[0],KocsiPos[1],KocsiPos[2]);
	PlayerForeach(i)
	{
		GetXYInFrontOfVehicle(kocsi,KocsiPos[0],KocsiPos[1],5.0);
		if(PlayerToPoint(4.0 ,i, KocsiPos[0],KocsiPos[1],KocsiPos[2]))
		{
			van = i;
			break;
		}
	}
	return van;
}

fuggveny KaracsonyfaLerak(Float:X, Float:Y, Float:Z)
{
	CreateDynamicObject(3472,X+0.28564453,Y+0.23718262,Z+27.00000000,0.00000000,0.00000000,230.48021);
	CreateDynamicObject(664,X+0.20312500,Y+0.01171875,Z+-3.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(3472,X+0.45312500,Y+0.51562500,Z+4.00000000,0.00000000,0.00000000,69.7851562);
	CreateDynamicObject(3472,X+0.65136719,Y+1.84570312,Z+17.00000000,0.00000000,0.00000000,41.863403);
	CreateDynamicObject(7666,X+0.34130859,Y+0.16845703,Z+45.00000000,0.00000000,0.00000000,298.12524);
	CreateDynamicObject(7666,X+0.34082031,Y+0.16796875,Z+45.00000000,0.00000000,0.00000000,27.850342);
	CreateDynamicObject(3472,X+0.45312500,Y+0.51562500,Z+12.00000000,0.00000000,0.00000000,350.02441);
	CreateDynamicObject(3472,X+0.45312500,Y+0.51562500,Z+7.00000000,0.00000000,0.00000000,30.0805664);
	CreateDynamicObject(3472,X+0.45312500,Y+0.51562500,Z+22.00000000,0.00000000,0.00000000,230.47119);
	CreateDynamicObject(1262,X+0.15039062,Y+0.57128906,Z+29.45285416,0.00000000,0.00000000,162.90527);
}

stock UresHullaHely()
{
	new ID = NINCS;
	for(new i=0; i < MAX_HULLA; i++)
	{
		if(!HullaInfo[i][hVan])
		{
			ID = i;
			break;
		}
	}
	return ID;
}
stock HalalOka(okID)
{
	new okastr[32];
	if(okID == 49)
		okastr = "Elütötték";
	else if(okID == 50)
		okastr = "Helikopter Rotor";
	else if(okID == 51)
		okastr = "Robbanás";
	else if(okID == 53)
		okastr = "Fulladás";
	else if(okID == 54)
		okastr = "Leesett";
	else
		okastr = "Ismeretlen";

	return okastr;
}

stock Szazalek(ertek, alap)
{
	return (ertek / (alap / 100));
}
stock HullaLerak(playerid,Float:Xa, Float:Ya, Float:Za,oka, megolte[] = "Nem gyilkosság")
{
	new vw, inter;
	vw = GetPlayerVirtualWorld(playerid);
	inter = GetPlayerInterior(playerid);
	if(vw != 0 || inter != 0) return 1;
	new ureshely = UresHullaHely();
	if(ureshely  == NINCS) return false;
	HullaInfo[ureshely][hVan] = true;
	HullaInfo[ureshely][hIdo] = HULLAIDO*60;
	HullaInfo[ureshely][hPos][0] = Xa;
	HullaInfo[ureshely][hPos][1] = Ya;
	Za -= 0.6;
	HullaInfo[ureshely][hPos][2] = Za;
	HullaInfo[ureshely][hOka] = oka;
	strmid(HullaInfo[ureshely][hKie], PlayerInfo[playerid][pNev], 0, strlen(PlayerInfo[playerid][pNev]), MAX_PLAYER_NAME);
	strmid(HullaInfo[ureshely][hMegolte], megolte, 0, strlen(megolte), MAX_PLAYER_NAME);
	//Format(GlobText, "(( Holttest ))\n Állapot: %d%% \nOka: %s",Szazalek(HullaInfo[ureshely][hIdo], (HULLAIDO*60)), HalalOka(oka));
	//HullaInfo[ureshely][hSzoveg] = CreateDynamic3DTextLabel("Holttest", COLOR_WHITE, Xa, Ya, Za, 10.0);
	HullaInfo[ureshely][hObject][0] = CreateDynamicObject(2907, Xa, Ya, Za, 0, 0, 274); //torso
	HullaInfo[ureshely][hObject][1] = CreateDynamicObject(2905, Xa+0.85376, Ya+0.161621, Za-0.01857662, 0, 26, 278); //leg
	HullaInfo[ureshely][hObject][2] = CreateDynamicObject(2905, Xa+0.739746, Ya-0.158935, Za+0.006423, 356.68469238281, 145.93511962891, 263.75891113281); //leg
	HullaInfo[ureshely][hObject][3] = CreateDynamicObject(2906, Xa-0.081787, Ya+0.239991, Za-0.03601265, 359.30590820313, 273.93939208984, 298.02392578125); //arm
	HullaInfo[ureshely][hObject][4] = CreateDynamicObject(2906, Xa-0.024414, Ya-0.30957, Za-0.03601265, 359.01071166992, 339.99688720703, 242.68936157227); //arm

	return true;
}
fuggveny HullaTorol(hulla)
{
	for(new obj=0; obj < 5; obj++)
	{
		DestroyDynamicObject(HullaInfo[hulla][hObject][obj]); HullaInfo[hulla][hObject][obj] = NINCS;
	//	HullaInfo[hulla][hObject][obj] = {NINCS, NINCS, NINCS, NINCS, NINCS};
	}
	if(IsValidDynamic3DTextLabel(HullaInfo[hulla][hSzoveg]))
		DestroyDynamic3DTextLabel(HullaInfo[hulla][hSzoveg]);
	//HullaInfo[hulla][hSzoveg] = NINCS;
	HullaInfo[hulla][hIdo] = 0;
	HullaInfo[hulla][hVan] = false;
	HullaInfo[hulla][hPos][0] = 0.0;
	HullaInfo[hulla][hPos][1] = 0.0;
	HullaInfo[hulla][hPos][2] = 0.0;
	strmid(HullaInfo[hulla][hKie], "Senki", 0, strlen("Senki"), MAX_PLAYER_NAME);
}
fuggveny HullaTimer()
{
	for(new i=0; i < MAX_HULLA; i++)
	{
		if(!HullaInfo[i][hVan]) continue;

		HullaInfo[i][hIdo] --;
		if(HullaInfo[i][hIdo] <= 0)
		{
			HullaTorol(i);
		}
		else
		{
			/*new string[256];
			Format(string, "(( Holttest ))\n Állapot: %d%% \nOka: %s",Szazalek(HullaInfo[i][hIdo], (HULLAIDO*60)), HalalOka(HullaInfo[i][hOka]));
			UpdateDynamic3DTextLabelText(HullaInfo[i][hSzoveg], COLOR_WHITE, string);*/
		}
	}
}

fuggveny UresPickupHely2()
{
	new id = NINCS;
	for(new i=0; i < MAX_INFOPICKUP; i++)
	{
		if(!PickupInfo[i][pVan])
		{
			id = i;
			break;
		}
	}
	return id;
}
fuggveny UjInfoPickup(Float:X, Float:Y, Float:Z, szoveg[])
{
	new ureshely = UresPickupHely2();
	if(ureshely == NINCS) return false;
	PickupInfo[ureshely][pVan] = true;
	PickupInfo[ureshely][pPickup] = UjPickup(1239, 1, X,Y,Z, NINCS);
	strmid(PickupInfo[ureshely][pTartalom], szoveg, 0,strlen(szoveg), 256);
	return true;
}

fuggveny SendSzefInfo(frakcio,szoveg[])
{
	PlayerForeach(leader)
	{
	    if(PlayerInfo[leader][pLeader] == frakcio && SzefInfok[leader])
	        SendClientMessage(leader,COLOR_LIGHTRED,szoveg);
	}
}
fuggveny AlkatreszSzerel(playerid,kocsi,alkatresz)
{
	CarInfo[kocsi][cAllapot][alkatresz] = 100;
	Cselekves(playerid, "befejezte a szerelést",0);
	Msg(playerid, "Megszerelted az alkatrészt!");
}

stock GetSkinNev(skinid)
{
	new returnt[64];
	switch(skinid)
	{
		case 0		: { format(returnt,sizeof(returnt),  "Carl CJ Johnson"); }
		case 1		: { format(returnt,sizeof(returnt),  "The Truth"); }
		case 2		: { format(returnt,sizeof(returnt),  "Maccer"); }
		case 3		: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 4		: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 5		: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 6		: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 7		: { format(returnt,sizeof(returnt),  "Taxi Driver/Train Driver"); }
		case 8		: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 9		: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 10		: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 11	: { format(returnt,sizeof(returnt),  "Casino Worker"); }
		case 12	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 13	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 14	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 15	: { format(returnt,sizeof(returnt),  "RS Haul Owner"); }
		case 16	: { format(returnt,sizeof(returnt),  "Airport Ground Worker"); }
		case 17	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 18	: { format(returnt,sizeof(returnt),  "Beach Visitor"); }
		case 19	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 20	: { format(returnt,sizeof(returnt),  "Madd Dogg's Manager"); }
		case 21	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 22	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 23	: { format(returnt,sizeof(returnt),  "BMXer"); }
		case 24	: { format(returnt,sizeof(returnt),  "Madd Dogg Bodyguard"); }
		case 25	: { format(returnt,sizeof(returnt),  "Madd Dogg Bodyguard"); }
		case 26	: { format(returnt,sizeof(returnt),  "Mountain Climber"); }
		case 27	: { format(returnt,sizeof(returnt),  "Builder"); }
		case 28	: { format(returnt,sizeof(returnt),  "Drug Dealer"); }
		case 29	: { format(returnt,sizeof(returnt),  "Drug Dealer"); }
		case 30	: { format(returnt,sizeof(returnt),  "Drug Dealer"); }
		case 31	: { format(returnt,sizeof(returnt),  "Farm-Town inhabitant"); }
		case 32	: { format(returnt,sizeof(returnt),  "Farm-Town inhabitant"); }
		case 33	: { format(returnt,sizeof(returnt),  "Farm-Town inhabitant"); }
		case 34	: { format(returnt,sizeof(returnt),  "Farm-Town inhabitant"); }
		case 35	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 36	: { format(returnt,sizeof(returnt),  "Golfer"); }
		case 37	: { format(returnt,sizeof(returnt),  "Golfer"); }
		case 38	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 39	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 40	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 41	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 42	: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 43	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 44	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 45	: { format(returnt,sizeof(returnt),  "Beach Visitor"); }
		case 46	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 47	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 48	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 49	: { format(returnt,sizeof(returnt),  "Snakehead (Da Nang)"); }
		case 50	: { format(returnt,sizeof(returnt),  "Mechanic"); }
		case 51	: { format(returnt,sizeof(returnt),  "Mountain Biker"); }
		case 52	: { format(returnt,sizeof(returnt),  "Mountain Biker"); }
		case 53	: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 54	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 55	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 56	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 57	: { format(returnt,sizeof(returnt),  "Feds"); }
		case 58	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 59	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 60	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 61	: { format(returnt,sizeof(returnt),  "Pilot"); }
		case 62		: { format(returnt,sizeof(returnt),  "Colonel Fuhrberger"); }
		case 63		: { format(returnt,sizeof(returnt),  "Prostitute"); }
		case 64		: { format(returnt,sizeof(returnt),  "Prostitute"); }
		case 65		: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 66		: { format(returnt,sizeof(returnt),  "Pool Player"); }
		case 67		: { format(returnt,sizeof(returnt),  "Pool Player"); }
		case 68		: { format(returnt,sizeof(returnt),  "Priest"); }
		case 69		: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 70		: { format(returnt,sizeof(returnt),  "Scientist"); }
		case 71		: { format(returnt,sizeof(returnt),  "Security Guard"); }
		case 72		: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 73		: { format(returnt,sizeof(returnt),  "Jethro"); }
		case 74		: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 75		: { format(returnt,sizeof(returnt),  "Prostitute"); }
		case 76		: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 77		: { format(returnt,sizeof(returnt),  "Homeless"); }
		case 78		: { format(returnt,sizeof(returnt),  "Homeless"); }
		case 79		: { format(returnt,sizeof(returnt),  "Homeless"); }
		case 80		: { format(returnt,sizeof(returnt),  "Boxer"); }
		case 81		: { format(returnt,sizeof(returnt),  "Boxer"); }
		case 82		: { format(returnt,sizeof(returnt),  "Elvis Wannabe"); }
		case 83		: { format(returnt,sizeof(returnt),  "Elvis Wannabe"); }
		case 84		: { format(returnt,sizeof(returnt),  "Elvis Wannabe"); }
		case 85		: { format(returnt,sizeof(returnt),  "Prostitute"); }
		case 86		: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 87		: { format(returnt,sizeof(returnt),  "Whore"); }
		case 88		: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 89		: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 90		: { format(returnt,sizeof(returnt),  "Whore"); }
		case 91		: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 92		: { format(returnt,sizeof(returnt),  "Beach Visitor"); }
		case 93		: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 94		: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 95		: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 96		: { format(returnt,sizeof(returnt),  "Jogger"); }
		case 97		: { format(returnt,sizeof(returnt),  "Beach Visitor"); }
		case 98		: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 99		: { format(returnt,sizeof(returnt),  "Skeelering"); }
		case 100	: { format(returnt,sizeof(returnt),  "Biker"); }
		case 101	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 102	: { format(returnt,sizeof(returnt),  "Balla"); }
		case 103	: { format(returnt,sizeof(returnt),  "Balla"); }
		case 104	: { format(returnt,sizeof(returnt),  "Balla"); }
		case 105	: { format(returnt,sizeof(returnt),  "Grove Street Families"); }
		case 106	: { format(returnt,sizeof(returnt),  "Grove Street Families"); }
		case 107	: { format(returnt,sizeof(returnt),  "Grove Street Families"); }
		case 108	: { format(returnt,sizeof(returnt),  "Hells Angels"); }
		case 109	: { format(returnt,sizeof(returnt),  "Hells Angels"); }
		case 110	: { format(returnt,sizeof(returnt),  "Hells Angels"); }
		case 111	: { format(returnt,sizeof(returnt),  "The Russian Mafia"); }
		case 112	: { format(returnt,sizeof(returnt),  "The Russian Mafia"); }
		case 113	: { format(returnt,sizeof(returnt),  "The Russian Mafia"); }
		case 114	: { format(returnt,sizeof(returnt),  "Los Surenos"); }
		case 115	: { format(returnt,sizeof(returnt),  "Los Surenos"); }
		case 116	: { format(returnt,sizeof(returnt),  "Los Surenos"); }
		case 117	: { format(returnt,sizeof(returnt),  "Traid"); }
		case 118	: { format(returnt,sizeof(returnt),  "Traid"); }
		case 119	: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 120	: { format(returnt,sizeof(returnt),  "Traid"); }
		case 121	: { format(returnt,sizeof(returnt),  "Da Nang Boy"); }
		case 122	: { format(returnt,sizeof(returnt),  "Da Nang Boy"); }
		case 123	: { format(returnt,sizeof(returnt),  "Da Nang Boy"); }
		case 124	: { format(returnt,sizeof(returnt),  "The Mafia"); }
		case 125	: { format(returnt,sizeof(returnt),  "The Mafia"); }
		case 126	: { format(returnt,sizeof(returnt),  "The Mafia"); }
		case 127	: { format(returnt,sizeof(returnt),  "The Mafia"); }
		case 128	: { format(returnt,sizeof(returnt),  "Farm Inhabitant"); }
		case 129	: { format(returnt,sizeof(returnt),  "Farm Inhabitant"); }
		case 130	: { format(returnt,sizeof(returnt),  "Farm Inhabitant"); }
		case 131	: { format(returnt,sizeof(returnt),  "Farm Inhabitant"); }
		case 132	: { format(returnt,sizeof(returnt),  "Farm Inhabitant"); }
		case 133	: { format(returnt,sizeof(returnt),  "Farm Inhabitant"); }
		case 134	: { format(returnt,sizeof(returnt),  "Homeless"); }
		case 135	: { format(returnt,sizeof(returnt),  "Homeless"); }
		case 136	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 137	: { format(returnt,sizeof(returnt),  "Homeless"); }
		case 138	: { format(returnt,sizeof(returnt),  "Beach Visitor"); }
		case 139	: { format(returnt,sizeof(returnt),  "Beach Visitor"); }
		case 140	: { format(returnt,sizeof(returnt),  "Beach Visitor"); }
		case 141	: { format(returnt,sizeof(returnt),  "Office Worker"); }
		case 142	: { format(returnt,sizeof(returnt),  "Taxi Driver"); }
		case 143	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 144	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 145	: { format(returnt,sizeof(returnt),  "Beach Visitor"); }
		case 146	: { format(returnt,sizeof(returnt),  "Beach Visitor"); }
		case 147	: { format(returnt,sizeof(returnt),  "Director"); }
		case 148	: { format(returnt,sizeof(returnt),  "Secretary"); }
		case 149	: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 150	: { format(returnt,sizeof(returnt),  "Secretary"); }
		case 151	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 152	: { format(returnt,sizeof(returnt),  "Prostitute"); }
		case 153	: { format(returnt,sizeof(returnt),  "Coffee mam'"); }
		case 154	: { format(returnt,sizeof(returnt),  "Beach Visitor"); }
		case 155	: { format(returnt,sizeof(returnt),  "Well Stacked Pizza"); }
		case 156	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 157	: { format(returnt,sizeof(returnt),  "Farmer"); }
		case 158	: { format(returnt,sizeof(returnt),  "Farmer"); }
		case 159	: { format(returnt,sizeof(returnt),  "Farmer"); }
		case 160	: { format(returnt,sizeof(returnt),  "Farmer"); }
		case 161	: { format(returnt,sizeof(returnt),  "Farmer"); }
		case 162	: { format(returnt,sizeof(returnt),  "Farmer"); }
		case 163	: { format(returnt,sizeof(returnt),  "Bouncer"); }
		case 164	: { format(returnt,sizeof(returnt),  "Bouncer"); }
		case 165	: { format(returnt,sizeof(returnt),  "MIB Agent"); }
		case 166	: { format(returnt,sizeof(returnt),  "MIB Agent"); }
		case 167	: { format(returnt,sizeof(returnt),  "Cluckin' Bell"); }
		case 168	: { format(returnt,sizeof(returnt),  "Food Vendor"); }
		case 169	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 170	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 171	: { format(returnt,sizeof(returnt),  "Casino Worker"); }
		case 172	: { format(returnt,sizeof(returnt),  "Hotel Services"); }
		case 173	: { format(returnt,sizeof(returnt),  "Los Santos Rifa"); }
		case 174	: { format(returnt,sizeof(returnt),  "Los Santos Rifa"); }
		case 175	: { format(returnt,sizeof(returnt),  "Los Santos Rifa"); }
		case 176	: { format(returnt,sizeof(returnt),  "Tatoo Shop"); }
		case 177	: { format(returnt,sizeof(returnt),  "Tatoo Shop"); }
		case 178	: { format(returnt,sizeof(returnt),  "Whore"); }
		case 179	: { format(returnt,sizeof(returnt),  "Ammu-Nation Salesmen"); }
		case 180	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 181	: { format(returnt,sizeof(returnt),  "Punker"); }
		case 182	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 183	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 184	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 185	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 186	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 187	: { format(returnt,sizeof(returnt),  "Buisnessman"); }
		case 188	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 189	: { format(returnt,sizeof(returnt),  "Valet"); }
		case 190	: { format(returnt,sizeof(returnt),  "Barbara Schternvart"); }
		case 191	: { format(returnt,sizeof(returnt),  "Helena Wankstein"); }
		case 192	: { format(returnt,sizeof(returnt),  "Michelle Cannes"); }
		case 193	: { format(returnt,sizeof(returnt),  "Katie Zhan"); }
		case 194	: { format(returnt,sizeof(returnt),  "Millie Perkins"); }
		case 195	: { format(returnt,sizeof(returnt),  "Denise Robinson"); }
		case 196	: { format(returnt,sizeof(returnt),  "Farm-Town inhabitant"); }
		case 197	: { format(returnt,sizeof(returnt),  "Farm-Town inhabitant"); }
		case 198	: { format(returnt,sizeof(returnt),  "Farm-Town inhabitant"); }
		case 199	: { format(returnt,sizeof(returnt),  "Farm-Town inhabitant"); }
		case 200	: { format(returnt,sizeof(returnt),  "Farmer"); }
		case 201	: { format(returnt,sizeof(returnt),  "Farmer"); }
		case 202	: { format(returnt,sizeof(returnt),  "Farmer"); }
		case 203	: { format(returnt,sizeof(returnt),  "Karate Teacher"); }
		case 204	: { format(returnt,sizeof(returnt),  "Karate Teacher"); }
		case 205	: { format(returnt,sizeof(returnt),  "Burger Shot Cashier"); }
		case 206	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 207	: { format(returnt,sizeof(returnt),  "Prostitute"); }
		case 208	: { format(returnt,sizeof(returnt),  "Well Stacked Pizza"); }
		case 209	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 210	: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 211	: { format(returnt,sizeof(returnt),  "Shop Staff"); }
		case 212	: { format(returnt,sizeof(returnt),  "Homeless"); }
		case 213	: { format(returnt,sizeof(returnt),  "Weird old man"); }
		case 214	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 215	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 216	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 217	: { format(returnt,sizeof(returnt),  "Shop Staff"); }
		case 218	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 219	: { format(returnt,sizeof(returnt),  "Secretary"); }
		case 220	: { format(returnt,sizeof(returnt),  "Taxi Driver"); }
		case 221	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 222	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 223	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 224	: { format(returnt,sizeof(returnt),  "Sofori"); }
		case 225	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 226	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 227	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 228	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 229	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 230	: { format(returnt,sizeof(returnt),  "Homeless"); }
		case 231	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 232	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 233	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 234	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 235	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 236	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 237	: { format(returnt,sizeof(returnt),  "Prostitute"); }
		case 238	: { format(returnt,sizeof(returnt),  "Prostitute"); }
		case 239	: { format(returnt,sizeof(returnt),  "Homeless"); }
		case 240	: { format(returnt,sizeof(returnt),  "The D.A"); }
		case 241	: { format(returnt,sizeof(returnt),  "Afro-American"); }
		case 242	: { format(returnt,sizeof(returnt),  "Mexican"); }
		case 243	: { format(returnt,sizeof(returnt),  "Prostitute"); }
		case 244	: { format(returnt,sizeof(returnt),  "Whore"); }
		case 245	: { format(returnt,sizeof(returnt),  "Prostitute"); }
		case 246	: { format(returnt,sizeof(returnt),  "Whore"); }
		case 247	: { format(returnt,sizeof(returnt),  "Biker"); }
		case 248	: { format(returnt,sizeof(returnt),  "Biker"); }
		case 249	: { format(returnt,sizeof(returnt),  "Pimp"); }
		case 250	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 251	: { format(returnt,sizeof(returnt),  "Beach Visitor"); }
		case 252	: { format(returnt,sizeof(returnt),  "Naked Valet"); }
		case 253	: { format(returnt,sizeof(returnt),  "Bus Driver"); }
		case 254	: { format(returnt,sizeof(returnt),  "Drug Dealer"); }
		case 255	: { format(returnt,sizeof(returnt),  "Limo Driver"); }
		case 256	: { format(returnt,sizeof(returnt),  "Whore"); }
		case 257	: { format(returnt,sizeof(returnt),  "Whore"); }
		case 258	: { format(returnt,sizeof(returnt),  "Golfer"); }
		case 259	: { format(returnt,sizeof(returnt),  "Golfer"); }
		case 260	: { format(returnt,sizeof(returnt),  "Construction Site"); }
		case 261	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 262	: { format(returnt,sizeof(returnt),  "Taxi Driver"); }
		case 263	: { format(returnt,sizeof(returnt),  "Normal Ped"); }
		case 264	: { format(returnt,sizeof(returnt),  "Clown"); }
		case 265	: { format(returnt,sizeof(returnt),  "Tenpenny"); }
		case 266	: { format(returnt,sizeof(returnt),  "Pulaski"); }
		case 267	: { format(returnt,sizeof(returnt),  "Officer Frank Tenpenny (Crooked Cop)"); }
		case 268	: { format(returnt,sizeof(returnt),  "Dwaine"); }
		case 269	: { format(returnt,sizeof(returnt),  "Melvin Big Smoke Harris"); }
		case 270	: { format(returnt,sizeof(returnt),  "Sweet "); }
		case 271	: { format(returnt,sizeof(returnt),  "Lance Ryder Wilson"); }
		case 272	: { format(returnt,sizeof(returnt),  "Mafia Boss"); }
		case 273	: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 274	: { format(returnt,sizeof(returnt),  "Paramedic"); }
		case 275	: { format(returnt,sizeof(returnt),  "Paramedic"); }
		case 276	: { format(returnt,sizeof(returnt),  "Paramedic"); }
		case 277	: { format(returnt,sizeof(returnt),  "Firefighter"); }
		case 278	: { format(returnt,sizeof(returnt),  "Firefighter"); }
		case 279	: { format(returnt,sizeof(returnt),  "Firefighter"); }
		case 280	: { format(returnt,sizeof(returnt),  "Los Santos Police"); }
		case 281	: { format(returnt,sizeof(returnt),  "Los Santos Police"); }
		case 282	: { format(returnt,sizeof(returnt),  "Las Venturas Police"); }
		case 283	: { format(returnt,sizeof(returnt),  "Country Sheriff"); }
		case 284	: { format(returnt,sizeof(returnt),  "San Andreas Police Dept."); }
		case 285	: { format(returnt,sizeof(returnt),  "S.W.A.T Special Forces"); }
		case 286	: { format(returnt,sizeof(returnt),  "Federal Agents"); }
		case 287	: { format(returnt,sizeof(returnt),  "San Andreas Army"); }
		case 288	: { format(returnt,sizeof(returnt),  "Desert Sheriff"); }
		case 289	: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
		case 290	: { format(returnt,sizeof(returnt),  "Ken Rosenberg"); }
		case 291	: { format(returnt,sizeof(returnt),  "Desert Sheriff"); }
		case 292	: { format(returnt,sizeof(returnt),  "Cesar Vialpando"); }
		case 293	: { format(returnt,sizeof(returnt),  "Jeffrey OG Loc Cross"); }
		case 294	: { format(returnt,sizeof(returnt),  "Wu Zi Mu (Woozie)"); }
		case 295	: { format(returnt,sizeof(returnt),  "Michael Toreno"); }
		case 296	: { format(returnt,sizeof(returnt),  "Jizzy B."); }
		case 297	: { format(returnt,sizeof(returnt),  "Madd Dogg"); }
		case 298	: { format(returnt,sizeof(returnt),  "Catalina"); }
		case 299	: { format(returnt,sizeof(returnt),  "Claude"); }
		default: { format(returnt,sizeof(returnt),  "HIBAS_SKIN"); }
	}
	return returnt;
}

fuggveny Asegit(jatekos)
{
    Animban[jatekos] = 0;
    ClearAnimations(jatekos);
	SetHealth(jatekos, MAXHP);
	HalalAnimPlay(jatekos, false);
	ClearAnim(jatekos);
	UnFreeze(jatekos);
	SetPlayerDrunkLevel(jatekos, 0);
	return true;
}

fuggveny HullaVizsgal(hulla,playerid)
{
	if(!HullaInfo[hulla][hVan]) return false;
	new allapot = Szazalek(HullaInfo[hulla][hIdo], (HULLAIDO*60));
	if(PlayerInfo[playerid][pHelyszinelo] != 0 && allapot >= 20)
	{
		SendFormatMessage(playerid,COLOR_GREEN, "Személy: %s",HullaInfo[hulla][hKie]);
		SendFormatMessage(playerid,COLOR_GREEN, "Gyilkos: %s",HullaInfo[hulla][hMegolte]);
		SendFormatMessage(playerid,COLOR_GREEN, "Halál oka: %s",HalalOka(HullaInfo[hulla][hOka]));
		return true;
	}
	if(allapot >= 40 && allapot <= 100)
	{
	    switch(random(100))
	    {
	        case 30..100:
	        {
	            SendFormatMessage(playerid,COLOR_GREEN, "Személy: %s",HullaInfo[hulla][hKie]);
	            SendFormatMessage(playerid,COLOR_GREEN, "Gyilkos: %s",HullaInfo[hulla][hMegolte]);
	            SendFormatMessage(playerid,COLOR_GREEN, "Halál oka: %s",HalalOka(HullaInfo[hulla][hOka]));
	        }
			default: Msg(playerid, "A hulla állapota túl rossz, nem sikerült megvizsgálni");
	    }
	}
	else if(allapot >= 40 && allapot < 70)
	{
	    switch(random(100))
	    {
	        case 60..100:
	        {
	            SendFormatMessage(playerid,COLOR_GREEN, "Személy: %s",HullaInfo[hulla][hKie]);
	            SendFormatMessage(playerid,COLOR_GREEN, "Gyilkos: %s",HullaInfo[hulla][hMegolte]);
	            SendFormatMessage(playerid,COLOR_GREEN, "Halál oka: %s",HalalOka(HullaInfo[hulla][hOka]));
	        }
	        default: Msg(playerid, "A hulla állapota túl rossz, nem sikerült megvizsgálni");
	    }
	}
	else if(allapot >= 20 && allapot < 40)
	{
	    switch(random(100))
	    {
	        case 80..100:
	        {
	            SendFormatMessage(playerid,COLOR_GREEN, "Személy: %s",HullaInfo[hulla][hKie]);
	            SendFormatMessage(playerid,COLOR_GREEN, "Gyilkos: %s",HullaInfo[hulla][hMegolte]);
	            SendFormatMessage(playerid,COLOR_GREEN, "Halál oka: %s",HalalOka(HullaInfo[hulla][hOka]));
	        }
	        default: Msg(playerid, "A hulla állapota túl rossz, nem sikerült megvizsgálni");
	    }
	}
	else if(allapot >= 1 && allapot < 20)
	{
	    switch(random(100))
	    {
	        case 90..100:
	        {
	            SendFormatMessage(playerid,COLOR_GREEN, "Személy: %s",HullaInfo[hulla][hKie]);
	            SendFormatMessage(playerid,COLOR_GREEN, "Gyilkos: %s",HullaInfo[hulla][hMegolte]);
	            SendFormatMessage(playerid,COLOR_GREEN, "Halál oka: %s",HalalOka(HullaInfo[hulla][hOka]));
	        }
	        default: Msg(playerid, "A hulla állapota túl rossz, nem sikerült megvizsgálni");
	    }
	}
	return true;
}
fuggveny DrogElultet(playerid,haz,tipus)
{
    HouseInfo[haz][hDrogUltetve] = 1;
    HouseInfo[haz][hDrogIdo] = DROGNOVEKEDES_IDO;
    HouseInfo[haz][hDrogTipus] = tipus;
    HouseInfo[haz][hDrogObject] = CreateDynamicObject(3409,1250.13330078,-1703.25781250,6315.0,0.00000000,0.00000000,0.00000000,haz); //object(grassplant) (1)
    Cselekves(playerid, "elszórt pár magot a kertbe",1);
	ClearAnim(playerid);
	HazUpdate(haz,HAZ_DrogRendszer);
	MunkaFolyamatban[playerid] = 0;
    return 1;
}

fuggveny DrogLeszed(playerid,haz)
{
	if(HouseInfo[haz][hDrogTipus] == 1)
	{
		Munkavege(playerid,M_CANNABIS,0);
		Cselekves(playerid, "leszedte a cannabis termését.");
	}
	else if(HouseInfo[haz][hDrogTipus] == 2)
	{
		Munkavege(playerid,M_CSERJE,0);
		Cselekves(playerid, "leszedte a cserje termését.");
	}
	else if(HouseInfo[haz][hDrogTipus] == 3)
	{
		Munkavege(playerid,M_MAK,0);
		Cselekves(playerid, "leszedte a mák termését.");
	}
	else
		SendFormatMessage(playerid,COLOR_LIGHTRED, "Hiba, a típus ismeretlen: %d!",HouseInfo[haz][hDrogTipus]);

	DestroyDynamicObject(HouseInfo[haz][hDrogObject]);
	HouseInfo[haz][hDrogObject] = NINCS;
	HouseInfo[haz][hDrogUltetve] = 0;
	ClearAnim(playerid);

	HazUpdate(haz,HAZ_DrogRendszer);
	MunkaFolyamatban[playerid] = 0;
	return 1;
}
fuggveny UltetvenyTimer()
{
	for(new i=0; i < MAXHAZ; i++)
	{
		if(HouseInfo[i][hDrogUltetve] == 0 || HouseInfo[i][hDrogIdo] == 0) continue;

		new Float:plusz, Float:DrogPos[3],Float:kulonbseg;
		GetDynamicObjectPos(HouseInfo[i][hDrogObject],DrogPos[0],DrogPos[1],DrogPos[2]);
		kulonbseg = (6317.29589844-6315.0);
		plusz = (kulonbseg / DROGNOVEKEDES_IDO);
        if(HouseInfo[i][hDrogIdo] == 1)
        {
            HouseInfo[i][hDrogIdo] = 0;

            SetDynamicObjectPos(HouseInfo[i][hDrogObject],DrogPos[0],DrogPos[1],6317.29589844);
            //ProxDetector2(30.0, "* Kinõtt egy növény a közelben, mostmár szedhetõ!", DrogPos[0],DrogPos[1],DrogPos[2],COLOR_GREEN, COLOR_GREEN, COLOR_GREEN, COLOR_GREEN, COLOR_GREEN);
			//printf("Drog %d: Kinõtt!",i);
	    }
		else
		{
			HouseInfo[i][hDrogIdo] --;
			SetDynamicObjectPos(HouseInfo[i][hDrogObject],DrogPos[0],DrogPos[1],DrogPos[2]+plusz);
			//printf("Drog %d: %d!",HouseInfo[i][hDrogIdo]);
		}
	}
}

fuggveny TuningFelrak(playerid,kocsi,komponens)
{
    //#define DEBUG
	if(komponens >= 1008 && komponens <= 1010 && IsInvalidNosVehicle(kocsi) || !IsVehicleUpgradeCompatible(GetVehicleModel(kocsi), komponens))
	{	
		if(Logged(playerid) && playerid != NINCS)
			Msg(playerid, "Ez az alkatrész nem kompatibilis ezen jármû típussal!");
			
		return false;
	}
    AddVehicleComponent(kocsi, komponens);
	new vs = IsAVsKocsi(kocsi);
	if(vs == NINCS) return false;
    if(vs != NINCS)
    {
	    new tipus = GetVehicleComponentType(komponens);
	    CarInfo[vs][cMod][tipus] = komponens;
		CarUpdate(vs, CAR_Tuning);
		return true;
	}
	return false;
}

fuggveny TuningBetolt(kocsi)
{
	new vs = IsAVsKocsi(kocsi);
	if(vs == NINCS) return false;
	for(new i=0; i < 14; i++)
 	{
  		if(CarInfo[vs][cMod][i] == 0) continue;

        //AddVehicleComponent(kocsi,CarInfo[vs][cMod][i]);
        TuningFelrak(NINCS,kocsi,CarInfo[vs][cMod][i]);
		DebugMessage("TuningBetolt:\nkocsi: %d\nv-s: %d\nc-slot:%d", kocsi, vs, i);
   }
   return true;
}

fuggveny SQL_NevvaltasUpdate(reginev[], ujnev[])
{
	new kocsiupdated = 0, hazupdated = 0;
	for(new i=0; i < MAXVSKOCSI; i++)
	{
		if(CarInfo[i][Van] == 0) continue;
		if(egyezik(CarInfo[i][cOwner], reginev))
		{
			strmid(CarInfo[i][cOwner], ujnev, 0, strlen(ujnev), MAX_PLAYER_NAME+1);
			kocsiupdated ++;
		}
	}
	for(new h=0; h < MAXHAZ; h++)
	{
	    if(HouseInfo[h][Van] == 0) continue;
	    if(egyezik(HouseInfo[h][hOwner],reginev))
	    {
			strmid(HouseInfo[h][hOwner], ujnev, 0,strlen(ujnev), MAX_PLAYER_NAME+1);
			hazupdated ++;
		}
	}
	return 1;
}

stock IsBarat(playerid,player)
{
	new baratid = PlayerSQLID(player);
	new obarat = false;
	for(new i = 0; i < MAX_ISMEROS; i++)
	{
	    if(PlayerInfo[playerid][pIsmeros][i] == baratid)
		{
		    obarat = true;
		    break;
		}
	}
	return obarat;
}
stock GarazsnalVan(playerid)
{
	new garazs = NINCS;
	for(new i = 0; i < MAXHAZ; i++)
	{
	    if(HouseInfo[i][hGarazs] == 1 && PlayerToPoint(5.0,playerid, HouseInfo[i][hGarazsPoz][0],HouseInfo[i][hGarazsPoz][1],HouseInfo[i][hGarazsPoz][2]))
	    {
	        garazs = i;
	        break;
	    }
	}
	return garazs;
}

stock UtzarTorol(playerid)
{
    for(new i = 0; i < sizeof(UtzarInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 5.0, UtzarInfo[i][sX], UtzarInfo[i][sY], UtzarInfo[i][sZ]))
        {
  	        if(UtzarInfo[i][sCreated] == 1)
            {
                UtzarInfo[i][sCreated] = 0;
                UtzarInfo[i][sX] = 0.0;
                UtzarInfo[i][sY] = 0.0;
                UtzarInfo[i][sZ] = 0.0;
                DestroyDynamicObject(UtzarInfo[i][sObject]);
                return 1;
  	        }
  	    }
  	}
    return 0;
}

stock UtzarLerak(Object,Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(UtzarInfo); i++)
  	{
  	    if(UtzarInfo[i][sCreated] == 0)
  	    {
            UtzarInfo[i][sCreated] = 1;
            UtzarInfo[i][sX] = x;
            UtzarInfo[i][sY] = y;
            UtzarInfo[i][sZ] = z-0.7;
            UtzarInfo[i][sObject] = CreateDynamicObject(Object, x, y, z-0.9, 0, 0, Angle);
	        return 1;
  	    }
  	}
  	return 0;
}

stock UtzarTorol_Mind(playerid)
{
    for(new i = 0; i < sizeof(UtzarInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 100, UtzarInfo[i][sX], UtzarInfo[i][sY], UtzarInfo[i][sZ]))
        {
	  	    if(UtzarInfo[i][sCreated] == 1)
	  	    {
	  	        UtzarInfo[i][sCreated] = 0;
	            UtzarInfo[i][sX] = 0.0;
	            UtzarInfo[i][sY] = 0.0;
	            UtzarInfo[i][sZ] = 0.0;
	            DestroyDynamicObject(UtzarInfo[i][sObject]);
	  	    }
  	    }
	}
    return 0;
}
stock replaceChar(strSrc[], chWhat, chWith)
{
    for(new i; strSrc[i] != EOS; ++i)
    {
        if(strSrc[i] == chWhat)
        {
            strSrc[i] = chWith;
        }
    }
}
LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}

stock HolVan(playerid)
{
	#define LS 0
	#define LV 1
	if(IsPlayerInDynamicArea(playerid,Areak[Las_Venturas]))
		return SF;
	else
		return LS;

	return NINCS;
}
//-------------------------------------------------------------------------------------------------------------------------------
stock timec_egyszeru(timestamp, compare = -1)
{
    if(compare == -1)
        compare = gettime();
        
    return (timestamp > compare) ? timestamp - compare : compare - timestamp;
}
stock timec(timestamp, compare = -1)
{
    if(compare == -1)
	{
        compare = gettime();
    }
    new
        n,
        Float:d = (timestamp > compare) ? timestamp - compare : compare - timestamp,
        returnstr[32];
    if(d < 60)
	{
        format(returnstr, sizeof(returnstr), "%d másodperc",d);
        return returnstr;
    }
	else if(d < 3600)
	{
        n = floatround(floatdiv(d, 60.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "perc");
    }
	else if(d < 86400)
	{
        n = floatround(floatdiv(d, 3600.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "óra");
    }
	else if(d < 2592000)
	{
        n = floatround(floatdiv(d, 86400.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "nap");
    }
	else if(d < 31536000)
	{
        n = floatround(floatdiv(d, 2592000.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "hónap");
    }
	else
	{
        n = floatround(floatdiv(d, 31536000.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "év");
    }
	format(returnstr, sizeof(returnstr), "%d %s", n, returnstr);
	
    return returnstr;
}

stock SeeRPGKeypad(playerid, keypadid, jelszo[])
{
	if(Admin(playerid))
	{
		PlayerTextFormat(playerid, "Mivel %s vagy, látod a jelszót: %s",AdminSzint(playerid), jelszo);
		Msg(playerid, PlayerText[playerid], COLOR_ADMIN);
	}
	CreateKeypad(playerid, keypadid, jelszo);
	DebugMessage("CreateKeypad(%d, %d, %s);", playerid, keypadid, jelszo);
	return 1;
}

fuggveny LSBankLift(felle[])
{
	if(LSBank_Lift_Statusz != LSBANK_LIFT_STATUSZ_NINCS) return false;
	if(egyezik(felle, "fel"))
	{
	    MoveLSBankLiftAjto("lent", "zár");
	    SetTimerEx("MoveLSBankLift",1000, false, "d",0);
	    LSBank_Lift_Statusz = LSBANK_LIFT_STATUSZ_FEL;
	}
	else if(egyezik(felle, "le"))
	{
	    MoveLSBankLiftAjto("fent", "zár");
	    SetTimerEx("MoveLSBankLift",1000, false, "d",1);
	    LSBank_Lift_Statusz = LSBANK_LIFT_STATUSZ_LE;
	}
	return true;
}
fuggveny MoveLSBankLift(felle)
{
	if(felle == 0)//Fel
	{
	    MoveDynamicObject(LSBank_Lift_Kabin,237.7342, 208.1600, 1474.7986,5.0);
	}
	else if(felle == 1)//Le
	{
	    MoveDynamicObject(LSBank_Lift_Kabin,237.7342, 208.1200, 1418.6586,5.0);
	}
}
fuggveny MoveLSBankLiftAjto(fentlent[],nyitzar[])
{
	if(egyezik(fentlent, "fent"))
	{
	    if(egyezik(nyitzar, "zar") || egyezik(nyitzar, "zár"))
	    {
	        MoveDynamicObject(LSBank_Lift_Ajtok_Fent[0],241.5906, 208.2756, 1474.7677,1.5);
	        MoveDynamicObject(LSBank_Lift_Ajtok_Fent[1],241.6022, 208.3172, 1474.7677,1.5);
	    }
	    else if(egyezik(nyitzar, "nyit"))
		{
		    MoveDynamicObject(LSBank_Lift_Ajtok_Fent[0],241.5906, 206.4556, 1474.7677,1.5);
			MoveDynamicObject(LSBank_Lift_Ajtok_Fent[1],241.5822, 209.7572, 1474.7677,1.5);
		}
	}
	else if(egyezik(fentlent, "lent"))
	{
	    if(egyezik(nyitzar, "zar") || egyezik(nyitzar, "zár"))
	    {
	        MoveDynamicObject(LSBank_Lift_Ajtok_Lent[0],241.5706, 208.2756, 1418.7277,1.5);
			MoveDynamicObject(LSBank_Lift_Ajtok_Lent[1],241.5839, 208.2567, 1418.6277,1.5);
	    }
	    else if(egyezik(nyitzar, "nyit"))
		{
            MoveDynamicObject(LSBank_Lift_Ajtok_Lent[0],241.5706, 206.5956, 1418.7277,1.5);
			MoveDynamicObject(LSBank_Lift_Ajtok_Lent[1],241.5839, 209.7367, 1418.6277,1.5);
		}
	}
}
fuggveny GenerateLSBankPW()
{
	format(LSBank_Jelszo[0],12, "%d%d%d%d",random(9),random(9),random(9),random(9));
	format(LSBank_Jelszo[1],12, "%d%d%d%d",random(9),random(9),random(9),random(9));
	return 1;
}
fuggveny BankrablasKapu(playerid, lepes)
{
	if(lepes == 0)
	{
	    Cselekves(playerid, "csatlakoztatja a laptopját a számítógépre...",1);
	    SetTimerEx("BankrablasKapu",10000, false, "dd",playerid,1);
	}
	if(lepes == 1)
	{
	    Cselekves(playerid, "elkezdi betáplálni a kapu nyitásához szükséges algoritmust...",1);
	    SetTimerEx("BankrablasKapu",10000, false, "dd",playerid,2);
	}
	if(lepes == 2)
	{
	    Cselekves(playerid, "leüti az ENTER billentyût",1);
	    BankrablasKapu(playerid,3);
	}
	if(lepes == 3)
	{
		switch(random(100))
		{
		    case 0..60:
		    {
		        SendClientMessage(playerid,COLOR_LIGHTBLUE, "Siker, az elsõ biztonsági ajtó kilõve! Mehettek a széfhez!");
				SetDynamicObjectPos(LSBank_FoAjto,247.00, 207.61, 1473.97);
				SetDynamicObjectRot(LSBank_FoAjto,0.00, 0.00, 10.00);
		        
		    }
		    default:
		    {
		        Msg(playerid, "Hopp, ez sajnos nem jött össze. Talán ha mégegyszer megpróbálod... :) ");
			}
		}
		MunkaFolyamatban[playerid] = 0;
		TogglePlayerControllable(playerid, true);
		ClearAnim(playerid);
	}
}
fuggveny BankrablasJelszo(playerid,lepes)
{
	if(lepes == 0)
	{
	    Cselekves(playerid, "csatlakoztatja a laptopját a számítógépre...",1);
	    SetTimerEx("BankrablasJelszo",10000, false, "dd",playerid,1);
	}
	if(lepes == 1)
	{
	    Cselekves(playerid, "belép a bank biztonsági rendszerébe...",1);
	    SetTimerEx("BankrablasJelszo",10000, false, "dd",playerid,2);
	}
	if(lepes == 2)
	{
	    Cselekves(playerid, "elkezdi megfejteni a jelszavakat...",1);
	    SetTimerEx("BankrablasJelszo",10000, false, "dd",playerid,3);
	}
	if(lepes == 3)
	{
	    Cselekves(playerid, "leüti az ENTER billentyût",1);
	    BankrablasJelszo(playerid,4);
	}
	if(lepes == 4)
	{
		switch(random(100))
		{
		    case 0..60:
		    {
		        SendClientMessage(playerid,COLOR_LIGHTBLUE, "Bank biztonsági jelszavak:");
          		SendFormatMessage(playerid,COLOR_YELLOW, "-> Széf - %s",LSBank_Jelszo[1]);
          		SendFormatMessage(playerid,COLOR_YELLOW, "-> Széf elõtti biztonsági ajtó - %s",LSBank_Jelszo[0]);
		    }
		    default:
		    {
		        Msg(playerid, "Hopp, ez sajnos nem jött össze. Talán ha mégegyszer megpróbálod... :) ");
			}
		}
		TogglePlayerControllable(playerid, true);
		ClearAnim(playerid);
		MunkaFolyamatban[playerid] = 0;
	}
}

stock IsStreamAttachedToVehicle( kocsi ) {
    return ( SeeRPGVehicleStream[kocsi][gStreamEnabled] == 1 ) ? 1 : 0;
}

stock AttachStreamToVehicle(kocsi, Float:range, url[])
{
    format(SeeRPGVehicleStream[kocsi][gStreamURL], 128, url);
    SeeRPGVehicleStream[kocsi][gStreamEnabled] = 1;
    SeeRPGVehicleStream[kocsi][gStreamRange] = range;
    return 1;
}

stock StopVehicleStream(kocsi)
{
    SeeRPGVehicleStream[kocsi][gStreamURL] = "-";
    SeeRPGVehicleStream[kocsi][gStreamEnabled] = 0;
    SeeRPGVehicleStream[kocsi][gStreamRange] = 0;
}

stock RemoveVehicleComponents(kocsi)
{
	new componentid;
	new vs = IsAVsKocsi(kocsi);
	
	for(new i; i < 14; i++)
	{
	    componentid = GetVehicleComponentInSlot(kocsi, i);
	    if(componentid != 0) {
	        RemoveVehicleComponent(kocsi, componentid);
		}
		if(vs != NINCS) {
			CarInfo[vs][cMod][i] = 0;
		}
	}	
	if(CarInfo[vs][cNeon] > 0)
	{
		CarInfo[vs][cNeon] = 0;
		KocsiNeonBe[vs] = 0;
	}	
	if(vs != NINCS) 
	{
		CarUpdate(vs, CAR_Tuning);
		CarUpdate(vs, CAR_Neon);
	}
	return 1;
}
fuggveny RendorFigyelmeztetes()
{
	SendRadioMessage(LMUNKA_LSPD, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Bank széf ajtaja huzamosabb ideje nyitva van ***", true);
	SendRadioMessage(LMUNKA_FBI, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Bank széf ajtaja huzamosabb ideje nyitva van ***", true);
	SendRadioMessage(LMUNKA_KATONA, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Bank széf ajtaja huzamosabb ideje nyitva van ***", true);
	SendRadioMessage(LMUNKA_NAV, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Bank széf ajtaja huzamosabb ideje nyitva van ***", true);
	PlayerForeach(x)
	{
		if(!IsACop(x) && PlayerInfo[x][pSWATTag] > 0)
			SendClientMessage(x, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Bank széf ajtaja huzamosabb ideje nyitva van ***");
		else if(!IsACop(x) && PlayerInfo[x][pNIDTag] > 0)
			SendClientMessage(x, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Bank széf ajtaja huzamosabb ideje nyitva van ***");
		else if(!IsACop(x) && PlayerInfo[x][pSWATTag] > 0 && PlayerInfo[x][pNIDTag] > 0)
			SendClientMessage(x, TEAM_BLUE_COLOR, "*** Riasztás! A Los Santos-i Bank széf ajtaja huzamosabb ideje nyitva van ***");
	}
}

fuggveny KocsiUpdate()
{
	new trailer;
	VehicleForeach(k)
	{
	    trailer = GetVehicleTrailer(k);
	    GetVehicleHealth(k, iNewKocsiHP[k]);
		if(iNewKocsiHP[k] != iKocsiHP[k])
		{
		    OnVehicleHealthChange(k, iNewKocsiHP[k], iKocsiHP[k]);
		    iKocsiHP[k] = iNewKocsiHP[k];
		}
		if(iTrailer[k] != 0 && trailer == 0)
		{
		    OnTrailerDetach(k,trailer);
			iTrailer[k] = trailer;
		}
		else if(iTrailer[k] == 0 && trailer != 0)
		{
		    OnTrailerAttach(k,trailer);
			iTrailer[k] = trailer;
		}
	}
}

stock GetVehicleNumberPlate(kocsi)
{
	new str[32],vs;
	vs = IsAVsKocsi(kocsi);
	
	if(vs == NINCS) 
	{
		Format(str, "U%dE", vs);
	} else {
	    format(str,32, "%s",CarInfo[vs][cRendszam]);
	}
	
	return str;
}

stock MuszerFalUpdateAllPlayer()
{
	PlayerForeach(p) { MuszerFalUpdate(p); }
}

fuggveny Timer_NegyedOra()
{
	//UCPChecker();
	//RandomTuz();
}

fuggveny Timer_30000()
{
    //CarCheck();
    PayDay();
}

fuggveny Timer_5000()
{
    AfkChecker();
	PingChecker();
}

fuggveny Timer_3000()
{
    CustomPickups();
}

fuggveny Timer_2000()
{
    TeleTimer();
    //MunkaTimer();
	Drog();
    AutomataSzerverNev();
    StreamVehicleObjects();
    StreamSeeRPGObjects();
	AJelszoUpdate();
}

fuggveny Timer_1000()
{
	MuszerFalUpdateAllPlayer();
    OtherTimer();
    EgyebTimer();
    SetPlayerUnjail();
    SecTimer();
    //LoterTimer();
    KocsiUpdate();
	//RadioChecker();
}

fuggveny EtvagyNoveles()
{
	PlayerForeach(x)
	{
		if(!IsAdminSzolis(x, NINCS) && AFK[x] != 1 && PlayerInfo[x][pJailed] < 1)
		{
			new Float:ehseg = PlayerInfo[x][pEhseg];
			
			if(ehseg < 5) // bugol a progressbar ha < 5-nél és > 0-nál
				PlayerInfo[x][pEhseg] = 5;
			else
				PlayerInfo[x][pEhseg] += 1;
			
			new Float:health;
			if(ehseg >= 85.0)
			{
				if(GetPlayerHealth(x, health) > 20)
					GiveHealth(x, - 15.0);
			}			
			if(/*ehseg == 80.0 || */ehseg == 85.0 || ehseg == 90.0)
			{
				Msg(x, "Nagyon éhes vagy ezért kezd leesni a vércukrod!");
				SetPlayerDrunkLevel(x, 50000);
			}
			if(ehseg >= 98.0)
			{
				if(ehseg == 98.0)
				{
					//Msg(x, "Rosszul lettél mivel leesett a vércukrod!");
					Cselekves(x, "összeesett mivel alacsony a vércukor szintje");					
					if(GetPlayerHealth(x, health) > 100)
						GiveHealth(x, - 80.0);
				}
				AnimbaRak(x, TIPUS_AJULAS, false);
			}
			if(ehseg == 100.0)
			{
				Msg(x, "Elájultál mivel leesett a vércukrod!");
				Cselekves(x, "elájult mivel leesett a vércukor szintje a minimum érték alá");
				Feketeseg(x, true, 30000);
				SetPlayerHealth(x, 5);
			}
			if(ehseg > 100.0)
			{
				SetPlayerHealth(x, 1);
			}
			if(ehseg > 102.0)
			{
				Feketeseg(x, false, 0);
				SetPlayerHealth(x, 0);
			}
		}
	}
	return 1;
}

fuggveny SzomjusagNoveles()
{
	PlayerForeach(x)
	{
		if(!IsAdminSzolis(x, NINCS) && AFK[x] != 1 && PlayerInfo[x][pJailed] < 1)
		{
			new Float:szomj = PlayerInfo[x][pSzomjusag];
			
			if(szomj < 5.0) // bugol a progressbar ha < 5-nél és > 0-nál
				PlayerInfo[x][pSzomjusag] = 5.0;
			else
				PlayerInfo[x][pSzomjusag] += 1.0;
			
			new Float:health;
			if(szomj >= 85.0)
			{
				if(GetPlayerHealth(x, health) > 20)
					GiveHealth(x, - 15.0);
			}			
			if(/*ehseg == 80.0 || */szomj == 85.0 || szomj == 90.0)
			{
				Msg(x, "Kezdesz nagyon szomjas lenni!");
				SetPlayerDrunkLevel(x, 50000);
			}
			if(szomj >= 98.0)
			{
				if(szomj == 98.0)
				{
					Cselekves(x, "összeesett mivel kezd kiszáradni");					
					if(GetPlayerHealth(x, health) > 100)
						GiveHealth(x, -80.0);
				}
				AnimbaRak(x, TIPUS_AJULAS, false);
			}
			if(szomj == 100.0)
			{
				Msg(x, "Elájultál mivel kiszáradtál!");
				Cselekves(x, "elájult mivel kiszáradt");
				Feketeseg(x, true, 30000);
				SetPlayerHealth(x, 5);
			}
			if(szomj > 100.0)
			{
				Feketeseg(x, false, 0);
				SetPlayerHealth(x, 1);
			}
			if(szomj > 102.0)
			{
				Feketeseg(x, false, 0);
				SetPlayerHealth(x, 0);
			}
		}
	}
	return 1;
}

fuggveny Kezdo3DChecker()
{
	PlayerForeach(x)
	{
		if(KezdoJatekos(x) AND !IsAdminSzolis(x, NINCS))
		{
			new kezdo[72];
			Format(kezdo, "{%s}[KEZDÕ]\n{FFFFFF}Játszott órák: {%s}%d", COLOR_MSG, COLOR_MSG, JatszottOraja(x));
			DestroyDynamic3DTextLabel(Kezdo3D[x]);
			//Kezdo3D[x] = CreateDynamic3DTextLabel(kezdo, COLOR_WHITE, 0.0, 0.0, 0.5, 40.0, x, INVALID_VEHICLE_ID, 0);
			Kezdo3D[x] = CreateDynamic3DTextLabel(kezdo, COLOR_WHITE, 0.0, 0.0, -0.6, 40.0, x, INVALID_VEHICLE_ID, 0);
		}
		else
		{
			DestroyDynamic3DTextLabel(Kezdo3D[x]);
		}
	}
	return 1;
}

fuggveny StartRadio(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
		new KocsiID = GetPlayerVehicleID(playerid);
	    if(MP3Megy[playerid] == 0)
	    {
    		if(egyezik(KocsiZeneURL[KocsiID], NINCSKOCSIZENE_URL))
			{
				StopAudioStreamForPlayer(playerid);
			}
			else
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, KocsiZeneURL[KocsiID]);
			}
    	}
    }
    return 1;
}

fuggveny StartRadioMP4(playerid)
{
	PlayAudioStreamForPlayer(playerid, ZeneURL[MpZene[playerid]]);
    return 1;
}

fuggveny IsAdmin(playerid)
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	    return 1;
	else
		return 0;
}

stock Admin(playerid, szint = 1)
{
	if(IsFejleszto(playerid)) return 1;
	if(PlayerInfo[playerid][pAdmin] >= szint AND AdminJelszoCheckelve[playerid]) return 1;
	return 0;
}

/* ############################################################################################################ */
stock AdminMsg(playerid, szoveg[]) { return Msg(playerid, szoveg, COLOR_ADMIN); }
//stock AdminCMD(szoveg[]) { SendFormatMessageToAll(COLOR_PIROS, "{FF6347}AdmCmd: %s", szoveg); return 1; }
stock AdminCMD(const szoveg[]) { SendFormatMessageToAll(0xFF634700, "AdmCmd: %s", szoveg); return 1; }
/* ############################################################################################################ */

stock GetPlayerSQLID(playerid)
{
	new szoveg[48];
	Format(szoveg, "(UID: #%d)", PlayerSQLID(playerid));
	return szoveg;
}

stock ValasztoVonal(cim[])
{
	new szoveg[128];
	Format(szoveg, "{FFFFFF}[ {%s}%s{FFFFFF} ]", COLOR_MSG, cim);
	return szoveg;
}

stock AdminChatString(szoveg[], minadminszint = 1)
{
	PlayerForeach(x)
	{
		if(Admin(x, minadminszint))
		{
			SendFormatMessage(x, COLOR_LIGHTBLUE, "{FF0000}STAFF: {00BFFF}%s", szoveg);
		}
	}
}

#if defined KELLAJTO3D
	fuggveny UpdateAjto3D(ajtoszama)
	{
		if(Ajtok[ajtoszama][Van] == 1)
		{		
			new pickupid = Ajtok[ajtoszama][PickupID];
			if(!IsValidPickupObject(pickupid))
			{
				pickupid = 1239;
				Ajtok[ajtoszama][PickupID] = pickupid;
			}
			
			DestroyDynamicPickup(Ajtok[ajtoszama][PickupBent]);
			Ajtok[ajtoszama][PickupBent] = CreateDynamicPickup(pickupid, 14, Ajtok[ajtoszama][BeX], Ajtok[ajtoszama][BeY], Ajtok[ajtoszama][BeZ], 0);
			
			DestroyDynamicPickup(Ajtok[ajtoszama][PickupKint]);
			Ajtok[ajtoszama][PickupKint] = CreateDynamicPickup(pickupid, 14, Ajtok[ajtoszama][KiX], Ajtok[ajtoszama][KiY], Ajtok[ajtoszama][KiZ], 0);
		}
		return 1;
	}
#endif

fuggveny SegitTimeUP(playerid,kit)
{
	GiveHealth(kit,-10.0);
	new Float:ujhp;
	GetPlayerHealth(kit,ujhp);
	if(ujhp <= 0)
	{
		if(LMT(playerid, LMUNKA_MENTO) && OnDuty[playerid])
		{
			Msg(playerid, "Rosszul jártál el a segítés során, és a páciens életét vesztette, ");
			Msg(playerid, "Ezért $5 levontunk a fizetésedbõl!");
			PlayerInfo[playerid][pPayCheck] -= 5;
		}
		Animban[kit] = 0;
		ClearAnim(playerid);
		UnFreeze(playerid);
		ClearAnim(kit);
		UnFreeze(kit);
		MunkaFolyamatban[playerid] = 0;
		Segitik[kit] = 0;
		KitSegit[playerid] = NINCS;
		SegitBillentyu[playerid] = NINCS;
		SegitStep[playerid] = NINCS;
		Megnyomta[playerid] = false;
		SetPlayerDrunkLevel(kit, 0);
	}
	Msg(playerid, "Nem nyomtál billentyût, ezért akit segítesz, veszített 10HP-t!");
	new kovibillentyu = random(sizeof(BillentyuInfo));
	SegitBillentyu[playerid] = BillentyuInfo[kovibillentyu][0][0];
	SendFormatMessage(playerid,COLOR_YELLOW, "(( Nyomd meg a(z) \"%s\"billentyût! ))", BillentyuInfo[kovibillentyu][1]);
	SegitTimer[playerid] = SetTimerEx("SegitTimeUP", Rand(SEGIT_TIMEUP_MIN,SEGIT_TIMEUP_MAX), false, "ii", playerid, kit);
	Cselekves(playerid, "elrontott valamit az ellátás közben, ezért a sérült állapota romlott.");
	Megnyomta[playerid] = false;
	return 1;
}
fuggveny Felsegit(playerid, kit, billentyu)
{
	if(ProxDetectorS(3.0, playerid, kit) && Logged(kit))
	{
	    if(Animban[kit] != 0)
	    {
			//SendFormatMessage(playerid,COLOR_WHITE, "%d",billentyu);
	        if(billentyu == SegitBillentyu[playerid])
			{
				if(SegitStep[playerid] > 0)
				{
					new kovibillentyu = random(sizeof(BillentyuInfo));
					SegitBillentyu[playerid] = BillentyuInfo[kovibillentyu][0][0];
					SendClientMessage(playerid,COLOR_GREEN, "(( Jót nyomtál! ))");
					SendFormatMessage(playerid,COLOR_YELLOW, "(( Nyomd meg a(z) \"%s\"billentyût! ))", BillentyuInfo[kovibillentyu][1]);
					SegitStep[playerid] --;
					SegitTimer[playerid] = SetTimerEx("SegitTimeUP", Rand(SEGIT_TIMEUP_MIN,SEGIT_TIMEUP_MAX), false, "ii", playerid, kit);
					Megnyomta[playerid] = false;
					return true;
				}
				else
				{
					Msg(playerid, "Jót nyomtál! Sikeresen elláttad a sebeit és felsegítetted!");
					Animban[kit] = 0;
					PlayerInfo[kit][pEhseg] -= 10;
					ClearAnim(playerid);
					UnFreeze(playerid);
					ClearAnim(kit);
					HalalAnimPlay(kit, false);
					UnFreeze(kit);
					MunkaFolyamatban[playerid] = 0;
	   				Segitik[kit] = 0;
					KitSegit[playerid] = NINCS;
					SegitBillentyu[playerid] = NINCS;
					SegitStep[playerid] = NINCS;
					Megnyomta[playerid] = false;
					SetPlayerDrunkLevel(kit, 0);
					if(LMT(playerid, LMUNKA_MENTO) && OnDuty[playerid])
					{
						PlayerInfo[playerid][pPayCheck] += 5;
						FrakcioInfo[LMUNKA_MENTO][fPenz] += 5;
					}
					return true;
				}
			}
			else
			{
				Cselekves(playerid, "elrontott valamit az ellátás közben, ezért a sérült állapota romlott.");
				GiveHealth(kit, -10.0);
				new Float:ujhp;
				GetPlayerHealth(kit,ujhp);
				if(ujhp <= 0)
				{
					if(LMT(playerid, LMUNKA_MENTO) && OnDuty[playerid])
					{
						Msg(playerid, "Rosszul jártál el a segítés során, és a páciens életét vesztette, ");
						Msg(playerid, "Ezért $5-t levontunk a fizetésedbõl!");
						PlayerInfo[playerid][pPayCheck] -= 5;
					}
					Animban[kit] = 0;
					ClearAnim(playerid);
					UnFreeze(playerid);
					ClearAnim(kit);
					UnFreeze(kit);
					MunkaFolyamatban[playerid] = 0;
	   				Segitik[kit] = 0;
					KitSegit[playerid] = NINCS;
					SegitBillentyu[playerid] = NINCS;
					SegitStep[playerid] = NINCS;
					Megnyomta[playerid] = false;
					SetPlayerDrunkLevel(kit, 0);
				}
				Msg(playerid, "Elrontottad, ezért akit segítesz, veszített 10HP-t!");
				new kovibillentyu = random(sizeof(BillentyuInfo));
				SegitBillentyu[playerid] = BillentyuInfo[kovibillentyu][0][0];
				SendFormatMessage(playerid,COLOR_YELLOW, "(( Nyomd meg a(z) \"%s\"billentyût! ))", BillentyuInfo[kovibillentyu][1]);
				SegitTimer[playerid] = SetTimerEx("SegitTimeUP", Rand(SEGIT_TIMEUP_MIN,SEGIT_TIMEUP_MAX), false, "ii", playerid, kit);
				Megnyomta[playerid] = false;
				return false;
			}
		}
	}
	else
	{
		ClearAnim(playerid);
		UnFreeze(playerid);
	    return false;
	}
	return true;
}

fuggveny UtJavitTimeUP(playerid)
{
	MunkaFolyamatban[playerid] = 0;
	UtJavitBillentyu[playerid] = NINCS;
	UtJavitStep[playerid] = NINCS;
	Msg(playerid, "Na ez most nem sikerült, próbáld meg még egyszer");
	ClearAnim(playerid);
	UnFreeze(playerid);
	return 1
}
fuggveny UtJavit(playerid,billentyu)
{
	if(billentyu == UtJavitBillentyu[playerid])
	{
		if(UtJavitStep[playerid] > 0)
		{
			new kovibillentyu = random(sizeof(BillentyuInfo));
			UtJavitBillentyu[playerid] = BillentyuInfo[kovibillentyu][0][0];
			SendClientMessage(playerid, COLOR_GREEN, "(( Jót nyomtál! ))");
			SendFormatMessage(playerid, COLOR_YELLOW, "(( Nyomd meg a(z) \"%s\"billentyût! ))", BillentyuInfo[kovibillentyu][1]);
			UtJavitStep[playerid] --;
			UtJavitTimer[playerid] = SetTimerEx("UtJavitTimeUP", Rand(UTJAVIT_TIMEUP_MIN,UTJAVIT_TIMEUP_MAX), false, "ii", playerid);
			return true;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "(( Jót nyomtál! Sikeresen kijavítottad az úthibát! Mehetsz a következõhöz! ))");
			new mennyitkap = Rand(7500, 15000);
			GiveMoney(playerid, mennyitkap);
			new string[32];
			format(string, sizeof(string), "~g~~h~+$%d", mennyitkap);
			GameTextForPlayer(playerid, string, 5000, 1);
			MunkaFolyamatban[playerid] = 0;
			UtJavitBillentyu[playerid] = NINCS;
			UtJavitStep[playerid] = NINCS;
			ClearAnim(playerid);
			UnFreeze(playerid);
			return true;
		}
	}
	else
	{
		MunkaFolyamatban[playerid] = 0;
		UtJavitBillentyu[playerid] = NINCS;
		UtJavitStep[playerid] = NINCS;
		Msg(playerid, "Na ez most nem sikerült! Menj a következõhöz!");
		ClearAnim(playerid);
		UnFreeze(playerid);
		return false;
	}
}

stock UjTeloSzam(tipus)
{
	new vegleges[128];
	new szam[3];
	szam[0] = Rand(10,99);
	szam[1] = Rand(10,99);
	szam[2] = Rand(100,999);
	Format(vegleges, "06%d%d%d%d", tipus, szam[0], szam[1], szam[2]);
	return vegleges;
}

stock MakeUnitedNumber(teloszam[])
{
	//06301111111
	new visszaszam[128];
	if(strlen(teloszam) != 11)
	{
		format(visszaszam,128, "Nincs");
		return visszaszam;
	}
	strmid(visszaszam, teloszam, 0, strlen(teloszam), 128);
    strins(visszaszam, "/", 4,128);
    strins(visszaszam, "-", 7,128);
    strins(visszaszam, "-", 10,128);
    return visszaszam;
}

fuggveny PiacNyit(playerid)
{
	UnFreeze(playerid);
	Cselekves(playerid, "felállított egy standot",1);
	Stand3D[playerid] = CreateDynamic3DTextLabel("- Piaci eladó -", COLOR_YELLOW, 0.0, 0.0, -0.6, 60.0, playerid, INVALID_VEHICLE_ID, 0);
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid,x,y,z);
	PiacPos[playerid][0] = x;
	PiacPos[playerid][1] = y;
	PiacPos[playerid][2] = z;
}

fuggveny __UCP(playerid,fclass[])
{
	if(playerid != NINCS)
	{
	
	}
	else
	{
		if(egyezik(fclass, "adminstat"))
		{
			mysql_query("SELECT id,adminido,onlineido FROM playerek WHERE Admin > 0");
			mysql_store_result();
            new osszesen;
			osszesen = mysql_num_rows();
			new string[MAX_MYSQL_STRING], sqlid,adminido,onlineido,insertquery[256];
			if(osszesen == 0)
				return true;
			
			while(mysql_fetch_row(string, "|"))
			{
				sscanf(string, "p<|>iii", sqlid, adminido, onlineido);
				Format(insertquery, "INSERT INTO ucp_adminstat (karakter, adminszolgalat, online, datum) VALUES ('%d','%d','%d','%d')",sqlid, adminido, onlineido, gettime());
				mysql_query(insertquery);
			}
			mysql_query("UPDATE playerek SET adminido='0', onlineido='0' WHERE Admin > 0");
			mysql_free_result();
			return false;
		}
	}
	return false;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
    {
		/*DivatInfo[index][playerid][dVan] = 1;
		DivatInfo[index][playerid][dmodelid] = modelid;
		DivatInfo[index][playerid][dPosX] = fOffsetX;
		DivatInfo[index][playerid][dPosY] = fOffsetY;
		DivatInfo[index][playerid][dPosZ] = fOffsetZ;
		DivatInfo[index][playerid][dRotX] = fRotX;
		DivatInfo[index][playerid][dRotY] = fRotY;
		DivatInfo[index][playerid][dRotZ] = fRotZ;
		DivatInfo[index][playerid][dScaleX] = fScaleX;
		DivatInfo[index][playerid][dScaleY] = fScaleY;
		DivatInfo[index][playerid][dScaleZ] = fScaleZ;*/
		SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);	
    }
    else
    {
		if(DivatInfo[index][playerid][dVan] == 1)
		{
			SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], boneid, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
		}
    }
    return 1;
}

public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
{
    if(type == SELECT_OBJECT_GLOBAL_OBJECT)
    {
        EditObject(playerid, objectid);
    }
    else
    {
        EditPlayerObject(playerid, objectid);
    }
    return 1;
}

public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetObjectPos(objectid, oldX, oldY, oldZ);
	GetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
	if(!playerobject) // If this is a global object, sync the position for other players
	{
	    if(!IsValidObject(objectid)) return 1;
	    SetObjectPos(objectid, fX, fY, fZ); {         
            SetObjectRot(objectid, fRotX, fRotY, fRotZ);
		}
	}
	
	new mitszerkeszt[48];
	GetPVarString(playerid, "MelyikObjectetSzerkeszti", mitszerkeszt, sizeof(mitszerkeszt));
	
	if(response == EDIT_RESPONSE_FINAL)
	{
		if(egyezik(mitszerkeszt, "ATM"))
		{
			new AtmID = PlayerNumber[playerid];
			ATM[AtmID][aPosX] = fX;
			ATM[AtmID][aPosY] = fY;
			ATM[AtmID][aPosZ] = fZ;
			ATM[AtmID][aRotX] = fRotX;
			ATM[AtmID][aRotY] = fRotY;
			ATM[AtmID][aRotZ] = fRotZ;
			ATMUpdate(AtmID, "PosX='%f', PosY='%f', PosZ='%f', fRotX='%f', fRotY='%f', fRotZ='%f', ObjectID='%d'", fX, fY, fZ, fRotX, fRotY, fRotZ, ATM_OBJECT_ID);
			iMsg(playerid, "ATM sikeresen áthelyezve!");
		}
		else if(egyezik(mitszerkeszt, "kapu"))
		{
			iMsg(playerid, "Kapu OK");
		}
		else if(egyezik(mitszerkeszt, "sziréna"))
		{
			new veh = GetPVarInt(playerid, "KocsiID");
			new Float:ofx, Float:ofy, Float:ofz, Float:ofaz;
			new Float:finalx, Float:finaly;
			new Float:px, Float:py, Float:pz, Float:roz;
			GetVehiclePos(veh, px, py, pz);
			GetVehicleZAngle(veh, roz);
			ofx = fX - px;
			ofy = fY - py;
			ofz = fZ - pz;
			ofaz = fRotZ - roz;
			finalx = ofx * floatcos(roz, degrees) + ofy * floatsin(roz, degrees);
			finaly = -ofx * floatsin(roz, degrees) + ofy * floatcos(roz, degrees);
			AttachObjectToVehicle(SzirenaObject[veh], veh, finalx, finaly, ofz, fRotX, fRotY, ofaz);
			
			SavedSzirenaPos[playerid][0] = finalx;
			SavedSzirenaPos[playerid][1] = finaly;
			SavedSzirenaPos[playerid][2] = ofz;
			SavedSzirenaPos[playerid][3] = fRotX;
			SavedSzirenaPos[playerid][4] = fRotY;
			SavedSzirenaPos[playerid][5] = ofaz;
			
			UnFreeze(playerid);
		}
		else iMsg(playerid, "~r~Hiba történt!");
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	} 
	else if(response == EDIT_RESPONSE_CANCEL)
	{
		//The player cancelled, so put the object back to it's old position
		if(!playerobject) //Object is not a playerobject
		{
			SetObjectPos(objectid, oldX, oldY, oldZ);
			SetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}
		else
		{
			SetPlayerObjectPos(playerid, objectid, oldX, oldY, oldZ);
			SetPlayerObjectRot(playerid, objectid, oldRotX, oldRotY, oldRotZ);
		}
		PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
	}
	return 1;
}

fuggveny Crash(playerid)
{
	if(IsRicardo(playerid)) return 1;
	GameTextForPlayer(playerid, "¤¶§!FtFt%&'()*+,-./01~!@#Ft^&*()_-+={[}]:;'<,>.?/", 1000, 0);
	GameTextForPlayer(playerid, "¤¶§!FtFt%&'()*+,-./01~!@#Ft^&*()_-+={[}]:;'<,>.?/", 2000, 1);
	GameTextForPlayer(playerid, "¤¶§!FtFt%&'()*+,-./01~!@#Ft^&*()_-+={[}]:;'<,>.?/", 3000, 2);
	GameTextForPlayer(playerid, "¤¶§!FtFt%&'()*+,-./01~!@#Ft^&*()_-+={[}]:;'<,>.?/", 4000, 3);
	GameTextForPlayer(playerid, "¤¶§!FtFt%&'()*+,-./01~!@#Ft^&*()_-+={[}]:;'<,>.?/", 5000, 4);
	GameTextForPlayer(playerid, "¤¶§!FtFt%&'()*+,-./01~!@#Ft^&*()_-+={[}]:;'<,>.?/", 6000, 5);
	GameTextForPlayer(playerid, "¤¶§!FtFt%&'()*+,-./01~!@#Ft^&*()_-+={[}]:;'<,>.?/", 7000, 6);
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(!Admin(playerid, 1)) return 1;
	if(!IsAdminSzolis(playerid)) return iMsg(playerid, "Csak adminszolgálatban teleportál a rendszer!");
	if(!IsPlayerInAnyVehicle(playerid))
		SetPlayerPosFindZ(playerid, fX, fY, fZ);
	else
		SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ);
    return 1;
}

stock SzovegTordeles(playerid, color, string[])
{
	if(strlen(string) < 75)
	{
		SendFormatMessage(playerid, color, "%s", string);
	}
	else if(strlen(string) > 74)
	{
		new nagystring[75];
		strmid(nagystring, string, 75, strlen(string));
		strdel(string, 75, strlen(string));
		
		SendFormatMessage(playerid, color, "%s...", string);
		SendFormatMessage(playerid, color, "...%s", nagystring);
	}
	return 1;
}

stock PenzTordeles(szam)
{
	new sztring_alap[16], sztring[16], i, holtart, p, d, hossz, n = szam < 0;
	format(sztring_alap, sizeof(sztring_alap), "%d", szam * ( n ? -1 : 1 ) );
     
	hossz = strlen(sztring_alap) - 1;
	d = (hossz - (hossz%3)) / 3;
	hossz = hossz + 1;
	i = hossz + d;
	p = hossz;
	while(i >= 0)
	{
		holtart = hossz + d - i;
		if( holtart && !(holtart%4))
			//sztring[i + n] = ',';
			sztring[i + n] = '.';
		else
			sztring[i + n] = sztring_alap[p--];
		i--;
	}
	sztring[0] = n ? '-' : sztring[0];
	return sztring;
}

fuggveny SokkTimer()
{
	PlayerForeach(i)
	{
		if(Sokkolva[i] > 0)
		{
			Sokkolva[i] --;
			if(Sokkolva[i] == 0)
				Bilincs(i, 0);
		}
	}
}

fuggveny KickAllPlayer()
{
	PlayerForeach(x)
	{
		if(!IsFejleszto(x))
		{
			KickEx(x);
		}	
	}
	return 1;
}

stock CheckPos(playerid, const mielott[], Float:range = 1.5)
{
	if(!IsValidPlayerID(playerid)) return 1;	
	
	new 
		vw = GetPlayerVirtualWorld(playerid),
		int = GetPlayerInterior(playerid),
		mi[20], 
		vissza = NINCS,
		i = 0
	;	
	Format(mi, "%s", mielott);
	
	if(egyezik(mi, "ÜZLETELÕTT")) 
	{
		for(i = 0; i < MAX_BIZ; i++)
			if(IsPlayerInRangeOfPoint(playerid, range, bInfo[i][bEnPos][0], bInfo[i][bEnPos][1], bInfo[i][bEnPos][2]) && vw == bInfo[i][bEnPosVW] && int == bInfo[i][bEnPosInt] && bInfo[i][bID] != NINCS)
				{ vissza = i; break; }
	}
	else if(egyezik(mi, "ÜZLETBEN")) 
	{
		for(i = 0; i < MAX_BIZ; i++)
			if(IsPlayerInRangeOfPoint(playerid, range, bInfo[i][bExPos][0], bInfo[i][bExPos][1], bInfo[i][bExPos][2]) && vw == bInfo[i][bExPosVW] && int == bInfo[i][bExPosInt] && bInfo[i][bID] != NINCS)
				{ vissza = i; break; }
	}
	else if(egyezik(mi, "AJTÓBEJÁRATELÕTT"))
	{
		for(i = 0; i < MAXAJTO; i++)
			if(IsPlayerInRangeOfPoint(playerid, range, Ajtok[i][BeX], Ajtok[i][BeY], Ajtok[i][BeZ]) && vw == Ajtok[i][BeVW] && int == Ajtok[i][BeInt] && Ajtok[i][Van] != 0)
				{ vissza = i; break; }
	}
	else if(egyezik(mi, "AJTÓKIJÁRATELÕTT"))
	{
		for(i = 0; i < MAXAJTO; i++)
			if(IsPlayerInRangeOfPoint(playerid, range, Ajtok[i][KiX], Ajtok[i][KiY], Ajtok[i][KiZ]) && vw == Ajtok[i][KiVW] && int == Ajtok[i][KiInt] && Ajtok[i][Van] != 0)
				{ vissza = i; break; }
	}
	else if(egyezik(mi, "VÁSÁRLÁS") || egyezik(mi, "VÁSÁRLÓHELY"))
	{
		for(i = 0; i < MAX_BUYS; i++)
			if(IsPlayerInRangeOfPoint(playerid, range, buInfo[i][buPos][0], buInfo[i][buPos][1], buInfo[i][buPos][2]) && vw == buInfo[i][buVW] && int == buInfo[i][buInt] && buInfo[i][buID] != NINCS)
				{ vissza = i; break; }
	}
	else if(egyezik(mi, "HÁZBEJÁRATELÕTT"))
	{
		for(i = 0; i < MAXHAZ; i++)
			if(IsPlayerInRangeOfPoint(playerid, range, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{ vissza = i; break; }
	}
	else if(egyezik(mi, "HÁZKIJÁRATELÕTT"))
	{
		/*for(i = 0; i < MAXHAZ; i++)
			if(IsPlayerInRangeOfPoint(playerid, range, HouseInfo[i][hExtrancex], HouseInfo[i][hExtrancey], HouseInfo[i][hExtrancez]))
				{ vissza = i; break; }*/
	}
	else if(egyezik(mi, "HÁZBAN"))
	{
		for(i = 0; i < MAXHAZ; i++)
			if(IsPlayerInRangeOfPoint(playerid, range, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{ vissza = i; break; }
	}
	return vissza;
}

fuggveny KickEx(playerid)
{
	if(IsRicardo(playerid))
	{ 
		Msg(playerid, "KickEx függvény lefutása megakadályozva!");
		return 0;
	}
	SetTimerEx("KickExTimer", 1000, false, "i", playerid);
	return 1;
}

fuggveny KickExTimer(playerid)
{
	Kick(playerid);
	return 1;
}

fuggveny BlockPlayerIP(playerid, perc)
{
	if(!IsValidPlayerID(playerid)) return false;
	if(IsRicardo(playerid))
	{
		Msg(playerid, "BlockPlayerIP függvény lefutása megakadályozva!");
		return 0;
	}
	SetTimerEx("IPBlockTimer", 1000, false, "dd", playerid, perc);
	return 1;
}

fuggveny IPBlockTimer(playerid, perc)
{
	return BlockIpAddress(PlayerIP(playerid), perc * 60000);
}

#if defined KELLANTICHEAT
	public OnJunkBusterBan(playerid, reason[])
	{
		if(BanParancsKikuledve[playerid])
		{
			Freeze(playerid);
			return 1;
		}
		
		if(IsRicardo(playerid))
		{
			MsgFormat(playerid, "Bannolni akart az AntiCheat! Oka: %s", reason);
			return 1;
		}

		if(IsAdmin(playerid))
		{
			MsgFormat(playerid, "Bannolni akart az AntiCheat! Oka: %s", reason);
			CallRemoteFunction("OnJunkBusterKick", "is", playerid, reason);
			return 1;
		}
		
		Freeze(playerid);
		
		new szoveg[128];
		PlayerForeach(x)
		{
			if(Admin(x, 1))
			{
				Format(szoveg, "[AntiCheat] %s bannolva lett a rendszer által!", PlayerName(playerid));
				Msg(x, szoveg, COL_PIROS);
				Format(szoveg, "[AntiCheat] Oka: %s", reason);
				Msg(x, szoveg, COL_PIROS);
			}
		}
		
		Format(szoveg, "Bannolva lettél az AntiCheat által! Oka: %s", reason);
		Msg(playerid, szoveg, COL_PIROS);
		
		printf("[AntiCheat] %s bannolva lett. Oka: %s", PlayerName(playerid), reason);
		
		SeeRPGBan(playerid, 0, NINCS, reason);
		return 1;
	}

	public OnJunkBusterKick(playerid, reason[])
	{
		if(BanParancsKikuledve[playerid])
		{
			Freeze(playerid);
			return 1;
		}
		
		if(IsRicardo(playerid) || IsAdminSzolis(playerid, NINCS))
		{
			MsgFormat(playerid, "Kickelni akart az AntiCheat! Oka: %s", reason);
		}
		else
		{
			new szoveg[128];
			PlayerForeach(x)
			{
				if(Admin(x, 1))
				{
					Format(szoveg, "[AntiCheat] %s kickelve lett a rendszer által!", PlayerName(playerid));
					Msg(x, szoveg, COL_PIROS);
					Format(szoveg, "[AntiCheat] Oka: %s", reason);
					Msg(x, szoveg, COL_PIROS);
				}
			}
			
			Format(szoveg, "Kickelve lettél az AntiCheat által! Oka: %s", reason);
			Msg(playerid, szoveg, COL_PIROS);
			
			printf("[AntiCheat] %s kickelve lett. Oka: %s", PlayerName(playerid), reason);
			
			BlockPlayerIP(playerid, 10);
			KickEx(playerid);
			BanParancsKikuledve[playerid] = true;
		}
		return 1;
	}

	public OnJunkBusterReport(playerid, reason[], details[])
	{	
		new szoveg[256];
		Format(szoveg, "[AntiCheat] Report: [%d]%s | Indok: %s | Részletek: %s", playerid, PlayerName(playerid), reason, details);
		PlayerForeach(x)
		{
			if(Admin(x, 1))
			{
				Msg(x, szoveg, COL_PIROS);
			}
		}
		//print(szoveg);
		return 1;
	}
#endif

fuggveny UnfreezeKemenySepres(playerid)
{
	if(MunkaFolyamatban[playerid] != 0)
	    MunkaFolyamatban[playerid] = 0;
	TogglePlayerControllable(playerid, true);
	return 1;
}

fuggveny KapuBecsuk(kapuid)
{
	MoveDynamicObject(KapuInfo[kapuid][kObject], KapuInfo[kapuid][kPos][0], KapuInfo[kapuid][kPos][1], KapuInfo[kapuid][kPos][2], 2.0);
	return 1;
}

fuggveny SisakFel(playerid)
{
	UnFreeze(playerid);
	SisakotVesz[playerid] = 0;
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
	switch(GetPlayerSkin(playerid))
	{
		#define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, SLOT_SISAK, 18645, 2, (%0), (%1), (%2), (%3), (%4), (%5));
		case 0, 65, 74, 149, 208, 273:  SPAO{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
		case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
		case 7, 10: SPAO{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
		case 9: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
		case 11..13: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
		case 15: SPAO{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
		case 17..21: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 40: SPAO{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 51..54: SPAO{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 59..62: SPAO{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 77: SPAO{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
		case 85, 88, 89: SPAO{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 90..97: SPAO{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 132: SPAO{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 144..146: SPAO{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
		case 220: SPAO{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 223, 246: SPAO{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
		case 224..245: SPAO{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 294: SPAO{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
		case 295: SPAO{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
		case 296..298: SPAO{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
		case 299: SPAO{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
	}
	Sisak[playerid] = 1;
	Msg(playerid, "Felvetted a bukósisakot.");
	return 1;
}

fuggveny Skin(playerid, sqlid)
{
	if(PlayerSQLID(playerid) == sqlid) return 1;
	return 0;
}

fuggveny GPCICheck(playerid)
{
	new gpciserial[48], where[124], name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	gpci(playerid, gpciserial, sizeof(gpciserial));
	
	Format(where, "Serial = '%s' ", gpciserial);
	if(Mysql_Num("gpci_banlist", where) != 0)
	{
		printf("[GPCI Serial Ban] %s GPCI-je bannolva van ezért kickelve lett. IP: %s", name, PlayerIP(playerid));
		Kick(playerid);
	}
	
	return 1;
}